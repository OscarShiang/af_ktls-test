cscope 15 $HOME/openssl/include/openssl               0002030933
	@__DECC_INCLUDE_EPILOGUE.H

16 #¥agm®
«mes
 
ª°‹e


	@__DECC_INCLUDE_PROLOGUE.H

16 #¥agm®
«mes
 
ßve


20 #¥agm®
«mes
 
as_is
,
sh‹ã√d


	@aes.h

10 #i‚de‡
HEADER_AES_H


11 
	#HEADER_AES_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 
	~<°ddef.h
>

16 #ifde‡ 
__˝lu•lus


20 
	#AES_ENCRYPT
 1

	)

21 
	#AES_DECRYPT
 0

	)

27 
	#AES_MAXNR
 14

	)

28 
	#AES_BLOCK_SIZE
 16

	)

31 
	s´s_key_°
 {

32 #ifde‡
AES_LONG


33 
rd_key
[4 * (
AES_MAXNR
 + 1)];

35 
rd_key
[4 * (
AES_MAXNR
 + 1)];

37 
rounds
;

39 
´s_key_°
 
	tAES_KEY
;

41 c⁄° *
AES_›ti⁄s
();

43 
AES_£t_í¸y±_key
(c⁄° *
u£rKey
, c⁄° 
bôs
,

44 
AES_KEY
 *
key
);

45 
AES_£t_de¸y±_key
(c⁄° *
u£rKey
, c⁄° 
bôs
,

46 
AES_KEY
 *
key
);

48 
AES_í¸y±
(c⁄° *
ö
, *
out
,

49 c⁄° 
AES_KEY
 *
key
);

50 
AES_de¸y±
(c⁄° *
ö
, *
out
,

51 c⁄° 
AES_KEY
 *
key
);

53 
AES_ecb_í¸y±
(c⁄° *
ö
, *
out
,

54 c⁄° 
AES_KEY
 *
key
, c⁄° 
íc
);

55 
AES_cbc_í¸y±
(c⁄° *
ö
, *
out
,

56 
size_t
 
Àngth
, c⁄° 
AES_KEY
 *
key
,

57 *
ivec
, c⁄° 
íc
);

58 
AES_cfb128_í¸y±
(c⁄° *
ö
, *
out
,

59 
size_t
 
Àngth
, c⁄° 
AES_KEY
 *
key
,

60 *
ivec
, *
num
, c⁄° 
íc
);

61 
AES_cfb1_í¸y±
(c⁄° *
ö
, *
out
,

62 
size_t
 
Àngth
, c⁄° 
AES_KEY
 *
key
,

63 *
ivec
, *
num
, c⁄° 
íc
);

64 
AES_cfb8_í¸y±
(c⁄° *
ö
, *
out
,

65 
size_t
 
Àngth
, c⁄° 
AES_KEY
 *
key
,

66 *
ivec
, *
num
, c⁄° 
íc
);

67 
AES_ofb128_í¸y±
(c⁄° *
ö
, *
out
,

68 
size_t
 
Àngth
, c⁄° 
AES_KEY
 *
key
,

69 *
ivec
, *
num
);

71 
AES_ige_í¸y±
(c⁄° *
ö
, *
out
,

72 
size_t
 
Àngth
, c⁄° 
AES_KEY
 *
key
,

73 *
ivec
, c⁄° 
íc
);

75 
AES_bi_ige_í¸y±
(c⁄° *
ö
, *
out
,

76 
size_t
 
Àngth
, c⁄° 
AES_KEY
 *
key
,

77 c⁄° 
AES_KEY
 *
key2
, c⁄° *
ivec
,

78 c⁄° 
íc
);

80 
AES_wøp_key
(
AES_KEY
 *
key
, c⁄° *
iv
,

81 *
out
,

82 c⁄° *
ö
, 
öÀn
);

83 
AES_unwøp_key
(
AES_KEY
 *
key
, c⁄° *
iv
,

84 *
out
,

85 c⁄° *
ö
, 
öÀn
);

88 #ifde‡ 
__˝lu•lus


	@asn1.h

10 #i‚de‡
HEADER_ASN1_H


11 
	#HEADER_ASN1_H


	)

13 
	~<time.h
>

14 
	~<›ís¶/e_os2.h
>

15 
	~<›ís¶/›ís¶c⁄f.h
>

16 
	~<›ís¶/bio.h
>

17 
	~<›ís¶/°ack.h
>

18 
	~<›ís¶/ß„°ack.h
>

20 
	~<›ís¶/symhacks.h
>

22 
	~<›ís¶/os¶_typ.h
>

23 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

24 
	~<›ís¶/bn.h
>

27 #ifde‡
OPENSSL_BUILD_SHLIBCRYPTO


28 #unde‡
OPENSSL_EXTERN


29 
	#OPENSSL_EXTERN
 
OPENSSL_EXPORT


	)

32 #ifde‡ 
__˝lu•lus


36 
	#V_ASN1_UNIVERSAL
 0x00

	)

37 
	#V_ASN1_APPLICATION
 0x40

	)

38 
	#V_ASN1_CONTEXT_SPECIFIC
 0x80

	)

39 
	#V_ASN1_PRIVATE
 0xc0

	)

41 
	#V_ASN1_CONSTRUCTED
 0x20

	)

42 
	#V_ASN1_PRIMITIVE_TAG
 0x1f

	)

43 
	#V_ASN1_PRIMATIVE_TAG
 0x1f

	)

45 
	#V_ASN1_APP_CHOOSE
 -2

	)

46 
	#V_ASN1_OTHER
 -3

	)

47 
	#V_ASN1_ANY
 -4

	)

49 
	#V_ASN1_UNDEF
 -1

	)

51 
	#V_ASN1_EOC
 0

	)

52 
	#V_ASN1_BOOLEAN
 1

	)

53 
	#V_ASN1_INTEGER
 2

	)

54 
	#V_ASN1_BIT_STRING
 3

	)

55 
	#V_ASN1_OCTET_STRING
 4

	)

56 
	#V_ASN1_NULL
 5

	)

57 
	#V_ASN1_OBJECT
 6

	)

58 
	#V_ASN1_OBJECT_DESCRIPTOR
 7

	)

59 
	#V_ASN1_EXTERNAL
 8

	)

60 
	#V_ASN1_REAL
 9

	)

61 
	#V_ASN1_ENUMERATED
 10

	)

62 
	#V_ASN1_UTF8STRING
 12

	)

63 
	#V_ASN1_SEQUENCE
 16

	)

64 
	#V_ASN1_SET
 17

	)

65 
	#V_ASN1_NUMERICSTRING
 18

	)

66 
	#V_ASN1_PRINTABLESTRING
 19

	)

67 
	#V_ASN1_T61STRING
 20

	)

68 
	#V_ASN1_TELETEXSTRING
 20

	)

69 
	#V_ASN1_VIDEOTEXSTRING
 21

	)

70 
	#V_ASN1_IA5STRING
 22

	)

71 
	#V_ASN1_UTCTIME
 23

	)

72 
	#V_ASN1_GENERALIZEDTIME
 24

	)

73 
	#V_ASN1_GRAPHICSTRING
 25

	)

74 
	#V_ASN1_ISO64STRING
 26

	)

75 
	#V_ASN1_VISIBLESTRING
 26

	)

76 
	#V_ASN1_GENERALSTRING
 27

	)

77 
	#V_ASN1_UNIVERSALSTRING
 28

	)

78 
	#V_ASN1_BMPSTRING
 30

	)

86 
	#V_ASN1_NEG
 0x100

	)

87 
	#V_ASN1_NEG_INTEGER
 (2 | 
V_ASN1_NEG
)

	)

88 
	#V_ASN1_NEG_ENUMERATED
 (10 | 
V_ASN1_NEG
)

	)

91 
	#B_ASN1_NUMERICSTRING
 0x0001

	)

92 
	#B_ASN1_PRINTABLESTRING
 0x0002

	)

93 
	#B_ASN1_T61STRING
 0x0004

	)

94 
	#B_ASN1_TELETEXSTRING
 0x0004

	)

95 
	#B_ASN1_VIDEOTEXSTRING
 0x0008

	)

96 
	#B_ASN1_IA5STRING
 0x0010

	)

97 
	#B_ASN1_GRAPHICSTRING
 0x0020

	)

98 
	#B_ASN1_ISO64STRING
 0x0040

	)

99 
	#B_ASN1_VISIBLESTRING
 0x0040

	)

100 
	#B_ASN1_GENERALSTRING
 0x0080

	)

101 
	#B_ASN1_UNIVERSALSTRING
 0x0100

	)

102 
	#B_ASN1_OCTET_STRING
 0x0200

	)

103 
	#B_ASN1_BIT_STRING
 0x0400

	)

104 
	#B_ASN1_BMPSTRING
 0x0800

	)

105 
	#B_ASN1_UNKNOWN
 0x1000

	)

106 
	#B_ASN1_UTF8STRING
 0x2000

	)

107 
	#B_ASN1_UTCTIME
 0x4000

	)

108 
	#B_ASN1_GENERALIZEDTIME
 0x8000

	)

109 
	#B_ASN1_SEQUENCE
 0x10000

	)

111 
	#MBSTRING_FLAG
 0x1000

	)

112 
	#MBSTRING_UTF8
 (
MBSTRING_FLAG
)

	)

113 
	#MBSTRING_ASC
 (
MBSTRING_FLAG
|1)

	)

114 
	#MBSTRING_BMP
 (
MBSTRING_FLAG
|2)

	)

115 
	#MBSTRING_UNIV
 (
MBSTRING_FLAG
|4)

	)

116 
	#SMIME_OLDMIME
 0x400

	)

117 
	#SMIME_CRLFEOL
 0x800

	)

118 
	#SMIME_STREAM
 0x1000

	)

119 
X509_Æg‹_°
;

120 
DEFINE_STACK_OF
(
X509_ALGOR
)

122 
	#ASN1_STRING_FLAG_BITS_LEFT
 0x08

	)

128 
	#ASN1_STRING_FLAG_NDEF
 0x010

	)

136 
	#ASN1_STRING_FLAG_CONT
 0x020

	)

141 
	#ASN1_STRING_FLAG_MSTRING
 0x040

	)

143 
	#ASN1_STRING_FLAG_EMBED
 0x080

	)

145 
	sa¢1_°rög_°
 {

146 
Àngth
;

147 
ty≥
;

148 *
d©a
;

154 
Êags
;

163 
	sASN1_ENCODING_°
 {

164 *
íc
;

165 
Àn
;

166 
modifõd
;

167 } 
	tASN1_ENCODING
;

170 
	#ASN1_LONG_UNDEF
 0x7fffffffL

	)

172 
	#STABLE_FLAGS_MALLOC
 0x01

	)

179 
	#STABLE_FLAGS_CLEAR
 
STABLE_FLAGS_MALLOC


	)

180 
	#STABLE_NO_MASK
 0x02

	)

181 
	#DIRSTRING_TYPE
 \

182 (
B_ASN1_PRINTABLESTRING
|
B_ASN1_T61STRING
|
B_ASN1_BMPSTRING
|
B_ASN1_UTF8STRING
)

	)

183 
	#PKCS9STRING_TYPE
 (
DIRSTRING_TYPE
|
B_ASN1_IA5STRING
)

	)

185 
	sa¢1_°rög_èbÀ_°
 {

186 
nid
;

187 
mösize
;

188 
maxsize
;

189 
mask
;

190 
Êags
;

191 } 
	tASN1_STRING_TABLE
;

193 
DEFINE_STACK_OF
(
ASN1_STRING_TABLE
)

197 
	#ub_«me
 32768

	)

198 
	#ub_comm⁄_«me
 64

	)

199 
	#ub_loˇlôy_«me
 128

	)

200 
	#ub_°©e_«me
 128

	)

201 
	#ub_‹g™iz©i⁄_«me
 64

	)

202 
	#ub_‹g™iz©i⁄_unô_«me
 64

	)

203 
	#ub_tôÀ
 64

	)

204 
	#ub_emaû_addªss
 128

	)

209 
ASN1_TEMPLATE_°
 
	tASN1_TEMPLATE
;

210 
ASN1_TLC_°
 
	tASN1_TLC
;

212 
ASN1_VALUE_°
 
	tASN1_VALUE
;

216 
	#DECLARE_ASN1_FUNCTIONS
(
ty≥
Ë
	`DECLARE_ASN1_FUNCTIONS_«me
—y≥,Åy≥)

	)

218 
	#DECLARE_ASN1_ALLOC_FUNCTIONS
(
ty≥
) \

219 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
,Åy≥)

	)

221 
	#DECLARE_ASN1_FUNCTIONS_«me
(
ty≥
, 
«me
) \

222 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

223 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
«me
,Çame)

	)

225 
	#DECLARE_ASN1_FUNCTIONS_‚ame
(
ty≥
, 
ô«me
, 
«me
) \

226 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

227 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
)

	)

229 
	#DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
) \

230 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, c⁄° **
ö
, 
Àn
); \

231 
i2d_
##
	`«me
(
ty≥
 *
a
, **
out
); \

232 
	`DECLARE_ASN1_ITEM
(
ô«me
)

	)

234 
	#DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ty≥
, 
«me
) \

235 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, c⁄° **
ö
, 
Àn
); \

236 
i2d_
##
	`«me
(c⁄° 
ty≥
 *
a
, **
out
); \

237 
	`DECLARE_ASN1_ITEM
(
«me
)

	)

239 
	#DECLARE_ASN1_NDEF_FUNCTION
(
«me
) \

240 
i2d_
##
«me
##
	`_NDEF
“amê*
a
, **
out
);

	)

242 
	#DECLARE_ASN1_FUNCTIONS_c⁄°
(
«me
) \

243 
	`DECLARE_ASN1_ALLOC_FUNCTIONS
(
«me
) \

244 
	`DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
«me
,Çame)

	)

246 
	#DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

247 
ty≥
 *
«me
##
	`_√w
(); \

248 
«me
##
	`_‰ì
(
ty≥
 *
a
);

	)

250 
	#DECLARE_ASN1_PRINT_FUNCTION
(
°«me
) \

251 
	`DECLARE_ASN1_PRINT_FUNCTION_‚ame
(
°«me
, säame)

	)

253 
	#DECLARE_ASN1_PRINT_FUNCTION_‚ame
(
°«me
, 
‚ame
) \

254 
‚ame
##
	`_¥öt_˘x
(
BIO
 *
out
, 
°«me
 *
x
, 
ödít
, \

255 c⁄° 
ASN1_PCTX
 *
p˘x
);

	)

257 
	#D2I_OF
(
ty≥
Ëty≥ *(*)—y≥ **,c⁄° **,)

	)

258 
	#I2D_OF
(
ty≥
Ë(*)—y≥ *,**)

	)

259 
	#I2D_OF_c⁄°
(
ty≥
Ë(*)(c⁄°Åy≥ *,**)

	)

261 
	#CHECKED_D2I_OF
(
ty≥
, 
d2i
) \

262 ((
d2i_of_void
*Ë(1 ? 
d2i
 : ((
	`D2I_OF
(
ty≥
))0)))

	)

263 
	#CHECKED_I2D_OF
(
ty≥
, 
i2d
) \

264 ((
i2d_of_void
*Ë(1 ? 
i2d
 : ((
	`I2D_OF
(
ty≥
))0)))

	)

265 
	#CHECKED_NEW_OF
(
ty≥
, 
x√w
) \

266 ((*(*)()Ë(1 ? 
x√w
 : ((
ty≥
 *(*)())0)))

	)

267 
	#CHECKED_PTR_OF
(
ty≥
, 
p
) \

268 ((*Ë(1 ? 
p
 : (
ty≥
*)0))

	)

269 
	#CHECKED_PPTR_OF
(
ty≥
, 
p
) \

270 ((**Ë(1 ? 
p
 : (
ty≥
**)0))

	)

272 
	#TYPEDEF_D2I_OF
(
ty≥
Ëty≥ *
	td2i_of_
##
	tty≥
—y≥ **,c⁄° **,)

	)

273 
	tTYPEDEF_I2D_OF
(
	tty≥
Ë
	ti2d_of_
##ty≥—y≥ *,**)

	)

274 
	tTYPEDEF_D2I2D_OF
(
	tty≥
Ë
	tTYPEDEF_D2I_OF
—y≥); 
	`TYPEDEF_I2D_OF
(
ty≥
)

	)

276 
TYPEDEF_D2I2D_OF
();

314 #i‚de‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


317 c⁄° 
	tASN1_ITEM
 
	tASN1_ITEM_EXP
;

320 
	#ASN1_ITEM_±r
(
ùå
Ë(ùå)

	)

323 
	#ASN1_ITEM_ªf
(
ùå
Ë(&(ùå##
_ô
))

	)

325 
	#ASN1_ITEM_Ωå
(
ªf
Ë(&‘ef##
_ô
))

	)

327 
	#DECLARE_ASN1_ITEM
(
«me
) \

328 
OPENSSL_EXTERN
 c⁄° 
ASN1_ITEM
 
«me
##
_ô
;

	)

338 c⁄° 
	tASN1_ITEM
 *
	tASN1_ITEM_EXP
 ();

341 
	#ASN1_ITEM_±r
(
ùå
Ë(
	`ùå
())

	)

344 
	#ASN1_ITEM_ªf
(
ùå
Ë(ùå##
_ô
)

	)

346 
	#ASN1_ITEM_Ωå
(
ªf
Ë‘ef##
	`_ô
())

	)

348 
	#DECLARE_ASN1_ITEM
(
«me
) \

349 c⁄° 
ASN1_ITEM
 * 
«me
##
	`_ô
();

	)

360 
	#ASN1_STRFLGS_ESC_2253
 1

	)

361 
	#ASN1_STRFLGS_ESC_CTRL
 2

	)

362 
	#ASN1_STRFLGS_ESC_MSB
 4

	)

369 
	#ASN1_STRFLGS_ESC_QUOTE
 8

	)

374 
	#CHARTYPE_PRINTABLESTRING
 0x10

	)

376 
	#CHARTYPE_FIRST_ESC_2253
 0x20

	)

378 
	#CHARTYPE_LAST_ESC_2253
 0x40

	)

389 
	#ASN1_STRFLGS_UTF8_CONVERT
 0x10

	)

397 
	#ASN1_STRFLGS_IGNORE_TYPE
 0x20

	)

400 
	#ASN1_STRFLGS_SHOW_TYPE
 0x40

	)

410 
	#ASN1_STRFLGS_DUMP_ALL
 0x80

	)

411 
	#ASN1_STRFLGS_DUMP_UNKNOWN
 0x100

	)

418 
	#ASN1_STRFLGS_DUMP_DER
 0x200

	)

423 
	#ASN1_STRFLGS_ESC_2254
 0x400

	)

430 
	#ASN1_STRFLGS_RFC2253
 (
ASN1_STRFLGS_ESC_2253
 | \

431 
ASN1_STRFLGS_ESC_CTRL
 | \

432 
ASN1_STRFLGS_ESC_MSB
 | \

433 
ASN1_STRFLGS_UTF8_CONVERT
 | \

434 
ASN1_STRFLGS_DUMP_UNKNOWN
 | \

435 
ASN1_STRFLGS_DUMP_DER
)

	)

437 
DEFINE_STACK_OF
(
ASN1_INTEGER
)

439 
DEFINE_STACK_OF
(
ASN1_GENERALSTRING
)

441 
DEFINE_STACK_OF
(
ASN1_UTF8STRING
)

443 
	sa¢1_ty≥_°
 {

444 
ty≥
;

446 *
±r
;

447 
ASN1_BOOLEAN
 
boﬁón
;

448 
ASN1_STRING
 *
a¢1_°rög
;

449 
ASN1_OBJECT
 *
obje˘
;

450 
ASN1_INTEGER
 *
öãgî
;

451 
ASN1_ENUMERATED
 *
íumî©ed
;

452 
ASN1_BIT_STRING
 *
bô_°rög
;

453 
ASN1_OCTET_STRING
 *
o˘ë_°rög
;

454 
ASN1_PRINTABLESTRING
 *
¥öèbÀ°rög
;

455 
ASN1_T61STRING
 *
t61°rög
;

456 
ASN1_IA5STRING
 *
ü5°rög
;

457 
ASN1_GENERALSTRING
 *
gíîÆ°rög
;

458 
ASN1_BMPSTRING
 *
bmp°rög
;

459 
ASN1_UNIVERSALSTRING
 *
univîßl°rög
;

460 
ASN1_UTCTIME
 *
ut˘ime
;

461 
ASN1_GENERALIZEDTIME
 *
gíîÆizedtime
;

462 
ASN1_VISIBLESTRING
 *
visibÀ°rög
;

463 
ASN1_UTF8STRING
 *
utf8°rög
;

468 
ASN1_STRING
 *
£t
;

469 
ASN1_STRING
 *
£quí˚
;

470 
ASN1_VALUE
 *
a¢1_vÆue
;

471 } 
vÆue
;

472 } 
	tASN1_TYPE
;

474 
DEFINE_STACK_OF
(
ASN1_TYPE
)

476 
STACK_OF
(
	tASN1_TYPE
Ë
	tASN1_SEQUENCE_ANY
;

478 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ASN1_SEQUENCE_ANY
, ASN1_SEQUENCE_ANY)

479 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ASN1_SEQUENCE_ANY
, 
ASN1_SET_ANY
)

482 
	sBIT_STRING_BITNAME_°
 {

483 
bônum
;

484 c⁄° *
 ame
;

485 c⁄° *
¢ame
;

486 } 
	tBIT_STRING_BITNAME
;

488 
	#B_ASN1_TIME
 \

489 
B_ASN1_UTCTIME
 | \

490 
B_ASN1_GENERALIZEDTIME


	)

492 
	#B_ASN1_PRINTABLE
 \

493 
B_ASN1_NUMERICSTRING
| \

494 
B_ASN1_PRINTABLESTRING
| \

495 
B_ASN1_T61STRING
| \

496 
B_ASN1_IA5STRING
| \

497 
B_ASN1_BIT_STRING
| \

498 
B_ASN1_UNIVERSALSTRING
|\

499 
B_ASN1_BMPSTRING
|\

500 
B_ASN1_UTF8STRING
|\

501 
B_ASN1_SEQUENCE
|\

502 
B_ASN1_UNKNOWN


	)

504 
	#B_ASN1_DIRECTORYSTRING
 \

505 
B_ASN1_PRINTABLESTRING
| \

506 
B_ASN1_TELETEXSTRING
|\

507 
B_ASN1_BMPSTRING
|\

508 
B_ASN1_UNIVERSALSTRING
|\

509 
B_ASN1_UTF8STRING


	)

511 
	#B_ASN1_DISPLAYTEXT
 \

512 
B_ASN1_IA5STRING
| \

513 
B_ASN1_VISIBLESTRING
| \

514 
B_ASN1_BMPSTRING
|\

515 
B_ASN1_UTF8STRING


	)

517 
DECLARE_ASN1_FUNCTIONS_‚ame
(
ASN1_TYPE
, 
ASN1_ANY
, ASN1_TYPE)

519 
ASN1_TYPE_gë
(
ASN1_TYPE
 *
a
);

520 
ASN1_TYPE_£t
(
ASN1_TYPE
 *
a
, 
ty≥
, *
vÆue
);

521 
ASN1_TYPE_£t1
(
ASN1_TYPE
 *
a
, 
ty≥
, c⁄° *
vÆue
);

522 
ASN1_TYPE_cmp
(c⁄° 
ASN1_TYPE
 *
a
, c⁄° ASN1_TYPE *
b
);

524 
ASN1_TYPE
 *
ASN1_TYPE_∑ck_£quí˚
(c⁄° 
ASN1_ITEM
 *
ô
, *
s
, ASN1_TYPE **
t
);

525 *
ASN1_TYPE_u≈ack_£quí˚
(c⁄° 
ASN1_ITEM
 *
ô
, c⁄° 
ASN1_TYPE
 *
t
);

527 
ASN1_OBJECT
 *
ASN1_OBJECT_√w
();

528 
ASN1_OBJECT_‰ì
(
ASN1_OBJECT
 *
a
);

529 
i2d_ASN1_OBJECT
(
ASN1_OBJECT
 *
a
, **
µ
);

530 
ASN1_OBJECT
 *
d2i_ASN1_OBJECT
(ASN1_OBJECT **
a
, c⁄° **
µ
,

531 
Àngth
);

533 
DECLARE_ASN1_ITEM
(
ASN1_OBJECT
)

535 
DEFINE_STACK_OF
(
ASN1_OBJECT
)

537 
ASN1_STRING
 *
ASN1_STRING_√w
();

538 
ASN1_STRING_‰ì
(
ASN1_STRING
 *
a
);

539 
ASN1_STRING_˛ór_‰ì
(
ASN1_STRING
 *
a
);

540 
ASN1_STRING_c›y
(
ASN1_STRING
 *
d°
, c⁄° ASN1_STRING *
°r
);

541 
ASN1_STRING
 *
ASN1_STRING_dup
(c⁄° ASN1_STRING *
a
);

542 
ASN1_STRING
 *
ASN1_STRING_ty≥_√w
(
ty≥
);

543 
ASN1_STRING_cmp
(c⁄° 
ASN1_STRING
 *
a
, c⁄° ASN1_STRING *
b
);

548 
ASN1_STRING_£t
(
ASN1_STRING
 *
°r
, c⁄° *
d©a
, 
Àn
);

549 
ASN1_STRING_£t0
(
ASN1_STRING
 *
°r
, *
d©a
, 
Àn
);

550 
ASN1_STRING_Àngth
(c⁄° 
ASN1_STRING
 *
x
);

551 
ASN1_STRING_Àngth_£t
(
ASN1_STRING
 *
x
, 
n
);

552 
ASN1_STRING_ty≥
(
ASN1_STRING
 *
x
);

553 *
ASN1_STRING_d©a
(
ASN1_STRING
 *
x
);

555 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BIT_STRING
)

556 
ASN1_BIT_STRING_£t
(
ASN1_BIT_STRING
 *
a
, *
d
, 
Àngth
);

557 
ASN1_BIT_STRING_£t_bô
(
ASN1_BIT_STRING
 *
a
, 
n
, 
vÆue
);

558 
ASN1_BIT_STRING_gë_bô
(c⁄° 
ASN1_BIT_STRING
 *
a
, 
n
);

559 
ASN1_BIT_STRING_check
(c⁄° 
ASN1_BIT_STRING
 *
a
,

560 c⁄° *
Êags
, 
Êags_Àn
);

562 
ASN1_BIT_STRING_«me_¥öt
(
BIO
 *
out
, 
ASN1_BIT_STRING
 *
bs
,

563 
BIT_STRING_BITNAME
 *
tbl
, 
ödít
);

564 
ASN1_BIT_STRING_num_asc
(c⁄° *
«me
, 
BIT_STRING_BITNAME
 *
tbl
);

565 
ASN1_BIT_STRING_£t_asc
(
ASN1_BIT_STRING
 *
bs
, c⁄° *
«me
, 
vÆue
,

566 
BIT_STRING_BITNAME
 *
tbl
);

568 
DECLARE_ASN1_FUNCTIONS
(
ASN1_INTEGER
)

569 
ASN1_INTEGER
 *
d2i_ASN1_UINTEGER
(ASN1_INTEGER **
a
, c⁄° **
µ
,

570 
Àngth
);

571 
ASN1_INTEGER
 *
ASN1_INTEGER_dup
(c⁄° ASN1_INTEGER *
x
);

572 
ASN1_INTEGER_cmp
(c⁄° 
ASN1_INTEGER
 *
x
, c⁄° ASN1_INTEGER *
y
);

574 
DECLARE_ASN1_FUNCTIONS
(
ASN1_ENUMERATED
)

576 
ASN1_UTCTIME_check
(c⁄° 
ASN1_UTCTIME
 *
a
);

577 
ASN1_UTCTIME
 *
ASN1_UTCTIME_£t
(ASN1_UTCTIME *
s
, 
time_t
 
t
);

578 
ASN1_UTCTIME
 *
ASN1_UTCTIME_adj
(ASN1_UTCTIME *
s
, 
time_t
 
t
,

579 
off£t_day
, 
off£t_£c
);

580 
ASN1_UTCTIME_£t_°rög
(
ASN1_UTCTIME
 *
s
, c⁄° *
°r
);

581 
ASN1_UTCTIME_cmp_time_t
(c⁄° 
ASN1_UTCTIME
 *
s
, 
time_t
 
t
);

583 
ASN1_GENERALIZEDTIME_check
(c⁄° 
ASN1_GENERALIZEDTIME
 *
a
);

584 
ASN1_GENERALIZEDTIME
 *
ASN1_GENERALIZEDTIME_£t
(ASN1_GENERALIZEDTIME *
s
,

585 
time_t
 
t
);

586 
ASN1_GENERALIZEDTIME
 *
ASN1_GENERALIZEDTIME_adj
(ASN1_GENERALIZEDTIME *
s
,

587 
time_t
 
t
, 
off£t_day
,

588 
off£t_£c
);

589 
ASN1_GENERALIZEDTIME_£t_°rög
(
ASN1_GENERALIZEDTIME
 *
s
, c⁄° *
°r
);

590 
ASN1_TIME_diff
(*
pday
, *
p£c
,

591 c⁄° 
ASN1_TIME
 *
‰om
, c⁄° ASN1_TIME *
to
);

593 
DECLARE_ASN1_FUNCTIONS
(
ASN1_OCTET_STRING
)

594 
ASN1_OCTET_STRING
 *
ASN1_OCTET_STRING_dup
(c⁄° ASN1_OCTET_STRING *
a
);

595 
ASN1_OCTET_STRING_cmp
(c⁄° 
ASN1_OCTET_STRING
 *
a
,

596 c⁄° 
ASN1_OCTET_STRING
 *
b
);

597 
ASN1_OCTET_STRING_£t
(
ASN1_OCTET_STRING
 *
°r
, c⁄° *
d©a
,

598 
Àn
);

600 
DECLARE_ASN1_FUNCTIONS
(
ASN1_VISIBLESTRING
)

601 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UNIVERSALSTRING
)

602 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTF8STRING
)

603 
DECLARE_ASN1_FUNCTIONS
(
ASN1_NULL
)

604 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BMPSTRING
)

606 
UTF8_gëc
(c⁄° *
°r
, 
Àn
, *
vÆ
);

607 
UTF8_putc
(*
°r
, 
Àn
, 
vÆue
);

609 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
ASN1_PRINTABLE
)

611 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DIRECTORYSTRING
)

612 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DISPLAYTEXT
)

613 
DECLARE_ASN1_FUNCTIONS
(
ASN1_PRINTABLESTRING
)

614 
DECLARE_ASN1_FUNCTIONS
(
ASN1_T61STRING
)

615 
DECLARE_ASN1_FUNCTIONS
(
ASN1_IA5STRING
)

616 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALSTRING
)

617 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTCTIME
)

618 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALIZEDTIME
)

619 
DECLARE_ASN1_FUNCTIONS
(
ASN1_TIME
)

621 
DECLARE_ASN1_ITEM
(
ASN1_OCTET_STRING_NDEF
)

623 
ASN1_TIME
 *
ASN1_TIME_£t
(ASN1_TIME *
s
, 
time_t
 
t
);

624 
ASN1_TIME
 *
ASN1_TIME_adj
(ASN1_TIME *
s
, 
time_t
 
t
,

625 
off£t_day
, 
off£t_£c
);

626 
ASN1_TIME_check
(c⁄° 
ASN1_TIME
 *
t
);

627 
ASN1_GENERALIZEDTIME
 *
ASN1_TIME_to_gíîÆizedtime
(
ASN1_TIME
 *
t
, ASN1_GENERALIZEDTIME

628 **
out
);

629 
ASN1_TIME_£t_°rög
(
ASN1_TIME
 *
s
, c⁄° *
°r
);

631 
i2a_ASN1_INTEGER
(
BIO
 *
bp
, 
ASN1_INTEGER
 *
a
);

632 
a2i_ASN1_INTEGER
(
BIO
 *
bp
, 
ASN1_INTEGER
 *
bs
, *
buf
, 
size
);

633 
i2a_ASN1_ENUMERATED
(
BIO
 *
bp
, 
ASN1_ENUMERATED
 *
a
);

634 
a2i_ASN1_ENUMERATED
(
BIO
 *
bp
, 
ASN1_ENUMERATED
 *
bs
, *
buf
, 
size
);

635 
i2a_ASN1_OBJECT
(
BIO
 *
bp
, 
ASN1_OBJECT
 *
a
);

636 
a2i_ASN1_STRING
(
BIO
 *
bp
, 
ASN1_STRING
 *
bs
, *
buf
, 
size
);

637 
i2a_ASN1_STRING
(
BIO
 *
bp
, 
ASN1_STRING
 *
a
, 
ty≥
);

638 
i2t_ASN1_OBJECT
(*
buf
, 
buf_Àn
, 
ASN1_OBJECT
 *
a
);

640 
a2d_ASN1_OBJECT
(*
out
, 
ﬁí
, c⁄° *
buf
, 
num
);

641 
ASN1_OBJECT
 *
ASN1_OBJECT_¸óã
(
nid
, *
d©a
, 
Àn
,

642 c⁄° *
¢
, c⁄° *
 
);

644 
ASN1_INTEGER_gë_öt64
(
öt64_t
 *
¥
, c⁄° 
ASN1_INTEGER
 *
a
);

645 
ASN1_INTEGER_£t_öt64
(
ASN1_INTEGER
 *
a
, 
öt64_t
 
r
);

646 
ASN1_INTEGER_gë_uöt64
(
uöt64_t
 *
¥
, c⁄° 
ASN1_INTEGER
 *
a
);

647 
ASN1_INTEGER_£t_uöt64
(
ASN1_INTEGER
 *
a
, 
uöt64_t
 
r
);

649 
ASN1_INTEGER_£t
(
ASN1_INTEGER
 *
a
, 
v
);

650 
ASN1_INTEGER_gë
(c⁄° 
ASN1_INTEGER
 *
a
);

651 
ASN1_INTEGER
 *
BN_to_ASN1_INTEGER
(c⁄° 
BIGNUM
 *
bn
, ASN1_INTEGER *
ai
);

652 
BIGNUM
 *
ASN1_INTEGER_to_BN
(c⁄° 
ASN1_INTEGER
 *
ai
, BIGNUM *
bn
);

654 
ASN1_ENUMERATED_gë_öt64
(
öt64_t
 *
¥
, c⁄° 
ASN1_ENUMERATED
 *
a
);

655 
ASN1_ENUMERATED_£t_öt64
(
ASN1_ENUMERATED
 *
a
, 
öt64_t
 
r
);

658 
ASN1_ENUMERATED_£t
(
ASN1_ENUMERATED
 *
a
, 
v
);

659 
ASN1_ENUMERATED_gë
(
ASN1_ENUMERATED
 *
a
);

660 
ASN1_ENUMERATED
 *
BN_to_ASN1_ENUMERATED
(c⁄° 
BIGNUM
 *
bn
, ASN1_ENUMERATED *
ai
);

661 
BIGNUM
 *
ASN1_ENUMERATED_to_BN
(c⁄° 
ASN1_ENUMERATED
 *
ai
, BIGNUM *
bn
);

665 
ASN1_PRINTABLE_ty≥
(c⁄° *
s
, 
max
);

667 
ASN1_èg2bô
(
èg
);

670 
ASN1_gë_obje˘
(c⁄° **
µ
, *
∂ígth
, *
±ag
,

671 *
p˛ass
, 
omax
);

672 
ASN1_check_öföôe_íd
(**
p
, 
Àn
);

673 
ASN1_c⁄°_check_öföôe_íd
(c⁄° **
p
, 
Àn
);

674 
ASN1_put_obje˘
(**
µ
, 
c⁄°ru˘ed
, 
Àngth
,

675 
èg
, 
x˛ass
);

676 
ASN1_put_eoc
(**
µ
);

677 
ASN1_obje˘_size
(
c⁄°ru˘ed
, 
Àngth
, 
èg
);

680 *
ASN1_dup
(
i2d_of_void
 *
i2d
, 
d2i_of_void
 *
d2i
, *
x
);

682 
	#ASN1_dup_of
(
ty≥
,
i2d
,
d2i
,
x
) \

683 ((
ty≥
*)
	`ASN1_dup
(
	`CHECKED_I2D_OF
—y≥, 
i2d
), \

684 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

685 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

687 
	#ASN1_dup_of_c⁄°
(
ty≥
,
i2d
,
d2i
,
x
) \

688 ((
ty≥
*)
	`ASN1_dup
(
	`CHECKED_I2D_OF
(c⁄°Åy≥, 
i2d
), \

689 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

690 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

692 *
ASN1_ôem_dup
(c⁄° 
ASN1_ITEM
 *
ô
, *
x
);

696 
	#M_ASN1_√w_of
(
ty≥
Ë—y≥ *)
	`ASN1_ôem_√w
(
	`ASN1_ITEM_Ωå
—y≥))

	)

697 
	#M_ASN1_‰ì_of
(
x
, 
ty≥
) \

698 
	`ASN1_ôem_‰ì
(
	`CHECKED_PTR_OF
(
ty≥
, 
x
), 
	`ASN1_ITEM_Ωå
—y≥))

	)

700 #i‚de‡
OPENSSL_NO_STDIO


701 *
ASN1_d2i_Â
(*(*
x√w
Ë(), 
d2i_of_void
 *
d2i
, 
FILE
 *
ö
, **
x
);

703 
	#ASN1_d2i_Â_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

704 ((
ty≥
*)
	`ASN1_d2i_Â
(
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

705 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

706 
ö
, \

707 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

709 *
ASN1_ôem_d2i_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
ö
, *
x
);

710 
ASN1_i2d_Â
(
i2d_of_void
 *
i2d
, 
FILE
 *
out
, *
x
);

712 
	#ASN1_i2d_Â_of
(
ty≥
,
i2d
,
out
,
x
) \

713 (
	`ASN1_i2d_Â
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

714 
out
, \

715 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

717 
	#ASN1_i2d_Â_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
) \

718 (
	`ASN1_i2d_Â
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d
), \

719 
out
, \

720 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

722 
ASN1_ôem_i2d_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
out
, *
x
);

723 
ASN1_STRING_¥öt_ex_Â
(
FILE
 *
Â
, 
ASN1_STRING
 *
°r
, 
Êags
);

726 
ASN1_STRING_to_UTF8
(**
out
, 
ASN1_STRING
 *
ö
);

728 *
ASN1_d2i_bio
(*(*
x√w
Ë(), 
d2i_of_void
 *
d2i
, 
BIO
 *
ö
, **
x
);

730 
	#ASN1_d2i_bio_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

731 ((
ty≥
*)
	`ASN1_d2i_bio
–
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

732 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

733 
ö
, \

734 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

736 *
ASN1_ôem_d2i_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
ö
, *
x
);

737 
ASN1_i2d_bio
(
i2d_of_void
 *
i2d
, 
BIO
 *
out
, *
x
);

739 
	#ASN1_i2d_bio_of
(
ty≥
,
i2d
,
out
,
x
) \

740 (
	`ASN1_i2d_bio
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

741 
out
, \

742 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

744 
	#ASN1_i2d_bio_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
) \

745 (
	`ASN1_i2d_bio
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d
), \

746 
out
, \

747 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

749 
ASN1_ôem_i2d_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
out
, *
x
);

750 
ASN1_UTCTIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_UTCTIME
 *
a
);

751 
ASN1_GENERALIZEDTIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_GENERALIZEDTIME
 *
a
);

752 
ASN1_TIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_TIME
 *
a
);

753 
ASN1_STRING_¥öt
(
BIO
 *
bp
, c⁄° 
ASN1_STRING
 *
v
);

754 
ASN1_STRING_¥öt_ex
(
BIO
 *
out
, 
ASN1_STRING
 *
°r
, 
Êags
);

755 
ASN1_buf_¥öt
(
BIO
 *
bp
, *
buf
, 
size_t
 
buÊí
, 
off
);

756 
ASN1_bn_¥öt
(
BIO
 *
bp
, c⁄° *
numbî
, c⁄° 
BIGNUM
 *
num
,

757 *
buf
, 
off
);

758 
ASN1_∑r£
(
BIO
 *
bp
, c⁄° *
µ
, 
Àn
, 
ödít
);

759 
ASN1_∑r£_dump
(
BIO
 *
bp
, c⁄° *
µ
, 
Àn
, 
ödít
,

760 
dump
);

761 c⁄° *
ASN1_èg2°r
(
èg
);

765 
ASN1_UNIVERSALSTRING_to_°rög
(
ASN1_UNIVERSALSTRING
 *
s
);

767 
ASN1_TYPE_£t_o˘ë°rög
(
ASN1_TYPE
 *
a
, *
d©a
, 
Àn
);

768 
ASN1_TYPE_gë_o˘ë°rög
(
ASN1_TYPE
 *
a
, *
d©a
, 
max_Àn
);

769 
ASN1_TYPE_£t_öt_o˘ë°rög
(
ASN1_TYPE
 *
a
, 
num
,

770 *
d©a
, 
Àn
);

771 
ASN1_TYPE_gë_öt_o˘ë°rög
(
ASN1_TYPE
 *
a
, *
num
,

772 *
d©a
, 
max_Àn
);

774 *
ASN1_ôem_u≈ack
(
ASN1_STRING
 *
o˘
, c⁄° 
ASN1_ITEM
 *
ô
);

776 
ASN1_STRING
 *
ASN1_ôem_∑ck
(*
obj
, c⁄° 
ASN1_ITEM
 *
ô
,

777 
ASN1_OCTET_STRING
 **
o˘
);

779 
ASN1_STRING_£t_deÁu…_mask
(
mask
);

780 
ASN1_STRING_£t_deÁu…_mask_asc
(c⁄° *
p
);

781 
ASN1_STRING_gë_deÁu…_mask
();

782 
ASN1_mb°rög_c›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

783 
öf‹m
, 
mask
);

784 
ASN1_mb°rög_nc›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

785 
öf‹m
, 
mask
,

786 
mösize
, 
maxsize
);

788 
ASN1_STRING
 *
ASN1_STRING_£t_by_NID
(ASN1_STRING **
out
,

789 c⁄° *
ö
, 
öÀn
,

790 
öf‹m
, 
nid
);

791 
ASN1_STRING_TABLE
 *
ASN1_STRING_TABLE_gë
(
nid
);

792 
ASN1_STRING_TABLE_add
(, , , , );

793 
ASN1_STRING_TABLE_˛ónup
();

798 
ASN1_VALUE
 *
ASN1_ôem_√w
(c⁄° 
ASN1_ITEM
 *
ô
);

799 
ASN1_ôem_‰ì
(
ASN1_VALUE
 *
vÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

800 
ASN1_VALUE
 *
ASN1_ôem_d2i
(ASN1_VALUE **
vÆ
, c⁄° **
ö
,

801 
Àn
, c⁄° 
ASN1_ITEM
 *
ô
);

802 
ASN1_ôem_i2d
(
ASN1_VALUE
 *
vÆ
, **
out
, c⁄° 
ASN1_ITEM
 *
ô
);

803 
ASN1_ôem_ndef_i2d
(
ASN1_VALUE
 *
vÆ
, **
out
,

804 c⁄° 
ASN1_ITEM
 *
ô
);

806 
ASN1_add_oid_moduÀ
();

807 
ASN1_add_°abÀ_moduÀ
();

809 
ASN1_TYPE
 *
ASN1_gíî©e_nc⁄f
(c⁄° *
°r
, 
CONF
 *
nc⁄f
);

810 
ASN1_TYPE
 *
ASN1_gíî©e_v3
(c⁄° *
°r
, 
X509V3_CTX
 *
˙f
);

811 
ASN1_°r2mask
(c⁄° *
°r
, *
pmask
);

816 
	#ASN1_PCTX_FLAGS_SHOW_ABSENT
 0x001

	)

818 
	#ASN1_PCTX_FLAGS_SHOW_SEQUENCE
 0x002

	)

820 
	#ASN1_PCTX_FLAGS_SHOW_SSOF
 0x004

	)

822 
	#ASN1_PCTX_FLAGS_SHOW_TYPE
 0x008

	)

824 
	#ASN1_PCTX_FLAGS_NO_ANY_TYPE
 0x010

	)

826 
	#ASN1_PCTX_FLAGS_NO_MSTRING_TYPE
 0x020

	)

828 
	#ASN1_PCTX_FLAGS_NO_FIELD_NAME
 0x040

	)

830 
	#ASN1_PCTX_FLAGS_SHOW_FIELD_STRUCT_NAME
 0x080

	)

832 
	#ASN1_PCTX_FLAGS_NO_STRUCT_NAME
 0x100

	)

834 
ASN1_ôem_¥öt
(
BIO
 *
out
, 
ASN1_VALUE
 *
iÊd
, 
ödít
,

835 c⁄° 
ASN1_ITEM
 *
ô
, c⁄° 
ASN1_PCTX
 *
p˘x
);

836 
ASN1_PCTX
 *
ASN1_PCTX_√w
();

837 
ASN1_PCTX_‰ì
(
ASN1_PCTX
 *
p
);

838 
ASN1_PCTX_gë_Êags
(
ASN1_PCTX
 *
p
);

839 
ASN1_PCTX_£t_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

840 
ASN1_PCTX_gë_nm_Êags
(
ASN1_PCTX
 *
p
);

841 
ASN1_PCTX_£t_nm_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

842 
ASN1_PCTX_gë_˚π_Êags
(
ASN1_PCTX
 *
p
);

843 
ASN1_PCTX_£t_˚π_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

844 
ASN1_PCTX_gë_oid_Êags
(
ASN1_PCTX
 *
p
);

845 
ASN1_PCTX_£t_oid_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

846 
ASN1_PCTX_gë_°r_Êags
(
ASN1_PCTX
 *
p
);

847 
ASN1_PCTX_£t_°r_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

849 
ASN1_SCTX
 *
ASN1_SCTX_√w
((*
sˇn_cb
Ë(ASN1_SCTX *
˘x
));

850 
ASN1_SCTX_‰ì
(
ASN1_SCTX
 *
p
);

851 c⁄° 
ASN1_ITEM
 *
ASN1_SCTX_gë_ôem
(
ASN1_SCTX
 *
p
);

852 c⁄° 
ASN1_TEMPLATE
 *
ASN1_SCTX_gë_ãm∂©e
(
ASN1_SCTX
 *
p
);

853 
ASN1_SCTX_gë_Êags
(
ASN1_SCTX
 *
p
);

854 
ASN1_SCTX_£t_≠p_d©a
(
ASN1_SCTX
 *
p
, *
d©a
);

855 *
ASN1_SCTX_gë_≠p_d©a
(
ASN1_SCTX
 *
p
);

857 c⁄° 
BIO_METHOD
 *
BIO_f_a¢1
();

859 
BIO
 *
BIO_√w_NDEF
(BIO *
out
, 
ASN1_VALUE
 *
vÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

861 
i2d_ASN1_bio_°ªam
(
BIO
 *
out
, 
ASN1_VALUE
 *
vÆ
, BIO *
ö
, 
Êags
,

862 c⁄° 
ASN1_ITEM
 *
ô
);

863 
PEM_wrôe_bio_ASN1_°ªam
(
BIO
 *
out
, 
ASN1_VALUE
 *
vÆ
, BIO *
ö
, 
Êags
,

864 c⁄° *
hdr
, c⁄° 
ASN1_ITEM
 *
ô
);

865 
SMIME_wrôe_ASN1
(
BIO
 *
bio
, 
ASN1_VALUE
 *
vÆ
, BIO *
d©a
, 
Êags
,

866 
˘y≥_nid
, 
ec⁄t_nid
,

867 
STACK_OF
(
X509_ALGOR
Ë*
mdÆgs
, c⁄° 
ASN1_ITEM
 *
ô
);

868 
ASN1_VALUE
 *
SMIME_ªad_ASN1
(
BIO
 *
bio
, BIO **
bc⁄t
, c⁄° 
ASN1_ITEM
 *
ô
);

869 
SMIME_¸lf_c›y
(
BIO
 *
ö
, BIO *
out
, 
Êags
);

870 
SMIME_ãxt
(
BIO
 *
ö
, BIO *
out
);

878 
ERR_lﬂd_ASN1_°rögs
();

883 
	#ASN1_F_A2D_ASN1_OBJECT
 100

	)

884 
	#ASN1_F_A2I_ASN1_INTEGER
 102

	)

885 
	#ASN1_F_A2I_ASN1_STRING
 103

	)

886 
	#ASN1_F_APPEND_EXP
 176

	)

887 
	#ASN1_F_ASN1_BIT_STRING_SET_BIT
 183

	)

888 
	#ASN1_F_ASN1_CB
 177

	)

889 
	#ASN1_F_ASN1_CHECK_TLEN
 104

	)

890 
	#ASN1_F_ASN1_COLLECT
 106

	)

891 
	#ASN1_F_ASN1_D2I_EX_PRIMITIVE
 108

	)

892 
	#ASN1_F_ASN1_D2I_FP
 109

	)

893 
	#ASN1_F_ASN1_D2I_READ_BIO
 107

	)

894 
	#ASN1_F_ASN1_DIGEST
 184

	)

895 
	#ASN1_F_ASN1_DO_ADB
 110

	)

896 
	#ASN1_F_ASN1_DO_LOCK
 233

	)

897 
	#ASN1_F_ASN1_DUP
 111

	)

898 
	#ASN1_F_ASN1_EX_C2I
 204

	)

899 
	#ASN1_F_ASN1_FIND_END
 190

	)

900 
	#ASN1_F_ASN1_GENERALIZEDTIME_ADJ
 216

	)

901 
	#ASN1_F_ASN1_GENERATE_V3
 178

	)

902 
	#ASN1_F_ASN1_GET_INT64
 224

	)

903 
	#ASN1_F_ASN1_GET_OBJECT
 114

	)

904 
	#ASN1_F_ASN1_GET_UINT64
 225

	)

905 
	#ASN1_F_ASN1_I2D_BIO
 116

	)

906 
	#ASN1_F_ASN1_I2D_FP
 117

	)

907 
	#ASN1_F_ASN1_ITEM_D2I_FP
 206

	)

908 
	#ASN1_F_ASN1_ITEM_DUP
 191

	)

909 
	#ASN1_F_ASN1_ITEM_EMBED_D2I
 120

	)

910 
	#ASN1_F_ASN1_ITEM_EMBED_NEW
 121

	)

911 
	#ASN1_F_ASN1_ITEM_I2D_BIO
 192

	)

912 
	#ASN1_F_ASN1_ITEM_I2D_FP
 193

	)

913 
	#ASN1_F_ASN1_ITEM_PACK
 198

	)

914 
	#ASN1_F_ASN1_ITEM_SIGN
 195

	)

915 
	#ASN1_F_ASN1_ITEM_SIGN_CTX
 220

	)

916 
	#ASN1_F_ASN1_ITEM_UNPACK
 199

	)

917 
	#ASN1_F_ASN1_ITEM_VERIFY
 197

	)

918 
	#ASN1_F_ASN1_MBSTRING_NCOPY
 122

	)

919 
	#ASN1_F_ASN1_OBJECT_NEW
 123

	)

920 
	#ASN1_F_ASN1_OUTPUT_DATA
 214

	)

921 
	#ASN1_F_ASN1_PCTX_NEW
 205

	)

922 
	#ASN1_F_ASN1_SCTX_NEW
 221

	)

923 
	#ASN1_F_ASN1_SIGN
 128

	)

924 
	#ASN1_F_ASN1_STR2TYPE
 179

	)

925 
	#ASN1_F_ASN1_STRING_GET_INT64
 227

	)

926 
	#ASN1_F_ASN1_STRING_GET_UINT64
 230

	)

927 
	#ASN1_F_ASN1_STRING_SET
 186

	)

928 
	#ASN1_F_ASN1_STRING_TABLE_ADD
 129

	)

929 
	#ASN1_F_ASN1_STRING_TO_BN
 228

	)

930 
	#ASN1_F_ASN1_STRING_TYPE_NEW
 130

	)

931 
	#ASN1_F_ASN1_TEMPLATE_EX_D2I
 132

	)

932 
	#ASN1_F_ASN1_TEMPLATE_NEW
 133

	)

933 
	#ASN1_F_ASN1_TEMPLATE_NOEXP_D2I
 131

	)

934 
	#ASN1_F_ASN1_TIME_ADJ
 217

	)

935 
	#ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING
 134

	)

936 
	#ASN1_F_ASN1_TYPE_GET_OCTETSTRING
 135

	)

937 
	#ASN1_F_ASN1_UTCTIME_ADJ
 218

	)

938 
	#ASN1_F_ASN1_VERIFY
 137

	)

939 
	#ASN1_F_B64_READ_ASN1
 209

	)

940 
	#ASN1_F_B64_WRITE_ASN1
 210

	)

941 
	#ASN1_F_BIO_NEW_NDEF
 208

	)

942 
	#ASN1_F_BITSTR_CB
 180

	)

943 
	#ASN1_F_BN_TO_ASN1_STRING
 229

	)

944 
	#ASN1_F_C2I_ASN1_BIT_STRING
 189

	)

945 
	#ASN1_F_C2I_ASN1_INTEGER
 194

	)

946 
	#ASN1_F_C2I_ASN1_OBJECT
 196

	)

947 
	#ASN1_F_C2I_IBUF
 226

	)

948 
	#ASN1_F_COLLECT_DATA
 140

	)

949 
	#ASN1_F_D2I_ASN1_OBJECT
 147

	)

950 
	#ASN1_F_D2I_ASN1_UINTEGER
 150

	)

951 
	#ASN1_F_D2I_AUTOPRIVATEKEY
 207

	)

952 
	#ASN1_F_D2I_PRIVATEKEY
 154

	)

953 
	#ASN1_F_D2I_PUBLICKEY
 155

	)

954 
	#ASN1_F_DO_TCREATE
 222

	)

955 
	#ASN1_F_I2D_ASN1_BIO_STREAM
 211

	)

956 
	#ASN1_F_I2D_DSA_PUBKEY
 161

	)

957 
	#ASN1_F_I2D_EC_PUBKEY
 181

	)

958 
	#ASN1_F_I2D_PRIVATEKEY
 163

	)

959 
	#ASN1_F_I2D_PUBLICKEY
 164

	)

960 
	#ASN1_F_I2D_RSA_PUBKEY
 165

	)

961 
	#ASN1_F_LONG_C2I
 166

	)

962 
	#ASN1_F_OID_MODULE_INIT
 174

	)

963 
	#ASN1_F_PARSE_TAGGING
 182

	)

964 
	#ASN1_F_PKCS5_PBE2_SET_IV
 167

	)

965 
	#ASN1_F_PKCS5_PBE2_SET_SCRYPT
 231

	)

966 
	#ASN1_F_PKCS5_PBE_SET
 202

	)

967 
	#ASN1_F_PKCS5_PBE_SET0_ALGOR
 215

	)

968 
	#ASN1_F_PKCS5_PBKDF2_SET
 219

	)

969 
	#ASN1_F_PKCS5_SCRYPT_SET
 232

	)

970 
	#ASN1_F_SMIME_READ_ASN1
 212

	)

971 
	#ASN1_F_SMIME_TEXT
 213

	)

972 
	#ASN1_F_STBL_MODULE_INIT
 223

	)

973 
	#ASN1_F_X509_CRL_ADD0_REVOKED
 169

	)

974 
	#ASN1_F_X509_INFO_NEW
 170

	)

975 
	#ASN1_F_X509_NAME_ENCODE
 203

	)

976 
	#ASN1_F_X509_NAME_EX_D2I
 158

	)

977 
	#ASN1_F_X509_NAME_EX_NEW
 171

	)

978 
	#ASN1_F_X509_PKEY_NEW
 173

	)

981 
	#ASN1_R_ADDING_OBJECT
 171

	)

982 
	#ASN1_R_ASN1_PARSE_ERROR
 203

	)

983 
	#ASN1_R_ASN1_SIG_PARSE_ERROR
 204

	)

984 
	#ASN1_R_AUX_ERROR
 100

	)

985 
	#ASN1_R_BAD_OBJECT_HEADER
 102

	)

986 
	#ASN1_R_BMPSTRING_IS_WRONG_LENGTH
 214

	)

987 
	#ASN1_R_BN_LIB
 105

	)

988 
	#ASN1_R_BOOLEAN_IS_WRONG_LENGTH
 106

	)

989 
	#ASN1_R_BUFFER_TOO_SMALL
 107

	)

990 
	#ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 108

	)

991 
	#ASN1_R_CONTEXT_NOT_INITIALISED
 217

	)

992 
	#ASN1_R_DATA_IS_WRONG
 109

	)

993 
	#ASN1_R_DECODE_ERROR
 110

	)

994 
	#ASN1_R_DEPTH_EXCEEDED
 174

	)

995 
	#ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED
 198

	)

996 
	#ASN1_R_ENCODE_ERROR
 112

	)

997 
	#ASN1_R_ERROR_GETTING_TIME
 173

	)

998 
	#ASN1_R_ERROR_LOADING_SECTION
 172

	)

999 
	#ASN1_R_ERROR_SETTING_CIPHER_PARAMS
 114

	)

1000 
	#ASN1_R_EXPECTING_AN_INTEGER
 115

	)

1001 
	#ASN1_R_EXPECTING_AN_OBJECT
 116

	)

1002 
	#ASN1_R_EXPLICIT_LENGTH_MISMATCH
 119

	)

1003 
	#ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED
 120

	)

1004 
	#ASN1_R_FIELD_MISSING
 121

	)

1005 
	#ASN1_R_FIRST_NUM_TOO_LARGE
 122

	)

1006 
	#ASN1_R_HEADER_TOO_LONG
 123

	)

1007 
	#ASN1_R_ILLEGAL_BITSTRING_FORMAT
 175

	)

1008 
	#ASN1_R_ILLEGAL_BOOLEAN
 176

	)

1009 
	#ASN1_R_ILLEGAL_CHARACTERS
 124

	)

1010 
	#ASN1_R_ILLEGAL_FORMAT
 177

	)

1011 
	#ASN1_R_ILLEGAL_HEX
 178

	)

1012 
	#ASN1_R_ILLEGAL_IMPLICIT_TAG
 179

	)

1013 
	#ASN1_R_ILLEGAL_INTEGER
 180

	)

1014 
	#ASN1_R_ILLEGAL_NEGATIVE_VALUE
 226

	)

1015 
	#ASN1_R_ILLEGAL_NESTED_TAGGING
 181

	)

1016 
	#ASN1_R_ILLEGAL_NULL
 125

	)

1017 
	#ASN1_R_ILLEGAL_NULL_VALUE
 182

	)

1018 
	#ASN1_R_ILLEGAL_OBJECT
 183

	)

1019 
	#ASN1_R_ILLEGAL_OPTIONAL_ANY
 126

	)

1020 
	#ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE
 170

	)

1021 
	#ASN1_R_ILLEGAL_PADDING
 221

	)

1022 
	#ASN1_R_ILLEGAL_TAGGED_ANY
 127

	)

1023 
	#ASN1_R_ILLEGAL_TIME_VALUE
 184

	)

1024 
	#ASN1_R_ILLEGAL_ZERO_CONTENT
 222

	)

1025 
	#ASN1_R_INTEGER_NOT_ASCII_FORMAT
 185

	)

1026 
	#ASN1_R_INTEGER_TOO_LARGE_FOR_LONG
 128

	)

1027 
	#ASN1_R_INVALID_BIT_STRING_BITS_LEFT
 220

	)

1028 
	#ASN1_R_INVALID_BMPSTRING_LENGTH
 129

	)

1029 
	#ASN1_R_INVALID_DIGIT
 130

	)

1030 
	#ASN1_R_INVALID_MIME_TYPE
 205

	)

1031 
	#ASN1_R_INVALID_MODIFIER
 186

	)

1032 
	#ASN1_R_INVALID_NUMBER
 187

	)

1033 
	#ASN1_R_INVALID_OBJECT_ENCODING
 216

	)

1034 
	#ASN1_R_INVALID_SCRYPT_PARAMETERS
 227

	)

1035 
	#ASN1_R_INVALID_SEPARATOR
 131

	)

1036 
	#ASN1_R_INVALID_STRING_TABLE_VALUE
 218

	)

1037 
	#ASN1_R_INVALID_UNIVERSALSTRING_LENGTH
 133

	)

1038 
	#ASN1_R_INVALID_UTF8STRING
 134

	)

1039 
	#ASN1_R_INVALID_VALUE
 219

	)

1040 
	#ASN1_R_LIST_ERROR
 188

	)

1041 
	#ASN1_R_MIME_NO_CONTENT_TYPE
 206

	)

1042 
	#ASN1_R_MIME_PARSE_ERROR
 207

	)

1043 
	#ASN1_R_MIME_SIG_PARSE_ERROR
 208

	)

1044 
	#ASN1_R_MISSING_EOC
 137

	)

1045 
	#ASN1_R_MISSING_SECOND_NUMBER
 138

	)

1046 
	#ASN1_R_MISSING_VALUE
 189

	)

1047 
	#ASN1_R_MSTRING_NOT_UNIVERSAL
 139

	)

1048 
	#ASN1_R_MSTRING_WRONG_TAG
 140

	)

1049 
	#ASN1_R_NESTED_ASN1_STRING
 197

	)

1050 
	#ASN1_R_NON_HEX_CHARACTERS
 141

	)

1051 
	#ASN1_R_NOT_ASCII_FORMAT
 190

	)

1052 
	#ASN1_R_NOT_ENOUGH_DATA
 142

	)

1053 
	#ASN1_R_NO_CONTENT_TYPE
 209

	)

1054 
	#ASN1_R_NO_MATCHING_CHOICE_TYPE
 143

	)

1055 
	#ASN1_R_NO_MULTIPART_BODY_FAILURE
 210

	)

1056 
	#ASN1_R_NO_MULTIPART_BOUNDARY
 211

	)

1057 
	#ASN1_R_NO_SIG_CONTENT_TYPE
 212

	)

1058 
	#ASN1_R_NULL_IS_WRONG_LENGTH
 144

	)

1059 
	#ASN1_R_OBJECT_NOT_ASCII_FORMAT
 191

	)

1060 
	#ASN1_R_ODD_NUMBER_OF_CHARS
 145

	)

1061 
	#ASN1_R_SECOND_NUMBER_TOO_LARGE
 147

	)

1062 
	#ASN1_R_SEQUENCE_LENGTH_MISMATCH
 148

	)

1063 
	#ASN1_R_SEQUENCE_NOT_CONSTRUCTED
 149

	)

1064 
	#ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG
 192

	)

1065 
	#ASN1_R_SHORT_LINE
 150

	)

1066 
	#ASN1_R_SIG_INVALID_MIME_TYPE
 213

	)

1067 
	#ASN1_R_STREAMING_NOT_SUPPORTED
 202

	)

1068 
	#ASN1_R_STRING_TOO_LONG
 151

	)

1069 
	#ASN1_R_STRING_TOO_SHORT
 152

	)

1070 
	#ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 154

	)

1071 
	#ASN1_R_TIME_NOT_ASCII_FORMAT
 193

	)

1072 
	#ASN1_R_TOO_LARGE
 223

	)

1073 
	#ASN1_R_TOO_LONG
 155

	)

1074 
	#ASN1_R_TOO_SMALL
 224

	)

1075 
	#ASN1_R_TYPE_NOT_CONSTRUCTED
 156

	)

1076 
	#ASN1_R_TYPE_NOT_PRIMITIVE
 195

	)

1077 
	#ASN1_R_UNEXPECTED_EOC
 159

	)

1078 
	#ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH
 215

	)

1079 
	#ASN1_R_UNKNOWN_FORMAT
 160

	)

1080 
	#ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM
 161

	)

1081 
	#ASN1_R_UNKNOWN_OBJECT_TYPE
 162

	)

1082 
	#ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE
 163

	)

1083 
	#ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM
 199

	)

1084 
	#ASN1_R_UNKNOWN_TAG
 194

	)

1085 
	#ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE
 164

	)

1086 
	#ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE
 167

	)

1087 
	#ASN1_R_UNSUPPORTED_TYPE
 196

	)

1088 
	#ASN1_R_WRONG_INTEGER_TYPE
 225

	)

1089 
	#ASN1_R_WRONG_PUBLIC_KEY_TYPE
 200

	)

1090 
	#ASN1_R_WRONG_TAG
 168

	)

1092 #ifde‡ 
__˝lu•lus


	@asn1_mac.h

	@asn1t.h

10 #i‚de‡
HEADER_ASN1T_H


11 
	#HEADER_ASN1T_H


	)

13 
	~<°ddef.h
>

14 
	~<›ís¶/e_os2.h
>

15 
	~<›ís¶/a¢1.h
>

17 #ifde‡
OPENSSL_BUILD_SHLIBCRYPTO


18 #unde‡
OPENSSL_EXTERN


19 
	#OPENSSL_EXTERN
 
OPENSSL_EXPORT


	)

24 #ifde‡ 
__˝lu•lus


28 #i‚de‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


31 
	#ASN1_ADB_±r
(
ùå
Ë((c⁄° 
ASN1_ADB
 *)(ùå))

	)

35 
	#ASN1_ITEM_°¨t
(
ô«me
) \

36 
OPENSSL_GLOBAL
 c⁄° 
ASN1_ITEM
 
ô«me
##
_ô
 = {

	)

38 
	#°©ic_ASN1_ITEM_°¨t
(
ô«me
) \

39 c⁄° 
ASN1_ITEM
 
ô«me
##
_ô
 = {

	)

41 
	#ASN1_ITEM_íd
(
ô«me
) \

42 };

	)

47 
	#ASN1_ADB_±r
(
ùå
Ë((c⁄° 
ASN1_ADB
 *)(
	`ùå
()))

	)

51 
	#ASN1_ITEM_°¨t
(
ô«me
) \

52 c⁄° 
ASN1_ITEM
 * 
ô«me
##
	`_ô
() \

54 c⁄° 
ASN1_ITEM
 
loˇl_ô
 = {

	)

56 
	#°©ic_ASN1_ITEM_°¨t
(
ô«me
) \

57 
	`ASN1_ITEM_°¨t
(
ô«me
)

	)

59 
	#ASN1_ITEM_íd
(
ô«me
) \

61  &
loˇl_ô
; \

62 }

	)

68 
	#ASN1_ITEM_TEMPLATE
(
äame
) \

69 c⁄° 
ASN1_TEMPLATE
 
äame
##
_ôem_â


	)

71 
	#ASN1_ITEM_TEMPLATE_END
(
äame
) \

73 
	`ASN1_ITEM_°¨t
(
äame
) \

74 
ASN1_ITYPE_PRIMITIVE
,\

76 &
äame
##
_ôem_â
,\

78 
NULL
,\

81 
	`ASN1_ITEM_íd
(
äame
)

	)

82 
	#°©ic_ASN1_ITEM_TEMPLATE_END
(
äame
) \

84 
	`°©ic_ASN1_ITEM_°¨t
(
äame
) \

85 
ASN1_ITYPE_PRIMITIVE
,\

87 &
äame
##
_ôem_â
,\

89 
NULL
,\

92 
	`ASN1_ITEM_íd
(
äame
)

	)

117 
	#ASN1_SEQUENCE
(
äame
) \

118 c⁄° 
ASN1_TEMPLATE
 
äame
##
_£q_â
[]

	)

120 
	#ASN1_SEQUENCE_END
(
°«me
Ë
	`ASN1_SEQUENCE_END_«me
(°«me, säame)

	)

122 
	#°©ic_ASN1_SEQUENCE_END
(
°«me
Ë
	`°©ic_ASN1_SEQUENCE_END_«me
(°«me, säame)

	)

124 
	#ASN1_SEQUENCE_END_«me
(
°«me
, 
äame
) \

126 
	`ASN1_ITEM_°¨t
(
äame
) \

127 
ASN1_ITYPE_SEQUENCE
,\

128 
V_ASN1_SEQUENCE
,\

129 
äame
##
_£q_â
,\

130 (
äame
##
_£q_â
Ë/ (
ASN1_TEMPLATE
),\

131 
NULL
,\

132 (
°«me
),\

134 
	`ASN1_ITEM_íd
(
äame
)

	)

136 
	#°©ic_ASN1_SEQUENCE_END_«me
(
°«me
, 
äame
) \

138 
	`°©ic_ASN1_ITEM_°¨t
(
äame
) \

139 
ASN1_ITYPE_SEQUENCE
,\

140 
V_ASN1_SEQUENCE
,\

141 
äame
##
_£q_â
,\

142 (
äame
##
_£q_â
Ë/ (
ASN1_TEMPLATE
),\

143 
NULL
,\

144 (
°«me
),\

146 
	`ASN1_ITEM_íd
(
äame
)

	)

148 
	#ASN1_NDEF_SEQUENCE
(
äame
) \

149 
	`ASN1_SEQUENCE
(
äame
)

	)

151 
	#ASN1_NDEF_SEQUENCE_cb
(
äame
, 
cb
) \

152 
	`ASN1_SEQUENCE_cb
(
äame
, 
cb
)

	)

154 
	#ASN1_SEQUENCE_cb
(
äame
, 
cb
) \

155 c⁄° 
ASN1_AUX
 
äame
##
_aux
 = {
NULL
, 0, 0, 0, 
cb
, 0}; \

156 
	`ASN1_SEQUENCE
(
äame
)

	)

158 
	#ASN1_BROKEN_SEQUENCE
(
äame
) \

159 c⁄° 
ASN1_AUX
 
äame
##
_aux
 = {
NULL
, 
ASN1_AFLG_BROKEN
, 0, 0, 0, 0}; \

160 
	`ASN1_SEQUENCE
(
äame
)

	)

162 
	#ASN1_SEQUENCE_ªf
(
äame
, 
cb
) \

163 c⁄° 
ASN1_AUX
 
äame
##
_aux
 = {
NULL
, 
ASN1_AFLG_REFCOUNT
, 
	`off£tof
—«me, 
ª„ªn˚s
), off£tof—«me, 
lock
), 
cb
, 0}; \

164 
	`ASN1_SEQUENCE
(
äame
)

	)

166 
	#ASN1_SEQUENCE_íc
(
äame
, 
íc
, 
cb
) \

167 c⁄° 
ASN1_AUX
 
äame
##
_aux
 = {
NULL
, 
ASN1_AFLG_ENCODING
, 0, 0, 
cb
, 
	`off£tof
—«me, 
íc
)}; \

168 
	`ASN1_SEQUENCE
(
äame
)

	)

170 
	#ASN1_NDEF_SEQUENCE_END
(
äame
) \

172 
	`ASN1_ITEM_°¨t
(
äame
) \

173 
ASN1_ITYPE_NDEF_SEQUENCE
,\

174 
V_ASN1_SEQUENCE
,\

175 
äame
##
_£q_â
,\

176 (
äame
##
_£q_â
Ë/ (
ASN1_TEMPLATE
),\

177 
NULL
,\

178 (
äame
),\

180 
	`ASN1_ITEM_íd
(
äame
)

	)

181 
	#°©ic_ASN1_NDEF_SEQUENCE_END
(
äame
) \

183 
	`°©ic_ASN1_ITEM_°¨t
(
äame
) \

184 
ASN1_ITYPE_NDEF_SEQUENCE
,\

185 
V_ASN1_SEQUENCE
,\

186 
äame
##
_£q_â
,\

187 (
äame
##
_£q_â
Ë/ (
ASN1_TEMPLATE
),\

188 
NULL
,\

189 (
äame
),\

191 
	`ASN1_ITEM_íd
(
äame
)

	)

193 
	#ASN1_BROKEN_SEQUENCE_END
(
°«me
Ë
	`ASN1_SEQUENCE_END_ªf
(°«me, säame)

	)

194 
	#°©ic_ASN1_BROKEN_SEQUENCE_END
(
°«me
) \

195 
	`°©ic_ASN1_SEQUENCE_END_ªf
(
°«me
, säame)

	)

197 
	#ASN1_SEQUENCE_END_íc
(
°«me
, 
äame
Ë
	`ASN1_SEQUENCE_END_ªf
(°«me,Å«me)

	)

199 
	#ASN1_SEQUENCE_END_cb
(
°«me
, 
äame
Ë
	`ASN1_SEQUENCE_END_ªf
(°«me,Å«me)

	)

200 
	#°©ic_ASN1_SEQUENCE_END_cb
(
°«me
, 
äame
Ë
	`°©ic_ASN1_SEQUENCE_END_ªf
(°«me,Å«me)

	)

202 
	#ASN1_SEQUENCE_END_ªf
(
°«me
, 
äame
) \

204 
	`ASN1_ITEM_°¨t
(
äame
) \

205 
ASN1_ITYPE_SEQUENCE
,\

206 
V_ASN1_SEQUENCE
,\

207 
äame
##
_£q_â
,\

208 (
äame
##
_£q_â
Ë/ (
ASN1_TEMPLATE
),\

209 &
äame
##
_aux
,\

210 (
°«me
),\

212 
	`ASN1_ITEM_íd
(
äame
)

	)

213 
	#°©ic_ASN1_SEQUENCE_END_ªf
(
°«me
, 
äame
) \

215 
	`°©ic_ASN1_ITEM_°¨t
(
äame
) \

216 
ASN1_ITYPE_SEQUENCE
,\

217 
V_ASN1_SEQUENCE
,\

218 
äame
##
_£q_â
,\

219 (
äame
##
_£q_â
Ë/ (
ASN1_TEMPLATE
),\

220 &
äame
##
_aux
,\

221 (
°«me
),\

223 
	`ASN1_ITEM_íd
(
äame
)

	)

225 
	#ASN1_NDEF_SEQUENCE_END_cb
(
°«me
, 
äame
) \

227 
	`ASN1_ITEM_°¨t
(
äame
) \

228 
ASN1_ITYPE_NDEF_SEQUENCE
,\

229 
V_ASN1_SEQUENCE
,\

230 
äame
##
_£q_â
,\

231 (
äame
##
_£q_â
Ë/ (
ASN1_TEMPLATE
),\

232 &
äame
##
_aux
,\

233 (
°«me
),\

235 
	`ASN1_ITEM_íd
(
äame
)

	)

260 
	#ASN1_CHOICE
(
äame
) \

261 c⁄° 
ASN1_TEMPLATE
 
äame
##
_ch_â
[]

	)

263 
	#ASN1_CHOICE_cb
(
äame
, 
cb
) \

264 c⁄° 
ASN1_AUX
 
äame
##
_aux
 = {
NULL
, 0, 0, 0, 
cb
, 0}; \

265 
	`ASN1_CHOICE
(
äame
)

	)

267 
	#ASN1_CHOICE_END
(
°«me
Ë
	`ASN1_CHOICE_END_«me
(°«me, säame)

	)

269 
	#°©ic_ASN1_CHOICE_END
(
°«me
Ë
	`°©ic_ASN1_CHOICE_END_«me
(°«me, säame)

	)

271 
	#ASN1_CHOICE_END_«me
(
°«me
, 
äame
Ë
	`ASN1_CHOICE_END_£À˘‹
(°«me,Å«me, 
ty≥
)

	)

273 
	#°©ic_ASN1_CHOICE_END_«me
(
°«me
, 
äame
Ë
	`°©ic_ASN1_CHOICE_END_£À˘‹
(°«me,Å«me, 
ty≥
)

	)

275 
	#ASN1_CHOICE_END_£À˘‹
(
°«me
, 
äame
, 
£ ame
) \

277 
	`ASN1_ITEM_°¨t
(
äame
) \

278 
ASN1_ITYPE_CHOICE
,\

279 
	`off£tof
(
°«me
,
£ ame
) ,\

280 
äame
##
_ch_â
,\

281 (
äame
##
_ch_â
Ë/ (
ASN1_TEMPLATE
),\

282 
NULL
,\

283 (
°«me
),\

285 
	`ASN1_ITEM_íd
(
äame
)

	)

287 
	#°©ic_ASN1_CHOICE_END_£À˘‹
(
°«me
, 
äame
, 
£ ame
) \

289 
	`°©ic_ASN1_ITEM_°¨t
(
äame
) \

290 
ASN1_ITYPE_CHOICE
,\

291 
	`off£tof
(
°«me
,
£ ame
) ,\

292 
äame
##
_ch_â
,\

293 (
äame
##
_ch_â
Ë/ (
ASN1_TEMPLATE
),\

294 
NULL
,\

295 (
°«me
),\

297 
	`ASN1_ITEM_íd
(
äame
)

	)

299 
	#ASN1_CHOICE_END_cb
(
°«me
, 
äame
, 
£ ame
) \

301 
	`ASN1_ITEM_°¨t
(
äame
) \

302 
ASN1_ITYPE_CHOICE
,\

303 
	`off£tof
(
°«me
,
£ ame
) ,\

304 
äame
##
_ch_â
,\

305 (
äame
##
_ch_â
Ë/ (
ASN1_TEMPLATE
),\

306 &
äame
##
_aux
,\

307 (
°«me
),\

309 
	`ASN1_ITEM_íd
(
äame
)

	)

313 
	#ASN1_EX_TEMPLATE_TYPE
(
Êags
, 
èg
, 
«me
, 
ty≥
) { \

314 (
Êags
), (
èg
), 0,\

315 #«me, 
	`ASN1_ITEM_ªf
(
ty≥
Ë}

	)

321 
	#ASN1_EX_TYPE
(
Êags
, 
èg
, 
°«me
, 
fõld
, 
ty≥
) { \

322 (
Êags
), (
èg
), 
	`off£tof
(
°«me
, 
fõld
),\

323 #fõld, 
	`ASN1_ITEM_ªf
(
ty≥
Ë}

	)

327 
	#ASN1_IMP_EX
(
°«me
, 
fõld
, 
ty≥
, 
èg
, 
ex
) \

328 
	`ASN1_EX_TYPE
(
ASN1_TFLG_IMPLICIT
 | 
ex
, 
èg
, 
°«me
, 
fõld
, 
ty≥
)

	)

330 
	#ASN1_EXP_EX
(
°«me
, 
fõld
, 
ty≥
, 
èg
, 
ex
) \

331 
	`ASN1_EX_TYPE
(
ASN1_TFLG_EXPLICIT
 | 
ex
, 
èg
, 
°«me
, 
fõld
, 
ty≥
)

	)

335 #i‚de‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


336 
	#ASN1_ADB_OBJECT
(
tb ame
Ë{ 
ASN1_TFLG_ADB_OID
, -1, 0, #tb ame, (c⁄° 
ASN1_ITEM
 *)&—b ame##
_adb
Ë}

	)

337 
	#ASN1_ADB_INTEGER
(
tb ame
Ë{ 
ASN1_TFLG_ADB_INT
, -1, 0, #tb ame, (c⁄° 
ASN1_ITEM
 *)&—b ame##
_adb
Ë}

	)

339 
	#ASN1_ADB_OBJECT
(
tb ame
Ë{ 
ASN1_TFLG_ADB_OID
, -1, 0, #tb ame,Åb ame##
_adb
 }

	)

340 
	#ASN1_ADB_INTEGER
(
tb ame
Ë{ 
ASN1_TFLG_ADB_INT
, -1, 0, #tb ame,Åb ame##
_adb
 }

	)

343 
	#ASN1_SIMPLE
(
°«me
, 
fõld
, 
ty≥
Ë
	`ASN1_EX_TYPE
(0,0, säame, fõld,Åy≥)

	)

345 
	#ASN1_EMBED
(
°«me
, 
fõld
, 
ty≥
Ë
	`ASN1_EX_TYPE
(
ASN1_TFLG_EMBED
,0, säame, fõld,Åy≥)

	)

348 
	#ASN1_OPT
(
°«me
, 
fõld
, 
ty≥
Ë
	`ASN1_EX_TYPE
(
ASN1_TFLG_OPTIONAL
, 0, säame, fõld,Åy≥)

	)

351 
	#ASN1_IMP
(
°«me
, 
fõld
, 
ty≥
, 
èg
Ë
	`ASN1_IMP_EX
(°«me, fõld,Åy≥,Åag, 0)

	)

354 
	#ASN1_IMP_OPT
(
°«me
, 
fõld
, 
ty≥
, 
èg
Ë
	`ASN1_IMP_EX
(°«me, fõld,Åy≥,Åag, 
ASN1_TFLG_OPTIONAL
)

	)

358 
	#ASN1_EXP
(
°«me
, 
fõld
, 
ty≥
, 
èg
Ë
	`ASN1_EXP_EX
(°«me, fõld,Åy≥,Åag, 0)

	)

359 
	#ASN1_EXP_OPT
(
°«me
, 
fõld
, 
ty≥
, 
èg
Ë
	`ASN1_EXP_EX
(°«me, fõld,Åy≥,Åag, 
ASN1_TFLG_OPTIONAL
)

	)

362 
	#ASN1_SEQUENCE_OF
(
°«me
, 
fõld
, 
ty≥
) \

363 
	`ASN1_EX_TYPE
(
ASN1_TFLG_SEQUENCE_OF
, 0, 
°«me
, 
fõld
, 
ty≥
)

	)

366 
	#ASN1_SEQUENCE_OF_OPT
(
°«me
, 
fõld
, 
ty≥
) \

367 
	`ASN1_EX_TYPE
(
ASN1_TFLG_SEQUENCE_OF
|
ASN1_TFLG_OPTIONAL
, 0, 
°«me
, 
fõld
, 
ty≥
)

	)

371 
	#ASN1_SET_OF
(
°«me
, 
fõld
, 
ty≥
) \

372 
	`ASN1_EX_TYPE
(
ASN1_TFLG_SET_OF
, 0, 
°«me
, 
fõld
, 
ty≥
)

	)

374 
	#ASN1_SET_OF_OPT
(
°«me
, 
fõld
, 
ty≥
) \

375 
	`ASN1_EX_TYPE
(
ASN1_TFLG_SET_OF
|
ASN1_TFLG_OPTIONAL
, 0, 
°«me
, 
fõld
, 
ty≥
)

	)

379 
	#ASN1_IMP_SET_OF
(
°«me
, 
fõld
, 
ty≥
, 
èg
) \

380 
	`ASN1_IMP_EX
(
°«me
, 
fõld
, 
ty≥
, 
èg
, 
ASN1_TFLG_SET_OF
)

	)

382 
	#ASN1_EXP_SET_OF
(
°«me
, 
fõld
, 
ty≥
, 
èg
) \

383 
	`ASN1_EXP_EX
(
°«me
, 
fõld
, 
ty≥
, 
èg
, 
ASN1_TFLG_SET_OF
)

	)

385 
	#ASN1_IMP_SET_OF_OPT
(
°«me
, 
fõld
, 
ty≥
, 
èg
) \

386 
	`ASN1_IMP_EX
(
°«me
, 
fõld
, 
ty≥
, 
èg
, 
ASN1_TFLG_SET_OF
|
ASN1_TFLG_OPTIONAL
)

	)

388 
	#ASN1_EXP_SET_OF_OPT
(
°«me
, 
fõld
, 
ty≥
, 
èg
) \

389 
	`ASN1_EXP_EX
(
°«me
, 
fõld
, 
ty≥
, 
èg
, 
ASN1_TFLG_SET_OF
|
ASN1_TFLG_OPTIONAL
)

	)

391 
	#ASN1_IMP_SEQUENCE_OF
(
°«me
, 
fõld
, 
ty≥
, 
èg
) \

392 
	`ASN1_IMP_EX
(
°«me
, 
fõld
, 
ty≥
, 
èg
, 
ASN1_TFLG_SEQUENCE_OF
)

	)

394 
	#ASN1_IMP_SEQUENCE_OF_OPT
(
°«me
, 
fõld
, 
ty≥
, 
èg
) \

395 
	`ASN1_IMP_EX
(
°«me
, 
fõld
, 
ty≥
, 
èg
, 
ASN1_TFLG_SEQUENCE_OF
|
ASN1_TFLG_OPTIONAL
)

	)

397 
	#ASN1_EXP_SEQUENCE_OF
(
°«me
, 
fõld
, 
ty≥
, 
èg
) \

398 
	`ASN1_EXP_EX
(
°«me
, 
fõld
, 
ty≥
, 
èg
, 
ASN1_TFLG_SEQUENCE_OF
)

	)

400 
	#ASN1_EXP_SEQUENCE_OF_OPT
(
°«me
, 
fõld
, 
ty≥
, 
èg
) \

401 
	`ASN1_EXP_EX
(
°«me
, 
fõld
, 
ty≥
, 
èg
, 
ASN1_TFLG_SEQUENCE_OF
|
ASN1_TFLG_OPTIONAL
)

	)

404 
	#ASN1_NDEF_EXP
(
°«me
, 
fõld
, 
ty≥
, 
èg
) \

405 
	`ASN1_EXP_EX
(
°«me
, 
fõld
, 
ty≥
, 
èg
, 
ASN1_TFLG_NDEF
)

	)

408 
	#ASN1_NDEF_EXP_OPT
(
°«me
, 
fõld
, 
ty≥
, 
èg
) \

409 
	`ASN1_EXP_EX
(
°«me
, 
fõld
, 
ty≥
, 
èg
, 
ASN1_TFLG_OPTIONAL
|
ASN1_TFLG_NDEF
)

	)

413 
	#ASN1_ADB
(
«me
) \

414 c⁄° 
ASN1_ADB_TABLE
 
«me
##
_adbtbl
[]

	)

416 #i‚de‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


418 
	#ASN1_ADB_END
(
«me
, 
Êags
, 
fõld
, 
adb_cb
, 
def
, 
n⁄e
) \

420 c⁄° 
ASN1_ADB
 
«me
##
_adb
 = {\

421 
Êags
,\

422 
	`off£tof
(
«me
, 
fõld
),\

423 
adb_cb
,\

424 
«me
##
_adbtbl
,\

425 (
«me
##
_adbtbl
Ë/ (
ASN1_ADB_TABLE
),\

426 
def
,\

427 
n⁄e
\

428 }

	)

432 
	#ASN1_ADB_END
(
«me
, 
Êags
, 
fõld
, 
adb_cb
, 
def
, 
n⁄e
) \

434 c⁄° 
ASN1_ITEM
 *
«me
##
	`_adb
() \

436 c⁄° 
ASN1_ADB
 
öã∫Æ_adb
 = \

438 
Êags
,\

439 
	`off£tof
(
«me
, 
fõld
),\

440 
adb_cb
,\

441 
«me
##
_adbtbl
,\

442 (
«me
##
_adbtbl
Ë/ (
ASN1_ADB_TABLE
),\

443 
def
,\

444 
n⁄e
\

446  (c⁄° 
ASN1_ITEM
 *Ë&
öã∫Æ_adb
; \

448 
	`dummy_fun˘i⁄
()

	)

452 
	#ADB_ENTRY
(
vÆ
, 
ãm∂©e
Ë{vÆ,Åem∂©e}

	)

454 
	#ASN1_ADB_TEMPLATE
(
«me
) \

455 c⁄° 
ASN1_TEMPLATE
 
«me
##
_â


	)

463 
	sASN1_TEMPLATE_°
 {

464 
Êags
;

465 
èg
;

466 
off£t
;

467 c⁄° *
fõld_«me
;

468 
ASN1_ITEM_EXP
 *
ôem
;

473 
	#ASN1_TEMPLATE_ôem
(
t
Ë—->
ôem_±r
)

	)

474 
	#ASN1_TEMPLATE_adb
(
t
Ë—->
ôem_±r
)

	)

476 
ASN1_ADB_TABLE_°
 
	tASN1_ADB_TABLE
;

477 
ASN1_ADB_°
 
	tASN1_ADB
;

479 
	sASN1_ADB_°
 {

480 
Êags
;

481 
off£t
;

482 (*
adb_cb
)(*
p£l
);

483 c⁄° 
ASN1_ADB_TABLE
 *
tbl
;

484 
tblcou¡
;

485 c⁄° 
ASN1_TEMPLATE
 *
deÁu…_â
;

486 c⁄° 
ASN1_TEMPLATE
 *
nuŒ_â
;

489 
	sASN1_ADB_TABLE_°
 {

490 
vÆue
;

491 c⁄° 
ASN1_TEMPLATE
 
â
;

497 
	#ASN1_TFLG_OPTIONAL
 (0x1)

	)

500 
	#ASN1_TFLG_SET_OF
 (0x1 << 1)

	)

503 
	#ASN1_TFLG_SEQUENCE_OF
 (0x2 << 1)

	)

510 
	#ASN1_TFLG_SET_ORDER
 (0x3 << 1)

	)

513 
	#ASN1_TFLG_SK_MASK
 (0x3 << 1)

	)

521 
	#ASN1_TFLG_IMPTAG
 (0x1 << 3)

	)

524 
	#ASN1_TFLG_EXPTAG
 (0x2 << 3)

	)

526 
	#ASN1_TFLG_TAG_MASK
 (0x3 << 3)

	)

529 
	#ASN1_TFLG_IMPLICIT
 
ASN1_TFLG_IMPTAG
|
ASN1_TFLG_CONTEXT


	)

532 
	#ASN1_TFLG_EXPLICIT
 
ASN1_TFLG_EXPTAG
|
ASN1_TFLG_CONTEXT


	)

541 
	#ASN1_TFLG_UNIVERSAL
 (0x0<<6)

	)

543 
	#ASN1_TFLG_APPLICATION
 (0x1<<6)

	)

545 
	#ASN1_TFLG_CONTEXT
 (0x2<<6)

	)

547 
	#ASN1_TFLG_PRIVATE
 (0x3<<6)

	)

549 
	#ASN1_TFLG_TAG_CLASS
 (0x3<<6)

	)

557 
	#ASN1_TFLG_ADB_MASK
 (0x3<<8)

	)

559 
	#ASN1_TFLG_ADB_OID
 (0x1<<8)

	)

561 
	#ASN1_TFLG_ADB_INT
 (0x1<<9)

	)

568 
	#ASN1_TFLG_NDEF
 (0x1<<11)

	)

571 
	#ASN1_TFLG_EMBED
 (0x1 << 12)

	)

575 
	sASN1_ITEM_°
 {

576 
ôy≥
;

578 
uty≥
;

579 c⁄° 
ASN1_TEMPLATE
 *
ãm∂©es
;

581 
tcou¡
;

582 c⁄° *
funcs
;

583 
size
;

584 c⁄° *
¢ame
;

628 
	#ASN1_ITYPE_PRIMITIVE
 0x0

	)

630 
	#ASN1_ITYPE_SEQUENCE
 0x1

	)

632 
	#ASN1_ITYPE_CHOICE
 0x2

	)

634 
	#ASN1_ITYPE_EXTERN
 0x4

	)

636 
	#ASN1_ITYPE_MSTRING
 0x5

	)

638 
	#ASN1_ITYPE_NDEF_SEQUENCE
 0x6

	)

645 
	sASN1_TLC_°
 {

646 
vÆid
;

647 
ªt
;

648 
∂í
;

649 
±ag
;

650 
p˛ass
;

651 
hdæí
;

656 
ASN1_VALUE
 *
	tASN1_√w_func
();

657 
	tASN1_‰ì_func
(
	tASN1_VALUE
 *
	ta
);

658 
ASN1_VALUE
 *
	tASN1_d2i_func
(
	tASN1_VALUE
 **
	ta
, c⁄° **
	tö
,

659 
	tÀngth
);

660 
	tASN1_i2d_func
(
	tASN1_VALUE
 *
	ta
, **
	tö
);

662 
	tASN1_ex_d2i
(
	tASN1_VALUE
 **
	tpvÆ
, c⁄° **
	tö
, 
	tÀn
,

663 c⁄° 
	tASN1_ITEM
 *
	tô
, 
	tèg
, 
	ta˛ass
, 
	t›t
,

664 
	tASN1_TLC
 *
	t˘x
);

666 
	tASN1_ex_i2d
(
	tASN1_VALUE
 **
	tpvÆ
, **
	tout
,

667 c⁄° 
	tASN1_ITEM
 *
	tô
, 
	tèg
, 
	ta˛ass
);

668 
	tASN1_ex_√w_func
(
	tASN1_VALUE
 **
	tpvÆ
, c⁄° 
	tASN1_ITEM
 *
	tô
);

669 
	tASN1_ex_‰ì_func
(
	tASN1_VALUE
 **
	tpvÆ
, c⁄° 
	tASN1_ITEM
 *
	tô
);

671 
	tASN1_ex_¥öt_func
(
	tBIO
 *
	tout
, 
	tASN1_VALUE
 **
	tpvÆ
,

672 
	tödít
, c⁄° *
	t‚ame
,

673 c⁄° 
	tASN1_PCTX
 *
	tp˘x
);

675 
	tASN1_¥imôive_i2c
(
	tASN1_VALUE
 **
	tpvÆ
, *
	tc⁄t
,

676 *
	tputy≥
, c⁄° 
	tASN1_ITEM
 *
	tô
);

677 
	tASN1_¥imôive_c2i
(
	tASN1_VALUE
 **
	tpvÆ
, c⁄° *
	tc⁄t
,

678 
	tÀn
, 
	tuty≥
, *
	t‰ì_c⁄t
,

679 c⁄° 
	tASN1_ITEM
 *
	tô
);

680 
	tASN1_¥imôive_¥öt
(
	tBIO
 *
	tout
, 
	tASN1_VALUE
 **
	tpvÆ
,

681 c⁄° 
	tASN1_ITEM
 *
	tô
, 
	tödít
,

682 c⁄° 
	tASN1_PCTX
 *
	tp˘x
);

684 
	sASN1_EXTERN_FUNCS_°
 {

685 *
≠p_d©a
;

686 
ASN1_ex_√w_func
 *
a¢1_ex_√w
;

687 
ASN1_ex_‰ì_func
 *
a¢1_ex_‰ì
;

688 
ASN1_ex_‰ì_func
 *
a¢1_ex_˛ór
;

689 
ASN1_ex_d2i
 *
a¢1_ex_d2i
;

690 
ASN1_ex_i2d
 *
a¢1_ex_i2d
;

691 
ASN1_ex_¥öt_func
 *
a¢1_ex_¥öt
;

692 } 
	tASN1_EXTERN_FUNCS
;

694 
	sASN1_PRIMITIVE_FUNCS_°
 {

695 *
≠p_d©a
;

696 
Êags
;

697 
ASN1_ex_√w_func
 *
¥im_√w
;

698 
ASN1_ex_‰ì_func
 *
¥im_‰ì
;

699 
ASN1_ex_‰ì_func
 *
¥im_˛ór
;

700 
ASN1_¥imôive_c2i
 *
¥im_c2i
;

701 
ASN1_¥imôive_i2c
 *
¥im_i2c
;

702 
ASN1_¥imôive_¥öt
 *
¥im_¥öt
;

703 } 
	tASN1_PRIMITIVE_FUNCS
;

718 
	tASN1_aux_cb
(
	t›î©i⁄
, 
	tASN1_VALUE
 **
	tö
, c⁄° 
	tASN1_ITEM
 *
	tô
,

719 *
	tex¨g
);

721 
	sASN1_AUX_°
 {

722 *
≠p_d©a
;

723 
Êags
;

724 
ªf_off£t
;

725 
ªf_lock
;

726 
ASN1_aux_cb
 *
a¢1_cb
;

727 
íc_off£t
;

728 } 
	tASN1_AUX
;

731 
	sASN1_PRINT_ARG_°
 {

732 
BIO
 *
out
;

733 
ödít
;

734 c⁄° 
ASN1_PCTX
 *
p˘x
;

735 } 
	tASN1_PRINT_ARG
;

738 
	sASN1_STREAM_ARG_°
 {

740 
BIO
 *
out
;

742 
BIO
 *
ndef_bio
;

744 **
bound¨y
;

745 } 
	tASN1_STREAM_ARG
;

750 
	#ASN1_AFLG_REFCOUNT
 1

	)

752 
	#ASN1_AFLG_ENCODING
 2

	)

754 
	#ASN1_AFLG_BROKEN
 4

	)

758 
	#ASN1_OP_NEW_PRE
 0

	)

759 
	#ASN1_OP_NEW_POST
 1

	)

760 
	#ASN1_OP_FREE_PRE
 2

	)

761 
	#ASN1_OP_FREE_POST
 3

	)

762 
	#ASN1_OP_D2I_PRE
 4

	)

763 
	#ASN1_OP_D2I_POST
 5

	)

764 
	#ASN1_OP_I2D_PRE
 6

	)

765 
	#ASN1_OP_I2D_POST
 7

	)

766 
	#ASN1_OP_PRINT_PRE
 8

	)

767 
	#ASN1_OP_PRINT_POST
 9

	)

768 
	#ASN1_OP_STREAM_PRE
 10

	)

769 
	#ASN1_OP_STREAM_POST
 11

	)

770 
	#ASN1_OP_DETACHED_PRE
 12

	)

771 
	#ASN1_OP_DETACHED_POST
 13

	)

774 
	#IMPLEMENT_ASN1_TYPE
(
°«me
Ë
	`IMPLEMENT_ASN1_TYPE_ex
(°«me, säame, 0)

	)

775 
	#IMPLEMENT_ASN1_TYPE_ex
(
ô«me
, 
v«me
, 
ex
) \

776 
	`ASN1_ITEM_°¨t
(
ô«me
) \

777 
ASN1_ITYPE_PRIMITIVE
, 
V_
##
v«me
, 
NULL
, 0, NULL, 
ex
, #itname \

778 
	`ASN1_ITEM_íd
(
ô«me
)

	)

781 
	#IMPLEMENT_ASN1_MSTRING
(
ô«me
, 
mask
) \

782 
	`ASN1_ITEM_°¨t
(
ô«me
) \

783 
ASN1_ITYPE_MSTRING
, 
mask
, 
NULL
, 0, NULL, (
ASN1_STRING
), #itname \

784 
	`ASN1_ITEM_íd
(
ô«me
)

	)

786 
	#IMPLEMENT_EXTERN_ASN1
(
¢ame
, 
èg
, 
Âås
) \

787 
	`ASN1_ITEM_°¨t
(
¢ame
) \

788 
ASN1_ITYPE_EXTERN
, \

789 
èg
, \

790 
NULL
, \

792 &
Âås
, \

795 
	`ASN1_ITEM_íd
(
¢ame
)

	)

799 
	#IMPLEMENT_ASN1_FUNCTIONS
(
°«me
Ë
	`IMPLEMENT_ASN1_FUNCTIONS_‚ame
(°«me, säame, säame)

	)

801 
	#IMPLEMENT_ASN1_FUNCTIONS_«me
(
°«me
, 
ô«me
Ë
	`IMPLEMENT_ASN1_FUNCTIONS_‚ame
(°«me, iäame, iäame)

	)

803 
	#IMPLEMENT_ASN1_FUNCTIONS_ENCODE_«me
(
°«me
, 
ô«me
) \

804 
	`IMPLEMENT_ASN1_FUNCTIONS_ENCODE_‚ame
(
°«me
, 
ô«me
, iäame)

	)

806 
	#IMPLEMENT_STATIC_ASN1_ALLOC_FUNCTIONS
(
°«me
) \

807 
	`IMPLEMENT_ASN1_ALLOC_FUNCTIONS_p‚ame
(, 
°«me
, säame, säame)

	)

809 
	#IMPLEMENT_ASN1_ALLOC_FUNCTIONS
(
°«me
) \

810 
	`IMPLEMENT_ASN1_ALLOC_FUNCTIONS_‚ame
(
°«me
, säame, säame)

	)

812 
	#IMPLEMENT_ASN1_ALLOC_FUNCTIONS_p‚ame
(
¥e
, 
°«me
, 
ô«me
, 
‚ame
) \

813 
¥e
 
°«me
 *
‚ame
##
	`_√w
() \

815  (
°«me
 *)
	`ASN1_ôem_√w
(
	`ASN1_ITEM_Ωå
(
ô«me
)); \

817 
¥e
 
‚ame
##
	`_‰ì
(
°«me
 *
a
) \

819 
	`ASN1_ôem_‰ì
((
ASN1_VALUE
 *)
a
, 
	`ASN1_ITEM_Ωå
(
ô«me
)); \

820 }

	)

822 
	#IMPLEMENT_ASN1_ALLOC_FUNCTIONS_‚ame
(
°«me
, 
ô«me
, 
‚ame
) \

823 
°«me
 *
‚ame
##
	`_√w
() \

825  (
°«me
 *)
	`ASN1_ôem_√w
(
	`ASN1_ITEM_Ωå
(
ô«me
)); \

827 
‚ame
##
	`_‰ì
(
°«me
 *
a
) \

829 
	`ASN1_ôem_‰ì
((
ASN1_VALUE
 *)
a
, 
	`ASN1_ITEM_Ωå
(
ô«me
)); \

830 }

	)

832 
	#IMPLEMENT_ASN1_FUNCTIONS_‚ame
(
°«me
, 
ô«me
, 
‚ame
) \

833 
	`IMPLEMENT_ASN1_ENCODE_FUNCTIONS_‚ame
(
°«me
, 
ô«me
, 
‚ame
) \

834 
	`IMPLEMENT_ASN1_ALLOC_FUNCTIONS_‚ame
(
°«me
, 
ô«me
, 
‚ame
)

	)

836 
	#IMPLEMENT_ASN1_ENCODE_FUNCTIONS_‚ame
(
°«me
, 
ô«me
, 
‚ame
) \

837 
°«me
 *
d2i_
##
	`‚ame
(°«mê**
a
, c⁄° **
ö
, 
Àn
) \

839  (
°«me
 *)
	`ASN1_ôem_d2i
((
ASN1_VALUE
 **)
a
, 
ö
, 
Àn
, 
	`ASN1_ITEM_Ωå
(
ô«me
));\

841 
i2d_
##
	`‚ame
(
°«me
 *
a
, **
out
) \

843  
	`ASN1_ôem_i2d
((
ASN1_VALUE
 *)
a
, 
out
, 
	`ASN1_ITEM_Ωå
(
ô«me
));\

844 }

	)

846 
	#IMPLEMENT_ASN1_NDEF_FUNCTION
(
°«me
) \

847 
i2d_
##
°«me
##
	`_NDEF
(°«mê*
a
, **
out
) \

849  
	`ASN1_ôem_ndef_i2d
((
ASN1_VALUE
 *)
a
, 
out
, 
	`ASN1_ITEM_Ωå
(
°«me
));\

850 }

	)

852 
	#IMPLEMENT_STATIC_ASN1_ENCODE_FUNCTIONS
(
°«me
) \

853 
°«me
 *
d2i_
##
	`°«me
(°«mê**
a
, \

854 c⁄° **
ö
, 
Àn
) \

856  (
°«me
 *)
	`ASN1_ôem_d2i
((
ASN1_VALUE
 **)
a
, 
ö
, 
Àn
, \

857 
	`ASN1_ITEM_Ωå
(
°«me
)); \

859 
i2d_
##
	`°«me
(
°«me
 *
a
, **
out
) \

861  
	`ASN1_ôem_i2d
((
ASN1_VALUE
 *)
a
, 
out
, \

862 
	`ASN1_ITEM_Ωå
(
°«me
)); \

863 }

	)

869 
	#IMPLEMENT_ASN1_ENCODE_FUNCTIONS_c⁄°_‚ame
(
°«me
, 
ô«me
, 
‚ame
) \

870 
°«me
 *
d2i_
##
	`‚ame
(°«mê**
a
, c⁄° **
ö
, 
Àn
) \

872  (
°«me
 *)
	`ASN1_ôem_d2i
((
ASN1_VALUE
 **)
a
, 
ö
, 
Àn
, 
	`ASN1_ITEM_Ωå
(
ô«me
));\

874 
i2d_
##
	`‚ame
(c⁄° 
°«me
 *
a
, **
out
) \

876  
	`ASN1_ôem_i2d
((
ASN1_VALUE
 *)
a
, 
out
, 
	`ASN1_ITEM_Ωå
(
ô«me
));\

877 }

	)

879 
	#IMPLEMENT_ASN1_DUP_FUNCTION
(
°«me
) \

880 
°«me
 * säame##
	`_dup
(°«mê*
x
) \

882  
	`ASN1_ôem_dup
(
	`ASN1_ITEM_Ωå
(
°«me
), 
x
); \

883 }

	)

885 
	#IMPLEMENT_ASN1_PRINT_FUNCTION
(
°«me
) \

886 
	`IMPLEMENT_ASN1_PRINT_FUNCTION_‚ame
(
°«me
, säame, säame)

	)

888 
	#IMPLEMENT_ASN1_PRINT_FUNCTION_‚ame
(
°«me
, 
ô«me
, 
‚ame
) \

889 
‚ame
##
	`_¥öt_˘x
(
BIO
 *
out
, 
°«me
 *
x
, 
ödít
, \

890 c⁄° 
ASN1_PCTX
 *
p˘x
) \

892  
	`ASN1_ôem_¥öt
(
out
, (
ASN1_VALUE
 *)
x
, 
ödít
, \

893 
	`ASN1_ITEM_Ωå
(
ô«me
), 
p˘x
); \

894 }

	)

896 
	#IMPLEMENT_ASN1_FUNCTIONS_c⁄°
(
«me
) \

897 
	`IMPLEMENT_ASN1_FUNCTIONS_c⁄°_‚ame
(
«me
,Çame,Çame)

	)

899 
	#IMPLEMENT_ASN1_FUNCTIONS_c⁄°_‚ame
(
°«me
, 
ô«me
, 
‚ame
) \

900 
	`IMPLEMENT_ASN1_ENCODE_FUNCTIONS_c⁄°_‚ame
(
°«me
, 
ô«me
, 
‚ame
) \

901 
	`IMPLEMENT_ASN1_ALLOC_FUNCTIONS_‚ame
(
°«me
, 
ô«me
, 
‚ame
)

	)

905 
DECLARE_ASN1_ITEM
(
ASN1_BOOLEAN
)

906 
DECLARE_ASN1_ITEM
(
ASN1_TBOOLEAN
)

907 
DECLARE_ASN1_ITEM
(
ASN1_FBOOLEAN
)

908 
DECLARE_ASN1_ITEM
(
ASN1_SEQUENCE
)

909 
DECLARE_ASN1_ITEM
(
CBIGNUM
)

910 
DECLARE_ASN1_ITEM
(
BIGNUM
)

911 
DECLARE_ASN1_ITEM
(
LONG
)

912 
DECLARE_ASN1_ITEM
(
ZLONG
)

914 
DEFINE_STACK_OF
(
ASN1_VALUE
)

918 
ASN1_ôem_ex_√w
(
ASN1_VALUE
 **
pvÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

919 
ASN1_ôem_ex_‰ì
(
ASN1_VALUE
 **
pvÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

921 
ASN1_ôem_ex_d2i
(
ASN1_VALUE
 **
pvÆ
, c⁄° **
ö
, 
Àn
,

922 c⁄° 
ASN1_ITEM
 *
ô
, 
èg
, 
a˛ass
, 
›t
,

923 
ASN1_TLC
 *
˘x
);

925 
ASN1_ôem_ex_i2d
(
ASN1_VALUE
 **
pvÆ
, **
out
,

926 c⁄° 
ASN1_ITEM
 *
ô
, 
èg
, 
a˛ass
);

928 #ifde‡ 
__˝lu•lus


	@async.h

10 
	~<°dlib.h
>

12 #i‚de‡
HEADER_ASYNC_H


13 
	#HEADER_ASYNC_H


	)

15 #i‡
deföed
(
_WIN32
)

16 #i‡
deföed
(
BASETYPES
Ë|| deföed(
_WINDEF_H
)

18 
	#OSSL_ASYNC_FD
 
HANDLE


	)

19 
	#OSSL_BAD_ASYNC_FD
 
INVALID_HANDLE_VALUE


	)

22 
	#OSSL_ASYNC_FD
 

	)

23 
	#OSSL_BAD_ASYNC_FD
 -1

	)

27 #ifde‡ 
__˝lu•lus


31 
async_job_°
 
	tASYNC_JOB
;

32 
async_waô_˘x_°
 
	tASYNC_WAIT_CTX
;

34 
	#ASYNC_ERR
 0

	)

35 
	#ASYNC_NO_JOBS
 1

	)

36 
	#ASYNC_PAUSE
 2

	)

37 
	#ASYNC_FINISH
 3

	)

39 
ASYNC_öô_thªad
(
size_t
 
max_size
, size_à
öô_size
);

40 
ASYNC_˛ónup_thªad
();

42 #ifde‡
OSSL_ASYNC_FD


43 
ASYNC_WAIT_CTX
 *
ASYNC_WAIT_CTX_√w
();

44 
ASYNC_WAIT_CTX_‰ì
(
ASYNC_WAIT_CTX
 *
˘x
);

45 
ASYNC_WAIT_CTX_£t_waô_fd
(
ASYNC_WAIT_CTX
 *
˘x
, c⁄° *
key
,

46 
OSSL_ASYNC_FD
 
fd
,

47 *
cu°om_d©a
,

48 (*
˛ónup
)(
ASYNC_WAIT_CTX
 *, const *,

49 
OSSL_ASYNC_FD
, *));

50 
ASYNC_WAIT_CTX_gë_fd
(
ASYNC_WAIT_CTX
 *
˘x
, c⁄° *
key
,

51 
OSSL_ASYNC_FD
 *
fd
, **
cu°om_d©a
);

52 
ASYNC_WAIT_CTX_gë_Æl_fds
(
ASYNC_WAIT_CTX
 *
˘x
, 
OSSL_ASYNC_FD
 *
fd
,

53 
size_t
 *
numfds
);

54 
ASYNC_WAIT_CTX_gë_ch™ged_fds
(
ASYNC_WAIT_CTX
 *
˘x
, 
OSSL_ASYNC_FD
 *
addfd
,

55 
size_t
 *
numaddfds
, 
OSSL_ASYNC_FD
 *
dñfd
,

56 
size_t
 *
numdñfds
);

57 
ASYNC_WAIT_CTX_˛ór_fd
(
ASYNC_WAIT_CTX
 *
˘x
, c⁄° *
key
);

60 
ASYNC_is_ˇ∑bÀ
();

62 
ASYNC_°¨t_job
(
ASYNC_JOB
 **
job
, 
ASYNC_WAIT_CTX
 *
˘x
, *
ªt
,

63 (*
func
)(*), *
¨gs
, 
size_t
 
size
);

64 
ASYNC_∑u£_job
();

66 
ASYNC_JOB
 *
ASYNC_gë_cuºít_job
();

67 
ASYNC_WAIT_CTX
 *
ASYNC_gë_waô_˘x
(
ASYNC_JOB
 *
job
);

68 
ASYNC_block_∑u£
();

69 
ASYNC_unblock_∑u£
();

77 
ERR_lﬂd_ASYNC_°rögs
();

82 
	#ASYNC_F_ASYNC_CTX_NEW
 100

	)

83 
	#ASYNC_F_ASYNC_INIT_THREAD
 101

	)

84 
	#ASYNC_F_ASYNC_JOB_NEW
 102

	)

85 
	#ASYNC_F_ASYNC_PAUSE_JOB
 103

	)

86 
	#ASYNC_F_ASYNC_START_FUNC
 104

	)

87 
	#ASYNC_F_ASYNC_START_JOB
 105

	)

90 
	#ASYNC_R_FAILED_TO_SET_POOL
 101

	)

91 
	#ASYNC_R_FAILED_TO_SWAP_CONTEXT
 102

	)

92 
	#ASYNC_R_INIT_FAILED
 105

	)

93 
	#ASYNC_R_INVALID_POOL_SIZE
 103

	)

95 #ifde‡ 
__˝lu•lus


	@bio.h

10 #i‚de‡
HEADER_BIO_H


11 
	#HEADER_BIO_H


	)

13 
	~<›ís¶/e_os2.h
>

15 #i‚de‡
OPENSSL_NO_STDIO


16 
	~<°dio.h
>

18 
	~<°d¨g.h
>

20 
	~<›ís¶/¸y±o.h
>

22 #i‚de‡
OPENSSL_NO_SCTP


23 #i‚de‡
OPENSSL_SYS_VMS


24 
	~<°döt.h
>

26 
	~<öây≥s.h
>

30 #ifde‡ 
__˝lu•lus


35 
	#BIO_TYPE_NONE
 0

	)

36 
	#BIO_TYPE_MEM
 (1|0x0400)

	)

37 
	#BIO_TYPE_FILE
 (2|0x0400)

	)

39 
	#BIO_TYPE_FD
 (4|0x0400|0x0100)

	)

40 
	#BIO_TYPE_SOCKET
 (5|0x0400|0x0100)

	)

41 
	#BIO_TYPE_NULL
 (6|0x0400)

	)

42 
	#BIO_TYPE_SSL
 (7|0x0200)

	)

43 
	#BIO_TYPE_MD
 (8|0x0200)

	)

44 
	#BIO_TYPE_BUFFER
 (9|0x0200)

	)

45 
	#BIO_TYPE_CIPHER
 (10|0x0200)

	)

46 
	#BIO_TYPE_BASE64
 (11|0x0200)

	)

47 
	#BIO_TYPE_CONNECT
 (12|0x0400|0x0100)

	)

48 
	#BIO_TYPE_ACCEPT
 (13|0x0400|0x0100)

	)

51 
	#BIO_TYPE_NBIO_TEST
 (16|0x0200)

	)

52 
	#BIO_TYPE_NULL_FILTER
 (17|0x0200)

	)

53 
	#BIO_TYPE_BER
 (18|0x0200)

	)

54 
	#BIO_TYPE_BIO
 (19|0x0400)

	)

55 
	#BIO_TYPE_LINEBUFFER
 (20|0x0200)

	)

56 
	#BIO_TYPE_DGRAM
 (21|0x0400|0x0100)

	)

57 #i‚de‡
OPENSSL_NO_SCTP


58 
	#BIO_TYPE_DGRAM_SCTP
 (24|0x0400|0x0100)

	)

60 
	#BIO_TYPE_ASN1
 (22|0x0200)

	)

61 
	#BIO_TYPE_COMP
 (23|0x0200)

	)

63 
	#BIO_TYPE_DESCRIPTOR
 0x0100

	)

64 
	#BIO_TYPE_FILTER
 0x0200

	)

65 
	#BIO_TYPE_SOURCE_SINK
 0x0400

	)

71 
	#BIO_NOCLOSE
 0x00

	)

72 
	#BIO_CLOSE
 0x01

	)

77 
	#BIO_CTRL_RESET
 1

	)

78 
	#BIO_CTRL_EOF
 2

	)

79 
	#BIO_CTRL_INFO
 3

	)

80 
	#BIO_CTRL_SET
 4

	)

81 
	#BIO_CTRL_GET
 5

	)

82 
	#BIO_CTRL_PUSH
 6

	)

83 
	#BIO_CTRL_POP
 7

	)

84 
	#BIO_CTRL_GET_CLOSE
 8

	)

85 
	#BIO_CTRL_SET_CLOSE
 9

	)

86 
	#BIO_CTRL_PENDING
 10

	)

87 
	#BIO_CTRL_FLUSH
 11

	)

88 
	#BIO_CTRL_DUP
 12

	)

89 
	#BIO_CTRL_WPENDING
 13

	)

90 
	#BIO_CTRL_SET_CALLBACK
 14

	)

91 
	#BIO_CTRL_GET_CALLBACK
 15

	)

93 
	#BIO_CTRL_SET_FILENAME
 30

	)

96 
	#BIO_CTRL_DGRAM_CONNECT
 31

	)

97 
	#BIO_CTRL_DGRAM_SET_CONNECTED
 32

	)

99 
	#BIO_CTRL_DGRAM_SET_RECV_TIMEOUT
 33

	)

100 
	#BIO_CTRL_DGRAM_GET_RECV_TIMEOUT
 34

	)

101 
	#BIO_CTRL_DGRAM_SET_SEND_TIMEOUT
 35

	)

102 
	#BIO_CTRL_DGRAM_GET_SEND_TIMEOUT
 36

	)

104 
	#BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
 37

	)

105 
	#BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
 38

	)

108 
	#BIO_CTRL_DGRAM_MTU_DISCOVER
 39

	)

111 
	#BIO_CTRL_DGRAM_QUERY_MTU
 40

	)

112 
	#BIO_CTRL_DGRAM_GET_FALLBACK_MTU
 47

	)

113 
	#BIO_CTRL_DGRAM_GET_MTU
 41

	)

114 
	#BIO_CTRL_DGRAM_SET_MTU
 42

	)

118 
	#BIO_CTRL_DGRAM_MTU_EXCEEDED
 43

	)

122 
	#BIO_CTRL_DGRAM_GET_PEER
 46

	)

123 
	#BIO_CTRL_DGRAM_SET_PEER
 44

	)

125 
	#BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT
 45

	)

127 
	#BIO_CTRL_DGRAM_SET_DONT_FRAG
 48

	)

129 
	#BIO_CTRL_DGRAM_GET_MTU_OVERHEAD
 49

	)

131 
	#BIO_CTRL_DGRAM_SET_PEEK_MODE
 50

	)

133 #i‚de‡
OPENSSL_NO_SCTP


135 
	#BIO_CTRL_DGRAM_SCTP_SET_IN_HANDSHAKE
 50

	)

136 
	#BIO_CTRL_DGRAM_SCTP_ADD_AUTH_KEY
 51

	)

137 
	#BIO_CTRL_DGRAM_SCTP_NEXT_AUTH_KEY
 52

	)

138 
	#BIO_CTRL_DGRAM_SCTP_AUTH_CCS_RCVD
 53

	)

139 
	#BIO_CTRL_DGRAM_SCTP_GET_SNDINFO
 60

	)

140 
	#BIO_CTRL_DGRAM_SCTP_SET_SNDINFO
 61

	)

141 
	#BIO_CTRL_DGRAM_SCTP_GET_RCVINFO
 62

	)

142 
	#BIO_CTRL_DGRAM_SCTP_SET_RCVINFO
 63

	)

143 
	#BIO_CTRL_DGRAM_SCTP_GET_PRINFO
 64

	)

144 
	#BIO_CTRL_DGRAM_SCTP_SET_PRINFO
 65

	)

145 
	#BIO_CTRL_DGRAM_SCTP_SAVE_SHUTDOWN
 70

	)

149 
	#BIO_FP_READ
 0x02

	)

150 
	#BIO_FP_WRITE
 0x04

	)

151 
	#BIO_FP_APPEND
 0x08

	)

152 
	#BIO_FP_TEXT
 0x10

	)

154 
	#BIO_FLAGS_READ
 0x01

	)

155 
	#BIO_FLAGS_WRITE
 0x02

	)

156 
	#BIO_FLAGS_IO_SPECIAL
 0x04

	)

157 
	#BIO_FLAGS_RWS
 (
BIO_FLAGS_READ
|
BIO_FLAGS_WRITE
|
BIO_FLAGS_IO_SPECIAL
)

	)

158 
	#BIO_FLAGS_SHOULD_RETRY
 0x08

	)

159 #i‚de‡
BIO_FLAGS_UPLINK


164 
	#BIO_FLAGS_UPLINK
 0

	)

167 
	#BIO_FLAGS_BASE64_NO_NL
 0x100

	)

174 
	#BIO_FLAGS_MEM_RDONLY
 0x200

	)

175 
	#BIO_FLAGS_NONCLEAR_RST
 0x400

	)

177 
bio_addr_°
 
	tBIO_ADDR
;

178 
bio_addröfo_°
 
	tBIO_ADDRINFO
;

180 
BIO_£t_Êags
(
BIO
 *
b
, 
Êags
);

181 
BIO_ã°_Êags
(c⁄° 
BIO
 *
b
, 
Êags
);

182 
BIO_˛ór_Êags
(
BIO
 *
b
, 
Êags
);

184 
	#BIO_gë_Êags
(
b
Ë
	`BIO_ã°_Êags
(b, ~(0x0))

	)

185 
	#BIO_£t_ªåy_•ecül
(
b
) \

186 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_IO_SPECIAL
|
BIO_FLAGS_SHOULD_RETRY
))

	)

187 
	#BIO_£t_ªåy_ªad
(
b
) \

188 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_READ
|
BIO_FLAGS_SHOULD_RETRY
))

	)

189 
	#BIO_£t_ªåy_wrôe
(
b
) \

190 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_WRITE
|
BIO_FLAGS_SHOULD_RETRY
))

	)

193 
	#BIO_˛ór_ªåy_Êags
(
b
) \

194 
	`BIO_˛ór_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

195 
	#BIO_gë_ªåy_Êags
(
b
) \

196 
	`BIO_ã°_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

199 
	#BIO_should_ªad
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_READ
)

	)

200 
	#BIO_should_wrôe
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_WRITE
)

	)

201 
	#BIO_should_io_•ecül
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_IO_SPECIAL
)

	)

202 
	#BIO_ªåy_ty≥
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_RWS
)

	)

203 
	#BIO_should_ªåy
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_SHOULD_RETRY
)

	)

215 
	#BIO_RR_SSL_X509_LOOKUP
 0x01

	)

217 
	#BIO_RR_CONNECT
 0x02

	)

219 
	#BIO_RR_ACCEPT
 0x03

	)

222 
	#BIO_CB_FREE
 0x01

	)

223 
	#BIO_CB_READ
 0x02

	)

224 
	#BIO_CB_WRITE
 0x03

	)

225 
	#BIO_CB_PUTS
 0x04

	)

226 
	#BIO_CB_GETS
 0x05

	)

227 
	#BIO_CB_CTRL
 0x06

	)

233 
	#BIO_CB_RETURN
 0x80

	)

234 
	#BIO_CB_ªtu∫
(
a
Ë(◊)|
BIO_CB_RETURN
)

	)

235 
	#BIO_cb_¥e
(
a
Ë(!(◊)&
BIO_CB_RETURN
))

	)

236 
	#BIO_cb_po°
(
a
Ë(◊)&
BIO_CB_RETURN
)

	)

238 (*
BIO_ˇŒback_‚
)(
	tBIO
 *
	tb
, 
	t›î
, c⁄° *
	t¨gp
, 
	t¨gi
,

239 
	t¨gl
, 
	tªt
);

240 
BIO_ˇŒback_‚
 
BIO_gë_ˇŒback
(c⁄° 
BIO
 *
b
);

241 
BIO_£t_ˇŒback
(
BIO
 *
b
, 
BIO_ˇŒback_‚
 
ˇŒback
);

242 *
BIO_gë_ˇŒback_¨g
(c⁄° 
BIO
 *
b
);

243 
BIO_£t_ˇŒback_¨g
(
BIO
 *
b
, *
¨g
);

245 
bio_mëhod_°
 
	tBIO_METHOD
;

247 c⁄° *
BIO_mëhod_«me
(c⁄° 
BIO
 *
b
);

248 
BIO_mëhod_ty≥
(c⁄° 
BIO
 *
b
);

250 
	tbio_öfo_cb
(
	tBIO
 *, , const *, , , );

252 
DEFINE_STACK_OF
(
BIO
)

255 
	ta¢1_ps_func
 (
	tBIO
 *
	tb
, **
	tpbuf
, *
	t∂í
,

256 *
	t∑rg
);

258 #i‚de‡
OPENSSL_NO_SCTP


260 
	sbio_dgøm_s˘p_¢döfo
 {

261 
uöt16_t
 
¢d_sid
;

262 
uöt16_t
 
¢d_Êags
;

263 
uöt32_t
 
¢d_µid
;

264 
uöt32_t
 
¢d_c⁄ãxt
;

267 
	sbio_dgøm_s˘p_rcvöfo
 {

268 
uöt16_t
 
rcv_sid
;

269 
uöt16_t
 
rcv_s¢
;

270 
uöt16_t
 
rcv_Êags
;

271 
uöt32_t
 
rcv_µid
;

272 
uöt32_t
 
rcv_t¢
;

273 
uöt32_t
 
rcv_cumt¢
;

274 
uöt32_t
 
rcv_c⁄ãxt
;

277 
	sbio_dgøm_s˘p_¥öfo
 {

278 
uöt16_t
 
¥_pﬁicy
;

279 
uöt32_t
 
¥_vÆue
;

287 
	#BIO_C_SET_CONNECT
 100

	)

288 
	#BIO_C_DO_STATE_MACHINE
 101

	)

289 
	#BIO_C_SET_NBIO
 102

	)

291 
	#BIO_C_SET_FD
 104

	)

292 
	#BIO_C_GET_FD
 105

	)

293 
	#BIO_C_SET_FILE_PTR
 106

	)

294 
	#BIO_C_GET_FILE_PTR
 107

	)

295 
	#BIO_C_SET_FILENAME
 108

	)

296 
	#BIO_C_SET_SSL
 109

	)

297 
	#BIO_C_GET_SSL
 110

	)

298 
	#BIO_C_SET_MD
 111

	)

299 
	#BIO_C_GET_MD
 112

	)

300 
	#BIO_C_GET_CIPHER_STATUS
 113

	)

301 
	#BIO_C_SET_BUF_MEM
 114

	)

302 
	#BIO_C_GET_BUF_MEM_PTR
 115

	)

303 
	#BIO_C_GET_BUFF_NUM_LINES
 116

	)

304 
	#BIO_C_SET_BUFF_SIZE
 117

	)

305 
	#BIO_C_SET_ACCEPT
 118

	)

306 
	#BIO_C_SSL_MODE
 119

	)

307 
	#BIO_C_GET_MD_CTX
 120

	)

309 
	#BIO_C_SET_BUFF_READ_DATA
 122

	)

310 
	#BIO_C_GET_CONNECT
 123

	)

311 
	#BIO_C_GET_ACCEPT
 124

	)

312 
	#BIO_C_SET_SSL_RENEGOTIATE_BYTES
 125

	)

313 
	#BIO_C_GET_SSL_NUM_RENEGOTIATES
 126

	)

314 
	#BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
 127

	)

315 
	#BIO_C_FILE_SEEK
 128

	)

316 
	#BIO_C_GET_CIPHER_CTX
 129

	)

317 
	#BIO_C_SET_BUF_MEM_EOF_RETURN
 130

	)

319 
	#BIO_C_SET_BIND_MODE
 131

	)

320 
	#BIO_C_GET_BIND_MODE
 132

	)

321 
	#BIO_C_FILE_TELL
 133

	)

322 
	#BIO_C_GET_SOCKS
 134

	)

323 
	#BIO_C_SET_SOCKS
 135

	)

325 
	#BIO_C_SET_WRITE_BUF_SIZE
 136

	)

326 
	#BIO_C_GET_WRITE_BUF_SIZE
 137

	)

327 
	#BIO_C_MAKE_BIO_PAIR
 138

	)

328 
	#BIO_C_DESTROY_BIO_PAIR
 139

	)

329 
	#BIO_C_GET_WRITE_GUARANTEE
 140

	)

330 
	#BIO_C_GET_READ_REQUEST
 141

	)

331 
	#BIO_C_SHUTDOWN_WR
 142

	)

332 
	#BIO_C_NREAD0
 143

	)

333 
	#BIO_C_NREAD
 144

	)

334 
	#BIO_C_NWRITE0
 145

	)

335 
	#BIO_C_NWRITE
 146

	)

336 
	#BIO_C_RESET_READ_REQUEST
 147

	)

337 
	#BIO_C_SET_MD_CTX
 148

	)

339 
	#BIO_C_SET_PREFIX
 149

	)

340 
	#BIO_C_GET_PREFIX
 150

	)

341 
	#BIO_C_SET_SUFFIX
 151

	)

342 
	#BIO_C_GET_SUFFIX
 152

	)

344 
	#BIO_C_SET_EX_ARG
 153

	)

345 
	#BIO_C_GET_EX_ARG
 154

	)

347 
	#BIO_C_SET_CONNECT_MODE
 155

	)

349 
	#BIO_£t_≠p_d©a
(
s
,
¨g
Ë
	`BIO_£t_ex_d©a
(s,0,¨g)

	)

350 
	#BIO_gë_≠p_d©a
(
s
Ë
	`BIO_gë_ex_d©a
(s,0)

	)

352 
	#BIO_£t_nbio
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_NBIO
,“),
NULL
)

	)

354 #i‚de‡
OPENSSL_NO_SOCK


357 
	#BIO_FAMILY_IPV4
 4

	)

358 
	#BIO_FAMILY_IPV6
 6

	)

359 
	#BIO_FAMILY_IPANY
 256

	)

362 
	#BIO_£t_c⁄n_ho°«me
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,0,(*Íame)

	)

363 
	#BIO_£t_c⁄n_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,1,(*Ì‹t)

	)

364 
	#BIO_£t_c⁄n_addªss
(
b
,
addr
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,2,(*Ôddr)

	)

365 
	#BIO_£t_c⁄n_ù_Ámûy
(
b
,
f
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_CONNECT
,3,f)

	)

366 
	#BIO_gë_c⁄n_ho°«me
(
b
Ë((c⁄° *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,0,
NULL
))

	)

367 
	#BIO_gë_c⁄n_p‹t
(
b
Ë((c⁄° *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,1,
NULL
))

	)

368 
	#BIO_gë_c⁄n_addªss
(
b
Ë((c⁄° 
BIO_ADDR
 *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,2,
NULL
))

	)

369 
	#BIO_gë_c⁄n_ù_Ámûy
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CONNECT
,3,
NULL
)

	)

370 
	#BIO_£t_c⁄n_mode
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT_MODE
,“),
NULL
)

	)

373 
	#BIO_£t_ac˚±_«me
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,0,(*Íame)

	)

374 
	#BIO_£t_ac˚±_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,1,(*Ì‹t)

	)

375 
	#BIO_gë_ac˚±_«me
(
b
Ë((c⁄° *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_ACCEPT
,0))

	)

376 
	#BIO_gë_ac˚±_p‹t
(
b
Ë((c⁄° *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_ACCEPT
,1))

	)

377 
	#BIO_gë_≥î_«me
(
b
Ë((c⁄° *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_ACCEPT
,2))

	)

378 
	#BIO_gë_≥î_p‹t
(
b
Ë((c⁄° *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_ACCEPT
,3))

	)

380 
	#BIO_£t_nbio_ac˚±
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,2,“)?(*)"a":
NULL
)

	)

381 
	#BIO_£t_ac˚±_bios
(
b
,
bio
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,3,(*)bio)

	)

382 
	#BIO_£t_ac˚±_ù_Ámûy
(
b
,
f
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_ACCEPT
,4,f)

	)

383 
	#BIO_gë_ac˚±_ù_Ámûy
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_ACCEPT
,4,
NULL
)

	)

386 
	#BIO_BIND_NORMAL
 0

	)

387 
	#BIO_BIND_REUSEADDR
 
BIO_SOCK_REUSEADDR


	)

388 
	#BIO_BIND_REUSEADDR_IF_UNUSED
 
BIO_SOCK_REUSEADDR


	)

389 
	#BIO_£t_böd_mode
(
b
,
mode
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BIND_MODE
,mode,
NULL
)

	)

390 
	#BIO_gë_böd_mode
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BIND_MODE
,0,
NULL
)

	)

393 
	#BIO_do_c⁄√˘
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

394 
	#BIO_do_ac˚±
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

397 
	#BIO_do_h™dshake
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_DO_STATE_MACHINE
,0,
NULL
)

	)

400 
	#BIO_£t_fd
(
b
,
fd
,
c
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_FD
,c,fd)

	)

401 
	#BIO_gë_fd
(
b
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FD
,0,(*)c)

	)

404 
	#BIO_£t_Â
(
b
,
Â
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILE_PTR
,c,(*)Â)

	)

405 
	#BIO_gë_Â
(
b
,
Âp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FILE_PTR
,0,(*)Âp)

	)

408 
	#BIO_£ek
(
b
,
ofs
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_SEEK
,ofs,
NULL
)

	)

409 
	#BIO_ãŒ
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_TELL
,0,
NULL
)

	)

415 #ifde‡
CONST_STRICT


420 
BIO_ªad_fûíame
(
BIO
 *
b
, c⁄° *
«me
);

422 
	#BIO_ªad_fûíame
(
b
,
«me
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

423 
BIO_CLOSE
|
BIO_FP_READ
,(*)
«me
)

	)

425 
	#BIO_wrôe_fûíame
(
b
,
«me
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

426 
BIO_CLOSE
|
BIO_FP_WRITE
,
«me
)

	)

427 
	#BIO_≠≥nd_fûíame
(
b
,
«me
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

428 
BIO_CLOSE
|
BIO_FP_APPEND
,
«me
)

	)

429 
	#BIO_rw_fûíame
(
b
,
«me
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

430 
BIO_CLOSE
|
BIO_FP_READ
|
BIO_FP_WRITE
,
«me
)

	)

438 
	#BIO_£t_s¶
(
b
,
s¶
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_SSL
,c,(*)s¶)

	)

439 
	#BIO_gë_s¶
(
b
,
s¶p
Ë
	`BIO_˘æ
(b,
BIO_C_GET_SSL
,0,(*)s¶p)

	)

440 
	#BIO_£t_s¶_mode
(
b
,
˛õ¡
Ë
	`BIO_˘æ
(b,
BIO_C_SSL_MODE
,˛õ¡,
NULL
)

	)

441 
	#BIO_£t_s¶_ª√gŸüã_byãs
(
b
,
num
) \

442 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_BYTES
,
num
,
NULL
)

	)

443 
	#BIO_gë_num_ª√gŸüãs
(
b
) \

444 
	`BIO_˘æ
(
b
,
BIO_C_GET_SSL_NUM_RENEGOTIATES
,0,
NULL
)

	)

445 
	#BIO_£t_s¶_ª√gŸüã_timeout
(
b
,
£c⁄ds
) \

446 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
,
£c⁄ds
,
NULL
)

	)

451 
	#BIO_gë_mem_d©a
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_CTRL_INFO
,0,(*Ìp)

	)

452 
	#BIO_£t_mem_buf
(
b
,
bm
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUF_MEM
,c,(*)bm)

	)

453 
	#BIO_gë_mem_±r
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUF_MEM_PTR
,0,(*Ìp)

	)

454 
	#BIO_£t_mem_eof_ªtu∫
(
b
,
v
) \

455 
	`BIO_˘æ
(
b
,
BIO_C_SET_BUF_MEM_EOF_RETURN
,
v
,
NULL
)

	)

458 
	#BIO_gë_buf„r_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUFF_NUM_LINES
,0,
NULL
)

	)

459 
	#BIO_£t_buf„r_size
(
b
,
size
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,
NULL
)

	)

460 
	#BIO_£t_ªad_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,0)

	)

461 
	#BIO_£t_wrôe_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,1)

	)

462 
	#BIO_£t_buf„r_ªad_d©a
(
b
,
buf
,
num
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_READ_DATA
,num,buf)

	)

465 
	#BIO_dup_°©e
(
b
,
ªt
Ë
	`BIO_˘æ
(b,
BIO_CTRL_DUP
,0,(*)‘ë))

	)

467 
	#BIO_ª£t
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_RESET
,0,
NULL
)

	)

468 
	#BIO_eof
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_EOF
,0,
NULL
)

	)

469 
	#BIO_£t_˛o£
(
b
,
c
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_SET_CLOSE
,(c),
NULL
)

	)

470 
	#BIO_gë_˛o£
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CLOSE
,0,
NULL
)

	)

471 
	#BIO_≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_PENDING
,0,
NULL
)

	)

472 
	#BIO_w≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_WPENDING
,0,
NULL
)

	)

474 
size_t
 
BIO_˘æ_≥ndög
(
BIO
 *
b
);

475 
size_t
 
BIO_˘æ_w≥ndög
(
BIO
 *
b
);

476 
	#BIO_Êush
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_FLUSH
,0,
NULL
)

	)

477 
	#BIO_gë_öfo_ˇŒback
(
b
,
cbp
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CALLBACK
,0, \

478 
cbp
)

	)

479 
	#BIO_£t_öfo_ˇŒback
(
b
,
cb
Ë()
	`BIO_ˇŒback_˘æ
(b,
BIO_CTRL_SET_CALLBACK
,cb)

	)

482 
	#BIO_buf„r_gë_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_CTRL_GET
,0,
NULL
)

	)

485 
	#BIO_£t_wrôe_buf_size
(
b
,
size
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_WRITE_BUF_SIZE
,size,
NULL
)

	)

486 
	#BIO_gë_wrôe_buf_size
(
b
,
size
Ë(
size_t
)
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_BUF_SIZE
,size,
NULL
)

	)

487 
	#BIO_make_bio_∑ú
(
b1
,
b2
Ë()
	`BIO_˘æ
(b1,
BIO_C_MAKE_BIO_PAIR
,0,b2)

	)

488 
	#BIO_de°roy_bio_∑ú
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_DESTROY_BIO_PAIR
,0,
NULL
)

	)

489 
	#BIO_shutdown_wr
(
b
Ë()
	`BIO_˘æ
(b, 
BIO_C_SHUTDOWN_WR
, 0, 
NULL
)

	)

491 
	#BIO_gë_wrôe_gu¨™ãe
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_GUARANTEE
,0,
NULL
)

	)

492 
	#BIO_gë_ªad_ªque°
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_READ_REQUEST
,0,
NULL
)

	)

493 
size_t
 
BIO_˘æ_gë_wrôe_gu¨™ãe
(
BIO
 *
b
);

494 
size_t
 
BIO_˘æ_gë_ªad_ªque°
(
BIO
 *
b
);

495 
BIO_˘æ_ª£t_ªad_ªque°
(
BIO
 *
b
);

498 
	#BIO_˘æ_dgøm_c⁄√˘
(
b
,
≥î
) \

499 ()
	`BIO_˘æ
(
b
,
BIO_CTRL_DGRAM_CONNECT
,0, (*)
≥î
)

	)

500 
	#BIO_˘æ_£t_c⁄√˘ed
(
b
,
≥î
) \

501 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_CONNECTED
, 0, (*)
≥î
)

	)

502 
	#BIO_dgøm_ªcv_timedout
(
b
) \

503 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
, 0, 
NULL
)

	)

504 
	#BIO_dgøm_£nd_timedout
(
b
) \

505 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
, 0, 
NULL
)

	)

506 
	#BIO_dgøm_gë_≥î
(
b
,
≥î
) \

507 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_PEER
, 0, (*)
≥î
)

	)

508 
	#BIO_dgøm_£t_≥î
(
b
,
≥î
) \

509 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_PEER
, 0, (*)
≥î
)

	)

510 
	#BIO_dgøm_gë_mtu_ovîhód
(
b
) \

511 ()
	`BIO_˘æ
((
b
), 
BIO_CTRL_DGRAM_GET_MTU_OVERHEAD
, 0, 
NULL
)

	)

513 
	#BIO_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

514 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_BIO
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

515 
BIO_£t_ex_d©a
(
BIO
 *
bio
, 
idx
, *
d©a
);

516 *
BIO_gë_ex_d©a
(
BIO
 *
bio
, 
idx
);

517 
uöt64_t
 
BIO_numbî_ªad
(
BIO
 *
bio
);

518 
uöt64_t
 
BIO_numbî_wrôãn
(
BIO
 *
bio
);

521 
BIO_a¢1_£t_¥efix
(
BIO
 *
b
, 
a¢1_ps_func
 *
¥efix
,

522 
a¢1_ps_func
 *
¥efix_‰ì
);

523 
BIO_a¢1_gë_¥efix
(
BIO
 *
b
, 
a¢1_ps_func
 **
µªfix
,

524 
a¢1_ps_func
 **
µªfix_‰ì
);

525 
BIO_a¢1_£t_suffix
(
BIO
 *
b
, 
a¢1_ps_func
 *
suffix
,

526 
a¢1_ps_func
 *
suffix_‰ì
);

527 
BIO_a¢1_gë_suffix
(
BIO
 *
b
, 
a¢1_ps_func
 **
psuffix
,

528 
a¢1_ps_func
 **
psuffix_‰ì
);

530 c⁄° 
BIO_METHOD
 *
BIO_s_fûe
();

531 
BIO
 *
BIO_√w_fûe
(c⁄° *
fûíame
, c⁄° *
mode
);

532 #i‚de‡
OPENSSL_NO_STDIO


533 
BIO
 *
BIO_√w_Â
(
FILE
 *
°ªam
, 
˛o£_Êag
);

535 
BIO
 *
BIO_√w
(c⁄° 
BIO_METHOD
 *
ty≥
);

536 
BIO_£t
(
BIO
 *
a
, c⁄° 
BIO_METHOD
 *
ty≥
);

537 
BIO_‰ì
(
BIO
 *
a
);

538 
BIO_£t_d©a
(
BIO
 *
a
, *
±r
);

539 *
BIO_gë_d©a
(
BIO
 *
a
);

540 
BIO_£t_öô
(
BIO
 *
a
, 
öô
);

541 
BIO_gë_öô
(
BIO
 *
a
);

542 
BIO_£t_shutdown
(
BIO
 *
a
, 
shut
);

543 
BIO_gë_shutdown
(
BIO
 *
a
);

544 
BIO_v‰ì
(
BIO
 *
a
);

545 
BIO_up_ªf
(
BIO
 *
a
);

546 
BIO_ªad
(
BIO
 *
b
, *
d©a
, 
Àn
);

547 
BIO_gës
(
BIO
 *
bp
, *
buf
, 
size
);

548 
BIO_wrôe
(
BIO
 *
b
, c⁄° *
d©a
, 
Àn
);

549 
BIO_puts
(
BIO
 *
bp
, c⁄° *
buf
);

550 
BIO_ödít
(
BIO
 *
b
, 
ödít
, 
max
);

551 
BIO_˘æ
(
BIO
 *
bp
, 
cmd
, 
œrg
, *
∑rg
);

552 
BIO_ˇŒback_˘æ
(
BIO
 *
b
, 
cmd
,

553 (*
Â
Ë(
BIO
 *, , const *, , , ));

554 *
BIO_±r_˘æ
(
BIO
 *
bp
, 
cmd
, 
œrg
);

555 
BIO_öt_˘æ
(
BIO
 *
bp
, 
cmd
, 
œrg
, 
ürg
);

556 
BIO
 *
BIO_push
(BIO *
b
, BIO *
≠≥nd
);

557 
BIO
 *
BIO_p›
(BIO *
b
);

558 
BIO_‰ì_Æl
(
BIO
 *
a
);

559 
BIO
 *
BIO_föd_ty≥
(BIO *
b
, 
bio_ty≥
);

560 
BIO
 *
BIO_√xt
(BIO *
b
);

561 
BIO_£t_√xt
(
BIO
 *
b
, BIO *
√xt
);

562 
BIO
 *
BIO_gë_ªåy_BIO
(BIO *
bio
, *
ªas⁄
);

563 
BIO_gë_ªåy_ªas⁄
(
BIO
 *
bio
);

564 
BIO_£t_ªåy_ªas⁄
(
BIO
 *
bio
, 
ªas⁄
);

565 
BIO
 *
BIO_dup_chaö
(BIO *
ö
);

567 
BIO_ƒód0
(
BIO
 *
bio
, **
buf
);

568 
BIO_ƒód
(
BIO
 *
bio
, **
buf
, 
num
);

569 
BIO_nwrôe0
(
BIO
 *
bio
, **
buf
);

570 
BIO_nwrôe
(
BIO
 *
bio
, **
buf
, 
num
);

572 
BIO_debug_ˇŒback
(
BIO
 *
bio
, 
cmd
, c⁄° *
¨gp
, 
¨gi
,

573 
¨gl
, 
ªt
);

575 c⁄° 
BIO_METHOD
 *
BIO_s_mem
();

576 c⁄° 
BIO_METHOD
 *
BIO_s_£cmem
();

577 
BIO
 *
BIO_√w_mem_buf
(c⁄° *
buf
, 
Àn
);

578 #i‚de‡
OPENSSL_NO_SOCK


579 c⁄° 
BIO_METHOD
 *
BIO_s_sockë
();

580 c⁄° 
BIO_METHOD
 *
BIO_s_c⁄√˘
();

581 c⁄° 
BIO_METHOD
 *
BIO_s_ac˚±
();

583 c⁄° 
BIO_METHOD
 *
BIO_s_fd
();

584 c⁄° 
BIO_METHOD
 *
BIO_s_log
();

585 c⁄° 
BIO_METHOD
 *
BIO_s_bio
();

586 c⁄° 
BIO_METHOD
 *
BIO_s_nuŒ
();

587 c⁄° 
BIO_METHOD
 *
BIO_f_nuŒ
();

588 c⁄° 
BIO_METHOD
 *
BIO_f_buf„r
();

589 c⁄° 
BIO_METHOD
 *
BIO_f_löebuf„r
();

590 c⁄° 
BIO_METHOD
 *
BIO_f_nbio_ã°
();

591 #i‚de‡
OPENSSL_NO_DGRAM


592 c⁄° 
BIO_METHOD
 *
BIO_s_d©agøm
();

593 
BIO_dgøm_n⁄_Áèl_îr‹
(
îr‹
);

594 
BIO
 *
BIO_√w_dgøm
(
fd
, 
˛o£_Êag
);

595 #i‚de‡
OPENSSL_NO_SCTP


596 c⁄° 
BIO_METHOD
 *
BIO_s_d©agøm_s˘p
();

597 
BIO
 *
BIO_√w_dgøm_s˘p
(
fd
, 
˛o£_Êag
);

598 
BIO_dgøm_is_s˘p
(
BIO
 *
bio
);

599 
BIO_dgøm_s˘p_nŸifiˇti⁄_cb
(
BIO
 *
b
,

600 (*
h™dÀ_nŸifiˇti⁄s
Ë(
BIO
 *
bio
,

601 *
c⁄ãxt
,

602 *
buf
),

603 *
c⁄ãxt
);

604 
BIO_dgøm_s˘p_waô_f‹_dry
(
BIO
 *
b
);

605 
BIO_dgøm_s˘p_msg_waôög
(
BIO
 *
b
);

609 #i‚de‡
OPENSSL_NO_SOCK


610 
BIO_sock_should_ªåy
(
i
);

611 
BIO_sock_n⁄_Áèl_îr‹
(
îr‹
);

614 
BIO_fd_should_ªåy
(
i
);

615 
BIO_fd_n⁄_Áèl_îr‹
(
îr‹
);

616 
BIO_dump_cb
((*
cb
Ë(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

617 *
u
, c⁄° *
s
, 
Àn
);

618 
BIO_dump_ödít_cb
((*
cb
Ë(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

619 *
u
, c⁄° *
s
, 
Àn
, 
ödít
);

620 
BIO_dump
(
BIO
 *
b
, c⁄° *
byãs
, 
Àn
);

621 
BIO_dump_ödít
(
BIO
 *
b
, c⁄° *
byãs
, 
Àn
, 
ödít
);

622 #i‚de‡
OPENSSL_NO_STDIO


623 
BIO_dump_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
);

624 
BIO_dump_ödít_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
, 
ödít
);

626 
BIO_hex_°rög
(
BIO
 *
out
, 
ödít
, 
width
, *
d©a
,

627 
d©Æí
);

629 #i‚de‡
OPENSSL_NO_SOCK


630 
BIO_ADDR
 *
BIO_ADDR_√w
();

631 
BIO_ADDR_øwmake
(
BIO_ADDR
 *
≠
, 
Ámûy
,

632 c⁄° *
whîe
, 
size_t
 
whîñí
, 
p‹t
);

633 
BIO_ADDR_‰ì
(
BIO_ADDR
 *);

634 
BIO_ADDR_˛ór
(
BIO_ADDR
 *
≠
);

635 
BIO_ADDR_Ámûy
(c⁄° 
BIO_ADDR
 *
≠
);

636 
BIO_ADDR_øwaddªss
(c⁄° 
BIO_ADDR
 *
≠
, *
p
, 
size_t
 *
l
);

637 
BIO_ADDR_øwp‹t
(c⁄° 
BIO_ADDR
 *
≠
);

638 *
BIO_ADDR_ho°«me_°rög
(c⁄° 
BIO_ADDR
 *
≠
, 
numîic
);

639 *
BIO_ADDR_£rvi˚_°rög
(c⁄° 
BIO_ADDR
 *
≠
, 
numîic
);

640 *
BIO_ADDR_∑th_°rög
(c⁄° 
BIO_ADDR
 *
≠
);

642 c⁄° 
BIO_ADDRINFO
 *
BIO_ADDRINFO_√xt
(c⁄° BIO_ADDRINFO *
bai
);

643 
BIO_ADDRINFO_Ámûy
(c⁄° 
BIO_ADDRINFO
 *
bai
);

644 
BIO_ADDRINFO_sockty≥
(c⁄° 
BIO_ADDRINFO
 *
bai
);

645 
BIO_ADDRINFO_¥Ÿocﬁ
(c⁄° 
BIO_ADDRINFO
 *
bai
);

646 c⁄° 
BIO_ADDR
 *
BIO_ADDRINFO_addªss
(c⁄° 
BIO_ADDRINFO
 *
bai
);

647 
BIO_ADDRINFO_‰ì
(
BIO_ADDRINFO
 *
bai
);

649 
	eBIO_ho°£rv_¥i‹ôõs
 {

650 
BIO_PARSE_PRIO_HOST
, 
BIO_PARSE_PRIO_SERV


652 
BIO_∑r£_ho°£rv
(c⁄° *
ho°£rv
, **
ho°
, **
£rvi˚
,

653 
BIO_ho°£rv_¥i‹ôõs
 
ho°£rv_¥io
);

654 
	eBIO_lookup_ty≥
 {

655 
BIO_LOOKUP_CLIENT
, 
BIO_LOOKUP_SERVER


657 
BIO_lookup
(c⁄° *
ho°
, c⁄° *
£rvi˚
,

658 
BIO_lookup_ty≥
 
lookup_ty≥
,

659 
Ámûy
, 
sockty≥
, 
BIO_ADDRINFO
 **
ªs
);

660 
BIO_sock_îr‹
(
sock
);

661 
BIO_sockë_io˘l
(
fd
, 
ty≥
, *
¨g
);

662 
BIO_sockë_nbio
(
fd
, 
mode
);

663 
BIO_sock_öô
();

664 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

665 
	#BIO_sock_˛ónup
(Ë0Ë

	)

667 
BIO_£t_t˝_ndñay
(
sock
, 
tu∫_⁄
);

669 
DEPRECATEDIN_1_1_0
(
ho°ít
 *
BIO_gëho°by«me
(c⁄° *
«me
))

670 
DEPRECATEDIN_1_1_0
(
BIO_gë_p‹t
(c⁄° *
°r
, *
p‹t_±r
))

671 
DEPRECATEDIN_1_1_0
(
BIO_gë_ho°_ù
(c⁄° *
°r
, *
ù
))

672 
DEPRECATEDIN_1_1_0
(
BIO_gë_ac˚±_sockë
(*
ho°_p‹t
, 
mode
))

673 
DEPRECATEDIN_1_1_0
(
BIO_ac˚±
(
sock
, **
ù_p‹t
))

675 
	uBIO_sock_öfo_u
 {

676 
BIO_ADDR
 *
addr
;

678 
	eBIO_sock_öfo_ty≥
 {

679 
BIO_SOCK_INFO_ADDRESS


681 
BIO_sock_öfo
(
sock
,

682 
BIO_sock_öfo_ty≥
 
ty≥
, 
BIO_sock_öfo_u
 *
öfo
);

684 
	#BIO_SOCK_REUSEADDR
 0x01

	)

685 
	#BIO_SOCK_V6_ONLY
 0x02

	)

686 
	#BIO_SOCK_KEEPALIVE
 0x04

	)

687 
	#BIO_SOCK_NONBLOCK
 0x08

	)

688 
	#BIO_SOCK_NODELAY
 0x10

	)

690 
BIO_sockë
(
domaö
, 
sockty≥
, 
¥Ÿocﬁ
, 
›ti⁄s
);

691 
BIO_c⁄√˘
(
sock
, c⁄° 
BIO_ADDR
 *
addr
, 
›ti⁄s
);

692 
BIO_li°í
(
sock
, c⁄° 
BIO_ADDR
 *
addr
, 
›ti⁄s
);

693 
BIO_ac˚±_ex
(
ac˚±_sock
, 
BIO_ADDR
 *
addr
, 
›ti⁄s
);

694 
BIO_˛o£sockë
(
sock
);

696 
BIO
 *
BIO_√w_sockë
(
sock
, 
˛o£_Êag
);

697 
BIO
 *
BIO_√w_c⁄√˘
(c⁄° *
ho°_p‹t
);

698 
BIO
 *
BIO_√w_ac˚±
(c⁄° *
ho°_p‹t
);

701 
BIO
 *
BIO_√w_fd
(
fd
, 
˛o£_Êag
);

703 
BIO_√w_bio_∑ú
(
BIO
 **
bio1
, 
size_t
 
wrôebuf1
,

704 
BIO
 **
bio2
, 
size_t
 
wrôebuf2
);

711 
BIO_c›y_√xt_ªåy
(
BIO
 *
b
);

717 #ifde‡
__GNUC__


718 
	#__bio_h__©å__
 
__©åibuã__


	)

720 
	#__bio_h__©å__
(
x
)

	)

722 
BIO_¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, ...)

723 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
, 2, 3)));

724 
BIO_v¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

725 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
, 2, 0)));

726 
BIO_¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, ...)

727 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
, 3, 4)));

728 
BIO_v¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

729 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
, 3, 0)));

730 #unde‡
__bio_h__©å__


733 
BIO_METHOD
 *
BIO_mëh_√w
(
ty≥
, c⁄° *
«me
);

734 
BIO_mëh_‰ì
(
BIO_METHOD
 *
biom
);

735 (*
BIO_mëh_gë_wrôe
(
BIO_METHOD
 *
biom
)Ë(
BIO
 *, const *, );

736 
BIO_mëh_£t_wrôe
(
BIO_METHOD
 *
biom
,

737 (*
wrôe
Ë(
BIO
 *, const *, ));

738 (*
BIO_mëh_gë_ªad
(
BIO_METHOD
 *
biom
)Ë(
BIO
 *, *, );

739 
BIO_mëh_£t_ªad
(
BIO_METHOD
 *
biom
,

740 (*
ªad
Ë(
BIO
 *, *, ));

741 (*
BIO_mëh_gë_puts
(
BIO_METHOD
 *
biom
)Ë(
BIO
 *, const *);

742 
BIO_mëh_£t_puts
(
BIO_METHOD
 *
biom
,

743 (*
puts
Ë(
BIO
 *, const *));

744 (*
BIO_mëh_gë_gës
(
BIO_METHOD
 *
biom
)Ë(
BIO
 *, *, );

745 
BIO_mëh_£t_gës
(
BIO_METHOD
 *
biom
,

746 (*
gës
Ë(
BIO
 *, *, ));

747 (*
BIO_mëh_gë_˘æ
(
BIO_METHOD
 *
biom
)Ë(
BIO
 *, , , *);

748 
BIO_mëh_£t_˘æ
(
BIO_METHOD
 *
biom
,

749 (*
˘æ
Ë(
BIO
 *, , , *));

750 (*
BIO_mëh_gë_¸óã
(
BIO_METHOD
 *
bi⁄
)Ë(
BIO
 *);

751 
BIO_mëh_£t_¸óã
(
BIO_METHOD
 *
biom
, (*
¸óã
Ë(
BIO
 *));

752 (*
BIO_mëh_gë_de°roy
(
BIO_METHOD
 *
biom
)Ë(
BIO
 *);

753 
BIO_mëh_£t_de°roy
(
BIO_METHOD
 *
biom
, (*
de°roy
Ë(
BIO
 *));

754 (*
BIO_mëh_gë_ˇŒback_˘æ
(
BIO_METHOD
 *
biom
))

755 (
BIO
 *, , 
bio_öfo_cb
 *);

756 
BIO_mëh_£t_ˇŒback_˘æ
(
BIO_METHOD
 *
biom
,

757 (*
ˇŒback_˘æ
Ë(
BIO
 *, ,

758 
bio_öfo_cb
 *));

766 
ERR_lﬂd_BIO_°rögs
();

771 
	#BIO_F_ACPT_STATE
 100

	)

772 
	#BIO_F_ADDR_STRINGS
 134

	)

773 
	#BIO_F_BIO_ACCEPT
 101

	)

774 
	#BIO_F_BIO_ACCEPT_EX
 137

	)

775 
	#BIO_F_BIO_ADDR_NEW
 144

	)

776 
	#BIO_F_BIO_CALLBACK_CTRL
 131

	)

777 
	#BIO_F_BIO_CONNECT
 138

	)

778 
	#BIO_F_BIO_CTRL
 103

	)

779 
	#BIO_F_BIO_GETS
 104

	)

780 
	#BIO_F_BIO_GET_HOST_IP
 106

	)

781 
	#BIO_F_BIO_GET_PORT
 107

	)

782 
	#BIO_F_BIO_LISTEN
 139

	)

783 
	#BIO_F_BIO_LOOKUP
 135

	)

784 
	#BIO_F_BIO_MAKE_PAIR
 121

	)

785 
	#BIO_F_BIO_NEW
 108

	)

786 
	#BIO_F_BIO_NEW_FILE
 109

	)

787 
	#BIO_F_BIO_NEW_MEM_BUF
 126

	)

788 
	#BIO_F_BIO_NREAD
 123

	)

789 
	#BIO_F_BIO_NREAD0
 124

	)

790 
	#BIO_F_BIO_NWRITE
 125

	)

791 
	#BIO_F_BIO_NWRITE0
 122

	)

792 
	#BIO_F_BIO_PARSE_HOSTSERV
 136

	)

793 
	#BIO_F_BIO_PUTS
 110

	)

794 
	#BIO_F_BIO_READ
 111

	)

795 
	#BIO_F_BIO_SET
 143

	)

796 
	#BIO_F_BIO_SOCKET
 140

	)

797 
	#BIO_F_BIO_SOCKET_NBIO
 142

	)

798 
	#BIO_F_BIO_SOCK_INFO
 141

	)

799 
	#BIO_F_BIO_SOCK_INIT
 112

	)

800 
	#BIO_F_BIO_WRITE
 113

	)

801 
	#BIO_F_BUFFER_CTRL
 114

	)

802 
	#BIO_F_CONN_CTRL
 127

	)

803 
	#BIO_F_CONN_STATE
 115

	)

804 
	#BIO_F_DGRAM_SCTP_READ
 132

	)

805 
	#BIO_F_DGRAM_SCTP_WRITE
 133

	)

806 
	#BIO_F_FILE_CTRL
 116

	)

807 
	#BIO_F_FILE_READ
 130

	)

808 
	#BIO_F_LINEBUFFER_CTRL
 129

	)

809 
	#BIO_F_MEM_WRITE
 117

	)

810 
	#BIO_F_SSL_NEW
 118

	)

813 
	#BIO_R_ACCEPT_ERROR
 100

	)

814 
	#BIO_R_ADDRINFO_ADDR_IS_NOT_AF_INET
 141

	)

815 
	#BIO_R_AMBIGUOUS_HOST_OR_SERVICE
 129

	)

816 
	#BIO_R_BAD_FOPEN_MODE
 101

	)

817 
	#BIO_R_BROKEN_PIPE
 124

	)

818 
	#BIO_R_CONNECT_ERROR
 103

	)

819 
	#BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET
 107

	)

820 
	#BIO_R_GETSOCKNAME_ERROR
 132

	)

821 
	#BIO_R_GETSOCKNAME_TRUNCATED_ADDRESS
 133

	)

822 
	#BIO_R_GETTING_SOCKTYPE
 134

	)

823 
	#BIO_R_INVALID_ARGUMENT
 125

	)

824 
	#BIO_R_INVALID_SOCKET
 135

	)

825 
	#BIO_R_IN_USE
 123

	)

826 
	#BIO_R_LISTEN_V6_ONLY
 136

	)

827 
	#BIO_R_LOOKUP_RETURNED_NOTHING
 142

	)

828 
	#BIO_R_MALFORMED_HOST_OR_SERVICE
 130

	)

829 
	#BIO_R_NBIO_CONNECT_ERROR
 110

	)

830 
	#BIO_R_NO_ACCEPT_ADDR_OR_SERVICE_SPECIFIED
 143

	)

831 
	#BIO_R_NO_HOSTNAME_OR_SERVICE_SPECIFIED
 144

	)

832 
	#BIO_R_NO_PORT_DEFINED
 113

	)

833 
	#BIO_R_NO_SUCH_FILE
 128

	)

834 
	#BIO_R_NULL_PARAMETER
 115

	)

835 
	#BIO_R_UNABLE_TO_BIND_SOCKET
 117

	)

836 
	#BIO_R_UNABLE_TO_CREATE_SOCKET
 118

	)

837 
	#BIO_R_UNABLE_TO_KEEPALIVE
 137

	)

838 
	#BIO_R_UNABLE_TO_LISTEN_SOCKET
 119

	)

839 
	#BIO_R_UNABLE_TO_NODELAY
 138

	)

840 
	#BIO_R_UNABLE_TO_REUSEADDR
 139

	)

841 
	#BIO_R_UNAVAILABLE_IP_FAMILY
 145

	)

842 
	#BIO_R_UNINITIALIZED
 120

	)

843 
	#BIO_R_UNKNOWN_INFO_TYPE
 140

	)

844 
	#BIO_R_UNSUPPORTED_IP_FAMILY
 146

	)

845 
	#BIO_R_UNSUPPORTED_METHOD
 121

	)

846 
	#BIO_R_UNSUPPORTED_PROTOCOL_FAMILY
 131

	)

847 
	#BIO_R_WRITE_TO_READ_ONLY_BIO
 126

	)

848 
	#BIO_R_WSASTARTUP
 122

	)

850 #ifde‡ 
__˝lu•lus


	@blowfish.h

10 #i‚de‡
HEADER_BLOWFISH_H


11 
	#HEADER_BLOWFISH_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #i‚de‡
OPENSSL_NO_BF


16 
	~<›ís¶/e_os2.h
>

17 #ifde‡ 
__˝lu•lus


21 
	#BF_ENCRYPT
 1

	)

22 
	#BF_DECRYPT
 0

	)

29 
	#BF_LONG
 

	)

31 
	#BF_ROUNDS
 16

	)

32 
	#BF_BLOCK
 8

	)

34 
	sbf_key_°
 {

35 
BF_LONG
 
P
[
BF_ROUNDS
 + 2];

36 
BF_LONG
 
S
[4 * 256];

37 } 
	tBF_KEY
;

39 
BF_£t_key
(
BF_KEY
 *
key
, 
Àn
, c⁄° *
d©a
);

41 
BF_í¸y±
(
BF_LONG
 *
d©a
, c⁄° 
BF_KEY
 *
key
);

42 
BF_de¸y±
(
BF_LONG
 *
d©a
, c⁄° 
BF_KEY
 *
key
);

44 
BF_ecb_í¸y±
(c⁄° *
ö
, *
out
,

45 c⁄° 
BF_KEY
 *
key
, 
íc
);

46 
BF_cbc_í¸y±
(c⁄° *
ö
, *
out
, 
Àngth
,

47 c⁄° 
BF_KEY
 *
scheduÀ
, *
ivec
, 
íc
);

48 
BF_cfb64_í¸y±
(c⁄° *
ö
, *
out
,

49 
Àngth
, c⁄° 
BF_KEY
 *
scheduÀ
,

50 *
ivec
, *
num
, 
íc
);

51 
BF_ofb64_í¸y±
(c⁄° *
ö
, *
out
,

52 
Àngth
, c⁄° 
BF_KEY
 *
scheduÀ
,

53 *
ivec
, *
num
);

54 c⁄° *
BF_›ti⁄s
();

56 #ifde‡ 
__˝lu•lus


	@bn.h

24 #i‚de‡
HEADER_BN_H


25 
	#HEADER_BN_H


	)

27 
	~<›ís¶/e_os2.h
>

28 #i‚de‡
OPENSSL_NO_STDIO


29 
	~<°dio.h
>

31 
	~<›ís¶/›ís¶c⁄f.h
>

32 
	~<›ís¶/os¶_typ.h
>

33 
	~<›ís¶/¸y±o.h
>

35 #ifde‡ 
__˝lu•lus


42 #ifde‡
SIXTY_FOUR_BIT_LONG


43 
	#BN_ULONG
 

	)

44 
	#BN_BYTES
 8

	)

50 #ifde‡
SIXTY_FOUR_BIT


51 
	#BN_ULONG
 

	)

52 
	#BN_BYTES
 8

	)

55 #ifde‡
THIRTY_TWO_BIT


56 
	#BN_ULONG
 

	)

57 
	#BN_BYTES
 4

	)

60 
	#BN_BITS2
 (
BN_BYTES
 * 8)

	)

61 
	#BN_BITS
 (
BN_BITS2
 * 2)

	)

62 
	#BN_TBIT
 ((
BN_ULONG
)1 << (
BN_BITS2
 - 1))

	)

64 
	#BN_FLG_MALLOCED
 0x01

	)

65 
	#BN_FLG_STATIC_DATA
 0x02

	)

73 
	#BN_FLG_CONSTTIME
 0x04

	)

74 
	#BN_FLG_SECURE
 0x08

	)

76 #i‡
OPENSSL_API_COMPAT
 < 0x00908000L

78 
	#BN_FLG_EXP_CONSTTIME
 
BN_FLG_CONSTTIME


	)

79 
	#BN_FLG_FREE
 0x8000

	)

82 
BN_£t_Êags
(
BIGNUM
 *
b
, 
n
);

83 
BN_gë_Êags
(c⁄° 
BIGNUM
 *
b
, 
n
);

91 
BN_wôh_Êags
(
BIGNUM
 *
de°
, c⁄° BIGNUM *
b
, 
Êags
);

94 
BN_GENCB_ˇŒ
(
BN_GENCB
 *
cb
, 
a
, 
b
);

96 
BN_GENCB
 *
BN_GENCB_√w
();

97 
BN_GENCB_‰ì
(
BN_GENCB
 *
cb
);

100 
BN_GENCB_£t_ﬁd
(
BN_GENCB
 *
gícb
, (*
ˇŒback
) (, , *),

101 *
cb_¨g
);

104 
BN_GENCB_£t
(
BN_GENCB
 *
gícb
, (*
ˇŒback
) (, , BN_GENCB *),

105 *
cb_¨g
);

107 *
BN_GENCB_gë_¨g
(
BN_GENCB
 *
cb
);

109 
	#BN_¥ime_checks
 0

	)

120 
	#BN_¥ime_checks_f‹_size
(
b
) ((b) >= 1300 ? 2 : \

121 (
b
) >= 850 ? 3 : \

122 (
b
) >= 650 ? 4 : \

123 (
b
) >= 550 ? 5 : \

124 (
b
) >= 450 ? 6 : \

125 (
b
) >= 400 ? 7 : \

126 (
b
) >= 350 ? 8 : \

127 (
b
) >= 300 ? 9 : \

128 (
b
) >= 250 ? 12 : \

129 (
b
) >= 200 ? 15 : \

130 (
b
) >= 150 ? 18 : \

131  27)

	)

133 
	#BN_num_byãs
(
a
Ë((
	`BN_num_bôs
◊)+7)/8)

	)

135 
BN_abs_is_w‹d
(c⁄° 
BIGNUM
 *
a
, c⁄° 
BN_ULONG
 
w
);

136 
BN_is_zîo
(c⁄° 
BIGNUM
 *
a
);

137 
BN_is_⁄e
(c⁄° 
BIGNUM
 *
a
);

138 
BN_is_w‹d
(c⁄° 
BIGNUM
 *
a
, c⁄° 
BN_ULONG
 
w
);

139 
BN_is_odd
(c⁄° 
BIGNUM
 *
a
);

141 
	#BN_⁄e
(
a
Ë(
	`BN_£t_w‹d
(◊),1))

	)

143 
BN_zîo_ex
(
BIGNUM
 *
a
);

145 #i‡
OPENSSL_API_COMPAT
 >= 0x00908000L

146 
	#BN_zîo
(
a
Ë
	`BN_zîo_ex
◊)

	)

148 
	#BN_zîo
(
a
Ë(
	`BN_£t_w‹d
(◊),0))

	)

151 c⁄° 
BIGNUM
 *
BN_vÆue_⁄e
();

152 *
BN_›ti⁄s
();

153 
BN_CTX
 *
BN_CTX_√w
();

154 
BN_CTX
 *
BN_CTX_£cuª_√w
();

155 
BN_CTX_‰ì
(
BN_CTX
 *
c
);

156 
BN_CTX_°¨t
(
BN_CTX
 *
˘x
);

157 
BIGNUM
 *
BN_CTX_gë
(
BN_CTX
 *
˘x
);

158 
BN_CTX_íd
(
BN_CTX
 *
˘x
);

159 
BN_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
, 
bŸtom
);

160 
BN_p£udo_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
, 
bŸtom
);

161 
BN_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

162 
BN_p£udo_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

163 
BN_num_bôs
(c⁄° 
BIGNUM
 *
a
);

164 
BN_num_bôs_w‹d
(
BN_ULONG
 
l
);

165 
BN_£curôy_bôs
(
L
, 
N
);

166 
BIGNUM
 *
BN_√w
();

167 
BIGNUM
 *
BN_£cuª_√w
();

168 
BN_˛ór_‰ì
(
BIGNUM
 *
a
);

169 
BIGNUM
 *
BN_c›y
(BIGNUM *
a
, c⁄° BIGNUM *
b
);

170 
BN_sw≠
(
BIGNUM
 *
a
, BIGNUM *
b
);

171 
BIGNUM
 *
BN_bö2bn
(c⁄° *
s
, 
Àn
, BIGNUM *
ªt
);

172 
BN_bn2bö
(c⁄° 
BIGNUM
 *
a
, *
to
);

173 
BN_bn2bö∑d
(c⁄° 
BIGNUM
 *
a
, *
to
, 
tﬁí
);

174 
BIGNUM
 *
BN_Àbö2bn
(c⁄° *
s
, 
Àn
, BIGNUM *
ªt
);

175 
BN_bn2Àbö∑d
(c⁄° 
BIGNUM
 *
a
, *
to
, 
tﬁí
);

176 
BIGNUM
 *
BN_mpi2bn
(c⁄° *
s
, 
Àn
, BIGNUM *
ªt
);

177 
BN_bn2mpi
(c⁄° 
BIGNUM
 *
a
, *
to
);

178 
BN_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

179 
BN_usub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

180 
BN_uadd
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

181 
BN_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

182 
BN_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

183 
BN_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
BN_CTX
 *
˘x
);

188 
BN_£t_√g©ive
(
BIGNUM
 *
b
, 
n
);

193 
BN_is_√g©ive
(c⁄° 
BIGNUM
 *
b
);

195 
BN_div
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
,

196 
BN_CTX
 *
˘x
);

197 
	#BN_mod
(
ªm
,
m
,
d
,
˘x
Ë
	`BN_div
(
NULL
,‘em),(m),(d),(˘x))

	)

198 
BN_¬mod
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
, 
BN_CTX
 *
˘x
);

199 
BN_mod_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
,

200 
BN_CTX
 *
˘x
);

201 
BN_mod_add_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

202 c⁄° 
BIGNUM
 *
m
);

203 
BN_mod_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
,

204 
BN_CTX
 *
˘x
);

205 
BN_mod_sub_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

206 c⁄° 
BIGNUM
 *
m
);

207 
BN_mod_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
,

208 
BN_CTX
 *
˘x
);

209 
BN_mod_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

210 
BN_mod_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

211 
BN_mod_lshi·1_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
);

212 
BN_mod_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
,

213 
BN_CTX
 *
˘x
);

214 
BN_mod_lshi·_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
);

216 
BN_ULONG
 
BN_mod_w‹d
(c⁄° 
BIGNUM
 *
a
, BN_ULONG 
w
);

217 
BN_ULONG
 
BN_div_w‹d
(
BIGNUM
 *
a
, BN_ULONG 
w
);

218 
BN_mul_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

219 
BN_add_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

220 
BN_sub_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

221 
BN_£t_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

222 
BN_ULONG
 
BN_gë_w‹d
(c⁄° 
BIGNUM
 *
a
);

224 
BN_cmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

225 
BN_‰ì
(
BIGNUM
 *
a
);

226 
BN_is_bô_£t
(c⁄° 
BIGNUM
 *
a
, 
n
);

227 
BN_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

228 
BN_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

229 
BN_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

231 
BN_mod_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

232 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

233 
BN_mod_exp_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

234 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

235 
BN_mod_exp_m⁄t_c⁄°time
(
BIGNUM
 *
º
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

236 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
,

237 
BN_MONT_CTX
 *
ö_m⁄t
);

238 
BN_mod_exp_m⁄t_w‹d
(
BIGNUM
 *
r
, 
BN_ULONG
 
a
, c⁄° BIGNUM *
p
,

239 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

240 
BN_mod_exp2_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a1
, c⁄° BIGNUM *
p1
,

241 c⁄° 
BIGNUM
 *
a2
, c⁄° BIGNUM *
p2
, c⁄° BIGNUM *
m
,

242 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

243 
BN_mod_exp_sim∂e
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

244 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

246 
BN_mask_bôs
(
BIGNUM
 *
a
, 
n
);

247 #i‚de‡
OPENSSL_NO_STDIO


248 
BN_¥öt_Â
(
FILE
 *
Â
, c⁄° 
BIGNUM
 *
a
);

250 
BN_¥öt
(
BIO
 *
bio
, c⁄° 
BIGNUM
 *
a
);

251 
BN_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, 
Àn
, 
BN_CTX
 *
˘x
);

252 
BN_rshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

253 
BN_rshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

254 
BN_˛ór
(
BIGNUM
 *
a
);

255 
BIGNUM
 *
BN_dup
(c⁄° BIGNUM *
a
);

256 
BN_ucmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

257 
BN_£t_bô
(
BIGNUM
 *
a
, 
n
);

258 
BN_˛ór_bô
(
BIGNUM
 *
a
, 
n
);

259 *
BN_bn2hex
(c⁄° 
BIGNUM
 *
a
);

260 *
BN_bn2dec
(c⁄° 
BIGNUM
 *
a
);

261 
BN_hex2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

262 
BN_dec2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

263 
BN_asc2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

264 
BN_gcd
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

265 
BN_kr⁄eckî
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

268 
BIGNUM
 *
BN_mod_övî£
(BIGNUM *
ªt
,

269 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
, 
BN_CTX
 *
˘x
);

270 
BIGNUM
 *
BN_mod_sqπ
(BIGNUM *
ªt
,

271 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
, 
BN_CTX
 *
˘x
);

273 
BN_c⁄°time_sw≠
(
BN_ULONG
 
sw≠
, 
BIGNUM
 *
a
, BIGNUM *
b
, 
nw‹ds
);

276 
DEPRECATEDIN_0_9_8
(
BIGNUM
 *
BN_gíî©e_¥ime
(BIGNUM *
ªt
, 
bôs
, 
ß„
,

277 c⁄° 
BIGNUM
 *
add
,

278 c⁄° 
BIGNUM
 *
ªm
,

279 (*
ˇŒback
) (, ,

281 *
cb_¨g
))

282 
DEPRECATEDIN_0_9_8
(

283 
BN_is_¥ime
(c⁄° 
BIGNUM
 *
p
, 
nchecks
,

284 (*
ˇŒback
) (, , *),

285 
BN_CTX
 *
˘x
, *
cb_¨g
))

286 
DEPRECATEDIN_0_9_8
(

287 
BN_is_¥ime_Á°ã°
(c⁄° 
BIGNUM
 *
p
, 
nchecks
,

288 (*
ˇŒback
) (, , *),

289 
BN_CTX
 *
˘x
, *
cb_¨g
,

290 
do_åül_divisi⁄
))

293 
BN_gíî©e_¥ime_ex
(
BIGNUM
 *
ªt
, 
bôs
, 
ß„
, c⁄° BIGNUM *
add
,

294 c⁄° 
BIGNUM
 *
ªm
, 
BN_GENCB
 *
cb
);

295 
BN_is_¥ime_ex
(c⁄° 
BIGNUM
 *
p
, 
nchecks
, 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

296 
BN_is_¥ime_Á°ã°_ex
(c⁄° 
BIGNUM
 *
p
, 
nchecks
, 
BN_CTX
 *
˘x
,

297 
do_åül_divisi⁄
, 
BN_GENCB
 *
cb
);

299 
BN_X931_gíî©e_Xpq
(
BIGNUM
 *
Xp
, BIGNUM *
Xq
, 
nbôs
, 
BN_CTX
 *
˘x
);

301 
BN_X931_dîive_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
,

302 c⁄° 
BIGNUM
 *
Xp
, c⁄° BIGNUM *
Xp1
,

303 c⁄° 
BIGNUM
 *
Xp2
, c⁄° BIGNUM *
e
, 
BN_CTX
 *
˘x
,

304 
BN_GENCB
 *
cb
);

305 
BN_X931_gíî©e_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
, BIGNUM *
Xp1
,

306 
BIGNUM
 *
Xp2
, c⁄° BIGNUM *
Xp
, c⁄° BIGNUM *
e
,

307 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

309 
BN_MONT_CTX
 *
BN_MONT_CTX_√w
();

310 
BN_mod_mul_m⁄tgomîy
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

311 
BN_MONT_CTX
 *
m⁄t
, 
BN_CTX
 *
˘x
);

312 
BN_to_m⁄tgomîy
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
BN_MONT_CTX
 *
m⁄t
,

313 
BN_CTX
 *
˘x
);

314 
BN_‰om_m⁄tgomîy
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
BN_MONT_CTX
 *
m⁄t
,

315 
BN_CTX
 *
˘x
);

316 
BN_MONT_CTX_‰ì
(
BN_MONT_CTX
 *
m⁄t
);

317 
BN_MONT_CTX_£t
(
BN_MONT_CTX
 *
m⁄t
, c⁄° 
BIGNUM
 *
mod
, 
BN_CTX
 *
˘x
);

318 
BN_MONT_CTX
 *
BN_MONT_CTX_c›y
(BN_MONT_CTX *
to
, BN_MONT_CTX *
‰om
);

319 
BN_MONT_CTX
 *
BN_MONT_CTX_£t_locked
(BN_MONT_CTX **
pm⁄t
, 
CRYPTO_RWLOCK
 *
lock
,

320 c⁄° 
BIGNUM
 *
mod
, 
BN_CTX
 *
˘x
);

323 
	#BN_BLINDING_NO_UPDATE
 0x00000001

	)

324 
	#BN_BLINDING_NO_RECREATE
 0x00000002

	)

326 
BN_BLINDING
 *
BN_BLINDING_√w
(c⁄° 
BIGNUM
 *
A
, c⁄° BIGNUM *
Ai
, BIGNUM *
mod
);

327 
BN_BLINDING_‰ì
(
BN_BLINDING
 *
b
);

328 
BN_BLINDING_upd©e
(
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

329 
BN_BLINDING_c⁄vît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

330 
BN_BLINDING_övît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

331 
BN_BLINDING_c⁄vît_ex
(
BIGNUM
 *
n
, BIGNUM *
r
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *);

332 
BN_BLINDING_övît_ex
(
BIGNUM
 *
n
, c⁄° BIGNUM *
r
, 
BN_BLINDING
 *
b
,

333 
BN_CTX
 *);

335 
BN_BLINDING_is_cuºít_thªad
(
BN_BLINDING
 *
b
);

336 
BN_BLINDING_£t_cuºít_thªad
(
BN_BLINDING
 *
b
);

337 
BN_BLINDING_lock
(
BN_BLINDING
 *
b
);

338 
BN_BLINDING_u∆ock
(
BN_BLINDING
 *
b
);

340 
BN_BLINDING_gë_Êags
(c⁄° 
BN_BLINDING
 *);

341 
BN_BLINDING_£t_Êags
(
BN_BLINDING
 *, );

342 
BN_BLINDING
 *
BN_BLINDING_¸óã_∑øm
(BN_BLINDING *
b
,

343 c⁄° 
BIGNUM
 *
e
, BIGNUM *
m
, 
BN_CTX
 *
˘x
,

344 (*
bn_mod_exp
Ë(
BIGNUM
 *
r
,

345 c⁄° 
BIGNUM
 *
a
,

346 c⁄° 
BIGNUM
 *
p
,

347 c⁄° 
BIGNUM
 *
m
,

348 
BN_CTX
 *
˘x
,

349 
BN_MONT_CTX
 *
m_˘x
),

350 
BN_MONT_CTX
 *
m_˘x
);

352 
DEPRECATEDIN_0_9_8
(
BN_£t_∑øms
(
mul
, 
high
, 
low
, 
m⁄t
))

353 
DEPRECATEDIN_0_9_8
(
BN_gë_∑øms
(
which
))

356 
BN_RECP_CTX
 *
BN_RECP_CTX_√w
();

357 
BN_RECP_CTX_‰ì
(
BN_RECP_CTX
 *
ª˝
);

358 
BN_RECP_CTX_£t
(
BN_RECP_CTX
 *
ª˝
, c⁄° 
BIGNUM
 *
rdiv
, 
BN_CTX
 *
˘x
);

359 
BN_mod_mul_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
x
, c⁄° BIGNUM *
y
,

360 
BN_RECP_CTX
 *
ª˝
, 
BN_CTX
 *
˘x
);

361 
BN_mod_exp_ª˝
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

362 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

363 
BN_div_ª˝
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
,

364 
BN_RECP_CTX
 *
ª˝
, 
BN_CTX
 *
˘x
);

366 #i‚de‡
OPENSSL_NO_EC2M


378 
BN_GF2m_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

379 
	#BN_GF2m_sub
(
r
, 
a
, 
b
Ë
	`BN_GF2m_add
‘,á, b)

	)

383 
BN_GF2m_mod
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
);

385 
BN_GF2m_mod_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

386 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

388 
BN_GF2m_mod_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

390 
BN_GF2m_mod_öv
(
BIGNUM
 *
r
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

392 
BN_GF2m_mod_div
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

393 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

395 
BN_GF2m_mod_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

396 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

398 
BN_GF2m_mod_sqπ
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

399 
BN_CTX
 *
˘x
);

401 
BN_GF2m_mod_sﬁve_quad
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

402 
BN_CTX
 *
˘x
);

403 
	#BN_GF2m_cmp
(
a
, 
b
Ë
	`BN_ucmp
(◊), (b))

	)

411 
BN_GF2m_mod_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° 
p
[]);

413 
BN_GF2m_mod_mul_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

414 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

416 
BN_GF2m_mod_sqr_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° 
p
[],

417 
BN_CTX
 *
˘x
);

419 
BN_GF2m_mod_öv_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
b
, c⁄° 
p
[],

420 
BN_CTX
 *
˘x
);

422 
BN_GF2m_mod_div_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

423 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

425 
BN_GF2m_mod_exp_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

426 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

428 
BN_GF2m_mod_sqπ_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

429 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

431 
BN_GF2m_mod_sﬁve_quad_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

432 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

433 
BN_GF2m_pﬁy2¨r
(c⁄° 
BIGNUM
 *
a
, 
p
[], 
max
);

434 
BN_GF2m_¨r2pﬁy
(c⁄° 
p
[], 
BIGNUM
 *
a
);

441 
BN_ni°_mod_192
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

442 
BN_ni°_mod_224
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

443 
BN_ni°_mod_256
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

444 
BN_ni°_mod_384
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

445 
BN_ni°_mod_521
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

447 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_192
();

448 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_224
();

449 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_256
();

450 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_384
();

451 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_521
();

453 (*
BN_ni°_mod_func
(c⁄° 
BIGNUM
 *
p
)Ë(BIGNUM *
r
, c⁄° BIGNUM *
a
,

454 c⁄° 
BIGNUM
 *
fõld
, 
BN_CTX
 *
˘x
);

456 
BN_gíî©e_dß_n⁄˚
(
BIGNUM
 *
out
, c⁄° BIGNUM *
ønge
,

457 c⁄° 
BIGNUM
 *
¥iv
, c⁄° *
mesßge
,

458 
size_t
 
mesßge_Àn
, 
BN_CTX
 *
˘x
);

461 
BIGNUM
 *
BN_gë_rfc2409_¥ime_768
(BIGNUM *
bn
);

462 
BIGNUM
 *
BN_gë_rfc2409_¥ime_1024
(BIGNUM *
bn
);

465 
BIGNUM
 *
BN_gë_rfc3526_¥ime_1536
(BIGNUM *
bn
);

466 
BIGNUM
 *
BN_gë_rfc3526_¥ime_2048
(BIGNUM *
bn
);

467 
BIGNUM
 *
BN_gë_rfc3526_¥ime_3072
(BIGNUM *
bn
);

468 
BIGNUM
 *
BN_gë_rfc3526_¥ime_4096
(BIGNUM *
bn
);

469 
BIGNUM
 *
BN_gë_rfc3526_¥ime_6144
(BIGNUM *
bn
);

470 
BIGNUM
 *
BN_gë_rfc3526_¥ime_8192
(BIGNUM *
bn
);

472 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

473 
	#gë_rfc2409_¥ime_768
 
BN_gë_rfc2409_¥ime_768


	)

474 
	#gë_rfc2409_¥ime_1024
 
BN_gë_rfc2409_¥ime_1024


	)

475 
	#gë_rfc3526_¥ime_1536
 
BN_gë_rfc3526_¥ime_1536


	)

476 
	#gë_rfc3526_¥ime_2048
 
BN_gë_rfc3526_¥ime_2048


	)

477 
	#gë_rfc3526_¥ime_3072
 
BN_gë_rfc3526_¥ime_3072


	)

478 
	#gë_rfc3526_¥ime_4096
 
BN_gë_rfc3526_¥ime_4096


	)

479 
	#gë_rfc3526_¥ime_6144
 
BN_gë_rfc3526_¥ime_6144


	)

480 
	#gë_rfc3526_¥ime_8192
 
BN_gë_rfc3526_¥ime_8192


	)

483 
BN_b¡e°_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
, 
bŸtom
);

491 
ERR_lﬂd_BN_°rögs
();

496 
	#BN_F_BNRAND
 127

	)

497 
	#BN_F_BN_BLINDING_CONVERT_EX
 100

	)

498 
	#BN_F_BN_BLINDING_CREATE_PARAM
 128

	)

499 
	#BN_F_BN_BLINDING_INVERT_EX
 101

	)

500 
	#BN_F_BN_BLINDING_NEW
 102

	)

501 
	#BN_F_BN_BLINDING_UPDATE
 103

	)

502 
	#BN_F_BN_BN2DEC
 104

	)

503 
	#BN_F_BN_BN2HEX
 105

	)

504 
	#BN_F_BN_COMPUTE_WNAF
 142

	)

505 
	#BN_F_BN_CTX_GET
 116

	)

506 
	#BN_F_BN_CTX_NEW
 106

	)

507 
	#BN_F_BN_CTX_START
 129

	)

508 
	#BN_F_BN_DIV
 107

	)

509 
	#BN_F_BN_DIV_RECP
 130

	)

510 
	#BN_F_BN_EXP
 123

	)

511 
	#BN_F_BN_EXPAND_INTERNAL
 120

	)

512 
	#BN_F_BN_GENCB_NEW
 143

	)

513 
	#BN_F_BN_GENERATE_DSA_NONCE
 140

	)

514 
	#BN_F_BN_GENERATE_PRIME_EX
 141

	)

515 
	#BN_F_BN_GF2M_MOD
 131

	)

516 
	#BN_F_BN_GF2M_MOD_EXP
 132

	)

517 
	#BN_F_BN_GF2M_MOD_MUL
 133

	)

518 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD
 134

	)

519 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR
 135

	)

520 
	#BN_F_BN_GF2M_MOD_SQR
 136

	)

521 
	#BN_F_BN_GF2M_MOD_SQRT
 137

	)

522 
	#BN_F_BN_LSHIFT
 145

	)

523 
	#BN_F_BN_MOD_EXP2_MONT
 118

	)

524 
	#BN_F_BN_MOD_EXP_MONT
 109

	)

525 
	#BN_F_BN_MOD_EXP_MONT_CONSTTIME
 124

	)

526 
	#BN_F_BN_MOD_EXP_MONT_WORD
 117

	)

527 
	#BN_F_BN_MOD_EXP_RECP
 125

	)

528 
	#BN_F_BN_MOD_EXP_SIMPLE
 126

	)

529 
	#BN_F_BN_MOD_INVERSE
 110

	)

530 
	#BN_F_BN_MOD_INVERSE_NO_BRANCH
 139

	)

531 
	#BN_F_BN_MOD_LSHIFT_QUICK
 119

	)

532 
	#BN_F_BN_MOD_SQRT
 121

	)

533 
	#BN_F_BN_MPI2BN
 112

	)

534 
	#BN_F_BN_NEW
 113

	)

535 
	#BN_F_BN_RAND
 114

	)

536 
	#BN_F_BN_RAND_RANGE
 122

	)

537 
	#BN_F_BN_RSHIFT
 146

	)

538 
	#BN_F_BN_SET_WORDS
 144

	)

539 
	#BN_F_BN_USUB
 115

	)

542 
	#BN_R_ARG2_LT_ARG3
 100

	)

543 
	#BN_R_BAD_RECIPROCAL
 101

	)

544 
	#BN_R_BIGNUM_TOO_LONG
 114

	)

545 
	#BN_R_BITS_TOO_SMALL
 118

	)

546 
	#BN_R_CALLED_WITH_EVEN_MODULUS
 102

	)

547 
	#BN_R_DIV_BY_ZERO
 103

	)

548 
	#BN_R_ENCODING_ERROR
 104

	)

549 
	#BN_R_EXPAND_ON_STATIC_BIGNUM_DATA
 105

	)

550 
	#BN_R_INPUT_NOT_REDUCED
 110

	)

551 
	#BN_R_INVALID_LENGTH
 106

	)

552 
	#BN_R_INVALID_RANGE
 115

	)

553 
	#BN_R_INVALID_SHIFT
 119

	)

554 
	#BN_R_NOT_A_SQUARE
 111

	)

555 
	#BN_R_NOT_INITIALIZED
 107

	)

556 
	#BN_R_NO_INVERSE
 108

	)

557 
	#BN_R_NO_SOLUTION
 116

	)

558 
	#BN_R_PRIVATE_KEY_TOO_LARGE
 117

	)

559 
	#BN_R_P_IS_NOT_PRIME
 112

	)

560 
	#BN_R_TOO_MANY_ITERATIONS
 113

	)

561 
	#BN_R_TOO_MANY_TEMPORARY_VARIABLES
 109

	)

563 #ifde‡ 
__˝lu•lus


	@buffer.h

10 #i‚de‡
HEADER_BUFFER_H


11 
	#HEADER_BUFFER_H


	)

13 
	~<›ís¶/os¶_typ.h
>

14 #i‚de‡
HEADER_CRYPTO_H


15 
	~<›ís¶/¸y±o.h
>

19 #ifde‡ 
__˝lu•lus


23 
	~<°ddef.h
>

25 #i‡!
deföed
(
NO_SYS_TYPES_H
)

26 
	~<sys/ty≥s.h
>

33 
	#BUF_°rdup
(
s
Ë
	`OPENSSL_°rdup
(s)

	)

34 
	#BUF_°∫dup
(
s
, 
size
Ë
	`OPENSSL_°∫dup
(s, size)

	)

35 
	#BUF_memdup
(
d©a
, 
size
Ë
	`OPENSSL_memdup
(d©a, size)

	)

36 
	#BUF_°æ˝y
(
d°
, 
§c
, 
size
Ë
	`OPENSSL_°æ˝y
(d°, src, size)

	)

37 
	#BUF_°æˇt
(
d°
, 
§c
, 
size
Ë
	`OPENSSL_°æˇt
(d°, src, size)

	)

38 
	#BUF_°∫Àn
(
°r
, 
maxÀn
Ë
	`OPENSSL_°∫Àn
(°r, maxÀn)

	)

40 
	sbuf_mem_°
 {

41 
size_t
 
Àngth
;

42 *
d©a
;

43 
size_t
 
max
;

44 
Êags
;

47 
	#BUF_MEM_FLAG_SECURE
 0x01

	)

49 
BUF_MEM
 *
BUF_MEM_√w
();

50 
BUF_MEM
 *
BUF_MEM_√w_ex
(
Êags
);

51 
BUF_MEM_‰ì
(
BUF_MEM
 *
a
);

52 
size_t
 
BUF_MEM_grow
(
BUF_MEM
 *
°r
, size_à
Àn
);

53 
size_t
 
BUF_MEM_grow_˛ón
(
BUF_MEM
 *
°r
, size_à
Àn
);

54 
BUF_ªvî£
(*
out
, c⁄° *
ö
, 
size_t
 
siz
);

62 
ERR_lﬂd_BUF_°rögs
();

67 
	#BUF_F_BUF_MEM_GROW
 100

	)

68 
	#BUF_F_BUF_MEM_GROW_CLEAN
 105

	)

69 
	#BUF_F_BUF_MEM_NEW
 101

	)

73 #ifde‡ 
__˝lu•lus


	@camellia.h

10 #i‚de‡
HEADER_CAMELLIA_H


11 
	#HEADER_CAMELLIA_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #i‚de‡
OPENSSL_NO_CAMELLIA


16 
	~<°ddef.h
>

17 #ifde‡ 
__˝lu•lus


21 
	#CAMELLIA_ENCRYPT
 1

	)

22 
	#CAMELLIA_DECRYPT
 0

	)

31 
	#CAMELLIA_BLOCK_SIZE
 16

	)

32 
	#CAMELLIA_TABLE_BYTE_LEN
 272

	)

33 
	#CAMELLIA_TABLE_WORD_LEN
 (
CAMELLIA_TABLE_BYTE_LEN
 / 4)

	)

35 
	tKEY_TABLE_TYPE
[
CAMELLIA_TABLE_WORD_LEN
];

38 
	sˇmñlü_key_°
 {

40 
d
;

41 
KEY_TABLE_TYPE
 
rd_key
;

42 } 
u
;

43 
gønd_rounds
;

45 
ˇmñlü_key_°
 
	tCAMELLIA_KEY
;

47 
Camñlü_£t_key
(c⁄° *
u£rKey
, c⁄° 
bôs
,

48 
CAMELLIA_KEY
 *
key
);

50 
Camñlü_í¸y±
(c⁄° *
ö
, *
out
,

51 c⁄° 
CAMELLIA_KEY
 *
key
);

52 
Camñlü_de¸y±
(c⁄° *
ö
, *
out
,

53 c⁄° 
CAMELLIA_KEY
 *
key
);

55 
Camñlü_ecb_í¸y±
(c⁄° *
ö
, *
out
,

56 c⁄° 
CAMELLIA_KEY
 *
key
, c⁄° 
íc
);

57 
Camñlü_cbc_í¸y±
(c⁄° *
ö
, *
out
,

58 
size_t
 
Àngth
, c⁄° 
CAMELLIA_KEY
 *
key
,

59 *
ivec
, c⁄° 
íc
);

60 
Camñlü_cfb128_í¸y±
(c⁄° *
ö
, *
out
,

61 
size_t
 
Àngth
, c⁄° 
CAMELLIA_KEY
 *
key
,

62 *
ivec
, *
num
, c⁄° 
íc
);

63 
Camñlü_cfb1_í¸y±
(c⁄° *
ö
, *
out
,

64 
size_t
 
Àngth
, c⁄° 
CAMELLIA_KEY
 *
key
,

65 *
ivec
, *
num
, c⁄° 
íc
);

66 
Camñlü_cfb8_í¸y±
(c⁄° *
ö
, *
out
,

67 
size_t
 
Àngth
, c⁄° 
CAMELLIA_KEY
 *
key
,

68 *
ivec
, *
num
, c⁄° 
íc
);

69 
Camñlü_ofb128_í¸y±
(c⁄° *
ö
, *
out
,

70 
size_t
 
Àngth
, c⁄° 
CAMELLIA_KEY
 *
key
,

71 *
ivec
, *
num
);

72 
Camñlü_˘r128_í¸y±
(c⁄° *
ö
, *
out
,

73 
size_t
 
Àngth
, c⁄° 
CAMELLIA_KEY
 *
key
,

74 
ivec
[
CAMELLIA_BLOCK_SIZE
],

75 
ecou¡_buf
[
CAMELLIA_BLOCK_SIZE
],

76 *
num
);

78 #ifde‡ 
__˝lu•lus


	@cast.h

10 #i‚de‡
HEADER_CAST_H


11 
	#HEADER_CAST_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #i‚de‡
OPENSSL_NO_CAST


16 #ifde‡ 
__˝lu•lus


20 
	#CAST_ENCRYPT
 1

	)

21 
	#CAST_DECRYPT
 0

	)

23 
	#CAST_LONG
 

	)

25 
	#CAST_BLOCK
 8

	)

26 
	#CAST_KEY_LENGTH
 16

	)

28 
	sˇ°_key_°
 {

29 
CAST_LONG
 
d©a
[32];

30 
sh‹t_key
;

31 } 
	tCAST_KEY
;

33 
CAST_£t_key
(
CAST_KEY
 *
key
, 
Àn
, c⁄° *
d©a
);

34 
CAST_ecb_í¸y±
(c⁄° *
ö
, *
out
,

35 c⁄° 
CAST_KEY
 *
key
, 
íc
);

36 
CAST_í¸y±
(
CAST_LONG
 *
d©a
, c⁄° 
CAST_KEY
 *
key
);

37 
CAST_de¸y±
(
CAST_LONG
 *
d©a
, c⁄° 
CAST_KEY
 *
key
);

38 
CAST_cbc_í¸y±
(c⁄° *
ö
, *
out
,

39 
Àngth
, c⁄° 
CAST_KEY
 *
ks
, *
iv
,

40 
íc
);

41 
CAST_cfb64_í¸y±
(c⁄° *
ö
, *
out
,

42 
Àngth
, c⁄° 
CAST_KEY
 *
scheduÀ
,

43 *
ivec
, *
num
, 
íc
);

44 
CAST_ofb64_í¸y±
(c⁄° *
ö
, *
out
,

45 
Àngth
, c⁄° 
CAST_KEY
 *
scheduÀ
,

46 *
ivec
, *
num
);

48 #ifde‡ 
__˝lu•lus


	@cmac.h

10 #i‚de‡
HEADER_CMAC_H


11 
	#HEADER_CMAC_H


	)

13 #i‚de‡
OPENSSL_NO_CMAC


15 #ifde‡
__˝lu•lus


19 
	~<›ís¶/evp.h
>

22 
CMAC_CTX_°
 
	tCMAC_CTX
;

24 
CMAC_CTX
 *
CMAC_CTX_√w
();

25 
CMAC_CTX_˛ónup
(
CMAC_CTX
 *
˘x
);

26 
CMAC_CTX_‰ì
(
CMAC_CTX
 *
˘x
);

27 
EVP_CIPHER_CTX
 *
CMAC_CTX_gë0_cùhî_˘x
(
CMAC_CTX
 *
˘x
);

28 
CMAC_CTX_c›y
(
CMAC_CTX
 *
out
, c⁄° CMAC_CTX *
ö
);

30 
CMAC_Inô
(
CMAC_CTX
 *
˘x
, c⁄° *
key
, 
size_t
 
keyÀn
,

31 c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
);

32 
CMAC_Upd©e
(
CMAC_CTX
 *
˘x
, c⁄° *
d©a
, 
size_t
 
dÀn
);

33 
CMAC_FöÆ
(
CMAC_CTX
 *
˘x
, *
out
, 
size_t
 *
pouéí
);

34 
CMAC_ªsume
(
CMAC_CTX
 *
˘x
);

36 #ifde‡ 
__˝lu•lus


	@cms.h

10 #i‚de‡
HEADER_CMS_H


11 
	#HEADER_CMS_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #i‚de‡
OPENSSL_NO_CMS


16 
	~<›ís¶/x509.h
>

17 
	~<›ís¶/x509v3.h
>

18 #ifde‡
__˝lu•lus


22 
CMS_C⁄ã¡Info_°
 
	tCMS_C⁄ã¡Info
;

23 
CMS_Sig√rInfo_°
 
	tCMS_Sig√rInfo
;

24 
CMS_CîtifiˇãChoi˚s
 
	tCMS_CîtifiˇãChoi˚s
;

25 
CMS_Revoˇti⁄InfoChoi˚_°
 
	tCMS_Revoˇti⁄InfoChoi˚
;

26 
CMS_Recùõ¡Info_°
 
	tCMS_Recùõ¡Info
;

27 
CMS_Re˚ùtReque°_°
 
	tCMS_Re˚ùtReque°
;

28 
CMS_Re˚ùt_°
 
	tCMS_Re˚ùt
;

29 
CMS_Recùõ¡En¸y±edKey_°
 
	tCMS_Recùõ¡En¸y±edKey
;

30 
CMS_OthîKeyAâribuã_°
 
	tCMS_OthîKeyAâribuã
;

32 
DEFINE_STACK_OF
(
CMS_Sig√rInfo
)

33 
DEFINE_STACK_OF
(
CMS_Recùõ¡En¸y±edKey
)

34 
DEFINE_STACK_OF
(
CMS_Recùõ¡Info
)

35 
DEFINE_STACK_OF
(
CMS_Revoˇti⁄InfoChoi˚
)

36 
DECLARE_ASN1_FUNCTIONS
(
CMS_C⁄ã¡Info
)

37 
DECLARE_ASN1_FUNCTIONS
(
CMS_Re˚ùtReque°
)

38 
DECLARE_ASN1_PRINT_FUNCTION
(
CMS_C⁄ã¡Info
)

40 
	#CMS_SIGNERINFO_ISSUER_SERIAL
 0

	)

41 
	#CMS_SIGNERINFO_KEYIDENTIFIER
 1

	)

43 
	#CMS_RECIPINFO_NONE
 -1

	)

44 
	#CMS_RECIPINFO_TRANS
 0

	)

45 
	#CMS_RECIPINFO_AGREE
 1

	)

46 
	#CMS_RECIPINFO_KEK
 2

	)

47 
	#CMS_RECIPINFO_PASS
 3

	)

48 
	#CMS_RECIPINFO_OTHER
 4

	)

52 
	#CMS_TEXT
 0x1

	)

53 
	#CMS_NOCERTS
 0x2

	)

54 
	#CMS_NO_CONTENT_VERIFY
 0x4

	)

55 
	#CMS_NO_ATTR_VERIFY
 0x8

	)

56 
	#CMS_NOSIGS
 \

57 (
CMS_NO_CONTENT_VERIFY
|
CMS_NO_ATTR_VERIFY
)

	)

58 
	#CMS_NOINTERN
 0x10

	)

59 
	#CMS_NO_SIGNER_CERT_VERIFY
 0x20

	)

60 
	#CMS_NOVERIFY
 0x20

	)

61 
	#CMS_DETACHED
 0x40

	)

62 
	#CMS_BINARY
 0x80

	)

63 
	#CMS_NOATTR
 0x100

	)

64 
	#CMS_NOSMIMECAP
 0x200

	)

65 
	#CMS_NOOLDMIMETYPE
 0x400

	)

66 
	#CMS_CRLFEOL
 0x800

	)

67 
	#CMS_STREAM
 0x1000

	)

68 
	#CMS_NOCRL
 0x2000

	)

69 
	#CMS_PARTIAL
 0x4000

	)

70 
	#CMS_REUSE_DIGEST
 0x8000

	)

71 
	#CMS_USE_KEYID
 0x10000

	)

72 
	#CMS_DEBUG_DECRYPT
 0x20000

	)

73 
	#CMS_KEY_PARAM
 0x40000

	)

74 
	#CMS_ASCIICRLF
 0x80000

	)

76 c⁄° 
ASN1_OBJECT
 *
CMS_gë0_ty≥
(c⁄° 
CMS_C⁄ã¡Info
 *
cms
);

78 
BIO
 *
CMS_d©aInô
(
CMS_C⁄ã¡Info
 *
cms
, BIO *
ic⁄t
);

79 
CMS_d©aFöÆ
(
CMS_C⁄ã¡Info
 *
cms
, 
BIO
 *
bio
);

81 
ASN1_OCTET_STRING
 **
CMS_gë0_c⁄ã¡
(
CMS_C⁄ã¡Info
 *
cms
);

82 
CMS_is_dëached
(
CMS_C⁄ã¡Info
 *
cms
);

83 
CMS_£t_dëached
(
CMS_C⁄ã¡Info
 *
cms
, 
dëached
);

85 #ifde‡
HEADER_PEM_H


86 
DECLARE_PEM_rw_c⁄°
(
CMS
, 
CMS_C⁄ã¡Info
)

88 
CMS_°ªam
(***
bound¨y
, 
CMS_C⁄ã¡Info
 *
cms
);

89 
CMS_C⁄ã¡Info
 *
d2i_CMS_bio
(
BIO
 *
bp
, CMS_C⁄ã¡Infÿ**
cms
);

90 
i2d_CMS_bio
(
BIO
 *
bp
, 
CMS_C⁄ã¡Info
 *
cms
);

92 
BIO
 *
BIO_√w_CMS
(BIO *
out
, 
CMS_C⁄ã¡Info
 *
cms
);

93 
i2d_CMS_bio_°ªam
(
BIO
 *
out
, 
CMS_C⁄ã¡Info
 *
cms
, BIO *
ö
, 
Êags
);

94 
PEM_wrôe_bio_CMS_°ªam
(
BIO
 *
out
, 
CMS_C⁄ã¡Info
 *
cms
, BIO *
ö
,

95 
Êags
);

96 
CMS_C⁄ã¡Info
 *
SMIME_ªad_CMS
(
BIO
 *
bio
, BIO **
bc⁄t
);

97 
SMIME_wrôe_CMS
(
BIO
 *
bio
, 
CMS_C⁄ã¡Info
 *
cms
, BIO *
d©a
, 
Êags
);

99 
CMS_föÆ
(
CMS_C⁄ã¡Info
 *
cms
, 
BIO
 *
d©a
, BIO *
dc⁄t
,

100 
Êags
);

102 
CMS_C⁄ã¡Info
 *
CMS_sign
(
X509
 *
sign˚π
, 
EVP_PKEY
 *
pkey
,

103 
STACK_OF
(
X509
Ë*
˚πs
, 
BIO
 *
d©a
,

104 
Êags
);

106 
CMS_C⁄ã¡Info
 *
CMS_sign_ª˚ùt
(
CMS_Sig√rInfo
 *
si
,

107 
X509
 *
sign˚π
, 
EVP_PKEY
 *
pkey
,

108 
STACK_OF
(
X509
Ë*
˚πs
, 
Êags
);

110 
CMS_d©a
(
CMS_C⁄ã¡Info
 *
cms
, 
BIO
 *
out
, 
Êags
);

111 
CMS_C⁄ã¡Info
 *
CMS_d©a_¸óã
(
BIO
 *
ö
, 
Êags
);

113 
CMS_dige°_vîify
(
CMS_C⁄ã¡Info
 *
cms
, 
BIO
 *
dc⁄t
, BIO *
out
,

114 
Êags
);

115 
CMS_C⁄ã¡Info
 *
CMS_dige°_¸óã
(
BIO
 *
ö
, c⁄° 
EVP_MD
 *
md
,

116 
Êags
);

118 
CMS_En¸y±edD©a_de¸y±
(
CMS_C⁄ã¡Info
 *
cms
,

119 c⁄° *
key
, 
size_t
 
keyÀn
,

120 
BIO
 *
dc⁄t
, BIO *
out
, 
Êags
);

122 
CMS_C⁄ã¡Info
 *
CMS_En¸y±edD©a_í¸y±
(
BIO
 *
ö
, c⁄° 
EVP_CIPHER
 *
cùhî
,

123 c⁄° *
key
,

124 
size_t
 
keyÀn
, 
Êags
);

126 
CMS_En¸y±edD©a_£t1_key
(
CMS_C⁄ã¡Info
 *
cms
, c⁄° 
EVP_CIPHER
 *
cùh
,

127 c⁄° *
key
, 
size_t
 
keyÀn
);

129 
CMS_vîify
(
CMS_C⁄ã¡Info
 *
cms
, 
STACK_OF
(
X509
Ë*
˚πs
,

130 
X509_STORE
 *
°‹e
, 
BIO
 *
dc⁄t
, BIO *
out
, 
Êags
);

132 
CMS_vîify_ª˚ùt
(
CMS_C⁄ã¡Info
 *
rcms
, CMS_C⁄ã¡Infÿ*
ocms
,

133 
STACK_OF
(
X509
Ë*
˚πs
,

134 
X509_STORE
 *
°‹e
, 
Êags
);

136 
STACK_OF
(
X509
Ë*
CMS_gë0_sig√rs
(
CMS_C⁄ã¡Info
 *
cms
);

138 
CMS_C⁄ã¡Info
 *
CMS_í¸y±
(
STACK_OF
(
X509
Ë*
˚πs
, 
BIO
 *
ö
,

139 c⁄° 
EVP_CIPHER
 *
cùhî
, 
Êags
);

141 
CMS_de¸y±
(
CMS_C⁄ã¡Info
 *
cms
, 
EVP_PKEY
 *
pkey
, 
X509
 *
˚π
,

142 
BIO
 *
dc⁄t
, BIO *
out
, 
Êags
);

144 
CMS_de¸y±_£t1_pkey
(
CMS_C⁄ã¡Info
 *
cms
, 
EVP_PKEY
 *
pk
, 
X509
 *
˚π
);

145 
CMS_de¸y±_£t1_key
(
CMS_C⁄ã¡Info
 *
cms
,

146 *
key
, 
size_t
 
keyÀn
,

147 *
id
, 
size_t
 
idÀn
);

148 
CMS_de¸y±_£t1_∑ssw‹d
(
CMS_C⁄ã¡Info
 *
cms
,

149 *
∑ss
, 
os¶_ssize_t
 
∑s¶í
);

151 
STACK_OF
(
CMS_Recùõ¡Info
Ë*
CMS_gë0_Recùõ¡Infos
(
CMS_C⁄ã¡Info
 *
cms
);

152 
CMS_Recùõ¡Info_ty≥
(
CMS_Recùõ¡Info
 *
ri
);

153 
EVP_PKEY_CTX
 *
CMS_Recùõ¡Info_gë0_pkey_˘x
(
CMS_Recùõ¡Info
 *
ri
);

154 
CMS_C⁄ã¡Info
 *
CMS_Envñ›edD©a_¸óã
(c⁄° 
EVP_CIPHER
 *
cùhî
);

155 
CMS_Recùõ¡Info
 *
CMS_add1_ªcùõ¡_˚π
(
CMS_C⁄ã¡Info
 *
cms
,

156 
X509
 *
ªcù
, 
Êags
);

157 
CMS_Recùõ¡Info_£t0_pkey
(
CMS_Recùõ¡Info
 *
ri
, 
EVP_PKEY
 *
pkey
);

158 
CMS_Recùõ¡Info_kåi_˚π_cmp
(
CMS_Recùõ¡Info
 *
ri
, 
X509
 *
˚π
);

159 
CMS_Recùõ¡Info_kåi_gë0_Ægs
(
CMS_Recùõ¡Info
 *
ri
,

160 
EVP_PKEY
 **
pk
, 
X509
 **
ªcù
,

161 
X509_ALGOR
 **
∑lg
);

162 
CMS_Recùõ¡Info_kåi_gë0_sig√r_id
(
CMS_Recùõ¡Info
 *
ri
,

163 
ASN1_OCTET_STRING
 **
keyid
,

164 
X509_NAME
 **
issuî
,

165 
ASN1_INTEGER
 **
¢o
);

167 
CMS_Recùõ¡Info
 *
CMS_add0_ªcùõ¡_key
(
CMS_C⁄ã¡Info
 *
cms
, 
nid
,

168 *
key
, 
size_t
 
keyÀn
,

169 *
id
, 
size_t
 
idÀn
,

170 
ASN1_GENERALIZEDTIME
 *
d©e
,

171 
ASN1_OBJECT
 *
ŸhîTy≥Id
,

172 
ASN1_TYPE
 *
ŸhîTy≥
);

174 
CMS_Recùõ¡Info_kekri_gë0_id
(
CMS_Recùõ¡Info
 *
ri
,

175 
X509_ALGOR
 **
∑lg
,

176 
ASN1_OCTET_STRING
 **
pid
,

177 
ASN1_GENERALIZEDTIME
 **
pd©e
,

178 
ASN1_OBJECT
 **
pŸhîid
,

179 
ASN1_TYPE
 **
pŸhîty≥
);

181 
CMS_Recùõ¡Info_£t0_key
(
CMS_Recùõ¡Info
 *
ri
,

182 *
key
, 
size_t
 
keyÀn
);

184 
CMS_Recùõ¡Info_kekri_id_cmp
(
CMS_Recùõ¡Info
 *
ri
,

185 c⁄° *
id
, 
size_t
 
idÀn
);

187 
CMS_Recùõ¡Info_£t0_∑ssw‹d
(
CMS_Recùõ¡Info
 *
ri
,

188 *
∑ss
,

189 
os¶_ssize_t
 
∑s¶í
);

191 
CMS_Recùõ¡Info
 *
CMS_add0_ªcùõ¡_∑ssw‹d
(
CMS_C⁄ã¡Info
 *
cms
,

192 
ôî
, 
wøp_nid
,

193 
pbe_nid
,

194 *
∑ss
,

195 
os¶_ssize_t
 
∑s¶í
,

196 c⁄° 
EVP_CIPHER
 *
kekcùh
);

198 
CMS_Recùõ¡Info_de¸y±
(
CMS_C⁄ã¡Info
 *
cms
, 
CMS_Recùõ¡Info
 *
ri
);

199 
CMS_Recùõ¡Info_í¸y±
(
CMS_C⁄ã¡Info
 *
cms
, 
CMS_Recùõ¡Info
 *
ri
);

201 
CMS_uncom¥ess
(
CMS_C⁄ã¡Info
 *
cms
, 
BIO
 *
dc⁄t
, BIO *
out
,

202 
Êags
);

203 
CMS_C⁄ã¡Info
 *
CMS_com¥ess
(
BIO
 *
ö
, 
comp_nid
, 
Êags
);

205 
CMS_£t1_eC⁄ã¡Ty≥
(
CMS_C⁄ã¡Info
 *
cms
, c⁄° 
ASN1_OBJECT
 *
oid
);

206 c⁄° 
ASN1_OBJECT
 *
CMS_gë0_eC⁄ã¡Ty≥
(
CMS_C⁄ã¡Info
 *
cms
);

208 
CMS_CîtifiˇãChoi˚s
 *
CMS_add0_CîtifiˇãChoi˚s
(
CMS_C⁄ã¡Info
 *
cms
);

209 
CMS_add0_˚π
(
CMS_C⁄ã¡Info
 *
cms
, 
X509
 *
˚π
);

210 
CMS_add1_˚π
(
CMS_C⁄ã¡Info
 *
cms
, 
X509
 *
˚π
);

211 
STACK_OF
(
X509
Ë*
CMS_gë1_˚πs
(
CMS_C⁄ã¡Info
 *
cms
);

213 
CMS_Revoˇti⁄InfoChoi˚
 *
CMS_add0_Revoˇti⁄InfoChoi˚
(
CMS_C⁄ã¡Info
 *
cms
);

214 
CMS_add0_¸l
(
CMS_C⁄ã¡Info
 *
cms
, 
X509_CRL
 *
¸l
);

215 
CMS_add1_¸l
(
CMS_C⁄ã¡Info
 *
cms
, 
X509_CRL
 *
¸l
);

216 
STACK_OF
(
X509_CRL
Ë*
CMS_gë1_¸ls
(
CMS_C⁄ã¡Info
 *
cms
);

218 
CMS_Sig√dD©a_öô
(
CMS_C⁄ã¡Info
 *
cms
);

219 
CMS_Sig√rInfo
 *
CMS_add1_sig√r
(
CMS_C⁄ã¡Info
 *
cms
,

220 
X509
 *
sig√r
, 
EVP_PKEY
 *
pk
, c⁄° 
EVP_MD
 *
md
,

221 
Êags
);

222 
EVP_PKEY_CTX
 *
CMS_Sig√rInfo_gë0_pkey_˘x
(
CMS_Sig√rInfo
 *
si
);

223 
EVP_MD_CTX
 *
CMS_Sig√rInfo_gë0_md_˘x
(
CMS_Sig√rInfo
 *
si
);

224 
STACK_OF
(
CMS_Sig√rInfo
Ë*
CMS_gë0_Sig√rInfos
(
CMS_C⁄ã¡Info
 *
cms
);

226 
CMS_Sig√rInfo_£t1_sig√r_˚π
(
CMS_Sig√rInfo
 *
si
, 
X509
 *
sig√r
);

227 
CMS_Sig√rInfo_gë0_sig√r_id
(
CMS_Sig√rInfo
 *
si
,

228 
ASN1_OCTET_STRING
 **
keyid
,

229 
X509_NAME
 **
issuî
, 
ASN1_INTEGER
 **
¢o
);

230 
CMS_Sig√rInfo_˚π_cmp
(
CMS_Sig√rInfo
 *
si
, 
X509
 *
˚π
);

231 
CMS_£t1_sig√rs_˚πs
(
CMS_C⁄ã¡Info
 *
cms
, 
STACK_OF
(
X509
Ë*
˚πs
,

232 
Êags
);

233 
CMS_Sig√rInfo_gë0_Ægs
(
CMS_Sig√rInfo
 *
si
, 
EVP_PKEY
 **
pk
,

234 
X509
 **
sig√r
, 
X509_ALGOR
 **
pdig
,

235 
X509_ALGOR
 **
psig
);

236 
ASN1_OCTET_STRING
 *
CMS_Sig√rInfo_gë0_sig«tuª
(
CMS_Sig√rInfo
 *
si
);

237 
CMS_Sig√rInfo_sign
(
CMS_Sig√rInfo
 *
si
);

238 
CMS_Sig√rInfo_vîify
(
CMS_Sig√rInfo
 *
si
);

239 
CMS_Sig√rInfo_vîify_c⁄ã¡
(
CMS_Sig√rInfo
 *
si
, 
BIO
 *
chaö
);

241 
CMS_add_smimeˇp
(
CMS_Sig√rInfo
 *
si
, 
STACK_OF
(
X509_ALGOR
Ë*
Ægs
);

242 
CMS_add_sim∂e_smimeˇp
(
STACK_OF
(
X509_ALGOR
Ë**
Ægs
,

243 
Ægnid
, 
keysize
);

244 
CMS_add_°™d¨d_smimeˇp
(
STACK_OF
(
X509_ALGOR
Ë**
smˇp
);

246 
CMS_sig√d_gë_©å_cou¡
(c⁄° 
CMS_Sig√rInfo
 *
si
);

247 
CMS_sig√d_gë_©å_by_NID
(c⁄° 
CMS_Sig√rInfo
 *
si
, 
nid
,

248 
œ°pos
);

249 
CMS_sig√d_gë_©å_by_OBJ
(c⁄° 
CMS_Sig√rInfo
 *
si
, 
ASN1_OBJECT
 *
obj
,

250 
œ°pos
);

251 
X509_ATTRIBUTE
 *
CMS_sig√d_gë_©å
(c⁄° 
CMS_Sig√rInfo
 *
si
, 
loc
);

252 
X509_ATTRIBUTE
 *
CMS_sig√d_dñëe_©å
(
CMS_Sig√rInfo
 *
si
, 
loc
);

253 
CMS_sig√d_add1_©å
(
CMS_Sig√rInfo
 *
si
, 
X509_ATTRIBUTE
 *
©å
);

254 
CMS_sig√d_add1_©å_by_OBJ
(
CMS_Sig√rInfo
 *
si
,

255 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

256 c⁄° *
byãs
, 
Àn
);

257 
CMS_sig√d_add1_©å_by_NID
(
CMS_Sig√rInfo
 *
si
,

258 
nid
, 
ty≥
,

259 c⁄° *
byãs
, 
Àn
);

260 
CMS_sig√d_add1_©å_by_txt
(
CMS_Sig√rInfo
 *
si
,

261 c⁄° *
©å«me
, 
ty≥
,

262 c⁄° *
byãs
, 
Àn
);

263 *
CMS_sig√d_gë0_d©a_by_OBJ
(
CMS_Sig√rInfo
 *
si
, 
ASN1_OBJECT
 *
oid
,

264 
œ°pos
, 
ty≥
);

266 
CMS_unsig√d_gë_©å_cou¡
(c⁄° 
CMS_Sig√rInfo
 *
si
);

267 
CMS_unsig√d_gë_©å_by_NID
(c⁄° 
CMS_Sig√rInfo
 *
si
, 
nid
,

268 
œ°pos
);

269 
CMS_unsig√d_gë_©å_by_OBJ
(c⁄° 
CMS_Sig√rInfo
 *
si
, 
ASN1_OBJECT
 *
obj
,

270 
œ°pos
);

271 
X509_ATTRIBUTE
 *
CMS_unsig√d_gë_©å
(c⁄° 
CMS_Sig√rInfo
 *
si
, 
loc
);

272 
X509_ATTRIBUTE
 *
CMS_unsig√d_dñëe_©å
(
CMS_Sig√rInfo
 *
si
, 
loc
);

273 
CMS_unsig√d_add1_©å
(
CMS_Sig√rInfo
 *
si
, 
X509_ATTRIBUTE
 *
©å
);

274 
CMS_unsig√d_add1_©å_by_OBJ
(
CMS_Sig√rInfo
 *
si
,

275 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

276 c⁄° *
byãs
, 
Àn
);

277 
CMS_unsig√d_add1_©å_by_NID
(
CMS_Sig√rInfo
 *
si
,

278 
nid
, 
ty≥
,

279 c⁄° *
byãs
, 
Àn
);

280 
CMS_unsig√d_add1_©å_by_txt
(
CMS_Sig√rInfo
 *
si
,

281 c⁄° *
©å«me
, 
ty≥
,

282 c⁄° *
byãs
, 
Àn
);

283 *
CMS_unsig√d_gë0_d©a_by_OBJ
(
CMS_Sig√rInfo
 *
si
, 
ASN1_OBJECT
 *
oid
,

284 
œ°pos
, 
ty≥
);

286 #ifde‡
HEADER_X509V3_H


288 
CMS_gë1_Re˚ùtReque°
(
CMS_Sig√rInfo
 *
si
, 
CMS_Re˚ùtReque°
 **
¥r
);

289 
CMS_Re˚ùtReque°
 *
CMS_Re˚ùtReque°_¸óã0
(*
id
, 
idÀn
,

290 
Æl‹fú°
,

291 
STACK_OF
(
GENERAL_NAMES
)

292 *
ª˚ùtLi°
, 
STACK_OF
(
GENERAL_NAMES
)

293 *
ª˚ùtsTo
);

294 
CMS_add1_Re˚ùtReque°
(
CMS_Sig√rInfo
 *
si
, 
CMS_Re˚ùtReque°
 *
º
);

295 
CMS_Re˚ùtReque°_gë0_vÆues
(
CMS_Re˚ùtReque°
 *
º
,

296 
ASN1_STRING
 **
pcid
,

297 *
∑Œ‹fú°
,

298 
STACK_OF
(
GENERAL_NAMES
Ë**
∂i°
,

299 
STACK_OF
(
GENERAL_NAMES
Ë**
¥to
);

301 
CMS_Recùõ¡Info_k¨i_gë0_Æg
(
CMS_Recùõ¡Info
 *
ri
,

302 
X509_ALGOR
 **
∑lg
,

303 
ASN1_OCTET_STRING
 **
pukm
);

304 
STACK_OF
(
CMS_Recùõ¡En¸y±edKey
)

305 *
CMS_Recùõ¡Info_k¨i_gë0_ªks
(
CMS_Recùõ¡Info
 *
ri
);

307 
CMS_Recùõ¡Info_k¨i_gë0_‹ig_id
(
CMS_Recùõ¡Info
 *
ri
,

308 
X509_ALGOR
 **
pubÆg
,

309 
ASN1_BIT_STRING
 **
pubkey
,

310 
ASN1_OCTET_STRING
 **
keyid
,

311 
X509_NAME
 **
issuî
,

312 
ASN1_INTEGER
 **
¢o
);

314 
CMS_Recùõ¡Info_k¨i_‹ig_id_cmp
(
CMS_Recùõ¡Info
 *
ri
, 
X509
 *
˚π
);

316 
CMS_Recùõ¡En¸y±edKey_gë0_id
(
CMS_Recùõ¡En¸y±edKey
 *
ªk
,

317 
ASN1_OCTET_STRING
 **
keyid
,

318 
ASN1_GENERALIZEDTIME
 **
tm
,

319 
CMS_OthîKeyAâribuã
 **
Ÿhî
,

320 
X509_NAME
 **
issuî
, 
ASN1_INTEGER
 **
¢o
);

321 
CMS_Recùõ¡En¸y±edKey_˚π_cmp
(
CMS_Recùõ¡En¸y±edKey
 *
ªk
,

322 
X509
 *
˚π
);

323 
CMS_Recùõ¡Info_k¨i_£t0_pkey
(
CMS_Recùõ¡Info
 *
ri
, 
EVP_PKEY
 *
pk
);

324 
EVP_CIPHER_CTX
 *
CMS_Recùõ¡Info_k¨i_gë0_˘x
(
CMS_Recùõ¡Info
 *
ri
);

325 
CMS_Recùõ¡Info_k¨i_de¸y±
(
CMS_C⁄ã¡Info
 *
cms
,

326 
CMS_Recùõ¡Info
 *
ri
,

327 
CMS_Recùõ¡En¸y±edKey
 *
ªk
);

329 
CMS_Sh¨edInfo_ícode
(**
pdî
, 
X509_ALGOR
 *
kekÆg
,

330 
ASN1_OCTET_STRING
 *
ukm
, 
keyÀn
);

338 
ERR_lﬂd_CMS_°rögs
();

343 
	#CMS_F_CHECK_CONTENT
 99

	)

344 
	#CMS_F_CMS_ADD0_CERT
 164

	)

345 
	#CMS_F_CMS_ADD0_RECIPIENT_KEY
 100

	)

346 
	#CMS_F_CMS_ADD0_RECIPIENT_PASSWORD
 165

	)

347 
	#CMS_F_CMS_ADD1_RECEIPTREQUEST
 158

	)

348 
	#CMS_F_CMS_ADD1_RECIPIENT_CERT
 101

	)

349 
	#CMS_F_CMS_ADD1_SIGNER
 102

	)

350 
	#CMS_F_CMS_ADD1_SIGNINGTIME
 103

	)

351 
	#CMS_F_CMS_COMPRESS
 104

	)

352 
	#CMS_F_CMS_COMPRESSEDDATA_CREATE
 105

	)

353 
	#CMS_F_CMS_COMPRESSEDDATA_INIT_BIO
 106

	)

354 
	#CMS_F_CMS_COPY_CONTENT
 107

	)

355 
	#CMS_F_CMS_COPY_MESSAGEDIGEST
 108

	)

356 
	#CMS_F_CMS_DATA
 109

	)

357 
	#CMS_F_CMS_DATAFINAL
 110

	)

358 
	#CMS_F_CMS_DATAINIT
 111

	)

359 
	#CMS_F_CMS_DECRYPT
 112

	)

360 
	#CMS_F_CMS_DECRYPT_SET1_KEY
 113

	)

361 
	#CMS_F_CMS_DECRYPT_SET1_PASSWORD
 166

	)

362 
	#CMS_F_CMS_DECRYPT_SET1_PKEY
 114

	)

363 
	#CMS_F_CMS_DIGESTALGORITHM_FIND_CTX
 115

	)

364 
	#CMS_F_CMS_DIGESTALGORITHM_INIT_BIO
 116

	)

365 
	#CMS_F_CMS_DIGESTEDDATA_DO_FINAL
 117

	)

366 
	#CMS_F_CMS_DIGEST_VERIFY
 118

	)

367 
	#CMS_F_CMS_ENCODE_RECEIPT
 161

	)

368 
	#CMS_F_CMS_ENCRYPT
 119

	)

369 
	#CMS_F_CMS_ENCRYPTEDCONTENT_INIT_BIO
 120

	)

370 
	#CMS_F_CMS_ENCRYPTEDDATA_DECRYPT
 121

	)

371 
	#CMS_F_CMS_ENCRYPTEDDATA_ENCRYPT
 122

	)

372 
	#CMS_F_CMS_ENCRYPTEDDATA_SET1_KEY
 123

	)

373 
	#CMS_F_CMS_ENVELOPEDDATA_CREATE
 124

	)

374 
	#CMS_F_CMS_ENVELOPEDDATA_INIT_BIO
 125

	)

375 
	#CMS_F_CMS_ENVELOPED_DATA_INIT
 126

	)

376 
	#CMS_F_CMS_ENV_ASN1_CTRL
 171

	)

377 
	#CMS_F_CMS_FINAL
 127

	)

378 
	#CMS_F_CMS_GET0_CERTIFICATE_CHOICES
 128

	)

379 
	#CMS_F_CMS_GET0_CONTENT
 129

	)

380 
	#CMS_F_CMS_GET0_ECONTENT_TYPE
 130

	)

381 
	#CMS_F_CMS_GET0_ENVELOPED
 131

	)

382 
	#CMS_F_CMS_GET0_REVOCATION_CHOICES
 132

	)

383 
	#CMS_F_CMS_GET0_SIGNED
 133

	)

384 
	#CMS_F_CMS_MSGSIGDIGEST_ADD1
 162

	)

385 
	#CMS_F_CMS_RECEIPTREQUEST_CREATE0
 159

	)

386 
	#CMS_F_CMS_RECEIPT_VERIFY
 160

	)

387 
	#CMS_F_CMS_RECIPIENTINFO_DECRYPT
 134

	)

388 
	#CMS_F_CMS_RECIPIENTINFO_ENCRYPT
 169

	)

389 
	#CMS_F_CMS_RECIPIENTINFO_KARI_ENCRYPT
 178

	)

390 
	#CMS_F_CMS_RECIPIENTINFO_KARI_GET0_ALG
 175

	)

391 
	#CMS_F_CMS_RECIPIENTINFO_KARI_GET0_ORIG_ID
 173

	)

392 
	#CMS_F_CMS_RECIPIENTINFO_KARI_GET0_REKS
 172

	)

393 
	#CMS_F_CMS_RECIPIENTINFO_KARI_ORIG_ID_CMP
 174

	)

394 
	#CMS_F_CMS_RECIPIENTINFO_KEKRI_DECRYPT
 135

	)

395 
	#CMS_F_CMS_RECIPIENTINFO_KEKRI_ENCRYPT
 136

	)

396 
	#CMS_F_CMS_RECIPIENTINFO_KEKRI_GET0_ID
 137

	)

397 
	#CMS_F_CMS_RECIPIENTINFO_KEKRI_ID_CMP
 138

	)

398 
	#CMS_F_CMS_RECIPIENTINFO_KTRI_CERT_CMP
 139

	)

399 
	#CMS_F_CMS_RECIPIENTINFO_KTRI_DECRYPT
 140

	)

400 
	#CMS_F_CMS_RECIPIENTINFO_KTRI_ENCRYPT
 141

	)

401 
	#CMS_F_CMS_RECIPIENTINFO_KTRI_GET0_ALGS
 142

	)

402 
	#CMS_F_CMS_RECIPIENTINFO_KTRI_GET0_SIGNER_ID
 143

	)

403 
	#CMS_F_CMS_RECIPIENTINFO_PWRI_CRYPT
 167

	)

404 
	#CMS_F_CMS_RECIPIENTINFO_SET0_KEY
 144

	)

405 
	#CMS_F_CMS_RECIPIENTINFO_SET0_PASSWORD
 168

	)

406 
	#CMS_F_CMS_RECIPIENTINFO_SET0_PKEY
 145

	)

407 
	#CMS_F_CMS_SD_ASN1_CTRL
 170

	)

408 
	#CMS_F_CMS_SET1_IAS
 176

	)

409 
	#CMS_F_CMS_SET1_KEYID
 177

	)

410 
	#CMS_F_CMS_SET1_SIGNERIDENTIFIER
 146

	)

411 
	#CMS_F_CMS_SET_DETACHED
 147

	)

412 
	#CMS_F_CMS_SIGN
 148

	)

413 
	#CMS_F_CMS_SIGNED_DATA_INIT
 149

	)

414 
	#CMS_F_CMS_SIGNERINFO_CONTENT_SIGN
 150

	)

415 
	#CMS_F_CMS_SIGNERINFO_SIGN
 151

	)

416 
	#CMS_F_CMS_SIGNERINFO_VERIFY
 152

	)

417 
	#CMS_F_CMS_SIGNERINFO_VERIFY_CERT
 153

	)

418 
	#CMS_F_CMS_SIGNERINFO_VERIFY_CONTENT
 154

	)

419 
	#CMS_F_CMS_SIGN_RECEIPT
 163

	)

420 
	#CMS_F_CMS_STREAM
 155

	)

421 
	#CMS_F_CMS_UNCOMPRESS
 156

	)

422 
	#CMS_F_CMS_VERIFY
 157

	)

425 
	#CMS_R_ADD_SIGNER_ERROR
 99

	)

426 
	#CMS_R_CERTIFICATE_ALREADY_PRESENT
 175

	)

427 
	#CMS_R_CERTIFICATE_HAS_NO_KEYID
 160

	)

428 
	#CMS_R_CERTIFICATE_VERIFY_ERROR
 100

	)

429 
	#CMS_R_CIPHER_INITIALISATION_ERROR
 101

	)

430 
	#CMS_R_CIPHER_PARAMETER_INITIALISATION_ERROR
 102

	)

431 
	#CMS_R_CMS_DATAFINAL_ERROR
 103

	)

432 
	#CMS_R_CMS_LIB
 104

	)

433 
	#CMS_R_CONTENTIDENTIFIER_MISMATCH
 170

	)

434 
	#CMS_R_CONTENT_NOT_FOUND
 105

	)

435 
	#CMS_R_CONTENT_TYPE_MISMATCH
 171

	)

436 
	#CMS_R_CONTENT_TYPE_NOT_COMPRESSED_DATA
 106

	)

437 
	#CMS_R_CONTENT_TYPE_NOT_ENVELOPED_DATA
 107

	)

438 
	#CMS_R_CONTENT_TYPE_NOT_SIGNED_DATA
 108

	)

439 
	#CMS_R_CONTENT_VERIFY_ERROR
 109

	)

440 
	#CMS_R_CTRL_ERROR
 110

	)

441 
	#CMS_R_CTRL_FAILURE
 111

	)

442 
	#CMS_R_DECRYPT_ERROR
 112

	)

443 
	#CMS_R_ERROR_GETTING_PUBLIC_KEY
 113

	)

444 
	#CMS_R_ERROR_READING_MESSAGEDIGEST_ATTRIBUTE
 114

	)

445 
	#CMS_R_ERROR_SETTING_KEY
 115

	)

446 
	#CMS_R_ERROR_SETTING_RECIPIENTINFO
 116

	)

447 
	#CMS_R_INVALID_ENCRYPTED_KEY_LENGTH
 117

	)

448 
	#CMS_R_INVALID_KEY_ENCRYPTION_PARAMETER
 176

	)

449 
	#CMS_R_INVALID_KEY_LENGTH
 118

	)

450 
	#CMS_R_MD_BIO_INIT_ERROR
 119

	)

451 
	#CMS_R_MESSAGEDIGEST_ATTRIBUTE_WRONG_LENGTH
 120

	)

452 
	#CMS_R_MESSAGEDIGEST_WRONG_LENGTH
 121

	)

453 
	#CMS_R_MSGSIGDIGEST_ERROR
 172

	)

454 
	#CMS_R_MSGSIGDIGEST_VERIFICATION_FAILURE
 162

	)

455 
	#CMS_R_MSGSIGDIGEST_WRONG_LENGTH
 163

	)

456 
	#CMS_R_NEED_ONE_SIGNER
 164

	)

457 
	#CMS_R_NOT_A_SIGNED_RECEIPT
 165

	)

458 
	#CMS_R_NOT_ENCRYPTED_DATA
 122

	)

459 
	#CMS_R_NOT_KEK
 123

	)

460 
	#CMS_R_NOT_KEY_AGREEMENT
 181

	)

461 
	#CMS_R_NOT_KEY_TRANSPORT
 124

	)

462 
	#CMS_R_NOT_PWRI
 177

	)

463 
	#CMS_R_NOT_SUPPORTED_FOR_THIS_KEY_TYPE
 125

	)

464 
	#CMS_R_NO_CIPHER
 126

	)

465 
	#CMS_R_NO_CONTENT
 127

	)

466 
	#CMS_R_NO_CONTENT_TYPE
 173

	)

467 
	#CMS_R_NO_DEFAULT_DIGEST
 128

	)

468 
	#CMS_R_NO_DIGEST_SET
 129

	)

469 
	#CMS_R_NO_KEY
 130

	)

470 
	#CMS_R_NO_KEY_OR_CERT
 174

	)

471 
	#CMS_R_NO_MATCHING_DIGEST
 131

	)

472 
	#CMS_R_NO_MATCHING_RECIPIENT
 132

	)

473 
	#CMS_R_NO_MATCHING_SIGNATURE
 166

	)

474 
	#CMS_R_NO_MSGSIGDIGEST
 167

	)

475 
	#CMS_R_NO_PASSWORD
 178

	)

476 
	#CMS_R_NO_PRIVATE_KEY
 133

	)

477 
	#CMS_R_NO_PUBLIC_KEY
 134

	)

478 
	#CMS_R_NO_RECEIPT_REQUEST
 168

	)

479 
	#CMS_R_NO_SIGNERS
 135

	)

480 
	#CMS_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE
 136

	)

481 
	#CMS_R_RECEIPT_DECODE_ERROR
 169

	)

482 
	#CMS_R_RECIPIENT_ERROR
 137

	)

483 
	#CMS_R_SIGNER_CERTIFICATE_NOT_FOUND
 138

	)

484 
	#CMS_R_SIGNFINAL_ERROR
 139

	)

485 
	#CMS_R_SMIME_TEXT_ERROR
 140

	)

486 
	#CMS_R_STORE_INIT_ERROR
 141

	)

487 
	#CMS_R_TYPE_NOT_COMPRESSED_DATA
 142

	)

488 
	#CMS_R_TYPE_NOT_DATA
 143

	)

489 
	#CMS_R_TYPE_NOT_DIGESTED_DATA
 144

	)

490 
	#CMS_R_TYPE_NOT_ENCRYPTED_DATA
 145

	)

491 
	#CMS_R_TYPE_NOT_ENVELOPED_DATA
 146

	)

492 
	#CMS_R_UNABLE_TO_FINALIZE_CONTEXT
 147

	)

493 
	#CMS_R_UNKNOWN_CIPHER
 148

	)

494 
	#CMS_R_UNKNOWN_DIGEST_ALGORIHM
 149

	)

495 
	#CMS_R_UNKNOWN_ID
 150

	)

496 
	#CMS_R_UNSUPPORTED_COMPRESSION_ALGORITHM
 151

	)

497 
	#CMS_R_UNSUPPORTED_CONTENT_TYPE
 152

	)

498 
	#CMS_R_UNSUPPORTED_KEK_ALGORITHM
 153

	)

499 
	#CMS_R_UNSUPPORTED_KEY_ENCRYPTION_ALGORITHM
 179

	)

500 
	#CMS_R_UNSUPPORTED_RECIPIENT_TYPE
 154

	)

501 
	#CMS_R_UNSUPPORTED_RECPIENTINFO_TYPE
 155

	)

502 
	#CMS_R_UNSUPPORTED_TYPE
 156

	)

503 
	#CMS_R_UNWRAP_ERROR
 157

	)

504 
	#CMS_R_UNWRAP_FAILURE
 180

	)

505 
	#CMS_R_VERIFICATION_FAILURE
 158

	)

506 
	#CMS_R_WRAP_ERROR
 159

	)

508 #ifde‡ 
__˝lu•lus


	@comp.h

10 #i‚de‡
HEADER_COMP_H


11 
	#HEADER_COMP_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #i‚de‡
OPENSSL_NO_COMP


16 
	~<›ís¶/¸y±o.h
>

17 #ifde‡ 
__˝lu•lus


23 
COMP_CTX
 *
COMP_CTX_√w
(
COMP_METHOD
 *
mëh
);

24 c⁄° 
COMP_METHOD
 *
COMP_CTX_gë_mëhod
(c⁄° 
COMP_CTX
 *
˘x
);

25 
COMP_CTX_gë_ty≥
(c⁄° 
COMP_CTX
* 
comp
);

26 
COMP_gë_ty≥
(c⁄° 
COMP_METHOD
 *
mëh
);

27 c⁄° *
COMP_gë_«me
(c⁄° 
COMP_METHOD
 *
mëh
);

28 
COMP_CTX_‰ì
(
COMP_CTX
 *
˘x
);

30 
COMP_com¥ess_block
(
COMP_CTX
 *
˘x
, *
out
, 
ﬁí
,

31 *
ö
, 
ûí
);

32 
COMP_ex∑nd_block
(
COMP_CTX
 *
˘x
, *
out
, 
ﬁí
,

33 *
ö
, 
ûí
);

35 
COMP_METHOD
 *
COMP_zlib
();

37 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

38 
	#COMP_zlib_˛ónup
(Ë0Ë

	)

41 #ifde‡
HEADER_BIO_H


42 #ifde‡
ZLIB


43 c⁄° 
BIO_METHOD
 *
BIO_f_zlib
();

53 
ERR_lﬂd_COMP_°rögs
();

58 
	#COMP_F_BIO_ZLIB_FLUSH
 99

	)

59 
	#COMP_F_BIO_ZLIB_NEW
 100

	)

60 
	#COMP_F_BIO_ZLIB_READ
 101

	)

61 
	#COMP_F_BIO_ZLIB_WRITE
 102

	)

64 
	#COMP_R_ZLIB_DEFLATE_ERROR
 99

	)

65 
	#COMP_R_ZLIB_INFLATE_ERROR
 100

	)

66 
	#COMP_R_ZLIB_NOT_SUPPORTED
 101

	)

68 #ifde‡ 
__˝lu•lus


	@conf.h

10 #i‚de‡ 
HEADER_CONF_H


11 
	#HEADER_CONF_H


	)

13 
	~<›ís¶/bio.h
>

14 
	~<›ís¶/lhash.h
>

15 
	~<›ís¶/°ack.h
>

16 
	~<›ís¶/ß„°ack.h
>

17 
	~<›ís¶/e_os2.h
>

19 
	~<›ís¶/os¶_typ.h
>

21 #ifde‡ 
__˝lu•lus


26 *
£˘i⁄
;

27 *
«me
;

28 *
vÆue
;

29 } 
	tCONF_VALUE
;

31 
DEFINE_STACK_OF
(
CONF_VALUE
)

32 
DEFINE_LHASH_OF
(
CONF_VALUE
);

34 
c⁄f_°
;

35 
c⁄f_mëhod_°
;

36 
c⁄f_mëhod_°
 
	tCONF_METHOD
;

38 
	sc⁄f_mëhod_°
 {

39 c⁄° *
«me
;

40 
CONF
 *(*
¸óã
Ë(
CONF_METHOD
 *
mëh
);

41 (*
öô
Ë(
CONF
 *
c⁄f
);

42 (*
de°roy
Ë(
CONF
 *
c⁄f
);

43 (*
de°roy_d©a
Ë(
CONF
 *
c⁄f
);

44 (*
lﬂd_bio
Ë(
CONF
 *
c⁄f
, 
BIO
 *
bp
, *
ñöe
);

45 (*
dump
Ë(c⁄° 
CONF
 *
c⁄f
, 
BIO
 *
bp
);

46 (*
is_numbî
Ë(c⁄° 
CONF
 *
c⁄f
, 
c
);

47 (*
to_öt
Ë(c⁄° 
CONF
 *
c⁄f
, 
c
);

48 (*
lﬂd
Ë(
CONF
 *
c⁄f
, c⁄° *
«me
, *
ñöe
);

53 
c⁄f_imoduÀ_°
 
	tCONF_IMODULE
;

54 
c⁄f_moduÀ_°
 
	tCONF_MODULE
;

56 
DEFINE_STACK_OF
(
CONF_MODULE
)

57 
DEFINE_STACK_OF
(
CONF_IMODULE
)

60 
	tc⁄f_öô_func
 (
	tCONF_IMODULE
 *
	tmd
, c⁄° 
	tCONF
 *
	t˙f
);

61 
	tc⁄f_föish_func
 (
	tCONF_IMODULE
 *
	tmd
);

63 
	#CONF_MFLAGS_IGNORE_ERRORS
 0x1

	)

64 
	#CONF_MFLAGS_IGNORE_RETURN_CODES
 0x2

	)

65 
	#CONF_MFLAGS_SILENT
 0x4

	)

66 
	#CONF_MFLAGS_NO_DSO
 0x8

	)

67 
	#CONF_MFLAGS_IGNORE_MISSING_FILE
 0x10

	)

68 
	#CONF_MFLAGS_DEFAULT_SECTION
 0x20

	)

70 
CONF_£t_deÁu…_mëhod
(
CONF_METHOD
 *
mëh
);

71 
CONF_£t_nc⁄f
(
CONF
 *
c⁄f
, 
LHASH_OF
(
CONF_VALUE
Ë*
hash
);

72 
LHASH_OF
(
CONF_VALUE
Ë*
CONF_lﬂd
(LHASH_OF(CONF_VALUEË*
c⁄f
, c⁄° *
fûe
,

73 *
ñöe
);

74 #i‚de‡
OPENSSL_NO_STDIO


75 
LHASH_OF
(
CONF_VALUE
Ë*
CONF_lﬂd_Â
(LHASH_OF(CONF_VALUEË*
c⁄f
, 
FILE
 *
Â
,

76 *
ñöe
);

78 
LHASH_OF
(
CONF_VALUE
Ë*
CONF_lﬂd_bio
(LHASH_OF(CONF_VALUEË*
c⁄f
, 
BIO
 *
bp
,

79 *
ñöe
);

80 
STACK_OF
(
CONF_VALUE
Ë*
CONF_gë_£˘i⁄
(
LHASH_OF
(CONF_VALUEË*
c⁄f
,

81 c⁄° *
£˘i⁄
);

82 *
CONF_gë_°rög
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, c⁄° *
group
,

83 c⁄° *
«me
);

84 
CONF_gë_numbî
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, c⁄° *
group
,

85 c⁄° *
«me
);

86 
CONF_‰ì
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
);

87 #i‚de‡
OPENSSL_NO_STDIO


88 
CONF_dump_Â
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
FILE
 *
out
);

90 
CONF_dump_bio
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
BIO
 *
out
);

92 
DEPRECATEDIN_1_1_0
(
OPENSSL_c⁄fig
(c⁄° *
c⁄fig_«me
))

94 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

95 
	#OPENSSL_no_c⁄fig
() \

96 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_NO_LOAD_CONFIG
, 
NULL
)

	)

104 
	sc⁄f_°
 {

105 
CONF_METHOD
 *
mëh
;

106 *
mëh_d©a
;

107 
LHASH_OF
(
CONF_VALUE
Ë*
d©a
;

110 
CONF
 *
NCONF_√w
(
CONF_METHOD
 *
mëh
);

111 
CONF_METHOD
 *
NCONF_deÁu…
();

112 
CONF_METHOD
 *
NCONF_WIN32
();

113 
NCONF_‰ì
(
CONF
 *
c⁄f
);

114 
NCONF_‰ì_d©a
(
CONF
 *
c⁄f
);

116 
NCONF_lﬂd
(
CONF
 *
c⁄f
, c⁄° *
fûe
, *
ñöe
);

117 #i‚de‡
OPENSSL_NO_STDIO


118 
NCONF_lﬂd_Â
(
CONF
 *
c⁄f
, 
FILE
 *
Â
, *
ñöe
);

120 
NCONF_lﬂd_bio
(
CONF
 *
c⁄f
, 
BIO
 *
bp
, *
ñöe
);

121 
STACK_OF
(
CONF_VALUE
Ë*
NCONF_gë_£˘i⁄
(c⁄° 
CONF
 *
c⁄f
,

122 c⁄° *
£˘i⁄
);

123 *
NCONF_gë_°rög
(c⁄° 
CONF
 *
c⁄f
, c⁄° *
group
, c⁄° *
«me
);

124 
NCONF_gë_numbî_e
(c⁄° 
CONF
 *
c⁄f
, c⁄° *
group
, c⁄° *
«me
,

125 *
ªsu…
);

126 #i‚de‡
OPENSSL_NO_STDIO


127 
NCONF_dump_Â
(c⁄° 
CONF
 *
c⁄f
, 
FILE
 *
out
);

129 
NCONF_dump_bio
(c⁄° 
CONF
 *
c⁄f
, 
BIO
 *
out
);

131 
	#NCONF_gë_numbî
(
c
,
g
,
n
,
r
Ë
	`NCONF_gë_numbî_e
(c,g,n,r)

	)

135 
CONF_moduÀs_lﬂd
(c⁄° 
CONF
 *
˙f
, c⁄° *
≠≤ame
,

136 
Êags
);

137 
CONF_moduÀs_lﬂd_fûe
(c⁄° *
fûíame
, c⁄° *
≠≤ame
,

138 
Êags
);

139 
CONF_moduÀs_u∆ﬂd
(
Æl
);

140 
CONF_moduÀs_föish
();

141 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

142 
	#CONF_moduÀs_‰ì
(Ë0Ë

	)

144 
CONF_moduÀ_add
(c⁄° *
«me
, 
c⁄f_öô_func
 *
ifunc
,

145 
c⁄f_föish_func
 *
ffunc
);

147 c⁄° *
CONF_imoduÀ_gë_«me
(c⁄° 
CONF_IMODULE
 *
md
);

148 c⁄° *
CONF_imoduÀ_gë_vÆue
(c⁄° 
CONF_IMODULE
 *
md
);

149 *
CONF_imoduÀ_gë_u§_d©a
(c⁄° 
CONF_IMODULE
 *
md
);

150 
CONF_imoduÀ_£t_u§_d©a
(
CONF_IMODULE
 *
md
, *
u§_d©a
);

151 
CONF_MODULE
 *
CONF_imoduÀ_gë_moduÀ
(c⁄° 
CONF_IMODULE
 *
md
);

152 
CONF_imoduÀ_gë_Êags
(c⁄° 
CONF_IMODULE
 *
md
);

153 
CONF_imoduÀ_£t_Êags
(
CONF_IMODULE
 *
md
, 
Êags
);

154 *
CONF_moduÀ_gë_u§_d©a
(
CONF_MODULE
 *
pmod
);

155 
CONF_moduÀ_£t_u§_d©a
(
CONF_MODULE
 *
pmod
, *
u§_d©a
);

157 *
CONF_gë1_deÁu…_c⁄fig_fûe
();

159 
CONF_∑r£_li°
(c⁄° *
li°
, 
£p
, 
no•c
,

160 (*
li°_cb
Ë(c⁄° *
ñem
, 
Àn
, *
u§
),

161 *
¨g
);

163 
OPENSSL_lﬂd_buûtö_moduÀs
();

171 
ERR_lﬂd_CONF_°rögs
();

176 
	#CONF_F_CONF_DUMP_FP
 104

	)

177 
	#CONF_F_CONF_LOAD
 100

	)

178 
	#CONF_F_CONF_LOAD_FP
 103

	)

179 
	#CONF_F_CONF_PARSE_LIST
 119

	)

180 
	#CONF_F_DEF_LOAD
 120

	)

181 
	#CONF_F_DEF_LOAD_BIO
 121

	)

182 
	#CONF_F_MODULE_INIT
 115

	)

183 
	#CONF_F_MODULE_LOAD_DSO
 117

	)

184 
	#CONF_F_MODULE_RUN
 118

	)

185 
	#CONF_F_NCONF_DUMP_BIO
 105

	)

186 
	#CONF_F_NCONF_DUMP_FP
 106

	)

187 
	#CONF_F_NCONF_GET_NUMBER_E
 112

	)

188 
	#CONF_F_NCONF_GET_SECTION
 108

	)

189 
	#CONF_F_NCONF_GET_STRING
 109

	)

190 
	#CONF_F_NCONF_LOAD
 113

	)

191 
	#CONF_F_NCONF_LOAD_BIO
 110

	)

192 
	#CONF_F_NCONF_LOAD_FP
 114

	)

193 
	#CONF_F_NCONF_NEW
 111

	)

194 
	#CONF_F_STR_COPY
 101

	)

197 
	#CONF_R_ERROR_LOADING_DSO
 110

	)

198 
	#CONF_R_LIST_CANNOT_BE_NULL
 115

	)

199 
	#CONF_R_MISSING_CLOSE_SQUARE_BRACKET
 100

	)

200 
	#CONF_R_MISSING_EQUAL_SIGN
 101

	)

201 
	#CONF_R_MISSING_INIT_FUNCTION
 112

	)

202 
	#CONF_R_MODULE_INITIALIZATION_ERROR
 109

	)

203 
	#CONF_R_NO_CLOSE_BRACE
 102

	)

204 
	#CONF_R_NO_CONF
 105

	)

205 
	#CONF_R_NO_CONF_OR_ENVIRONMENT_VARIABLE
 106

	)

206 
	#CONF_R_NO_SECTION
 107

	)

207 
	#CONF_R_NO_SUCH_FILE
 114

	)

208 
	#CONF_R_NO_VALUE
 108

	)

209 
	#CONF_R_UNABLE_TO_CREATE_NEW_SECTION
 103

	)

210 
	#CONF_R_UNKNOWN_MODULE_NAME
 113

	)

211 
	#CONF_R_VARIABLE_HAS_NO_VALUE
 104

	)

213 #ifde‡ 
__˝lu•lus


	@conf_api.h

10 #i‚de‡ 
HEADER_CONF_API_H


11 
	#HEADER_CONF_API_H


	)

13 
	~<›ís¶/lhash.h
>

14 
	~<›ís¶/c⁄f.h
>

16 #ifde‡ 
__˝lu•lus


21 
CONF_VALUE
 *
_CONF_√w_£˘i⁄
(
CONF
 *
c⁄f
, c⁄° *
£˘i⁄
);

23 
CONF_VALUE
 *
_CONF_gë_£˘i⁄
(c⁄° 
CONF
 *
c⁄f
, c⁄° *
£˘i⁄
);

25 
STACK_OF
(
CONF_VALUE
Ë*
_CONF_gë_£˘i⁄_vÆues
(c⁄° 
CONF
 *
c⁄f
,

26 c⁄° *
£˘i⁄
);

28 
_CONF_add_°rög
(
CONF
 *
c⁄f
, 
CONF_VALUE
 *
£˘i⁄
, CONF_VALUE *
vÆue
);

29 *
_CONF_gë_°rög
(c⁄° 
CONF
 *
c⁄f
, c⁄° *
£˘i⁄
,

30 c⁄° *
«me
);

31 
_CONF_gë_numbî
(c⁄° 
CONF
 *
c⁄f
, c⁄° *
£˘i⁄
,

32 c⁄° *
«me
);

34 
_CONF_√w_d©a
(
CONF
 *
c⁄f
);

35 
_CONF_‰ì_d©a
(
CONF
 *
c⁄f
);

37 #ifde‡ 
__˝lu•lus


	@crypto.h

16 #i‚de‡
HEADER_CRYPTO_H


17 
	#HEADER_CRYPTO_H


	)

19 
	~<°dlib.h
>

20 
	~<time.h
>

22 
	~<›ís¶/e_os2.h
>

24 #i‚de‡
OPENSSL_NO_STDIO


25 
	~<°dio.h
>

28 
	~<›ís¶/°ack.h
>

29 
	~<›ís¶/ß„°ack.h
>

30 
	~<›ís¶/›ís¶v.h
>

31 
	~<›ís¶/os¶_typ.h
>

32 
	~<›ís¶/›ís¶c⁄f.h
>

34 #ifde‡
CHARSET_EBCDIC


35 
	~<›ís¶/ebcdic.h
>

42 
	~<›ís¶/symhacks.h
>

44 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

45 
	~<›ís¶/›ís¶v.h
>

48 #ifde‡ 
__˝lu•lus


52 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

53 
	#SSLóy
 
O≥nSSL_vîsi⁄_num


	)

54 
	#SSLóy_vîsi⁄
 
O≥nSSL_vîsi⁄


	)

55 
	#SSLEAY_VERSION_NUMBER
 
OPENSSL_VERSION_NUMBER


	)

56 
	#SSLEAY_VERSION
 
OPENSSL_VERSION


	)

57 
	#SSLEAY_CFLAGS
 
OPENSSL_CFLAGS


	)

58 
	#SSLEAY_BUILT_ON
 
OPENSSL_BUILT_ON


	)

59 
	#SSLEAY_PLATFORM
 
OPENSSL_PLATFORM


	)

60 
	#SSLEAY_DIR
 
OPENSSL_DIR


	)

67 
dummy
;

68 } 
	tCRYPTO_dy∆ock
;

72 
	tCRYPTO_RWLOCK
;

74 
CRYPTO_RWLOCK
 *
CRYPTO_THREAD_lock_√w
();

75 
CRYPTO_THREAD_ªad_lock
(
CRYPTO_RWLOCK
 *
lock
);

76 
CRYPTO_THREAD_wrôe_lock
(
CRYPTO_RWLOCK
 *
lock
);

77 
CRYPTO_THREAD_u∆ock
(
CRYPTO_RWLOCK
 *
lock
);

78 
CRYPTO_THREAD_lock_‰ì
(
CRYPTO_RWLOCK
 *
lock
);

80 
CRYPTO_©omic_add
(*
vÆ
, 
amou¡
, *
ªt
, 
CRYPTO_RWLOCK
 *
lock
);

86 
	#CRYPTO_MEM_CHECK_OFF
 0x0

	)

87 
	#CRYPTO_MEM_CHECK_ON
 0x1

	)

88 
	#CRYPTO_MEM_CHECK_ENABLE
 0x2

	)

89 
	#CRYPTO_MEM_CHECK_DISABLE
 0x3

	)

91 
	s¸y±o_ex_d©a_°
 {

92 
STACK_OF
(Ë*
	gsk
;

94 
DEFINE_STACK_OF
()

99 
	#CRYPTO_EX_INDEX_SSL
 0

	)

100 
	#CRYPTO_EX_INDEX_SSL_CTX
 1

	)

101 
	#CRYPTO_EX_INDEX_SSL_SESSION
 2

	)

102 
	#CRYPTO_EX_INDEX_X509
 3

	)

103 
	#CRYPTO_EX_INDEX_X509_STORE
 4

	)

104 
	#CRYPTO_EX_INDEX_X509_STORE_CTX
 5

	)

105 
	#CRYPTO_EX_INDEX_DH
 6

	)

106 
	#CRYPTO_EX_INDEX_DSA
 7

	)

107 
	#CRYPTO_EX_INDEX_EC_KEY
 8

	)

108 
	#CRYPTO_EX_INDEX_RSA
 9

	)

109 
	#CRYPTO_EX_INDEX_ENGINE
 10

	)

110 
	#CRYPTO_EX_INDEX_UI
 11

	)

111 
	#CRYPTO_EX_INDEX_BIO
 12

	)

112 
	#CRYPTO_EX_INDEX_APP
 13

	)

113 
	#CRYPTO_EX_INDEX__COUNT
 14

	)

120 
	#OPENSSL_mÆloc_öô
() \

121 
	`CRYPTO_£t_mem_fun˘i⁄s
(
CRYPTO_mÆloc
, 
CRYPTO_ªÆloc
, 
CRYPTO_‰ì
)

	)

123 
CRYPTO_mem_˘æ
(
mode
);

125 
	#OPENSSL_mÆloc
(
num
) \

126 
	`CRYPTO_mÆloc
(
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

127 
	#OPENSSL_zÆloc
(
num
) \

128 
	`CRYPTO_zÆloc
(
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

129 
	#OPENSSL_ªÆloc
(
addr
, 
num
) \

130 
	`CRYPTO_ªÆloc
(
addr
, 
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

131 
	#OPENSSL_˛ór_ªÆloc
(
addr
, 
ﬁd_num
, 
num
) \

132 
	`CRYPTO_˛ór_ªÆloc
(
addr
, 
ﬁd_num
, 
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

133 
	#OPENSSL_˛ór_‰ì
(
addr
, 
num
) \

134 
	`CRYPTO_˛ór_‰ì
(
addr
, 
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

135 
	#OPENSSL_‰ì
(
addr
) \

136 
	`CRYPTO_‰ì
(
addr
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

137 
	#OPENSSL_memdup
(
°r
, 
s
) \

138 
	`CRYPTO_memdup
((
°r
), 
s
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

139 
	#OPENSSL_°rdup
(
°r
) \

140 
	`CRYPTO_°rdup
(
°r
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

141 
	#OPENSSL_°∫dup
(
°r
, 
n
) \

142 
	`CRYPTO_°∫dup
(
°r
, 
n
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

143 
	#OPENSSL_£cuª_mÆloc
(
num
) \

144 
	`CRYPTO_£cuª_mÆloc
(
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

145 
	#OPENSSL_£cuª_zÆloc
(
num
) \

146 
	`CRYPTO_£cuª_zÆloc
(
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

147 
	#OPENSSL_£cuª_‰ì
(
addr
) \

148 
	`CRYPTO_£cuª_‰ì
(
addr
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

149 
	#OPENSSL_£cuª_a˘uÆ_size
(
±r
) \

150 
	`CRYPTO_£cuª_a˘uÆ_size
(
±r
)

	)

152 
size_t
 
OPENSSL_°æ˝y
(*
d°
, c⁄° *
§c
, size_à
siz
);

153 
size_t
 
OPENSSL_°æˇt
(*
d°
, c⁄° *
§c
, size_à
siz
);

154 
size_t
 
OPENSSL_°∫Àn
(c⁄° *
°r
, size_à
maxÀn
);

155 *
OPENSSL_buf2hex°r
(c⁄° *
buf„r
, 
Àn
);

156 *
OPENSSL_hex°r2buf
(c⁄° *
°r
, *
Àn
);

157 
OPENSSL_hexch¨2öt
(
c
);

159 
	#OPENSSL_MALLOC_MAX_NELEMS
(
ty≥
Ë(((1U<<(()*8-1))-1)/—y≥))

	)

161 
O≥nSSL_vîsi⁄_num
();

162 c⁄° *
O≥nSSL_vîsi⁄
(
ty≥
);

163 
	#OPENSSL_VERSION
 0

	)

164 
	#OPENSSL_CFLAGS
 1

	)

165 
	#OPENSSL_BUILT_ON
 2

	)

166 
	#OPENSSL_PLATFORM
 3

	)

167 
	#OPENSSL_DIR
 4

	)

168 
	#OPENSSL_ENGINES_DIR
 5

	)

170 
OPENSSL_is£tugid
();

172 
	tCRYPTO_EX_√w
 (*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

173 
	tidx
, 
	t¨gl
, *
	t¨gp
);

174 
	tCRYPTO_EX_‰ì
 (*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

175 
	tidx
, 
	t¨gl
, *
	t¨gp
);

176 
	tCRYPTO_EX_dup
 (
	tCRYPTO_EX_DATA
 *
	tto
, CRYPTO_EX_DATA *
	t‰om
,

177 *
	t§˝
, 
	tidx
, 
	t¨gl
, *
	t¨gp
);

178 
__owur
 
CRYPTO_gë_ex_√w_ödex
(
˛ass_ödex
, 
¨gl
, *
¨gp
,

179 
CRYPTO_EX_√w
 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
,

180 
CRYPTO_EX_‰ì
 *
‰ì_func
);

182 
CRYPTO_‰ì_ex_ödex
(
˛ass_ödex
, 
idx
);

188 
CRYPTO_√w_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

189 
CRYPTO_dup_ex_d©a
(
˛ass_ödex
, 
CRYPTO_EX_DATA
 *
to
,

190 
CRYPTO_EX_DATA
 *
‰om
);

192 
CRYPTO_‰ì_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

198 
CRYPTO_£t_ex_d©a
(
CRYPTO_EX_DATA
 *
ad
, 
idx
, *
vÆ
);

199 *
CRYPTO_gë_ex_d©a
(c⁄° 
CRYPTO_EX_DATA
 *
ad
, 
idx
);

201 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

206 
	#CRYPTO_˛ónup_Æl_ex_d©a
(Ë0Ë

	)

218 
	#CRYPTO_num_locks
(Ë(1)

	)

219 
	#CRYPTO_£t_lockög_ˇŒback
(
func
)

	)

220 
	#CRYPTO_gë_lockög_ˇŒback
(Ë(
NULL
)

	)

221 
	#CRYPTO_£t_add_lock_ˇŒback
(
func
)

	)

222 
	#CRYPTO_gë_add_lock_ˇŒback
(Ë(
NULL
)

	)

229 
	#CRYPTO_LOCK
 1

	)

230 
	#CRYPTO_UNLOCK
 2

	)

231 
	#CRYPTO_READ
 4

	)

232 
	#CRYPTO_WRITE
 8

	)

235 
	s¸y±o_thªadid_°
 {

236 
	gdummy
;

237 } 
	tCRYPTO_THREADID
;

239 
	#CRYPTO_THREADID_£t_numîic
(
id
, 
vÆ
)

	)

240 
	#CRYPTO_THREADID_£t_poöãr
(
id
, 
±r
)

	)

241 
	#CRYPTO_THREADID_£t_ˇŒback
(
thªadid_func
Ë(0)

	)

242 
	#CRYPTO_THREADID_gë_ˇŒback
(Ë(
NULL
)

	)

243 
	#CRYPTO_THREADID_cuºít
(
id
)

	)

244 
	#CRYPTO_THREADID_cmp
(
a
, 
b
Ë(-1)

	)

245 
	#CRYPTO_THREADID_˝y
(
de°
, 
§c
)

	)

246 
	#CRYPTO_THREADID_hash
(
id
Ë(0UL)

	)

248 #i‡
OPENSSL_API_COMPAT
 < 0x10000000L

249 
	#CRYPTO_£t_id_ˇŒback
(
func
)

	)

250 
	#CRYPTO_gë_id_ˇŒback
(Ë(
NULL
)

	)

251 
	#CRYPTO_thªad_id
(Ë(0UL)

	)

254 
	#CRYPTO_£t_dy∆ock_¸óã_ˇŒback
(
dyn_¸óã_fun˘i⁄
)

	)

255 
	#CRYPTO_£t_dy∆ock_lock_ˇŒback
(
dyn_lock_fun˘i⁄
)

	)

256 
	#CRYPTO_£t_dy∆ock_de°roy_ˇŒback
(
dyn_de°roy_fun˘i⁄
)

	)

257 
	#CRYPTO_gë_dy∆ock_¸óã_ˇŒback
(Ë(
NULL
)

	)

258 
	#CRYPTO_gë_dy∆ock_lock_ˇŒback
(Ë(
NULL
)

	)

259 
	#CRYPTO_gë_dy∆ock_de°roy_ˇŒback
(Ë(
NULL
)

	)

262 
CRYPTO_£t_mem_fun˘i⁄s
(

263 *(*
m
Ë(
size_t
, const *, ),

264 *(*
r
Ë(*, 
size_t
, const *, ),

265 (*
f
) (*, const *, ));

266 
CRYPTO_£t_mem_debug
(
Êag
);

267 
CRYPTO_gë_mem_fun˘i⁄s
(

268 *(**
m
Ë(
size_t
, const *, ),

269 *(**
r
Ë(*, 
size_t
, const *, ),

270 (**
f
) (*, const *, ));

272 *
CRYPTO_mÆloc
(
size_t
 
num
, c⁄° *
fûe
, 
löe
);

273 *
CRYPTO_zÆloc
(
size_t
 
num
, c⁄° *
fûe
, 
löe
);

274 *
CRYPTO_memdup
(c⁄° *
°r
, 
size_t
 
siz
, c⁄° *
fûe
, 
löe
);

275 *
CRYPTO_°rdup
(c⁄° *
°r
, c⁄° *
fûe
, 
löe
);

276 *
CRYPTO_°∫dup
(c⁄° *
°r
, 
size_t
 
s
, c⁄° *
fûe
, 
löe
);

277 
CRYPTO_‰ì
(*
±r
, c⁄° *
fûe
, 
löe
);

278 
CRYPTO_˛ór_‰ì
(*
±r
, 
size_t
 
num
, c⁄° *
fûe
, 
löe
);

279 *
CRYPTO_ªÆloc
(*
addr
, 
size_t
 
num
, c⁄° *
fûe
, 
löe
);

280 *
CRYPTO_˛ór_ªÆloc
(*
addr
, 
size_t
 
ﬁd_num
, size_à
num
,

281 c⁄° *
fûe
, 
löe
);

283 
CRYPTO_£cuª_mÆloc_öô
(
size_t
 
sz
, 
mösize
);

284 
CRYPTO_£cuª_mÆloc_d⁄e
();

285 *
CRYPTO_£cuª_mÆloc
(
size_t
 
num
, c⁄° *
fûe
, 
löe
);

286 *
CRYPTO_£cuª_zÆloc
(
size_t
 
num
, c⁄° *
fûe
, 
löe
);

287 
CRYPTO_£cuª_‰ì
(*
±r
, c⁄° *
fûe
, 
löe
);

288 
CRYPTO_£cuª_Æloˇãd
(c⁄° *
±r
);

289 
CRYPTO_£cuª_mÆloc_öôülized
();

290 
size_t
 
CRYPTO_£cuª_a˘uÆ_size
(*
±r
);

291 
size_t
 
CRYPTO_£cuª_u£d
();

293 
OPENSSL_˛ón£
(*
±r
, 
size_t
 
Àn
);

295 #i‚de‡
OPENSSL_NO_CRYPTO_MDEBUG


296 
	#OPENSSL_mem_debug_push
(
öfo
) \

297 
	`CRYPTO_mem_debug_push
(
öfo
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

298 
	#OPENSSL_mem_debug_p›
() \

299 
	`CRYPTO_mem_debug_p›
()

	)

300 
CRYPTO_mem_debug_push
(c⁄° *
öfo
, c⁄° *
fûe
, 
löe
);

301 
CRYPTO_mem_debug_p›
();

309 
CRYPTO_mem_debug_mÆloc
(*
addr
, 
size_t
 
num
, 
Êag
,

310 c⁄° *
fûe
, 
löe
);

311 
CRYPTO_mem_debug_ªÆloc
(*
addr1
, *
addr2
, 
size_t
 
num
, 
Êag
,

312 c⁄° *
fûe
, 
löe
);

313 
CRYPTO_mem_debug_‰ì
(*
addr
, 
Êag
,

314 c⁄° *
fûe
, 
löe
);

316 #i‚de‡
OPENSSL_NO_STDIO


317 
CRYPTO_mem_Àaks_Â
(
FILE
 *);

319 
CRYPTO_mem_Àaks
(
BIO
 *
bio
);

323 
os¶_n‹ëu∫
 
OPENSSL_dõ
(c⁄° *
as£πi⁄
, c⁄° *
fûe
, 
löe
);

324 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

325 
	#O≥nSSLDõ
(
f
,
l
,
a
Ë
	`OPENSSL_dõ
(◊),(f),÷))

	)

327 
	#OPENSSL_as£π
(
e
) \

328 ()((
e
Ë? 0 : (
	`OPENSSL_dõ
("as£πi⁄ faûed: " #e, 
OPENSSL_FILE
, 
OPENSSL_LINE
), 1))

	)

330 
OPENSSL_is£rvi˚
();

332 
FIPS_mode
();

333 
FIPS_mode_£t
(
r
);

335 
OPENSSL_öô
();

337 
tm
 *
OPENSSL_gmtime
(c⁄° 
time_t
 *
timî
, tm *
ªsu…
);

338 
OPENSSL_gmtime_adj
(
tm
 *tm, 
off£t_day
, 
off£t_£c
);

339 
OPENSSL_gmtime_diff
(*
pday
, *
p£c
,

340 c⁄° 
tm
 *
‰om
, c⁄° tm *
to
);

349 
CRYPTO_memcmp
(c⁄° vﬁ©ûê* vﬁ©ûê
ö_a
,

350 c⁄° vﬁ©ûê* vﬁ©ûê
ö_b
,

351 
size_t
 
Àn
);

354 
	#OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS
 0x00000001L

	)

355 
	#OPENSSL_INIT_LOAD_CRYPTO_STRINGS
 0x00000002L

	)

356 
	#OPENSSL_INIT_ADD_ALL_CIPHERS
 0x00000004L

	)

357 
	#OPENSSL_INIT_ADD_ALL_DIGESTS
 0x00000008L

	)

358 
	#OPENSSL_INIT_NO_ADD_ALL_CIPHERS
 0x00000010L

	)

359 
	#OPENSSL_INIT_NO_ADD_ALL_DIGESTS
 0x00000020L

	)

360 
	#OPENSSL_INIT_LOAD_CONFIG
 0x00000040L

	)

361 
	#OPENSSL_INIT_NO_LOAD_CONFIG
 0x00000080L

	)

362 
	#OPENSSL_INIT_ASYNC
 0x00000100L

	)

363 
	#OPENSSL_INIT_ENGINE_RDRAND
 0x00000200L

	)

364 
	#OPENSSL_INIT_ENGINE_DYNAMIC
 0x00000400L

	)

365 
	#OPENSSL_INIT_ENGINE_OPENSSL
 0x00000800L

	)

366 
	#OPENSSL_INIT_ENGINE_CRYPTODEV
 0x00001000L

	)

367 
	#OPENSSL_INIT_ENGINE_CAPI
 0x00002000L

	)

368 
	#OPENSSL_INIT_ENGINE_PADLOCK
 0x00004000L

	)

369 
	#OPENSSL_INIT_ENGINE_DASYNC
 0x00008000L

	)

371 
	#OPENSSL_INIT_ENGINE_AFALG
 0x00020000L

	)

376 
	#OPENSSL_INIT_ENGINE_ALL_BUILTIN
 \

377 (
OPENSSL_INIT_ENGINE_RDRAND
 | 
OPENSSL_INIT_ENGINE_DYNAMIC
 \

378 | 
OPENSSL_INIT_ENGINE_CRYPTODEV
 | 
OPENSSL_INIT_ENGINE_CAPI
 | \

379 
OPENSSL_INIT_ENGINE_PADLOCK
)

	)

383 
OPENSSL_˛ónup
();

384 
OPENSSL_öô_¸y±o
(
uöt64_t
 
›ts
, c⁄° 
OPENSSL_INIT_SETTINGS
 *
£âögs
);

385 
OPENSSL_©exô
((*
h™dÀr
)());

386 
OPENSSL_thªad_°›
();

389 
OPENSSL_INIT_SETTINGS
 *
OPENSSL_INIT_√w
();

390 #i‚de‡
OPENSSL_NO_STDIO


391 
OPENSSL_INIT_£t_c⁄fig_≠≤ame
(
OPENSSL_INIT_SETTINGS
 *
£âögs
,

392 c⁄° *
c⁄fig_fûe
);

394 
OPENSSL_INIT_‰ì
(
OPENSSL_INIT_SETTINGS
 *
£âögs
);

396 #i‡
deföed
(
OPENSSL_THREADS
Ë&& !deföed(
CRYPTO_TDEBUG
)

397 #i‡
deföed
(
_WIN32
)

398 #i‡
deföed
(
BASETYPES
Ë|| deföed(
_WINDEF_H
)

400 
DWORD
 
	tCRYPTO_THREAD_LOCAL
;

401 
DWORD
 
	tCRYPTO_THREAD_ID
;

403 
LONG
 
	tCRYPTO_ONCE
;

404 
	#CRYPTO_ONCE_STATIC_INIT
 0

	)

407 
	~<±hªad.h
>

408 
±hªad_⁄˚_t
 
	tCRYPTO_ONCE
;

409 
±hªad_key_t
 
	tCRYPTO_THREAD_LOCAL
;

410 
±hªad_t
 
	tCRYPTO_THREAD_ID
;

412 
	#CRYPTO_ONCE_STATIC_INIT
 
PTHREAD_ONCE_INIT


	)

416 #i‡!
deföed
(
CRYPTO_ONCE_STATIC_INIT
)

417 
	tCRYPTO_ONCE
;

418 
	tCRYPTO_THREAD_LOCAL
;

419 
	tCRYPTO_THREAD_ID
;

420 
	#CRYPTO_ONCE_STATIC_INIT
 0

	)

423 
CRYPTO_THREAD_run_⁄˚
(
CRYPTO_ONCE
 *
⁄˚
, (*
öô
)());

425 
CRYPTO_THREAD_öô_loˇl
(
CRYPTO_THREAD_LOCAL
 *
key
, (*
˛ónup
)(*));

426 *
CRYPTO_THREAD_gë_loˇl
(
CRYPTO_THREAD_LOCAL
 *
key
);

427 
CRYPTO_THREAD_£t_loˇl
(
CRYPTO_THREAD_LOCAL
 *
key
, *
vÆ
);

428 
CRYPTO_THREAD_˛ónup_loˇl
(
CRYPTO_THREAD_LOCAL
 *
key
);

430 
CRYPTO_THREAD_ID
 
CRYPTO_THREAD_gë_cuºít_id
();

431 
CRYPTO_THREAD_com∑ª_id
(
CRYPTO_THREAD_ID
 
a
, CRYPTO_THREAD_ID 
b
);

439 
ERR_lﬂd_CRYPTO_°rögs
();

444 
	#CRYPTO_F_CRYPTO_DUP_EX_DATA
 110

	)

445 
	#CRYPTO_F_CRYPTO_FREE_EX_DATA
 111

	)

446 
	#CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX
 100

	)

447 
	#CRYPTO_F_CRYPTO_MEMDUP
 115

	)

448 
	#CRYPTO_F_CRYPTO_NEW_EX_DATA
 112

	)

449 
	#CRYPTO_F_CRYPTO_SET_EX_DATA
 102

	)

450 
	#CRYPTO_F_FIPS_MODE_SET
 109

	)

451 
	#CRYPTO_F_GET_AND_LOCK
 113

	)

452 
	#CRYPTO_F_OPENSSL_BUF2HEXSTR
 117

	)

453 
	#CRYPTO_F_OPENSSL_HEXSTR2BUF
 118

	)

454 
	#CRYPTO_F_OPENSSL_INIT_CRYPTO
 116

	)

457 
	#CRYPTO_R_FIPS_MODE_NOT_SUPPORTED
 101

	)

458 
	#CRYPTO_R_ILLEGAL_HEX_DIGIT
 102

	)

459 
	#CRYPTO_R_ODD_NUMBER_OF_DIGITS
 103

	)

461 #ifde‡ 
__˝lu•lus


	@ct.h

10 #i‚de‡
HEADER_CT_H


11 
	#HEADER_CT_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #i‚de‡
OPENSSL_NO_CT


16 
	~<›ís¶/os¶_typ.h
>

17 
	~<›ís¶/ß„°ack.h
>

18 
	~<›ís¶/x509.h
>

19 #ifde‡ 
__˝lu•lus


25 
	#SCT_MIN_RSA_BITS
 2048

	)

28 
	#CT_V1_HASHLEN
 
SHA256_DIGEST_LENGTH


	)

31 
CT_LOG_ENTRY_TYPE_NOT_SET
 = -1,

32 
CT_LOG_ENTRY_TYPE_X509
 = 0,

33 
CT_LOG_ENTRY_TYPE_PRECERT
 = 1

34 } 
	t˘_log_íåy_ty≥_t
;

37 
SCT_VERSION_NOT_SET
 = -1,

38 
SCT_VERSION_V1
 = 0

39 } 
	ts˘_vîsi⁄_t
;

42 
SCT_SOURCE_UNKNOWN
,

43 
SCT_SOURCE_TLS_EXTENSION
,

44 
SCT_SOURCE_X509V3_EXTENSION
,

45 
SCT_SOURCE_OCSP_STAPLED_RESPONSE


46 } 
	ts˘_sour˚_t
;

49 
SCT_VALIDATION_STATUS_NOT_SET
,

50 
SCT_VALIDATION_STATUS_UNKNOWN_LOG
,

51 
SCT_VALIDATION_STATUS_VALID
,

52 
SCT_VALIDATION_STATUS_INVALID
,

53 
SCT_VALIDATION_STATUS_UNVERIFIED
,

54 
SCT_VALIDATION_STATUS_UNKNOWN_VERSION


55 } 
	ts˘_vÆid©i⁄_°©us_t
;

57 
DEFINE_STACK_OF
(
SCT
)

58 
DEFINE_STACK_OF
(
CTLOG
)

65 
CT_POLICY_EVAL_CTX
 *
CT_POLICY_EVAL_CTX_√w
();

68 
CT_POLICY_EVAL_CTX_‰ì
(
CT_POLICY_EVAL_CTX
 *
˘x
);

71 
X509
* 
CT_POLICY_EVAL_CTX_gë0_˚π
(c⁄° 
CT_POLICY_EVAL_CTX
 *
˘x
);

74 
CT_POLICY_EVAL_CTX_£t0_˚π
(
CT_POLICY_EVAL_CTX
 *
˘x
, 
X509
 *
˚π
);

77 
X509
* 
CT_POLICY_EVAL_CTX_gë0_issuî
(c⁄° 
CT_POLICY_EVAL_CTX
 *
˘x
);

80 
CT_POLICY_EVAL_CTX_£t0_issuî
(
CT_POLICY_EVAL_CTX
 *
˘x
, 
X509
 *
issuî
);

83 c⁄° 
CTLOG_STORE
 *
CT_POLICY_EVAL_CTX_gë0_log_°‹e
(c⁄° 
CT_POLICY_EVAL_CTX
 *
˘x
);

86 
CT_POLICY_EVAL_CTX_£t0_log_°‹e
(
CT_POLICY_EVAL_CTX
 *
˘x
,

87 
CTLOG_STORE
 *
log_°‹e
);

97 
SCT
 *
SCT_√w
();

103 
SCT
 *
SCT_√w_‰om_ba£64
(
vîsi⁄
,

104 c⁄° *
logid_ba£64
,

105 
˘_log_íåy_ty≥_t
 
íåy_ty≥
,

106 
uöt64_t
 
time°amp
,

107 c⁄° *
exãnsi⁄s_ba£64
,

108 c⁄° *
sig«tuª_ba£64
);

113 
SCT_‰ì
(
SCT
 *
s˘
);

119 
SCT_LIST_‰ì
(
STACK_OF
(
SCT
Ë*
a
);

124 
s˘_vîsi⁄_t
 
SCT_gë_vîsi⁄
(c⁄° 
SCT
 *
s˘
);

130 
__owur
 
SCT_£t_vîsi⁄
(
SCT
 *
s˘
, 
s˘_vîsi⁄_t
 
vîsi⁄
);

135 
˘_log_íåy_ty≥_t
 
SCT_gë_log_íåy_ty≥
(c⁄° 
SCT
 *
s˘
);

141 
__owur
 
SCT_£t_log_íåy_ty≥
(
SCT
 *
s˘
, 
˘_log_íåy_ty≥_t
 
íåy_ty≥
);

148 
size_t
 
SCT_gë0_log_id
(c⁄° 
SCT
 *
s˘
, **
log_id
);

155 
__owur
 
SCT_£t0_log_id
(
SCT
 *
s˘
, *
log_id
, 
size_t
 
log_id_Àn
);

162 
__owur
 
SCT_£t1_log_id
(
SCT
 *
s˘
, c⁄° *
log_id
,

163 
size_t
 
log_id_Àn
);

168 
uöt64_t
 
SCT_gë_time°amp
(c⁄° 
SCT
 *
s˘
);

173 
SCT_£t_time°amp
(
SCT
 *
s˘
, 
uöt64_t
 
time°amp
);

180 
SCT_gë_sig«tuª_nid
(c⁄° 
SCT
 *
s˘
);

188 
__owur
 
SCT_£t_sig«tuª_nid
(
SCT
 *
s˘
, 
nid
);

195 
size_t
 
SCT_gë0_exãnsi⁄s
(c⁄° 
SCT
 *
s˘
, **
ext
);

201 
SCT_£t0_exãnsi⁄s
(
SCT
 *
s˘
, *
ext
, 
size_t
 
ext_Àn
);

208 
__owur
 
SCT_£t1_exãnsi⁄s
(
SCT
 *
s˘
, c⁄° *
ext
,

209 
size_t
 
ext_Àn
);

216 
size_t
 
SCT_gë0_sig«tuª
(c⁄° 
SCT
 *
s˘
, **
sig
);

222 
SCT_£t0_sig«tuª
(
SCT
 *
s˘
, *
sig
, 
size_t
 
sig_Àn
);

228 
__owur
 
SCT_£t1_sig«tuª
(
SCT
 *
s˘
, c⁄° *
sig
,

229 
size_t
 
sig_Àn
);

234 
s˘_sour˚_t
 
SCT_gë_sour˚
(c⁄° 
SCT
 *
s˘
);

240 
__owur
 
SCT_£t_sour˚
(
SCT
 *
s˘
, 
s˘_sour˚_t
 
sour˚
);

245 c⁄° *
SCT_vÆid©i⁄_°©us_°rög
(c⁄° 
SCT
 *
s˘
);

253 
SCT_¥öt
(c⁄° 
SCT
 *
s˘
, 
BIO
 *
out
, 
ödít
, c⁄° 
CTLOG_STORE
 *
logs
);

262 
SCT_LIST_¥öt
(c⁄° 
STACK_OF
(
SCT
Ë*
s˘_li°
, 
BIO
 *
out
, 
ödít
,

263 c⁄° *
£∑øt‹
, c⁄° 
CTLOG_STORE
 *
logs
);

269 
__owur
 
SCT_vîify
(c⁄° 
SCT_CTX
 *
s˘x
, c⁄° 
SCT
 *
s˘
);

275 
__owur
 
SCT_vîify_v1
(
SCT
 *
s˘
, 
X509
 *
˚π
, X509 *
¥eissuî
,

276 
X509_PUBKEY
 *
log_pubkey
, 
X509
 *
issuî_˚π
);

282 
s˘_vÆid©i⁄_°©us_t
 
SCT_gë_vÆid©i⁄_°©us
(c⁄° 
SCT
 *
s˘
);

291 
__owur
 
SCT_vÆid©e
(
SCT
 *
s˘
, c⁄° 
CT_POLICY_EVAL_CTX
 *
˘x
);

300 
__owur
 
SCT_LIST_vÆid©e
(c⁄° 
STACK_OF
(
SCT
Ë*
s˘s
,

301 
CT_POLICY_EVAL_CTX
 *
˘x
);

320 
__owur
 
i2o_SCT_LIST
(c⁄° 
STACK_OF
(
SCT
Ë*
a
, **
µ
);

332 
STACK_OF
(
SCT
Ë*
o2i_SCT_LIST
(STACK_OF(SCTË**
a
, c⁄° **
µ
,

333 
size_t
 
Àn
);

347 
__owur
 
i2d_SCT_LIST
(c⁄° 
STACK_OF
(
SCT
Ë*
a
, **
µ
);

359 
STACK_OF
(
SCT
Ë*
d2i_SCT_LIST
(STACK_OF(SCTË**
a
, c⁄° **
µ
,

360 
Àn
);

371 
__owur
 
i2o_SCT
(c⁄° 
SCT
 *
s˘
, **
out
);

384 
SCT
 *
o2i_SCT
(SCT **
ps˘
, c⁄° **
ö
, 
size_t
 
Àn
);

394 
__owur
 
i2o_SCT_sig«tuª
(c⁄° 
SCT
 *
s˘
, **
out
);

403 
__owur
 
o2i_SCT_sig«tuª
(
SCT
 *
s˘
, c⁄° **
ö
, 
size_t
 
Àn
);

413 
CTLOG
 *
CTLOG_√w
(
EVP_PKEY
 *
public_key
, c⁄° *
«me
);

419 
CTLOG
 *
CTLOG_√w_nuŒ
();

425 
CTLOG_√w_‰om_ba£64
(
CTLOG
 ** 
˘_log
,

426 c⁄° *
pkey_ba£64
, c⁄° *
«me
);

431 
CTLOG_‰ì
(
CTLOG
 *
log
);

434 c⁄° *
CTLOG_gë0_«me
(c⁄° 
CTLOG
 *
log
);

436 
CTLOG_gë0_log_id
(c⁄° 
CTLOG
 *
log
, c⁄° 
uöt8_t
 **
log_id
,

437 
size_t
 *
log_id_Àn
);

439 
EVP_PKEY
 *
CTLOG_gë0_public_key
(c⁄° 
CTLOG
 *
log
);

449 
CTLOG_STORE
 *
CTLOG_STORE_√w
();

454 
CTLOG_STORE_‰ì
(
CTLOG_STORE
 *
°‹e
);

460 c⁄° 
CTLOG
 *
CTLOG_STORE_gë0_log_by_id
(c⁄° 
CTLOG_STORE
 *
°‹e
,

461 c⁄° 
uöt8_t
 *
log_id
,

462 
size_t
 
log_id_Àn
);

468 
__owur
 
CTLOG_STORE_lﬂd_fûe
(
CTLOG_STORE
 *
°‹e
, c⁄° *
fûe
);

476 
__owur
 
CTLOG_STORE_lﬂd_deÁu…_fûe
(
CTLOG_STORE
 *
°‹e
);

484 
ERR_lﬂd_CT_°rögs
();

489 
	#CT_F_CTLOG_NEW
 117

	)

490 
	#CT_F_CTLOG_NEW_FROM_BASE64
 118

	)

491 
	#CT_F_CTLOG_NEW_FROM_CONF
 119

	)

492 
	#CT_F_CTLOG_NEW_NULL
 120

	)

493 
	#CT_F_CTLOG_STORE_LOAD_CTX_NEW
 122

	)

494 
	#CT_F_CTLOG_STORE_LOAD_FILE
 123

	)

495 
	#CT_F_CTLOG_STORE_LOAD_LOG
 130

	)

496 
	#CT_F_CTLOG_STORE_NEW
 131

	)

497 
	#CT_F_CT_BASE64_DECODE
 124

	)

498 
	#CT_F_CT_POLICY_EVAL_CTX_NEW
 133

	)

499 
	#CT_F_CT_V1_LOG_ID_FROM_PKEY
 125

	)

500 
	#CT_F_I2O_SCT
 107

	)

501 
	#CT_F_I2O_SCT_LIST
 108

	)

502 
	#CT_F_I2O_SCT_SIGNATURE
 109

	)

503 
	#CT_F_O2I_SCT
 110

	)

504 
	#CT_F_O2I_SCT_LIST
 111

	)

505 
	#CT_F_O2I_SCT_SIGNATURE
 112

	)

506 
	#CT_F_SCT_CTX_NEW
 126

	)

507 
	#CT_F_SCT_NEW
 100

	)

508 
	#CT_F_SCT_NEW_FROM_BASE64
 127

	)

509 
	#CT_F_SCT_SET0_LOG_ID
 101

	)

510 
	#CT_F_SCT_SET1_EXTENSIONS
 114

	)

511 
	#CT_F_SCT_SET1_LOG_ID
 115

	)

512 
	#CT_F_SCT_SET1_SIGNATURE
 116

	)

513 
	#CT_F_SCT_SET_LOG_ENTRY_TYPE
 102

	)

514 
	#CT_F_SCT_SET_SIGNATURE_NID
 103

	)

515 
	#CT_F_SCT_SET_VERSION
 104

	)

516 
	#CT_F_SCT_VERIFY
 128

	)

517 
	#CT_F_SCT_VERIFY_V1
 129

	)

520 
	#CT_R_BASE64_DECODE_ERROR
 108

	)

521 
	#CT_R_INVALID_LOG_ID_LENGTH
 100

	)

522 
	#CT_R_LOG_CONF_INVALID
 109

	)

523 
	#CT_R_LOG_CONF_INVALID_KEY
 110

	)

524 
	#CT_R_LOG_CONF_MISSING_DESCRIPTION
 111

	)

525 
	#CT_R_LOG_CONF_MISSING_KEY
 112

	)

526 
	#CT_R_LOG_KEY_INVALID
 113

	)

527 
	#CT_R_SCT_INVALID
 104

	)

528 
	#CT_R_SCT_INVALID_SIGNATURE
 107

	)

529 
	#CT_R_SCT_LIST_INVALID
 105

	)

530 
	#CT_R_SCT_LOG_ID_MISMATCH
 114

	)

531 
	#CT_R_SCT_NOT_SET
 106

	)

532 
	#CT_R_SCT_UNSUPPORTED_VERSION
 115

	)

533 
	#CT_R_UNRECOGNIZED_SIGNATURE_NID
 101

	)

534 
	#CT_R_UNSUPPORTED_ENTRY_TYPE
 102

	)

535 
	#CT_R_UNSUPPORTED_VERSION
 103

	)

537 #ifde‡ 
__˝lu•lus


	@des.h

10 #i‚de‡
HEADER_DES_H


11 
	#HEADER_DES_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #i‚de‡
OPENSSL_NO_DES


16 #ifde‡ 
__˝lu•lus


19 
	~<›ís¶/e_os2.h
>

21 
	tDES_LONG
;

23 #ifde‡
OPENSSL_BUILD_SHLIBCRYPTO


24 #unde‡
OPENSSL_EXTERN


25 
	#OPENSSL_EXTERN
 
OPENSSL_EXPORT


	)

28 
	tDES_cblock
[8];

29 
	tc⁄°_DES_cblock
[8];

35 
	sDES_ks
 {

37 
DES_cblock
 
cblock
;

41 
DES_LONG
 
de¶⁄g
[2];

42 } 
ks
[16];

43 } 
	tDES_key_scheduÀ
;

45 
	#DES_KEY_SZ
 ((
DES_cblock
))

	)

46 
	#DES_SCHEDULE_SZ
 ((
DES_key_scheduÀ
))

	)

48 
	#DES_ENCRYPT
 1

	)

49 
	#DES_DECRYPT
 0

	)

51 
	#DES_CBC_MODE
 0

	)

52 
	#DES_PCBC_MODE
 1

	)

54 
	#DES_ecb2_í¸y±
(
i
,
o
,
k1
,
k2
,
e
) \

55 
	`DES_ecb3_í¸y±
((
i
),(
o
),(
k1
),(
k2
),(k1),(
e
))

	)

57 
	#DES_ede2_cbc_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
e
) \

58 
	`DES_ede3_cbc_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
e
))

	)

60 
	#DES_ede2_cfb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
n
,
e
) \

61 
	`DES_ede3_cfb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
n
),(
e
))

	)

63 
	#DES_ede2_ofb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
n
) \

64 
	`DES_ede3_ofb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
n
))

	)

66 
OPENSSL_DECLARE_GLOBAL
(, 
DES_check_key
);

67 
	#DES_check_key
 
	`OPENSSL_GLOBAL_REF
(
DES_check_key
)

	)

69 c⁄° *
DES_›ti⁄s
();

70 
DES_ecb3_í¸y±
(
c⁄°_DES_cblock
 *
öput
, 
DES_cblock
 *
ouçut
,

71 
DES_key_scheduÀ
 *
ks1
, DES_key_scheduÀ *
ks2
,

72 
DES_key_scheduÀ
 *
ks3
, 
íc
);

73 
DES_LONG
 
DES_cbc_cksum
(c⁄° *
öput
, 
DES_cblock
 *
ouçut
,

74 
Àngth
, 
DES_key_scheduÀ
 *
scheduÀ
,

75 
c⁄°_DES_cblock
 *
ivec
);

77 
DES_cbc_í¸y±
(c⁄° *
öput
, *
ouçut
,

78 
Àngth
, 
DES_key_scheduÀ
 *
scheduÀ
,

79 
DES_cblock
 *
ivec
, 
íc
);

80 
DES_ncbc_í¸y±
(c⁄° *
öput
, *
ouçut
,

81 
Àngth
, 
DES_key_scheduÀ
 *
scheduÀ
,

82 
DES_cblock
 *
ivec
, 
íc
);

83 
DES_xcbc_í¸y±
(c⁄° *
öput
, *
ouçut
,

84 
Àngth
, 
DES_key_scheduÀ
 *
scheduÀ
,

85 
DES_cblock
 *
ivec
, 
c⁄°_DES_cblock
 *
öw
,

86 
c⁄°_DES_cblock
 *
outw
, 
íc
);

87 
DES_cfb_í¸y±
(c⁄° *
ö
, *
out
, 
numbôs
,

88 
Àngth
, 
DES_key_scheduÀ
 *
scheduÀ
,

89 
DES_cblock
 *
ivec
, 
íc
);

90 
DES_ecb_í¸y±
(
c⁄°_DES_cblock
 *
öput
, 
DES_cblock
 *
ouçut
,

91 
DES_key_scheduÀ
 *
ks
, 
íc
);

103 
DES_í¸y±1
(
DES_LONG
 *
d©a
, 
DES_key_scheduÀ
 *
ks
, 
íc
);

113 
DES_í¸y±2
(
DES_LONG
 *
d©a
, 
DES_key_scheduÀ
 *
ks
, 
íc
);

115 
DES_í¸y±3
(
DES_LONG
 *
d©a
, 
DES_key_scheduÀ
 *
ks1
,

116 
DES_key_scheduÀ
 *
ks2
, DES_key_scheduÀ *
ks3
);

117 
DES_de¸y±3
(
DES_LONG
 *
d©a
, 
DES_key_scheduÀ
 *
ks1
,

118 
DES_key_scheduÀ
 *
ks2
, DES_key_scheduÀ *
ks3
);

119 
DES_ede3_cbc_í¸y±
(c⁄° *
öput
, *
ouçut
,

120 
Àngth
,

121 
DES_key_scheduÀ
 *
ks1
, DES_key_scheduÀ *
ks2
,

122 
DES_key_scheduÀ
 *
ks3
, 
DES_cblock
 *
ivec
, 
íc
);

123 
DES_ede3_cfb64_í¸y±
(c⁄° *
ö
, *
out
,

124 
Àngth
, 
DES_key_scheduÀ
 *
ks1
,

125 
DES_key_scheduÀ
 *
ks2
, DES_key_scheduÀ *
ks3
,

126 
DES_cblock
 *
ivec
, *
num
, 
íc
);

127 
DES_ede3_cfb_í¸y±
(c⁄° *
ö
, *
out
,

128 
numbôs
, 
Àngth
, 
DES_key_scheduÀ
 *
ks1
,

129 
DES_key_scheduÀ
 *
ks2
, DES_key_scheduÀ *
ks3
,

130 
DES_cblock
 *
ivec
, 
íc
);

131 
DES_ede3_ofb64_í¸y±
(c⁄° *
ö
, *
out
,

132 
Àngth
, 
DES_key_scheduÀ
 *
ks1
,

133 
DES_key_scheduÀ
 *
ks2
, DES_key_scheduÀ *
ks3
,

134 
DES_cblock
 *
ivec
, *
num
);

135 *
DES_f¸y±
(c⁄° *
buf
, c⁄° *
ß…
, *
ªt
);

136 *
DES_¸y±
(c⁄° *
buf
, c⁄° *
ß…
);

137 
DES_ofb_í¸y±
(c⁄° *
ö
, *
out
, 
numbôs
,

138 
Àngth
, 
DES_key_scheduÀ
 *
scheduÀ
,

139 
DES_cblock
 *
ivec
);

140 
DES_pcbc_í¸y±
(c⁄° *
öput
, *
ouçut
,

141 
Àngth
, 
DES_key_scheduÀ
 *
scheduÀ
,

142 
DES_cblock
 *
ivec
, 
íc
);

143 
DES_LONG
 
DES_quad_cksum
(c⁄° *
öput
, 
DES_cblock
 
ouçut
[],

144 
Àngth
, 
out_cou¡
, 
DES_cblock
 *
£ed
);

145 
DES_øndom_key
(
DES_cblock
 *
ªt
);

146 
DES_£t_odd_∑rôy
(
DES_cblock
 *
key
);

147 
DES_check_key_∑rôy
(
c⁄°_DES_cblock
 *
key
);

148 
DES_is_wók_key
(
c⁄°_DES_cblock
 *
key
);

154 
DES_£t_key
(
c⁄°_DES_cblock
 *
key
, 
DES_key_scheduÀ
 *
scheduÀ
);

155 
DES_key_sched
(
c⁄°_DES_cblock
 *
key
, 
DES_key_scheduÀ
 *
scheduÀ
);

156 
DES_£t_key_checked
(
c⁄°_DES_cblock
 *
key
, 
DES_key_scheduÀ
 *
scheduÀ
);

157 
DES_£t_key_unchecked
(
c⁄°_DES_cblock
 *
key
, 
DES_key_scheduÀ
 *
scheduÀ
);

158 
DES_°rög_to_key
(c⁄° *
°r
, 
DES_cblock
 *
key
);

159 
DES_°rög_to_2keys
(c⁄° *
°r
, 
DES_cblock
 *
key1
, DES_cblock *
key2
);

160 
DES_cfb64_í¸y±
(c⁄° *
ö
, *
out
,

161 
Àngth
, 
DES_key_scheduÀ
 *
scheduÀ
,

162 
DES_cblock
 *
ivec
, *
num
, 
íc
);

163 
DES_ofb64_í¸y±
(c⁄° *
ö
, *
out
,

164 
Àngth
, 
DES_key_scheduÀ
 *
scheduÀ
,

165 
DES_cblock
 *
ivec
, *
num
);

167 
	#DES_fixup_key_∑rôy
 
DES_£t_odd_∑rôy


	)

169 #ifde‡ 
__˝lu•lus


	@dh.h

10 #i‚de‡
HEADER_DH_H


11 
	#HEADER_DH_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #i‚de‡
OPENSSL_NO_DH


16 
	~<›ís¶/e_os2.h
>

17 
	~<›ís¶/bio.h
>

18 
	~<›ís¶/a¢1.h
>

19 
	~<›ís¶/os¶_typ.h
>

20 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

21 
	~<›ís¶/bn.h
>

24 #ifde‡ 
__˝lu•lus


28 #i‚de‡
OPENSSL_DH_MAX_MODULUS_BITS


29 
	#OPENSSL_DH_MAX_MODULUS_BITS
 10000

	)

32 
	#OPENSSL_DH_FIPS_MIN_MODULUS_BITS
 1024

	)

34 
	#DH_FLAG_CACHE_MONT_P
 0x01

	)

36 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

40 
	#DH_FLAG_NO_EXP_CONSTTIME
 0x00

	)

50 
	#DH_FLAG_FIPS_METHOD
 0x0400

	)

58 
	#DH_FLAG_NON_FIPS_ALLOW
 0x0400

	)

64 
DECLARE_ASN1_ITEM
(
DH∑øms
)

66 
	#DH_GENERATOR_2
 2

	)

68 
	#DH_GENERATOR_5
 5

	)

71 
	#DH_CHECK_P_NOT_PRIME
 0x01

	)

72 
	#DH_CHECK_P_NOT_SAFE_PRIME
 0x02

	)

73 
	#DH_UNABLE_TO_CHECK_GENERATOR
 0x04

	)

74 
	#DH_NOT_SUITABLE_GENERATOR
 0x08

	)

75 
	#DH_CHECK_Q_NOT_PRIME
 0x10

	)

76 
	#DH_CHECK_INVALID_Q_VALUE
 0x20

	)

77 
	#DH_CHECK_INVALID_J_VALUE
 0x40

	)

80 
	#DH_CHECK_PUBKEY_TOO_SMALL
 0x01

	)

81 
	#DH_CHECK_PUBKEY_TOO_LARGE
 0x02

	)

82 
	#DH_CHECK_PUBKEY_INVALID
 0x04

	)

88 
	#DH_CHECK_P_NOT_STRONG_PRIME
 
DH_CHECK_P_NOT_SAFE_PRIME


	)

90 
	#d2i_DH∑øms_Â
(
Â
,
x
Ë(
DH
 *)
	`ASN1_d2i_Â
((*(*)())
DH_√w
, \

91 (*(*)())
d2i_DH∑øms
,(
Â
),(**)(
x
))

	)

92 
	#i2d_DH∑øms_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_DH∑øms
,(fp), \

93 (*)(
x
))

	)

94 
	#d2i_DH∑øms_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
DH
,
DH_√w
,
d2i_DH∑øms
,bp,x)

	)

95 
	#i2d_DH∑øms_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
DH
,
i2d_DH∑øms
,bp,x)

	)

97 
DH
 *
DH∑øms_dup
(DH *);

99 c⁄° 
DH_METHOD
 *
DH_O≥nSSL
();

101 
DH_£t_deÁu…_mëhod
(c⁄° 
DH_METHOD
 *
mëh
);

102 c⁄° 
DH_METHOD
 *
DH_gë_deÁu…_mëhod
();

103 
DH_£t_mëhod
(
DH
 *
dh
, c⁄° 
DH_METHOD
 *
mëh
);

104 
DH
 *
DH_√w_mëhod
(
ENGINE
 *
ígöe
);

106 
DH
 *
DH_√w
();

107 
DH_‰ì
(
DH
 *
dh
);

108 
DH_up_ªf
(
DH
 *
dh
);

109 
DH_bôs
(c⁄° 
DH
 *
dh
);

110 
DH_size
(c⁄° 
DH
 *
dh
);

111 
DH_£curôy_bôs
(c⁄° 
DH
 *
dh
);

112 
	#DH_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

113 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_DH
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

114 
DH_£t_ex_d©a
(
DH
 *
d
, 
idx
, *
¨g
);

115 *
DH_gë_ex_d©a
(
DH
 *
d
, 
idx
);

118 
DEPRECATEDIN_0_9_8
(
DH
 *
DH_gíî©e_∑ømëîs
(
¥ime_Àn
, 
gíî©‹
,

119 (*
ˇŒback
) (, ,

121 *
cb_¨g
))

124 
DH_gíî©e_∑ømëîs_ex
(
DH
 *
dh
, 
¥ime_Àn
, 
gíî©‹
,

125 
BN_GENCB
 *
cb
);

127 
DH_check
(c⁄° 
DH
 *
dh
, *
codes
);

128 
DH_check_pub_key
(c⁄° 
DH
 *
dh
, c⁄° 
BIGNUM
 *
pub_key
, *
codes
);

129 
DH_gíî©e_key
(
DH
 *
dh
);

130 
DH_compuã_key
(*
key
, c⁄° 
BIGNUM
 *
pub_key
, 
DH
 *
dh
);

131 
DH_compuã_key_∑dded
(*
key
, c⁄° 
BIGNUM
 *
pub_key
, 
DH
 *
dh
);

132 
DH
 *
d2i_DH∑øms
(DH **
a
, c⁄° **
µ
, 
Àngth
);

133 
i2d_DH∑øms
(c⁄° 
DH
 *
a
, **
µ
);

134 
DH
 *
d2i_DHx∑øms
(DH **
a
, c⁄° **
µ
, 
Àngth
);

135 
i2d_DHx∑øms
(c⁄° 
DH
 *
a
, **
µ
);

136 #i‚de‡
OPENSSL_NO_STDIO


137 
DH∑øms_¥öt_Â
(
FILE
 *
Â
, c⁄° 
DH
 *
x
);

139 
DH∑øms_¥öt
(
BIO
 *
bp
, c⁄° 
DH
 *
x
);

142 
DH
 *
DH_gë_1024_160
();

143 
DH
 *
DH_gë_2048_224
();

144 
DH
 *
DH_gë_2048_256
();

146 #i‚de‡
OPENSSL_NO_CMS


148 
DH_KDF_X9_42
(*
out
, 
size_t
 
ouéí
,

149 c⁄° *
Z
, 
size_t
 
ZÀn
,

150 
ASN1_OBJECT
 *
key_oid
,

151 c⁄° *
ukm
, 
size_t
 
ukmÀn
, c⁄° 
EVP_MD
 *
md
);

154 
DH_gë0_pqg
(c⁄° 
DH
 *
dh
,

155 c⁄° 
BIGNUM
 **
p
, c⁄° BIGNUM **
q
, c⁄° BIGNUM **
g
);

156 
DH_£t0_pqg
(
DH
 *
dh
, 
BIGNUM
 *
p
, BIGNUM *
q
, BIGNUM *
g
);

157 
DH_gë0_key
(c⁄° 
DH
 *
dh
,

158 c⁄° 
BIGNUM
 **
pub_key
, c⁄° BIGNUM **
¥iv_key
);

159 
DH_£t0_key
(
DH
 *
dh
, 
BIGNUM
 *
pub_key
, BIGNUM *
¥iv_key
);

160 
DH_˛ór_Êags
(
DH
 *
dh
, 
Êags
);

161 
DH_ã°_Êags
(c⁄° 
DH
 *
dh
, 
Êags
);

162 
DH_£t_Êags
(
DH
 *
dh
, 
Êags
);

163 
ENGINE
 *
DH_gë0_ígöe
(
DH
 *
d
);

164 
DH_gë_Àngth
(c⁄° 
DH
 *
dh
);

165 
DH_£t_Àngth
(
DH
 *
dh
, 
Àngth
);

167 
DH_METHOD
 *
DH_mëh_√w
(c⁄° *
«me
, 
Êags
);

168 
DH_mëh_‰ì
(
DH_METHOD
 *
dhm
);

169 
DH_METHOD
 *
DH_mëh_dup
(c⁄° DH_METHOD *
dhm
);

170 c⁄° *
DH_mëh_gë0_«me
(c⁄° 
DH_METHOD
 *
dhm
);

171 
DH_mëh_£t1_«me
(
DH_METHOD
 *
dhm
, c⁄° *
«me
);

172 
DH_mëh_gë_Êags
(
DH_METHOD
 *
dhm
);

173 
DH_mëh_£t_Êags
(
DH_METHOD
 *
dhm
, 
Êags
);

174 *
DH_mëh_gë0_≠p_d©a
(c⁄° 
DH_METHOD
 *
dhm
);

175 
DH_mëh_£t0_≠p_d©a
(
DH_METHOD
 *
dhm
, *
≠p_d©a
);

176 (*
DH_mëh_gë_gíî©e_key
(c⁄° 
DH_METHOD
 *
dhm
)Ë(
DH
 *);

177 
DH_mëh_£t_gíî©e_key
(
DH_METHOD
 *
dhm
, (*
gíî©e_key
Ë(
DH
 *));

178 (*
DH_mëh_gë_compuã_key
(c⁄° 
DH_METHOD
 *
dhm
))

179 (*
key
, c⁄° 
BIGNUM
 *
pub_key
, 
DH
 *
dh
);

180 
DH_mëh_£t_compuã_key
(
DH_METHOD
 *
dhm
,

181 (*
compuã_key
Ë(*
key
, c⁄° 
BIGNUM
 *
pub_key
, 
DH
 *
dh
));

182 (*
DH_mëh_gë_bn_mod_exp
(c⁄° 
DH_METHOD
 *
dhm
))

183 (c⁄° 
DH
 *, 
BIGNUM
 *, const BIGNUM *, const BIGNUM *, const BIGNUM *,

184 
BN_CTX
 *, 
BN_MONT_CTX
 *);

185 
DH_mëh_£t_bn_mod_exp
(
DH_METHOD
 *
dhm
,

186 (*
bn_mod_exp
Ë(c⁄° 
DH
 *, 
BIGNUM
 *, const BIGNUM *, const BIGNUM *,

187 c⁄° 
BIGNUM
 *, 
BN_CTX
 *, 
BN_MONT_CTX
 *));

188 (*
DH_mëh_gë_öô
(c⁄° 
DH_METHOD
 *
dhm
))(
DH
 *);

189 
DH_mëh_£t_öô
(
DH_METHOD
 *
dhm
, (*
öô
)(
DH
 *));

190 (*
DH_mëh_gë_föish
(c⁄° 
DH_METHOD
 *
dhm
)Ë(
DH
 *);

191 
DH_mëh_£t_föish
(
DH_METHOD
 *
dhm
, (*
föish
Ë(
DH
 *));

192 (*
DH_mëh_gë_gíî©e_∑øms
(c⁄° 
DH_METHOD
 *
dhm
))

193 (
DH
 *, , , 
BN_GENCB
 *);

194 
DH_mëh_£t_gíî©e_∑øms
(
DH_METHOD
 *
dhm
,

195 (*
gíî©e_∑øms
Ë(
DH
 *, , , 
BN_GENCB
 *));

198 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_¥ime_Àn
(
˘x
, 
Àn
) \

199 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

200 
EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN
, 
Àn
, 
NULL
)

	)

202 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_sub¥ime_Àn
(
˘x
, 
Àn
) \

203 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

204 
EVP_PKEY_CTRL_DH_PARAMGEN_SUBPRIME_LEN
, 
Àn
, 
NULL
)

	)

206 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_ty≥
(
˘x
, 
typ
) \

207 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

208 
EVP_PKEY_CTRL_DH_PARAMGEN_TYPE
, 
typ
, 
NULL
)

	)

210 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_gíî©‹
(
˘x
, 
gí
) \

211 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

212 
EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR
, 
gí
, 
NULL
)

	)

214 
	#EVP_PKEY_CTX_£t_dh_rfc5114
(
˘x
, 
gí
) \

215 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, 
EVP_PKEY_OP_PARAMGEN
, \

216 
EVP_PKEY_CTRL_DH_RFC5114
, 
gí
, 
NULL
)

	)

218 
	#EVP_PKEY_CTX_£t_dhx_rfc5114
(
˘x
, 
gí
) \

219 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, 
EVP_PKEY_OP_PARAMGEN
, \

220 
EVP_PKEY_CTRL_DH_RFC5114
, 
gí
, 
NULL
)

	)

222 
	#EVP_PKEY_CTX_£t_dh_kdf_ty≥
(
˘x
, 
kdf
) \

223 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

224 
EVP_PKEY_OP_DERIVE
, \

225 
EVP_PKEY_CTRL_DH_KDF_TYPE
, 
kdf
, 
NULL
)

	)

227 
	#EVP_PKEY_CTX_gë_dh_kdf_ty≥
(
˘x
) \

228 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

229 
EVP_PKEY_OP_DERIVE
, \

230 
EVP_PKEY_CTRL_DH_KDF_TYPE
, -2, 
NULL
)

	)

232 
	#EVP_PKEY_CTX_£t0_dh_kdf_oid
(
˘x
, 
oid
) \

233 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

234 
EVP_PKEY_OP_DERIVE
, \

235 
EVP_PKEY_CTRL_DH_KDF_OID
, 0, (*)
oid
)

	)

237 
	#EVP_PKEY_CTX_gë0_dh_kdf_oid
(
˘x
, 
poid
) \

238 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

239 
EVP_PKEY_OP_DERIVE
, \

240 
EVP_PKEY_CTRL_GET_DH_KDF_OID
, 0, (*)
poid
)

	)

242 
	#EVP_PKEY_CTX_£t_dh_kdf_md
(
˘x
, 
md
) \

243 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

244 
EVP_PKEY_OP_DERIVE
, \

245 
EVP_PKEY_CTRL_DH_KDF_MD
, 0, (*)
md
)

	)

247 
	#EVP_PKEY_CTX_gë_dh_kdf_md
(
˘x
, 
pmd
) \

248 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

249 
EVP_PKEY_OP_DERIVE
, \

250 
EVP_PKEY_CTRL_GET_DH_KDF_MD
, 0, (*)
pmd
)

	)

252 
	#EVP_PKEY_CTX_£t_dh_kdf_ouéí
(
˘x
, 
Àn
) \

253 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

254 
EVP_PKEY_OP_DERIVE
, \

255 
EVP_PKEY_CTRL_DH_KDF_OUTLEN
, 
Àn
, 
NULL
)

	)

257 
	#EVP_PKEY_CTX_gë_dh_kdf_ouéí
(
˘x
, 
∂í
) \

258 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

259 
EVP_PKEY_OP_DERIVE
, \

260 
EVP_PKEY_CTRL_GET_DH_KDF_OUTLEN
, 0, (*)
∂í
)

	)

262 
	#EVP_PKEY_CTX_£t0_dh_kdf_ukm
(
˘x
, 
p
, 
∂í
) \

263 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

264 
EVP_PKEY_OP_DERIVE
, \

265 
EVP_PKEY_CTRL_DH_KDF_UKM
, 
∂í
, (*)
p
)

	)

267 
	#EVP_PKEY_CTX_gë0_dh_kdf_ukm
(
˘x
, 
p
) \

268 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

269 
EVP_PKEY_OP_DERIVE
, \

270 
EVP_PKEY_CTRL_GET_DH_KDF_UKM
, 0, (*)
p
)

	)

272 
	#EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

273 
	#EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

274 
	#EVP_PKEY_CTRL_DH_RFC5114
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

275 
	#EVP_PKEY_CTRL_DH_PARAMGEN_SUBPRIME_LEN
 (
EVP_PKEY_ALG_CTRL
 + 4)

	)

276 
	#EVP_PKEY_CTRL_DH_PARAMGEN_TYPE
 (
EVP_PKEY_ALG_CTRL
 + 5)

	)

277 
	#EVP_PKEY_CTRL_DH_KDF_TYPE
 (
EVP_PKEY_ALG_CTRL
 + 6)

	)

278 
	#EVP_PKEY_CTRL_DH_KDF_MD
 (
EVP_PKEY_ALG_CTRL
 + 7)

	)

279 
	#EVP_PKEY_CTRL_GET_DH_KDF_MD
 (
EVP_PKEY_ALG_CTRL
 + 8)

	)

280 
	#EVP_PKEY_CTRL_DH_KDF_OUTLEN
 (
EVP_PKEY_ALG_CTRL
 + 9)

	)

281 
	#EVP_PKEY_CTRL_GET_DH_KDF_OUTLEN
 (
EVP_PKEY_ALG_CTRL
 + 10)

	)

282 
	#EVP_PKEY_CTRL_DH_KDF_UKM
 (
EVP_PKEY_ALG_CTRL
 + 11)

	)

283 
	#EVP_PKEY_CTRL_GET_DH_KDF_UKM
 (
EVP_PKEY_ALG_CTRL
 + 12)

	)

284 
	#EVP_PKEY_CTRL_DH_KDF_OID
 (
EVP_PKEY_ALG_CTRL
 + 13)

	)

285 
	#EVP_PKEY_CTRL_GET_DH_KDF_OID
 (
EVP_PKEY_ALG_CTRL
 + 14)

	)

288 
	#EVP_PKEY_DH_KDF_NONE
 1

	)

289 #i‚de‡
OPENSSL_NO_CMS


290 
	#EVP_PKEY_DH_KDF_X9_42
 2

	)

299 
ERR_lﬂd_DH_°rögs
();

304 
	#DH_F_COMPUTE_KEY
 102

	)

305 
	#DH_F_DHPARAMS_PRINT_FP
 101

	)

306 
	#DH_F_DH_BUILTIN_GENPARAMS
 106

	)

307 
	#DH_F_DH_CMS_DECRYPT
 114

	)

308 
	#DH_F_DH_CMS_SET_PEERKEY
 115

	)

309 
	#DH_F_DH_CMS_SET_SHARED_INFO
 116

	)

310 
	#DH_F_DH_METH_DUP
 117

	)

311 
	#DH_F_DH_METH_NEW
 118

	)

312 
	#DH_F_DH_METH_SET1_NAME
 119

	)

313 
	#DH_F_DH_NEW_METHOD
 105

	)

314 
	#DH_F_DH_PARAM_DECODE
 107

	)

315 
	#DH_F_DH_PRIV_DECODE
 110

	)

316 
	#DH_F_DH_PRIV_ENCODE
 111

	)

317 
	#DH_F_DH_PUB_DECODE
 108

	)

318 
	#DH_F_DH_PUB_ENCODE
 109

	)

319 
	#DH_F_DO_DH_PRINT
 100

	)

320 
	#DH_F_GENERATE_KEY
 103

	)

321 
	#DH_F_PKEY_DH_DERIVE
 112

	)

322 
	#DH_F_PKEY_DH_KEYGEN
 113

	)

325 
	#DH_R_BAD_GENERATOR
 101

	)

326 
	#DH_R_BN_DECODE_ERROR
 109

	)

327 
	#DH_R_BN_ERROR
 106

	)

328 
	#DH_R_DECODE_ERROR
 104

	)

329 
	#DH_R_INVALID_PUBKEY
 102

	)

330 
	#DH_R_KDF_PARAMETER_ERROR
 112

	)

331 
	#DH_R_KEYS_NOT_SET
 108

	)

332 
	#DH_R_MODULUS_TOO_LARGE
 103

	)

333 
	#DH_R_NO_PARAMETERS_SET
 107

	)

334 
	#DH_R_NO_PRIVATE_VALUE
 100

	)

335 
	#DH_R_PARAMETER_ENCODING_ERROR
 105

	)

336 
	#DH_R_PEER_KEY_ERROR
 111

	)

337 
	#DH_R_SHARED_INFO_ERROR
 113

	)

339 #ifde‡ 
__˝lu•lus


	@dsa.h

15 #i‚de‡
HEADER_DSA_H


16 
	#HEADER_DSA_H


	)

18 
	~<›ís¶/›ís¶c⁄f.h
>

20 #i‚de‡
OPENSSL_NO_DSA


21 #ifde‡ 
__˝lu•lus


24 
	~<›ís¶/e_os2.h
>

25 
	~<›ís¶/bio.h
>

26 
	~<›ís¶/¸y±o.h
>

27 
	~<›ís¶/os¶_typ.h
>

28 
	~<›ís¶/›ís¶c⁄f.h
>

29 
	~<›ís¶/bn.h
>

30 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

31 
	~<›ís¶/dh.h
>

34 #i‚de‡
OPENSSL_DSA_MAX_MODULUS_BITS


35 
	#OPENSSL_DSA_MAX_MODULUS_BITS
 10000

	)

38 
	#OPENSSL_DSA_FIPS_MIN_MODULUS_BITS
 1024

	)

40 
	#DSA_FLAG_CACHE_MONT_P
 0x01

	)

41 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

45 
	#DSA_FLAG_NO_EXP_CONSTTIME
 0x00

	)

55 
	#DSA_FLAG_FIPS_METHOD
 0x0400

	)

63 
	#DSA_FLAG_NON_FIPS_ALLOW
 0x0400

	)

64 
	#DSA_FLAG_FIPS_CHECKED
 0x0800

	)

70 
DSA_SIG_°
 
	tDSA_SIG
;

72 
	#d2i_DSA∑øms_Â
(
Â
,
x
Ë(
DSA
 *)
	`ASN1_d2i_Â
((*(*)())
DSA_√w
, \

73 (*(*)())
d2i_DSA∑øms
,(
Â
),(**)(
x
))

	)

74 
	#i2d_DSA∑øms_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_DSA∑øms
,(fp), \

75 (*)(
x
))

	)

76 
	#d2i_DSA∑øms_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
DSA
,
DSA_√w
,
d2i_DSA∑øms
,bp,x)

	)

77 
	#i2d_DSA∑øms_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
DSA
,
i2d_DSA∑øms
,bp,x)

	)

79 
DSA
 *
DSA∑øms_dup
(DSA *
x
);

80 
DSA_SIG
 *
DSA_SIG_√w
();

81 
DSA_SIG_‰ì
(
DSA_SIG
 *
a
);

82 
i2d_DSA_SIG
(c⁄° 
DSA_SIG
 *
a
, **
µ
);

83 
DSA_SIG
 *
d2i_DSA_SIG
(DSA_SIG **
v
, c⁄° **
µ
, 
Àngth
);

84 
DSA_SIG_gë0
(c⁄° 
DSA_SIG
 *
sig
, c⁄° 
BIGNUM
 **
¥
, c⁄° BIGNUM **
ps
);

85 
DSA_SIG_£t0
(
DSA_SIG
 *
sig
, 
BIGNUM
 *
r
, BIGNUM *
s
);

87 
DSA_SIG
 *
DSA_do_sign
(c⁄° *
dg°
, 
dÀn
, 
DSA
 *
dß
);

88 
DSA_do_vîify
(c⁄° *
dg°
, 
dg°_Àn
,

89 
DSA_SIG
 *
sig
, 
DSA
 *
dß
);

91 c⁄° 
DSA_METHOD
 *
DSA_O≥nSSL
();

93 
DSA_£t_deÁu…_mëhod
(c⁄° 
DSA_METHOD
 *);

94 c⁄° 
DSA_METHOD
 *
DSA_gë_deÁu…_mëhod
();

95 
DSA_£t_mëhod
(
DSA
 *
dß
, c⁄° 
DSA_METHOD
 *);

96 c⁄° 
DSA_METHOD
 *
DSA_gë_mëhod
(
DSA
 *
d
);

98 
DSA
 *
DSA_√w
();

99 
DSA
 *
DSA_√w_mëhod
(
ENGINE
 *
ígöe
);

100 
DSA_‰ì
(
DSA
 *
r
);

102 
DSA_up_ªf
(
DSA
 *
r
);

103 
DSA_size
(c⁄° 
DSA
 *);

104 
DSA_£curôy_bôs
(c⁄° 
DSA
 *
d
);

106 
DSA_sign_£tup
(
DSA
 *
dß
, 
BN_CTX
 *
˘x_ö
, 
BIGNUM
 **
kövp
, BIGNUM **
Ω
);

107 
DSA_sign
(
ty≥
, c⁄° *
dg°
, 
dÀn
,

108 *
sig
, *
sigÀn
, 
DSA
 *
dß
);

109 
DSA_vîify
(
ty≥
, c⁄° *
dg°
, 
dg°_Àn
,

110 c⁄° *
sigbuf
, 
sigÀn
, 
DSA
 *
dß
);

111 
	#DSA_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

112 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_DSA
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

113 
DSA_£t_ex_d©a
(
DSA
 *
d
, 
idx
, *
¨g
);

114 *
DSA_gë_ex_d©a
(
DSA
 *
d
, 
idx
);

116 
DSA
 *
d2i_DSAPublicKey
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

117 
DSA
 *
d2i_DSAPriv©eKey
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

118 
DSA
 *
d2i_DSA∑øms
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

121 
DEPRECATEDIN_0_9_8
(
DSA
 *
DSA_gíî©e_∑ømëîs
(
bôs
,

122 *
£ed
,

123 
£ed_Àn
,

124 *
cou¡î_ªt
,

125 *
h_ªt
, 

126 (*
ˇŒback
) (, ,

128 *
cb_¨g
))

131 
DSA_gíî©e_∑ømëîs_ex
(
DSA
 *
dß
, 
bôs
,

132 c⁄° *
£ed
, 
£ed_Àn
,

133 *
cou¡î_ªt
, *
h_ªt
,

134 
BN_GENCB
 *
cb
);

136 
DSA_gíî©e_key
(
DSA
 *
a
);

137 
i2d_DSAPublicKey
(c⁄° 
DSA
 *
a
, **
µ
);

138 
i2d_DSAPriv©eKey
(c⁄° 
DSA
 *
a
, **
µ
);

139 
i2d_DSA∑øms
(c⁄° 
DSA
 *
a
, **
µ
);

141 
DSA∑øms_¥öt
(
BIO
 *
bp
, c⁄° 
DSA
 *
x
);

142 
DSA_¥öt
(
BIO
 *
bp
, c⁄° 
DSA
 *
x
, 
off
);

143 #i‚de‡
OPENSSL_NO_STDIO


144 
DSA∑øms_¥öt_Â
(
FILE
 *
Â
, c⁄° 
DSA
 *
x
);

145 
DSA_¥öt_Â
(
FILE
 *
bp
, c⁄° 
DSA
 *
x
, 
off
);

148 
	#DSS_¥ime_checks
 50

	)

153 
	#DSA_is_¥ime
(
n
, 
ˇŒback
, 
cb_¨g
) \

154 
	`BN_is_¥ime
(
n
, 
DSS_¥ime_checks
, 
ˇŒback
, 
NULL
, 
cb_¨g
)

	)

156 #i‚de‡
OPENSSL_NO_DH


161 
DH
 *
DSA_dup_DH
(c⁄° 
DSA
 *
r
);

164 
	#EVP_PKEY_CTX_£t_dß_∑ømgí_bôs
(
˘x
, 
nbôs
) \

165 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DSA
, 
EVP_PKEY_OP_PARAMGEN
, \

166 
EVP_PKEY_CTRL_DSA_PARAMGEN_BITS
, 
nbôs
, 
NULL
)

	)

168 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_BITS
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

169 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

170 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_MD
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

172 
DSA_gë0_pqg
(c⁄° 
DSA
 *
d
,

173 c⁄° 
BIGNUM
 **
p
, c⁄° BIGNUM **
q
, c⁄° BIGNUM **
g
);

174 
DSA_£t0_pqg
(
DSA
 *
d
, 
BIGNUM
 *
p
, BIGNUM *
q
, BIGNUM *
g
);

175 
DSA_gë0_key
(c⁄° 
DSA
 *
d
,

176 c⁄° 
BIGNUM
 **
pub_key
, c⁄° BIGNUM **
¥iv_key
);

177 
DSA_£t0_key
(
DSA
 *
d
, 
BIGNUM
 *
pub_key
, BIGNUM *
¥iv_key
);

178 
DSA_˛ór_Êags
(
DSA
 *
d
, 
Êags
);

179 
DSA_ã°_Êags
(c⁄° 
DSA
 *
d
, 
Êags
);

180 
DSA_£t_Êags
(
DSA
 *
d
, 
Êags
);

181 
ENGINE
 *
DSA_gë0_ígöe
(
DSA
 *
d
);

183 
DSA_METHOD
 *
DSA_mëh_√w
(c⁄° *
«me
, 
Êags
);

184 
DSA_mëh_‰ì
(
DSA_METHOD
 *
dßm
);

185 
DSA_METHOD
 *
DSA_mëh_dup
(c⁄° DSA_METHOD *
dßm
);

186 c⁄° *
DSA_mëh_gë0_«me
(c⁄° 
DSA_METHOD
 *
dßm
);

187 
DSA_mëh_£t1_«me
(
DSA_METHOD
 *
dßm
, c⁄° *
«me
);

188 
DSA_mëh_gë_Êags
(
DSA_METHOD
 *
dßm
);

189 
DSA_mëh_£t_Êags
(
DSA_METHOD
 *
dßm
, 
Êags
);

190 *
DSA_mëh_gë0_≠p_d©a
(c⁄° 
DSA_METHOD
 *
dßm
);

191 
DSA_mëh_£t0_≠p_d©a
(
DSA_METHOD
 *
dßm
, *
≠p_d©a
);

192 
DSA_SIG
 *(*
DSA_mëh_gë_sign
(c⁄° 
DSA_METHOD
 *
dßm
))

193 (c⁄° *, , 
DSA
 *);

194 
DSA_mëh_£t_sign
(
DSA_METHOD
 *
dßm
,

195 
DSA_SIG
 *(*
sign
Ë(c⁄° *, , 
DSA
 *));

196 (*
DSA_mëh_gë_sign_£tup
(c⁄° 
DSA_METHOD
 *
dßm
))

197 (
DSA
 *, 
BN_CTX
 *, 
BIGNUM
 **, BIGNUM **);

198 
DSA_mëh_£t_sign_£tup
(
DSA_METHOD
 *
dßm
,

199 (*
sign_£tup
Ë(
DSA
 *, 
BN_CTX
 *, 
BIGNUM
 **, BIGNUM **));

200 (*
DSA_mëh_gë_vîify
(c⁄° 
DSA_METHOD
 *
dßm
))

201 (c⁄° *, , 
DSA_SIG
 *, 
DSA
 *);

202 
DSA_mëh_£t_vîify
(
DSA_METHOD
 *
dßm
,

203 (*
vîify
Ë(c⁄° *, , 
DSA_SIG
 *, 
DSA
 *));

204 (*
DSA_mëh_gë_mod_exp
(c⁄° 
DSA_METHOD
 *
dßm
))

205 (
DSA
 *, 
BIGNUM
 *, const BIGNUM *, const BIGNUM *, const BIGNUM *,

206 c⁄° 
BIGNUM
 *, c⁄° BIGNUM *, 
BN_CTX
 *, 
BN_MONT_CTX
 *);

207 
DSA_mëh_£t_mod_exp
(
DSA_METHOD
 *
dßm
,

208 (*
mod_exp
Ë(
DSA
 *, 
BIGNUM
 *, const BIGNUM *, const BIGNUM *,

209 c⁄° 
BIGNUM
 *, c⁄° BIGNUM *, c⁄° BIGNUM *, 
BN_CTX
 *,

210 
BN_MONT_CTX
 *));

211 (*
DSA_mëh_gë_bn_mod_exp
(c⁄° 
DSA_METHOD
 *
dßm
))

212 (
DSA
 *, 
BIGNUM
 *, const BIGNUM *, const BIGNUM *, const BIGNUM *,

213 
BN_CTX
 *, 
BN_MONT_CTX
 *);

214 
DSA_mëh_£t_bn_mod_exp
(
DSA_METHOD
 *
dßm
,

215 (*
bn_mod_exp
Ë(
DSA
 *, 
BIGNUM
 *, const BIGNUM *, const BIGNUM *,

216 c⁄° 
BIGNUM
 *, 
BN_CTX
 *, 
BN_MONT_CTX
 *));

217 (*
DSA_mëh_gë_öô
(c⁄° 
DSA_METHOD
 *
dßm
))(
DSA
 *);

218 
DSA_mëh_£t_öô
(
DSA_METHOD
 *
dßm
, (*
öô
)(
DSA
 *));

219 (*
DSA_mëh_gë_föish
(c⁄° 
DSA_METHOD
 *
dßm
)Ë(
DSA
 *);

220 
DSA_mëh_£t_föish
(
DSA_METHOD
 *
dßm
, (*
föish
Ë(
DSA
 *));

221 (*
DSA_mëh_gë_∑ømgí
(c⁄° 
DSA_METHOD
 *
dßm
))

222 (
DSA
 *, , const *, , *, *,

223 
BN_GENCB
 *);

224 
DSA_mëh_£t_∑ømgí
(
DSA_METHOD
 *
dßm
,

225 (*
∑ømgí
Ë(
DSA
 *, , const *, , *,

226 *, 
BN_GENCB
 *));

227 (*
DSA_mëh_gë_keygí
(c⁄° 
DSA_METHOD
 *
dßm
)Ë(
DSA
 *);

228 
DSA_mëh_£t_keygí
(
DSA_METHOD
 *
dßm
, (*
keygí
Ë(
DSA
 *));

236 
ERR_lﬂd_DSA_°rögs
();

241 
	#DSA_F_DSAPARAMS_PRINT
 100

	)

242 
	#DSA_F_DSAPARAMS_PRINT_FP
 101

	)

243 
	#DSA_F_DSA_BUILTIN_PARAMGEN
 125

	)

244 
	#DSA_F_DSA_BUILTIN_PARAMGEN2
 126

	)

245 
	#DSA_F_DSA_DO_SIGN
 112

	)

246 
	#DSA_F_DSA_DO_VERIFY
 113

	)

247 
	#DSA_F_DSA_METH_DUP
 127

	)

248 
	#DSA_F_DSA_METH_NEW
 128

	)

249 
	#DSA_F_DSA_METH_SET1_NAME
 129

	)

250 
	#DSA_F_DSA_NEW_METHOD
 103

	)

251 
	#DSA_F_DSA_PARAM_DECODE
 119

	)

252 
	#DSA_F_DSA_PRINT_FP
 105

	)

253 
	#DSA_F_DSA_PRIV_DECODE
 115

	)

254 
	#DSA_F_DSA_PRIV_ENCODE
 116

	)

255 
	#DSA_F_DSA_PUB_DECODE
 117

	)

256 
	#DSA_F_DSA_PUB_ENCODE
 118

	)

257 
	#DSA_F_DSA_SIGN
 106

	)

258 
	#DSA_F_DSA_SIGN_SETUP
 107

	)

259 
	#DSA_F_OLD_DSA_PRIV_DECODE
 122

	)

260 
	#DSA_F_PKEY_DSA_CTRL
 120

	)

261 
	#DSA_F_PKEY_DSA_KEYGEN
 121

	)

264 
	#DSA_R_BAD_Q_VALUE
 102

	)

265 
	#DSA_R_BN_DECODE_ERROR
 108

	)

266 
	#DSA_R_BN_ERROR
 109

	)

267 
	#DSA_R_DECODE_ERROR
 104

	)

268 
	#DSA_R_INVALID_DIGEST_TYPE
 106

	)

269 
	#DSA_R_INVALID_PARAMETERS
 112

	)

270 
	#DSA_R_MISSING_PARAMETERS
 101

	)

271 
	#DSA_R_MODULUS_TOO_LARGE
 103

	)

272 
	#DSA_R_NO_PARAMETERS_SET
 107

	)

273 
	#DSA_R_PARAMETER_ENCODING_ERROR
 105

	)

274 
	#DSA_R_Q_NOT_PRIME
 113

	)

276 #ifde‡ 
__˝lu•lus


	@dtls1.h

10 #i‚de‡
HEADER_DTLS1_H


11 
	#HEADER_DTLS1_H


	)

13 #ifde‡ 
__˝lu•lus


17 
	#DTLS1_VERSION
 0xFEFF

	)

18 
	#DTLS1_2_VERSION
 0xFEFD

	)

19 
	#DTLS_MIN_VERSION
 
DTLS1_VERSION


	)

20 
	#DTLS_MAX_VERSION
 
DTLS1_2_VERSION


	)

21 
	#DTLS1_VERSION_MAJOR
 0xFE

	)

23 
	#DTLS1_BAD_VER
 0x0100

	)

26 
	#DTLS_ANY_VERSION
 0x1FFFF

	)

29 
	#DTLS1_COOKIE_LENGTH
 256

	)

31 
	#DTLS1_RT_HEADER_LENGTH
 13

	)

33 
	#DTLS1_HM_HEADER_LENGTH
 12

	)

35 
	#DTLS1_HM_BAD_FRAGMENT
 -2

	)

36 
	#DTLS1_HM_FRAGMENT_RETRY
 -3

	)

38 
	#DTLS1_CCS_HEADER_LENGTH
 1

	)

40 #ifde‡
DTLS1_AD_MISSING_HANDSHAKE_MESSAGE


41 
	#DTLS1_AL_HEADER_LENGTH
 7

	)

43 
	#DTLS1_AL_HEADER_LENGTH
 2

	)

48 
	#DTLS1_TMO_READ_COUNT
 2

	)

49 
	#DTLS1_TMO_WRITE_COUNT
 2

	)

51 
	#DTLS1_TMO_ALERT_COUNT
 12

	)

53 #ifde‡ 
__˝lu•lus


	@e_os2.h

10 #i‚de‡
HEADER_E_OS2_H


11 
	#HEADER_E_OS2_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #ifde‡ 
__˝lu•lus


25 
	#OPENSSL_SYS_UNIX


	)

33 #i‡
deföed
(
OPENSSL_SYS_MSDOS
)

34 #unde‡
OPENSSL_SYS_UNIX


45 #i‡
deföed
(
OPENSSL_SYS_UEFI
)

46 #unde‡
OPENSSL_SYS_UNIX


47 #ñi‡
deföed
(
OPENSSL_SYS_UWIN
)

48 #unde‡
OPENSSL_SYS_UNIX


49 
	#OPENSSL_SYS_WIN32_UWIN


	)

51 #i‡
deföed
(
__CYGWIN__
Ë|| deföed(
OPENSSL_SYS_CYGWIN
)

52 #unde‡
OPENSSL_SYS_UNIX


53 
	#OPENSSL_SYS_WIN32_CYGWIN


	)

55 #i‡
deföed
(
_WIN32
Ë|| deföed(
OPENSSL_SYS_WIN32
)

56 #unde‡
OPENSSL_SYS_UNIX


57 #i‡!
deföed
(
OPENSSL_SYS_WIN32
)

58 
	#OPENSSL_SYS_WIN32


	)

61 #i‡
deföed
(
_WIN64
Ë|| deföed(
OPENSSL_SYS_WIN64
)

62 #unde‡
OPENSSL_SYS_UNIX


63 #i‡!
deföed
(
OPENSSL_SYS_WIN64
)

64 
	#OPENSSL_SYS_WIN64


	)

67 #i‡
deföed
(
OPENSSL_SYS_WINNT
)

68 #unde‡
OPENSSL_SYS_UNIX


70 #i‡
deföed
(
OPENSSL_SYS_WINCE
)

71 #unde‡
OPENSSL_SYS_UNIX


77 #i‡
deföed
(
OPENSSL_SYS_WIN32
Ë|| deföed(
OPENSSL_SYS_WIN64
Ë|| deföed(
OPENSSL_SYS_WINNT
Ë|| deföed(
OPENSSL_SYS_WINCE
)

78 #unde‡
OPENSSL_SYS_UNIX


79 
	#OPENSSL_SYS_WINDOWS


	)

80 #i‚de‡
OPENSSL_SYS_MSDOS


81 
	#OPENSSL_SYS_MSDOS


	)

90 #ifde‡
OPENSSL_SYS_WINDOWS


91 #i‚de‡
OPENSSL_OPT_WINDLL


92 #i‡
deföed
(
_WINDLL
)

94 
	#OPENSSL_OPT_WINDLL


	)

100 #i‡
deföed
(
__VMS
Ë|| deföed(
VMS
Ë|| deföed(
OPENSSL_SYS_VMS
)

101 #i‡!
deföed
(
OPENSSL_SYS_VMS
)

102 #unde‡
OPENSSL_SYS_UNIX


104 
	#OPENSSL_SYS_VMS


	)

105 #i‡
deföed
(
__DECC
)

106 
	#OPENSSL_SYS_VMS_DECC


	)

107 #ñi‡
deföed
(
__DECCXX
)

108 
	#OPENSSL_SYS_VMS_DECC


	)

109 
	#OPENSSL_SYS_VMS_DECCXX


	)

111 
	#OPENSSL_SYS_VMS_NODECC


	)

116 #ifde‡
OPENSSL_SYS_UNIX


117 #i‡
deföed
(
löux
Ë|| deföed(
__löux__
Ë&& !deföed(
OPENSSL_SYS_LINUX
)

118 
	#OPENSSL_SYS_LINUX


	)

120 #i‡
deföed
(
_AIX
Ë&& !deföed(
OPENSSL_SYS_AIX
)

121 
	#OPENSSL_SYS_AIX


	)

126 #i‡
deföed
(
__VOS__
Ë&& !deföed(
OPENSSL_SYS_VOS
)

127 
	#OPENSSL_SYS_VOS


	)

128 #ifde‡
__HPPA__


129 
	#OPENSSL_SYS_VOS_HPPA


	)

131 #ifde‡
__IA32__


132 
	#OPENSSL_SYS_VOS_IA32


	)

141 #ifde‡
OPENSSL_SYS_MSDOS


142 
	#OPENSSL_UNISTD_IO
 <
io
.
h
>

	)

143 
	#OPENSSL_DECLARE_EXIT
 
	`exô
();

	)

145 
	#OPENSSL_UNISTD_IO
 
OPENSSL_UNISTD


	)

146 
	#OPENSSL_DECLARE_EXIT


	)

168 #i‡
deföed
(
OPENSSL_SYS_VMS_NODECC
)

169 
	#OPENSSL_EXPORT
 
globÆªf


	)

170 
	#OPENSSL_EXTERN
 
globÆªf


	)

171 
	#OPENSSL_GLOBAL
 
globÆdef


	)

172 #ñi‡
deföed
(
OPENSSL_SYS_WINDOWS
Ë&& deföed(
OPENSSL_OPT_WINDLL
)

173 
	#OPENSSL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

174 
	#OPENSSL_EXTERN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

175 
	#OPENSSL_GLOBAL


	)

177 
	#OPENSSL_EXPORT
 

	)

178 
	#OPENSSL_EXTERN
 

	)

179 
	#OPENSSL_GLOBAL


	)

193 #ifde‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


194 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
) \

195 
ty≥
 *
_shadow_
##
	`«me
() \

196 { 
ty≥
 
_hide_
##
«me
=
vÆue
;  &_hide_##«me; }

	)

197 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ëty≥ *
_shadow_
##
	`«me
()

	)

198 
	#OPENSSL_GLOBAL_REF
(
«me
Ë(*(
_shadow_
##
	`«me
()))

	)

200 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
Ë
OPENSSL_GLOBAL
Åy≥ 
_shadow_
##«me=vÆue;

	)

201 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ë
OPENSSL_EXPORT
Åy≥ 
_shadow_
##
	)
name

202 
	#OPENSSL_GLOBAL_REF
(
«me
Ë
_shadow_
##
	)
name

205 #ifde‡
_WIN32


206 #ifde‡
_WIN64


207 
	#os¶_ssize_t
 
__öt64


	)

208 
	#OSSL_SSIZE_MAX
 
_I64_MAX


	)

210 
	#os¶_ssize_t
 

	)

211 
	#OSSL_SSIZE_MAX
 
INT_MAX


	)

215 #i‡
deföed
(
OPENSSL_SYS_UEFI
Ë&& !deföed(
ssize_t
)

216 
	#os¶_ssize_t
 

	)

217 
	#OSSL_SSIZE_MAX
 
INT_MAX


	)

220 #i‚de‡
os¶_ssize_t


221 
	#os¶_ssize_t
 
ssize_t


	)

222 #i‡
deföed
(
SSIZE_MAX
)

223 
	#OSSL_SSIZE_MAX
 
SSIZE_MAX


	)

224 #ñi‡
deföed
(
_POSIX_SSIZE_MAX
)

225 
	#OSSL_SSIZE_MAX
 
_POSIX_SSIZE_MAX


	)

229 #ifde‡
DEBUG_UNUSED


230 
	#__owur
 
	`__©åibuã__
((
__w¨n_unu£d_ªsu…__
))

	)

232 
	#__owur


	)

236 #i‡
deföed
(
OPENSSL_SYS_UEFI
)

237 
INT8
 
	töt8_t
;

238 
UINT8
 
	tuöt8_t
;

239 
INT16
 
	töt16_t
;

240 
UINT16
 
	tuöt16_t
;

241 
INT32
 
	töt32_t
;

242 
UINT32
 
	tuöt32_t
;

243 
INT64
 
	töt64_t
;

244 
UINT64
 
	tuöt64_t
;

245 
	#PRIu64
 "%Lu"

	)

246 #ñi‡(
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L) || \

247 
deföed
(
__osf__
Ë|| deföed(
__sgi
Ë|| deföed(
__hpux
) || \

248 
deföed
(
OPENSSL_SYS_VMS
Ë|| deföed (
__O≥nBSD__
)

249 
	~<öây≥s.h
>

250 #ñi‡
deföed
(
_MSC_VER
) && _MSC_VER<=1500

255 sig√d 
	töt8_t
;

256 
	tuöt8_t
;

257 
	töt16_t
;

258 
	tuöt16_t
;

259 
	töt32_t
;

260 
	tuöt32_t
;

261 
__öt64
 
	töt64_t
;

262 
	t__öt64
 
	tuöt64_t
;

264 
	~<°döt.h
>

271 #i‚de‡
PRIu64


272 #ifde‡
SIXTY_FOUR_BIT_LONG


273 
	#PRIu64
 "lu"

	)

275 
	#PRIu64
 "Œu"

	)

280 #i‡!
deföed
(
ölöe
Ë&& !deföed(
__˝lu•lus
)

281 #i‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__>=199901L

283 
	#os¶_ölöe
 
ölöe


	)

284 #ñi‡
deföed
(
__GNUC__
) && __GNUC__>=2

285 
	#os¶_ölöe
 
__ölöe__


	)

286 #ñi‡
deföed
(
_MSC_VER
)

292 
	#os¶_ölöe
 
__ölöe


	)

294 
	#os¶_ölöe


	)

297 
	#os¶_ölöe
 
ölöe


	)

300 #i‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 201112L

301 
	#os¶_n‹ëu∫
 
_N‹ëu∫


	)

302 #ñi‡
deföed
(
__GNUC__
) && __GNUC__ >= 2

303 
	#os¶_n‹ëu∫
 
	`__©åibuã__
((
n‹ëu∫
))

	)

305 
	#os¶_n‹ëu∫


	)

308 #ifde‡ 
__˝lu•lus


	@ebcdic.h

10 #i‚de‡
HEADER_EBCDIC_H


11 
	#HEADER_EBCDIC_H


	)

13 
	~<°dlib.h
>

15 #ifde‡ 
__˝lu•lus


20 
	#os_tﬂscii
 
_›ís¶_os_tﬂscii


	)

21 
	#os_t€bcdic
 
_›ís¶_os_t€bcdic


	)

22 
	#ebcdic2ascii
 
_›ís¶_ebcdic2ascii


	)

23 
	#ascii2ebcdic
 
_›ís¶_ascii2ebcdic


	)

25 c⁄° 
os_tﬂscii
[256];

26 c⁄° 
os_t€bcdic
[256];

27 *
ebcdic2ascii
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

28 *
ascii2ebcdic
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

30 #ifde‡ 
__˝lu•lus


	@ec.h

24 #i‚de‡
HEADER_EC_H


25 
	#HEADER_EC_H


	)

27 
	~<›ís¶/›ís¶c⁄f.h
>

29 #i‚de‡
OPENSSL_NO_EC


30 
	~<›ís¶/a¢1.h
>

31 
	~<›ís¶/symhacks.h
>

32 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

33 
	~<›ís¶/bn.h
>

35 #ifde‡ 
__˝lu•lus


39 #i‚de‡
OPENSSL_ECC_MAX_FIELD_BITS


40 
	#OPENSSL_ECC_MAX_FIELD_BITS
 661

	)

48 
POINT_CONVERSION_COMPRESSED
 = 2,

50 
POINT_CONVERSION_UNCOMPRESSED
 = 4,

53 
POINT_CONVERSION_HYBRID
 = 6

54 } 
	tpoöt_c⁄vîsi⁄_f‹m_t
;

56 
ec_mëhod_°
 
	tEC_METHOD
;

57 
ec_group_°
 
	tEC_GROUP
;

58 
ec_poöt_°
 
	tEC_POINT
;

59 
e˝k_∑ømëîs_°
 
	tECPKPARAMETERS
;

60 
ec_∑ømëîs_°
 
	tECPARAMETERS
;

70 c⁄° 
EC_METHOD
 *
EC_GFp_sim∂e_mëhod
();

75 c⁄° 
EC_METHOD
 *
EC_GFp_m⁄t_mëhod
();

80 c⁄° 
EC_METHOD
 *
EC_GFp_ni°_mëhod
();

82 #i‚de‡
OPENSSL_NO_EC_NISTP_64_GCC_128


86 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p224_mëhod
();

91 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p256_mëhod
();

96 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p521_mëhod
();

99 #i‚de‡
OPENSSL_NO_EC2M


107 c⁄° 
EC_METHOD
 *
EC_GF2m_sim∂e_mëhod
();

119 
EC_GROUP
 *
EC_GROUP_√w
(c⁄° 
EC_METHOD
 *
mëh
);

124 
EC_GROUP_‰ì
(
EC_GROUP
 *
group
);

129 
EC_GROUP_˛ór_‰ì
(
EC_GROUP
 *
group
);

136 
EC_GROUP_c›y
(
EC_GROUP
 *
d°
, c⁄° EC_GROUP *
§c
);

143 
EC_GROUP
 *
EC_GROUP_dup
(c⁄° EC_GROUP *
§c
);

149 c⁄° 
EC_METHOD
 *
EC_GROUP_mëhod_of
(c⁄° 
EC_GROUP
 *
group
);

155 
EC_METHOD_gë_fõld_ty≥
(c⁄° 
EC_METHOD
 *
mëh
);

165 
EC_GROUP_£t_gíî©‹
(
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
gíî©‹
,

166 c⁄° 
BIGNUM
 *
‹dî
, c⁄° BIGNUM *
coÁ˘‹
);

172 c⁄° 
EC_POINT
 *
EC_GROUP_gë0_gíî©‹
(c⁄° 
EC_GROUP
 *
group
);

178 
BN_MONT_CTX
 *
EC_GROUP_gë_m⁄t_d©a
(c⁄° 
EC_GROUP
 *
group
);

186 
EC_GROUP_gë_‹dî
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
‹dî
, 
BN_CTX
 *
˘x
);

192 c⁄° 
BIGNUM
 *
EC_GROUP_gë0_‹dî
(c⁄° 
EC_GROUP
 *
group
);

198 
EC_GROUP_‹dî_bôs
(c⁄° 
EC_GROUP
 *
group
);

206 
EC_GROUP_gë_coÁ˘‹
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
coÁ˘‹
,

207 
BN_CTX
 *
˘x
);

213 c⁄° 
BIGNUM
 *
EC_GROUP_gë0_coÁ˘‹
(c⁄° 
EC_GROUP
 *
group
);

219 
EC_GROUP_£t_curve_«me
(
EC_GROUP
 *
group
, 
nid
);

225 
EC_GROUP_gë_curve_«me
(c⁄° 
EC_GROUP
 *
group
);

227 
EC_GROUP_£t_a¢1_Êag
(
EC_GROUP
 *
group
, 
Êag
);

228 
EC_GROUP_gë_a¢1_Êag
(c⁄° 
EC_GROUP
 *
group
);

230 
EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m
(
EC_GROUP
 *
group
,

231 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
);

232 
poöt_c⁄vîsi⁄_f‹m_t
 
EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m
(c⁄° 
EC_GROUP
 *);

234 *
EC_GROUP_gë0_£ed
(c⁄° 
EC_GROUP
 *
x
);

235 
size_t
 
EC_GROUP_gë_£ed_Àn
(c⁄° 
EC_GROUP
 *);

236 
size_t
 
EC_GROUP_£t_£ed
(
EC_GROUP
 *, c⁄° *, size_à
Àn
);

246 
EC_GROUP_£t_curve_GFp
(
EC_GROUP
 *
group
, c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
,

247 c⁄° 
BIGNUM
 *
b
, 
BN_CTX
 *
˘x
);

257 
EC_GROUP_gë_curve_GFp
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
p
, BIGNUM *
a
,

258 
BIGNUM
 *
b
, 
BN_CTX
 *
˘x
);

260 #i‚de‡
OPENSSL_NO_EC2M


269 
EC_GROUP_£t_curve_GF2m
(
EC_GROUP
 *
group
, c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
,

270 c⁄° 
BIGNUM
 *
b
, 
BN_CTX
 *
˘x
);

280 
EC_GROUP_gë_curve_GF2m
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
p
, BIGNUM *
a
,

281 
BIGNUM
 *
b
, 
BN_CTX
 *
˘x
);

287 
EC_GROUP_gë_degªe
(c⁄° 
EC_GROUP
 *
group
);

294 
EC_GROUP_check
(c⁄° 
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

301 
EC_GROUP_check_dis¸imö™t
(c⁄° 
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

309 
EC_GROUP_cmp
(c⁄° 
EC_GROUP
 *
a
, c⁄° EC_GROUP *
b
, 
BN_CTX
 *
˘x
);

324 
EC_GROUP
 *
EC_GROUP_√w_curve_GFp
(c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
,

325 c⁄° 
BIGNUM
 *
b
, 
BN_CTX
 *
˘x
);

326 #i‚de‡
OPENSSL_NO_EC2M


335 
EC_GROUP
 *
EC_GROUP_√w_curve_GF2m
(c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
,

336 c⁄° 
BIGNUM
 *
b
, 
BN_CTX
 *
˘x
);

344 
EC_GROUP
 *
EC_GROUP_√w_by_curve_«me
(
nid
);

351 
EC_GROUP
 *
EC_GROUP_√w_‰om_e˝¨amëîs
(c⁄° 
ECPARAMETERS
 *
∑øms
);

359 
ECPARAMETERS
 *
EC_GROUP_gë_e˝¨amëîs
(c⁄° 
EC_GROUP
 *
group
,

360 
ECPARAMETERS
 *
∑øms
);

367 
EC_GROUP
 *
EC_GROUP_√w_‰om_e˝k∑ømëîs
(c⁄° 
ECPKPARAMETERS
 *
∑øms
);

375 
ECPKPARAMETERS
 *
EC_GROUP_gë_e˝k∑ømëîs
(c⁄° 
EC_GROUP
 *
group
,

376 
ECPKPARAMETERS
 *
∑øms
);

383 
nid
;

384 c⁄° *
commít
;

385 } 
	tEC_buûtö_curve
;

393 
size_t
 
EC_gë_buûtö_curves
(
EC_buûtö_curve
 *
r
, size_à
nôems
);

395 c⁄° *
EC_curve_nid2ni°
(
nid
);

396 
EC_curve_ni°2nid
(c⁄° *
«me
);

406 
EC_POINT
 *
EC_POINT_√w
(c⁄° 
EC_GROUP
 *
group
);

411 
EC_POINT_‰ì
(
EC_POINT
 *
poöt
);

416 
EC_POINT_˛ór_‰ì
(
EC_POINT
 *
poöt
);

423 
EC_POINT_c›y
(
EC_POINT
 *
d°
, c⁄° EC_POINT *
§c
);

431 
EC_POINT
 *
EC_POINT_dup
(c⁄° EC_POINT *
§c
, c⁄° 
EC_GROUP
 *
group
);

437 c⁄° 
EC_METHOD
 *
EC_POINT_mëhod_of
(c⁄° 
EC_POINT
 *
poöt
);

444 
EC_POINT_£t_to_öföôy
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
poöt
);

455 
EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

456 
EC_POINT
 *
p
, c⁄° 
BIGNUM
 *
x
,

457 c⁄° 
BIGNUM
 *
y
, c⁄° BIGNUM *
z
,

458 
BN_CTX
 *
˘x
);

469 
EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

470 c⁄° 
EC_POINT
 *
p
, 
BIGNUM
 *
x
,

471 
BIGNUM
 *
y
, BIGNUM *
z
,

472 
BN_CTX
 *
˘x
);

482 
EC_POINT_£t_afföe_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

483 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
,

484 
BN_CTX
 *
˘x
);

494 
EC_POINT_gë_afföe_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

495 c⁄° 
EC_POINT
 *
p
, 
BIGNUM
 *
x
,

496 
BIGNUM
 *
y
, 
BN_CTX
 *
˘x
);

506 
EC_POINT_£t_com¥es£d_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

507 
EC_POINT
 *
p
, c⁄° 
BIGNUM
 *
x
,

508 
y_bô
, 
BN_CTX
 *
˘x
);

509 #i‚de‡
OPENSSL_NO_EC2M


518 
EC_POINT_£t_afföe_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

519 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
,

520 
BN_CTX
 *
˘x
);

530 
EC_POINT_gë_afföe_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *
group
,

531 c⁄° 
EC_POINT
 *
p
, 
BIGNUM
 *
x
,

532 
BIGNUM
 *
y
, 
BN_CTX
 *
˘x
);

542 
EC_POINT_£t_com¥es£d_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *
group
,

543 
EC_POINT
 *
p
, c⁄° 
BIGNUM
 *
x
,

544 
y_bô
, 
BN_CTX
 *
˘x
);

556 
size_t
 
EC_POINT_poöt2o˘
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
p
,

557 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
,

558 *
buf
, 
size_t
 
Àn
, 
BN_CTX
 *
˘x
);

568 
EC_POINT_o˘2poöt
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

569 c⁄° *
buf
, 
size_t
 
Àn
, 
BN_CTX
 *
˘x
);

581 
size_t
 
EC_POINT_poöt2buf
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
poöt
,

582 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
,

583 **
pbuf
, 
BN_CTX
 *
˘x
);

586 
BIGNUM
 *
EC_POINT_poöt2bn
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *,

587 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
, 
BIGNUM
 *, 
BN_CTX
 *);

588 
EC_POINT
 *
EC_POINT_bn2poöt
(c⁄° 
EC_GROUP
 *, c⁄° 
BIGNUM
 *,

589 
EC_POINT
 *, 
BN_CTX
 *);

590 *
EC_POINT_poöt2hex
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *,

591 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
, 
BN_CTX
 *);

592 
EC_POINT
 *
EC_POINT_hex2poöt
(c⁄° 
EC_GROUP
 *, const *,

593 
EC_POINT
 *, 
BN_CTX
 *);

607 
EC_POINT_add
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° EC_POINT *
a
,

608 c⁄° 
EC_POINT
 *
b
, 
BN_CTX
 *
˘x
);

617 
EC_POINT_dbl
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° EC_POINT *
a
,

618 
BN_CTX
 *
˘x
);

626 
EC_POINT_övît
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
a
, 
BN_CTX
 *
˘x
);

633 
EC_POINT_is_©_öföôy
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
p
);

641 
EC_POINT_is_⁄_curve
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
poöt
,

642 
BN_CTX
 *
˘x
);

651 
EC_POINT_cmp
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
a
, c⁄° EC_POINT *
b
,

652 
BN_CTX
 *
˘x
);

654 
EC_POINT_make_afföe
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
poöt
, 
BN_CTX
 *
˘x
);

655 
EC_POINTs_make_afföe
(c⁄° 
EC_GROUP
 *
group
, 
size_t
 
num
,

656 
EC_POINT
 *
poöts
[], 
BN_CTX
 *
˘x
);

668 
EC_POINTs_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
n
,

669 
size_t
 
num
, c⁄° 
EC_POINT
 *
p
[], c⁄° 
BIGNUM
 *
m
[],

670 
BN_CTX
 *
˘x
);

681 
EC_POINT_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
n
,

682 c⁄° 
EC_POINT
 *
q
, c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

689 
EC_GROUP_¥ecompuã_mu…
(
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

695 
EC_GROUP_have_¥ecompuã_mu…
(c⁄° 
EC_GROUP
 *
group
);

701 
DECLARE_ASN1_ITEM
(
ECPKPARAMETERS
)

702 
DECLARE_ASN1_ITEM
(
ECPARAMETERS
)

708 
EC_GROUP_gë_basis_ty≥
(c⁄° 
EC_GROUP
 *);

709 #i‚de‡
OPENSSL_NO_EC2M


710 
EC_GROUP_gë_åöomül_basis
(c⁄° 
EC_GROUP
 *, *
k
);

711 
EC_GROUP_gë_≥¡™omül_basis
(c⁄° 
EC_GROUP
 *, *
k1
,

712 *
k2
, *
k3
);

715 
	#OPENSSL_EC_EXPLICIT_CURVE
 0x000

	)

716 
	#OPENSSL_EC_NAMED_CURVE
 0x001

	)

718 
EC_GROUP
 *
d2i_ECPKP¨amëîs
(EC_GROUP **, c⁄° **
ö
, 
Àn
);

719 
i2d_ECPKP¨amëîs
(c⁄° 
EC_GROUP
 *, **
out
);

721 
	#d2i_ECPKP¨amëîs_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
EC_GROUP
,
NULL
,
d2i_ECPKP¨amëîs
,bp,x)

	)

722 
	#i2d_ECPKP¨amëîs_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
EC_GROUP
,
i2d_ECPKP¨amëîs
,bp,x)

	)

723 
	#d2i_ECPKP¨amëîs_Â
(
Â
,
x
Ë(
EC_GROUP
 *)
	`ASN1_d2i_Â
(
NULL
, \

724 (*(*)())
d2i_ECPKP¨amëîs
,(
Â
),(**)(
x
))

	)

725 
	#i2d_ECPKP¨amëîs_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_ECPKP¨amëîs
,(fp), \

726 (*)(
x
))

	)

728 
ECPKP¨amëîs_¥öt
(
BIO
 *
bp
, c⁄° 
EC_GROUP
 *
x
, 
off
);

729 #i‚de‡
OPENSSL_NO_STDIO


730 
ECPKP¨amëîs_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_GROUP
 *
x
, 
off
);

738 
	#EC_PKEY_NO_PARAMETERS
 0x001

	)

739 
	#EC_PKEY_NO_PUBKEY
 0x002

	)

742 
	#EC_FLAG_NON_FIPS_ALLOW
 0x1

	)

743 
	#EC_FLAG_FIPS_CHECKED
 0x2

	)

744 
	#EC_FLAG_COFACTOR_ECDH
 0x1000

	)

749 
EC_KEY
 *
EC_KEY_√w
();

751 
EC_KEY_gë_Êags
(c⁄° 
EC_KEY
 *
key
);

753 
EC_KEY_£t_Êags
(
EC_KEY
 *
key
, 
Êags
);

755 
EC_KEY_˛ór_Êags
(
EC_KEY
 *
key
, 
Êags
);

762 
EC_KEY
 *
EC_KEY_√w_by_curve_«me
(
nid
);

767 
EC_KEY_‰ì
(
EC_KEY
 *
key
);

774 
EC_KEY
 *
EC_KEY_c›y
(EC_KEY *
d°
, EC_KEY *
§c
);

780 
EC_KEY
 *
EC_KEY_dup
(EC_KEY *
§c
);

786 
EC_KEY_up_ªf
(
EC_KEY
 *
key
);

792 c⁄° 
EC_GROUP
 *
EC_KEY_gë0_group
(c⁄° 
EC_KEY
 *
key
);

800 
EC_KEY_£t_group
(
EC_KEY
 *
key
, c⁄° 
EC_GROUP
 *
group
);

806 c⁄° 
BIGNUM
 *
EC_KEY_gë0_¥iv©e_key
(c⁄° 
EC_KEY
 *
key
);

814 
EC_KEY_£t_¥iv©e_key
(
EC_KEY
 *
key
, c⁄° 
BIGNUM
 *
¥v
);

820 c⁄° 
EC_POINT
 *
EC_KEY_gë0_public_key
(c⁄° 
EC_KEY
 *
key
);

828 
EC_KEY_£t_public_key
(
EC_KEY
 *
key
, c⁄° 
EC_POINT
 *
pub
);

830 
EC_KEY_gë_íc_Êags
(c⁄° 
EC_KEY
 *
key
);

831 
EC_KEY_£t_íc_Êags
(
EC_KEY
 *
eckey
, 
Êags
);

832 
poöt_c⁄vîsi⁄_f‹m_t
 
EC_KEY_gë_c⁄v_f‹m
(c⁄° 
EC_KEY
 *
key
);

833 
EC_KEY_£t_c⁄v_f‹m
(
EC_KEY
 *
eckey
, 
poöt_c⁄vîsi⁄_f‹m_t
 
cf‹m
);

835 
	#EC_KEY_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

836 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_EC_KEY
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

837 
EC_KEY_£t_ex_d©a
(
EC_KEY
 *
key
, 
idx
, *
¨g
);

838 *
EC_KEY_gë_ex_d©a
(c⁄° 
EC_KEY
 *
key
, 
idx
);

841 
EC_KEY_£t_a¢1_Êag
(
EC_KEY
 *
eckey
, 
a¢1_Êag
);

849 
EC_KEY_¥ecompuã_mu…
(
EC_KEY
 *
key
, 
BN_CTX
 *
˘x
);

855 
EC_KEY_gíî©e_key
(
EC_KEY
 *
key
);

861 
EC_KEY_check_key
(c⁄° 
EC_KEY
 *
key
);

867 
EC_KEY_ˇn_sign
(c⁄° 
EC_KEY
 *
eckey
);

876 
EC_KEY_£t_public_key_afföe_co‹dö©es
(
EC_KEY
 *
key
, 
BIGNUM
 *
x
,

877 
BIGNUM
 *
y
);

888 
size_t
 
EC_KEY_key2buf
(c⁄° 
EC_KEY
 *
key
, 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
,

889 **
pbuf
, 
BN_CTX
 *
˘x
);

899 
EC_KEY_o˘2key
(
EC_KEY
 *
key
, c⁄° *
buf
, 
size_t
 
Àn
,

900 
BN_CTX
 *
˘x
);

909 
EC_KEY_o˘2¥iv
(
EC_KEY
 *
key
, *
buf
, 
size_t
 
Àn
);

919 
size_t
 
EC_KEY_¥iv2o˘
(c⁄° 
EC_KEY
 *
key
, *
buf
, size_à
Àn
);

927 
size_t
 
EC_KEY_¥iv2buf
(c⁄° 
EC_KEY
 *
eckey
, **
pbuf
);

939 
EC_KEY
 *
d2i_ECPriv©eKey
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

947 
i2d_ECPriv©eKey
(
EC_KEY
 *
key
, **
out
);

960 
EC_KEY
 *
d2i_ECP¨amëîs
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

968 
i2d_ECP¨amëîs
(
EC_KEY
 *
key
, **
out
);

982 
EC_KEY
 *
o2i_ECPublicKey
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

990 
i2o_ECPublicKey
(
EC_KEY
 *
key
, **
out
);

997 
ECP¨amëîs_¥öt
(
BIO
 *
bp
, c⁄° 
EC_KEY
 *
key
);

1005 
EC_KEY_¥öt
(
BIO
 *
bp
, c⁄° 
EC_KEY
 *
key
, 
off
);

1007 #i‚de‡
OPENSSL_NO_STDIO


1013 
ECP¨amëîs_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_KEY
 *
key
);

1021 
EC_KEY_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_KEY
 *
key
, 
off
);

1025 c⁄° 
EC_KEY_METHOD
 *
EC_KEY_O≥nSSL
();

1026 c⁄° 
EC_KEY_METHOD
 *
EC_KEY_gë_deÁu…_mëhod
();

1027 
EC_KEY_£t_deÁu…_mëhod
(c⁄° 
EC_KEY_METHOD
 *
mëh
);

1028 c⁄° 
EC_KEY_METHOD
 *
EC_KEY_gë_mëhod
(c⁄° 
EC_KEY
 *
key
);

1029 
EC_KEY_£t_mëhod
(
EC_KEY
 *
key
, c⁄° 
EC_KEY_METHOD
 *
mëh
);

1030 
EC_KEY
 *
EC_KEY_√w_mëhod
(
ENGINE
 *
ígöe
);

1032 
ECDH_KDF_X9_62
(*
out
, 
size_t
 
ouéí
,

1033 c⁄° *
Z
, 
size_t
 
ZÀn
,

1034 c⁄° *
söfo
, 
size_t
 
söfﬁí
,

1035 c⁄° 
EVP_MD
 *
md
);

1037 
ECDH_compuã_key
(*
out
, 
size_t
 
ouéí
, c⁄° 
EC_POINT
 *
pub_key
,

1038 c⁄° 
EC_KEY
 *
ecdh
,

1039 *(*
KDF
Ë(c⁄° *
ö
, 
size_t
 
öÀn
,

1040 *
out
, 
size_t
 *
ouéí
));

1042 
ECDSA_SIG_°
 
	tECDSA_SIG
;

1047 
ECDSA_SIG
 *
ECDSA_SIG_√w
();

1052 
ECDSA_SIG_‰ì
(
ECDSA_SIG
 *
sig
);

1060 
i2d_ECDSA_SIG
(c⁄° 
ECDSA_SIG
 *
sig
, **
µ
);

1069 
ECDSA_SIG
 *
d2i_ECDSA_SIG
(ECDSA_SIG **
sig
, c⁄° **
µ
, 
Àn
);

1076 
ECDSA_SIG_gë0
(c⁄° 
ECDSA_SIG
 *
sig
, c⁄° 
BIGNUM
 **
¥
, c⁄° BIGNUM **
ps
);

1083 
ECDSA_SIG_£t0
(
ECDSA_SIG
 *
sig
, 
BIGNUM
 *
r
, BIGNUM *
s
);

1092 
ECDSA_SIG
 *
ECDSA_do_sign
(c⁄° *
dg°
, 
dg°_Àn
,

1093 
EC_KEY
 *
eckey
);

1105 
ECDSA_SIG
 *
ECDSA_do_sign_ex
(c⁄° *
dg°
, 
dg°Àn
,

1106 c⁄° 
BIGNUM
 *
köv
, c⁄° BIGNUM *
Ω
,

1107 
EC_KEY
 *
eckey
);

1118 
ECDSA_do_vîify
(c⁄° *
dg°
, 
dg°_Àn
,

1119 c⁄° 
ECDSA_SIG
 *
sig
, 
EC_KEY
 *
eckey
);

1128 
ECDSA_sign_£tup
(
EC_KEY
 *
eckey
, 
BN_CTX
 *
˘x
, 
BIGNUM
 **
köv
, BIGNUM **
Ω
);

1140 
ECDSA_sign
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

1141 *
sig
, *
sigÀn
, 
EC_KEY
 *
eckey
);

1156 
ECDSA_sign_ex
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

1157 *
sig
, *
sigÀn
,

1158 c⁄° 
BIGNUM
 *
köv
, c⁄° BIGNUM *
Ω
, 
EC_KEY
 *
eckey
);

1171 
ECDSA_vîify
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

1172 c⁄° *
sig
, 
sigÀn
, 
EC_KEY
 *
eckey
);

1178 
ECDSA_size
(c⁄° 
EC_KEY
 *
eckey
);

1184 
EC_KEY_METHOD
 *
EC_KEY_METHOD_√w
(c⁄° EC_KEY_METHOD *
mëh
);

1185 
EC_KEY_METHOD_‰ì
(
EC_KEY_METHOD
 *
mëh
);

1186 
EC_KEY_METHOD_£t_öô
(
EC_KEY_METHOD
 *
mëh
,

1187 (*
öô
)(
EC_KEY
 *
key
),

1188 (*
föish
)(
EC_KEY
 *
key
),

1189 (*
c›y
)(
EC_KEY
 *
de°
, c⁄° EC_KEY *
§c
),

1190 (*
£t_group
)(
EC_KEY
 *
key
, c⁄° 
EC_GROUP
 *
gΩ
),

1191 (*
£t_¥iv©e
)(
EC_KEY
 *
key
,

1192 c⁄° 
BIGNUM
 *
¥iv_key
),

1193 (*
£t_public
)(
EC_KEY
 *
key
,

1194 c⁄° 
EC_POINT
 *
pub_key
));

1196 
EC_KEY_METHOD_£t_keygí
(
EC_KEY_METHOD
 *
mëh
,

1197 (*
keygí
)(
EC_KEY
 *
key
));

1199 
EC_KEY_METHOD_£t_compuã_key
(
EC_KEY_METHOD
 *
mëh
,

1200 (*
ckey
)(**
p£c
,

1201 
size_t
 *
p£˛í
,

1202 c⁄° 
EC_POINT
 *
pub_key
,

1203 c⁄° 
EC_KEY
 *
ecdh
));

1205 
EC_KEY_METHOD_£t_sign
(
EC_KEY_METHOD
 *
mëh
,

1206 (*
sign
)(
ty≥
, c⁄° *
dg°
,

1207 
dÀn
, *
sig
,

1208 *
sigÀn
,

1209 c⁄° 
BIGNUM
 *
köv
, c⁄° BIGNUM *
r
,

1210 
EC_KEY
 *
eckey
),

1211 (*
sign_£tup
)(
EC_KEY
 *
eckey
, 
BN_CTX
 *
˘x_ö
,

1212 
BIGNUM
 **
kövp
, BIGNUM **
Ω
),

1213 
ECDSA_SIG
 *(*
sign_sig
)(c⁄° *
dg°
,

1214 
dg°_Àn
,

1215 c⁄° 
BIGNUM
 *
ö_köv
,

1216 c⁄° 
BIGNUM
 *
ö_r
,

1217 
EC_KEY
 *
eckey
));

1219 
EC_KEY_METHOD_£t_vîify
(
EC_KEY_METHOD
 *
mëh
,

1220 (*
vîify
)(
ty≥
, const 

1221 *
dg°
, 
dg°_Àn
,

1222 c⁄° *
sigbuf
,

1223 
sig_Àn
, 
EC_KEY
 *
eckey
),

1224 (*
vîify_sig
)(c⁄° *
dg°
,

1225 
dg°_Àn
,

1226 c⁄° 
ECDSA_SIG
 *
sig
,

1227 
EC_KEY
 *
eckey
));

1229 
EC_KEY_METHOD_gë_öô
(
EC_KEY_METHOD
 *
mëh
,

1230 (**
pöô
)(
EC_KEY
 *
key
),

1231 (**
pföish
)(
EC_KEY
 *
key
),

1232 (**
pc›y
)(
EC_KEY
 *
de°
, c⁄° EC_KEY *
§c
),

1233 (**
p£t_group
)(
EC_KEY
 *
key
,

1234 c⁄° 
EC_GROUP
 *
gΩ
),

1235 (**
p£t_¥iv©e
)(
EC_KEY
 *
key
,

1236 c⁄° 
BIGNUM
 *
¥iv_key
),

1237 (**
p£t_public
)(
EC_KEY
 *
key
,

1238 c⁄° 
EC_POINT
 *
pub_key
));

1240 
EC_KEY_METHOD_gë_keygí
(
EC_KEY_METHOD
 *
mëh
,

1241 (**
pkeygí
)(
EC_KEY
 *
key
));

1243 
EC_KEY_METHOD_gë_compuã_key
(
EC_KEY_METHOD
 *
mëh
,

1244 (**
pck
)(**
p£c
,

1245 
size_t
 *
p£˛í
,

1246 c⁄° 
EC_POINT
 *
pub_key
,

1247 c⁄° 
EC_KEY
 *
ecdh
));

1249 
EC_KEY_METHOD_gë_sign
(
EC_KEY_METHOD
 *
mëh
,

1250 (**
psign
)(
ty≥
, c⁄° *
dg°
,

1251 
dÀn
, *
sig
,

1252 *
sigÀn
,

1253 c⁄° 
BIGNUM
 *
köv
, c⁄° BIGNUM *
r
,

1254 
EC_KEY
 *
eckey
),

1255 (**
psign_£tup
)(
EC_KEY
 *
eckey
, 
BN_CTX
 *
˘x_ö
,

1256 
BIGNUM
 **
kövp
, BIGNUM **
Ω
),

1257 
ECDSA_SIG
 *(**
psign_sig
)(c⁄° *
dg°
,

1258 
dg°_Àn
,

1259 c⁄° 
BIGNUM
 *
ö_köv
,

1260 c⁄° 
BIGNUM
 *
ö_r
,

1261 
EC_KEY
 *
eckey
));

1263 
EC_KEY_METHOD_gë_vîify
(
EC_KEY_METHOD
 *
mëh
,

1264 (**
pvîify
)(
ty≥
, const 

1265 *
dg°
, 
dg°_Àn
,

1266 c⁄° *
sigbuf
,

1267 
sig_Àn
, 
EC_KEY
 *
eckey
),

1268 (**
pvîify_sig
)(c⁄° *
dg°
,

1269 
dg°_Àn
,

1270 c⁄° 
ECDSA_SIG
 *
sig
,

1271 
EC_KEY
 *
eckey
));

1273 
	#ECP¨amëîs_dup
(
x
Ë
	`ASN1_dup_of
(
EC_KEY
,
i2d_ECP¨amëîs
,
d2i_ECP¨amëîs
,x)

	)

1275 #i‚de‡
__˝lu•lus


1276 #i‡
deföed
(
__SUNPRO_C
)

1277 #i‡
__SUNPRO_C
 >= 0x520

1278 #¥agm®
îr‹_mesßges
 (,
E_ARRAY_OF_INCOMPLETE_NONAME
,
E_ARRAY_OF_INCOMPLETE
)

1283 
	#EVP_PKEY_CTX_£t_ec_∑ømgí_curve_nid
(
˘x
, 
nid
) \

1284 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1285 
EVP_PKEY_OP_PARAMGEN
|
EVP_PKEY_OP_KEYGEN
, \

1286 
EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID
, 
nid
, 
NULL
)

	)

1288 
	#EVP_PKEY_CTX_£t_ec_∑øm_íc
(
˘x
, 
Êag
) \

1289 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1290 
EVP_PKEY_OP_PARAMGEN
|
EVP_PKEY_OP_KEYGEN
, \

1291 
EVP_PKEY_CTRL_EC_PARAM_ENC
, 
Êag
, 
NULL
)

	)

1293 
	#EVP_PKEY_CTX_£t_ecdh_coÁ˘‹_mode
(
˘x
, 
Êag
) \

1294 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1295 
EVP_PKEY_OP_DERIVE
, \

1296 
EVP_PKEY_CTRL_EC_ECDH_COFACTOR
, 
Êag
, 
NULL
)

	)

1298 
	#EVP_PKEY_CTX_gë_ecdh_coÁ˘‹_mode
(
˘x
) \

1299 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1300 
EVP_PKEY_OP_DERIVE
, \

1301 
EVP_PKEY_CTRL_EC_ECDH_COFACTOR
, -2, 
NULL
)

	)

1303 
	#EVP_PKEY_CTX_£t_ecdh_kdf_ty≥
(
˘x
, 
kdf
) \

1304 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1305 
EVP_PKEY_OP_DERIVE
, \

1306 
EVP_PKEY_CTRL_EC_KDF_TYPE
, 
kdf
, 
NULL
)

	)

1308 
	#EVP_PKEY_CTX_gë_ecdh_kdf_ty≥
(
˘x
) \

1309 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1310 
EVP_PKEY_OP_DERIVE
, \

1311 
EVP_PKEY_CTRL_EC_KDF_TYPE
, -2, 
NULL
)

	)

1313 
	#EVP_PKEY_CTX_£t_ecdh_kdf_md
(
˘x
, 
md
) \

1314 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1315 
EVP_PKEY_OP_DERIVE
, \

1316 
EVP_PKEY_CTRL_EC_KDF_MD
, 0, (*)
md
)

	)

1318 
	#EVP_PKEY_CTX_gë_ecdh_kdf_md
(
˘x
, 
pmd
) \

1319 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1320 
EVP_PKEY_OP_DERIVE
, \

1321 
EVP_PKEY_CTRL_GET_EC_KDF_MD
, 0, (*)
pmd
)

	)

1323 
	#EVP_PKEY_CTX_£t_ecdh_kdf_ouéí
(
˘x
, 
Àn
) \

1324 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1325 
EVP_PKEY_OP_DERIVE
, \

1326 
EVP_PKEY_CTRL_EC_KDF_OUTLEN
, 
Àn
, 
NULL
)

	)

1328 
	#EVP_PKEY_CTX_gë_ecdh_kdf_ouéí
(
˘x
, 
∂í
) \

1329 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1330 
EVP_PKEY_OP_DERIVE
, \

1331 
EVP_PKEY_CTRL_GET_EC_KDF_OUTLEN
, 0, (*)
∂í
)

	)

1333 
	#EVP_PKEY_CTX_£t0_ecdh_kdf_ukm
(
˘x
, 
p
, 
∂í
) \

1334 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1335 
EVP_PKEY_OP_DERIVE
, \

1336 
EVP_PKEY_CTRL_EC_KDF_UKM
, 
∂í
, (*)
p
)

	)

1338 
	#EVP_PKEY_CTX_gë0_ecdh_kdf_ukm
(
˘x
, 
p
) \

1339 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1340 
EVP_PKEY_OP_DERIVE
, \

1341 
EVP_PKEY_CTRL_GET_EC_KDF_UKM
, 0, (*)
p
)

	)

1343 
	#EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

1344 
	#EVP_PKEY_CTRL_EC_PARAM_ENC
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

1345 
	#EVP_PKEY_CTRL_EC_ECDH_COFACTOR
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

1346 
	#EVP_PKEY_CTRL_EC_KDF_TYPE
 (
EVP_PKEY_ALG_CTRL
 + 4)

	)

1347 
	#EVP_PKEY_CTRL_EC_KDF_MD
 (
EVP_PKEY_ALG_CTRL
 + 5)

	)

1348 
	#EVP_PKEY_CTRL_GET_EC_KDF_MD
 (
EVP_PKEY_ALG_CTRL
 + 6)

	)

1349 
	#EVP_PKEY_CTRL_EC_KDF_OUTLEN
 (
EVP_PKEY_ALG_CTRL
 + 7)

	)

1350 
	#EVP_PKEY_CTRL_GET_EC_KDF_OUTLEN
 (
EVP_PKEY_ALG_CTRL
 + 8)

	)

1351 
	#EVP_PKEY_CTRL_EC_KDF_UKM
 (
EVP_PKEY_ALG_CTRL
 + 9)

	)

1352 
	#EVP_PKEY_CTRL_GET_EC_KDF_UKM
 (
EVP_PKEY_ALG_CTRL
 + 10)

	)

1354 
	#EVP_PKEY_ECDH_KDF_NONE
 1

	)

1355 
	#EVP_PKEY_ECDH_KDF_X9_62
 2

	)

1363 
ERR_lﬂd_EC_°rögs
();

1368 
	#EC_F_BN_TO_FELEM
 224

	)

1369 
	#EC_F_D2I_ECPARAMETERS
 144

	)

1370 
	#EC_F_D2I_ECPKPARAMETERS
 145

	)

1371 
	#EC_F_D2I_ECPRIVATEKEY
 146

	)

1372 
	#EC_F_DO_EC_KEY_PRINT
 221

	)

1373 
	#EC_F_ECDH_CMS_DECRYPT
 238

	)

1374 
	#EC_F_ECDH_CMS_SET_SHARED_INFO
 239

	)

1375 
	#EC_F_ECDH_COMPUTE_KEY
 246

	)

1376 
	#EC_F_ECDH_SIMPLE_COMPUTE_KEY
 257

	)

1377 
	#EC_F_ECDSA_DO_SIGN_EX
 251

	)

1378 
	#EC_F_ECDSA_DO_VERIFY
 252

	)

1379 
	#EC_F_ECDSA_SIGN_EX
 254

	)

1380 
	#EC_F_ECDSA_SIGN_SETUP
 248

	)

1381 
	#EC_F_ECDSA_VERIFY
 253

	)

1382 
	#EC_F_ECKEY_PARAM2TYPE
 223

	)

1383 
	#EC_F_ECKEY_PARAM_DECODE
 212

	)

1384 
	#EC_F_ECKEY_PRIV_DECODE
 213

	)

1385 
	#EC_F_ECKEY_PRIV_ENCODE
 214

	)

1386 
	#EC_F_ECKEY_PUB_DECODE
 215

	)

1387 
	#EC_F_ECKEY_PUB_ENCODE
 216

	)

1388 
	#EC_F_ECKEY_TYPE2PARAM
 220

	)

1389 
	#EC_F_ECPARAMETERS_PRINT
 147

	)

1390 
	#EC_F_ECPARAMETERS_PRINT_FP
 148

	)

1391 
	#EC_F_ECPKPARAMETERS_PRINT
 149

	)

1392 
	#EC_F_ECPKPARAMETERS_PRINT_FP
 150

	)

1393 
	#EC_F_ECP_NISTZ256_GET_AFFINE
 240

	)

1394 
	#EC_F_ECP_NISTZ256_MULT_PRECOMPUTE
 243

	)

1395 
	#EC_F_ECP_NISTZ256_POINTS_MUL
 241

	)

1396 
	#EC_F_ECP_NISTZ256_PRE_COMP_NEW
 244

	)

1397 
	#EC_F_ECP_NISTZ256_WINDOWED_MUL
 242

	)

1398 
	#EC_F_EC_ASN1_GROUP2CURVE
 153

	)

1399 
	#EC_F_EC_ASN1_GROUP2FIELDID
 154

	)

1400 
	#EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY
 208

	)

1401 
	#EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT
 159

	)

1402 
	#EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE
 195

	)

1403 
	#EC_F_EC_GF2M_SIMPLE_OCT2POINT
 160

	)

1404 
	#EC_F_EC_GF2M_SIMPLE_POINT2OCT
 161

	)

1405 
	#EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES
 162

	)

1406 
	#EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES
 163

	)

1407 
	#EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES
 164

	)

1408 
	#EC_F_EC_GFP_MONT_FIELD_DECODE
 133

	)

1409 
	#EC_F_EC_GFP_MONT_FIELD_ENCODE
 134

	)

1410 
	#EC_F_EC_GFP_MONT_FIELD_MUL
 131

	)

1411 
	#EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE
 209

	)

1412 
	#EC_F_EC_GFP_MONT_FIELD_SQR
 132

	)

1413 
	#EC_F_EC_GFP_MONT_GROUP_SET_CURVE
 189

	)

1414 
	#EC_F_EC_GFP_NISTP224_GROUP_SET_CURVE
 225

	)

1415 
	#EC_F_EC_GFP_NISTP224_POINTS_MUL
 228

	)

1416 
	#EC_F_EC_GFP_NISTP224_POINT_GET_AFFINE_COORDINATES
 226

	)

1417 
	#EC_F_EC_GFP_NISTP256_GROUP_SET_CURVE
 230

	)

1418 
	#EC_F_EC_GFP_NISTP256_POINTS_MUL
 231

	)

1419 
	#EC_F_EC_GFP_NISTP256_POINT_GET_AFFINE_COORDINATES
 232

	)

1420 
	#EC_F_EC_GFP_NISTP521_GROUP_SET_CURVE
 233

	)

1421 
	#EC_F_EC_GFP_NISTP521_POINTS_MUL
 234

	)

1422 
	#EC_F_EC_GFP_NISTP521_POINT_GET_AFFINE_COORDINATES
 235

	)

1423 
	#EC_F_EC_GFP_NIST_FIELD_MUL
 200

	)

1424 
	#EC_F_EC_GFP_NIST_FIELD_SQR
 201

	)

1425 
	#EC_F_EC_GFP_NIST_GROUP_SET_CURVE
 202

	)

1426 
	#EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT
 165

	)

1427 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE
 166

	)

1428 
	#EC_F_EC_GFP_SIMPLE_MAKE_AFFINE
 102

	)

1429 
	#EC_F_EC_GFP_SIMPLE_OCT2POINT
 103

	)

1430 
	#EC_F_EC_GFP_SIMPLE_POINT2OCT
 104

	)

1431 
	#EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE
 137

	)

1432 
	#EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES
 167

	)

1433 
	#EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES
 168

	)

1434 
	#EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES
 169

	)

1435 
	#EC_F_EC_GROUP_CHECK
 170

	)

1436 
	#EC_F_EC_GROUP_CHECK_DISCRIMINANT
 171

	)

1437 
	#EC_F_EC_GROUP_COPY
 106

	)

1438 
	#EC_F_EC_GROUP_GET_CURVE_GF2M
 172

	)

1439 
	#EC_F_EC_GROUP_GET_CURVE_GFP
 130

	)

1440 
	#EC_F_EC_GROUP_GET_DEGREE
 173

	)

1441 
	#EC_F_EC_GROUP_GET_ECPARAMETERS
 261

	)

1442 
	#EC_F_EC_GROUP_GET_ECPKPARAMETERS
 262

	)

1443 
	#EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS
 193

	)

1444 
	#EC_F_EC_GROUP_GET_TRINOMIAL_BASIS
 194

	)

1445 
	#EC_F_EC_GROUP_NEW
 108

	)

1446 
	#EC_F_EC_GROUP_NEW_BY_CURVE_NAME
 174

	)

1447 
	#EC_F_EC_GROUP_NEW_FROM_DATA
 175

	)

1448 
	#EC_F_EC_GROUP_NEW_FROM_ECPARAMETERS
 263

	)

1449 
	#EC_F_EC_GROUP_NEW_FROM_ECPKPARAMETERS
 264

	)

1450 
	#EC_F_EC_GROUP_SET_CURVE_GF2M
 176

	)

1451 
	#EC_F_EC_GROUP_SET_CURVE_GFP
 109

	)

1452 
	#EC_F_EC_GROUP_SET_GENERATOR
 111

	)

1453 
	#EC_F_EC_KEY_CHECK_KEY
 177

	)

1454 
	#EC_F_EC_KEY_COPY
 178

	)

1455 
	#EC_F_EC_KEY_GENERATE_KEY
 179

	)

1456 
	#EC_F_EC_KEY_NEW
 182

	)

1457 
	#EC_F_EC_KEY_NEW_METHOD
 245

	)

1458 
	#EC_F_EC_KEY_OCT2PRIV
 255

	)

1459 
	#EC_F_EC_KEY_PRINT
 180

	)

1460 
	#EC_F_EC_KEY_PRINT_FP
 181

	)

1461 
	#EC_F_EC_KEY_PRIV2OCT
 256

	)

1462 
	#EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES
 229

	)

1463 
	#EC_F_EC_KEY_SIMPLE_CHECK_KEY
 258

	)

1464 
	#EC_F_EC_KEY_SIMPLE_OCT2PRIV
 259

	)

1465 
	#EC_F_EC_KEY_SIMPLE_PRIV2OCT
 260

	)

1466 
	#EC_F_EC_POINTS_MAKE_AFFINE
 136

	)

1467 
	#EC_F_EC_POINT_ADD
 112

	)

1468 
	#EC_F_EC_POINT_CMP
 113

	)

1469 
	#EC_F_EC_POINT_COPY
 114

	)

1470 
	#EC_F_EC_POINT_DBL
 115

	)

1471 
	#EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M
 183

	)

1472 
	#EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP
 116

	)

1473 
	#EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP
 117

	)

1474 
	#EC_F_EC_POINT_INVERT
 210

	)

1475 
	#EC_F_EC_POINT_IS_AT_INFINITY
 118

	)

1476 
	#EC_F_EC_POINT_IS_ON_CURVE
 119

	)

1477 
	#EC_F_EC_POINT_MAKE_AFFINE
 120

	)

1478 
	#EC_F_EC_POINT_NEW
 121

	)

1479 
	#EC_F_EC_POINT_OCT2POINT
 122

	)

1480 
	#EC_F_EC_POINT_POINT2OCT
 123

	)

1481 
	#EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M
 185

	)

1482 
	#EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP
 124

	)

1483 
	#EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M
 186

	)

1484 
	#EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP
 125

	)

1485 
	#EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP
 126

	)

1486 
	#EC_F_EC_POINT_SET_TO_INFINITY
 127

	)

1487 
	#EC_F_EC_PRE_COMP_NEW
 196

	)

1488 
	#EC_F_EC_WNAF_MUL
 187

	)

1489 
	#EC_F_EC_WNAF_PRECOMPUTE_MULT
 188

	)

1490 
	#EC_F_I2D_ECPARAMETERS
 190

	)

1491 
	#EC_F_I2D_ECPKPARAMETERS
 191

	)

1492 
	#EC_F_I2D_ECPRIVATEKEY
 192

	)

1493 
	#EC_F_I2O_ECPUBLICKEY
 151

	)

1494 
	#EC_F_NISTP224_PRE_COMP_NEW
 227

	)

1495 
	#EC_F_NISTP256_PRE_COMP_NEW
 236

	)

1496 
	#EC_F_NISTP521_PRE_COMP_NEW
 237

	)

1497 
	#EC_F_O2I_ECPUBLICKEY
 152

	)

1498 
	#EC_F_OLD_EC_PRIV_DECODE
 222

	)

1499 
	#EC_F_OSSL_ECDH_COMPUTE_KEY
 247

	)

1500 
	#EC_F_OSSL_ECDSA_SIGN_SIG
 249

	)

1501 
	#EC_F_OSSL_ECDSA_VERIFY_SIG
 250

	)

1502 
	#EC_F_PKEY_EC_CTRL
 197

	)

1503 
	#EC_F_PKEY_EC_CTRL_STR
 198

	)

1504 
	#EC_F_PKEY_EC_DERIVE
 217

	)

1505 
	#EC_F_PKEY_EC_KEYGEN
 199

	)

1506 
	#EC_F_PKEY_EC_PARAMGEN
 219

	)

1507 
	#EC_F_PKEY_EC_SIGN
 218

	)

1510 
	#EC_R_ASN1_ERROR
 115

	)

1511 
	#EC_R_BAD_SIGNATURE
 156

	)

1512 
	#EC_R_BIGNUM_OUT_OF_RANGE
 144

	)

1513 
	#EC_R_BUFFER_TOO_SMALL
 100

	)

1514 
	#EC_R_COORDINATES_OUT_OF_RANGE
 146

	)

1515 
	#EC_R_CURVE_DOES_NOT_SUPPORT_ECDH
 160

	)

1516 
	#EC_R_CURVE_DOES_NOT_SUPPORT_SIGNING
 159

	)

1517 
	#EC_R_D2I_ECPKPARAMETERS_FAILURE
 117

	)

1518 
	#EC_R_DECODE_ERROR
 142

	)

1519 
	#EC_R_DISCRIMINANT_IS_ZERO
 118

	)

1520 
	#EC_R_EC_GROUP_NEW_BY_NAME_FAILURE
 119

	)

1521 
	#EC_R_FIELD_TOO_LARGE
 143

	)

1522 
	#EC_R_GF2M_NOT_SUPPORTED
 147

	)

1523 
	#EC_R_GROUP2PKPARAMETERS_FAILURE
 120

	)

1524 
	#EC_R_I2D_ECPKPARAMETERS_FAILURE
 121

	)

1525 
	#EC_R_INCOMPATIBLE_OBJECTS
 101

	)

1526 
	#EC_R_INVALID_ARGUMENT
 112

	)

1527 
	#EC_R_INVALID_COMPRESSED_POINT
 110

	)

1528 
	#EC_R_INVALID_COMPRESSION_BIT
 109

	)

1529 
	#EC_R_INVALID_CURVE
 141

	)

1530 
	#EC_R_INVALID_DIGEST
 151

	)

1531 
	#EC_R_INVALID_DIGEST_TYPE
 138

	)

1532 
	#EC_R_INVALID_ENCODING
 102

	)

1533 
	#EC_R_INVALID_FIELD
 103

	)

1534 
	#EC_R_INVALID_FORM
 104

	)

1535 
	#EC_R_INVALID_GROUP_ORDER
 122

	)

1536 
	#EC_R_INVALID_OUTPUT_LENGTH
 161

	)

1537 
	#EC_R_INVALID_PENTANOMIAL_BASIS
 132

	)

1538 
	#EC_R_INVALID_PRIVATE_KEY
 123

	)

1539 
	#EC_R_INVALID_TRINOMIAL_BASIS
 137

	)

1540 
	#EC_R_KDF_PARAMETER_ERROR
 148

	)

1541 
	#EC_R_KEYS_NOT_SET
 140

	)

1542 
	#EC_R_MISSING_PARAMETERS
 124

	)

1543 
	#EC_R_MISSING_PRIVATE_KEY
 125

	)

1544 
	#EC_R_NEED_NEW_SETUP_VALUES
 157

	)

1545 
	#EC_R_NOT_A_NIST_PRIME
 135

	)

1546 
	#EC_R_NOT_IMPLEMENTED
 126

	)

1547 
	#EC_R_NOT_INITIALIZED
 111

	)

1548 
	#EC_R_NO_PARAMETERS_SET
 139

	)

1549 
	#EC_R_NO_PRIVATE_VALUE
 154

	)

1550 
	#EC_R_OPERATION_NOT_SUPPORTED
 152

	)

1551 
	#EC_R_PASSED_NULL_PARAMETER
 134

	)

1552 
	#EC_R_PEER_KEY_ERROR
 149

	)

1553 
	#EC_R_PKPARAMETERS2GROUP_FAILURE
 127

	)

1554 
	#EC_R_POINT_ARITHMETIC_FAILURE
 155

	)

1555 
	#EC_R_POINT_AT_INFINITY
 106

	)

1556 
	#EC_R_POINT_IS_NOT_ON_CURVE
 107

	)

1557 
	#EC_R_RANDOM_NUMBER_GENERATION_FAILED
 158

	)

1558 
	#EC_R_SHARED_INFO_ERROR
 150

	)

1559 
	#EC_R_SLOT_FULL
 108

	)

1560 
	#EC_R_UNDEFINED_GENERATOR
 113

	)

1561 
	#EC_R_UNDEFINED_ORDER
 128

	)

1562 
	#EC_R_UNKNOWN_GROUP
 129

	)

1563 
	#EC_R_UNKNOWN_ORDER
 114

	)

1564 
	#EC_R_UNSUPPORTED_FIELD
 131

	)

1565 
	#EC_R_WRONG_CURVE_PARAMETERS
 145

	)

1566 
	#EC_R_WRONG_ORDER
 130

	)

1568 #ifde‡ 
__˝lu•lus


	@ecdh.h

10 
	~<›ís¶/ec.h
>

	@ecdsa.h

10 
	~<›ís¶/ec.h
>

	@engine.h

16 #i‚de‡
HEADER_ENGINE_H


17 
	#HEADER_ENGINE_H


	)

19 
	~<›ís¶/›ís¶c⁄f.h
>

21 #i‚de‡
OPENSSL_NO_ENGINE


22 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

23 
	~<›ís¶/bn.h
>

24 
	~<›ís¶/rß.h
>

25 
	~<›ís¶/dß.h
>

26 
	~<›ís¶/dh.h
>

27 
	~<›ís¶/ec.h
>

28 
	~<›ís¶/ønd.h
>

29 
	~<›ís¶/ui.h
>

30 
	~<›ís¶/îr.h
>

32 
	~<›ís¶/os¶_typ.h
>

33 
	~<›ís¶/symhacks.h
>

34 
	~<›ís¶/x509.h
>

35 #ifde‡ 
__˝lu•lus


43 
	#ENGINE_METHOD_RSA
 ()0x0001

	)

44 
	#ENGINE_METHOD_DSA
 ()0x0002

	)

45 
	#ENGINE_METHOD_DH
 ()0x0004

	)

46 
	#ENGINE_METHOD_RAND
 ()0x0008

	)

47 
	#ENGINE_METHOD_CIPHERS
 ()0x0040

	)

48 
	#ENGINE_METHOD_DIGESTS
 ()0x0080

	)

49 
	#ENGINE_METHOD_PKEY_METHS
 ()0x0200

	)

50 
	#ENGINE_METHOD_PKEY_ASN1_METHS
 ()0x0400

	)

51 
	#ENGINE_METHOD_EC
 ()0x0800

	)

53 
	#ENGINE_METHOD_ALL
 ()0xFFFF

	)

54 
	#ENGINE_METHOD_NONE
 ()0x0000

	)

62 
	#ENGINE_TABLE_FLAG_NOINIT
 ()0x0001

	)

74 
	#ENGINE_FLAGS_MANUAL_CMD_CTRL
 ()0x0002

	)

86 
	#ENGINE_FLAGS_BY_ID_COPY
 ()0x0004

	)

94 
	#ENGINE_FLAGS_NO_REGISTER_ALL
 ()0x0008

	)

109 
	#ENGINE_CMD_FLAG_NUMERIC
 ()0x0001

	)

114 
	#ENGINE_CMD_FLAG_STRING
 ()0x0002

	)

119 
	#ENGINE_CMD_FLAG_NO_INPUT
 ()0x0004

	)

125 
	#ENGINE_CMD_FLAG_INTERNAL
 ()0x0008

	)

144 
	#ENGINE_CTRL_SET_LOGSTREAM
 1

	)

145 
	#ENGINE_CTRL_SET_PASSWORD_CALLBACK
 2

	)

146 
	#ENGINE_CTRL_HUP
 3

	)

149 
	#ENGINE_CTRL_SET_USER_INTERFACE
 4

	)

150 
	#ENGINE_CTRL_SET_CALLBACK_DATA
 5

	)

154 
	#ENGINE_CTRL_LOAD_CONFIGURATION
 6

	)

158 
	#ENGINE_CTRL_LOAD_SECTION
 7

	)

182 
	#ENGINE_CTRL_HAS_CTRL_FUNCTION
 10

	)

187 
	#ENGINE_CTRL_GET_FIRST_CMD_TYPE
 11

	)

192 
	#ENGINE_CTRL_GET_NEXT_CMD_TYPE
 12

	)

197 
	#ENGINE_CTRL_GET_CMD_FROM_NAME
 13

	)

206 
	#ENGINE_CTRL_GET_NAME_LEN_FROM_CMD
 14

	)

207 
	#ENGINE_CTRL_GET_NAME_FROM_CMD
 15

	)

209 
	#ENGINE_CTRL_GET_DESC_LEN_FROM_CMD
 16

	)

210 
	#ENGINE_CTRL_GET_DESC_FROM_CMD
 17

	)

216 
	#ENGINE_CTRL_GET_CMD_FLAGS
 18

	)

222 
	#ENGINE_CMD_BASE
 200

	)

233 
	#ENGINE_CTRL_CHIL_SET_FORKCHECK
 100

	)

239 
	#ENGINE_CTRL_CHIL_NO_LOCKING
 101

	)

255 
	sENGINE_CMD_DEFN_°
 {

256 
cmd_num
;

257 c⁄° *
cmd_«me
;

258 c⁄° *
cmd_desc
;

259 
cmd_Êags
;

260 } 
	tENGINE_CMD_DEFN
;

263 (*
ENGINE_GEN_FUNC_PTR
) ();

265 (*
ENGINE_GEN_INT_FUNC_PTR
Ë(
	tENGINE
 *);

267 (*
ENGINE_CTRL_FUNC_PTR
Ë(
	tENGINE
 *, , , *,

268 (*
	tf
) ());

270 
EVP_PKEY
 *(*
	tENGINE_LOAD_KEY_PTR
)(
	tENGINE
 *, const *,

271 
	tUI_METHOD
 *
	tui_mëhod
,

272 *
	tˇŒback_d©a
);

273 (*
ENGINE_SSL_CLIENT_CERT_PTR
Ë(
	tENGINE
 *, 
	tSSL
 *
	ts¶
,

274 
	tSTACK_OF
(
	tX509_NAME
Ë*
	tˇ_dn
,

275 
	tX509
 **
	tp˚π
, 
	tEVP_PKEY
 **
	tpkey
,

276 
	tSTACK_OF
(
	tX509
Ë**
	tpŸhî
,

277 
	tUI_METHOD
 *
	tui_mëhod
,

278 *
	tˇŒback_d©a
);

294 (*
ENGINE_CIPHERS_PTR
Ë(
	tENGINE
 *, c⁄° 
	tEVP_CIPHER
 **,

296 (*
ENGINE_DIGESTS_PTR
Ë(
	tENGINE
 *, c⁄° 
	tEVP_MD
 **, const **,

298 (*
ENGINE_PKEY_METHS_PTR
Ë(
	tENGINE
 *, 
	tEVP_PKEY_METHOD
 **,

300 (*
ENGINE_PKEY_ASN1_METHS_PTR
Ë(
	tENGINE
 *, 
	tEVP_PKEY_ASN1_METHOD
 **,

315 
ENGINE
 *
ENGINE_gë_fú°
();

316 
ENGINE
 *
ENGINE_gë_œ°
();

318 
ENGINE
 *
ENGINE_gë_√xt
(ENGINE *
e
);

319 
ENGINE
 *
ENGINE_gë_¥ev
(ENGINE *
e
);

321 
ENGINE_add
(
ENGINE
 *
e
);

323 
ENGINE_ªmove
(
ENGINE
 *
e
);

325 
ENGINE
 *
ENGINE_by_id
(c⁄° *
id
);

327 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

328 
	#ENGINE_lﬂd_›ís¶
() \

329 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ENGINE_OPENSSL
, 
NULL
)

	)

330 
	#ENGINE_lﬂd_dy«mic
() \

331 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ENGINE_DYNAMIC
, 
NULL
)

	)

332 #i‚de‡
OPENSSL_NO_STATIC_ENGINE


333 
	#ENGINE_lﬂd_∑dlock
() \

334 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ENGINE_PADLOCK
, 
NULL
)

	)

335 
	#ENGINE_lﬂd_ˇpi
() \

336 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ENGINE_CAPI
, 
NULL
)

	)

337 
	#ENGINE_lﬂd_dasync
() \

338 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ENGINE_DASYNC
, 
NULL
)

	)

339 
	#ENGINE_lﬂd_aÁlg
() \

340 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ENGINE_AFALG
, 
NULL
)

	)

342 
	#ENGINE_lﬂd_¸y±odev
() \

343 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ENGINE_CRYPTODEV
, 
NULL
)

	)

344 
	#ENGINE_lﬂd_rdønd
() \

345 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ENGINE_RDRAND
, 
NULL
)

	)

347 
ENGINE_lﬂd_buûtö_ígöes
();

353 
ENGINE_gë_èbÀ_Êags
();

354 
ENGINE_£t_èbÀ_Êags
(
Êags
);

364 
ENGINE_ªgi°î_RSA
(
ENGINE
 *
e
);

365 
ENGINE_uƒegi°î_RSA
(
ENGINE
 *
e
);

366 
ENGINE_ªgi°î_Æl_RSA
();

368 
ENGINE_ªgi°î_DSA
(
ENGINE
 *
e
);

369 
ENGINE_uƒegi°î_DSA
(
ENGINE
 *
e
);

370 
ENGINE_ªgi°î_Æl_DSA
();

372 
ENGINE_ªgi°î_EC
(
ENGINE
 *
e
);

373 
ENGINE_uƒegi°î_EC
(
ENGINE
 *
e
);

374 
ENGINE_ªgi°î_Æl_EC
();

376 
ENGINE_ªgi°î_DH
(
ENGINE
 *
e
);

377 
ENGINE_uƒegi°î_DH
(
ENGINE
 *
e
);

378 
ENGINE_ªgi°î_Æl_DH
();

380 
ENGINE_ªgi°î_RAND
(
ENGINE
 *
e
);

381 
ENGINE_uƒegi°î_RAND
(
ENGINE
 *
e
);

382 
ENGINE_ªgi°î_Æl_RAND
();

384 
ENGINE_ªgi°î_cùhîs
(
ENGINE
 *
e
);

385 
ENGINE_uƒegi°î_cùhîs
(
ENGINE
 *
e
);

386 
ENGINE_ªgi°î_Æl_cùhîs
();

388 
ENGINE_ªgi°î_dige°s
(
ENGINE
 *
e
);

389 
ENGINE_uƒegi°î_dige°s
(
ENGINE
 *
e
);

390 
ENGINE_ªgi°î_Æl_dige°s
();

392 
ENGINE_ªgi°î_pkey_mëhs
(
ENGINE
 *
e
);

393 
ENGINE_uƒegi°î_pkey_mëhs
(
ENGINE
 *
e
);

394 
ENGINE_ªgi°î_Æl_pkey_mëhs
();

396 
ENGINE_ªgi°î_pkey_a¢1_mëhs
(
ENGINE
 *
e
);

397 
ENGINE_uƒegi°î_pkey_a¢1_mëhs
(
ENGINE
 *
e
);

398 
ENGINE_ªgi°î_Æl_pkey_a¢1_mëhs
();

406 
ENGINE_ªgi°î_com∂ëe
(
ENGINE
 *
e
);

407 
ENGINE_ªgi°î_Æl_com∂ëe
();

419 
ENGINE_˘æ
(
ENGINE
 *
e
, 
cmd
, 
i
, *
p
, (*
f
) ());

427 
ENGINE_cmd_is_execuèbÀ
(
ENGINE
 *
e
, 
cmd
);

435 
ENGINE_˘æ_cmd
(
ENGINE
 *
e
, c⁄° *
cmd_«me
,

436 
i
, *
p
, (*
f
Ë(), 
cmd_›ti⁄Æ
);

460 
ENGINE_˘æ_cmd_°rög
(
ENGINE
 *
e
, c⁄° *
cmd_«me
, c⁄° *
¨g
,

461 
cmd_›ti⁄Æ
);

471 
ENGINE
 *
ENGINE_√w
();

472 
ENGINE_‰ì
(
ENGINE
 *
e
);

473 
ENGINE_up_ªf
(
ENGINE
 *
e
);

474 
ENGINE_£t_id
(
ENGINE
 *
e
, c⁄° *
id
);

475 
ENGINE_£t_«me
(
ENGINE
 *
e
, c⁄° *
«me
);

476 
ENGINE_£t_RSA
(
ENGINE
 *
e
, c⁄° 
RSA_METHOD
 *
rß_mëh
);

477 
ENGINE_£t_DSA
(
ENGINE
 *
e
, c⁄° 
DSA_METHOD
 *
dß_mëh
);

478 
ENGINE_£t_EC
(
ENGINE
 *
e
, c⁄° 
EC_KEY_METHOD
 *
ecdß_mëh
);

479 
ENGINE_£t_DH
(
ENGINE
 *
e
, c⁄° 
DH_METHOD
 *
dh_mëh
);

480 
ENGINE_£t_RAND
(
ENGINE
 *
e
, c⁄° 
RAND_METHOD
 *
ønd_mëh
);

481 
ENGINE_£t_de°roy_fun˘i⁄
(
ENGINE
 *
e
, 
ENGINE_GEN_INT_FUNC_PTR
 
de°roy_f
);

482 
ENGINE_£t_öô_fun˘i⁄
(
ENGINE
 *
e
, 
ENGINE_GEN_INT_FUNC_PTR
 
öô_f
);

483 
ENGINE_£t_föish_fun˘i⁄
(
ENGINE
 *
e
, 
ENGINE_GEN_INT_FUNC_PTR
 
föish_f
);

484 
ENGINE_£t_˘æ_fun˘i⁄
(
ENGINE
 *
e
, 
ENGINE_CTRL_FUNC_PTR
 
˘æ_f
);

485 
ENGINE_£t_lﬂd_¥ivkey_fun˘i⁄
(
ENGINE
 *
e
,

486 
ENGINE_LOAD_KEY_PTR
 
lﬂd¥iv_f
);

487 
ENGINE_£t_lﬂd_pubkey_fun˘i⁄
(
ENGINE
 *
e
, 
ENGINE_LOAD_KEY_PTR
 
lﬂdpub_f
);

488 
ENGINE_£t_lﬂd_s¶_˛õ¡_˚π_fun˘i⁄
(
ENGINE
 *
e
,

489 
ENGINE_SSL_CLIENT_CERT_PTR


490 
lﬂds¶_f
);

491 
ENGINE_£t_cùhîs
(
ENGINE
 *
e
, 
ENGINE_CIPHERS_PTR
 
f
);

492 
ENGINE_£t_dige°s
(
ENGINE
 *
e
, 
ENGINE_DIGESTS_PTR
 
f
);

493 
ENGINE_£t_pkey_mëhs
(
ENGINE
 *
e
, 
ENGINE_PKEY_METHS_PTR
 
f
);

494 
ENGINE_£t_pkey_a¢1_mëhs
(
ENGINE
 *
e
, 
ENGINE_PKEY_ASN1_METHS_PTR
 
f
);

495 
ENGINE_£t_Êags
(
ENGINE
 *
e
, 
Êags
);

496 
ENGINE_£t_cmd_de‚s
(
ENGINE
 *
e
, c⁄° 
ENGINE_CMD_DEFN
 *
de‚s
);

498 
	#ENGINE_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

499 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_ENGINE
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

500 
ENGINE_£t_ex_d©a
(
ENGINE
 *
e
, 
idx
, *
¨g
);

501 *
ENGINE_gë_ex_d©a
(c⁄° 
ENGINE
 *
e
, 
idx
);

503 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

508 
	#ENGINE_˛ónup
(Ë0Ë

	)

517 c⁄° *
ENGINE_gë_id
(c⁄° 
ENGINE
 *
e
);

518 c⁄° *
ENGINE_gë_«me
(c⁄° 
ENGINE
 *
e
);

519 c⁄° 
RSA_METHOD
 *
ENGINE_gë_RSA
(c⁄° 
ENGINE
 *
e
);

520 c⁄° 
DSA_METHOD
 *
ENGINE_gë_DSA
(c⁄° 
ENGINE
 *
e
);

521 c⁄° 
EC_KEY_METHOD
 *
ENGINE_gë_EC
(c⁄° 
ENGINE
 *
e
);

522 c⁄° 
DH_METHOD
 *
ENGINE_gë_DH
(c⁄° 
ENGINE
 *
e
);

523 c⁄° 
RAND_METHOD
 *
ENGINE_gë_RAND
(c⁄° 
ENGINE
 *
e
);

524 
ENGINE_GEN_INT_FUNC_PTR
 
ENGINE_gë_de°roy_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

525 
ENGINE_GEN_INT_FUNC_PTR
 
ENGINE_gë_öô_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

526 
ENGINE_GEN_INT_FUNC_PTR
 
ENGINE_gë_föish_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

527 
ENGINE_CTRL_FUNC_PTR
 
ENGINE_gë_˘æ_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

528 
ENGINE_LOAD_KEY_PTR
 
ENGINE_gë_lﬂd_¥ivkey_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

529 
ENGINE_LOAD_KEY_PTR
 
ENGINE_gë_lﬂd_pubkey_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

530 
ENGINE_SSL_CLIENT_CERT_PTR
 
ENGINE_gë_s¶_˛õ¡_˚π_fun˘i⁄
(c⁄° 
ENGINE


531 *
e
);

532 
ENGINE_CIPHERS_PTR
 
ENGINE_gë_cùhîs
(c⁄° 
ENGINE
 *
e
);

533 
ENGINE_DIGESTS_PTR
 
ENGINE_gë_dige°s
(c⁄° 
ENGINE
 *
e
);

534 
ENGINE_PKEY_METHS_PTR
 
ENGINE_gë_pkey_mëhs
(c⁄° 
ENGINE
 *
e
);

535 
ENGINE_PKEY_ASN1_METHS_PTR
 
ENGINE_gë_pkey_a¢1_mëhs
(c⁄° 
ENGINE
 *
e
);

536 c⁄° 
EVP_CIPHER
 *
ENGINE_gë_cùhî
(
ENGINE
 *
e
, 
nid
);

537 c⁄° 
EVP_MD
 *
ENGINE_gë_dige°
(
ENGINE
 *
e
, 
nid
);

538 c⁄° 
EVP_PKEY_METHOD
 *
ENGINE_gë_pkey_mëh
(
ENGINE
 *
e
, 
nid
);

539 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
ENGINE_gë_pkey_a¢1_mëh
(
ENGINE
 *
e
, 
nid
);

540 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
ENGINE_gë_pkey_a¢1_mëh_°r
(
ENGINE
 *
e
,

541 c⁄° *
°r
,

542 
Àn
);

543 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
ENGINE_pkey_a¢1_föd_°r
(
ENGINE
 **
≥
,

544 c⁄° *
°r
,

545 
Àn
);

546 c⁄° 
ENGINE_CMD_DEFN
 *
ENGINE_gë_cmd_de‚s
(c⁄° 
ENGINE
 *
e
);

547 
ENGINE_gë_Êags
(c⁄° 
ENGINE
 *
e
);

567 
ENGINE_öô
(
ENGINE
 *
e
);

573 
ENGINE_föish
(
ENGINE
 *
e
);

580 
EVP_PKEY
 *
ENGINE_lﬂd_¥iv©e_key
(
ENGINE
 *
e
, c⁄° *
key_id
,

581 
UI_METHOD
 *
ui_mëhod
, *
ˇŒback_d©a
);

582 
EVP_PKEY
 *
ENGINE_lﬂd_public_key
(
ENGINE
 *
e
, c⁄° *
key_id
,

583 
UI_METHOD
 *
ui_mëhod
, *
ˇŒback_d©a
);

584 
ENGINE_lﬂd_s¶_˛õ¡_˚π
(
ENGINE
 *
e
, 
SSL
 *
s
,

585 
STACK_OF
(
X509_NAME
Ë*
ˇ_dn
, 
X509
 **
p˚π
,

586 
EVP_PKEY
 **
µkey
, 
STACK_OF
(
X509
Ë**
pŸhî
,

587 
UI_METHOD
 *
ui_mëhod
, *
ˇŒback_d©a
);

595 
ENGINE
 *
ENGINE_gë_deÁu…_RSA
();

597 
ENGINE
 *
ENGINE_gë_deÁu…_DSA
();

598 
ENGINE
 *
ENGINE_gë_deÁu…_EC
();

599 
ENGINE
 *
ENGINE_gë_deÁu…_DH
();

600 
ENGINE
 *
ENGINE_gë_deÁu…_RAND
();

605 
ENGINE
 *
ENGINE_gë_cùhî_ígöe
(
nid
);

606 
ENGINE
 *
ENGINE_gë_dige°_ígöe
(
nid
);

607 
ENGINE
 *
ENGINE_gë_pkey_mëh_ígöe
(
nid
);

608 
ENGINE
 *
ENGINE_gë_pkey_a¢1_mëh_ígöe
(
nid
);

616 
ENGINE_£t_deÁu…_RSA
(
ENGINE
 *
e
);

617 
ENGINE_£t_deÁu…_°rög
(
ENGINE
 *
e
, c⁄° *
def_li°
);

619 
ENGINE_£t_deÁu…_DSA
(
ENGINE
 *
e
);

620 
ENGINE_£t_deÁu…_EC
(
ENGINE
 *
e
);

621 
ENGINE_£t_deÁu…_DH
(
ENGINE
 *
e
);

622 
ENGINE_£t_deÁu…_RAND
(
ENGINE
 *
e
);

623 
ENGINE_£t_deÁu…_cùhîs
(
ENGINE
 *
e
);

624 
ENGINE_£t_deÁu…_dige°s
(
ENGINE
 *
e
);

625 
ENGINE_£t_deÁu…_pkey_mëhs
(
ENGINE
 *
e
);

626 
ENGINE_£t_deÁu…_pkey_a¢1_mëhs
(
ENGINE
 *
e
);

635 
ENGINE_£t_deÁu…
(
ENGINE
 *
e
, 
Êags
);

637 
ENGINE_add_c⁄f_moduÀ
();

647 
	#OSSL_DYNAMIC_VERSION
 ()0x00030000

	)

652 
	#OSSL_DYNAMIC_OLDEST
 ()0x00030000

	)

665 *(*
	tdyn_MEM_mÆloc_‚
Ë(
	tsize_t
, const *, );

666 *(*
	tdyn_MEM_ªÆloc_‚
Ë(*, 
	tsize_t
, const *, );

667 (*
dyn_MEM_‰ì_‚
) (*, const *, );

668 
	s°_dy«mic_MEM_‚s
 {

669 
dyn_MEM_mÆloc_‚
 
mÆloc_‚
;

670 
dyn_MEM_ªÆloc_‚
 
ªÆloc_‚
;

671 
dyn_MEM_‰ì_‚
 
‰ì_‚
;

672 } 
	tdy«mic_MEM_‚s
;

678 
	s°_dy«mic_‚s
 {

679 *
°©ic_°©e
;

680 
dy«mic_MEM_‚s
 
mem_‚s
;

681 } 
	tdy«mic_‚s
;

695 (*
	tdy«mic_v_check_‚
Ë(
	tos¶_vîsi⁄
);

696 
	#IMPLEMENT_DYNAMIC_CHECK_FN
() \

697 
OPENSSL_EXPORT
 
	`v_check
(
v
); \

698 
OPENSSL_EXPORT
 
	`v_check
(
v
) { \

699 if(
v
 >
OSSL_DYNAMIC_OLDEST
Ë 
OSSL_DYNAMIC_VERSION
; \

700  0; }

	)

720 (*
dy«mic_böd_ígöe
Ë(
	tENGINE
 *
	te
, c⁄° *
	tid
,

721 c⁄° 
	tdy«mic_‚s
 *
	t‚s
);

722 
	#IMPLEMENT_DYNAMIC_BIND_FN
(
‚
) \

723 
OPENSSL_EXPORT
 \

724 
	`böd_ígöe
(
ENGINE
 *
e
, c⁄° *
id
, c⁄° 
dy«mic_‚s
 *
‚s
); \

725 
OPENSSL_EXPORT
 \

726 
	`böd_ígöe
(
ENGINE
 *
e
, c⁄° *
id
, c⁄° 
dy«mic_‚s
 *
‚s
) { \

727 if(
	`ENGINE_gë_°©ic_°©e
(Ë=
‚s
->
°©ic_°©e
Ë
skù_cbs
; \

728 
	`CRYPTO_£t_mem_fun˘i⁄s
(
‚s
->
mem_‚s
.
mÆloc_‚
, \

729 
‚s
->
mem_‚s
.
ªÆloc_‚
, \

730 
‚s
->
mem_‚s
.
‰ì_‚
); \

731 
skù_cbs
: \

732 if(!
	`‚
(
e
,
id
))  0; \

733  1; }

	)

746 *
ENGINE_gë_°©ic_°©e
();

748 #i‡
deföed
(
__O≥nBSD__
Ë|| deföed(
__FªeBSD__
Ë|| deföed(
HAVE_CRYPTODEV
)

749 
DEPRECATEDIN_1_1_0
(
ENGINE_£tup_bsd_¸y±odev
())

758 
ERR_lﬂd_ENGINE_°rögs
();

763 
	#ENGINE_F_DYNAMIC_CTRL
 180

	)

764 
	#ENGINE_F_DYNAMIC_GET_DATA_CTX
 181

	)

765 
	#ENGINE_F_DYNAMIC_LOAD
 182

	)

766 
	#ENGINE_F_DYNAMIC_SET_DATA_CTX
 183

	)

767 
	#ENGINE_F_ENGINE_ADD
 105

	)

768 
	#ENGINE_F_ENGINE_BY_ID
 106

	)

769 
	#ENGINE_F_ENGINE_CMD_IS_EXECUTABLE
 170

	)

770 
	#ENGINE_F_ENGINE_CTRL
 142

	)

771 
	#ENGINE_F_ENGINE_CTRL_CMD
 178

	)

772 
	#ENGINE_F_ENGINE_CTRL_CMD_STRING
 171

	)

773 
	#ENGINE_F_ENGINE_FINISH
 107

	)

774 
	#ENGINE_F_ENGINE_GET_CIPHER
 185

	)

775 
	#ENGINE_F_ENGINE_GET_DIGEST
 186

	)

776 
	#ENGINE_F_ENGINE_GET_NEXT
 115

	)

777 
	#ENGINE_F_ENGINE_GET_PKEY_ASN1_METH
 193

	)

778 
	#ENGINE_F_ENGINE_GET_PKEY_METH
 192

	)

779 
	#ENGINE_F_ENGINE_GET_PREV
 116

	)

780 
	#ENGINE_F_ENGINE_INIT
 119

	)

781 
	#ENGINE_F_ENGINE_LIST_ADD
 120

	)

782 
	#ENGINE_F_ENGINE_LIST_REMOVE
 121

	)

783 
	#ENGINE_F_ENGINE_LOAD_PRIVATE_KEY
 150

	)

784 
	#ENGINE_F_ENGINE_LOAD_PUBLIC_KEY
 151

	)

785 
	#ENGINE_F_ENGINE_LOAD_SSL_CLIENT_CERT
 194

	)

786 
	#ENGINE_F_ENGINE_NEW
 122

	)

787 
	#ENGINE_F_ENGINE_REMOVE
 123

	)

788 
	#ENGINE_F_ENGINE_SET_DEFAULT_STRING
 189

	)

789 
	#ENGINE_F_ENGINE_SET_ID
 129

	)

790 
	#ENGINE_F_ENGINE_SET_NAME
 130

	)

791 
	#ENGINE_F_ENGINE_TABLE_REGISTER
 184

	)

792 
	#ENGINE_F_ENGINE_UNLOCKED_FINISH
 191

	)

793 
	#ENGINE_F_ENGINE_UP_REF
 190

	)

794 
	#ENGINE_F_INT_CTRL_HELPER
 172

	)

795 
	#ENGINE_F_INT_ENGINE_CONFIGURE
 188

	)

796 
	#ENGINE_F_INT_ENGINE_MODULE_INIT
 187

	)

799 
	#ENGINE_R_ALREADY_LOADED
 100

	)

800 
	#ENGINE_R_ARGUMENT_IS_NOT_A_NUMBER
 133

	)

801 
	#ENGINE_R_CMD_NOT_EXECUTABLE
 134

	)

802 
	#ENGINE_R_COMMAND_TAKES_INPUT
 135

	)

803 
	#ENGINE_R_COMMAND_TAKES_NO_INPUT
 136

	)

804 
	#ENGINE_R_CONFLICTING_ENGINE_ID
 103

	)

805 
	#ENGINE_R_CTRL_COMMAND_NOT_IMPLEMENTED
 119

	)

806 
	#ENGINE_R_DSO_FAILURE
 104

	)

807 
	#ENGINE_R_DSO_NOT_FOUND
 132

	)

808 
	#ENGINE_R_ENGINES_SECTION_ERROR
 148

	)

809 
	#ENGINE_R_ENGINE_CONFIGURATION_ERROR
 102

	)

810 
	#ENGINE_R_ENGINE_IS_NOT_IN_LIST
 105

	)

811 
	#ENGINE_R_ENGINE_SECTION_ERROR
 149

	)

812 
	#ENGINE_R_FAILED_LOADING_PRIVATE_KEY
 128

	)

813 
	#ENGINE_R_FAILED_LOADING_PUBLIC_KEY
 129

	)

814 
	#ENGINE_R_FINISH_FAILED
 106

	)

815 
	#ENGINE_R_ID_OR_NAME_MISSING
 108

	)

816 
	#ENGINE_R_INIT_FAILED
 109

	)

817 
	#ENGINE_R_INTERNAL_LIST_ERROR
 110

	)

818 
	#ENGINE_R_INVALID_ARGUMENT
 143

	)

819 
	#ENGINE_R_INVALID_CMD_NAME
 137

	)

820 
	#ENGINE_R_INVALID_CMD_NUMBER
 138

	)

821 
	#ENGINE_R_INVALID_INIT_VALUE
 151

	)

822 
	#ENGINE_R_INVALID_STRING
 150

	)

823 
	#ENGINE_R_NOT_INITIALISED
 117

	)

824 
	#ENGINE_R_NOT_LOADED
 112

	)

825 
	#ENGINE_R_NO_CONTROL_FUNCTION
 120

	)

826 
	#ENGINE_R_NO_INDEX
 144

	)

827 
	#ENGINE_R_NO_LOAD_FUNCTION
 125

	)

828 
	#ENGINE_R_NO_REFERENCE
 130

	)

829 
	#ENGINE_R_NO_SUCH_ENGINE
 116

	)

830 
	#ENGINE_R_UNIMPLEMENTED_CIPHER
 146

	)

831 
	#ENGINE_R_UNIMPLEMENTED_DIGEST
 147

	)

832 
	#ENGINE_R_UNIMPLEMENTED_PUBLIC_KEY_METHOD
 101

	)

833 
	#ENGINE_R_VERSION_INCOMPATIBILITY
 145

	)

835 #ifde‡ 
__˝lu•lus


	@err.h

10 #i‚de‡
HEADER_ERR_H


11 
	#HEADER_ERR_H


	)

13 
	~<›ís¶/e_os2.h
>

15 #i‚de‡
OPENSSL_NO_STDIO


16 
	~<°dio.h
>

17 
	~<°dlib.h
>

20 
	~<›ís¶/os¶_typ.h
>

21 
	~<›ís¶/bio.h
>

22 
	~<›ís¶/lhash.h
>

24 #ifde‡ 
__˝lu•lus


28 #i‚de‡
OPENSSL_NO_ERR


29 
	#ERR_PUT_îr‹
(
a
,
b
,
c
,
d
,
e
Ë
	`ERR_put_îr‹
◊,b,c,d,e)

	)

31 
	#ERR_PUT_îr‹
(
a
,
b
,
c
,
d
,
e
Ë
	`ERR_put_îr‹
◊,b,c,
NULL
,0)

	)

34 
	~<î∫o.h
>

36 
	#ERR_TXT_MALLOCED
 0x01

	)

37 
	#ERR_TXT_STRING
 0x02

	)

39 
	#ERR_FLAG_MARK
 0x01

	)

41 
	#ERR_NUM_ERRORS
 16

	)

42 
	sîr_°©e_°
 {

43 
îr_Êags
[
ERR_NUM_ERRORS
];

44 
îr_buf„r
[
ERR_NUM_ERRORS
];

45 *
îr_d©a
[
ERR_NUM_ERRORS
];

46 
îr_d©a_Êags
[
ERR_NUM_ERRORS
];

47 c⁄° *
îr_fûe
[
ERR_NUM_ERRORS
];

48 
îr_löe
[
ERR_NUM_ERRORS
];

49 
t›
, 
bŸtom
;

50 } 
	tERR_STATE
;

53 
	#ERR_LIB_NONE
 1

	)

54 
	#ERR_LIB_SYS
 2

	)

55 
	#ERR_LIB_BN
 3

	)

56 
	#ERR_LIB_RSA
 4

	)

57 
	#ERR_LIB_DH
 5

	)

58 
	#ERR_LIB_EVP
 6

	)

59 
	#ERR_LIB_BUF
 7

	)

60 
	#ERR_LIB_OBJ
 8

	)

61 
	#ERR_LIB_PEM
 9

	)

62 
	#ERR_LIB_DSA
 10

	)

63 
	#ERR_LIB_X509
 11

	)

65 
	#ERR_LIB_ASN1
 13

	)

66 
	#ERR_LIB_CONF
 14

	)

67 
	#ERR_LIB_CRYPTO
 15

	)

68 
	#ERR_LIB_EC
 16

	)

69 
	#ERR_LIB_SSL
 20

	)

75 
	#ERR_LIB_BIO
 32

	)

76 
	#ERR_LIB_PKCS7
 33

	)

77 
	#ERR_LIB_X509V3
 34

	)

78 
	#ERR_LIB_PKCS12
 35

	)

79 
	#ERR_LIB_RAND
 36

	)

80 
	#ERR_LIB_DSO
 37

	)

81 
	#ERR_LIB_ENGINE
 38

	)

82 
	#ERR_LIB_OCSP
 39

	)

83 
	#ERR_LIB_UI
 40

	)

84 
	#ERR_LIB_COMP
 41

	)

85 
	#ERR_LIB_ECDSA
 42

	)

86 
	#ERR_LIB_ECDH
 43

	)

87 
	#ERR_LIB_STORE
 44

	)

88 
	#ERR_LIB_FIPS
 45

	)

89 
	#ERR_LIB_CMS
 46

	)

90 
	#ERR_LIB_TS
 47

	)

91 
	#ERR_LIB_HMAC
 48

	)

92 
	#ERR_LIB_JPAKE
 49

	)

93 
	#ERR_LIB_CT
 50

	)

94 
	#ERR_LIB_ASYNC
 51

	)

95 
	#ERR_LIB_KDF
 52

	)

97 
	#ERR_LIB_USER
 128

	)

99 
	#SYSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_SYS
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

100 
	#BNîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BN
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

101 
	#RSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_RSA
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

102 
	#DHîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DH
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

103 
	#EVPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_EVP
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

104 
	#BUFîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BUF
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

105 
	#OBJîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_OBJ
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

106 
	#PEMîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PEM
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

107 
	#DSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DSA
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

108 
	#X509îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_X509
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

109 
	#ASN1îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ASN1
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

110 
	#CONFîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CONF
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

111 
	#CRYPTOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CRYPTO
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

112 
	#ECîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_EC
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

113 
	#SSLîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_SSL
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

114 
	#BIOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BIO
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

115 
	#PKCS7îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PKCS7
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

116 
	#X509V3îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_X509V3
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

117 
	#PKCS12îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PKCS12
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

118 
	#RANDîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_RAND
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

119 
	#DSOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DSO
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

120 
	#ENGINEîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ENGINE
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

121 
	#OCSPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_OCSP
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

122 
	#UIîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_UI
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

123 
	#COMPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_COMP
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

124 
	#ECDSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ECDSA
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

125 
	#ECDHîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ECDH
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

126 
	#STOREîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_STORE
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

127 
	#FIPSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_FIPS
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

128 
	#CMSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CMS
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

129 
	#TSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_TS
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

130 
	#HMACîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_HMAC
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

131 
	#JPAKEîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_JPAKE
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

132 
	#CTîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CT
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

133 
	#ASYNCîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ASYNC
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

134 
	#KDFîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_KDF
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

136 
	#ERR_PACK
(
l
,
f
,
r
) \

137 –(()((
l
Ë& 0x0FFË<< 24LË| (((
f
Ë& 0xFFFË<< 12LË| ((
r
Ë& 0xFFFË)

	)

138 
	#ERR_GET_LIB
(
l
Ë()((((Ó)>>24L)&0xffL)

	)

139 
	#ERR_GET_FUNC
(
l
Ë()((((Ó)>>12L)&0xfffL)

	)

140 
	#ERR_GET_REASON
(
l
Ë()(÷)&0xfffL)

	)

143 
	#SYS_F_FOPEN
 1

	)

144 
	#SYS_F_CONNECT
 2

	)

145 
	#SYS_F_GETSERVBYNAME
 3

	)

146 
	#SYS_F_SOCKET
 4

	)

147 
	#SYS_F_IOCTLSOCKET
 5

	)

148 
	#SYS_F_BIND
 6

	)

149 
	#SYS_F_LISTEN
 7

	)

150 
	#SYS_F_ACCEPT
 8

	)

151 
	#SYS_F_WSASTARTUP
 9

	)

152 
	#SYS_F_OPENDIR
 10

	)

153 
	#SYS_F_FREAD
 11

	)

154 
	#SYS_F_GETADDRINFO
 12

	)

155 
	#SYS_F_GETNAMEINFO
 13

	)

156 
	#SYS_F_SETSOCKOPT
 14

	)

157 
	#SYS_F_GETSOCKOPT
 15

	)

158 
	#SYS_F_GETSOCKNAME
 16

	)

159 
	#SYS_F_GETHOSTBYNAME
 17

	)

162 
	#ERR_R_SYS_LIB
 
ERR_LIB_SYS


	)

163 
	#ERR_R_BN_LIB
 
ERR_LIB_BN


	)

164 
	#ERR_R_RSA_LIB
 
ERR_LIB_RSA


	)

165 
	#ERR_R_DH_LIB
 
ERR_LIB_DH


	)

166 
	#ERR_R_EVP_LIB
 
ERR_LIB_EVP


	)

167 
	#ERR_R_BUF_LIB
 
ERR_LIB_BUF


	)

168 
	#ERR_R_OBJ_LIB
 
ERR_LIB_OBJ


	)

169 
	#ERR_R_PEM_LIB
 
ERR_LIB_PEM


	)

170 
	#ERR_R_DSA_LIB
 
ERR_LIB_DSA


	)

171 
	#ERR_R_X509_LIB
 
ERR_LIB_X509


	)

172 
	#ERR_R_ASN1_LIB
 
ERR_LIB_ASN1


	)

173 
	#ERR_R_EC_LIB
 
ERR_LIB_EC


	)

174 
	#ERR_R_BIO_LIB
 
ERR_LIB_BIO


	)

175 
	#ERR_R_PKCS7_LIB
 
ERR_LIB_PKCS7


	)

176 
	#ERR_R_X509V3_LIB
 
ERR_LIB_X509V3


	)

177 
	#ERR_R_ENGINE_LIB
 
ERR_LIB_ENGINE


	)

178 
	#ERR_R_ECDSA_LIB
 
ERR_LIB_ECDSA


	)

180 
	#ERR_R_NESTED_ASN1_ERROR
 58

	)

181 
	#ERR_R_MISSING_ASN1_EOS
 63

	)

184 
	#ERR_R_FATAL
 64

	)

185 
	#ERR_R_MALLOC_FAILURE
 (1|
ERR_R_FATAL
)

	)

186 
	#ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED
 (2|
ERR_R_FATAL
)

	)

187 
	#ERR_R_PASSED_NULL_PARAMETER
 (3|
ERR_R_FATAL
)

	)

188 
	#ERR_R_INTERNAL_ERROR
 (4|
ERR_R_FATAL
)

	)

189 
	#ERR_R_DISABLED
 (5|
ERR_R_FATAL
)

	)

190 
	#ERR_R_INIT_FAIL
 (6|
ERR_R_FATAL
)

	)

191 
	#ERR_R_PASSED_INVALID_ARGUMENT
 (7)

	)

198 
	sERR_°rög_d©a_°
 {

199 
îr‹
;

200 c⁄° *
°rög
;

201 } 
	tERR_STRING_DATA
;

203 
DEFINE_LHASH_OF
(
ERR_STRING_DATA
);

205 
ERR_put_îr‹
(
lib
, 
func
, 
ªas⁄
, c⁄° *
fûe
, 
löe
);

206 
ERR_£t_îr‹_d©a
(*
d©a
, 
Êags
);

208 
ERR_gë_îr‹
();

209 
ERR_gë_îr‹_löe
(c⁄° **
fûe
, *
löe
);

210 
ERR_gë_îr‹_löe_d©a
(c⁄° **
fûe
, *
löe
,

211 c⁄° **
d©a
, *
Êags
);

212 
ERR_≥ek_îr‹
();

213 
ERR_≥ek_îr‹_löe
(c⁄° **
fûe
, *
löe
);

214 
ERR_≥ek_îr‹_löe_d©a
(c⁄° **
fûe
, *
löe
,

215 c⁄° **
d©a
, *
Êags
);

216 
ERR_≥ek_œ°_îr‹
();

217 
ERR_≥ek_œ°_îr‹_löe
(c⁄° **
fûe
, *
löe
);

218 
ERR_≥ek_œ°_îr‹_löe_d©a
(c⁄° **
fûe
, *
löe
,

219 c⁄° **
d©a
, *
Êags
);

220 
ERR_˛ór_îr‹
();

221 *
ERR_îr‹_°rög
(
e
, *
buf
);

222 
ERR_îr‹_°rög_n
(
e
, *
buf
, 
size_t
 
Àn
);

223 c⁄° *
ERR_lib_îr‹_°rög
(
e
);

224 c⁄° *
ERR_func_îr‹_°rög
(
e
);

225 c⁄° *
ERR_ªas⁄_îr‹_°rög
(
e
);

226 
ERR_¥öt_îr‹s_cb
((*
cb
Ë(c⁄° *
°r
, 
size_t
 
Àn
, *
u
),

227 *
u
);

228 #i‚de‡
OPENSSL_NO_STDIO


229 
ERR_¥öt_îr‹s_Â
(
FILE
 *
Â
);

231 
ERR_¥öt_îr‹s
(
BIO
 *
bp
);

232 
ERR_add_îr‹_d©a
(
num
, ...);

233 
ERR_add_îr‹_vd©a
(
num
, 
va_li°
 
¨gs
);

234 
ERR_lﬂd_°rögs
(
lib
, 
ERR_STRING_DATA
 
°r
[]);

235 
ERR_u∆ﬂd_°rögs
(
lib
, 
ERR_STRING_DATA
 
°r
[]);

236 
ERR_lﬂd_ERR_°rögs
();

238 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

239 
	#ERR_lﬂd_¸y±o_°rögs
() \

240 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_LOAD_CRYPTO_STRINGS
, 
NULL
)

	)

241 
	#ERR_‰ì_°rögs
(Ë0Ë

	)

244 
DEPRECATEDIN_1_1_0
(
ERR_ªmove_thªad_°©e
(*))

245 
DEPRECATEDIN_1_0_0
(
ERR_ªmove_°©e
(
pid
))

246 
ERR_STATE
 *
ERR_gë_°©e
();

248 
LHASH_OF
(
ERR_STRING_DATA
Ë*
ERR_gë_°rög_èbÀ
();

250 
ERR_gë_√xt_îr‹_libøry
();

252 
ERR_£t_m¨k
();

253 
ERR_p›_to_m¨k
();

255 #ifde‡ 
__˝lu•lus


	@evp.h

10 #i‚de‡
HEADER_ENVELOPE_H


11 
	#HEADER_ENVELOPE_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

14 
	~<›ís¶/os¶_typ.h
>

15 
	~<›ís¶/symhacks.h
>

16 
	~<›ís¶/bio.h
>

18 
	#EVP_MAX_MD_SIZE
 64

	)

19 
	#EVP_MAX_KEY_LENGTH
 64

	)

20 
	#EVP_MAX_IV_LENGTH
 16

	)

21 
	#EVP_MAX_BLOCK_LENGTH
 32

	)

23 
	#PKCS5_SALT_LEN
 8

	)

25 
	#PKCS5_DEFAULT_ITER
 2048

	)

27 
	~<›ís¶/obje˘s.h
>

29 
	#EVP_PK_RSA
 0x0001

	)

30 
	#EVP_PK_DSA
 0x0002

	)

31 
	#EVP_PK_DH
 0x0004

	)

32 
	#EVP_PK_EC
 0x0008

	)

33 
	#EVP_PKT_SIGN
 0x0010

	)

34 
	#EVP_PKT_ENC
 0x0020

	)

35 
	#EVP_PKT_EXCH
 0x0040

	)

36 
	#EVP_PKS_RSA
 0x0100

	)

37 
	#EVP_PKS_DSA
 0x0200

	)

38 
	#EVP_PKS_EC
 0x0400

	)

40 
	#EVP_PKEY_NONE
 
NID_undef


	)

41 
	#EVP_PKEY_RSA
 
NID_rßEn¸y±i⁄


	)

42 
	#EVP_PKEY_RSA2
 
NID_rß


	)

43 
	#EVP_PKEY_DSA
 
NID_dß


	)

44 
	#EVP_PKEY_DSA1
 
NID_dß_2


	)

45 
	#EVP_PKEY_DSA2
 
NID_dßWôhSHA


	)

46 
	#EVP_PKEY_DSA3
 
NID_dßWôhSHA1


	)

47 
	#EVP_PKEY_DSA4
 
NID_dßWôhSHA1_2


	)

48 
	#EVP_PKEY_DH
 
NID_dhKeyAgªemít


	)

49 
	#EVP_PKEY_DHX
 
NID_dhpubli˙umbî


	)

50 
	#EVP_PKEY_EC
 
NID_X9_62_id_ecPublicKey


	)

51 
	#EVP_PKEY_HMAC
 
NID_hmac


	)

52 
	#EVP_PKEY_CMAC
 
NID_cmac


	)

53 
	#EVP_PKEY_TLS1_PRF
 
NID_és1_¥f


	)

54 
	#EVP_PKEY_HKDF
 
NID_hkdf


	)

56 #ifde‡ 
__˝lu•lus


60 
	#EVP_PKEY_MO_SIGN
 0x0001

	)

61 
	#EVP_PKEY_MO_VERIFY
 0x0002

	)

62 
	#EVP_PKEY_MO_ENCRYPT
 0x0004

	)

63 
	#EVP_PKEY_MO_DECRYPT
 0x0008

	)

65 #i‚de‡
EVP_MD


66 
EVP_MD
 *
EVP_MD_mëh_√w
(
md_ty≥
, 
pkey_ty≥
);

67 
EVP_MD
 *
EVP_MD_mëh_dup
(c⁄° EVP_MD *
md
);

68 
EVP_MD_mëh_‰ì
(
EVP_MD
 *
md
);

70 
EVP_MD_mëh_£t_öput_blocksize
(
EVP_MD
 *
md
, 
blocksize
);

71 
EVP_MD_mëh_£t_ªsu…_size
(
EVP_MD
 *
md
, 
ªsu…size
);

72 
EVP_MD_mëh_£t_≠p_d©asize
(
EVP_MD
 *
md
, 
d©asize
);

73 
EVP_MD_mëh_£t_Êags
(
EVP_MD
 *
md
, 
Êags
);

74 
EVP_MD_mëh_£t_öô
(
EVP_MD
 *
md
, (*
öô
)(
EVP_MD_CTX
 *
˘x
));

75 
EVP_MD_mëh_£t_upd©e
(
EVP_MD
 *
md
, (*
upd©e
)(
EVP_MD_CTX
 *
˘x
,

76 c⁄° *
d©a
,

77 
size_t
 
cou¡
));

78 
EVP_MD_mëh_£t_föÆ
(
EVP_MD
 *
md
, (*
föÆ
)(
EVP_MD_CTX
 *
˘x
,

79 *
md
));

80 
EVP_MD_mëh_£t_c›y
(
EVP_MD
 *
md
, (*
c›y
)(
EVP_MD_CTX
 *
to
,

81 c⁄° 
EVP_MD_CTX
 *
‰om
));

82 
EVP_MD_mëh_£t_˛ónup
(
EVP_MD
 *
md
, (*
˛ónup
)(
EVP_MD_CTX
 *
˘x
));

83 
EVP_MD_mëh_£t_˘æ
(
EVP_MD
 *
md
, (*
˘æ
)(
EVP_MD_CTX
 *
˘x
, 
cmd
,

84 
p1
, *
p2
));

86 
EVP_MD_mëh_gë_öput_blocksize
(c⁄° 
EVP_MD
 *
md
);

87 
EVP_MD_mëh_gë_ªsu…_size
(c⁄° 
EVP_MD
 *
md
);

88 
EVP_MD_mëh_gë_≠p_d©asize
(c⁄° 
EVP_MD
 *
md
);

89 
EVP_MD_mëh_gë_Êags
(c⁄° 
EVP_MD
 *
md
);

90 (*
EVP_MD_mëh_gë_öô
(c⁄° 
EVP_MD
 *
md
))(
EVP_MD_CTX
 *
˘x
);

91 (*
EVP_MD_mëh_gë_upd©e
(c⁄° 
EVP_MD
 *
md
))(
EVP_MD_CTX
 *
˘x
,

92 c⁄° *
d©a
,

93 
size_t
 
cou¡
);

94 (*
EVP_MD_mëh_gë_föÆ
(c⁄° 
EVP_MD
 *
md
))(
EVP_MD_CTX
 *
˘x
,

95 *
md
);

96 (*
EVP_MD_mëh_gë_c›y
(c⁄° 
EVP_MD
 *
md
))(
EVP_MD_CTX
 *
to
,

97 c⁄° 
EVP_MD_CTX
 *
‰om
);

98 (*
EVP_MD_mëh_gë_˛ónup
(c⁄° 
EVP_MD
 *
md
))(
EVP_MD_CTX
 *
˘x
);

99 (*
EVP_MD_mëh_gë_˘æ
(c⁄° 
EVP_MD
 *
md
))(
EVP_MD_CTX
 *
˘x
, 
cmd
,

100 
p1
, *
p2
);

103 
	#EVP_MD_FLAG_ONESHOT
 0x0001

	)

107 
	#EVP_MD_FLAG_DIGALGID_MASK
 0x0018

	)

111 
	#EVP_MD_FLAG_DIGALGID_NULL
 0x0000

	)

115 
	#EVP_MD_FLAG_DIGALGID_ABSENT
 0x0008

	)

119 
	#EVP_MD_FLAG_DIGALGID_CUSTOM
 0x0018

	)

122 
	#EVP_MD_FLAG_FIPS
 0x0400

	)

126 
	#EVP_MD_CTRL_DIGALGID
 0x1

	)

127 
	#EVP_MD_CTRL_MICALG
 0x2

	)

131 
	#EVP_MD_CTRL_ALG_CTRL
 0x1000

	)

137 
	#EVP_MD_CTX_FLAG_ONESHOT
 0x0001

	)

139 
	#EVP_MD_CTX_FLAG_CLEANED
 0x0002

	)

141 
	#EVP_MD_CTX_FLAG_REUSE
 0x0004

	)

148 
	#EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
 0x0008

	)

156 
	#EVP_MD_CTX_FLAG_PAD_MASK
 0xF0

	)

157 
	#EVP_MD_CTX_FLAG_PAD_PKCS1
 0x00

	)

158 
	#EVP_MD_CTX_FLAG_PAD_X931
 0x10

	)

159 
	#EVP_MD_CTX_FLAG_PAD_PSS
 0x20

	)

161 
	#EVP_MD_CTX_FLAG_NO_INIT
 0x0100

	)

168 
	#EVP_MD_CTX_FLAG_FINALISE
 0x0200

	)

170 
EVP_CIPHER
 *
EVP_CIPHER_mëh_√w
(
cùhî_ty≥
, 
block_size
, 
key_Àn
);

171 
EVP_CIPHER
 *
EVP_CIPHER_mëh_dup
(c⁄° EVP_CIPHER *
cùhî
);

172 
EVP_CIPHER_mëh_‰ì
(
EVP_CIPHER
 *
cùhî
);

174 
EVP_CIPHER_mëh_£t_iv_Àngth
(
EVP_CIPHER
 *
cùhî
, 
iv_Àn
);

175 
EVP_CIPHER_mëh_£t_Êags
(
EVP_CIPHER
 *
cùhî
, 
Êags
);

176 
EVP_CIPHER_mëh_£t_im∂_˘x_size
(
EVP_CIPHER
 *
cùhî
, 
˘x_size
);

177 
EVP_CIPHER_mëh_£t_öô
(
EVP_CIPHER
 *
cùhî
,

178 (*
öô
Ë(
EVP_CIPHER_CTX
 *
˘x
,

179 c⁄° *
key
,

180 c⁄° *
iv
,

181 
íc
));

182 
EVP_CIPHER_mëh_£t_do_cùhî
(
EVP_CIPHER
 *
cùhî
,

183 (*
do_cùhî
Ë(
EVP_CIPHER_CTX
 *
˘x
,

184 *
out
,

185 c⁄° *
ö
,

186 
size_t
 
öl
));

187 
EVP_CIPHER_mëh_£t_˛ónup
(
EVP_CIPHER
 *
cùhî
,

188 (*
˛ónup
Ë(
EVP_CIPHER_CTX
 *));

189 
EVP_CIPHER_mëh_£t_£t_a¢1_∑øms
(
EVP_CIPHER
 *
cùhî
,

190 (*
£t_a¢1_∑ømëîs
Ë(
EVP_CIPHER_CTX
 *,

191 
ASN1_TYPE
 *));

192 
EVP_CIPHER_mëh_£t_gë_a¢1_∑øms
(
EVP_CIPHER
 *
cùhî
,

193 (*
gë_a¢1_∑ømëîs
Ë(
EVP_CIPHER_CTX
 *,

194 
ASN1_TYPE
 *));

195 
EVP_CIPHER_mëh_£t_˘æ
(
EVP_CIPHER
 *
cùhî
,

196 (*
˘æ
Ë(
EVP_CIPHER_CTX
 *, 
ty≥
,

197 
¨g
, *
±r
));

199 (*
EVP_CIPHER_mëh_gë_öô
(c⁄° 
EVP_CIPHER
 *
cùhî
))(
EVP_CIPHER_CTX
 *
˘x
,

200 c⁄° *
key
,

201 c⁄° *
iv
,

202 
íc
);

203 (*
EVP_CIPHER_mëh_gë_do_cùhî
(c⁄° 
EVP_CIPHER
 *
cùhî
))(
EVP_CIPHER_CTX
 *
˘x
,

204 *
out
,

205 c⁄° *
ö
,

206 
size_t
 
öl
);

207 (*
EVP_CIPHER_mëh_gë_˛ónup
(c⁄° 
EVP_CIPHER
 *
cùhî
))(
EVP_CIPHER_CTX
 *);

208 (*
EVP_CIPHER_mëh_gë_£t_a¢1_∑øms
(c⁄° 
EVP_CIPHER
 *
cùhî
))(
EVP_CIPHER_CTX
 *,

209 
ASN1_TYPE
 *);

210 (*
EVP_CIPHER_mëh_gë_gë_a¢1_∑øms
(c⁄° 
EVP_CIPHER
 *
cùhî
))(
EVP_CIPHER_CTX
 *,

211 
ASN1_TYPE
 *);

212 (*
EVP_CIPHER_mëh_gë_˘æ
(c⁄° 
EVP_CIPHER
 *
cùhî
))(
EVP_CIPHER_CTX
 *,

213 
ty≥
, 
¨g
,

214 *
±r
);

220 
	#EVP_CIPH_STREAM_CIPHER
 0x0

	)

221 
	#EVP_CIPH_ECB_MODE
 0x1

	)

222 
	#EVP_CIPH_CBC_MODE
 0x2

	)

223 
	#EVP_CIPH_CFB_MODE
 0x3

	)

224 
	#EVP_CIPH_OFB_MODE
 0x4

	)

225 
	#EVP_CIPH_CTR_MODE
 0x5

	)

226 
	#EVP_CIPH_GCM_MODE
 0x6

	)

227 
	#EVP_CIPH_CCM_MODE
 0x7

	)

228 
	#EVP_CIPH_XTS_MODE
 0x10001

	)

229 
	#EVP_CIPH_WRAP_MODE
 0x10002

	)

230 
	#EVP_CIPH_OCB_MODE
 0x10003

	)

231 
	#EVP_CIPH_MODE
 0xF0007

	)

233 
	#EVP_CIPH_VARIABLE_LENGTH
 0x8

	)

235 
	#EVP_CIPH_CUSTOM_IV
 0x10

	)

237 
	#EVP_CIPH_ALWAYS_CALL_INIT
 0x20

	)

239 
	#EVP_CIPH_CTRL_INIT
 0x40

	)

241 
	#EVP_CIPH_CUSTOM_KEY_LENGTH
 0x80

	)

243 
	#EVP_CIPH_NO_PADDING
 0x100

	)

245 
	#EVP_CIPH_RAND_KEY
 0x200

	)

247 
	#EVP_CIPH_CUSTOM_COPY
 0x400

	)

249 
	#EVP_CIPH_FLAG_DEFAULT_ASN1
 0x1000

	)

251 
	#EVP_CIPH_FLAG_LENGTH_BITS
 0x2000

	)

253 
	#EVP_CIPH_FLAG_FIPS
 0x4000

	)

255 
	#EVP_CIPH_FLAG_NON_FIPS_ALLOW
 0x8000

	)

259 
	#EVP_CIPH_FLAG_CUSTOM_CIPHER
 0x100000

	)

260 
	#EVP_CIPH_FLAG_AEAD_CIPHER
 0x200000

	)

261 
	#EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK
 0x400000

	)

263 
	#EVP_CIPH_FLAG_PIPELINE
 0X800000

	)

270 
	#EVP_CIPHER_CTX_FLAG_WRAP_ALLOW
 0x1

	)

274 
	#EVP_CTRL_INIT
 0x0

	)

275 
	#EVP_CTRL_SET_KEY_LENGTH
 0x1

	)

276 
	#EVP_CTRL_GET_RC2_KEY_BITS
 0x2

	)

277 
	#EVP_CTRL_SET_RC2_KEY_BITS
 0x3

	)

278 
	#EVP_CTRL_GET_RC5_ROUNDS
 0x4

	)

279 
	#EVP_CTRL_SET_RC5_ROUNDS
 0x5

	)

280 
	#EVP_CTRL_RAND_KEY
 0x6

	)

281 
	#EVP_CTRL_PBE_PRF_NID
 0x7

	)

282 
	#EVP_CTRL_COPY
 0x8

	)

283 
	#EVP_CTRL_AEAD_SET_IVLEN
 0x9

	)

284 
	#EVP_CTRL_AEAD_GET_TAG
 0x10

	)

285 
	#EVP_CTRL_AEAD_SET_TAG
 0x11

	)

286 
	#EVP_CTRL_AEAD_SET_IV_FIXED
 0x12

	)

287 
	#EVP_CTRL_GCM_SET_IVLEN
 
EVP_CTRL_AEAD_SET_IVLEN


	)

288 
	#EVP_CTRL_GCM_GET_TAG
 
EVP_CTRL_AEAD_GET_TAG


	)

289 
	#EVP_CTRL_GCM_SET_TAG
 
EVP_CTRL_AEAD_SET_TAG


	)

290 
	#EVP_CTRL_GCM_SET_IV_FIXED
 
EVP_CTRL_AEAD_SET_IV_FIXED


	)

291 
	#EVP_CTRL_GCM_IV_GEN
 0x13

	)

292 
	#EVP_CTRL_CCM_SET_IVLEN
 
EVP_CTRL_AEAD_SET_IVLEN


	)

293 
	#EVP_CTRL_CCM_GET_TAG
 
EVP_CTRL_AEAD_GET_TAG


	)

294 
	#EVP_CTRL_CCM_SET_TAG
 
EVP_CTRL_AEAD_SET_TAG


	)

295 
	#EVP_CTRL_CCM_SET_IV_FIXED
 
EVP_CTRL_AEAD_SET_IV_FIXED


	)

296 
	#EVP_CTRL_CCM_SET_L
 0x14

	)

297 
	#EVP_CTRL_CCM_SET_MSGLEN
 0x15

	)

303 
	#EVP_CTRL_AEAD_TLS1_AAD
 0x16

	)

305 
	#EVP_CTRL_AEAD_SET_MAC_KEY
 0x17

	)

307 
	#EVP_CTRL_GCM_SET_IV_INV
 0x18

	)

309 
	#EVP_CTRL_TLS1_1_MULTIBLOCK_AAD
 0x19

	)

310 
	#EVP_CTRL_TLS1_1_MULTIBLOCK_ENCRYPT
 0x1a

	)

311 
	#EVP_CTRL_TLS1_1_MULTIBLOCK_DECRYPT
 0x1b

	)

312 
	#EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE
 0x1c

	)

314 
	#EVP_CTRL_SSL3_MASTER_SECRET
 0x1d

	)

317 
	#EVP_CTRL_SET_SBOX
 0x1e

	)

322 
	#EVP_CTRL_SBOX_USED
 0x1f

	)

326 
	#EVP_CTRL_KEY_MESH
 0x20

	)

328 
	#EVP_CTRL_BLOCK_PADDING_MODE
 0x21

	)

331 
	#EVP_CTRL_SET_PIPELINE_OUTPUT_BUFS
 0x22

	)

333 
	#EVP_CTRL_SET_PIPELINE_INPUT_BUFS
 0x23

	)

335 
	#EVP_CTRL_SET_PIPELINE_INPUT_LENS
 0x24

	)

338 
	#EVP_PADDING_PKCS7
 1

	)

339 
	#EVP_PADDING_ISO7816_4
 2

	)

340 
	#EVP_PADDING_ANSI923
 3

	)

341 
	#EVP_PADDING_ISO10126
 4

	)

342 
	#EVP_PADDING_ZERO
 5

	)

345 
	#EVP_AEAD_TLS1_AAD_LEN
 13

	)

348 *
out
;

349 c⁄° *
öp
;

350 
size_t
 
Àn
;

351 
öãæóve
;

352 } 
	tEVP_CTRL_TLS1_1_MULTIBLOCK_PARAM
;

356 
	#EVP_GCM_TLS_FIXED_IV_LEN
 4

	)

358 
	#EVP_GCM_TLS_EXPLICIT_IV_LEN
 8

	)

360 
	#EVP_GCM_TLS_TAG_LEN
 16

	)

364 
	#EVP_CCM_TLS_FIXED_IV_LEN
 4

	)

366 
	#EVP_CCM_TLS_EXPLICIT_IV_LEN
 8

	)

368 
	sevp_cùhî_öfo_°
 {

369 c⁄° 
EVP_CIPHER
 *
cùhî
;

370 
iv
[
EVP_MAX_IV_LENGTH
];

371 } 
	tEVP_CIPHER_INFO
;

375 (
EVP_PBE_KEYGEN
Ë(
	tEVP_CIPHER_CTX
 *
	t˘x
, c⁄° *
	t∑ss
,

376 
	t∑s¶í
, 
	tASN1_TYPE
 *
	t∑øm
,

377 c⁄° 
	tEVP_CIPHER
 *
	tcùhî
, c⁄° 
	tEVP_MD
 *
	tmd
,

378 
	tí_de
);

380 #i‚de‡
OPENSSL_NO_RSA


381 
	#EVP_PKEY_assign_RSA
(
pkey
,
rß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_RSA
,\

382 (*)(
rß
))

	)

385 #i‚de‡
OPENSSL_NO_DSA


386 
	#EVP_PKEY_assign_DSA
(
pkey
,
dß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DSA
,\

387 (*)(
dß
))

	)

390 #i‚de‡
OPENSSL_NO_DH


391 
	#EVP_PKEY_assign_DH
(
pkey
,
dh
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DH
,\

392 (*)(
dh
))

	)

395 #i‚de‡
OPENSSL_NO_EC


396 
	#EVP_PKEY_assign_EC_KEY
(
pkey
,
eckey
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_EC
,\

397 (*)(
eckey
))

	)

401 
	#EVP_gë_dige°bynid
(
a
Ë
	`EVP_gë_dige°by«me
(
	`OBJ_nid2¢
◊))

	)

402 
	#EVP_gë_dige°byobj
(
a
Ë
	`EVP_gë_dige°bynid
(
	`OBJ_obj2nid
◊))

	)

403 
	#EVP_gë_cùhîbynid
(
a
Ë
	`EVP_gë_cùhîby«me
(
	`OBJ_nid2¢
◊))

	)

404 
	#EVP_gë_cùhîbyobj
(
a
Ë
	`EVP_gë_cùhîbynid
(
	`OBJ_obj2nid
◊))

	)

406 
EVP_MD_ty≥
(c⁄° 
EVP_MD
 *
md
);

407 
	#EVP_MD_nid
(
e
Ë
	`EVP_MD_ty≥
”)

	)

408 
	#EVP_MD_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_MD_nid
”))

	)

409 
EVP_MD_pkey_ty≥
(c⁄° 
EVP_MD
 *
md
);

410 
EVP_MD_size
(c⁄° 
EVP_MD
 *
md
);

411 
EVP_MD_block_size
(c⁄° 
EVP_MD
 *
md
);

412 
EVP_MD_Êags
(c⁄° 
EVP_MD
 *
md
);

414 c⁄° 
EVP_MD
 *
EVP_MD_CTX_md
(c⁄° 
EVP_MD_CTX
 *
˘x
);

415 (*
EVP_MD_CTX_upd©e_‚
(
EVP_MD_CTX
 *
˘x
))(EVP_MD_CTX *ctx,

416 c⁄° *
d©a
, 
size_t
 
cou¡
);

417 
EVP_MD_CTX_£t_upd©e_‚
(
EVP_MD_CTX
 *
˘x
,

418 (*
upd©e
Ë(
EVP_MD_CTX
 *
˘x
,

419 c⁄° *
d©a
, 
size_t
 
cou¡
));

420 
	#EVP_MD_CTX_size
(
e
Ë
	`EVP_MD_size
(
	`EVP_MD_CTX_md
”))

	)

421 
	#EVP_MD_CTX_block_size
(
e
Ë
	`EVP_MD_block_size
(
	`EVP_MD_CTX_md
”))

	)

422 
	#EVP_MD_CTX_ty≥
(
e
Ë
	`EVP_MD_ty≥
(
	`EVP_MD_CTX_md
”))

	)

423 
EVP_PKEY_CTX
 *
EVP_MD_CTX_pkey_˘x
(c⁄° 
EVP_MD_CTX
 *
˘x
);

424 *
EVP_MD_CTX_md_d©a
(c⁄° 
EVP_MD_CTX
 *
˘x
);

426 
EVP_CIPHER_nid
(c⁄° 
EVP_CIPHER
 *
cùhî
);

427 
	#EVP_CIPHER_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_CIPHER_nid
”))

	)

428 
EVP_CIPHER_block_size
(c⁄° 
EVP_CIPHER
 *
cùhî
);

429 
EVP_CIPHER_im∂_˘x_size
(c⁄° 
EVP_CIPHER
 *
cùhî
);

430 
EVP_CIPHER_key_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

431 
EVP_CIPHER_iv_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

432 
EVP_CIPHER_Êags
(c⁄° 
EVP_CIPHER
 *
cùhî
);

433 
	#EVP_CIPHER_mode
(
e
Ë(
	`EVP_CIPHER_Êags
”Ë& 
EVP_CIPH_MODE
)

	)

435 c⁄° 
EVP_CIPHER
 *
EVP_CIPHER_CTX_cùhî
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

436 
EVP_CIPHER_CTX_í¸y±ög
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

437 
EVP_CIPHER_CTX_nid
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

438 
EVP_CIPHER_CTX_block_size
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

439 
EVP_CIPHER_CTX_key_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

440 
EVP_CIPHER_CTX_iv_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

441 c⁄° *
EVP_CIPHER_CTX_iv
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

442 c⁄° *
EVP_CIPHER_CTX_‹igöÆ_iv
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

443 *
EVP_CIPHER_CTX_iv_noc⁄°
(
EVP_CIPHER_CTX
 *
˘x
);

444 *
EVP_CIPHER_CTX_buf_noc⁄°
(
EVP_CIPHER_CTX
 *
˘x
);

445 
EVP_CIPHER_CTX_num
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

446 
EVP_CIPHER_CTX_£t_num
(
EVP_CIPHER_CTX
 *
˘x
, 
num
);

447 
EVP_CIPHER_CTX_c›y
(
EVP_CIPHER_CTX
 *
out
, c⁄° EVP_CIPHER_CTX *
ö
);

448 *
EVP_CIPHER_CTX_gë_≠p_d©a
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

449 
EVP_CIPHER_CTX_£t_≠p_d©a
(
EVP_CIPHER_CTX
 *
˘x
, *
d©a
);

450 *
EVP_CIPHER_CTX_gë_cùhî_d©a
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

451 *
EVP_CIPHER_CTX_£t_cùhî_d©a
(
EVP_CIPHER_CTX
 *
˘x
, *
cùhî_d©a
);

452 
	#EVP_CIPHER_CTX_ty≥
(
c
Ë
	`EVP_CIPHER_ty≥
(
	`EVP_CIPHER_CTX_cùhî
(c))

	)

453 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

454 
	#EVP_CIPHER_CTX_Êags
(
c
Ë
	`EVP_CIPHER_Êags
(
	`EVP_CIPHER_CTX_cùhî
(c))

	)

456 
	#EVP_CIPHER_CTX_mode
(
c
Ë
	`EVP_CIPHER_mode
(
	`EVP_CIPHER_CTX_cùhî
(c))

	)

458 
	#EVP_ENCODE_LENGTH
(
l
Ë((÷+2)/3*4)+÷/48+1)*2+80)

	)

459 
	#EVP_DECODE_LENGTH
(
l
Ë(÷+3)/4*3+80)

	)

461 
	#EVP_SignInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

462 
	#EVP_SignInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

463 
	#EVP_SignUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

464 
	#EVP_VîifyInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

465 
	#EVP_VîifyInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

466 
	#EVP_VîifyUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

467 
	#EVP_O≥nUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_De¸y±Upd©e
◊,b,c,d,e)

	)

468 
	#EVP_SólUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_En¸y±Upd©e
◊,b,c,d,e)

	)

469 
	#EVP_Dige°SignUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

470 
	#EVP_Dige°VîifyUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

472 #ifde‡
CONST_STRICT


473 
BIO_£t_md
(
BIO
 *, c⁄° 
EVP_MD
 *
md
);

475 
	#BIO_£t_md
(
b
,
md
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD
,0,(*)md)

	)

477 
	#BIO_gë_md
(
b
,
mdp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD
,0,(*)mdp)

	)

478 
	#BIO_gë_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD_CTX
,0,(*)md˝)

	)

479 
	#BIO_£t_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD_CTX
,0,(*)md˝)

	)

480 
	#BIO_gë_cùhî_°©us
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_STATUS
,0,
NULL
)

	)

481 
	#BIO_gë_cùhî_˘x
(
b
,
c_µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_CTX
,0,(*)c_µ)

	)

483  
EVP_Cùhî
(
EVP_CIPHER_CTX
 *
c
,

484 *
out
,

485 c⁄° *
ö
, 
öl
);

487 
	#EVP_add_cùhî_Æüs
(
n
,
Æüs
) \

488 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

489 
	#EVP_add_dige°_Æüs
(
n
,
Æüs
) \

490 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

491 
	#EVP_dñëe_cùhî_Æüs
(
Æüs
) \

492 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
);

	)

493 
	#EVP_dñëe_dige°_Æüs
(
Æüs
) \

494 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
);

	)

496 
EVP_MD_CTX_˘æ
(
EVP_MD_CTX
 *
˘x
, 
cmd
, 
p1
, *
p2
);

497 
EVP_MD_CTX
 *
EVP_MD_CTX_√w
();

498 
EVP_MD_CTX_ª£t
(
EVP_MD_CTX
 *
˘x
);

499 
EVP_MD_CTX_‰ì
(
EVP_MD_CTX
 *
˘x
);

500 
	#EVP_MD_CTX_¸óã
(Ë
	`EVP_MD_CTX_√w
()

	)

501 
	#EVP_MD_CTX_öô
(
˘x
Ë
	`EVP_MD_CTX_ª£t
((˘x))

	)

502 
	#EVP_MD_CTX_de°roy
(
˘x
Ë
	`EVP_MD_CTX_‰ì
((˘x))

	)

503  
EVP_MD_CTX_c›y_ex
(
EVP_MD_CTX
 *
out
, c⁄° EVP_MD_CTX *
ö
);

504 
EVP_MD_CTX_£t_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

505 
EVP_MD_CTX_˛ór_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

506 
EVP_MD_CTX_ã°_Êags
(c⁄° 
EVP_MD_CTX
 *
˘x
, 
Êags
);

507  
EVP_Dige°Inô_ex
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
,

508 
ENGINE
 *
im∂
);

509  
EVP_Dige°Upd©e
(
EVP_MD_CTX
 *
˘x
, c⁄° *
d
,

510 
size_t
 
˙t
);

511  
EVP_Dige°FöÆ_ex
(
EVP_MD_CTX
 *
˘x
, *
md
,

512 *
s
);

513  
EVP_Dige°
(c⁄° *
d©a
, 
size_t
 
cou¡
,

514 *
md
, *
size
,

515 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
im∂
);

517  
EVP_MD_CTX_c›y
(
EVP_MD_CTX
 *
out
, c⁄° EVP_MD_CTX *
ö
);

518  
EVP_Dige°Inô
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
);

519 
__owur
 
EVP_Dige°FöÆ
(
EVP_MD_CTX
 *
˘x
, *
md
,

520 *
s
);

522 #i‚de‡
OPENSSL_NO_UI


523 
EVP_ªad_pw_°rög
(*
buf
, 
Àngth
, c⁄° *
¥om±
, 
vîify
);

524 
EVP_ªad_pw_°rög_mö
(*
buf
, 
möÀn
, 
maxÀn
,

525 c⁄° *
¥om±
, 
vîify
);

526 
EVP_£t_pw_¥om±
(c⁄° *
¥om±
);

527 *
EVP_gë_pw_¥om±
();

530 
__owur
 
EVP_ByãsToKey
(c⁄° 
EVP_CIPHER
 *
ty≥
, c⁄° 
EVP_MD
 *
md
,

531 c⁄° *
ß…
,

532 c⁄° *
d©a
, 
d©Æ
, 
cou¡
,

533 *
key
, *
iv
);

535 
EVP_CIPHER_CTX_£t_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

536 
EVP_CIPHER_CTX_˛ór_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

537 
EVP_CIPHER_CTX_ã°_Êags
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

539 
__owur
 
EVP_En¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
cùhî
,

540 c⁄° *
key
, c⁄° *
iv
);

541  
EVP_En¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
,

542 c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

543 c⁄° *
key
,

544 c⁄° *
iv
);

545  
EVP_En¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

546 *
oué
, c⁄° *
ö
, 
öl
);

547  
EVP_En¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

548 *
oué
);

549  
EVP_En¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

550 *
oué
);

552 
__owur
 
EVP_De¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
cùhî
,

553 c⁄° *
key
, c⁄° *
iv
);

554  
EVP_De¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
,

555 c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

556 c⁄° *
key
,

557 c⁄° *
iv
);

558  
EVP_De¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

559 *
oué
, c⁄° *
ö
, 
öl
);

560 
__owur
 
EVP_De¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
,

561 *
oué
);

562  
EVP_De¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
,

563 *
oué
);

565 
__owur
 
EVP_CùhîInô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
cùhî
,

566 c⁄° *
key
, c⁄° *
iv
,

567 
íc
);

568  
EVP_CùhîInô_ex
(
EVP_CIPHER_CTX
 *
˘x
,

569 c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

570 c⁄° *
key
,

571 c⁄° *
iv
, 
íc
);

572 
__owur
 
EVP_CùhîUpd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

573 *
oué
, c⁄° *
ö
, 
öl
);

574 
__owur
 
EVP_CùhîFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
,

575 *
oué
);

576 
__owur
 
EVP_CùhîFöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
,

577 *
oué
);

579 
__owur
 
EVP_SignFöÆ
(
EVP_MD_CTX
 *
˘x
, *
md
, *
s
,

580 
EVP_PKEY
 *
pkey
);

582 
__owur
 
EVP_VîifyFöÆ
(
EVP_MD_CTX
 *
˘x
, c⁄° *
sigbuf
,

583 
sigÀn
, 
EVP_PKEY
 *
pkey
);

585  
EVP_Dige°SignInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 **
p˘x
,

586 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
e
,

587 
EVP_PKEY
 *
pkey
);

588 
__owur
 
EVP_Dige°SignFöÆ
(
EVP_MD_CTX
 *
˘x
, *
sigªt
,

589 
size_t
 *
sigÀn
);

591 
__owur
 
EVP_Dige°VîifyInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 **
p˘x
,

592 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
e
,

593 
EVP_PKEY
 *
pkey
);

594 
__owur
 
EVP_Dige°VîifyFöÆ
(
EVP_MD_CTX
 *
˘x
, c⁄° *
sig
,

595 
size_t
 
sigÀn
);

597 #i‚de‡
OPENSSL_NO_RSA


598 
__owur
 
EVP_O≥nInô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
ty≥
,

599 c⁄° *
ek
, 
ekl
,

600 c⁄° *
iv
, 
EVP_PKEY
 *
¥iv
);

601 
__owur
 
EVP_O≥nFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

603 
__owur
 
EVP_SólInô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
ty≥
,

604 **
ek
, *
ekl
, *
iv
,

605 
EVP_PKEY
 **
pubk
, 
≈ubk
);

606 
__owur
 
EVP_SólFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

609 
EVP_ENCODE_CTX
 *
EVP_ENCODE_CTX_√w
();

610 
EVP_ENCODE_CTX_‰ì
(
EVP_ENCODE_CTX
 *
˘x
);

611 
EVP_ENCODE_CTX_num
(
EVP_ENCODE_CTX
 *
˘x
);

612 
EVP_EncodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

613 
EVP_EncodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
, *
out
, *
oué
,

614 c⁄° *
ö
, 
öl
);

615 
EVP_EncodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
, *
out
, *
oué
);

616 
EVP_EncodeBlock
(*
t
, c⁄° *
f
, 
n
);

618 
EVP_DecodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

619 
EVP_DecodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
, *
out
, *
oué
,

620 c⁄° *
ö
, 
öl
);

621 
EVP_DecodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
, 

622 *
out
, *
oué
);

623 
EVP_DecodeBlock
(*
t
, c⁄° *
f
, 
n
);

625 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

626 
	#EVP_CIPHER_CTX_öô
(
c
Ë
	`EVP_CIPHER_CTX_ª£t
(c)

	)

627 
	#EVP_CIPHER_CTX_˛ónup
(
c
Ë
	`EVP_CIPHER_CTX_ª£t
(c)

	)

629 
EVP_CIPHER_CTX
 *
EVP_CIPHER_CTX_√w
();

630 
EVP_CIPHER_CTX_ª£t
(
EVP_CIPHER_CTX
 *
c
);

631 
EVP_CIPHER_CTX_‰ì
(
EVP_CIPHER_CTX
 *
c
);

632 
EVP_CIPHER_CTX_£t_key_Àngth
(
EVP_CIPHER_CTX
 *
x
, 
keyÀn
);

633 
EVP_CIPHER_CTX_£t_∑ddög
(
EVP_CIPHER_CTX
 *
c
, 
∑d
);

634 
EVP_CIPHER_CTX_˘æ
(
EVP_CIPHER_CTX
 *
˘x
, 
ty≥
, 
¨g
, *
±r
);

635 
EVP_CIPHER_CTX_ønd_key
(
EVP_CIPHER_CTX
 *
˘x
, *
key
);

637 c⁄° 
BIO_METHOD
 *
BIO_f_md
();

638 c⁄° 
BIO_METHOD
 *
BIO_f_ba£64
();

639 c⁄° 
BIO_METHOD
 *
BIO_f_cùhî
();

640 c⁄° 
BIO_METHOD
 *
BIO_f_ªlübÀ
();

641 
__owur
 
BIO_£t_cùhî
(
BIO
 *
b
, c⁄° 
EVP_CIPHER
 *
c
, c⁄° *
k
,

642 c⁄° *
i
, 
íc
);

644 c⁄° 
EVP_MD
 *
EVP_md_nuŒ
();

645 #i‚de‡
OPENSSL_NO_MD2


646 c⁄° 
EVP_MD
 *
EVP_md2
();

648 #i‚de‡
OPENSSL_NO_MD4


649 c⁄° 
EVP_MD
 *
EVP_md4
();

651 #i‚de‡
OPENSSL_NO_MD5


652 c⁄° 
EVP_MD
 *
EVP_md5
();

653 c⁄° 
EVP_MD
 *
EVP_md5_sha1
();

655 #i‚de‡
OPENSSL_NO_BLAKE2


656 c⁄° 
EVP_MD
 *
EVP_bœke2b512
();

657 c⁄° 
EVP_MD
 *
EVP_bœke2s256
();

659 c⁄° 
EVP_MD
 *
EVP_sha1
();

660 c⁄° 
EVP_MD
 *
EVP_sha224
();

661 c⁄° 
EVP_MD
 *
EVP_sha256
();

662 c⁄° 
EVP_MD
 *
EVP_sha384
();

663 c⁄° 
EVP_MD
 *
EVP_sha512
();

664 #i‚de‡
OPENSSL_NO_MDC2


665 c⁄° 
EVP_MD
 *
EVP_mdc2
();

667 #i‚de‡
OPENSSL_NO_RMD160


668 c⁄° 
EVP_MD
 *
EVP_rùemd160
();

670 #i‚de‡
OPENSSL_NO_WHIRLPOOL


671 c⁄° 
EVP_MD
 *
EVP_whúÕoﬁ
();

673 c⁄° 
EVP_CIPHER
 *
EVP_íc_nuŒ
();

674 #i‚de‡
OPENSSL_NO_DES


675 c⁄° 
EVP_CIPHER
 *
EVP_des_ecb
();

676 c⁄° 
EVP_CIPHER
 *
EVP_des_ede
();

677 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3
();

678 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ecb
();

679 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ecb
();

680 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb64
();

681 
	#EVP_des_cfb
 
EVP_des_cfb64


	)

682 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb1
();

683 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb8
();

684 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb64
();

685 
	#EVP_des_ede_cfb
 
EVP_des_ede_cfb64


	)

686 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb64
();

687 
	#EVP_des_ede3_cfb
 
EVP_des_ede3_cfb64


	)

688 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb1
();

689 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb8
();

690 c⁄° 
EVP_CIPHER
 *
EVP_des_ofb
();

691 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ofb
();

692 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ofb
();

693 c⁄° 
EVP_CIPHER
 *
EVP_des_cbc
();

694 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cbc
();

695 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cbc
();

696 c⁄° 
EVP_CIPHER
 *
EVP_desx_cbc
();

697 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_wøp
();

704 #i‚de‡
OPENSSL_NO_RC4


705 c⁄° 
EVP_CIPHER
 *
EVP_rc4
();

706 c⁄° 
EVP_CIPHER
 *
EVP_rc4_40
();

707 #i‚de‡
OPENSSL_NO_MD5


708 c⁄° 
EVP_CIPHER
 *
EVP_rc4_hmac_md5
();

711 #i‚de‡
OPENSSL_NO_IDEA


712 c⁄° 
EVP_CIPHER
 *
EVP_idó_ecb
();

713 c⁄° 
EVP_CIPHER
 *
EVP_idó_cfb64
();

714 
	#EVP_idó_cfb
 
EVP_idó_cfb64


	)

715 c⁄° 
EVP_CIPHER
 *
EVP_idó_ofb
();

716 c⁄° 
EVP_CIPHER
 *
EVP_idó_cbc
();

718 #i‚de‡
OPENSSL_NO_RC2


719 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ecb
();

720 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cbc
();

721 c⁄° 
EVP_CIPHER
 *
EVP_rc2_40_cbc
();

722 c⁄° 
EVP_CIPHER
 *
EVP_rc2_64_cbc
();

723 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cfb64
();

724 
	#EVP_rc2_cfb
 
EVP_rc2_cfb64


	)

725 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ofb
();

727 #i‚de‡
OPENSSL_NO_BF


728 c⁄° 
EVP_CIPHER
 *
EVP_bf_ecb
();

729 c⁄° 
EVP_CIPHER
 *
EVP_bf_cbc
();

730 c⁄° 
EVP_CIPHER
 *
EVP_bf_cfb64
();

731 
	#EVP_bf_cfb
 
EVP_bf_cfb64


	)

732 c⁄° 
EVP_CIPHER
 *
EVP_bf_ofb
();

734 #i‚de‡
OPENSSL_NO_CAST


735 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ecb
();

736 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cbc
();

737 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cfb64
();

738 
	#EVP_ˇ°5_cfb
 
EVP_ˇ°5_cfb64


	)

739 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ofb
();

741 #i‚de‡
OPENSSL_NO_RC5


742 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_cbc
();

743 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_ecb
();

744 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_cfb64
();

745 
	#EVP_rc5_32_12_16_cfb
 
EVP_rc5_32_12_16_cfb64


	)

746 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_ofb
();

748 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ecb
();

749 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc
();

750 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb1
();

751 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb8
();

752 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb128
();

753 
	#EVP_´s_128_cfb
 
EVP_´s_128_cfb128


	)

754 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ofb
();

755 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_˘r
();

756 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ccm
();

757 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_gcm
();

758 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_xts
();

759 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_wøp
();

760 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_wøp_∑d
();

761 #i‚de‡
OPENSSL_NO_OCB


762 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ocb
();

764 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ecb
();

765 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cbc
();

766 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb1
();

767 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb8
();

768 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb128
();

769 
	#EVP_´s_192_cfb
 
EVP_´s_192_cfb128


	)

770 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ofb
();

771 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_˘r
();

772 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ccm
();

773 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_gcm
();

774 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_wøp
();

775 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_wøp_∑d
();

776 #i‚de‡
OPENSSL_NO_OCB


777 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ocb
();

779 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ecb
();

780 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc
();

781 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb1
();

782 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb8
();

783 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb128
();

784 
	#EVP_´s_256_cfb
 
EVP_´s_256_cfb128


	)

785 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ofb
();

786 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_˘r
();

787 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ccm
();

788 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_gcm
();

789 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_xts
();

790 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_wøp
();

791 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_wøp_∑d
();

792 #i‚de‡
OPENSSL_NO_OCB


793 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ocb
();

795 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc_hmac_sha1
();

796 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc_hmac_sha1
();

797 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc_hmac_sha256
();

798 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc_hmac_sha256
();

799 #i‚de‡
OPENSSL_NO_CAMELLIA


800 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ecb
();

801 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cbc
();

802 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb1
();

803 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb8
();

804 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb128
();

805 
	#EVP_ˇmñlü_128_cfb
 
EVP_ˇmñlü_128_cfb128


	)

806 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ofb
();

807 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_˘r
();

808 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ecb
();

809 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cbc
();

810 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb1
();

811 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb8
();

812 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb128
();

813 
	#EVP_ˇmñlü_192_cfb
 
EVP_ˇmñlü_192_cfb128


	)

814 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ofb
();

815 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_˘r
();

816 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ecb
();

817 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cbc
();

818 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb1
();

819 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb8
();

820 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb128
();

821 
	#EVP_ˇmñlü_256_cfb
 
EVP_ˇmñlü_256_cfb128


	)

822 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ofb
();

823 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_˘r
();

825 #i‚de‡
OPENSSL_NO_CHACHA


826 c⁄° 
EVP_CIPHER
 *
EVP_chacha20
();

827 #i‚de‡
OPENSSL_NO_POLY1305


828 c⁄° 
EVP_CIPHER
 *
EVP_chacha20_pﬁy1305
();

832 #i‚de‡
OPENSSL_NO_SEED


833 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ecb
();

834 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cbc
();

835 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cfb128
();

836 
	#EVP_£ed_cfb
 
EVP_£ed_cfb128


	)

837 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ofb
();

840 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

841 
	#OPENSSL_add_Æl_Æg‹ôhms_c⁄f
() \

842 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ADD_ALL_CIPHERS
 \

843 | 
OPENSSL_INIT_ADD_ALL_DIGESTS
 \

844 | 
OPENSSL_INIT_LOAD_CONFIG
, 
NULL
)

	)

845 
	#OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
() \

846 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ADD_ALL_CIPHERS
 \

847 | 
OPENSSL_INIT_ADD_ALL_DIGESTS
, 
NULL
)

	)

849 #ifde‡
OPENSSL_LOAD_CONF


850 
	#O≥nSSL_add_Æl_Æg‹ôhms
() \

851 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ADD_ALL_CIPHERS
 \

852 | 
OPENSSL_INIT_ADD_ALL_DIGESTS
 \

853 | 
OPENSSL_INIT_LOAD_CONFIG
, 
NULL
)

	)

855 
	#O≥nSSL_add_Æl_Æg‹ôhms
() \

856 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ADD_ALL_CIPHERS
 \

857 | 
OPENSSL_INIT_ADD_ALL_DIGESTS
, 
NULL
)

	)

860 
	#O≥nSSL_add_Æl_cùhîs
() \

861 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ADD_ALL_CIPHERS
, 
NULL
)

	)

862 
	#O≥nSSL_add_Æl_dige°s
() \

863 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ADD_ALL_DIGESTS
, 
NULL
)

	)

865 
	#EVP_˛ónup
(Ë0Ë

	)

868 
EVP_add_cùhî
(c⁄° 
EVP_CIPHER
 *
cùhî
);

869 
EVP_add_dige°
(c⁄° 
EVP_MD
 *
dige°
);

871 c⁄° 
EVP_CIPHER
 *
EVP_gë_cùhîby«me
(c⁄° *
«me
);

872 c⁄° 
EVP_MD
 *
EVP_gë_dige°by«me
(c⁄° *
«me
);

874 
EVP_CIPHER_do_Æl
((*
‚
Ë(c⁄° 
EVP_CIPHER
 *
cùh
,

875 c⁄° *
‰om
, c⁄° *
to
, *
x
),

876 *
¨g
);

877 
EVP_CIPHER_do_Æl_s‹ãd
((*
‚
)

878 (c⁄° 
EVP_CIPHER
 *
cùh
, c⁄° *
‰om
,

879 c⁄° *
to
, *
x
), *
¨g
);

881 
EVP_MD_do_Æl
((*
‚
Ë(c⁄° 
EVP_MD
 *
cùh
,

882 c⁄° *
‰om
, c⁄° *
to
, *
x
),

883 *
¨g
);

884 
EVP_MD_do_Æl_s‹ãd
((*
‚
)

885 (c⁄° 
EVP_MD
 *
cùh
, c⁄° *
‰om
,

886 c⁄° *
to
, *
x
), *
¨g
);

888 
EVP_PKEY_de¸y±_ﬁd
(*
dec_key
,

889 c⁄° *
íc_key
, 
íc_key_Àn
,

890 
EVP_PKEY
 *
¥iv©e_key
);

891 
EVP_PKEY_í¸y±_ﬁd
(*
íc_key
,

892 c⁄° *
key
, 
key_Àn
,

893 
EVP_PKEY
 *
pub_key
);

894 
EVP_PKEY_ty≥
(
ty≥
);

895 
EVP_PKEY_id
(c⁄° 
EVP_PKEY
 *
pkey
);

896 
EVP_PKEY_ba£_id
(c⁄° 
EVP_PKEY
 *
pkey
);

897 
EVP_PKEY_bôs
(
EVP_PKEY
 *
pkey
);

898 
EVP_PKEY_£curôy_bôs
(c⁄° 
EVP_PKEY
 *
pkey
);

899 
EVP_PKEY_size
(
EVP_PKEY
 *
pkey
);

900 
EVP_PKEY_£t_ty≥
(
EVP_PKEY
 *
pkey
, 
ty≥
);

901 
EVP_PKEY_£t_ty≥_°r
(
EVP_PKEY
 *
pkey
, c⁄° *
°r
, 
Àn
);

902 
EVP_PKEY_assign
(
EVP_PKEY
 *
pkey
, 
ty≥
, *
key
);

903 *
EVP_PKEY_gë0
(c⁄° 
EVP_PKEY
 *
pkey
);

904 c⁄° *
EVP_PKEY_gë0_hmac
(c⁄° 
EVP_PKEY
 *
pkey
, 
size_t
 *
Àn
);

906 #i‚de‡
OPENSSL_NO_RSA


907 
rß_°
;

908 
EVP_PKEY_£t1_RSA
(
EVP_PKEY
 *
pkey
, 
rß_°
 *
key
);

909 
rß_°
 *
EVP_PKEY_gë0_RSA
(
EVP_PKEY
 *
pkey
);

910 
rß_°
 *
EVP_PKEY_gë1_RSA
(
EVP_PKEY
 *
pkey
);

912 #i‚de‡
OPENSSL_NO_DSA


913 
dß_°
;

914 
EVP_PKEY_£t1_DSA
(
EVP_PKEY
 *
pkey
, 
dß_°
 *
key
);

915 
dß_°
 *
EVP_PKEY_gë0_DSA
(
EVP_PKEY
 *
pkey
);

916 
dß_°
 *
EVP_PKEY_gë1_DSA
(
EVP_PKEY
 *
pkey
);

918 #i‚de‡
OPENSSL_NO_DH


919 
dh_°
;

920 
EVP_PKEY_£t1_DH
(
EVP_PKEY
 *
pkey
, 
dh_°
 *
key
);

921 
dh_°
 *
EVP_PKEY_gë0_DH
(
EVP_PKEY
 *
pkey
);

922 
dh_°
 *
EVP_PKEY_gë1_DH
(
EVP_PKEY
 *
pkey
);

924 #i‚de‡
OPENSSL_NO_EC


925 
ec_key_°
;

926 
EVP_PKEY_£t1_EC_KEY
(
EVP_PKEY
 *
pkey
, 
ec_key_°
 *
key
);

927 
ec_key_°
 *
EVP_PKEY_gë0_EC_KEY
(
EVP_PKEY
 *
pkey
);

928 
ec_key_°
 *
EVP_PKEY_gë1_EC_KEY
(
EVP_PKEY
 *
pkey
);

931 
EVP_PKEY
 *
EVP_PKEY_√w
();

932 
EVP_PKEY_up_ªf
(
EVP_PKEY
 *
pkey
);

933 
EVP_PKEY_‰ì
(
EVP_PKEY
 *
pkey
);

935 
EVP_PKEY
 *
d2i_PublicKey
(
ty≥
, EVP_PKEY **
a
, c⁄° **
µ
,

936 
Àngth
);

937 
i2d_PublicKey
(
EVP_PKEY
 *
a
, **
µ
);

939 
EVP_PKEY
 *
d2i_Priv©eKey
(
ty≥
, EVP_PKEY **
a
, c⁄° **
µ
,

940 
Àngth
);

941 
EVP_PKEY
 *
d2i_AutoPriv©eKey
(EVP_PKEY **
a
, c⁄° **
µ
,

942 
Àngth
);

943 
i2d_Priv©eKey
(
EVP_PKEY
 *
a
, **
µ
);

945 
EVP_PKEY_c›y_∑ømëîs
(
EVP_PKEY
 *
to
, c⁄° EVP_PKEY *
‰om
);

946 
EVP_PKEY_missög_∑ømëîs
(c⁄° 
EVP_PKEY
 *
pkey
);

947 
EVP_PKEY_ßve_∑ømëîs
(
EVP_PKEY
 *
pkey
, 
mode
);

948 
EVP_PKEY_cmp_∑ømëîs
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

950 
EVP_PKEY_cmp
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

952 
EVP_PKEY_¥öt_public
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

953 
ödít
, 
ASN1_PCTX
 *
p˘x
);

954 
EVP_PKEY_¥öt_¥iv©e
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

955 
ödít
, 
ASN1_PCTX
 *
p˘x
);

956 
EVP_PKEY_¥öt_∑øms
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

957 
ödít
, 
ASN1_PCTX
 *
p˘x
);

959 
EVP_PKEY_gë_deÁu…_dige°_nid
(
EVP_PKEY
 *
pkey
, *
≤id
);

961 
EVP_CIPHER_ty≥
(c⁄° 
EVP_CIPHER
 *
˘x
);

964 
EVP_CIPHER_∑øm_to_a¢1
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

965 
EVP_CIPHER_a¢1_to_∑øm
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

968 
EVP_CIPHER_£t_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

969 
EVP_CIPHER_gë_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

972 
PKCS5_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

973 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
,

974 c⁄° 
EVP_MD
 *
md
, 
í_de
);

975 
PKCS5_PBKDF2_HMAC_SHA1
(c⁄° *
∑ss
, 
∑s¶í
,

976 c⁄° *
ß…
, 
ß…Àn
, 
ôî
,

977 
keyÀn
, *
out
);

978 
PKCS5_PBKDF2_HMAC
(c⁄° *
∑ss
, 
∑s¶í
,

979 c⁄° *
ß…
, 
ß…Àn
, 
ôî
,

980 c⁄° 
EVP_MD
 *
dige°
, 
keyÀn
, *
out
);

981 
PKCS5_v2_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

982 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
,

983 c⁄° 
EVP_MD
 *
md
, 
í_de
);

985 #i‚de‡
OPENSSL_NO_SCRYPT


986 
EVP_PBE_s¸y±
(c⁄° *
∑ss
, 
size_t
 
∑s¶í
,

987 c⁄° *
ß…
, 
size_t
 
ß…Àn
,

988 
uöt64_t
 
N
, uöt64_à
r
, uöt64_à
p
, uöt64_à
maxmem
,

989 *
key
, 
size_t
 
keyÀn
);

991 
PKCS5_v2_s¸y±_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
,

992 
∑s¶í
, 
ASN1_TYPE
 *
∑øm
,

993 c⁄° 
EVP_CIPHER
 *
c
, c⁄° 
EVP_MD
 *
md
, 
í_de
);

996 
PKCS5_PBE_add
();

998 
EVP_PBE_CùhîInô
(
ASN1_OBJECT
 *
pbe_obj
, c⁄° *
∑ss
, 
∑s¶í
,

999 
ASN1_TYPE
 *
∑øm
, 
EVP_CIPHER_CTX
 *
˘x
, 
í_de
);

1004 
	#EVP_PBE_TYPE_OUTER
 0x0

	)

1006 
	#EVP_PBE_TYPE_PRF
 0x1

	)

1008 
	#EVP_PBE_TYPE_KDF
 0x2

	)

1010 
EVP_PBE_Æg_add_ty≥
(
pbe_ty≥
, 
pbe_nid
, 
cùhî_nid
,

1011 
md_nid
, 
EVP_PBE_KEYGEN
 *
keygí
);

1012 
EVP_PBE_Æg_add
(
nid
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

1013 
EVP_PBE_KEYGEN
 *
keygí
);

1014 
EVP_PBE_föd
(
ty≥
, 
pbe_nid
, *
p˙id
, *
pmnid
,

1015 
EVP_PBE_KEYGEN
 **
pkeygí
);

1016 
EVP_PBE_˛ónup
();

1017 
EVP_PBE_gë
(*
±y≥
, *
µbe_nid
, 
size_t
 
num
);

1019 
	#ASN1_PKEY_ALIAS
 0x1

	)

1020 
	#ASN1_PKEY_DYNAMIC
 0x2

	)

1021 
	#ASN1_PKEY_SIGPARAM_NULL
 0x4

	)

1023 
	#ASN1_PKEY_CTRL_PKCS7_SIGN
 0x1

	)

1024 
	#ASN1_PKEY_CTRL_PKCS7_ENCRYPT
 0x2

	)

1025 
	#ASN1_PKEY_CTRL_DEFAULT_MD_NID
 0x3

	)

1026 
	#ASN1_PKEY_CTRL_CMS_SIGN
 0x5

	)

1027 
	#ASN1_PKEY_CTRL_CMS_ENVELOPE
 0x7

	)

1028 
	#ASN1_PKEY_CTRL_CMS_RI_TYPE
 0x8

	)

1030 
EVP_PKEY_a¢1_gë_cou¡
();

1031 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_gë0
(
idx
);

1032 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_föd
(
ENGINE
 **
≥
, 
ty≥
);

1033 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_föd_°r
(
ENGINE
 **
≥
,

1034 c⁄° *
°r
, 
Àn
);

1035 
EVP_PKEY_a¢1_add0
(c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1036 
EVP_PKEY_a¢1_add_Æüs
(
to
, 
‰om
);

1037 
EVP_PKEY_a¢1_gë0_öfo
(*
µkey_id
, *
pkey_ba£_id
,

1038 *
µkey_Êags
, c⁄° **
pöfo
,

1039 c⁄° **
µem_°r
,

1040 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1042 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_gë0_a¢1
(
EVP_PKEY
 *
pkey
);

1043 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_√w
(
id
, 
Êags
,

1044 c⁄° *
≥m_°r
,

1045 c⁄° *
öfo
);

1046 
EVP_PKEY_a¢1_c›y
(
EVP_PKEY_ASN1_METHOD
 *
d°
,

1047 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
§c
);

1048 
EVP_PKEY_a¢1_‰ì
(
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1049 
EVP_PKEY_a¢1_£t_public
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1050 (*
pub_decode
Ë(
EVP_PKEY
 *
pk
,

1051 
X509_PUBKEY
 *
pub
),

1052 (*
pub_ícode
Ë(
X509_PUBKEY
 *
pub
,

1053 c⁄° 
EVP_PKEY
 *
pk
),

1054 (*
pub_cmp
Ë(c⁄° 
EVP_PKEY
 *
a
,

1055 c⁄° 
EVP_PKEY
 *
b
),

1056 (*
pub_¥öt
Ë(
BIO
 *
out
,

1057 c⁄° 
EVP_PKEY
 *
pkey
,

1058 
ödít
, 
ASN1_PCTX
 *
p˘x
),

1059 (*
pkey_size
Ë(c⁄° 
EVP_PKEY
 *
pk
),

1060 (*
pkey_bôs
Ë(c⁄° 
EVP_PKEY
 *
pk
));

1061 
EVP_PKEY_a¢1_£t_¥iv©e
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1062 (*
¥iv_decode
Ë(
EVP_PKEY
 *
pk
,

1063 
PKCS8_PRIV_KEY_INFO


1064 *
p8öf
),

1065 (*
¥iv_ícode
Ë(
PKCS8_PRIV_KEY_INFO
 *
p8
,

1066 c⁄° 
EVP_PKEY
 *
pk
),

1067 (*
¥iv_¥öt
Ë(
BIO
 *
out
,

1068 c⁄° 
EVP_PKEY
 *
pkey
,

1069 
ödít
,

1070 
ASN1_PCTX
 *
p˘x
));

1071 
EVP_PKEY_a¢1_£t_∑øm
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1072 (*
∑øm_decode
Ë(
EVP_PKEY
 *
pkey
,

1073 c⁄° **
pdî
,

1074 
dîÀn
),

1075 (*
∑øm_ícode
Ë(c⁄° 
EVP_PKEY
 *
pkey
,

1076 **
pdî
),

1077 (*
∑øm_missög
Ë(c⁄° 
EVP_PKEY
 *
pk
),

1078 (*
∑øm_c›y
Ë(
EVP_PKEY
 *
to
,

1079 c⁄° 
EVP_PKEY
 *
‰om
),

1080 (*
∑øm_cmp
Ë(c⁄° 
EVP_PKEY
 *
a
,

1081 c⁄° 
EVP_PKEY
 *
b
),

1082 (*
∑øm_¥öt
Ë(
BIO
 *
out
,

1083 c⁄° 
EVP_PKEY
 *
pkey
,

1084 
ödít
,

1085 
ASN1_PCTX
 *
p˘x
));

1087 
EVP_PKEY_a¢1_£t_‰ì
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1088 (*
pkey_‰ì
Ë(
EVP_PKEY
 *
pkey
));

1089 
EVP_PKEY_a¢1_£t_˘æ
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1090 (*
pkey_˘æ
Ë(
EVP_PKEY
 *
pkey
, 
›
,

1091 
¨g1
, *
¨g2
));

1092 
EVP_PKEY_a¢1_£t_ôem
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1093 (*
ôem_vîify
Ë(
EVP_MD_CTX
 *
˘x
,

1094 c⁄° 
ASN1_ITEM
 *
ô
,

1095 *
a¢
,

1096 
X509_ALGOR
 *
a
,

1097 
ASN1_BIT_STRING
 *
sig
,

1098 
EVP_PKEY
 *
pkey
),

1099 (*
ôem_sign
Ë(
EVP_MD_CTX
 *
˘x
,

1100 c⁄° 
ASN1_ITEM
 *
ô
,

1101 *
a¢
,

1102 
X509_ALGOR
 *
Æg1
,

1103 
X509_ALGOR
 *
Æg2
,

1104 
ASN1_BIT_STRING
 *
sig
));

1106 
EVP_PKEY_a¢1_£t_£curôy_bôs
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1107 (*
pkey_£curôy_bôs
Ë(c⁄° 
EVP_PKEY


1108 *
pk
));

1110 
	#EVP_PKEY_OP_UNDEFINED
 0

	)

1111 
	#EVP_PKEY_OP_PARAMGEN
 (1<<1)

	)

1112 
	#EVP_PKEY_OP_KEYGEN
 (1<<2)

	)

1113 
	#EVP_PKEY_OP_SIGN
 (1<<3)

	)

1114 
	#EVP_PKEY_OP_VERIFY
 (1<<4)

	)

1115 
	#EVP_PKEY_OP_VERIFYRECOVER
 (1<<5)

	)

1116 
	#EVP_PKEY_OP_SIGNCTX
 (1<<6)

	)

1117 
	#EVP_PKEY_OP_VERIFYCTX
 (1<<7)

	)

1118 
	#EVP_PKEY_OP_ENCRYPT
 (1<<8)

	)

1119 
	#EVP_PKEY_OP_DECRYPT
 (1<<9)

	)

1120 
	#EVP_PKEY_OP_DERIVE
 (1<<10)

	)

1122 
	#EVP_PKEY_OP_TYPE_SIG
 \

1123 (
EVP_PKEY_OP_SIGN
 | 
EVP_PKEY_OP_VERIFY
 | 
EVP_PKEY_OP_VERIFYRECOVER
 \

1124 | 
EVP_PKEY_OP_SIGNCTX
 | 
EVP_PKEY_OP_VERIFYCTX
)

	)

1126 
	#EVP_PKEY_OP_TYPE_CRYPT
 \

1127 (
EVP_PKEY_OP_ENCRYPT
 | 
EVP_PKEY_OP_DECRYPT
)

	)

1129 
	#EVP_PKEY_OP_TYPE_NOGEN
 \

1130 (
EVP_PKEY_OP_TYPE_SIG
 | 
EVP_PKEY_OP_TYPE_CRYPT
 | 
EVP_PKEY_OP_DERIVE
)

	)

1132 
	#EVP_PKEY_OP_TYPE_GEN
 \

1133 (
EVP_PKEY_OP_PARAMGEN
 | 
EVP_PKEY_OP_KEYGEN
)

	)

1135 
	#EVP_PKEY_CTX_£t_sig«tuª_md
(
˘x
, 
md
) \

1136 
	`EVP_PKEY_CTX_˘æ
(
˘x
, -1, 
EVP_PKEY_OP_TYPE_SIG
, \

1137 
EVP_PKEY_CTRL_MD
, 0, (*)
md
)

	)

1139 
	#EVP_PKEY_CTX_gë_sig«tuª_md
(
˘x
, 
pmd
) \

1140 
	`EVP_PKEY_CTX_˘æ
(
˘x
, -1, 
EVP_PKEY_OP_TYPE_SIG
, \

1141 
EVP_PKEY_CTRL_GET_MD
, 0, (*)
pmd
)

	)

1143 
	#EVP_PKEY_CTX_£t_mac_key
(
˘x
, 
key
, 
Àn
) \

1144 
	`EVP_PKEY_CTX_˘æ
(
˘x
, -1, 
EVP_PKEY_OP_KEYGEN
, \

1145 
EVP_PKEY_CTRL_SET_MAC_KEY
, 
Àn
, (*)
key
)

	)

1147 
	#EVP_PKEY_CTRL_MD
 1

	)

1148 
	#EVP_PKEY_CTRL_PEER_KEY
 2

	)

1150 
	#EVP_PKEY_CTRL_PKCS7_ENCRYPT
 3

	)

1151 
	#EVP_PKEY_CTRL_PKCS7_DECRYPT
 4

	)

1153 
	#EVP_PKEY_CTRL_PKCS7_SIGN
 5

	)

1155 
	#EVP_PKEY_CTRL_SET_MAC_KEY
 6

	)

1157 
	#EVP_PKEY_CTRL_DIGESTINIT
 7

	)

1160 
	#EVP_PKEY_CTRL_SET_IV
 8

	)

1162 
	#EVP_PKEY_CTRL_CMS_ENCRYPT
 9

	)

1163 
	#EVP_PKEY_CTRL_CMS_DECRYPT
 10

	)

1164 
	#EVP_PKEY_CTRL_CMS_SIGN
 11

	)

1166 
	#EVP_PKEY_CTRL_CIPHER
 12

	)

1168 
	#EVP_PKEY_CTRL_GET_MD
 13

	)

1170 
	#EVP_PKEY_ALG_CTRL
 0x1000

	)

1172 
	#EVP_PKEY_FLAG_AUTOARGLEN
 2

	)

1176 
	#EVP_PKEY_FLAG_SIGCTX_CUSTOM
 4

	)

1178 c⁄° 
EVP_PKEY_METHOD
 *
EVP_PKEY_mëh_föd
(
ty≥
);

1179 
EVP_PKEY_METHOD
 *
EVP_PKEY_mëh_√w
(
id
, 
Êags
);

1180 
EVP_PKEY_mëh_gë0_öfo
(*
µkey_id
, *
pÊags
,

1181 c⁄° 
EVP_PKEY_METHOD
 *
mëh
);

1182 
EVP_PKEY_mëh_c›y
(
EVP_PKEY_METHOD
 *
d°
, c⁄° EVP_PKEY_METHOD *
§c
);

1183 
EVP_PKEY_mëh_‰ì
(
EVP_PKEY_METHOD
 *
pmëh
);

1184 
EVP_PKEY_mëh_add0
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
);

1186 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_√w
(
EVP_PKEY
 *
pkey
, 
ENGINE
 *
e
);

1187 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_√w_id
(
id
, 
ENGINE
 *
e
);

1188 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_dup
(EVP_PKEY_CTX *
˘x
);

1189 
EVP_PKEY_CTX_‰ì
(
EVP_PKEY_CTX
 *
˘x
);

1191 
EVP_PKEY_CTX_˘æ
(
EVP_PKEY_CTX
 *
˘x
, 
keyty≥
, 
›ty≥
,

1192 
cmd
, 
p1
, *
p2
);

1193 
EVP_PKEY_CTX_˘æ_°r
(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
ty≥
,

1194 c⁄° *
vÆue
);

1196 
EVP_PKEY_CTX_°r2˘æ
(
EVP_PKEY_CTX
 *
˘x
, 
cmd
, c⁄° *
°r
);

1197 
EVP_PKEY_CTX_hex2˘æ
(
EVP_PKEY_CTX
 *
˘x
, 
cmd
, c⁄° *
hex
);

1199 
EVP_PKEY_CTX_gë_›î©i⁄
(
EVP_PKEY_CTX
 *
˘x
);

1200 
EVP_PKEY_CTX_£t0_keygí_öfo
(
EVP_PKEY_CTX
 *
˘x
, *
d©
, 
d©Àn
);

1202 
EVP_PKEY
 *
EVP_PKEY_√w_mac_key
(
ty≥
, 
ENGINE
 *
e
,

1203 c⁄° *
key
, 
keyÀn
);

1205 
EVP_PKEY_CTX_£t_d©a
(
EVP_PKEY_CTX
 *
˘x
, *
d©a
);

1206 *
EVP_PKEY_CTX_gë_d©a
(
EVP_PKEY_CTX
 *
˘x
);

1207 
EVP_PKEY
 *
EVP_PKEY_CTX_gë0_pkey
(
EVP_PKEY_CTX
 *
˘x
);

1209 
EVP_PKEY
 *
EVP_PKEY_CTX_gë0_≥îkey
(
EVP_PKEY_CTX
 *
˘x
);

1211 
EVP_PKEY_CTX_£t_≠p_d©a
(
EVP_PKEY_CTX
 *
˘x
, *
d©a
);

1212 *
EVP_PKEY_CTX_gë_≠p_d©a
(
EVP_PKEY_CTX
 *
˘x
);

1214 
EVP_PKEY_sign_öô
(
EVP_PKEY_CTX
 *
˘x
);

1215 
EVP_PKEY_sign
(
EVP_PKEY_CTX
 *
˘x
,

1216 *
sig
, 
size_t
 *
sigÀn
,

1217 c⁄° *
tbs
, 
size_t
 
tb¶í
);

1218 
EVP_PKEY_vîify_öô
(
EVP_PKEY_CTX
 *
˘x
);

1219 
EVP_PKEY_vîify
(
EVP_PKEY_CTX
 *
˘x
,

1220 c⁄° *
sig
, 
size_t
 
sigÀn
,

1221 c⁄° *
tbs
, 
size_t
 
tb¶í
);

1222 
EVP_PKEY_vîify_ªcovî_öô
(
EVP_PKEY_CTX
 *
˘x
);

1223 
EVP_PKEY_vîify_ªcovî
(
EVP_PKEY_CTX
 *
˘x
,

1224 *
rout
, 
size_t
 *
rouéí
,

1225 c⁄° *
sig
, 
size_t
 
sigÀn
);

1226 
EVP_PKEY_í¸y±_öô
(
EVP_PKEY_CTX
 *
˘x
);

1227 
EVP_PKEY_í¸y±
(
EVP_PKEY_CTX
 *
˘x
,

1228 *
out
, 
size_t
 *
ouéí
,

1229 c⁄° *
ö
, 
size_t
 
öÀn
);

1230 
EVP_PKEY_de¸y±_öô
(
EVP_PKEY_CTX
 *
˘x
);

1231 
EVP_PKEY_de¸y±
(
EVP_PKEY_CTX
 *
˘x
,

1232 *
out
, 
size_t
 *
ouéí
,

1233 c⁄° *
ö
, 
size_t
 
öÀn
);

1235 
EVP_PKEY_dîive_öô
(
EVP_PKEY_CTX
 *
˘x
);

1236 
EVP_PKEY_dîive_£t_≥î
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
≥î
);

1237 
EVP_PKEY_dîive
(
EVP_PKEY_CTX
 *
˘x
, *
key
, 
size_t
 *
keyÀn
);

1239 
	tEVP_PKEY_gí_cb
(
	tEVP_PKEY_CTX
 *
	t˘x
);

1241 
EVP_PKEY_∑ømgí_öô
(
EVP_PKEY_CTX
 *
˘x
);

1242 
EVP_PKEY_∑ømgí
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 **
µkey
);

1243 
EVP_PKEY_keygí_öô
(
EVP_PKEY_CTX
 *
˘x
);

1244 
EVP_PKEY_keygí
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 **
µkey
);

1246 
EVP_PKEY_CTX_£t_cb
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY_gí_cb
 *
cb
);

1247 
EVP_PKEY_gí_cb
 *
EVP_PKEY_CTX_gë_cb
(
EVP_PKEY_CTX
 *
˘x
);

1249 
EVP_PKEY_CTX_gë_keygí_öfo
(
EVP_PKEY_CTX
 *
˘x
, 
idx
);

1251 
EVP_PKEY_mëh_£t_öô
(
EVP_PKEY_METHOD
 *
pmëh
,

1252 (*
öô
Ë(
EVP_PKEY_CTX
 *
˘x
));

1254 
EVP_PKEY_mëh_£t_c›y
(
EVP_PKEY_METHOD
 *
pmëh
,

1255 (*
c›y
Ë(
EVP_PKEY_CTX
 *
d°
,

1256 
EVP_PKEY_CTX
 *
§c
));

1258 
EVP_PKEY_mëh_£t_˛ónup
(
EVP_PKEY_METHOD
 *
pmëh
,

1259 (*
˛ónup
Ë(
EVP_PKEY_CTX
 *
˘x
));

1261 
EVP_PKEY_mëh_£t_∑ømgí
(
EVP_PKEY_METHOD
 *
pmëh
,

1262 (*
∑ømgí_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1263 (*
∑ømgí
Ë(
EVP_PKEY_CTX
 *
˘x
,

1264 
EVP_PKEY
 *
pkey
));

1266 
EVP_PKEY_mëh_£t_keygí
(
EVP_PKEY_METHOD
 *
pmëh
,

1267 (*
keygí_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1268 (*
keygí
Ë(
EVP_PKEY_CTX
 *
˘x
,

1269 
EVP_PKEY
 *
pkey
));

1271 
EVP_PKEY_mëh_£t_sign
(
EVP_PKEY_METHOD
 *
pmëh
,

1272 (*
sign_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1273 (*
sign
Ë(
EVP_PKEY_CTX
 *
˘x
,

1274 *
sig
, 
size_t
 *
sigÀn
,

1275 c⁄° *
tbs
,

1276 
size_t
 
tb¶í
));

1278 
EVP_PKEY_mëh_£t_vîify
(
EVP_PKEY_METHOD
 *
pmëh
,

1279 (*
vîify_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1280 (*
vîify
Ë(
EVP_PKEY_CTX
 *
˘x
,

1281 c⁄° *
sig
,

1282 
size_t
 
sigÀn
,

1283 c⁄° *
tbs
,

1284 
size_t
 
tb¶í
));

1286 
EVP_PKEY_mëh_£t_vîify_ªcovî
(
EVP_PKEY_METHOD
 *
pmëh
,

1287 (*
vîify_ªcovî_öô
Ë(
EVP_PKEY_CTX


1288 *
˘x
),

1289 (*
vîify_ªcovî
Ë(
EVP_PKEY_CTX


1290 *
˘x
,

1292 *
sig
,

1293 
size_t
 *
sigÀn
,

1295 *
tbs
,

1296 
size_t
 
tb¶í
));

1298 
EVP_PKEY_mëh_£t_sign˘x
(
EVP_PKEY_METHOD
 *
pmëh
,

1299 (*
sign˘x_öô
Ë(
EVP_PKEY_CTX
 *
˘x
,

1300 
EVP_MD_CTX
 *
m˘x
),

1301 (*
sign˘x
Ë(
EVP_PKEY_CTX
 *
˘x
,

1302 *
sig
,

1303 
size_t
 *
sigÀn
,

1304 
EVP_MD_CTX
 *
m˘x
));

1306 
EVP_PKEY_mëh_£t_vîify˘x
(
EVP_PKEY_METHOD
 *
pmëh
,

1307 (*
vîify˘x_öô
Ë(
EVP_PKEY_CTX
 *
˘x
,

1308 
EVP_MD_CTX
 *
m˘x
),

1309 (*
vîify˘x
Ë(
EVP_PKEY_CTX
 *
˘x
,

1310 c⁄° *
sig
,

1311 
sigÀn
,

1312 
EVP_MD_CTX
 *
m˘x
));

1314 
EVP_PKEY_mëh_£t_í¸y±
(
EVP_PKEY_METHOD
 *
pmëh
,

1315 (*
í¸y±_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1316 (*
í¸y±‚
Ë(
EVP_PKEY_CTX
 *
˘x
,

1317 *
out
,

1318 
size_t
 *
ouéí
,

1319 c⁄° *
ö
,

1320 
size_t
 
öÀn
));

1322 
EVP_PKEY_mëh_£t_de¸y±
(
EVP_PKEY_METHOD
 *
pmëh
,

1323 (*
de¸y±_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1324 (*
de¸y±
Ë(
EVP_PKEY_CTX
 *
˘x
,

1325 *
out
,

1326 
size_t
 *
ouéí
,

1327 c⁄° *
ö
,

1328 
size_t
 
öÀn
));

1330 
EVP_PKEY_mëh_£t_dîive
(
EVP_PKEY_METHOD
 *
pmëh
,

1331 (*
dîive_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1332 (*
dîive
Ë(
EVP_PKEY_CTX
 *
˘x
,

1333 *
key
,

1334 
size_t
 *
keyÀn
));

1336 
EVP_PKEY_mëh_£t_˘æ
(
EVP_PKEY_METHOD
 *
pmëh
,

1337 (*
˘æ
Ë(
EVP_PKEY_CTX
 *
˘x
, 
ty≥
, 
p1
,

1338 *
p2
),

1339 (*
˘æ_°r
Ë(
EVP_PKEY_CTX
 *
˘x
,

1340 c⁄° *
ty≥
,

1341 c⁄° *
vÆue
));

1343 
EVP_PKEY_mëh_gë_öô
(
EVP_PKEY_METHOD
 *
pmëh
,

1344 (**
pöô
Ë(
EVP_PKEY_CTX
 *
˘x
));

1346 
EVP_PKEY_mëh_gë_c›y
(
EVP_PKEY_METHOD
 *
pmëh
,

1347 (**
pc›y
Ë(
EVP_PKEY_CTX
 *
d°
,

1348 
EVP_PKEY_CTX
 *
§c
));

1350 
EVP_PKEY_mëh_gë_˛ónup
(
EVP_PKEY_METHOD
 *
pmëh
,

1351 (**
p˛ónup
Ë(
EVP_PKEY_CTX
 *
˘x
));

1353 
EVP_PKEY_mëh_gë_∑ømgí
(
EVP_PKEY_METHOD
 *
pmëh
,

1354 (**
µ¨amgí_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1355 (**
µ¨amgí
Ë(
EVP_PKEY_CTX
 *
˘x
,

1356 
EVP_PKEY
 *
pkey
));

1358 
EVP_PKEY_mëh_gë_keygí
(
EVP_PKEY_METHOD
 *
pmëh
,

1359 (**
pkeygí_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1360 (**
pkeygí
Ë(
EVP_PKEY_CTX
 *
˘x
,

1361 
EVP_PKEY
 *
pkey
));

1363 
EVP_PKEY_mëh_gë_sign
(
EVP_PKEY_METHOD
 *
pmëh
,

1364 (**
psign_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1365 (**
psign
Ë(
EVP_PKEY_CTX
 *
˘x
,

1366 *
sig
, 
size_t
 *
sigÀn
,

1367 c⁄° *
tbs
,

1368 
size_t
 
tb¶í
));

1370 
EVP_PKEY_mëh_gë_vîify
(
EVP_PKEY_METHOD
 *
pmëh
,

1371 (**
pvîify_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1372 (**
pvîify
Ë(
EVP_PKEY_CTX
 *
˘x
,

1373 c⁄° *
sig
,

1374 
size_t
 
sigÀn
,

1375 c⁄° *
tbs
,

1376 
size_t
 
tb¶í
));

1378 
EVP_PKEY_mëh_gë_vîify_ªcovî
(
EVP_PKEY_METHOD
 *
pmëh
,

1379 (**
pvîify_ªcovî_öô
Ë(
EVP_PKEY_CTX


1380 *
˘x
),

1381 (**
pvîify_ªcovî
Ë(
EVP_PKEY_CTX


1382 *
˘x
,

1384 *
sig
,

1385 
size_t
 *
sigÀn
,

1387 *
tbs
,

1388 
size_t
 
tb¶í
));

1390 
EVP_PKEY_mëh_gë_sign˘x
(
EVP_PKEY_METHOD
 *
pmëh
,

1391 (**
psign˘x_öô
Ë(
EVP_PKEY_CTX
 *
˘x
,

1392 
EVP_MD_CTX
 *
m˘x
),

1393 (**
psign˘x
Ë(
EVP_PKEY_CTX
 *
˘x
,

1394 *
sig
,

1395 
size_t
 *
sigÀn
,

1396 
EVP_MD_CTX
 *
m˘x
));

1398 
EVP_PKEY_mëh_gë_vîify˘x
(
EVP_PKEY_METHOD
 *
pmëh
,

1399 (**
pvîify˘x_öô
Ë(
EVP_PKEY_CTX
 *
˘x
,

1400 
EVP_MD_CTX
 *
m˘x
),

1401 (**
pvîify˘x
Ë(
EVP_PKEY_CTX
 *
˘x
,

1402 c⁄° *
sig
,

1403 
sigÀn
,

1404 
EVP_MD_CTX
 *
m˘x
));

1406 
EVP_PKEY_mëh_gë_í¸y±
(
EVP_PKEY_METHOD
 *
pmëh
,

1407 (**
≥n¸y±_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1408 (**
≥n¸y±‚
Ë(
EVP_PKEY_CTX
 *
˘x
,

1409 *
out
,

1410 
size_t
 *
ouéí
,

1411 c⁄° *
ö
,

1412 
size_t
 
öÀn
));

1414 
EVP_PKEY_mëh_gë_de¸y±
(
EVP_PKEY_METHOD
 *
pmëh
,

1415 (**
pde¸y±_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1416 (**
pde¸y±
Ë(
EVP_PKEY_CTX
 *
˘x
,

1417 *
out
,

1418 
size_t
 *
ouéí
,

1419 c⁄° *
ö
,

1420 
size_t
 
öÀn
));

1422 
EVP_PKEY_mëh_gë_dîive
(
EVP_PKEY_METHOD
 *
pmëh
,

1423 (**
pdîive_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1424 (**
pdîive
Ë(
EVP_PKEY_CTX
 *
˘x
,

1425 *
key
,

1426 
size_t
 *
keyÀn
));

1428 
EVP_PKEY_mëh_gë_˘æ
(
EVP_PKEY_METHOD
 *
pmëh
,

1429 (**
p˘æ
Ë(
EVP_PKEY_CTX
 *
˘x
, 
ty≥
, 
p1
,

1430 *
p2
),

1431 (**
p˘æ_°r
Ë(
EVP_PKEY_CTX
 *
˘x
,

1432 c⁄° *
ty≥
,

1433 c⁄° *
vÆue
));

1435 
EVP_add_Æg_moduÀ
();

1443 
ERR_lﬂd_EVP_°rögs
();

1448 
	#EVP_F_AESNI_INIT_KEY
 165

	)

1449 
	#EVP_F_AES_INIT_KEY
 133

	)

1450 
	#EVP_F_AES_T4_INIT_KEY
 178

	)

1451 
	#EVP_F_ALG_MODULE_INIT
 177

	)

1452 
	#EVP_F_CAMELLIA_INIT_KEY
 159

	)

1453 
	#EVP_F_CHACHA20_POLY1305_CTRL
 182

	)

1454 
	#EVP_F_CMLL_T4_INIT_KEY
 179

	)

1455 
	#EVP_F_DO_SIGVER_INIT
 161

	)

1456 
	#EVP_F_EVP_CIPHERINIT_EX
 123

	)

1457 
	#EVP_F_EVP_CIPHER_CTX_COPY
 163

	)

1458 
	#EVP_F_EVP_CIPHER_CTX_CTRL
 124

	)

1459 
	#EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH
 122

	)

1460 
	#EVP_F_EVP_DECRYPTFINAL_EX
 101

	)

1461 
	#EVP_F_EVP_DIGESTINIT_EX
 128

	)

1462 
	#EVP_F_EVP_ENCRYPTFINAL_EX
 127

	)

1463 
	#EVP_F_EVP_MD_CTX_COPY_EX
 110

	)

1464 
	#EVP_F_EVP_MD_SIZE
 162

	)

1465 
	#EVP_F_EVP_OPENINIT
 102

	)

1466 
	#EVP_F_EVP_PBE_ALG_ADD
 115

	)

1467 
	#EVP_F_EVP_PBE_ALG_ADD_TYPE
 160

	)

1468 
	#EVP_F_EVP_PBE_CIPHERINIT
 116

	)

1469 
	#EVP_F_EVP_PBE_SCRYPT
 181

	)

1470 
	#EVP_F_EVP_PKCS82PKEY
 111

	)

1471 
	#EVP_F_EVP_PKEY2PKCS8
 113

	)

1472 
	#EVP_F_EVP_PKEY_COPY_PARAMETERS
 103

	)

1473 
	#EVP_F_EVP_PKEY_CTX_CTRL
 137

	)

1474 
	#EVP_F_EVP_PKEY_CTX_CTRL_STR
 150

	)

1475 
	#EVP_F_EVP_PKEY_CTX_DUP
 156

	)

1476 
	#EVP_F_EVP_PKEY_DECRYPT
 104

	)

1477 
	#EVP_F_EVP_PKEY_DECRYPT_INIT
 138

	)

1478 
	#EVP_F_EVP_PKEY_DECRYPT_OLD
 151

	)

1479 
	#EVP_F_EVP_PKEY_DERIVE
 153

	)

1480 
	#EVP_F_EVP_PKEY_DERIVE_INIT
 154

	)

1481 
	#EVP_F_EVP_PKEY_DERIVE_SET_PEER
 155

	)

1482 
	#EVP_F_EVP_PKEY_ENCRYPT
 105

	)

1483 
	#EVP_F_EVP_PKEY_ENCRYPT_INIT
 139

	)

1484 
	#EVP_F_EVP_PKEY_ENCRYPT_OLD
 152

	)

1485 
	#EVP_F_EVP_PKEY_GET0_DH
 119

	)

1486 
	#EVP_F_EVP_PKEY_GET0_DSA
 120

	)

1487 
	#EVP_F_EVP_PKEY_GET0_EC_KEY
 131

	)

1488 
	#EVP_F_EVP_PKEY_GET0_HMAC
 183

	)

1489 
	#EVP_F_EVP_PKEY_GET0_RSA
 121

	)

1490 
	#EVP_F_EVP_PKEY_KEYGEN
 146

	)

1491 
	#EVP_F_EVP_PKEY_KEYGEN_INIT
 147

	)

1492 
	#EVP_F_EVP_PKEY_NEW
 106

	)

1493 
	#EVP_F_EVP_PKEY_PARAMGEN
 148

	)

1494 
	#EVP_F_EVP_PKEY_PARAMGEN_INIT
 149

	)

1495 
	#EVP_F_EVP_PKEY_SIGN
 140

	)

1496 
	#EVP_F_EVP_PKEY_SIGN_INIT
 141

	)

1497 
	#EVP_F_EVP_PKEY_VERIFY
 142

	)

1498 
	#EVP_F_EVP_PKEY_VERIFY_INIT
 143

	)

1499 
	#EVP_F_EVP_PKEY_VERIFY_RECOVER
 144

	)

1500 
	#EVP_F_EVP_PKEY_VERIFY_RECOVER_INIT
 145

	)

1501 
	#EVP_F_EVP_SIGNFINAL
 107

	)

1502 
	#EVP_F_EVP_VERIFYFINAL
 108

	)

1503 
	#EVP_F_INT_CTX_NEW
 157

	)

1504 
	#EVP_F_PKCS5_PBE_KEYIVGEN
 117

	)

1505 
	#EVP_F_PKCS5_V2_PBE_KEYIVGEN
 118

	)

1506 
	#EVP_F_PKCS5_V2_PBKDF2_KEYIVGEN
 164

	)

1507 
	#EVP_F_PKCS5_V2_SCRYPT_KEYIVGEN
 180

	)

1508 
	#EVP_F_PKEY_SET_TYPE
 158

	)

1509 
	#EVP_F_RC2_MAGIC_TO_METH
 109

	)

1510 
	#EVP_F_RC5_CTRL
 125

	)

1513 
	#EVP_R_AES_KEY_SETUP_FAILED
 143

	)

1514 
	#EVP_R_BAD_DECRYPT
 100

	)

1515 
	#EVP_R_BUFFER_TOO_SMALL
 155

	)

1516 
	#EVP_R_CAMELLIA_KEY_SETUP_FAILED
 157

	)

1517 
	#EVP_R_CIPHER_PARAMETER_ERROR
 122

	)

1518 
	#EVP_R_COMMAND_NOT_SUPPORTED
 147

	)

1519 
	#EVP_R_COPY_ERROR
 173

	)

1520 
	#EVP_R_CTRL_NOT_IMPLEMENTED
 132

	)

1521 
	#EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED
 133

	)

1522 
	#EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH
 138

	)

1523 
	#EVP_R_DECODE_ERROR
 114

	)

1524 
	#EVP_R_DIFFERENT_KEY_TYPES
 101

	)

1525 
	#EVP_R_DIFFERENT_PARAMETERS
 153

	)

1526 
	#EVP_R_ERROR_LOADING_SECTION
 165

	)

1527 
	#EVP_R_ERROR_SETTING_FIPS_MODE
 166

	)

1528 
	#EVP_R_EXPECTING_AN_HMAC_KEY
 174

	)

1529 
	#EVP_R_EXPECTING_AN_RSA_KEY
 127

	)

1530 
	#EVP_R_EXPECTING_A_DH_KEY
 128

	)

1531 
	#EVP_R_EXPECTING_A_DSA_KEY
 129

	)

1532 
	#EVP_R_EXPECTING_A_EC_KEY
 142

	)

1533 
	#EVP_R_FIPS_MODE_NOT_SUPPORTED
 167

	)

1534 
	#EVP_R_ILLEGAL_SCRYPT_PARAMETERS
 171

	)

1535 
	#EVP_R_INITIALIZATION_ERROR
 134

	)

1536 
	#EVP_R_INPUT_NOT_INITIALIZED
 111

	)

1537 
	#EVP_R_INVALID_DIGEST
 152

	)

1538 
	#EVP_R_INVALID_FIPS_MODE
 168

	)

1539 
	#EVP_R_INVALID_KEY_LENGTH
 130

	)

1540 
	#EVP_R_INVALID_OPERATION
 148

	)

1541 
	#EVP_R_KEYGEN_FAILURE
 120

	)

1542 
	#EVP_R_MEMORY_LIMIT_EXCEEDED
 172

	)

1543 
	#EVP_R_MESSAGE_DIGEST_IS_NULL
 159

	)

1544 
	#EVP_R_METHOD_NOT_SUPPORTED
 144

	)

1545 
	#EVP_R_MISSING_PARAMETERS
 103

	)

1546 
	#EVP_R_NO_CIPHER_SET
 131

	)

1547 
	#EVP_R_NO_DEFAULT_DIGEST
 158

	)

1548 
	#EVP_R_NO_DIGEST_SET
 139

	)

1549 
	#EVP_R_NO_KEY_SET
 154

	)

1550 
	#EVP_R_NO_OPERATION_SET
 149

	)

1551 
	#EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE
 150

	)

1552 
	#EVP_R_OPERATON_NOT_INITIALIZED
 151

	)

1553 
	#EVP_R_PRIVATE_KEY_DECODE_ERROR
 145

	)

1554 
	#EVP_R_PRIVATE_KEY_ENCODE_ERROR
 146

	)

1555 
	#EVP_R_PUBLIC_KEY_NOT_RSA
 106

	)

1556 
	#EVP_R_UNKNOWN_CIPHER
 160

	)

1557 
	#EVP_R_UNKNOWN_DIGEST
 161

	)

1558 
	#EVP_R_UNKNOWN_OPTION
 169

	)

1559 
	#EVP_R_UNKNOWN_PBE_ALGORITHM
 121

	)

1560 
	#EVP_R_UNSUPORTED_NUMBER_OF_ROUNDS
 135

	)

1561 
	#EVP_R_UNSUPPORTED_ALGORITHM
 156

	)

1562 
	#EVP_R_UNSUPPORTED_CIPHER
 107

	)

1563 
	#EVP_R_UNSUPPORTED_KEYLENGTH
 123

	)

1564 
	#EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION
 124

	)

1565 
	#EVP_R_UNSUPPORTED_KEY_SIZE
 108

	)

1566 
	#EVP_R_UNSUPPORTED_PRF
 125

	)

1567 
	#EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM
 118

	)

1568 
	#EVP_R_UNSUPPORTED_SALT_TYPE
 126

	)

1569 
	#EVP_R_WRAP_MODE_NOT_ALLOWED
 170

	)

1570 
	#EVP_R_WRONG_FINAL_BLOCK_LENGTH
 109

	)

1572 #ifde‡ 
__˝lu•lus


	@hmac.h

10 #i‚de‡
HEADER_HMAC_H


11 
	#HEADER_HMAC_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 
	~<›ís¶/evp.h
>

17 
	#HMAC_MAX_MD_CBLOCK
 128

	)

19 #ifde‡ 
__˝lu•lus


23 
size_t
 
HMAC_size
(c⁄° 
HMAC_CTX
 *
e
);

24 
HMAC_CTX
 *
HMAC_CTX_√w
();

25 
HMAC_CTX_ª£t
(
HMAC_CTX
 *
˘x
);

26 
HMAC_CTX_‰ì
(
HMAC_CTX
 *
˘x
);

28 
DEPRECATEDIN_1_1_0
(
__owur
 
HMAC_Inô
(
HMAC_CTX
 *
˘x
, c⁄° *
key
, 
Àn
,

29 c⁄° 
EVP_MD
 *
md
))

31  
HMAC_Inô_ex
(
HMAC_CTX
 *
˘x
, c⁄° *
key
, 
Àn
,

32 c⁄° 
EVP_MD
 *
md
, 
ENGINE
 *
im∂
);

33  
HMAC_Upd©e
(
HMAC_CTX
 *
˘x
, c⁄° *
d©a
,

34 
size_t
 
Àn
);

35  
HMAC_FöÆ
(
HMAC_CTX
 *
˘x
, *
md
,

36 *
Àn
);

37 *
HMAC
(c⁄° 
EVP_MD
 *
evp_md
, c⁄° *
key
, 
key_Àn
,

38 c⁄° *
d
, 
size_t
 
n
, *
md
,

39 *
md_Àn
);

40 
__owur
 
HMAC_CTX_c›y
(
HMAC_CTX
 *
d˘x
, HMAC_CTX *
s˘x
);

42 
HMAC_CTX_£t_Êags
(
HMAC_CTX
 *
˘x
, 
Êags
);

43 c⁄° 
EVP_MD
 *
HMAC_CTX_gë_md
(c⁄° 
HMAC_CTX
 *
˘x
);

45 #ifde‡ 
__˝lu•lus


	@idea.h

10 #i‚de‡
HEADER_IDEA_H


11 
	#HEADER_IDEA_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #i‚de‡
OPENSSL_NO_IDEA


16 #ifde‡ 
__˝lu•lus


20 
	tIDEA_INT
;

22 
	#IDEA_ENCRYPT
 1

	)

23 
	#IDEA_DECRYPT
 0

	)

25 
	#IDEA_BLOCK
 8

	)

26 
	#IDEA_KEY_LENGTH
 16

	)

28 
	sidó_key_°
 {

29 
IDEA_INT
 
d©a
[9][6];

30 } 
	tIDEA_KEY_SCHEDULE
;

32 c⁄° *
IDEA_›ti⁄s
();

33 
IDEA_ecb_í¸y±
(c⁄° *
ö
, *
out
,

34 
IDEA_KEY_SCHEDULE
 *
ks
);

35 
IDEA_£t_í¸y±_key
(c⁄° *
key
, 
IDEA_KEY_SCHEDULE
 *
ks
);

36 
IDEA_£t_de¸y±_key
(
IDEA_KEY_SCHEDULE
 *
ek
, IDEA_KEY_SCHEDULE *
dk
);

37 
IDEA_cbc_í¸y±
(c⁄° *
ö
, *
out
,

38 
Àngth
, 
IDEA_KEY_SCHEDULE
 *
ks
, *
iv
,

39 
íc
);

40 
IDEA_cfb64_í¸y±
(c⁄° *
ö
, *
out
,

41 
Àngth
, 
IDEA_KEY_SCHEDULE
 *
ks
, *
iv
,

42 *
num
, 
íc
);

43 
IDEA_ofb64_í¸y±
(c⁄° *
ö
, *
out
,

44 
Àngth
, 
IDEA_KEY_SCHEDULE
 *
ks
, *
iv
,

45 *
num
);

46 
IDEA_í¸y±
(*
ö
, 
IDEA_KEY_SCHEDULE
 *
ks
);

48 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

49 
	#idó_›ti⁄s
 
IDEA_›ti⁄s


	)

50 
	#idó_ecb_í¸y±
 
IDEA_ecb_í¸y±


	)

51 
	#idó_£t_í¸y±_key
 
IDEA_£t_í¸y±_key


	)

52 
	#idó_£t_de¸y±_key
 
IDEA_£t_de¸y±_key


	)

53 
	#idó_cbc_í¸y±
 
IDEA_cbc_í¸y±


	)

54 
	#idó_cfb64_í¸y±
 
IDEA_cfb64_í¸y±


	)

55 
	#idó_ofb64_í¸y±
 
IDEA_ofb64_í¸y±


	)

56 
	#idó_í¸y±
 
IDEA_í¸y±


	)

59 #ifde‡ 
__˝lu•lus


	@kdf.h

10 #i‚de‡
HEADER_KDF_H


11 
	#HEADER_KDF_H


	)

13 #ifde‡
__˝lu•lus


17 
	#EVP_PKEY_CTRL_TLS_MD
 (
EVP_PKEY_ALG_CTRL
)

	)

18 
	#EVP_PKEY_CTRL_TLS_SECRET
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

19 
	#EVP_PKEY_CTRL_TLS_SEED
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

20 
	#EVP_PKEY_CTRL_HKDF_MD
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

21 
	#EVP_PKEY_CTRL_HKDF_SALT
 (
EVP_PKEY_ALG_CTRL
 + 4)

	)

22 
	#EVP_PKEY_CTRL_HKDF_KEY
 (
EVP_PKEY_ALG_CTRL
 + 5)

	)

23 
	#EVP_PKEY_CTRL_HKDF_INFO
 (
EVP_PKEY_ALG_CTRL
 + 6)

	)

25 
	#EVP_PKEY_CTX_£t_és1_¥f_md
(
p˘x
, 
md
) \

26 
	`EVP_PKEY_CTX_˘æ
(
p˘x
, -1, 
EVP_PKEY_OP_DERIVE
, \

27 
EVP_PKEY_CTRL_TLS_MD
, 0, (*)
md
)

	)

29 
	#EVP_PKEY_CTX_£t1_és1_¥f_£¸ë
(
p˘x
, 
£c
, 
£˛í
) \

30 
	`EVP_PKEY_CTX_˘æ
(
p˘x
, -1, 
EVP_PKEY_OP_DERIVE
, \

31 
EVP_PKEY_CTRL_TLS_SECRET
, 
£˛í
, (*)
£c
)

	)

33 
	#EVP_PKEY_CTX_add1_és1_¥f_£ed
(
p˘x
, 
£ed
, 
£edÀn
) \

34 
	`EVP_PKEY_CTX_˘æ
(
p˘x
, -1, 
EVP_PKEY_OP_DERIVE
, \

35 
EVP_PKEY_CTRL_TLS_SEED
, 
£edÀn
, (*)
£ed
)

	)

37 
	#EVP_PKEY_CTX_£t_hkdf_md
(
p˘x
, 
md
) \

38 
	`EVP_PKEY_CTX_˘æ
(
p˘x
, -1, 
EVP_PKEY_OP_DERIVE
, \

39 
EVP_PKEY_CTRL_HKDF_MD
, 0, (*)
md
)

	)

41 
	#EVP_PKEY_CTX_£t1_hkdf_ß…
(
p˘x
, 
ß…
, 
ß…Àn
) \

42 
	`EVP_PKEY_CTX_˘æ
(
p˘x
, -1, 
EVP_PKEY_OP_DERIVE
, \

43 
EVP_PKEY_CTRL_HKDF_SALT
, 
ß…Àn
, (*)
ß…
)

	)

45 
	#EVP_PKEY_CTX_£t1_hkdf_key
(
p˘x
, 
key
, 
keyÀn
) \

46 
	`EVP_PKEY_CTX_˘æ
(
p˘x
, -1, 
EVP_PKEY_OP_DERIVE
, \

47 
EVP_PKEY_CTRL_HKDF_KEY
, 
keyÀn
, (*)
key
)

	)

49 
	#EVP_PKEY_CTX_add1_hkdf_öfo
(
p˘x
, 
öfo
, 
öfﬁí
) \

50 
	`EVP_PKEY_CTX_˘æ
(
p˘x
, -1, 
EVP_PKEY_OP_DERIVE
, \

51 
EVP_PKEY_CTRL_HKDF_INFO
, 
öfﬁí
, (*)
öfo
)

	)

59 
ERR_lﬂd_KDF_°rögs
();

64 
	#KDF_F_PKEY_TLS1_PRF_CTRL_STR
 100

	)

65 
	#KDF_F_PKEY_TLS1_PRF_DERIVE
 101

	)

68 
	#KDF_R_INVALID_DIGEST
 100

	)

69 
	#KDF_R_MISSING_PARAMETER
 101

	)

70 
	#KDF_R_VALUE_MISSING
 102

	)

72 #ifde‡ 
__˝lu•lus


	@lhash.h

14 #i‚de‡
HEADER_LHASH_H


15 
	#HEADER_LHASH_H


	)

17 
	~<›ís¶/e_os2.h
>

18 
	~<›ís¶/bio.h
>

20 #ifde‡ 
__˝lu•lus


24 
lhash_node_°
 
	tOPENSSL_LH_NODE
;

25 (*
OPENSSL_LH_COMPFUNC
) (const *, const *);

26 (*
	tOPENSSL_LH_HASHFUNC
) (const *);

27 (*
OPENSSL_LH_DOALL_FUNC
) (*);

28 (*
OPENSSL_LH_DOALL_FUNCARG
) (*, *);

29 
lhash_°
 
	tOPENSSL_LHASH
;

41 
	#DECLARE_LHASH_HASH_FN
(
«me
, 
o_ty≥
) \

42 
«me
##
	`_LHASH_HASH
(c⁄° *);

	)

43 
	#IMPLEMENT_LHASH_HASH_FN
(
«me
, 
o_ty≥
) \

44 
«me
##
	`_LHASH_HASH
(c⁄° *
¨g
) { \

45 c⁄° 
o_ty≥
 *
a
 = 
¨g
; \

46  
«me
##
	`_hash
(
a
); }

	)

47 
	#LHASH_HASH_FN
(
«me
Ë«me##
_LHASH_HASH


	)

50 
	#DECLARE_LHASH_COMP_FN
(
«me
, 
o_ty≥
) \

51 
«me
##
	`_LHASH_COMP
(c⁄° *, c⁄° *);

	)

52 
	#IMPLEMENT_LHASH_COMP_FN
(
«me
, 
o_ty≥
) \

53 
«me
##
	`_LHASH_COMP
(c⁄° *
¨g1
, c⁄° *
¨g2
) { \

54 c⁄° 
o_ty≥
 *
a
 = 
¨g1
; \

55 c⁄° 
o_ty≥
 *
b
 = 
¨g2
; \

56  
«me
##
	`_cmp
(
a
,
b
); }

	)

57 
	#LHASH_COMP_FN
(
«me
Ë«me##
_LHASH_COMP


	)

60 
	#DECLARE_LHASH_DOALL_ARG_FN
(
«me
, 
o_ty≥
, 
a_ty≥
) \

61 
«me
##
	`_LHASH_DOALL_ARG
(*, *);

	)

62 
	#IMPLEMENT_LHASH_DOALL_ARG_FN
(
«me
, 
o_ty≥
, 
a_ty≥
) \

63 
«me
##
	`_LHASH_DOALL_ARG
(*
¨g1
, *
¨g2
) { \

64 
o_ty≥
 *
a
 = 
¨g1
; \

65 
a_ty≥
 *
b
 = 
¨g2
; \

66 
«me
##
	`_dﬂŒ_¨g
(
a
, 
b
); }

	)

67 
	#LHASH_DOALL_ARG_FN
(
«me
Ë«me##
_LHASH_DOALL_ARG


	)

70 
	#LH_LOAD_MULT
 256

	)

72 
OPENSSL_LH_îr‹
(
OPENSSL_LHASH
 *
lh
);

73 
OPENSSL_LHASH
 *
OPENSSL_LH_√w
(
OPENSSL_LH_HASHFUNC
 
h
, 
OPENSSL_LH_COMPFUNC
 
c
);

74 
OPENSSL_LH_‰ì
(
OPENSSL_LHASH
 *
lh
);

75 *
OPENSSL_LH_ö£π
(
OPENSSL_LHASH
 *
lh
, *
d©a
);

76 *
OPENSSL_LH_dñëe
(
OPENSSL_LHASH
 *
lh
, c⁄° *
d©a
);

77 *
OPENSSL_LH_ªåõve
(
OPENSSL_LHASH
 *
lh
, c⁄° *
d©a
);

78 
OPENSSL_LH_dﬂŒ
(
OPENSSL_LHASH
 *
lh
, 
OPENSSL_LH_DOALL_FUNC
 
func
);

79 
OPENSSL_LH_dﬂŒ_¨g
(
OPENSSL_LHASH
 *
lh
, 
OPENSSL_LH_DOALL_FUNCARG
 
func
, *
¨g
);

80 
OPENSSL_LH_°rhash
(c⁄° *
c
);

81 
OPENSSL_LH_num_ôems
(c⁄° 
OPENSSL_LHASH
 *
lh
);

82 
OPENSSL_LH_gë_down_lﬂd
(c⁄° 
OPENSSL_LHASH
 *
lh
);

83 
OPENSSL_LH_£t_down_lﬂd
(
OPENSSL_LHASH
 *
lh
, 
down_lﬂd
);

85 #i‚de‡
OPENSSL_NO_STDIO


86 
OPENSSL_LH_°©s
(c⁄° 
OPENSSL_LHASH
 *
lh
, 
FILE
 *
Â
);

87 
OPENSSL_LH_node_°©s
(c⁄° 
OPENSSL_LHASH
 *
lh
, 
FILE
 *
Â
);

88 
OPENSSL_LH_node_ußge_°©s
(c⁄° 
OPENSSL_LHASH
 *
lh
, 
FILE
 *
Â
);

90 
OPENSSL_LH_°©s_bio
(c⁄° 
OPENSSL_LHASH
 *
lh
, 
BIO
 *
out
);

91 
OPENSSL_LH_node_°©s_bio
(c⁄° 
OPENSSL_LHASH
 *
lh
, 
BIO
 *
out
);

92 
OPENSSL_LH_node_ußge_°©s_bio
(c⁄° 
OPENSSL_LHASH
 *
lh
, 
BIO
 *
out
);

94 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

95 
	#_LHASH
 
OPENSSL_LHASH


	)

96 
	#LHASH_NODE
 
OPENSSL_LH_NODE


	)

97 
	#lh_îr‹
 
OPENSSL_LH_îr‹


	)

98 
	#lh_√w
 
OPENSSL_lh_√w


	)

99 
	#lh_‰ì
 
OPENSSL_LH_‰ì


	)

100 
	#lh_ö£π
 
OPENSSL_LH_ö£π


	)

101 
	#lh_dñëe
 
OPENSSL_LH_dñëe


	)

102 
	#lh_ªåõve
 
OPENSSL_LH_ªåõve


	)

103 
	#lh_dﬂŒ
 
OPENSSL_LH_dﬂŒ


	)

104 
	#lh_dﬂŒ_¨g
 
OPENSSL_LH_dﬂŒ_¨g


	)

105 
	#lh_°rhash
 
OPENSSL_LH_°rhash


	)

106 
	#lh_num_ôems
 
OPENSSL_LH_num_ôems


	)

107 #i‚de‡
OPENSSL_NO_STDIO


108 
	#lh_°©s
 
OPENSSL_LH_°©s


	)

109 
	#lh_node_°©s
 
OPENSSL_LH_node_°©s


	)

110 
	#lh_node_ußge_°©s
 
OPENSSL_LH_node_ußge_°©s


	)

112 
	#lh_°©s_bio
 
OPENSSL_LH_°©s_bio


	)

113 
	#lh_node_°©s_bio
 
OPENSSL_LH_node_°©s_bio


	)

114 
	#lh_node_ußge_°©s_bio
 
OPENSSL_LH_node_ußge_°©s_bio


	)

119 
	#LHASH_OF
(
ty≥
Ë
lhash_°_
##
	)
type

121 
	#DEFINE_LHASH_OF
(
ty≥
) \

122 
	`LHASH_OF
(
ty≥
Ë{ 
lh_
##ty≥##
_dummy
 { * 
d1
; 
d2
; 
d3
; } 
dummy
; }; \

123 
os¶_ölöe
 
	`LHASH_OF
(
ty≥
) * \

124 
lh_
##
ty≥
##
	`_√w
((*
h‚
)(constÅype *), \

125 (*
c‚
)(c⁄° 
ty≥
 *, constÅype *)) \

127  (
	`LHASH_OF
(
ty≥
) *) \

128 
	`OPENSSL_LH_√w
((
OPENSSL_LH_HASHFUNC
)
h‚
, (
OPENSSL_LH_COMPFUNC
)
c‚
); \

130 
os¶_ölöe
 
lh_
##
ty≥
##
	`_‰ì
(
	`LHASH_OF
—y≥Ë*
lh
) \

132 
	`OPENSSL_LH_‰ì
((
OPENSSL_LHASH
 *)
lh
); \

134 
os¶_ölöe
 
ty≥
 *
lh_
##ty≥##
	`_ö£π
(
	`LHASH_OF
—y≥Ë*
lh
,Åy≥ *
d
) \

136  (
ty≥
 *)
	`OPENSSL_LH_ö£π
((
OPENSSL_LHASH
 *)
lh
, 
d
); \

138 
os¶_ölöe
 
ty≥
 *
lh_
##ty≥##
	`_dñëe
(
	`LHASH_OF
—y≥Ë*
lh
, c⁄°Åy≥ *
d
) \

140  (
ty≥
 *)
	`OPENSSL_LH_dñëe
((
OPENSSL_LHASH
 *)
lh
, 
d
); \

142 
os¶_ölöe
 
ty≥
 *
lh_
##ty≥##
	`_ªåõve
(
	`LHASH_OF
—y≥Ë*
lh
, c⁄°Åy≥ *
d
) \

144  (
ty≥
 *)
	`OPENSSL_LH_ªåõve
((
OPENSSL_LHASH
 *)
lh
, 
d
); \

146 
os¶_ölöe
 
lh_
##
ty≥
##
	`_îr‹
(
	`LHASH_OF
—y≥Ë*
lh
) \

148  
	`OPENSSL_LH_îr‹
((
OPENSSL_LHASH
 *)
lh
); \

150 
os¶_ölöe
 
lh_
##
ty≥
##
	`_num_ôems
(
	`LHASH_OF
—y≥Ë*
lh
) \

152  
	`OPENSSL_LH_num_ôems
((
OPENSSL_LHASH
 *)
lh
); \

154 
os¶_ölöe
 
lh_
##
ty≥
##
	`_node_°©s_bio
(c⁄° 
	`LHASH_OF
—y≥Ë*
lh
, 
BIO
 *
out
) \

156 
	`OPENSSL_LH_node_°©s_bio
((c⁄° 
OPENSSL_LHASH
 *)
lh
, 
out
); \

158 
os¶_ölöe
 
lh_
##
ty≥
##
	`_node_ußge_°©s_bio
(c⁄° 
	`LHASH_OF
—y≥Ë*
lh
, 
BIO
 *
out
) \

160 
	`OPENSSL_LH_node_ußge_°©s_bio
((c⁄° 
OPENSSL_LHASH
 *)
lh
, 
out
); \

162 
os¶_ölöe
 
lh_
##
ty≥
##
	`_°©s_bio
(c⁄° 
	`LHASH_OF
—y≥Ë*
lh
, 
BIO
 *
out
) \

164 
	`OPENSSL_LH_°©s_bio
((c⁄° 
OPENSSL_LHASH
 *)
lh
, 
out
); \

166 
os¶_ölöe
 
lh_
##
ty≥
##
	`_gë_down_lﬂd
(
	`LHASH_OF
—y≥Ë*
lh
) \

168  
	`OPENSSL_LH_gë_down_lﬂd
((
OPENSSL_LHASH
 *)
lh
); \

170 
os¶_ölöe
 
lh_
##
ty≥
##
	`_£t_down_lﬂd
(
	`LHASH_OF
—y≥Ë*
lh
, 
dl
) \

172 
	`OPENSSL_LH_£t_down_lﬂd
((
OPENSSL_LHASH
 *)
lh
, 
dl
); \

174 
os¶_ölöe
 
lh_
##
ty≥
##
	`_dﬂŒ
(
	`LHASH_OF
—y≥Ë*
lh
, \

175 (*
dﬂŒ
)(
ty≥
 *)) \

177 
	`OPENSSL_LH_dﬂŒ
((
OPENSSL_LHASH
 *)
lh
, (
OPENSSL_LH_DOALL_FUNC
)
dﬂŒ
); \

179 
	`LHASH_OF
(
ty≥
)

	)

181 
	#IMPLEMENT_LHASH_DOALL_ARG_CONST
(
ty≥
, 
¨gty≥
) \

182 
	`öt_im∂emít_lhash_dﬂŒ
(
ty≥
, 
¨gty≥
, c⁄°Åy≥)

	)

184 
	#IMPLEMENT_LHASH_DOALL_ARG
(
ty≥
, 
¨gty≥
) \

185 
	`öt_im∂emít_lhash_dﬂŒ
(
ty≥
, 
¨gty≥
,Åy≥)

	)

187 
	#öt_im∂emít_lhash_dﬂŒ
(
ty≥
, 
¨gty≥
, 
cb¨gty≥
) \

188 
os¶_ölöe
 \

189 
lh_
##
ty≥
##
_dﬂŒ_
##
	`¨gty≥
(
	`LHASH_OF
—y≥Ë*
lh
, \

190 (*
‚
)(
cb¨gty≥
 *, 
¨gty≥
 *), \

191 
¨gty≥
 *
¨g
) \

193 
	`OPENSSL_LH_dﬂŒ_¨g
((
OPENSSL_LHASH
 *)
lh
, (
OPENSSL_LH_DOALL_FUNCARG
)
‚
, (*)
¨g
); \

195 
	`LHASH_OF
(
ty≥
)

	)

197 
DEFINE_LHASH_OF
(
OPENSSL_STRING
);

198 
DEFINE_LHASH_OF
(
OPENSSL_CSTRING
);

200 #ifde‡ 
__˝lu•lus


	@md2.h

10 #i‚de‡
HEADER_MD2_H


11 
	#HEADER_MD2_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #i‚de‡
OPENSSL_NO_MD2


16 
	~<°ddef.h
>

17 #ifde‡ 
__˝lu•lus


21 
	tMD2_INT
;

23 
	#MD2_DIGEST_LENGTH
 16

	)

24 
	#MD2_BLOCK
 16

	)

26 
	sMD2°©e_°
 {

27 
num
;

28 
d©a
[
MD2_BLOCK
];

29 
MD2_INT
 
cksm
[
MD2_BLOCK
];

30 
MD2_INT
 
°©e
[
MD2_BLOCK
];

31 } 
	tMD2_CTX
;

33 c⁄° *
MD2_›ti⁄s
();

34 
MD2_Inô
(
MD2_CTX
 *
c
);

35 
MD2_Upd©e
(
MD2_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

36 
MD2_FöÆ
(*
md
, 
MD2_CTX
 *
c
);

37 *
MD2
(c⁄° *
d
, 
size_t
 
n
, *
md
);

39 #ifde‡ 
__˝lu•lus


	@md4.h

10 #i‚de‡
HEADER_MD4_H


11 
	#HEADER_MD4_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #i‚de‡
OPENSSL_NO_MD4


16 
	~<›ís¶/e_os2.h
>

17 
	~<°ddef.h
>

18 #ifde‡ 
__˝lu•lus


27 
	#MD4_LONG
 

	)

29 
	#MD4_CBLOCK
 64

	)

30 
	#MD4_LBLOCK
 (
MD4_CBLOCK
/4)

	)

31 
	#MD4_DIGEST_LENGTH
 16

	)

33 
	sMD4°©e_°
 {

34 
MD4_LONG
 
A
, 
B
, 
C
, 
D
;

35 
MD4_LONG
 
Nl
, 
Nh
;

36 
MD4_LONG
 
d©a
[
MD4_LBLOCK
];

37 
num
;

38 } 
	tMD4_CTX
;

40 
MD4_Inô
(
MD4_CTX
 *
c
);

41 
MD4_Upd©e
(
MD4_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

42 
MD4_FöÆ
(*
md
, 
MD4_CTX
 *
c
);

43 *
MD4
(c⁄° *
d
, 
size_t
 
n
, *
md
);

44 
MD4_Tønsf‹m
(
MD4_CTX
 *
c
, c⁄° *
b
);

46 #ifde‡ 
__˝lu•lus


	@md5.h

10 #i‚de‡
HEADER_MD5_H


11 
	#HEADER_MD5_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #i‚de‡
OPENSSL_NO_MD5


16 
	~<›ís¶/e_os2.h
>

17 
	~<°ddef.h
>

18 #ifde‡ 
__˝lu•lus


27 
	#MD5_LONG
 

	)

29 
	#MD5_CBLOCK
 64

	)

30 
	#MD5_LBLOCK
 (
MD5_CBLOCK
/4)

	)

31 
	#MD5_DIGEST_LENGTH
 16

	)

33 
	sMD5°©e_°
 {

34 
MD5_LONG
 
A
, 
B
, 
C
, 
D
;

35 
MD5_LONG
 
Nl
, 
Nh
;

36 
MD5_LONG
 
d©a
[
MD5_LBLOCK
];

37 
num
;

38 } 
	tMD5_CTX
;

40 
MD5_Inô
(
MD5_CTX
 *
c
);

41 
MD5_Upd©e
(
MD5_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

42 
MD5_FöÆ
(*
md
, 
MD5_CTX
 *
c
);

43 *
MD5
(c⁄° *
d
, 
size_t
 
n
, *
md
);

44 
MD5_Tønsf‹m
(
MD5_CTX
 *
c
, c⁄° *
b
);

45 #ifde‡ 
__˝lu•lus


	@mdc2.h

10 #i‚de‡
HEADER_MDC2_H


11 
	#HEADER_MDC2_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #i‚de‡
OPENSSL_NO_MDC2


16 
	~<°dlib.h
>

17 
	~<›ís¶/des.h
>

18 #ifde‡ 
__˝lu•lus


22 
	#MDC2_BLOCK
 8

	)

23 
	#MDC2_DIGEST_LENGTH
 16

	)

25 
	smdc2_˘x_°
 {

26 
num
;

27 
d©a
[
MDC2_BLOCK
];

28 
DES_cblock
 
h
, 
hh
;

29 
∑d_ty≥
;

30 } 
	tMDC2_CTX
;

32 
MDC2_Inô
(
MDC2_CTX
 *
c
);

33 
MDC2_Upd©e
(
MDC2_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

34 
MDC2_FöÆ
(*
md
, 
MDC2_CTX
 *
c
);

35 *
MDC2
(c⁄° *
d
, 
size_t
 
n
, *
md
);

37 #ifde‡ 
__˝lu•lus


	@modes.h

10 
	~<°ddef.h
>

12 #ifde‡ 
__˝lu•lus


15 (*
block128_f
Ë(c⁄° 
	tö
[16],

16 
	tout
[16], c⁄° *
	tkey
);

18 (*
cbc128_f
Ë(c⁄° *
	tö
, *
	tout
,

19 
	tsize_t
 
	tÀn
, c⁄° *
	tkey
,

20 
	tivec
[16], 
	tíc
);

22 (*
˘r128_f
Ë(c⁄° *
	tö
, *
	tout
,

23 
	tsize_t
 
	tblocks
, c⁄° *
	tkey
,

24 c⁄° 
	tivec
[16]);

26 (*
ccm128_f
Ë(c⁄° *
	tö
, *
	tout
,

27 
	tsize_t
 
	tblocks
, c⁄° *
	tkey
,

28 c⁄° 
	tivec
[16],

29 
	tcmac
[16]);

31 
CRYPTO_cbc128_í¸y±
(c⁄° *
ö
, *
out
,

32 
size_t
 
Àn
, c⁄° *
key
,

33 
ivec
[16], 
block128_f
 
block
);

34 
CRYPTO_cbc128_de¸y±
(c⁄° *
ö
, *
out
,

35 
size_t
 
Àn
, c⁄° *
key
,

36 
ivec
[16], 
block128_f
 
block
);

38 
CRYPTO_˘r128_í¸y±
(c⁄° *
ö
, *
out
,

39 
size_t
 
Àn
, c⁄° *
key
,

40 
ivec
[16],

41 
ecou¡_buf
[16], *
num
,

42 
block128_f
 
block
);

44 
CRYPTO_˘r128_í¸y±_˘r32
(c⁄° *
ö
, *
out
,

45 
size_t
 
Àn
, c⁄° *
key
,

46 
ivec
[16],

47 
ecou¡_buf
[16],

48 *
num
, 
˘r128_f
 
˘r
);

50 
CRYPTO_ofb128_í¸y±
(c⁄° *
ö
, *
out
,

51 
size_t
 
Àn
, c⁄° *
key
,

52 
ivec
[16], *
num
,

53 
block128_f
 
block
);

55 
CRYPTO_cfb128_í¸y±
(c⁄° *
ö
, *
out
,

56 
size_t
 
Àn
, c⁄° *
key
,

57 
ivec
[16], *
num
,

58 
íc
, 
block128_f
 
block
);

59 
CRYPTO_cfb128_8_í¸y±
(c⁄° *
ö
, *
out
,

60 
size_t
 
Àngth
, c⁄° *
key
,

61 
ivec
[16], *
num
,

62 
íc
, 
block128_f
 
block
);

63 
CRYPTO_cfb128_1_í¸y±
(c⁄° *
ö
, *
out
,

64 
size_t
 
bôs
, c⁄° *
key
,

65 
ivec
[16], *
num
,

66 
íc
, 
block128_f
 
block
);

68 
size_t
 
CRYPTO_˘s128_í¸y±_block
(c⁄° *
ö
,

69 *
out
, 
size_t
 
Àn
,

70 c⁄° *
key
, 
ivec
[16],

71 
block128_f
 
block
);

72 
size_t
 
CRYPTO_˘s128_í¸y±
(c⁄° *
ö
, *
out
,

73 
size_t
 
Àn
, c⁄° *
key
,

74 
ivec
[16], 
cbc128_f
 
cbc
);

75 
size_t
 
CRYPTO_˘s128_de¸y±_block
(c⁄° *
ö
,

76 *
out
, 
size_t
 
Àn
,

77 c⁄° *
key
, 
ivec
[16],

78 
block128_f
 
block
);

79 
size_t
 
CRYPTO_˘s128_de¸y±
(c⁄° *
ö
, *
out
,

80 
size_t
 
Àn
, c⁄° *
key
,

81 
ivec
[16], 
cbc128_f
 
cbc
);

83 
size_t
 
CRYPTO_ni°˘s128_í¸y±_block
(c⁄° *
ö
,

84 *
out
, 
size_t
 
Àn
,

85 c⁄° *
key
,

86 
ivec
[16],

87 
block128_f
 
block
);

88 
size_t
 
CRYPTO_ni°˘s128_í¸y±
(c⁄° *
ö
, *
out
,

89 
size_t
 
Àn
, c⁄° *
key
,

90 
ivec
[16], 
cbc128_f
 
cbc
);

91 
size_t
 
CRYPTO_ni°˘s128_de¸y±_block
(c⁄° *
ö
,

92 *
out
, 
size_t
 
Àn
,

93 c⁄° *
key
,

94 
ivec
[16],

95 
block128_f
 
block
);

96 
size_t
 
CRYPTO_ni°˘s128_de¸y±
(c⁄° *
ö
, *
out
,

97 
size_t
 
Àn
, c⁄° *
key
,

98 
ivec
[16], 
cbc128_f
 
cbc
);

100 
gcm128_c⁄ãxt
 
	tGCM128_CONTEXT
;

102 
GCM128_CONTEXT
 *
CRYPTO_gcm128_√w
(*
key
, 
block128_f
 
block
);

103 
CRYPTO_gcm128_öô
(
GCM128_CONTEXT
 *
˘x
, *
key
, 
block128_f
 
block
);

104 
CRYPTO_gcm128_£tiv
(
GCM128_CONTEXT
 *
˘x
, c⁄° *
iv
,

105 
size_t
 
Àn
);

106 
CRYPTO_gcm128_Ød
(
GCM128_CONTEXT
 *
˘x
, c⁄° *
Ød
,

107 
size_t
 
Àn
);

108 
CRYPTO_gcm128_í¸y±
(
GCM128_CONTEXT
 *
˘x
,

109 c⁄° *
ö
, *
out
,

110 
size_t
 
Àn
);

111 
CRYPTO_gcm128_de¸y±
(
GCM128_CONTEXT
 *
˘x
,

112 c⁄° *
ö
, *
out
,

113 
size_t
 
Àn
);

114 
CRYPTO_gcm128_í¸y±_˘r32
(
GCM128_CONTEXT
 *
˘x
,

115 c⁄° *
ö
, *
out
,

116 
size_t
 
Àn
, 
˘r128_f
 
°ªam
);

117 
CRYPTO_gcm128_de¸y±_˘r32
(
GCM128_CONTEXT
 *
˘x
,

118 c⁄° *
ö
, *
out
,

119 
size_t
 
Àn
, 
˘r128_f
 
°ªam
);

120 
CRYPTO_gcm128_föish
(
GCM128_CONTEXT
 *
˘x
, c⁄° *
èg
,

121 
size_t
 
Àn
);

122 
CRYPTO_gcm128_èg
(
GCM128_CONTEXT
 *
˘x
, *
èg
, 
size_t
 
Àn
);

123 
CRYPTO_gcm128_ªÀa£
(
GCM128_CONTEXT
 *
˘x
);

125 
ccm128_c⁄ãxt
 
	tCCM128_CONTEXT
;

127 
CRYPTO_ccm128_öô
(
CCM128_CONTEXT
 *
˘x
,

128 
M
, 
L
, *
key
,

129 
block128_f
 
block
);

130 
CRYPTO_ccm128_£tiv
(
CCM128_CONTEXT
 *
˘x
, c⁄° *
n⁄˚
,

131 
size_t
 
∆í
, size_à
mÀn
);

132 
CRYPTO_ccm128_Ød
(
CCM128_CONTEXT
 *
˘x
, c⁄° *
Ød
,

133 
size_t
 
Æí
);

134 
CRYPTO_ccm128_í¸y±
(
CCM128_CONTEXT
 *
˘x
, c⁄° *
öp
,

135 *
out
, 
size_t
 
Àn
);

136 
CRYPTO_ccm128_de¸y±
(
CCM128_CONTEXT
 *
˘x
, c⁄° *
öp
,

137 *
out
, 
size_t
 
Àn
);

138 
CRYPTO_ccm128_í¸y±_ccm64
(
CCM128_CONTEXT
 *
˘x
, c⁄° *
öp
,

139 *
out
, 
size_t
 
Àn
,

140 
ccm128_f
 
°ªam
);

141 
CRYPTO_ccm128_de¸y±_ccm64
(
CCM128_CONTEXT
 *
˘x
, c⁄° *
öp
,

142 *
out
, 
size_t
 
Àn
,

143 
ccm128_f
 
°ªam
);

144 
size_t
 
CRYPTO_ccm128_èg
(
CCM128_CONTEXT
 *
˘x
, *
èg
, size_à
Àn
);

146 
xts128_c⁄ãxt
 
	tXTS128_CONTEXT
;

148 
CRYPTO_xts128_í¸y±
(c⁄° 
XTS128_CONTEXT
 *
˘x
,

149 c⁄° 
iv
[16],

150 c⁄° *
öp
, *
out
,

151 
size_t
 
Àn
, 
íc
);

153 
size_t
 
CRYPTO_128_wøp
(*
key
, c⁄° *
iv
,

154 *
out
,

155 c⁄° *
ö
, 
size_t
 
öÀn
,

156 
block128_f
 
block
);

158 
size_t
 
CRYPTO_128_unwøp
(*
key
, c⁄° *
iv
,

159 *
out
,

160 c⁄° *
ö
, 
size_t
 
öÀn
,

161 
block128_f
 
block
);

162 
size_t
 
CRYPTO_128_wøp_∑d
(*
key
, c⁄° *
icv
,

163 *
out
, c⁄° *
ö
,

164 
size_t
 
öÀn
, 
block128_f
 
block
);

165 
size_t
 
CRYPTO_128_unwøp_∑d
(*
key
, c⁄° *
icv
,

166 *
out
, c⁄° *
ö
,

167 
size_t
 
öÀn
, 
block128_f
 
block
);

169 #i‚de‡
OPENSSL_NO_OCB


170 
ocb128_c⁄ãxt
 
	tOCB128_CONTEXT
;

172 (*
ocb128_f
Ë(c⁄° *
	tö
, *
	tout
,

173 
	tsize_t
 
	tblocks
, c⁄° *
	tkey
,

174 
	tsize_t
 
	t°¨t_block_num
,

175 
	toff£t_i
[16],

176 c⁄° 
	tL_
[][16],

177 
	tchecksum
[16]);

179 
OCB128_CONTEXT
 *
CRYPTO_ocb128_√w
(*
keyíc
, *
keydec
,

180 
block128_f
 
í¸y±
, block128_‡
de¸y±
,

181 
ocb128_f
 
°ªam
);

182 
CRYPTO_ocb128_öô
(
OCB128_CONTEXT
 *
˘x
, *
keyíc
, *
keydec
,

183 
block128_f
 
í¸y±
, block128_‡
de¸y±
,

184 
ocb128_f
 
°ªam
);

185 
CRYPTO_ocb128_c›y_˘x
(
OCB128_CONTEXT
 *
de°
, OCB128_CONTEXT *
§c
,

186 *
keyíc
, *
keydec
);

187 
CRYPTO_ocb128_£tiv
(
OCB128_CONTEXT
 *
˘x
, c⁄° *
iv
,

188 
size_t
 
Àn
, size_à
ègÀn
);

189 
CRYPTO_ocb128_Ød
(
OCB128_CONTEXT
 *
˘x
, c⁄° *
Ød
,

190 
size_t
 
Àn
);

191 
CRYPTO_ocb128_í¸y±
(
OCB128_CONTEXT
 *
˘x
, c⁄° *
ö
,

192 *
out
, 
size_t
 
Àn
);

193 
CRYPTO_ocb128_de¸y±
(
OCB128_CONTEXT
 *
˘x
, c⁄° *
ö
,

194 *
out
, 
size_t
 
Àn
);

195 
CRYPTO_ocb128_föish
(
OCB128_CONTEXT
 *
˘x
, c⁄° *
èg
,

196 
size_t
 
Àn
);

197 
CRYPTO_ocb128_èg
(
OCB128_CONTEXT
 *
˘x
, *
èg
, 
size_t
 
Àn
);

198 
CRYPTO_ocb128_˛ónup
(
OCB128_CONTEXT
 *
˘x
);

201 #ifde‡ 
__˝lu•lus


	@obj_mac.h

12 
	#SN_undef
 "UNDEF"

	)

13 
	#LN_undef
 "undeföed"

	)

14 
	#NID_undef
 0

	)

15 
	#OBJ_undef
 0L

	)

17 
	#SN_ôu_t
 "ITU-T"

	)

18 
	#LN_ôu_t
 "ôu-t"

	)

19 
	#NID_ôu_t
 645

	)

20 
	#OBJ_ôu_t
 0L

	)

22 
	#NID_ccôt
 404

	)

23 
	#OBJ_ccôt
 
OBJ_ôu_t


	)

25 
	#SN_iso
 "ISO"

	)

26 
	#LN_iso
 "iso"

	)

27 
	#NID_iso
 181

	)

28 
	#OBJ_iso
 1L

	)

30 
	#SN_joöt_iso_ôu_t
 "JOINT-ISO-ITU-T"

	)

31 
	#LN_joöt_iso_ôu_t
 "joöt-iso-ôu-t"

	)

32 
	#NID_joöt_iso_ôu_t
 646

	)

33 
	#OBJ_joöt_iso_ôu_t
 2L

	)

35 
	#NID_joöt_iso_ccôt
 393

	)

36 
	#OBJ_joöt_iso_ccôt
 
OBJ_joöt_iso_ôu_t


	)

38 
	#SN_membî_body
 "membî-body"

	)

39 
	#LN_membî_body
 "ISO Membî Body"

	)

40 
	#NID_membî_body
 182

	)

41 
	#OBJ_membî_body
 
OBJ_iso
,2L

	)

43 
	#SN_idítifõd_‹g™iz©i⁄
 "idítifõd-‹g™iz©i⁄"

	)

44 
	#NID_idítifõd_‹g™iz©i⁄
 676

	)

45 
	#OBJ_idítifõd_‹g™iz©i⁄
 
OBJ_iso
,3L

	)

47 
	#SN_hmac_md5
 "HMAC-MD5"

	)

48 
	#LN_hmac_md5
 "hmac-md5"

	)

49 
	#NID_hmac_md5
 780

	)

50 
	#OBJ_hmac_md5
 
OBJ_idítifõd_‹g™iz©i⁄
,6L,1L,5L,5L,8L,1L,1L

	)

52 
	#SN_hmac_sha1
 "HMAC-SHA1"

	)

53 
	#LN_hmac_sha1
 "hmac-sha1"

	)

54 
	#NID_hmac_sha1
 781

	)

55 
	#OBJ_hmac_sha1
 
OBJ_idítifõd_‹g™iz©i⁄
,6L,1L,5L,5L,8L,1L,2L

	)

57 
	#SN_˚πicom_¨c
 "˚πicom-¨c"

	)

58 
	#NID_˚πicom_¨c
 677

	)

59 
	#OBJ_˚πicom_¨c
 
OBJ_idítifõd_‹g™iz©i⁄
,132L

	)

61 
	#SN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "öã∫©i⁄Æ-‹g™iz©i⁄s"

	)

62 
	#LN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "I¡î«ti⁄Æ Org™iz©i⁄s"

	)

63 
	#NID_öã∫©i⁄Æ_‹g™iz©i⁄s
 647

	)

64 
	#OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
 
OBJ_joöt_iso_ôu_t
,23L

	)

66 
	#SN_w≠
 "w≠"

	)

67 
	#NID_w≠
 678

	)

68 
	#OBJ_w≠
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,43L

	)

70 
	#SN_w≠_wsg
 "w≠-wsg"

	)

71 
	#NID_w≠_wsg
 679

	)

72 
	#OBJ_w≠_wsg
 
OBJ_w≠
,1L

	)

74 
	#SN_£À˘ed_©åibuã_ty≥s
 "£À˘ed-©åibuã-ty≥s"

	)

75 
	#LN_£À˘ed_©åibuã_ty≥s
 "Sñe˘ed Aâribuã Ty≥s"

	)

76 
	#NID_£À˘ed_©åibuã_ty≥s
 394

	)

77 
	#OBJ_£À˘ed_©åibuã_ty≥s
 
OBJ_joöt_iso_ôu_t
,5L,1L,5L

	)

79 
	#SN_˛óøn˚
 "˛óøn˚"

	)

80 
	#NID_˛óøn˚
 395

	)

81 
	#OBJ_˛óøn˚
 
OBJ_£À˘ed_©åibuã_ty≥s
,55L

	)

83 
	#SN_ISO_US
 "ISO-US"

	)

84 
	#LN_ISO_US
 "ISO US Membî Body"

	)

85 
	#NID_ISO_US
 183

	)

86 
	#OBJ_ISO_US
 
OBJ_membî_body
,840L

	)

88 
	#SN_X9_57
 "X9-57"

	)

89 
	#LN_X9_57
 "X9.57"

	)

90 
	#NID_X9_57
 184

	)

91 
	#OBJ_X9_57
 
OBJ_ISO_US
,10040L

	)

93 
	#SN_X9cm
 "X9cm"

	)

94 
	#LN_X9cm
 "X9.57 CM ?"

	)

95 
	#NID_X9cm
 185

	)

96 
	#OBJ_X9cm
 
OBJ_X9_57
,4L

	)

98 
	#SN_dß
 "DSA"

	)

99 
	#LN_dß
 "dßEn¸y±i⁄"

	)

100 
	#NID_dß
 116

	)

101 
	#OBJ_dß
 
OBJ_X9cm
,1L

	)

103 
	#SN_dßWôhSHA1
 "DSA-SHA1"

	)

104 
	#LN_dßWôhSHA1
 "dßWôhSHA1"

	)

105 
	#NID_dßWôhSHA1
 113

	)

106 
	#OBJ_dßWôhSHA1
 
OBJ_X9cm
,3L

	)

108 
	#SN_™si_X9_62
 "™si-X9-62"

	)

109 
	#LN_™si_X9_62
 "ANSI X9.62"

	)

110 
	#NID_™si_X9_62
 405

	)

111 
	#OBJ_™si_X9_62
 
OBJ_ISO_US
,10045L

	)

113 
	#OBJ_X9_62_id_fõldTy≥
 
OBJ_™si_X9_62
,1L

	)

115 
	#SN_X9_62_¥ime_fõld
 "¥ime-fõld"

	)

116 
	#NID_X9_62_¥ime_fõld
 406

	)

117 
	#OBJ_X9_62_¥ime_fõld
 
OBJ_X9_62_id_fõldTy≥
,1L

	)

119 
	#SN_X9_62_ch¨a˘îi°ic_two_fõld
 "ch¨a˘îi°ic-two-fõld"

	)

120 
	#NID_X9_62_ch¨a˘îi°ic_two_fõld
 407

	)

121 
	#OBJ_X9_62_ch¨a˘îi°ic_two_fõld
 
OBJ_X9_62_id_fõldTy≥
,2L

	)

123 
	#SN_X9_62_id_ch¨a˘îi°ic_two_basis
 "id-ch¨a˘îi°ic-two-basis"

	)

124 
	#NID_X9_62_id_ch¨a˘îi°ic_two_basis
 680

	)

125 
	#OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
 
OBJ_X9_62_ch¨a˘îi°ic_two_fõld
,3L

	)

127 
	#SN_X9_62_⁄Basis
 "⁄Basis"

	)

128 
	#NID_X9_62_⁄Basis
 681

	)

129 
	#OBJ_X9_62_⁄Basis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,1L

	)

131 
	#SN_X9_62_çBasis
 "çBasis"

	)

132 
	#NID_X9_62_çBasis
 682

	)

133 
	#OBJ_X9_62_çBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,2L

	)

135 
	#SN_X9_62_µBasis
 "µBasis"

	)

136 
	#NID_X9_62_µBasis
 683

	)

137 
	#OBJ_X9_62_µBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,3L

	)

139 
	#OBJ_X9_62_id_publicKeyTy≥
 
OBJ_™si_X9_62
,2L

	)

141 
	#SN_X9_62_id_ecPublicKey
 "id-ecPublicKey"

	)

142 
	#NID_X9_62_id_ecPublicKey
 408

	)

143 
	#OBJ_X9_62_id_ecPublicKey
 
OBJ_X9_62_id_publicKeyTy≥
,1L

	)

145 
	#OBJ_X9_62_ñlùticCurve
 
OBJ_™si_X9_62
,3L

	)

147 
	#OBJ_X9_62_c_TwoCurve
 
OBJ_X9_62_ñlùticCurve
,0L

	)

149 
	#SN_X9_62_c2≤b163v1
 "c2≤b163v1"

	)

150 
	#NID_X9_62_c2≤b163v1
 684

	)

151 
	#OBJ_X9_62_c2≤b163v1
 
OBJ_X9_62_c_TwoCurve
,1L

	)

153 
	#SN_X9_62_c2≤b163v2
 "c2≤b163v2"

	)

154 
	#NID_X9_62_c2≤b163v2
 685

	)

155 
	#OBJ_X9_62_c2≤b163v2
 
OBJ_X9_62_c_TwoCurve
,2L

	)

157 
	#SN_X9_62_c2≤b163v3
 "c2≤b163v3"

	)

158 
	#NID_X9_62_c2≤b163v3
 686

	)

159 
	#OBJ_X9_62_c2≤b163v3
 
OBJ_X9_62_c_TwoCurve
,3L

	)

161 
	#SN_X9_62_c2≤b176v1
 "c2≤b176v1"

	)

162 
	#NID_X9_62_c2≤b176v1
 687

	)

163 
	#OBJ_X9_62_c2≤b176v1
 
OBJ_X9_62_c_TwoCurve
,4L

	)

165 
	#SN_X9_62_c2äb191v1
 "c2äb191v1"

	)

166 
	#NID_X9_62_c2äb191v1
 688

	)

167 
	#OBJ_X9_62_c2äb191v1
 
OBJ_X9_62_c_TwoCurve
,5L

	)

169 
	#SN_X9_62_c2äb191v2
 "c2äb191v2"

	)

170 
	#NID_X9_62_c2äb191v2
 689

	)

171 
	#OBJ_X9_62_c2äb191v2
 
OBJ_X9_62_c_TwoCurve
,6L

	)

173 
	#SN_X9_62_c2äb191v3
 "c2äb191v3"

	)

174 
	#NID_X9_62_c2äb191v3
 690

	)

175 
	#OBJ_X9_62_c2äb191v3
 
OBJ_X9_62_c_TwoCurve
,7L

	)

177 
	#SN_X9_62_c2⁄b191v4
 "c2⁄b191v4"

	)

178 
	#NID_X9_62_c2⁄b191v4
 691

	)

179 
	#OBJ_X9_62_c2⁄b191v4
 
OBJ_X9_62_c_TwoCurve
,8L

	)

181 
	#SN_X9_62_c2⁄b191v5
 "c2⁄b191v5"

	)

182 
	#NID_X9_62_c2⁄b191v5
 692

	)

183 
	#OBJ_X9_62_c2⁄b191v5
 
OBJ_X9_62_c_TwoCurve
,9L

	)

185 
	#SN_X9_62_c2≤b208w1
 "c2≤b208w1"

	)

186 
	#NID_X9_62_c2≤b208w1
 693

	)

187 
	#OBJ_X9_62_c2≤b208w1
 
OBJ_X9_62_c_TwoCurve
,10L

	)

189 
	#SN_X9_62_c2äb239v1
 "c2äb239v1"

	)

190 
	#NID_X9_62_c2äb239v1
 694

	)

191 
	#OBJ_X9_62_c2äb239v1
 
OBJ_X9_62_c_TwoCurve
,11L

	)

193 
	#SN_X9_62_c2äb239v2
 "c2äb239v2"

	)

194 
	#NID_X9_62_c2äb239v2
 695

	)

195 
	#OBJ_X9_62_c2äb239v2
 
OBJ_X9_62_c_TwoCurve
,12L

	)

197 
	#SN_X9_62_c2äb239v3
 "c2äb239v3"

	)

198 
	#NID_X9_62_c2äb239v3
 696

	)

199 
	#OBJ_X9_62_c2äb239v3
 
OBJ_X9_62_c_TwoCurve
,13L

	)

201 
	#SN_X9_62_c2⁄b239v4
 "c2⁄b239v4"

	)

202 
	#NID_X9_62_c2⁄b239v4
 697

	)

203 
	#OBJ_X9_62_c2⁄b239v4
 
OBJ_X9_62_c_TwoCurve
,14L

	)

205 
	#SN_X9_62_c2⁄b239v5
 "c2⁄b239v5"

	)

206 
	#NID_X9_62_c2⁄b239v5
 698

	)

207 
	#OBJ_X9_62_c2⁄b239v5
 
OBJ_X9_62_c_TwoCurve
,15L

	)

209 
	#SN_X9_62_c2≤b272w1
 "c2≤b272w1"

	)

210 
	#NID_X9_62_c2≤b272w1
 699

	)

211 
	#OBJ_X9_62_c2≤b272w1
 
OBJ_X9_62_c_TwoCurve
,16L

	)

213 
	#SN_X9_62_c2≤b304w1
 "c2≤b304w1"

	)

214 
	#NID_X9_62_c2≤b304w1
 700

	)

215 
	#OBJ_X9_62_c2≤b304w1
 
OBJ_X9_62_c_TwoCurve
,17L

	)

217 
	#SN_X9_62_c2äb359v1
 "c2äb359v1"

	)

218 
	#NID_X9_62_c2äb359v1
 701

	)

219 
	#OBJ_X9_62_c2äb359v1
 
OBJ_X9_62_c_TwoCurve
,18L

	)

221 
	#SN_X9_62_c2≤b368w1
 "c2≤b368w1"

	)

222 
	#NID_X9_62_c2≤b368w1
 702

	)

223 
	#OBJ_X9_62_c2≤b368w1
 
OBJ_X9_62_c_TwoCurve
,19L

	)

225 
	#SN_X9_62_c2äb431r1
 "c2äb431r1"

	)

226 
	#NID_X9_62_c2äb431r1
 703

	)

227 
	#OBJ_X9_62_c2äb431r1
 
OBJ_X9_62_c_TwoCurve
,20L

	)

229 
	#OBJ_X9_62_¥imeCurve
 
OBJ_X9_62_ñlùticCurve
,1L

	)

231 
	#SN_X9_62_¥ime192v1
 "¥ime192v1"

	)

232 
	#NID_X9_62_¥ime192v1
 409

	)

233 
	#OBJ_X9_62_¥ime192v1
 
OBJ_X9_62_¥imeCurve
,1L

	)

235 
	#SN_X9_62_¥ime192v2
 "¥ime192v2"

	)

236 
	#NID_X9_62_¥ime192v2
 410

	)

237 
	#OBJ_X9_62_¥ime192v2
 
OBJ_X9_62_¥imeCurve
,2L

	)

239 
	#SN_X9_62_¥ime192v3
 "¥ime192v3"

	)

240 
	#NID_X9_62_¥ime192v3
 411

	)

241 
	#OBJ_X9_62_¥ime192v3
 
OBJ_X9_62_¥imeCurve
,3L

	)

243 
	#SN_X9_62_¥ime239v1
 "¥ime239v1"

	)

244 
	#NID_X9_62_¥ime239v1
 412

	)

245 
	#OBJ_X9_62_¥ime239v1
 
OBJ_X9_62_¥imeCurve
,4L

	)

247 
	#SN_X9_62_¥ime239v2
 "¥ime239v2"

	)

248 
	#NID_X9_62_¥ime239v2
 413

	)

249 
	#OBJ_X9_62_¥ime239v2
 
OBJ_X9_62_¥imeCurve
,5L

	)

251 
	#SN_X9_62_¥ime239v3
 "¥ime239v3"

	)

252 
	#NID_X9_62_¥ime239v3
 414

	)

253 
	#OBJ_X9_62_¥ime239v3
 
OBJ_X9_62_¥imeCurve
,6L

	)

255 
	#SN_X9_62_¥ime256v1
 "¥ime256v1"

	)

256 
	#NID_X9_62_¥ime256v1
 415

	)

257 
	#OBJ_X9_62_¥ime256v1
 
OBJ_X9_62_¥imeCurve
,7L

	)

259 
	#OBJ_X9_62_id_ecSigTy≥
 
OBJ_™si_X9_62
,4L

	)

261 
	#SN_ecdß_wôh_SHA1
 "ecdß-wôh-SHA1"

	)

262 
	#NID_ecdß_wôh_SHA1
 416

	)

263 
	#OBJ_ecdß_wôh_SHA1
 
OBJ_X9_62_id_ecSigTy≥
,1L

	)

265 
	#SN_ecdß_wôh_Recommíded
 "ecdß-wôh-Recommíded"

	)

266 
	#NID_ecdß_wôh_Recommíded
 791

	)

267 
	#OBJ_ecdß_wôh_Recommíded
 
OBJ_X9_62_id_ecSigTy≥
,2L

	)

269 
	#SN_ecdß_wôh_S≥cifõd
 "ecdß-wôh-S≥cifõd"

	)

270 
	#NID_ecdß_wôh_S≥cifõd
 792

	)

271 
	#OBJ_ecdß_wôh_S≥cifõd
 
OBJ_X9_62_id_ecSigTy≥
,3L

	)

273 
	#SN_ecdß_wôh_SHA224
 "ecdß-wôh-SHA224"

	)

274 
	#NID_ecdß_wôh_SHA224
 793

	)

275 
	#OBJ_ecdß_wôh_SHA224
 
OBJ_ecdß_wôh_S≥cifõd
,1L

	)

277 
	#SN_ecdß_wôh_SHA256
 "ecdß-wôh-SHA256"

	)

278 
	#NID_ecdß_wôh_SHA256
 794

	)

279 
	#OBJ_ecdß_wôh_SHA256
 
OBJ_ecdß_wôh_S≥cifõd
,2L

	)

281 
	#SN_ecdß_wôh_SHA384
 "ecdß-wôh-SHA384"

	)

282 
	#NID_ecdß_wôh_SHA384
 795

	)

283 
	#OBJ_ecdß_wôh_SHA384
 
OBJ_ecdß_wôh_S≥cifõd
,3L

	)

285 
	#SN_ecdß_wôh_SHA512
 "ecdß-wôh-SHA512"

	)

286 
	#NID_ecdß_wôh_SHA512
 796

	)

287 
	#OBJ_ecdß_wôh_SHA512
 
OBJ_ecdß_wôh_S≥cifõd
,4L

	)

289 
	#OBJ_£cg_ñlùticCurve
 
OBJ_˚πicom_¨c
,0L

	)

291 
	#SN_£˝112r1
 "£˝112r1"

	)

292 
	#NID_£˝112r1
 704

	)

293 
	#OBJ_£˝112r1
 
OBJ_£cg_ñlùticCurve
,6L

	)

295 
	#SN_£˝112r2
 "£˝112r2"

	)

296 
	#NID_£˝112r2
 705

	)

297 
	#OBJ_£˝112r2
 
OBJ_£cg_ñlùticCurve
,7L

	)

299 
	#SN_£˝128r1
 "£˝128r1"

	)

300 
	#NID_£˝128r1
 706

	)

301 
	#OBJ_£˝128r1
 
OBJ_£cg_ñlùticCurve
,28L

	)

303 
	#SN_£˝128r2
 "£˝128r2"

	)

304 
	#NID_£˝128r2
 707

	)

305 
	#OBJ_£˝128r2
 
OBJ_£cg_ñlùticCurve
,29L

	)

307 
	#SN_£˝160k1
 "£˝160k1"

	)

308 
	#NID_£˝160k1
 708

	)

309 
	#OBJ_£˝160k1
 
OBJ_£cg_ñlùticCurve
,9L

	)

311 
	#SN_£˝160r1
 "£˝160r1"

	)

312 
	#NID_£˝160r1
 709

	)

313 
	#OBJ_£˝160r1
 
OBJ_£cg_ñlùticCurve
,8L

	)

315 
	#SN_£˝160r2
 "£˝160r2"

	)

316 
	#NID_£˝160r2
 710

	)

317 
	#OBJ_£˝160r2
 
OBJ_£cg_ñlùticCurve
,30L

	)

319 
	#SN_£˝192k1
 "£˝192k1"

	)

320 
	#NID_£˝192k1
 711

	)

321 
	#OBJ_£˝192k1
 
OBJ_£cg_ñlùticCurve
,31L

	)

323 
	#SN_£˝224k1
 "£˝224k1"

	)

324 
	#NID_£˝224k1
 712

	)

325 
	#OBJ_£˝224k1
 
OBJ_£cg_ñlùticCurve
,32L

	)

327 
	#SN_£˝224r1
 "£˝224r1"

	)

328 
	#NID_£˝224r1
 713

	)

329 
	#OBJ_£˝224r1
 
OBJ_£cg_ñlùticCurve
,33L

	)

331 
	#SN_£˝256k1
 "£˝256k1"

	)

332 
	#NID_£˝256k1
 714

	)

333 
	#OBJ_£˝256k1
 
OBJ_£cg_ñlùticCurve
,10L

	)

335 
	#SN_£˝384r1
 "£˝384r1"

	)

336 
	#NID_£˝384r1
 715

	)

337 
	#OBJ_£˝384r1
 
OBJ_£cg_ñlùticCurve
,34L

	)

339 
	#SN_£˝521r1
 "£˝521r1"

	)

340 
	#NID_£˝521r1
 716

	)

341 
	#OBJ_£˝521r1
 
OBJ_£cg_ñlùticCurve
,35L

	)

343 
	#SN_£˘113r1
 "£˘113r1"

	)

344 
	#NID_£˘113r1
 717

	)

345 
	#OBJ_£˘113r1
 
OBJ_£cg_ñlùticCurve
,4L

	)

347 
	#SN_£˘113r2
 "£˘113r2"

	)

348 
	#NID_£˘113r2
 718

	)

349 
	#OBJ_£˘113r2
 
OBJ_£cg_ñlùticCurve
,5L

	)

351 
	#SN_£˘131r1
 "£˘131r1"

	)

352 
	#NID_£˘131r1
 719

	)

353 
	#OBJ_£˘131r1
 
OBJ_£cg_ñlùticCurve
,22L

	)

355 
	#SN_£˘131r2
 "£˘131r2"

	)

356 
	#NID_£˘131r2
 720

	)

357 
	#OBJ_£˘131r2
 
OBJ_£cg_ñlùticCurve
,23L

	)

359 
	#SN_£˘163k1
 "£˘163k1"

	)

360 
	#NID_£˘163k1
 721

	)

361 
	#OBJ_£˘163k1
 
OBJ_£cg_ñlùticCurve
,1L

	)

363 
	#SN_£˘163r1
 "£˘163r1"

	)

364 
	#NID_£˘163r1
 722

	)

365 
	#OBJ_£˘163r1
 
OBJ_£cg_ñlùticCurve
,2L

	)

367 
	#SN_£˘163r2
 "£˘163r2"

	)

368 
	#NID_£˘163r2
 723

	)

369 
	#OBJ_£˘163r2
 
OBJ_£cg_ñlùticCurve
,15L

	)

371 
	#SN_£˘193r1
 "£˘193r1"

	)

372 
	#NID_£˘193r1
 724

	)

373 
	#OBJ_£˘193r1
 
OBJ_£cg_ñlùticCurve
,24L

	)

375 
	#SN_£˘193r2
 "£˘193r2"

	)

376 
	#NID_£˘193r2
 725

	)

377 
	#OBJ_£˘193r2
 
OBJ_£cg_ñlùticCurve
,25L

	)

379 
	#SN_£˘233k1
 "£˘233k1"

	)

380 
	#NID_£˘233k1
 726

	)

381 
	#OBJ_£˘233k1
 
OBJ_£cg_ñlùticCurve
,26L

	)

383 
	#SN_£˘233r1
 "£˘233r1"

	)

384 
	#NID_£˘233r1
 727

	)

385 
	#OBJ_£˘233r1
 
OBJ_£cg_ñlùticCurve
,27L

	)

387 
	#SN_£˘239k1
 "£˘239k1"

	)

388 
	#NID_£˘239k1
 728

	)

389 
	#OBJ_£˘239k1
 
OBJ_£cg_ñlùticCurve
,3L

	)

391 
	#SN_£˘283k1
 "£˘283k1"

	)

392 
	#NID_£˘283k1
 729

	)

393 
	#OBJ_£˘283k1
 
OBJ_£cg_ñlùticCurve
,16L

	)

395 
	#SN_£˘283r1
 "£˘283r1"

	)

396 
	#NID_£˘283r1
 730

	)

397 
	#OBJ_£˘283r1
 
OBJ_£cg_ñlùticCurve
,17L

	)

399 
	#SN_£˘409k1
 "£˘409k1"

	)

400 
	#NID_£˘409k1
 731

	)

401 
	#OBJ_£˘409k1
 
OBJ_£cg_ñlùticCurve
,36L

	)

403 
	#SN_£˘409r1
 "£˘409r1"

	)

404 
	#NID_£˘409r1
 732

	)

405 
	#OBJ_£˘409r1
 
OBJ_£cg_ñlùticCurve
,37L

	)

407 
	#SN_£˘571k1
 "£˘571k1"

	)

408 
	#NID_£˘571k1
 733

	)

409 
	#OBJ_£˘571k1
 
OBJ_£cg_ñlùticCurve
,38L

	)

411 
	#SN_£˘571r1
 "£˘571r1"

	)

412 
	#NID_£˘571r1
 734

	)

413 
	#OBJ_£˘571r1
 
OBJ_£cg_ñlùticCurve
,39L

	)

415 
	#OBJ_w≠_wsg_idm_ecid
 
OBJ_w≠_wsg
,4L

	)

417 
	#SN_w≠_wsg_idm_ecid_wés1
 "w≠-wsg-idm-ecid-wés1"

	)

418 
	#NID_w≠_wsg_idm_ecid_wés1
 735

	)

419 
	#OBJ_w≠_wsg_idm_ecid_wés1
 
OBJ_w≠_wsg_idm_ecid
,1L

	)

421 
	#SN_w≠_wsg_idm_ecid_wés3
 "w≠-wsg-idm-ecid-wés3"

	)

422 
	#NID_w≠_wsg_idm_ecid_wés3
 736

	)

423 
	#OBJ_w≠_wsg_idm_ecid_wés3
 
OBJ_w≠_wsg_idm_ecid
,3L

	)

425 
	#SN_w≠_wsg_idm_ecid_wés4
 "w≠-wsg-idm-ecid-wés4"

	)

426 
	#NID_w≠_wsg_idm_ecid_wés4
 737

	)

427 
	#OBJ_w≠_wsg_idm_ecid_wés4
 
OBJ_w≠_wsg_idm_ecid
,4L

	)

429 
	#SN_w≠_wsg_idm_ecid_wés5
 "w≠-wsg-idm-ecid-wés5"

	)

430 
	#NID_w≠_wsg_idm_ecid_wés5
 738

	)

431 
	#OBJ_w≠_wsg_idm_ecid_wés5
 
OBJ_w≠_wsg_idm_ecid
,5L

	)

433 
	#SN_w≠_wsg_idm_ecid_wés6
 "w≠-wsg-idm-ecid-wés6"

	)

434 
	#NID_w≠_wsg_idm_ecid_wés6
 739

	)

435 
	#OBJ_w≠_wsg_idm_ecid_wés6
 
OBJ_w≠_wsg_idm_ecid
,6L

	)

437 
	#SN_w≠_wsg_idm_ecid_wés7
 "w≠-wsg-idm-ecid-wés7"

	)

438 
	#NID_w≠_wsg_idm_ecid_wés7
 740

	)

439 
	#OBJ_w≠_wsg_idm_ecid_wés7
 
OBJ_w≠_wsg_idm_ecid
,7L

	)

441 
	#SN_w≠_wsg_idm_ecid_wés8
 "w≠-wsg-idm-ecid-wés8"

	)

442 
	#NID_w≠_wsg_idm_ecid_wés8
 741

	)

443 
	#OBJ_w≠_wsg_idm_ecid_wés8
 
OBJ_w≠_wsg_idm_ecid
,8L

	)

445 
	#SN_w≠_wsg_idm_ecid_wés9
 "w≠-wsg-idm-ecid-wés9"

	)

446 
	#NID_w≠_wsg_idm_ecid_wés9
 742

	)

447 
	#OBJ_w≠_wsg_idm_ecid_wés9
 
OBJ_w≠_wsg_idm_ecid
,9L

	)

449 
	#SN_w≠_wsg_idm_ecid_wés10
 "w≠-wsg-idm-ecid-wés10"

	)

450 
	#NID_w≠_wsg_idm_ecid_wés10
 743

	)

451 
	#OBJ_w≠_wsg_idm_ecid_wés10
 
OBJ_w≠_wsg_idm_ecid
,10L

	)

453 
	#SN_w≠_wsg_idm_ecid_wés11
 "w≠-wsg-idm-ecid-wés11"

	)

454 
	#NID_w≠_wsg_idm_ecid_wés11
 744

	)

455 
	#OBJ_w≠_wsg_idm_ecid_wés11
 
OBJ_w≠_wsg_idm_ecid
,11L

	)

457 
	#SN_w≠_wsg_idm_ecid_wés12
 "w≠-wsg-idm-ecid-wés12"

	)

458 
	#NID_w≠_wsg_idm_ecid_wés12
 745

	)

459 
	#OBJ_w≠_wsg_idm_ecid_wés12
 
OBJ_w≠_wsg_idm_ecid
,12L

	)

461 
	#SN_ˇ°5_cbc
 "CAST5-CBC"

	)

462 
	#LN_ˇ°5_cbc
 "ˇ°5-cbc"

	)

463 
	#NID_ˇ°5_cbc
 108

	)

464 
	#OBJ_ˇ°5_cbc
 
OBJ_ISO_US
,113533L,7L,66L,10L

	)

466 
	#SN_ˇ°5_ecb
 "CAST5-ECB"

	)

467 
	#LN_ˇ°5_ecb
 "ˇ°5-ecb"

	)

468 
	#NID_ˇ°5_ecb
 109

	)

470 
	#SN_ˇ°5_cfb64
 "CAST5-CFB"

	)

471 
	#LN_ˇ°5_cfb64
 "ˇ°5-cfb"

	)

472 
	#NID_ˇ°5_cfb64
 110

	)

474 
	#SN_ˇ°5_ofb64
 "CAST5-OFB"

	)

475 
	#LN_ˇ°5_ofb64
 "ˇ°5-ofb"

	)

476 
	#NID_ˇ°5_ofb64
 111

	)

478 
	#LN_pbeWôhMD5AndCa°5_CBC
 "pbeWôhMD5AndCa°5CBC"

	)

479 
	#NID_pbeWôhMD5AndCa°5_CBC
 112

	)

480 
	#OBJ_pbeWôhMD5AndCa°5_CBC
 
OBJ_ISO_US
,113533L,7L,66L,12L

	)

482 
	#SN_id_Passw‹dBa£dMAC
 "id-Passw‹dBa£dMAC"

	)

483 
	#LN_id_Passw‹dBa£dMAC
 "∑ssw‹d ba£d MAC"

	)

484 
	#NID_id_Passw‹dBa£dMAC
 782

	)

485 
	#OBJ_id_Passw‹dBa£dMAC
 
OBJ_ISO_US
,113533L,7L,66L,13L

	)

487 
	#SN_id_DHBa£dMac
 "id-DHBa£dMac"

	)

488 
	#LN_id_DHBa£dMac
 "Diffõ-Hñlm™ ba£d MAC"

	)

489 
	#NID_id_DHBa£dMac
 783

	)

490 
	#OBJ_id_DHBa£dMac
 
OBJ_ISO_US
,113533L,7L,66L,30L

	)

492 
	#SN_rßdsi
 "rßdsi"

	)

493 
	#LN_rßdsi
 "RSA D©®Securôy, Inc."

	)

494 
	#NID_rßdsi
 1

	)

495 
	#OBJ_rßdsi
 
OBJ_ISO_US
,113549L

	)

497 
	#SN_pkcs
 "pkcs"

	)

498 
	#LN_pkcs
 "RSA D©®Securôy, Inc. PKCS"

	)

499 
	#NID_pkcs
 2

	)

500 
	#OBJ_pkcs
 
OBJ_rßdsi
,1L

	)

502 
	#SN_pkcs1
 "pkcs1"

	)

503 
	#NID_pkcs1
 186

	)

504 
	#OBJ_pkcs1
 
OBJ_pkcs
,1L

	)

506 
	#LN_rßEn¸y±i⁄
 "rßEn¸y±i⁄"

	)

507 
	#NID_rßEn¸y±i⁄
 6

	)

508 
	#OBJ_rßEn¸y±i⁄
 
OBJ_pkcs1
,1L

	)

510 
	#SN_md2WôhRSAEn¸y±i⁄
 "RSA-MD2"

	)

511 
	#LN_md2WôhRSAEn¸y±i⁄
 "md2WôhRSAEn¸y±i⁄"

	)

512 
	#NID_md2WôhRSAEn¸y±i⁄
 7

	)

513 
	#OBJ_md2WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,2L

	)

515 
	#SN_md4WôhRSAEn¸y±i⁄
 "RSA-MD4"

	)

516 
	#LN_md4WôhRSAEn¸y±i⁄
 "md4WôhRSAEn¸y±i⁄"

	)

517 
	#NID_md4WôhRSAEn¸y±i⁄
 396

	)

518 
	#OBJ_md4WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,3L

	)

520 
	#SN_md5WôhRSAEn¸y±i⁄
 "RSA-MD5"

	)

521 
	#LN_md5WôhRSAEn¸y±i⁄
 "md5WôhRSAEn¸y±i⁄"

	)

522 
	#NID_md5WôhRSAEn¸y±i⁄
 8

	)

523 
	#OBJ_md5WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,4L

	)

525 
	#SN_sha1WôhRSAEn¸y±i⁄
 "RSA-SHA1"

	)

526 
	#LN_sha1WôhRSAEn¸y±i⁄
 "sha1WôhRSAEn¸y±i⁄"

	)

527 
	#NID_sha1WôhRSAEn¸y±i⁄
 65

	)

528 
	#OBJ_sha1WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,5L

	)

530 
	#SN_rßesO´p
 "RSAES-OAEP"

	)

531 
	#LN_rßesO´p
 "rßesO´p"

	)

532 
	#NID_rßesO´p
 919

	)

533 
	#OBJ_rßesO´p
 
OBJ_pkcs1
,7L

	)

535 
	#SN_mgf1
 "MGF1"

	)

536 
	#LN_mgf1
 "mgf1"

	)

537 
	#NID_mgf1
 911

	)

538 
	#OBJ_mgf1
 
OBJ_pkcs1
,8L

	)

540 
	#SN_pS≥cifõd
 "PSPECIFIED"

	)

541 
	#LN_pS≥cifõd
 "pS≥cifõd"

	)

542 
	#NID_pS≥cifõd
 935

	)

543 
	#OBJ_pS≥cifõd
 
OBJ_pkcs1
,9L

	)

545 
	#SN_rßsßPss
 "RSASSA-PSS"

	)

546 
	#LN_rßsßPss
 "rßsßPss"

	)

547 
	#NID_rßsßPss
 912

	)

548 
	#OBJ_rßsßPss
 
OBJ_pkcs1
,10L

	)

550 
	#SN_sha256WôhRSAEn¸y±i⁄
 "RSA-SHA256"

	)

551 
	#LN_sha256WôhRSAEn¸y±i⁄
 "sha256WôhRSAEn¸y±i⁄"

	)

552 
	#NID_sha256WôhRSAEn¸y±i⁄
 668

	)

553 
	#OBJ_sha256WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,11L

	)

555 
	#SN_sha384WôhRSAEn¸y±i⁄
 "RSA-SHA384"

	)

556 
	#LN_sha384WôhRSAEn¸y±i⁄
 "sha384WôhRSAEn¸y±i⁄"

	)

557 
	#NID_sha384WôhRSAEn¸y±i⁄
 669

	)

558 
	#OBJ_sha384WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,12L

	)

560 
	#SN_sha512WôhRSAEn¸y±i⁄
 "RSA-SHA512"

	)

561 
	#LN_sha512WôhRSAEn¸y±i⁄
 "sha512WôhRSAEn¸y±i⁄"

	)

562 
	#NID_sha512WôhRSAEn¸y±i⁄
 670

	)

563 
	#OBJ_sha512WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,13L

	)

565 
	#SN_sha224WôhRSAEn¸y±i⁄
 "RSA-SHA224"

	)

566 
	#LN_sha224WôhRSAEn¸y±i⁄
 "sha224WôhRSAEn¸y±i⁄"

	)

567 
	#NID_sha224WôhRSAEn¸y±i⁄
 671

	)

568 
	#OBJ_sha224WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,14L

	)

570 
	#SN_pkcs3
 "pkcs3"

	)

571 
	#NID_pkcs3
 27

	)

572 
	#OBJ_pkcs3
 
OBJ_pkcs
,3L

	)

574 
	#LN_dhKeyAgªemít
 "dhKeyAgªemít"

	)

575 
	#NID_dhKeyAgªemít
 28

	)

576 
	#OBJ_dhKeyAgªemít
 
OBJ_pkcs3
,1L

	)

578 
	#SN_pkcs5
 "pkcs5"

	)

579 
	#NID_pkcs5
 187

	)

580 
	#OBJ_pkcs5
 
OBJ_pkcs
,5L

	)

582 
	#SN_pbeWôhMD2AndDES_CBC
 "PBE-MD2-DES"

	)

583 
	#LN_pbeWôhMD2AndDES_CBC
 "pbeWôhMD2AndDES-CBC"

	)

584 
	#NID_pbeWôhMD2AndDES_CBC
 9

	)

585 
	#OBJ_pbeWôhMD2AndDES_CBC
 
OBJ_pkcs5
,1L

	)

587 
	#SN_pbeWôhMD5AndDES_CBC
 "PBE-MD5-DES"

	)

588 
	#LN_pbeWôhMD5AndDES_CBC
 "pbeWôhMD5AndDES-CBC"

	)

589 
	#NID_pbeWôhMD5AndDES_CBC
 10

	)

590 
	#OBJ_pbeWôhMD5AndDES_CBC
 
OBJ_pkcs5
,3L

	)

592 
	#SN_pbeWôhMD2AndRC2_CBC
 "PBE-MD2-RC2-64"

	)

593 
	#LN_pbeWôhMD2AndRC2_CBC
 "pbeWôhMD2AndRC2-CBC"

	)

594 
	#NID_pbeWôhMD2AndRC2_CBC
 168

	)

595 
	#OBJ_pbeWôhMD2AndRC2_CBC
 
OBJ_pkcs5
,4L

	)

597 
	#SN_pbeWôhMD5AndRC2_CBC
 "PBE-MD5-RC2-64"

	)

598 
	#LN_pbeWôhMD5AndRC2_CBC
 "pbeWôhMD5AndRC2-CBC"

	)

599 
	#NID_pbeWôhMD5AndRC2_CBC
 169

	)

600 
	#OBJ_pbeWôhMD5AndRC2_CBC
 
OBJ_pkcs5
,6L

	)

602 
	#SN_pbeWôhSHA1AndDES_CBC
 "PBE-SHA1-DES"

	)

603 
	#LN_pbeWôhSHA1AndDES_CBC
 "pbeWôhSHA1AndDES-CBC"

	)

604 
	#NID_pbeWôhSHA1AndDES_CBC
 170

	)

605 
	#OBJ_pbeWôhSHA1AndDES_CBC
 
OBJ_pkcs5
,10L

	)

607 
	#SN_pbeWôhSHA1AndRC2_CBC
 "PBE-SHA1-RC2-64"

	)

608 
	#LN_pbeWôhSHA1AndRC2_CBC
 "pbeWôhSHA1AndRC2-CBC"

	)

609 
	#NID_pbeWôhSHA1AndRC2_CBC
 68

	)

610 
	#OBJ_pbeWôhSHA1AndRC2_CBC
 
OBJ_pkcs5
,11L

	)

612 
	#LN_id_pbkdf2
 "PBKDF2"

	)

613 
	#NID_id_pbkdf2
 69

	)

614 
	#OBJ_id_pbkdf2
 
OBJ_pkcs5
,12L

	)

616 
	#LN_pbes2
 "PBES2"

	)

617 
	#NID_pbes2
 161

	)

618 
	#OBJ_pbes2
 
OBJ_pkcs5
,13L

	)

620 
	#LN_pbmac1
 "PBMAC1"

	)

621 
	#NID_pbmac1
 162

	)

622 
	#OBJ_pbmac1
 
OBJ_pkcs5
,14L

	)

624 
	#SN_pkcs7
 "pkcs7"

	)

625 
	#NID_pkcs7
 20

	)

626 
	#OBJ_pkcs7
 
OBJ_pkcs
,7L

	)

628 
	#LN_pkcs7_d©a
 "pkcs7-d©a"

	)

629 
	#NID_pkcs7_d©a
 21

	)

630 
	#OBJ_pkcs7_d©a
 
OBJ_pkcs7
,1L

	)

632 
	#LN_pkcs7_sig√d
 "pkcs7-sig√dD©a"

	)

633 
	#NID_pkcs7_sig√d
 22

	)

634 
	#OBJ_pkcs7_sig√d
 
OBJ_pkcs7
,2L

	)

636 
	#LN_pkcs7_ívñ›ed
 "pkcs7-ívñ›edD©a"

	)

637 
	#NID_pkcs7_ívñ›ed
 23

	)

638 
	#OBJ_pkcs7_ívñ›ed
 
OBJ_pkcs7
,3L

	)

640 
	#LN_pkcs7_sig√dAndEnvñ›ed
 "pkcs7-sig√dAndEnvñ›edD©a"

	)

641 
	#NID_pkcs7_sig√dAndEnvñ›ed
 24

	)

642 
	#OBJ_pkcs7_sig√dAndEnvñ›ed
 
OBJ_pkcs7
,4L

	)

644 
	#LN_pkcs7_dige°
 "pkcs7-dige°D©a"

	)

645 
	#NID_pkcs7_dige°
 25

	)

646 
	#OBJ_pkcs7_dige°
 
OBJ_pkcs7
,5L

	)

648 
	#LN_pkcs7_í¸y±ed
 "pkcs7-í¸y±edD©a"

	)

649 
	#NID_pkcs7_í¸y±ed
 26

	)

650 
	#OBJ_pkcs7_í¸y±ed
 
OBJ_pkcs7
,6L

	)

652 
	#SN_pkcs9
 "pkcs9"

	)

653 
	#NID_pkcs9
 47

	)

654 
	#OBJ_pkcs9
 
OBJ_pkcs
,9L

	)

656 
	#LN_pkcs9_emaûAddªss
 "emaûAddªss"

	)

657 
	#NID_pkcs9_emaûAddªss
 48

	)

658 
	#OBJ_pkcs9_emaûAddªss
 
OBJ_pkcs9
,1L

	)

660 
	#LN_pkcs9_un°ru˘uªdName
 "un°ru˘uªdName"

	)

661 
	#NID_pkcs9_un°ru˘uªdName
 49

	)

662 
	#OBJ_pkcs9_un°ru˘uªdName
 
OBJ_pkcs9
,2L

	)

664 
	#LN_pkcs9_c⁄ã¡Ty≥
 "c⁄ã¡Ty≥"

	)

665 
	#NID_pkcs9_c⁄ã¡Ty≥
 50

	)

666 
	#OBJ_pkcs9_c⁄ã¡Ty≥
 
OBJ_pkcs9
,3L

	)

668 
	#LN_pkcs9_mesßgeDige°
 "mesßgeDige°"

	)

669 
	#NID_pkcs9_mesßgeDige°
 51

	)

670 
	#OBJ_pkcs9_mesßgeDige°
 
OBJ_pkcs9
,4L

	)

672 
	#LN_pkcs9_signögTime
 "signögTime"

	)

673 
	#NID_pkcs9_signögTime
 52

	)

674 
	#OBJ_pkcs9_signögTime
 
OBJ_pkcs9
,5L

	)

676 
	#LN_pkcs9_cou¡îsig«tuª
 "cou¡îsig«tuª"

	)

677 
	#NID_pkcs9_cou¡îsig«tuª
 53

	)

678 
	#OBJ_pkcs9_cou¡îsig«tuª
 
OBJ_pkcs9
,6L

	)

680 
	#LN_pkcs9_chÆÀngePassw‹d
 "chÆÀngePassw‹d"

	)

681 
	#NID_pkcs9_chÆÀngePassw‹d
 54

	)

682 
	#OBJ_pkcs9_chÆÀngePassw‹d
 
OBJ_pkcs9
,7L

	)

684 
	#LN_pkcs9_un°ru˘uªdAddªss
 "un°ru˘uªdAddªss"

	)

685 
	#NID_pkcs9_un°ru˘uªdAddªss
 55

	)

686 
	#OBJ_pkcs9_un°ru˘uªdAddªss
 
OBJ_pkcs9
,8L

	)

688 
	#LN_pkcs9_extCîtAâribuãs
 "exãndedCîtifiˇãAâribuãs"

	)

689 
	#NID_pkcs9_extCîtAâribuãs
 56

	)

690 
	#OBJ_pkcs9_extCîtAâribuãs
 
OBJ_pkcs9
,9L

	)

692 
	#SN_ext_ªq
 "extReq"

	)

693 
	#LN_ext_ªq
 "Exãnsi⁄ Reque°"

	)

694 
	#NID_ext_ªq
 172

	)

695 
	#OBJ_ext_ªq
 
OBJ_pkcs9
,14L

	)

697 
	#SN_SMIMEC≠abûôõs
 "SMIME-CAPS"

	)

698 
	#LN_SMIMEC≠abûôõs
 "S/MIME C≠abûôõs"

	)

699 
	#NID_SMIMEC≠abûôõs
 167

	)

700 
	#OBJ_SMIMEC≠abûôõs
 
OBJ_pkcs9
,15L

	)

702 
	#SN_SMIME
 "SMIME"

	)

703 
	#LN_SMIME
 "S/MIME"

	)

704 
	#NID_SMIME
 188

	)

705 
	#OBJ_SMIME
 
OBJ_pkcs9
,16L

	)

707 
	#SN_id_smime_mod
 "id-smime-mod"

	)

708 
	#NID_id_smime_mod
 189

	)

709 
	#OBJ_id_smime_mod
 
OBJ_SMIME
,0L

	)

711 
	#SN_id_smime_˘
 "id-smime-˘"

	)

712 
	#NID_id_smime_˘
 190

	)

713 
	#OBJ_id_smime_˘
 
OBJ_SMIME
,1L

	)

715 
	#SN_id_smime_Ø
 "id-smime-Ø"

	)

716 
	#NID_id_smime_Ø
 191

	)

717 
	#OBJ_id_smime_Ø
 
OBJ_SMIME
,2L

	)

719 
	#SN_id_smime_Æg
 "id-smime-Æg"

	)

720 
	#NID_id_smime_Æg
 192

	)

721 
	#OBJ_id_smime_Æg
 
OBJ_SMIME
,3L

	)

723 
	#SN_id_smime_cd
 "id-smime-cd"

	)

724 
	#NID_id_smime_cd
 193

	)

725 
	#OBJ_id_smime_cd
 
OBJ_SMIME
,4L

	)

727 
	#SN_id_smime_•q
 "id-smime-•q"

	)

728 
	#NID_id_smime_•q
 194

	)

729 
	#OBJ_id_smime_•q
 
OBJ_SMIME
,5L

	)

731 
	#SN_id_smime_˘i
 "id-smime-˘i"

	)

732 
	#NID_id_smime_˘i
 195

	)

733 
	#OBJ_id_smime_˘i
 
OBJ_SMIME
,6L

	)

735 
	#SN_id_smime_mod_cms
 "id-smime-mod-cms"

	)

736 
	#NID_id_smime_mod_cms
 196

	)

737 
	#OBJ_id_smime_mod_cms
 
OBJ_id_smime_mod
,1L

	)

739 
	#SN_id_smime_mod_ess
 "id-smime-mod-ess"

	)

740 
	#NID_id_smime_mod_ess
 197

	)

741 
	#OBJ_id_smime_mod_ess
 
OBJ_id_smime_mod
,2L

	)

743 
	#SN_id_smime_mod_oid
 "id-smime-mod-oid"

	)

744 
	#NID_id_smime_mod_oid
 198

	)

745 
	#OBJ_id_smime_mod_oid
 
OBJ_id_smime_mod
,3L

	)

747 
	#SN_id_smime_mod_msg_v3
 "id-smime-mod-msg-v3"

	)

748 
	#NID_id_smime_mod_msg_v3
 199

	)

749 
	#OBJ_id_smime_mod_msg_v3
 
OBJ_id_smime_mod
,4L

	)

751 
	#SN_id_smime_mod_ës_eSig«tuª_88
 "id-smime-mod-ës-eSig«tuª-88"

	)

752 
	#NID_id_smime_mod_ës_eSig«tuª_88
 200

	)

753 
	#OBJ_id_smime_mod_ës_eSig«tuª_88
 
OBJ_id_smime_mod
,5L

	)

755 
	#SN_id_smime_mod_ës_eSig«tuª_97
 "id-smime-mod-ës-eSig«tuª-97"

	)

756 
	#NID_id_smime_mod_ës_eSig«tuª_97
 201

	)

757 
	#OBJ_id_smime_mod_ës_eSig«tuª_97
 
OBJ_id_smime_mod
,6L

	)

759 
	#SN_id_smime_mod_ës_eSigPﬁicy_88
 "id-smime-mod-ës-eSigPﬁicy-88"

	)

760 
	#NID_id_smime_mod_ës_eSigPﬁicy_88
 202

	)

761 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_88
 
OBJ_id_smime_mod
,7L

	)

763 
	#SN_id_smime_mod_ës_eSigPﬁicy_97
 "id-smime-mod-ës-eSigPﬁicy-97"

	)

764 
	#NID_id_smime_mod_ës_eSigPﬁicy_97
 203

	)

765 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_97
 
OBJ_id_smime_mod
,8L

	)

767 
	#SN_id_smime_˘_ª˚ùt
 "id-smime-˘-ª˚ùt"

	)

768 
	#NID_id_smime_˘_ª˚ùt
 204

	)

769 
	#OBJ_id_smime_˘_ª˚ùt
 
OBJ_id_smime_˘
,1L

	)

771 
	#SN_id_smime_˘_authD©a
 "id-smime-˘-authD©a"

	)

772 
	#NID_id_smime_˘_authD©a
 205

	)

773 
	#OBJ_id_smime_˘_authD©a
 
OBJ_id_smime_˘
,2L

	)

775 
	#SN_id_smime_˘_publishCît
 "id-smime-˘-publishCît"

	)

776 
	#NID_id_smime_˘_publishCît
 206

	)

777 
	#OBJ_id_smime_˘_publishCît
 
OBJ_id_smime_˘
,3L

	)

779 
	#SN_id_smime_˘_TSTInfo
 "id-smime-˘-TSTInfo"

	)

780 
	#NID_id_smime_˘_TSTInfo
 207

	)

781 
	#OBJ_id_smime_˘_TSTInfo
 
OBJ_id_smime_˘
,4L

	)

783 
	#SN_id_smime_˘_TDTInfo
 "id-smime-˘-TDTInfo"

	)

784 
	#NID_id_smime_˘_TDTInfo
 208

	)

785 
	#OBJ_id_smime_˘_TDTInfo
 
OBJ_id_smime_˘
,5L

	)

787 
	#SN_id_smime_˘_c⁄ã¡Info
 "id-smime-˘-c⁄ã¡Info"

	)

788 
	#NID_id_smime_˘_c⁄ã¡Info
 209

	)

789 
	#OBJ_id_smime_˘_c⁄ã¡Info
 
OBJ_id_smime_˘
,6L

	)

791 
	#SN_id_smime_˘_DVCSReque°D©a
 "id-smime-˘-DVCSReque°D©a"

	)

792 
	#NID_id_smime_˘_DVCSReque°D©a
 210

	)

793 
	#OBJ_id_smime_˘_DVCSReque°D©a
 
OBJ_id_smime_˘
,7L

	)

795 
	#SN_id_smime_˘_DVCSRe•⁄£D©a
 "id-smime-˘-DVCSRe•⁄£D©a"

	)

796 
	#NID_id_smime_˘_DVCSRe•⁄£D©a
 211

	)

797 
	#OBJ_id_smime_˘_DVCSRe•⁄£D©a
 
OBJ_id_smime_˘
,8L

	)

799 
	#SN_id_smime_˘_com¥es£dD©a
 "id-smime-˘-com¥es£dD©a"

	)

800 
	#NID_id_smime_˘_com¥es£dD©a
 786

	)

801 
	#OBJ_id_smime_˘_com¥es£dD©a
 
OBJ_id_smime_˘
,9L

	)

803 
	#SN_id_˘_asciiTextWôhCRLF
 "id-˘-asciiTextWôhCRLF"

	)

804 
	#NID_id_˘_asciiTextWôhCRLF
 787

	)

805 
	#OBJ_id_˘_asciiTextWôhCRLF
 
OBJ_id_smime_˘
,27L

	)

807 
	#SN_id_smime_Ø_ª˚ùtReque°
 "id-smime-Ø-ª˚ùtReque°"

	)

808 
	#NID_id_smime_Ø_ª˚ùtReque°
 212

	)

809 
	#OBJ_id_smime_Ø_ª˚ùtReque°
 
OBJ_id_smime_Ø
,1L

	)

811 
	#SN_id_smime_Ø_£curôyLabñ
 "id-smime-Ø-£curôyLabñ"

	)

812 
	#NID_id_smime_Ø_£curôyLabñ
 213

	)

813 
	#OBJ_id_smime_Ø_£curôyLabñ
 
OBJ_id_smime_Ø
,2L

	)

815 
	#SN_id_smime_Ø_mlEx∑ndHi°‹y
 "id-smime-Ø-mlEx∑ndHi°‹y"

	)

816 
	#NID_id_smime_Ø_mlEx∑ndHi°‹y
 214

	)

817 
	#OBJ_id_smime_Ø_mlEx∑ndHi°‹y
 
OBJ_id_smime_Ø
,3L

	)

819 
	#SN_id_smime_Ø_c⁄ã¡Höt
 "id-smime-Ø-c⁄ã¡Höt"

	)

820 
	#NID_id_smime_Ø_c⁄ã¡Höt
 215

	)

821 
	#OBJ_id_smime_Ø_c⁄ã¡Höt
 
OBJ_id_smime_Ø
,4L

	)

823 
	#SN_id_smime_Ø_msgSigDige°
 "id-smime-Ø-msgSigDige°"

	)

824 
	#NID_id_smime_Ø_msgSigDige°
 216

	)

825 
	#OBJ_id_smime_Ø_msgSigDige°
 
OBJ_id_smime_Ø
,5L

	)

827 
	#SN_id_smime_Ø_íˇpC⁄ã¡Ty≥
 "id-smime-Ø-íˇpC⁄ã¡Ty≥"

	)

828 
	#NID_id_smime_Ø_íˇpC⁄ã¡Ty≥
 217

	)

829 
	#OBJ_id_smime_Ø_íˇpC⁄ã¡Ty≥
 
OBJ_id_smime_Ø
,6L

	)

831 
	#SN_id_smime_Ø_c⁄ã¡Idítifõr
 "id-smime-Ø-c⁄ã¡Idítifõr"

	)

832 
	#NID_id_smime_Ø_c⁄ã¡Idítifõr
 218

	)

833 
	#OBJ_id_smime_Ø_c⁄ã¡Idítifõr
 
OBJ_id_smime_Ø
,7L

	)

835 
	#SN_id_smime_Ø_macVÆue
 "id-smime-Ø-macVÆue"

	)

836 
	#NID_id_smime_Ø_macVÆue
 219

	)

837 
	#OBJ_id_smime_Ø_macVÆue
 
OBJ_id_smime_Ø
,8L

	)

839 
	#SN_id_smime_Ø_equivÆítLabñs
 "id-smime-Ø-equivÆítLabñs"

	)

840 
	#NID_id_smime_Ø_equivÆítLabñs
 220

	)

841 
	#OBJ_id_smime_Ø_equivÆítLabñs
 
OBJ_id_smime_Ø
,9L

	)

843 
	#SN_id_smime_Ø_c⁄ã¡Re„ªn˚
 "id-smime-Ø-c⁄ã¡Re„ªn˚"

	)

844 
	#NID_id_smime_Ø_c⁄ã¡Re„ªn˚
 221

	)

845 
	#OBJ_id_smime_Ø_c⁄ã¡Re„ªn˚
 
OBJ_id_smime_Ø
,10L

	)

847 
	#SN_id_smime_Ø_í¸ypKeyPªf
 "id-smime-Ø-í¸ypKeyPªf"

	)

848 
	#NID_id_smime_Ø_í¸ypKeyPªf
 222

	)

849 
	#OBJ_id_smime_Ø_í¸ypKeyPªf
 
OBJ_id_smime_Ø
,11L

	)

851 
	#SN_id_smime_Ø_signögCîtifiˇã
 "id-smime-Ø-signögCîtifiˇã"

	)

852 
	#NID_id_smime_Ø_signögCîtifiˇã
 223

	)

853 
	#OBJ_id_smime_Ø_signögCîtifiˇã
 
OBJ_id_smime_Ø
,12L

	)

855 
	#SN_id_smime_Ø_smimeEn¸y±Cîts
 "id-smime-Ø-smimeEn¸y±Cîts"

	)

856 
	#NID_id_smime_Ø_smimeEn¸y±Cîts
 224

	)

857 
	#OBJ_id_smime_Ø_smimeEn¸y±Cîts
 
OBJ_id_smime_Ø
,13L

	)

859 
	#SN_id_smime_Ø_timeSèmpTokí
 "id-smime-Ø-timeSèmpTokí"

	)

860 
	#NID_id_smime_Ø_timeSèmpTokí
 225

	)

861 
	#OBJ_id_smime_Ø_timeSèmpTokí
 
OBJ_id_smime_Ø
,14L

	)

863 
	#SN_id_smime_Ø_ës_sigPﬁicyId
 "id-smime-Ø-ës-sigPﬁicyId"

	)

864 
	#NID_id_smime_Ø_ës_sigPﬁicyId
 226

	)

865 
	#OBJ_id_smime_Ø_ës_sigPﬁicyId
 
OBJ_id_smime_Ø
,15L

	)

867 
	#SN_id_smime_Ø_ës_commômítTy≥
 "id-smime-Ø-ës-commômítTy≥"

	)

868 
	#NID_id_smime_Ø_ës_commômítTy≥
 227

	)

869 
	#OBJ_id_smime_Ø_ës_commômítTy≥
 
OBJ_id_smime_Ø
,16L

	)

871 
	#SN_id_smime_Ø_ës_sig√rLoˇti⁄
 "id-smime-Ø-ës-sig√rLoˇti⁄"

	)

872 
	#NID_id_smime_Ø_ës_sig√rLoˇti⁄
 228

	)

873 
	#OBJ_id_smime_Ø_ës_sig√rLoˇti⁄
 
OBJ_id_smime_Ø
,17L

	)

875 
	#SN_id_smime_Ø_ës_sig√rAâr
 "id-smime-Ø-ës-sig√rAâr"

	)

876 
	#NID_id_smime_Ø_ës_sig√rAâr
 229

	)

877 
	#OBJ_id_smime_Ø_ës_sig√rAâr
 
OBJ_id_smime_Ø
,18L

	)

879 
	#SN_id_smime_Ø_ës_ŸhîSigCît
 "id-smime-Ø-ës-ŸhîSigCît"

	)

880 
	#NID_id_smime_Ø_ës_ŸhîSigCît
 230

	)

881 
	#OBJ_id_smime_Ø_ës_ŸhîSigCît
 
OBJ_id_smime_Ø
,19L

	)

883 
	#SN_id_smime_Ø_ës_c⁄ã¡Time°amp
 "id-smime-Ø-ës-c⁄ã¡Time°amp"

	)

884 
	#NID_id_smime_Ø_ës_c⁄ã¡Time°amp
 231

	)

885 
	#OBJ_id_smime_Ø_ës_c⁄ã¡Time°amp
 
OBJ_id_smime_Ø
,20L

	)

887 
	#SN_id_smime_Ø_ës_CîtifiˇãRefs
 "id-smime-Ø-ës-CîtifiˇãRefs"

	)

888 
	#NID_id_smime_Ø_ës_CîtifiˇãRefs
 232

	)

889 
	#OBJ_id_smime_Ø_ës_CîtifiˇãRefs
 
OBJ_id_smime_Ø
,21L

	)

891 
	#SN_id_smime_Ø_ës_Revoˇti⁄Refs
 "id-smime-Ø-ës-Revoˇti⁄Refs"

	)

892 
	#NID_id_smime_Ø_ës_Revoˇti⁄Refs
 233

	)

893 
	#OBJ_id_smime_Ø_ës_Revoˇti⁄Refs
 
OBJ_id_smime_Ø
,22L

	)

895 
	#SN_id_smime_Ø_ës_˚πVÆues
 "id-smime-Ø-ës-˚πVÆues"

	)

896 
	#NID_id_smime_Ø_ës_˚πVÆues
 234

	)

897 
	#OBJ_id_smime_Ø_ës_˚πVÆues
 
OBJ_id_smime_Ø
,23L

	)

899 
	#SN_id_smime_Ø_ës_ªvoˇti⁄VÆues
 "id-smime-Ø-ës-ªvoˇti⁄VÆues"

	)

900 
	#NID_id_smime_Ø_ës_ªvoˇti⁄VÆues
 235

	)

901 
	#OBJ_id_smime_Ø_ës_ªvoˇti⁄VÆues
 
OBJ_id_smime_Ø
,24L

	)

903 
	#SN_id_smime_Ø_ës_escTimeSèmp
 "id-smime-Ø-ës-escTimeSèmp"

	)

904 
	#NID_id_smime_Ø_ës_escTimeSèmp
 236

	)

905 
	#OBJ_id_smime_Ø_ës_escTimeSèmp
 
OBJ_id_smime_Ø
,25L

	)

907 
	#SN_id_smime_Ø_ës_˚πCRLTime°amp
 "id-smime-Ø-ës-˚πCRLTime°amp"

	)

908 
	#NID_id_smime_Ø_ës_˚πCRLTime°amp
 237

	)

909 
	#OBJ_id_smime_Ø_ës_˚πCRLTime°amp
 
OBJ_id_smime_Ø
,26L

	)

911 
	#SN_id_smime_Ø_ës_¨chiveTimeSèmp
 "id-smime-Ø-ës-¨chiveTimeSèmp"

	)

912 
	#NID_id_smime_Ø_ës_¨chiveTimeSèmp
 238

	)

913 
	#OBJ_id_smime_Ø_ës_¨chiveTimeSèmp
 
OBJ_id_smime_Ø
,27L

	)

915 
	#SN_id_smime_Ø_sig«tuªTy≥
 "id-smime-Ø-sig«tuªTy≥"

	)

916 
	#NID_id_smime_Ø_sig«tuªTy≥
 239

	)

917 
	#OBJ_id_smime_Ø_sig«tuªTy≥
 
OBJ_id_smime_Ø
,28L

	)

919 
	#SN_id_smime_Ø_dvcs_dvc
 "id-smime-Ø-dvcs-dvc"

	)

920 
	#NID_id_smime_Ø_dvcs_dvc
 240

	)

921 
	#OBJ_id_smime_Ø_dvcs_dvc
 
OBJ_id_smime_Ø
,29L

	)

923 
	#SN_id_smime_Æg_ESDHwôh3DES
 "id-smime-Æg-ESDHwôh3DES"

	)

924 
	#NID_id_smime_Æg_ESDHwôh3DES
 241

	)

925 
	#OBJ_id_smime_Æg_ESDHwôh3DES
 
OBJ_id_smime_Æg
,1L

	)

927 
	#SN_id_smime_Æg_ESDHwôhRC2
 "id-smime-Æg-ESDHwôhRC2"

	)

928 
	#NID_id_smime_Æg_ESDHwôhRC2
 242

	)

929 
	#OBJ_id_smime_Æg_ESDHwôhRC2
 
OBJ_id_smime_Æg
,2L

	)

931 
	#SN_id_smime_Æg_3DESwøp
 "id-smime-Æg-3DESwøp"

	)

932 
	#NID_id_smime_Æg_3DESwøp
 243

	)

933 
	#OBJ_id_smime_Æg_3DESwøp
 
OBJ_id_smime_Æg
,3L

	)

935 
	#SN_id_smime_Æg_RC2wøp
 "id-smime-Æg-RC2wøp"

	)

936 
	#NID_id_smime_Æg_RC2wøp
 244

	)

937 
	#OBJ_id_smime_Æg_RC2wøp
 
OBJ_id_smime_Æg
,4L

	)

939 
	#SN_id_smime_Æg_ESDH
 "id-smime-Æg-ESDH"

	)

940 
	#NID_id_smime_Æg_ESDH
 245

	)

941 
	#OBJ_id_smime_Æg_ESDH
 
OBJ_id_smime_Æg
,5L

	)

943 
	#SN_id_smime_Æg_CMS3DESwøp
 "id-smime-Æg-CMS3DESwøp"

	)

944 
	#NID_id_smime_Æg_CMS3DESwøp
 246

	)

945 
	#OBJ_id_smime_Æg_CMS3DESwøp
 
OBJ_id_smime_Æg
,6L

	)

947 
	#SN_id_smime_Æg_CMSRC2wøp
 "id-smime-Æg-CMSRC2wøp"

	)

948 
	#NID_id_smime_Æg_CMSRC2wøp
 247

	)

949 
	#OBJ_id_smime_Æg_CMSRC2wøp
 
OBJ_id_smime_Æg
,7L

	)

951 
	#SN_id_Æg_PWRI_KEK
 "id-Æg-PWRI-KEK"

	)

952 
	#NID_id_Æg_PWRI_KEK
 893

	)

953 
	#OBJ_id_Æg_PWRI_KEK
 
OBJ_id_smime_Æg
,9L

	)

955 
	#SN_id_smime_cd_ld≠
 "id-smime-cd-ld≠"

	)

956 
	#NID_id_smime_cd_ld≠
 248

	)

957 
	#OBJ_id_smime_cd_ld≠
 
OBJ_id_smime_cd
,1L

	)

959 
	#SN_id_smime_•q_ës_sqt_uri
 "id-smime-•q-ës-sqt-uri"

	)

960 
	#NID_id_smime_•q_ës_sqt_uri
 249

	)

961 
	#OBJ_id_smime_•q_ës_sqt_uri
 
OBJ_id_smime_•q
,1L

	)

963 
	#SN_id_smime_•q_ës_sqt_unŸi˚
 "id-smime-•q-ës-sqt-unŸi˚"

	)

964 
	#NID_id_smime_•q_ës_sqt_unŸi˚
 250

	)

965 
	#OBJ_id_smime_•q_ës_sqt_unŸi˚
 
OBJ_id_smime_•q
,2L

	)

967 
	#SN_id_smime_˘i_ës_¥oofOfOrigö
 "id-smime-˘i-ës-¥oofOfOrigö"

	)

968 
	#NID_id_smime_˘i_ës_¥oofOfOrigö
 251

	)

969 
	#OBJ_id_smime_˘i_ës_¥oofOfOrigö
 
OBJ_id_smime_˘i
,1L

	)

971 
	#SN_id_smime_˘i_ës_¥oofOfRe˚ùt
 "id-smime-˘i-ës-¥oofOfRe˚ùt"

	)

972 
	#NID_id_smime_˘i_ës_¥oofOfRe˚ùt
 252

	)

973 
	#OBJ_id_smime_˘i_ës_¥oofOfRe˚ùt
 
OBJ_id_smime_˘i
,2L

	)

975 
	#SN_id_smime_˘i_ës_¥oofOfDñivîy
 "id-smime-˘i-ës-¥oofOfDñivîy"

	)

976 
	#NID_id_smime_˘i_ës_¥oofOfDñivîy
 253

	)

977 
	#OBJ_id_smime_˘i_ës_¥oofOfDñivîy
 
OBJ_id_smime_˘i
,3L

	)

979 
	#SN_id_smime_˘i_ës_¥oofOfSídî
 "id-smime-˘i-ës-¥oofOfSídî"

	)

980 
	#NID_id_smime_˘i_ës_¥oofOfSídî
 254

	)

981 
	#OBJ_id_smime_˘i_ës_¥oofOfSídî
 
OBJ_id_smime_˘i
,4L

	)

983 
	#SN_id_smime_˘i_ës_¥oofOfAµrovÆ
 "id-smime-˘i-ës-¥oofOfAµrovÆ"

	)

984 
	#NID_id_smime_˘i_ës_¥oofOfAµrovÆ
 255

	)

985 
	#OBJ_id_smime_˘i_ës_¥oofOfAµrovÆ
 
OBJ_id_smime_˘i
,5L

	)

987 
	#SN_id_smime_˘i_ës_¥oofOfCª©i⁄
 "id-smime-˘i-ës-¥oofOfCª©i⁄"

	)

988 
	#NID_id_smime_˘i_ës_¥oofOfCª©i⁄
 256

	)

989 
	#OBJ_id_smime_˘i_ës_¥oofOfCª©i⁄
 
OBJ_id_smime_˘i
,6L

	)

991 
	#LN_‰õndlyName
 "‰õndlyName"

	)

992 
	#NID_‰õndlyName
 156

	)

993 
	#OBJ_‰õndlyName
 
OBJ_pkcs9
,20L

	)

995 
	#LN_loˇlKeyID
 "loˇlKeyID"

	)

996 
	#NID_loˇlKeyID
 157

	)

997 
	#OBJ_loˇlKeyID
 
OBJ_pkcs9
,21L

	)

999 
	#SN_ms_c•_«me
 "CSPName"

	)

1000 
	#LN_ms_c•_«me
 "Mi¸oso· CSP Name"

	)

1001 
	#NID_ms_c•_«me
 417

	)

1002 
	#OBJ_ms_c•_«me
 1L,3L,6L,1L,4L,1L,311L,17L,1L

	)

1004 
	#SN_LoˇlKeySë
 "LoˇlKeySë"

	)

1005 
	#LN_LoˇlKeySë
 "Mi¸oso· Loˇ»Key së"

	)

1006 
	#NID_LoˇlKeySë
 856

	)

1007 
	#OBJ_LoˇlKeySë
 1L,3L,6L,1L,4L,1L,311L,17L,2L

	)

1009 
	#OBJ_˚πTy≥s
 
OBJ_pkcs9
,22L

	)

1011 
	#LN_x509Cîtifiˇã
 "x509Cîtifiˇã"

	)

1012 
	#NID_x509Cîtifiˇã
 158

	)

1013 
	#OBJ_x509Cîtifiˇã
 
OBJ_˚πTy≥s
,1L

	)

1015 
	#LN_sdsiCîtifiˇã
 "sdsiCîtifiˇã"

	)

1016 
	#NID_sdsiCîtifiˇã
 159

	)

1017 
	#OBJ_sdsiCîtifiˇã
 
OBJ_˚πTy≥s
,2L

	)

1019 
	#OBJ_¸lTy≥s
 
OBJ_pkcs9
,23L

	)

1021 
	#LN_x509Cæ
 "x509Cæ"

	)

1022 
	#NID_x509Cæ
 160

	)

1023 
	#OBJ_x509Cæ
 
OBJ_¸lTy≥s
,1L

	)

1025 
	#OBJ_pkcs12
 
OBJ_pkcs
,12L

	)

1027 
	#OBJ_pkcs12_pbeids
 
OBJ_pkcs12
,1L

	)

1029 
	#SN_pbe_WôhSHA1And128BôRC4
 "PBE-SHA1-RC4-128"

	)

1030 
	#LN_pbe_WôhSHA1And128BôRC4
 "pbeWôhSHA1And128BôRC4"

	)

1031 
	#NID_pbe_WôhSHA1And128BôRC4
 144

	)

1032 
	#OBJ_pbe_WôhSHA1And128BôRC4
 
OBJ_pkcs12_pbeids
,1L

	)

1034 
	#SN_pbe_WôhSHA1And40BôRC4
 "PBE-SHA1-RC4-40"

	)

1035 
	#LN_pbe_WôhSHA1And40BôRC4
 "pbeWôhSHA1And40BôRC4"

	)

1036 
	#NID_pbe_WôhSHA1And40BôRC4
 145

	)

1037 
	#OBJ_pbe_WôhSHA1And40BôRC4
 
OBJ_pkcs12_pbeids
,2L

	)

1039 
	#SN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "PBE-SHA1-3DES"

	)

1040 
	#LN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "pbeWôhSHA1And3-KeyTrùÀDES-CBC"

	)

1041 
	#NID_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 146

	)

1042 
	#OBJ_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,3L

	)

1044 
	#SN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "PBE-SHA1-2DES"

	)

1045 
	#LN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "pbeWôhSHA1And2-KeyTrùÀDES-CBC"

	)

1046 
	#NID_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 147

	)

1047 
	#OBJ_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,4L

	)

1049 
	#SN_pbe_WôhSHA1And128BôRC2_CBC
 "PBE-SHA1-RC2-128"

	)

1050 
	#LN_pbe_WôhSHA1And128BôRC2_CBC
 "pbeWôhSHA1And128BôRC2-CBC"

	)

1051 
	#NID_pbe_WôhSHA1And128BôRC2_CBC
 148

	)

1052 
	#OBJ_pbe_WôhSHA1And128BôRC2_CBC
 
OBJ_pkcs12_pbeids
,5L

	)

1054 
	#SN_pbe_WôhSHA1And40BôRC2_CBC
 "PBE-SHA1-RC2-40"

	)

1055 
	#LN_pbe_WôhSHA1And40BôRC2_CBC
 "pbeWôhSHA1And40BôRC2-CBC"

	)

1056 
	#NID_pbe_WôhSHA1And40BôRC2_CBC
 149

	)

1057 
	#OBJ_pbe_WôhSHA1And40BôRC2_CBC
 
OBJ_pkcs12_pbeids
,6L

	)

1059 
	#OBJ_pkcs12_Vîsi⁄1
 
OBJ_pkcs12
,10L

	)

1061 
	#OBJ_pkcs12_BagIds
 
OBJ_pkcs12_Vîsi⁄1
,1L

	)

1063 
	#LN_keyBag
 "keyBag"

	)

1064 
	#NID_keyBag
 150

	)

1065 
	#OBJ_keyBag
 
OBJ_pkcs12_BagIds
,1L

	)

1067 
	#LN_pkcs8ShroudedKeyBag
 "pkcs8ShroudedKeyBag"

	)

1068 
	#NID_pkcs8ShroudedKeyBag
 151

	)

1069 
	#OBJ_pkcs8ShroudedKeyBag
 
OBJ_pkcs12_BagIds
,2L

	)

1071 
	#LN_˚πBag
 "˚πBag"

	)

1072 
	#NID_˚πBag
 152

	)

1073 
	#OBJ_˚πBag
 
OBJ_pkcs12_BagIds
,3L

	)

1075 
	#LN_¸lBag
 "¸lBag"

	)

1076 
	#NID_¸lBag
 153

	)

1077 
	#OBJ_¸lBag
 
OBJ_pkcs12_BagIds
,4L

	)

1079 
	#LN_£¸ëBag
 "£¸ëBag"

	)

1080 
	#NID_£¸ëBag
 154

	)

1081 
	#OBJ_£¸ëBag
 
OBJ_pkcs12_BagIds
,5L

	)

1083 
	#LN_ß„C⁄ã¡sBag
 "ß„C⁄ã¡sBag"

	)

1084 
	#NID_ß„C⁄ã¡sBag
 155

	)

1085 
	#OBJ_ß„C⁄ã¡sBag
 
OBJ_pkcs12_BagIds
,6L

	)

1087 
	#SN_md2
 "MD2"

	)

1088 
	#LN_md2
 "md2"

	)

1089 
	#NID_md2
 3

	)

1090 
	#OBJ_md2
 
OBJ_rßdsi
,2L,2L

	)

1092 
	#SN_md4
 "MD4"

	)

1093 
	#LN_md4
 "md4"

	)

1094 
	#NID_md4
 257

	)

1095 
	#OBJ_md4
 
OBJ_rßdsi
,2L,4L

	)

1097 
	#SN_md5
 "MD5"

	)

1098 
	#LN_md5
 "md5"

	)

1099 
	#NID_md5
 4

	)

1100 
	#OBJ_md5
 
OBJ_rßdsi
,2L,5L

	)

1102 
	#SN_md5_sha1
 "MD5-SHA1"

	)

1103 
	#LN_md5_sha1
 "md5-sha1"

	)

1104 
	#NID_md5_sha1
 114

	)

1106 
	#LN_hmacWôhMD5
 "hmacWôhMD5"

	)

1107 
	#NID_hmacWôhMD5
 797

	)

1108 
	#OBJ_hmacWôhMD5
 
OBJ_rßdsi
,2L,6L

	)

1110 
	#LN_hmacWôhSHA1
 "hmacWôhSHA1"

	)

1111 
	#NID_hmacWôhSHA1
 163

	)

1112 
	#OBJ_hmacWôhSHA1
 
OBJ_rßdsi
,2L,7L

	)

1114 
	#LN_hmacWôhSHA224
 "hmacWôhSHA224"

	)

1115 
	#NID_hmacWôhSHA224
 798

	)

1116 
	#OBJ_hmacWôhSHA224
 
OBJ_rßdsi
,2L,8L

	)

1118 
	#LN_hmacWôhSHA256
 "hmacWôhSHA256"

	)

1119 
	#NID_hmacWôhSHA256
 799

	)

1120 
	#OBJ_hmacWôhSHA256
 
OBJ_rßdsi
,2L,9L

	)

1122 
	#LN_hmacWôhSHA384
 "hmacWôhSHA384"

	)

1123 
	#NID_hmacWôhSHA384
 800

	)

1124 
	#OBJ_hmacWôhSHA384
 
OBJ_rßdsi
,2L,10L

	)

1126 
	#LN_hmacWôhSHA512
 "hmacWôhSHA512"

	)

1127 
	#NID_hmacWôhSHA512
 801

	)

1128 
	#OBJ_hmacWôhSHA512
 
OBJ_rßdsi
,2L,11L

	)

1130 
	#SN_rc2_cbc
 "RC2-CBC"

	)

1131 
	#LN_rc2_cbc
 "rc2-cbc"

	)

1132 
	#NID_rc2_cbc
 37

	)

1133 
	#OBJ_rc2_cbc
 
OBJ_rßdsi
,3L,2L

	)

1135 
	#SN_rc2_ecb
 "RC2-ECB"

	)

1136 
	#LN_rc2_ecb
 "rc2-ecb"

	)

1137 
	#NID_rc2_ecb
 38

	)

1139 
	#SN_rc2_cfb64
 "RC2-CFB"

	)

1140 
	#LN_rc2_cfb64
 "rc2-cfb"

	)

1141 
	#NID_rc2_cfb64
 39

	)

1143 
	#SN_rc2_ofb64
 "RC2-OFB"

	)

1144 
	#LN_rc2_ofb64
 "rc2-ofb"

	)

1145 
	#NID_rc2_ofb64
 40

	)

1147 
	#SN_rc2_40_cbc
 "RC2-40-CBC"

	)

1148 
	#LN_rc2_40_cbc
 "rc2-40-cbc"

	)

1149 
	#NID_rc2_40_cbc
 98

	)

1151 
	#SN_rc2_64_cbc
 "RC2-64-CBC"

	)

1152 
	#LN_rc2_64_cbc
 "rc2-64-cbc"

	)

1153 
	#NID_rc2_64_cbc
 166

	)

1155 
	#SN_rc4
 "RC4"

	)

1156 
	#LN_rc4
 "rc4"

	)

1157 
	#NID_rc4
 5

	)

1158 
	#OBJ_rc4
 
OBJ_rßdsi
,3L,4L

	)

1160 
	#SN_rc4_40
 "RC4-40"

	)

1161 
	#LN_rc4_40
 "rc4-40"

	)

1162 
	#NID_rc4_40
 97

	)

1164 
	#SN_des_ede3_cbc
 "DES-EDE3-CBC"

	)

1165 
	#LN_des_ede3_cbc
 "des-ede3-cbc"

	)

1166 
	#NID_des_ede3_cbc
 44

	)

1167 
	#OBJ_des_ede3_cbc
 
OBJ_rßdsi
,3L,7L

	)

1169 
	#SN_rc5_cbc
 "RC5-CBC"

	)

1170 
	#LN_rc5_cbc
 "rc5-cbc"

	)

1171 
	#NID_rc5_cbc
 120

	)

1172 
	#OBJ_rc5_cbc
 
OBJ_rßdsi
,3L,8L

	)

1174 
	#SN_rc5_ecb
 "RC5-ECB"

	)

1175 
	#LN_rc5_ecb
 "rc5-ecb"

	)

1176 
	#NID_rc5_ecb
 121

	)

1178 
	#SN_rc5_cfb64
 "RC5-CFB"

	)

1179 
	#LN_rc5_cfb64
 "rc5-cfb"

	)

1180 
	#NID_rc5_cfb64
 122

	)

1182 
	#SN_rc5_ofb64
 "RC5-OFB"

	)

1183 
	#LN_rc5_ofb64
 "rc5-ofb"

	)

1184 
	#NID_rc5_ofb64
 123

	)

1186 
	#SN_ms_ext_ªq
 "msExtReq"

	)

1187 
	#LN_ms_ext_ªq
 "Mi¸oso· Exãnsi⁄ Reque°"

	)

1188 
	#NID_ms_ext_ªq
 171

	)

1189 
	#OBJ_ms_ext_ªq
 1L,3L,6L,1L,4L,1L,311L,2L,1L,14L

	)

1191 
	#SN_ms_code_öd
 "msCodeInd"

	)

1192 
	#LN_ms_code_öd
 "Mi¸oso· IndividuÆ CodêSignög"

	)

1193 
	#NID_ms_code_öd
 134

	)

1194 
	#OBJ_ms_code_öd
 1L,3L,6L,1L,4L,1L,311L,2L,1L,21L

	)

1196 
	#SN_ms_code_com
 "msCodeCom"

	)

1197 
	#LN_ms_code_com
 "Mi¸oso· Commîcü»CodêSignög"

	)

1198 
	#NID_ms_code_com
 135

	)

1199 
	#OBJ_ms_code_com
 1L,3L,6L,1L,4L,1L,311L,2L,1L,22L

	)

1201 
	#SN_ms_˘l_sign
 "msCTLSign"

	)

1202 
	#LN_ms_˘l_sign
 "Mi¸oso· Tru° Li° Signög"

	)

1203 
	#NID_ms_˘l_sign
 136

	)

1204 
	#OBJ_ms_˘l_sign
 1L,3L,6L,1L,4L,1L,311L,10L,3L,1L

	)

1206 
	#SN_ms_sgc
 "msSGC"

	)

1207 
	#LN_ms_sgc
 "Mi¸oso· Sîvî G©ed Cry±o"

	)

1208 
	#NID_ms_sgc
 137

	)

1209 
	#OBJ_ms_sgc
 1L,3L,6L,1L,4L,1L,311L,10L,3L,3L

	)

1211 
	#SN_ms_efs
 "msEFS"

	)

1212 
	#LN_ms_efs
 "Mi¸oso· En¸y±ed FûêSy°em"

	)

1213 
	#NID_ms_efs
 138

	)

1214 
	#OBJ_ms_efs
 1L,3L,6L,1L,4L,1L,311L,10L,3L,4L

	)

1216 
	#SN_ms_sm¨tˇrd_logö
 "msSm¨tˇrdLogö"

	)

1217 
	#LN_ms_sm¨tˇrd_logö
 "Mi¸oso· Sm¨tˇrdlogö"

	)

1218 
	#NID_ms_sm¨tˇrd_logö
 648

	)

1219 
	#OBJ_ms_sm¨tˇrd_logö
 1L,3L,6L,1L,4L,1L,311L,20L,2L,2L

	)

1221 
	#SN_ms_u≤
 "msUPN"

	)

1222 
	#LN_ms_u≤
 "Mi¸oso· Univîß»PröcùÆ Name"

	)

1223 
	#NID_ms_u≤
 649

	)

1224 
	#OBJ_ms_u≤
 1L,3L,6L,1L,4L,1L,311L,20L,2L,3L

	)

1226 
	#SN_idó_cbc
 "IDEA-CBC"

	)

1227 
	#LN_idó_cbc
 "idó-cbc"

	)

1228 
	#NID_idó_cbc
 34

	)

1229 
	#OBJ_idó_cbc
 1L,3L,6L,1L,4L,1L,188L,7L,1L,1L,2L

	)

1231 
	#SN_idó_ecb
 "IDEA-ECB"

	)

1232 
	#LN_idó_ecb
 "idó-ecb"

	)

1233 
	#NID_idó_ecb
 36

	)

1235 
	#SN_idó_cfb64
 "IDEA-CFB"

	)

1236 
	#LN_idó_cfb64
 "idó-cfb"

	)

1237 
	#NID_idó_cfb64
 35

	)

1239 
	#SN_idó_ofb64
 "IDEA-OFB"

	)

1240 
	#LN_idó_ofb64
 "idó-ofb"

	)

1241 
	#NID_idó_ofb64
 46

	)

1243 
	#SN_bf_cbc
 "BF-CBC"

	)

1244 
	#LN_bf_cbc
 "bf-cbc"

	)

1245 
	#NID_bf_cbc
 91

	)

1246 
	#OBJ_bf_cbc
 1L,3L,6L,1L,4L,1L,3029L,1L,2L

	)

1248 
	#SN_bf_ecb
 "BF-ECB"

	)

1249 
	#LN_bf_ecb
 "bf-ecb"

	)

1250 
	#NID_bf_ecb
 92

	)

1252 
	#SN_bf_cfb64
 "BF-CFB"

	)

1253 
	#LN_bf_cfb64
 "bf-cfb"

	)

1254 
	#NID_bf_cfb64
 93

	)

1256 
	#SN_bf_ofb64
 "BF-OFB"

	)

1257 
	#LN_bf_ofb64
 "bf-ofb"

	)

1258 
	#NID_bf_ofb64
 94

	)

1260 
	#SN_id_pkix
 "PKIX"

	)

1261 
	#NID_id_pkix
 127

	)

1262 
	#OBJ_id_pkix
 1L,3L,6L,1L,5L,5L,7L

	)

1264 
	#SN_id_pkix_mod
 "id-pkix-mod"

	)

1265 
	#NID_id_pkix_mod
 258

	)

1266 
	#OBJ_id_pkix_mod
 
OBJ_id_pkix
,0L

	)

1268 
	#SN_id_≥
 "id-≥"

	)

1269 
	#NID_id_≥
 175

	)

1270 
	#OBJ_id_≥
 
OBJ_id_pkix
,1L

	)

1272 
	#SN_id_qt
 "id-qt"

	)

1273 
	#NID_id_qt
 259

	)

1274 
	#OBJ_id_qt
 
OBJ_id_pkix
,2L

	)

1276 
	#SN_id_kp
 "id-kp"

	)

1277 
	#NID_id_kp
 128

	)

1278 
	#OBJ_id_kp
 
OBJ_id_pkix
,3L

	)

1280 
	#SN_id_ô
 "id-ô"

	)

1281 
	#NID_id_ô
 260

	)

1282 
	#OBJ_id_ô
 
OBJ_id_pkix
,4L

	)

1284 
	#SN_id_pkù
 "id-pkù"

	)

1285 
	#NID_id_pkù
 261

	)

1286 
	#OBJ_id_pkù
 
OBJ_id_pkix
,5L

	)

1288 
	#SN_id_Æg
 "id-Æg"

	)

1289 
	#NID_id_Æg
 262

	)

1290 
	#OBJ_id_Æg
 
OBJ_id_pkix
,6L

	)

1292 
	#SN_id_cmc
 "id-cmc"

	)

1293 
	#NID_id_cmc
 263

	)

1294 
	#OBJ_id_cmc
 
OBJ_id_pkix
,7L

	)

1296 
	#SN_id_⁄
 "id-⁄"

	)

1297 
	#NID_id_⁄
 264

	)

1298 
	#OBJ_id_⁄
 
OBJ_id_pkix
,8L

	)

1300 
	#SN_id_pda
 "id-pda"

	)

1301 
	#NID_id_pda
 265

	)

1302 
	#OBJ_id_pda
 
OBJ_id_pkix
,9L

	)

1304 
	#SN_id_aˇ
 "id-aˇ"

	)

1305 
	#NID_id_aˇ
 266

	)

1306 
	#OBJ_id_aˇ
 
OBJ_id_pkix
,10L

	)

1308 
	#SN_id_qcs
 "id-qcs"

	)

1309 
	#NID_id_qcs
 267

	)

1310 
	#OBJ_id_qcs
 
OBJ_id_pkix
,11L

	)

1312 
	#SN_id_c˘
 "id-c˘"

	)

1313 
	#NID_id_c˘
 268

	)

1314 
	#OBJ_id_c˘
 
OBJ_id_pkix
,12L

	)

1316 
	#SN_id_µl
 "id-µl"

	)

1317 
	#NID_id_µl
 662

	)

1318 
	#OBJ_id_µl
 
OBJ_id_pkix
,21L

	)

1320 
	#SN_id_ad
 "id-ad"

	)

1321 
	#NID_id_ad
 176

	)

1322 
	#OBJ_id_ad
 
OBJ_id_pkix
,48L

	)

1324 
	#SN_id_pkix1_ex∂icô_88
 "id-pkix1-ex∂icô-88"

	)

1325 
	#NID_id_pkix1_ex∂icô_88
 269

	)

1326 
	#OBJ_id_pkix1_ex∂icô_88
 
OBJ_id_pkix_mod
,1L

	)

1328 
	#SN_id_pkix1_im∂icô_88
 "id-pkix1-im∂icô-88"

	)

1329 
	#NID_id_pkix1_im∂icô_88
 270

	)

1330 
	#OBJ_id_pkix1_im∂icô_88
 
OBJ_id_pkix_mod
,2L

	)

1332 
	#SN_id_pkix1_ex∂icô_93
 "id-pkix1-ex∂icô-93"

	)

1333 
	#NID_id_pkix1_ex∂icô_93
 271

	)

1334 
	#OBJ_id_pkix1_ex∂icô_93
 
OBJ_id_pkix_mod
,3L

	)

1336 
	#SN_id_pkix1_im∂icô_93
 "id-pkix1-im∂icô-93"

	)

1337 
	#NID_id_pkix1_im∂icô_93
 272

	)

1338 
	#OBJ_id_pkix1_im∂icô_93
 
OBJ_id_pkix_mod
,4L

	)

1340 
	#SN_id_mod_¸mf
 "id-mod-¸mf"

	)

1341 
	#NID_id_mod_¸mf
 273

	)

1342 
	#OBJ_id_mod_¸mf
 
OBJ_id_pkix_mod
,5L

	)

1344 
	#SN_id_mod_cmc
 "id-mod-cmc"

	)

1345 
	#NID_id_mod_cmc
 274

	)

1346 
	#OBJ_id_mod_cmc
 
OBJ_id_pkix_mod
,6L

	)

1348 
	#SN_id_mod_kó_¥ofûe_88
 "id-mod-kó-¥ofûe-88"

	)

1349 
	#NID_id_mod_kó_¥ofûe_88
 275

	)

1350 
	#OBJ_id_mod_kó_¥ofûe_88
 
OBJ_id_pkix_mod
,7L

	)

1352 
	#SN_id_mod_kó_¥ofûe_93
 "id-mod-kó-¥ofûe-93"

	)

1353 
	#NID_id_mod_kó_¥ofûe_93
 276

	)

1354 
	#OBJ_id_mod_kó_¥ofûe_93
 
OBJ_id_pkix_mod
,8L

	)

1356 
	#SN_id_mod_cmp
 "id-mod-cmp"

	)

1357 
	#NID_id_mod_cmp
 277

	)

1358 
	#OBJ_id_mod_cmp
 
OBJ_id_pkix_mod
,9L

	)

1360 
	#SN_id_mod_quÆifõd_˚π_88
 "id-mod-quÆifõd-˚π-88"

	)

1361 
	#NID_id_mod_quÆifõd_˚π_88
 278

	)

1362 
	#OBJ_id_mod_quÆifõd_˚π_88
 
OBJ_id_pkix_mod
,10L

	)

1364 
	#SN_id_mod_quÆifõd_˚π_93
 "id-mod-quÆifõd-˚π-93"

	)

1365 
	#NID_id_mod_quÆifõd_˚π_93
 279

	)

1366 
	#OBJ_id_mod_quÆifõd_˚π_93
 
OBJ_id_pkix_mod
,11L

	)

1368 
	#SN_id_mod_©åibuã_˚π
 "id-mod-©åibuã-˚π"

	)

1369 
	#NID_id_mod_©åibuã_˚π
 280

	)

1370 
	#OBJ_id_mod_©åibuã_˚π
 
OBJ_id_pkix_mod
,12L

	)

1372 
	#SN_id_mod_time°amp_¥Ÿocﬁ
 "id-mod-time°amp-¥Ÿocﬁ"

	)

1373 
	#NID_id_mod_time°amp_¥Ÿocﬁ
 281

	)

1374 
	#OBJ_id_mod_time°amp_¥Ÿocﬁ
 
OBJ_id_pkix_mod
,13L

	)

1376 
	#SN_id_mod_oc•
 "id-mod-oc•"

	)

1377 
	#NID_id_mod_oc•
 282

	)

1378 
	#OBJ_id_mod_oc•
 
OBJ_id_pkix_mod
,14L

	)

1380 
	#SN_id_mod_dvcs
 "id-mod-dvcs"

	)

1381 
	#NID_id_mod_dvcs
 283

	)

1382 
	#OBJ_id_mod_dvcs
 
OBJ_id_pkix_mod
,15L

	)

1384 
	#SN_id_mod_cmp2000
 "id-mod-cmp2000"

	)

1385 
	#NID_id_mod_cmp2000
 284

	)

1386 
	#OBJ_id_mod_cmp2000
 
OBJ_id_pkix_mod
,16L

	)

1388 
	#SN_öfo_ac˚ss
 "auth‹ôyInfoAc˚ss"

	)

1389 
	#LN_öfo_ac˚ss
 "Auth‹ôy Inf‹m©i⁄ Ac˚ss"

	)

1390 
	#NID_öfo_ac˚ss
 177

	)

1391 
	#OBJ_öfo_ac˚ss
 
OBJ_id_≥
,1L

	)

1393 
	#SN_biomëricInfo
 "biomëricInfo"

	)

1394 
	#LN_biomëricInfo
 "Biomëri¯Info"

	)

1395 
	#NID_biomëricInfo
 285

	)

1396 
	#OBJ_biomëricInfo
 
OBJ_id_≥
,2L

	)

1398 
	#SN_qcSèãmíts
 "qcSèãmíts"

	)

1399 
	#NID_qcSèãmíts
 286

	)

1400 
	#OBJ_qcSèãmíts
 
OBJ_id_≥
,3L

	)

1402 
	#SN_ac_audôE¡ôy
 "ac-audôE¡ôy"

	)

1403 
	#NID_ac_audôE¡ôy
 287

	)

1404 
	#OBJ_ac_audôE¡ôy
 
OBJ_id_≥
,4L

	)

1406 
	#SN_ac_èrgëög
 "ac-èrgëög"

	)

1407 
	#NID_ac_èrgëög
 288

	)

1408 
	#OBJ_ac_èrgëög
 
OBJ_id_≥
,5L

	)

1410 
	#SN_ØC⁄åﬁs
 "ØC⁄åﬁs"

	)

1411 
	#NID_ØC⁄åﬁs
 289

	)

1412 
	#OBJ_ØC⁄åﬁs
 
OBJ_id_≥
,6L

	)

1414 
	#SN_sbgp_ùAddrBlock
 "sbgp-ùAddrBlock"

	)

1415 
	#NID_sbgp_ùAddrBlock
 290

	)

1416 
	#OBJ_sbgp_ùAddrBlock
 
OBJ_id_≥
,7L

	)

1418 
	#SN_sbgp_aut⁄omousSysNum
 "sbgp-aut⁄omousSysNum"

	)

1419 
	#NID_sbgp_aut⁄omousSysNum
 291

	)

1420 
	#OBJ_sbgp_aut⁄omousSysNum
 
OBJ_id_≥
,8L

	)

1422 
	#SN_sbgp_rouãrIdítifõr
 "sbgp-rouãrIdítifõr"

	)

1423 
	#NID_sbgp_rouãrIdítifõr
 292

	)

1424 
	#OBJ_sbgp_rouãrIdítifõr
 
OBJ_id_≥
,9L

	)

1426 
	#SN_ac_¥oxyög
 "ac-¥oxyög"

	)

1427 
	#NID_ac_¥oxyög
 397

	)

1428 
	#OBJ_ac_¥oxyög
 
OBJ_id_≥
,10L

	)

1430 
	#SN_söfo_ac˚ss
 "subje˘InfoAc˚ss"

	)

1431 
	#LN_söfo_ac˚ss
 "Subje˘ Inf‹m©i⁄ Ac˚ss"

	)

1432 
	#NID_söfo_ac˚ss
 398

	)

1433 
	#OBJ_söfo_ac˚ss
 
OBJ_id_≥
,11L

	)

1435 
	#SN_¥oxyCîtInfo
 "¥oxyCîtInfo"

	)

1436 
	#LN_¥oxyCîtInfo
 "Proxy Cîtifiˇã Inf‹m©i⁄"

	)

1437 
	#NID_¥oxyCîtInfo
 663

	)

1438 
	#OBJ_¥oxyCîtInfo
 
OBJ_id_≥
,14L

	)

1440 
	#SN_és„©uª
 "és„©uª"

	)

1441 
	#LN_és„©uª
 "TLS Fótuª"

	)

1442 
	#NID_és„©uª
 1020

	)

1443 
	#OBJ_és„©uª
 
OBJ_id_≥
,24L

	)

1445 
	#SN_id_qt_˝s
 "id-qt-˝s"

	)

1446 
	#LN_id_qt_˝s
 "Pﬁicy QuÆifõ∏CPS"

	)

1447 
	#NID_id_qt_˝s
 164

	)

1448 
	#OBJ_id_qt_˝s
 
OBJ_id_qt
,1L

	)

1450 
	#SN_id_qt_unŸi˚
 "id-qt-unŸi˚"

	)

1451 
	#LN_id_qt_unŸi˚
 "Pﬁicy QuÆifõ∏U£∏NŸi˚"

	)

1452 
	#NID_id_qt_unŸi˚
 165

	)

1453 
	#OBJ_id_qt_unŸi˚
 
OBJ_id_qt
,2L

	)

1455 
	#SN_ãxtNŸi˚
 "ãxtNŸi˚"

	)

1456 
	#NID_ãxtNŸi˚
 293

	)

1457 
	#OBJ_ãxtNŸi˚
 
OBJ_id_qt
,3L

	)

1459 
	#SN_£rvî_auth
 "£rvîAuth"

	)

1460 
	#LN_£rvî_auth
 "TLS Web Sîvî Authítiˇti⁄"

	)

1461 
	#NID_£rvî_auth
 129

	)

1462 
	#OBJ_£rvî_auth
 
OBJ_id_kp
,1L

	)

1464 
	#SN_˛õ¡_auth
 "˛õ¡Auth"

	)

1465 
	#LN_˛õ¡_auth
 "TLS Web Clõ¡ Authítiˇti⁄"

	)

1466 
	#NID_˛õ¡_auth
 130

	)

1467 
	#OBJ_˛õ¡_auth
 
OBJ_id_kp
,2L

	)

1469 
	#SN_code_sign
 "codeSignög"

	)

1470 
	#LN_code_sign
 "CodêSignög"

	)

1471 
	#NID_code_sign
 131

	)

1472 
	#OBJ_code_sign
 
OBJ_id_kp
,3L

	)

1474 
	#SN_emaû_¥Ÿe˘
 "emaûPrŸe˘i⁄"

	)

1475 
	#LN_emaû_¥Ÿe˘
 "E-maû PrŸe˘i⁄"

	)

1476 
	#NID_emaû_¥Ÿe˘
 132

	)

1477 
	#OBJ_emaû_¥Ÿe˘
 
OBJ_id_kp
,4L

	)

1479 
	#SN_ù£cEndSy°em
 "ù£cEndSy°em"

	)

1480 
	#LN_ù£cEndSy°em
 "IPSe¯End Sy°em"

	)

1481 
	#NID_ù£cEndSy°em
 294

	)

1482 
	#OBJ_ù£cEndSy°em
 
OBJ_id_kp
,5L

	)

1484 
	#SN_ù£cTu¬ñ
 "ù£cTu¬ñ"

	)

1485 
	#LN_ù£cTu¬ñ
 "IPSe¯Tu¬ñ"

	)

1486 
	#NID_ù£cTu¬ñ
 295

	)

1487 
	#OBJ_ù£cTu¬ñ
 
OBJ_id_kp
,6L

	)

1489 
	#SN_ù£cU£r
 "ù£cU£r"

	)

1490 
	#LN_ù£cU£r
 "IPSe¯U£r"

	)

1491 
	#NID_ù£cU£r
 296

	)

1492 
	#OBJ_ù£cU£r
 
OBJ_id_kp
,7L

	)

1494 
	#SN_time_°amp
 "timeSèmpög"

	)

1495 
	#LN_time_°amp
 "TimêSèmpög"

	)

1496 
	#NID_time_°amp
 133

	)

1497 
	#OBJ_time_°amp
 
OBJ_id_kp
,8L

	)

1499 
	#SN_OCSP_sign
 "OCSPSignög"

	)

1500 
	#LN_OCSP_sign
 "OCSP Signög"

	)

1501 
	#NID_OCSP_sign
 180

	)

1502 
	#OBJ_OCSP_sign
 
OBJ_id_kp
,9L

	)

1504 
	#SN_dvcs
 "DVCS"

	)

1505 
	#LN_dvcs
 "dvcs"

	)

1506 
	#NID_dvcs
 297

	)

1507 
	#OBJ_dvcs
 
OBJ_id_kp
,10L

	)

1509 
	#SN_ù£c_IKE
 "ù£cIKE"

	)

1510 
	#LN_ù£c_IKE
 "ù£¯I¡î√àKey Exch™ge"

	)

1511 
	#NID_ù£c_IKE
 1022

	)

1512 
	#OBJ_ù£c_IKE
 
OBJ_id_kp
,17L

	)

1514 
	#SN_ˇpw≠AC
 "ˇpw≠AC"

	)

1515 
	#LN_ˇpw≠AC
 "Cål/¥ovisi⁄ WAP Ac˚ss"

	)

1516 
	#NID_ˇpw≠AC
 1023

	)

1517 
	#OBJ_ˇpw≠AC
 
OBJ_id_kp
,18L

	)

1519 
	#SN_ˇpw≠WTP
 "ˇpw≠WTP"

	)

1520 
	#LN_ˇpw≠WTP
 "Cål/Provisi⁄ WAP Tîmö©i⁄"

	)

1521 
	#NID_ˇpw≠WTP
 1024

	)

1522 
	#OBJ_ˇpw≠WTP
 
OBJ_id_kp
,19L

	)

1524 
	#SN_sshClõ¡
 "£cuªShñlClõ¡"

	)

1525 
	#LN_sshClõ¡
 "SSH Clõ¡"

	)

1526 
	#NID_sshClõ¡
 1025

	)

1527 
	#OBJ_sshClõ¡
 
OBJ_id_kp
,21L

	)

1529 
	#SN_sshSîvî
 "£cuªShñlSîvî"

	)

1530 
	#LN_sshSîvî
 "SSH Sîvî"

	)

1531 
	#NID_sshSîvî
 1026

	)

1532 
	#OBJ_sshSîvî
 
OBJ_id_kp
,22L

	)

1534 
	#SN_£ndRouãr
 "£ndRouãr"

	)

1535 
	#LN_£ndRouãr
 "Síd Rouãr"

	)

1536 
	#NID_£ndRouãr
 1027

	)

1537 
	#OBJ_£ndRouãr
 
OBJ_id_kp
,23L

	)

1539 
	#SN_£ndProxõdRouãr
 "£ndProxõdRouãr"

	)

1540 
	#LN_£ndProxõdRouãr
 "Síd Proxõd Rouãr"

	)

1541 
	#NID_£ndProxõdRouãr
 1028

	)

1542 
	#OBJ_£ndProxõdRouãr
 
OBJ_id_kp
,24L

	)

1544 
	#SN_£ndOw√r
 "£ndOw√r"

	)

1545 
	#LN_£ndOw√r
 "Síd Ow√r"

	)

1546 
	#NID_£ndOw√r
 1029

	)

1547 
	#OBJ_£ndOw√r
 
OBJ_id_kp
,25L

	)

1549 
	#SN_£ndProxõdOw√r
 "£ndProxõdOw√r"

	)

1550 
	#LN_£ndProxõdOw√r
 "Síd Proxõd Ow√r"

	)

1551 
	#NID_£ndProxõdOw√r
 1030

	)

1552 
	#OBJ_£ndProxõdOw√r
 
OBJ_id_kp
,26L

	)

1554 
	#SN_id_ô_ˇPrŸEncCît
 "id-ô-ˇPrŸEncCît"

	)

1555 
	#NID_id_ô_ˇPrŸEncCît
 298

	)

1556 
	#OBJ_id_ô_ˇPrŸEncCît
 
OBJ_id_ô
,1L

	)

1558 
	#SN_id_ô_signKeyPaúTy≥s
 "id-ô-signKeyPaúTy≥s"

	)

1559 
	#NID_id_ô_signKeyPaúTy≥s
 299

	)

1560 
	#OBJ_id_ô_signKeyPaúTy≥s
 
OBJ_id_ô
,2L

	)

1562 
	#SN_id_ô_ícKeyPaúTy≥s
 "id-ô-ícKeyPaúTy≥s"

	)

1563 
	#NID_id_ô_ícKeyPaúTy≥s
 300

	)

1564 
	#OBJ_id_ô_ícKeyPaúTy≥s
 
OBJ_id_ô
,3L

	)

1566 
	#SN_id_ô_¥e„ºedSymmAlg
 "id-ô-¥e„ºedSymmAlg"

	)

1567 
	#NID_id_ô_¥e„ºedSymmAlg
 301

	)

1568 
	#OBJ_id_ô_¥e„ºedSymmAlg
 
OBJ_id_ô
,4L

	)

1570 
	#SN_id_ô_ˇKeyUpd©eInfo
 "id-ô-ˇKeyUpd©eInfo"

	)

1571 
	#NID_id_ô_ˇKeyUpd©eInfo
 302

	)

1572 
	#OBJ_id_ô_ˇKeyUpd©eInfo
 
OBJ_id_ô
,5L

	)

1574 
	#SN_id_ô_cuºítCRL
 "id-ô-cuºítCRL"

	)

1575 
	#NID_id_ô_cuºítCRL
 303

	)

1576 
	#OBJ_id_ô_cuºítCRL
 
OBJ_id_ô
,6L

	)

1578 
	#SN_id_ô_unsuµ‹ãdOIDs
 "id-ô-unsuµ‹ãdOIDs"

	)

1579 
	#NID_id_ô_unsuµ‹ãdOIDs
 304

	)

1580 
	#OBJ_id_ô_unsuµ‹ãdOIDs
 
OBJ_id_ô
,7L

	)

1582 
	#SN_id_ô_subs¸ùti⁄Reque°
 "id-ô-subs¸ùti⁄Reque°"

	)

1583 
	#NID_id_ô_subs¸ùti⁄Reque°
 305

	)

1584 
	#OBJ_id_ô_subs¸ùti⁄Reque°
 
OBJ_id_ô
,8L

	)

1586 
	#SN_id_ô_subs¸ùti⁄Re•⁄£
 "id-ô-subs¸ùti⁄Re•⁄£"

	)

1587 
	#NID_id_ô_subs¸ùti⁄Re•⁄£
 306

	)

1588 
	#OBJ_id_ô_subs¸ùti⁄Re•⁄£
 
OBJ_id_ô
,9L

	)

1590 
	#SN_id_ô_keyPaúP¨amReq
 "id-ô-keyPaúP¨amReq"

	)

1591 
	#NID_id_ô_keyPaúP¨amReq
 307

	)

1592 
	#OBJ_id_ô_keyPaúP¨amReq
 
OBJ_id_ô
,10L

	)

1594 
	#SN_id_ô_keyPaúP¨amRï
 "id-ô-keyPaúP¨amRï"

	)

1595 
	#NID_id_ô_keyPaúP¨amRï
 308

	)

1596 
	#OBJ_id_ô_keyPaúP¨amRï
 
OBJ_id_ô
,11L

	)

1598 
	#SN_id_ô_ªvPas•hø£
 "id-ô-ªvPas•hø£"

	)

1599 
	#NID_id_ô_ªvPas•hø£
 309

	)

1600 
	#OBJ_id_ô_ªvPas•hø£
 
OBJ_id_ô
,12L

	)

1602 
	#SN_id_ô_im∂icôC⁄fúm
 "id-ô-im∂icôC⁄fúm"

	)

1603 
	#NID_id_ô_im∂icôC⁄fúm
 310

	)

1604 
	#OBJ_id_ô_im∂icôC⁄fúm
 
OBJ_id_ô
,13L

	)

1606 
	#SN_id_ô_c⁄fúmWaôTime
 "id-ô-c⁄fúmWaôTime"

	)

1607 
	#NID_id_ô_c⁄fúmWaôTime
 311

	)

1608 
	#OBJ_id_ô_c⁄fúmWaôTime
 
OBJ_id_ô
,14L

	)

1610 
	#SN_id_ô_‹igPKIMesßge
 "id-ô-‹igPKIMesßge"

	)

1611 
	#NID_id_ô_‹igPKIMesßge
 312

	)

1612 
	#OBJ_id_ô_‹igPKIMesßge
 
OBJ_id_ô
,15L

	)

1614 
	#SN_id_ô_suµL™gTags
 "id-ô-suµL™gTags"

	)

1615 
	#NID_id_ô_suµL™gTags
 784

	)

1616 
	#OBJ_id_ô_suµL™gTags
 
OBJ_id_ô
,16L

	)

1618 
	#SN_id_ªgCål
 "id-ªgCål"

	)

1619 
	#NID_id_ªgCål
 313

	)

1620 
	#OBJ_id_ªgCål
 
OBJ_id_pkù
,1L

	)

1622 
	#SN_id_ªgInfo
 "id-ªgInfo"

	)

1623 
	#NID_id_ªgInfo
 314

	)

1624 
	#OBJ_id_ªgInfo
 
OBJ_id_pkù
,2L

	)

1626 
	#SN_id_ªgCål_ªgTokí
 "id-ªgCål-ªgTokí"

	)

1627 
	#NID_id_ªgCål_ªgTokí
 315

	)

1628 
	#OBJ_id_ªgCål_ªgTokí
 
OBJ_id_ªgCål
,1L

	)

1630 
	#SN_id_ªgCål_authítiˇt‹
 "id-ªgCål-authítiˇt‹"

	)

1631 
	#NID_id_ªgCål_authítiˇt‹
 316

	)

1632 
	#OBJ_id_ªgCål_authítiˇt‹
 
OBJ_id_ªgCål
,2L

	)

1634 
	#SN_id_ªgCål_pkiPubliˇti⁄Info
 "id-ªgCål-pkiPubliˇti⁄Info"

	)

1635 
	#NID_id_ªgCål_pkiPubliˇti⁄Info
 317

	)

1636 
	#OBJ_id_ªgCål_pkiPubliˇti⁄Info
 
OBJ_id_ªgCål
,3L

	)

1638 
	#SN_id_ªgCål_pkiArchiveO±i⁄s
 "id-ªgCål-pkiArchiveO±i⁄s"

	)

1639 
	#NID_id_ªgCål_pkiArchiveO±i⁄s
 318

	)

1640 
	#OBJ_id_ªgCål_pkiArchiveO±i⁄s
 
OBJ_id_ªgCål
,4L

	)

1642 
	#SN_id_ªgCål_ﬁdCîtID
 "id-ªgCål-ﬁdCîtID"

	)

1643 
	#NID_id_ªgCål_ﬁdCîtID
 319

	)

1644 
	#OBJ_id_ªgCål_ﬁdCîtID
 
OBJ_id_ªgCål
,5L

	)

1646 
	#SN_id_ªgCål_¥ŸocﬁEn¸Key
 "id-ªgCål-¥ŸocﬁEn¸Key"

	)

1647 
	#NID_id_ªgCål_¥ŸocﬁEn¸Key
 320

	)

1648 
	#OBJ_id_ªgCål_¥ŸocﬁEn¸Key
 
OBJ_id_ªgCål
,6L

	)

1650 
	#SN_id_ªgInfo_utf8Paús
 "id-ªgInfo-utf8Paús"

	)

1651 
	#NID_id_ªgInfo_utf8Paús
 321

	)

1652 
	#OBJ_id_ªgInfo_utf8Paús
 
OBJ_id_ªgInfo
,1L

	)

1654 
	#SN_id_ªgInfo_˚πReq
 "id-ªgInfo-˚πReq"

	)

1655 
	#NID_id_ªgInfo_˚πReq
 322

	)

1656 
	#OBJ_id_ªgInfo_˚πReq
 
OBJ_id_ªgInfo
,2L

	)

1658 
	#SN_id_Æg_des40
 "id-Æg-des40"

	)

1659 
	#NID_id_Æg_des40
 323

	)

1660 
	#OBJ_id_Æg_des40
 
OBJ_id_Æg
,1L

	)

1662 
	#SN_id_Æg_noSig«tuª
 "id-Æg-noSig«tuª"

	)

1663 
	#NID_id_Æg_noSig«tuª
 324

	)

1664 
	#OBJ_id_Æg_noSig«tuª
 
OBJ_id_Æg
,2L

	)

1666 
	#SN_id_Æg_dh_sig_hmac_sha1
 "id-Æg-dh-sig-hmac-sha1"

	)

1667 
	#NID_id_Æg_dh_sig_hmac_sha1
 325

	)

1668 
	#OBJ_id_Æg_dh_sig_hmac_sha1
 
OBJ_id_Æg
,3L

	)

1670 
	#SN_id_Æg_dh_p›
 "id-Æg-dh-p›"

	)

1671 
	#NID_id_Æg_dh_p›
 326

	)

1672 
	#OBJ_id_Æg_dh_p›
 
OBJ_id_Æg
,4L

	)

1674 
	#SN_id_cmc_°©usInfo
 "id-cmc-°©usInfo"

	)

1675 
	#NID_id_cmc_°©usInfo
 327

	)

1676 
	#OBJ_id_cmc_°©usInfo
 
OBJ_id_cmc
,1L

	)

1678 
	#SN_id_cmc_idítifiˇti⁄
 "id-cmc-idítifiˇti⁄"

	)

1679 
	#NID_id_cmc_idítifiˇti⁄
 328

	)

1680 
	#OBJ_id_cmc_idítifiˇti⁄
 
OBJ_id_cmc
,2L

	)

1682 
	#SN_id_cmc_idítôyProof
 "id-cmc-idítôyProof"

	)

1683 
	#NID_id_cmc_idítôyProof
 329

	)

1684 
	#OBJ_id_cmc_idítôyProof
 
OBJ_id_cmc
,3L

	)

1686 
	#SN_id_cmc_d©aRëu∫
 "id-cmc-d©aRëu∫"

	)

1687 
	#NID_id_cmc_d©aRëu∫
 330

	)

1688 
	#OBJ_id_cmc_d©aRëu∫
 
OBJ_id_cmc
,4L

	)

1690 
	#SN_id_cmc_å™ß˘i⁄Id
 "id-cmc-å™ß˘i⁄Id"

	)

1691 
	#NID_id_cmc_å™ß˘i⁄Id
 331

	)

1692 
	#OBJ_id_cmc_å™ß˘i⁄Id
 
OBJ_id_cmc
,5L

	)

1694 
	#SN_id_cmc_£ndîN⁄˚
 "id-cmc-£ndîN⁄˚"

	)

1695 
	#NID_id_cmc_£ndîN⁄˚
 332

	)

1696 
	#OBJ_id_cmc_£ndîN⁄˚
 
OBJ_id_cmc
,6L

	)

1698 
	#SN_id_cmc_ªcùõ¡N⁄˚
 "id-cmc-ªcùõ¡N⁄˚"

	)

1699 
	#NID_id_cmc_ªcùõ¡N⁄˚
 333

	)

1700 
	#OBJ_id_cmc_ªcùõ¡N⁄˚
 
OBJ_id_cmc
,7L

	)

1702 
	#SN_id_cmc_addExãnsi⁄s
 "id-cmc-addExãnsi⁄s"

	)

1703 
	#NID_id_cmc_addExãnsi⁄s
 334

	)

1704 
	#OBJ_id_cmc_addExãnsi⁄s
 
OBJ_id_cmc
,8L

	)

1706 
	#SN_id_cmc_í¸y±edPOP
 "id-cmc-í¸y±edPOP"

	)

1707 
	#NID_id_cmc_í¸y±edPOP
 335

	)

1708 
	#OBJ_id_cmc_í¸y±edPOP
 
OBJ_id_cmc
,9L

	)

1710 
	#SN_id_cmc_de¸y±edPOP
 "id-cmc-de¸y±edPOP"

	)

1711 
	#NID_id_cmc_de¸y±edPOP
 336

	)

1712 
	#OBJ_id_cmc_de¸y±edPOP
 
OBJ_id_cmc
,10L

	)

1714 
	#SN_id_cmc_ÃaPOPWô√ss
 "id-cmc-ÃaPOPWô√ss"

	)

1715 
	#NID_id_cmc_ÃaPOPWô√ss
 337

	)

1716 
	#OBJ_id_cmc_ÃaPOPWô√ss
 
OBJ_id_cmc
,11L

	)

1718 
	#SN_id_cmc_gëCît
 "id-cmc-gëCît"

	)

1719 
	#NID_id_cmc_gëCît
 338

	)

1720 
	#OBJ_id_cmc_gëCît
 
OBJ_id_cmc
,15L

	)

1722 
	#SN_id_cmc_gëCRL
 "id-cmc-gëCRL"

	)

1723 
	#NID_id_cmc_gëCRL
 339

	)

1724 
	#OBJ_id_cmc_gëCRL
 
OBJ_id_cmc
,16L

	)

1726 
	#SN_id_cmc_ªvokeReque°
 "id-cmc-ªvokeReque°"

	)

1727 
	#NID_id_cmc_ªvokeReque°
 340

	)

1728 
	#OBJ_id_cmc_ªvokeReque°
 
OBJ_id_cmc
,17L

	)

1730 
	#SN_id_cmc_ªgInfo
 "id-cmc-ªgInfo"

	)

1731 
	#NID_id_cmc_ªgInfo
 341

	)

1732 
	#OBJ_id_cmc_ªgInfo
 
OBJ_id_cmc
,18L

	)

1734 
	#SN_id_cmc_ª•⁄£Info
 "id-cmc-ª•⁄£Info"

	)

1735 
	#NID_id_cmc_ª•⁄£Info
 342

	)

1736 
	#OBJ_id_cmc_ª•⁄£Info
 
OBJ_id_cmc
,19L

	)

1738 
	#SN_id_cmc_quîyPídög
 "id-cmc-quîyPídög"

	)

1739 
	#NID_id_cmc_quîyPídög
 343

	)

1740 
	#OBJ_id_cmc_quîyPídög
 
OBJ_id_cmc
,21L

	)

1742 
	#SN_id_cmc_p›LökR™dom
 "id-cmc-p›LökR™dom"

	)

1743 
	#NID_id_cmc_p›LökR™dom
 344

	)

1744 
	#OBJ_id_cmc_p›LökR™dom
 
OBJ_id_cmc
,22L

	)

1746 
	#SN_id_cmc_p›LökWô√ss
 "id-cmc-p›LökWô√ss"

	)

1747 
	#NID_id_cmc_p›LökWô√ss
 345

	)

1748 
	#OBJ_id_cmc_p›LökWô√ss
 
OBJ_id_cmc
,23L

	)

1750 
	#SN_id_cmc_c⁄fúmCîtAc˚±™˚
 "id-cmc-c⁄fúmCîtAc˚±™˚"

	)

1751 
	#NID_id_cmc_c⁄fúmCîtAc˚±™˚
 346

	)

1752 
	#OBJ_id_cmc_c⁄fúmCîtAc˚±™˚
 
OBJ_id_cmc
,24L

	)

1754 
	#SN_id_⁄_≥rs⁄ÆD©a
 "id-⁄-≥rs⁄ÆD©a"

	)

1755 
	#NID_id_⁄_≥rs⁄ÆD©a
 347

	)

1756 
	#OBJ_id_⁄_≥rs⁄ÆD©a
 
OBJ_id_⁄
,1L

	)

1758 
	#SN_id_⁄_≥rm™ítIdítifõr
 "id-⁄-≥rm™ítIdítifõr"

	)

1759 
	#LN_id_⁄_≥rm™ítIdítifõr
 "Pîm™íàIdítifõr"

	)

1760 
	#NID_id_⁄_≥rm™ítIdítifõr
 858

	)

1761 
	#OBJ_id_⁄_≥rm™ítIdítifõr
 
OBJ_id_⁄
,3L

	)

1763 
	#SN_id_pda_d©eOfBúth
 "id-pda-d©eOfBúth"

	)

1764 
	#NID_id_pda_d©eOfBúth
 348

	)

1765 
	#OBJ_id_pda_d©eOfBúth
 
OBJ_id_pda
,1L

	)

1767 
	#SN_id_pda_∂a˚OfBúth
 "id-pda-∂a˚OfBúth"

	)

1768 
	#NID_id_pda_∂a˚OfBúth
 349

	)

1769 
	#OBJ_id_pda_∂a˚OfBúth
 
OBJ_id_pda
,2L

	)

1771 
	#SN_id_pda_gídî
 "id-pda-gídî"

	)

1772 
	#NID_id_pda_gídî
 351

	)

1773 
	#OBJ_id_pda_gídî
 
OBJ_id_pda
,3L

	)

1775 
	#SN_id_pda_cou¡ryOfCôizíshù
 "id-pda-cou¡ryOfCôizíshù"

	)

1776 
	#NID_id_pda_cou¡ryOfCôizíshù
 352

	)

1777 
	#OBJ_id_pda_cou¡ryOfCôizíshù
 
OBJ_id_pda
,4L

	)

1779 
	#SN_id_pda_cou¡ryOfResidí˚
 "id-pda-cou¡ryOfResidí˚"

	)

1780 
	#NID_id_pda_cou¡ryOfResidí˚
 353

	)

1781 
	#OBJ_id_pda_cou¡ryOfResidí˚
 
OBJ_id_pda
,5L

	)

1783 
	#SN_id_aˇ_authítiˇti⁄Info
 "id-aˇ-authítiˇti⁄Info"

	)

1784 
	#NID_id_aˇ_authítiˇti⁄Info
 354

	)

1785 
	#OBJ_id_aˇ_authítiˇti⁄Info
 
OBJ_id_aˇ
,1L

	)

1787 
	#SN_id_aˇ_ac˚ssIdítôy
 "id-aˇ-ac˚ssIdítôy"

	)

1788 
	#NID_id_aˇ_ac˚ssIdítôy
 355

	)

1789 
	#OBJ_id_aˇ_ac˚ssIdítôy
 
OBJ_id_aˇ
,2L

	)

1791 
	#SN_id_aˇ_ch¨gögIdítôy
 "id-aˇ-ch¨gögIdítôy"

	)

1792 
	#NID_id_aˇ_ch¨gögIdítôy
 356

	)

1793 
	#OBJ_id_aˇ_ch¨gögIdítôy
 
OBJ_id_aˇ
,3L

	)

1795 
	#SN_id_aˇ_group
 "id-aˇ-group"

	)

1796 
	#NID_id_aˇ_group
 357

	)

1797 
	#OBJ_id_aˇ_group
 
OBJ_id_aˇ
,4L

	)

1799 
	#SN_id_aˇ_rﬁe
 "id-aˇ-rﬁe"

	)

1800 
	#NID_id_aˇ_rﬁe
 358

	)

1801 
	#OBJ_id_aˇ_rﬁe
 
OBJ_id_aˇ
,5L

	)

1803 
	#SN_id_aˇ_ícAârs
 "id-aˇ-ícAârs"

	)

1804 
	#NID_id_aˇ_ícAârs
 399

	)

1805 
	#OBJ_id_aˇ_ícAârs
 
OBJ_id_aˇ
,6L

	)

1807 
	#SN_id_qcs_pkixQCSy¡ax_v1
 "id-qcs-pkixQCSy¡ax-v1"

	)

1808 
	#NID_id_qcs_pkixQCSy¡ax_v1
 359

	)

1809 
	#OBJ_id_qcs_pkixQCSy¡ax_v1
 
OBJ_id_qcs
,1L

	)

1811 
	#SN_id_c˘_¸s
 "id-c˘-¸s"

	)

1812 
	#NID_id_c˘_¸s
 360

	)

1813 
	#OBJ_id_c˘_¸s
 
OBJ_id_c˘
,1L

	)

1815 
	#SN_id_c˘_PKID©a
 "id-c˘-PKID©a"

	)

1816 
	#NID_id_c˘_PKID©a
 361

	)

1817 
	#OBJ_id_c˘_PKID©a
 
OBJ_id_c˘
,2L

	)

1819 
	#SN_id_c˘_PKIRe•⁄£
 "id-c˘-PKIRe•⁄£"

	)

1820 
	#NID_id_c˘_PKIRe•⁄£
 362

	)

1821 
	#OBJ_id_c˘_PKIRe•⁄£
 
OBJ_id_c˘
,3L

	)

1823 
	#SN_id_µl_™yL™guage
 "id-µl-™yL™guage"

	)

1824 
	#LN_id_µl_™yL™guage
 "AnyÜ™guage"

	)

1825 
	#NID_id_µl_™yL™guage
 664

	)

1826 
	#OBJ_id_µl_™yL™guage
 
OBJ_id_µl
,0L

	)

1828 
	#SN_id_µl_öhîôAŒ
 "id-µl-öhîôAŒ"

	)

1829 
	#LN_id_µl_öhîôAŒ
 "InhîôáŒ"

	)

1830 
	#NID_id_µl_öhîôAŒ
 665

	)

1831 
	#OBJ_id_µl_öhîôAŒ
 
OBJ_id_µl
,1L

	)

1833 
	#SN_Indïídít
 "id-µl-ödïídít"

	)

1834 
	#LN_Indïídít
 "Indïídít"

	)

1835 
	#NID_Indïídít
 667

	)

1836 
	#OBJ_Indïídít
 
OBJ_id_µl
,2L

	)

1838 
	#SN_ad_OCSP
 "OCSP"

	)

1839 
	#LN_ad_OCSP
 "OCSP"

	)

1840 
	#NID_ad_OCSP
 178

	)

1841 
	#OBJ_ad_OCSP
 
OBJ_id_ad
,1L

	)

1843 
	#SN_ad_ˇ_issuîs
 "ˇIssuîs"

	)

1844 
	#LN_ad_ˇ_issuîs
 "CA Issuîs"

	)

1845 
	#NID_ad_ˇ_issuîs
 179

	)

1846 
	#OBJ_ad_ˇ_issuîs
 
OBJ_id_ad
,2L

	)

1848 
	#SN_ad_timeSèmpög
 "ad_time°ampög"

	)

1849 
	#LN_ad_timeSèmpög
 "AD TimêSèmpög"

	)

1850 
	#NID_ad_timeSèmpög
 363

	)

1851 
	#OBJ_ad_timeSèmpög
 
OBJ_id_ad
,3L

	)

1853 
	#SN_ad_dvcs
 "AD_DVCS"

	)

1854 
	#LN_ad_dvcs
 "ad dvcs"

	)

1855 
	#NID_ad_dvcs
 364

	)

1856 
	#OBJ_ad_dvcs
 
OBJ_id_ad
,4L

	)

1858 
	#SN_ˇRïosô‹y
 "ˇRïosô‹y"

	)

1859 
	#LN_ˇRïosô‹y
 "CA Rïosô‹y"

	)

1860 
	#NID_ˇRïosô‹y
 785

	)

1861 
	#OBJ_ˇRïosô‹y
 
OBJ_id_ad
,5L

	)

1863 
	#OBJ_id_pkix_OCSP
 
OBJ_ad_OCSP


	)

1865 
	#SN_id_pkix_OCSP_basic
 "basicOCSPRe•⁄£"

	)

1866 
	#LN_id_pkix_OCSP_basic
 "Basi¯OCSP Re•⁄£"

	)

1867 
	#NID_id_pkix_OCSP_basic
 365

	)

1868 
	#OBJ_id_pkix_OCSP_basic
 
OBJ_id_pkix_OCSP
,1L

	)

1870 
	#SN_id_pkix_OCSP_N⁄˚
 "N⁄˚"

	)

1871 
	#LN_id_pkix_OCSP_N⁄˚
 "OCSP N⁄˚"

	)

1872 
	#NID_id_pkix_OCSP_N⁄˚
 366

	)

1873 
	#OBJ_id_pkix_OCSP_N⁄˚
 
OBJ_id_pkix_OCSP
,2L

	)

1875 
	#SN_id_pkix_OCSP_CæID
 "CæID"

	)

1876 
	#LN_id_pkix_OCSP_CæID
 "OCSP CRL ID"

	)

1877 
	#NID_id_pkix_OCSP_CæID
 367

	)

1878 
	#OBJ_id_pkix_OCSP_CæID
 
OBJ_id_pkix_OCSP
,3L

	)

1880 
	#SN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "ac˚±abÀRe•⁄£s"

	)

1881 
	#LN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "Ac˚±abÀ OCSP Re•⁄£s"

	)

1882 
	#NID_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 368

	)

1883 
	#OBJ_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 
OBJ_id_pkix_OCSP
,4L

	)

1885 
	#SN_id_pkix_OCSP_noCheck
 "noCheck"

	)

1886 
	#LN_id_pkix_OCSP_noCheck
 "OCSP NÿCheck"

	)

1887 
	#NID_id_pkix_OCSP_noCheck
 369

	)

1888 
	#OBJ_id_pkix_OCSP_noCheck
 
OBJ_id_pkix_OCSP
,5L

	)

1890 
	#SN_id_pkix_OCSP_¨chiveCutoff
 "¨chiveCutoff"

	)

1891 
	#LN_id_pkix_OCSP_¨chiveCutoff
 "OCSP ArchivêCutoff"

	)

1892 
	#NID_id_pkix_OCSP_¨chiveCutoff
 370

	)

1893 
	#OBJ_id_pkix_OCSP_¨chiveCutoff
 
OBJ_id_pkix_OCSP
,6L

	)

1895 
	#SN_id_pkix_OCSP_£rvi˚Loˇt‹
 "£rvi˚Loˇt‹"

	)

1896 
	#LN_id_pkix_OCSP_£rvi˚Loˇt‹
 "OCSP Sîvi˚ Loˇt‹"

	)

1897 
	#NID_id_pkix_OCSP_£rvi˚Loˇt‹
 371

	)

1898 
	#OBJ_id_pkix_OCSP_£rvi˚Loˇt‹
 
OBJ_id_pkix_OCSP
,7L

	)

1900 
	#SN_id_pkix_OCSP_exãndedSètus
 "exãndedSètus"

	)

1901 
	#LN_id_pkix_OCSP_exãndedSètus
 "Exãnded OCSP Sètus"

	)

1902 
	#NID_id_pkix_OCSP_exãndedSètus
 372

	)

1903 
	#OBJ_id_pkix_OCSP_exãndedSètus
 
OBJ_id_pkix_OCSP
,8L

	)

1905 
	#SN_id_pkix_OCSP_vÆid
 "vÆid"

	)

1906 
	#NID_id_pkix_OCSP_vÆid
 373

	)

1907 
	#OBJ_id_pkix_OCSP_vÆid
 
OBJ_id_pkix_OCSP
,9L

	)

1909 
	#SN_id_pkix_OCSP_∑th
 "∑th"

	)

1910 
	#NID_id_pkix_OCSP_∑th
 374

	)

1911 
	#OBJ_id_pkix_OCSP_∑th
 
OBJ_id_pkix_OCSP
,10L

	)

1913 
	#SN_id_pkix_OCSP_åu°RoŸ
 "åu°RoŸ"

	)

1914 
	#LN_id_pkix_OCSP_åu°RoŸ
 "Tru° RoŸ"

	)

1915 
	#NID_id_pkix_OCSP_åu°RoŸ
 375

	)

1916 
	#OBJ_id_pkix_OCSP_åu°RoŸ
 
OBJ_id_pkix_OCSP
,11L

	)

1918 
	#SN_Æg‹ôhm
 "Æg‹ôhm"

	)

1919 
	#LN_Æg‹ôhm
 "Æg‹ôhm"

	)

1920 
	#NID_Æg‹ôhm
 376

	)

1921 
	#OBJ_Æg‹ôhm
 1L,3L,14L,3L,2L

	)

1923 
	#SN_md5WôhRSA
 "RSA-NP-MD5"

	)

1924 
	#LN_md5WôhRSA
 "md5WôhRSA"

	)

1925 
	#NID_md5WôhRSA
 104

	)

1926 
	#OBJ_md5WôhRSA
 
OBJ_Æg‹ôhm
,3L

	)

1928 
	#SN_des_ecb
 "DES-ECB"

	)

1929 
	#LN_des_ecb
 "des-ecb"

	)

1930 
	#NID_des_ecb
 29

	)

1931 
	#OBJ_des_ecb
 
OBJ_Æg‹ôhm
,6L

	)

1933 
	#SN_des_cbc
 "DES-CBC"

	)

1934 
	#LN_des_cbc
 "des-cbc"

	)

1935 
	#NID_des_cbc
 31

	)

1936 
	#OBJ_des_cbc
 
OBJ_Æg‹ôhm
,7L

	)

1938 
	#SN_des_ofb64
 "DES-OFB"

	)

1939 
	#LN_des_ofb64
 "des-ofb"

	)

1940 
	#NID_des_ofb64
 45

	)

1941 
	#OBJ_des_ofb64
 
OBJ_Æg‹ôhm
,8L

	)

1943 
	#SN_des_cfb64
 "DES-CFB"

	)

1944 
	#LN_des_cfb64
 "des-cfb"

	)

1945 
	#NID_des_cfb64
 30

	)

1946 
	#OBJ_des_cfb64
 
OBJ_Æg‹ôhm
,9L

	)

1948 
	#SN_rßSig«tuª
 "rßSig«tuª"

	)

1949 
	#NID_rßSig«tuª
 377

	)

1950 
	#OBJ_rßSig«tuª
 
OBJ_Æg‹ôhm
,11L

	)

1952 
	#SN_dß_2
 "DSA-ﬁd"

	)

1953 
	#LN_dß_2
 "dßEn¸y±i⁄-ﬁd"

	)

1954 
	#NID_dß_2
 67

	)

1955 
	#OBJ_dß_2
 
OBJ_Æg‹ôhm
,12L

	)

1957 
	#SN_dßWôhSHA
 "DSA-SHA"

	)

1958 
	#LN_dßWôhSHA
 "dßWôhSHA"

	)

1959 
	#NID_dßWôhSHA
 66

	)

1960 
	#OBJ_dßWôhSHA
 
OBJ_Æg‹ôhm
,13L

	)

1962 
	#SN_shaWôhRSAEn¸y±i⁄
 "RSA-SHA"

	)

1963 
	#LN_shaWôhRSAEn¸y±i⁄
 "shaWôhRSAEn¸y±i⁄"

	)

1964 
	#NID_shaWôhRSAEn¸y±i⁄
 42

	)

1965 
	#OBJ_shaWôhRSAEn¸y±i⁄
 
OBJ_Æg‹ôhm
,15L

	)

1967 
	#SN_des_ede_ecb
 "DES-EDE"

	)

1968 
	#LN_des_ede_ecb
 "des-ede"

	)

1969 
	#NID_des_ede_ecb
 32

	)

1970 
	#OBJ_des_ede_ecb
 
OBJ_Æg‹ôhm
,17L

	)

1972 
	#SN_des_ede3_ecb
 "DES-EDE3"

	)

1973 
	#LN_des_ede3_ecb
 "des-ede3"

	)

1974 
	#NID_des_ede3_ecb
 33

	)

1976 
	#SN_des_ede_cbc
 "DES-EDE-CBC"

	)

1977 
	#LN_des_ede_cbc
 "des-ede-cbc"

	)

1978 
	#NID_des_ede_cbc
 43

	)

1980 
	#SN_des_ede_cfb64
 "DES-EDE-CFB"

	)

1981 
	#LN_des_ede_cfb64
 "des-ede-cfb"

	)

1982 
	#NID_des_ede_cfb64
 60

	)

1984 
	#SN_des_ede3_cfb64
 "DES-EDE3-CFB"

	)

1985 
	#LN_des_ede3_cfb64
 "des-ede3-cfb"

	)

1986 
	#NID_des_ede3_cfb64
 61

	)

1988 
	#SN_des_ede_ofb64
 "DES-EDE-OFB"

	)

1989 
	#LN_des_ede_ofb64
 "des-ede-ofb"

	)

1990 
	#NID_des_ede_ofb64
 62

	)

1992 
	#SN_des_ede3_ofb64
 "DES-EDE3-OFB"

	)

1993 
	#LN_des_ede3_ofb64
 "des-ede3-ofb"

	)

1994 
	#NID_des_ede3_ofb64
 63

	)

1996 
	#SN_desx_cbc
 "DESX-CBC"

	)

1997 
	#LN_desx_cbc
 "desx-cbc"

	)

1998 
	#NID_desx_cbc
 80

	)

2000 
	#SN_sha
 "SHA"

	)

2001 
	#LN_sha
 "sha"

	)

2002 
	#NID_sha
 41

	)

2003 
	#OBJ_sha
 
OBJ_Æg‹ôhm
,18L

	)

2005 
	#SN_sha1
 "SHA1"

	)

2006 
	#LN_sha1
 "sha1"

	)

2007 
	#NID_sha1
 64

	)

2008 
	#OBJ_sha1
 
OBJ_Æg‹ôhm
,26L

	)

2010 
	#SN_dßWôhSHA1_2
 "DSA-SHA1-ﬁd"

	)

2011 
	#LN_dßWôhSHA1_2
 "dßWôhSHA1-ﬁd"

	)

2012 
	#NID_dßWôhSHA1_2
 70

	)

2013 
	#OBJ_dßWôhSHA1_2
 
OBJ_Æg‹ôhm
,27L

	)

2015 
	#SN_sha1WôhRSA
 "RSA-SHA1-2"

	)

2016 
	#LN_sha1WôhRSA
 "sha1WôhRSA"

	)

2017 
	#NID_sha1WôhRSA
 115

	)

2018 
	#OBJ_sha1WôhRSA
 
OBJ_Æg‹ôhm
,29L

	)

2020 
	#SN_rùemd160
 "RIPEMD160"

	)

2021 
	#LN_rùemd160
 "rùemd160"

	)

2022 
	#NID_rùemd160
 117

	)

2023 
	#OBJ_rùemd160
 1L,3L,36L,3L,2L,1L

	)

2025 
	#SN_rùemd160WôhRSA
 "RSA-RIPEMD160"

	)

2026 
	#LN_rùemd160WôhRSA
 "rùemd160WôhRSA"

	)

2027 
	#NID_rùemd160WôhRSA
 119

	)

2028 
	#OBJ_rùemd160WôhRSA
 1L,3L,36L,3L,3L,1L,2L

	)

2030 
	#SN_bœke2b512
 "BLAKE2b512"

	)

2031 
	#LN_bœke2b512
 "bœke2b512"

	)

2032 
	#NID_bœke2b512
 1056

	)

2033 
	#OBJ_bœke2b512
 1L,3L,6L,1L,4L,1L,1722L,12L,2L,1L,16L

	)

2035 
	#SN_bœke2s256
 "BLAKE2s256"

	)

2036 
	#LN_bœke2s256
 "bœke2s256"

	)

2037 
	#NID_bœke2s256
 1057

	)

2038 
	#OBJ_bœke2s256
 1L,3L,6L,1L,4L,1L,1722L,12L,2L,2L,8L

	)

2040 
	#SN_sx√t
 "SXNëID"

	)

2041 
	#LN_sx√t
 "Så⁄g Exå™ë ID"

	)

2042 
	#NID_sx√t
 143

	)

2043 
	#OBJ_sx√t
 1L,3L,101L,1L,4L,1L

	)

2045 
	#SN_X500
 "X500"

	)

2046 
	#LN_X500
 "dúe˘‹y sîvi˚†(X.500)"

	)

2047 
	#NID_X500
 11

	)

2048 
	#OBJ_X500
 2L,5L

	)

2050 
	#SN_X509
 "X509"

	)

2051 
	#NID_X509
 12

	)

2052 
	#OBJ_X509
 
OBJ_X500
,4L

	)

2054 
	#SN_comm⁄Name
 "CN"

	)

2055 
	#LN_comm⁄Name
 "comm⁄Name"

	)

2056 
	#NID_comm⁄Name
 13

	)

2057 
	#OBJ_comm⁄Name
 
OBJ_X509
,3L

	)

2059 
	#SN_su∫ame
 "SN"

	)

2060 
	#LN_su∫ame
 "su∫ame"

	)

2061 
	#NID_su∫ame
 100

	)

2062 
	#OBJ_su∫ame
 
OBJ_X509
,4L

	)

2064 
	#LN_£rülNumbî
 "£rülNumbî"

	)

2065 
	#NID_£rülNumbî
 105

	)

2066 
	#OBJ_£rülNumbî
 
OBJ_X509
,5L

	)

2068 
	#SN_cou¡ryName
 "C"

	)

2069 
	#LN_cou¡ryName
 "cou¡ryName"

	)

2070 
	#NID_cou¡ryName
 14

	)

2071 
	#OBJ_cou¡ryName
 
OBJ_X509
,6L

	)

2073 
	#SN_loˇlôyName
 "L"

	)

2074 
	#LN_loˇlôyName
 "loˇlôyName"

	)

2075 
	#NID_loˇlôyName
 15

	)

2076 
	#OBJ_loˇlôyName
 
OBJ_X509
,7L

	)

2078 
	#SN_°©eOrProvö˚Name
 "ST"

	)

2079 
	#LN_°©eOrProvö˚Name
 "°©eOrProvö˚Name"

	)

2080 
	#NID_°©eOrProvö˚Name
 16

	)

2081 
	#OBJ_°©eOrProvö˚Name
 
OBJ_X509
,8L

	)

2083 
	#SN_°ªëAddªss
 "°ªë"

	)

2084 
	#LN_°ªëAddªss
 "°ªëAddªss"

	)

2085 
	#NID_°ªëAddªss
 660

	)

2086 
	#OBJ_°ªëAddªss
 
OBJ_X509
,9L

	)

2088 
	#SN_‹g™iz©i⁄Name
 "O"

	)

2089 
	#LN_‹g™iz©i⁄Name
 "‹g™iz©i⁄Name"

	)

2090 
	#NID_‹g™iz©i⁄Name
 17

	)

2091 
	#OBJ_‹g™iz©i⁄Name
 
OBJ_X509
,10L

	)

2093 
	#SN_‹g™iz©i⁄ÆUnôName
 "OU"

	)

2094 
	#LN_‹g™iz©i⁄ÆUnôName
 "‹g™iz©i⁄ÆUnôName"

	)

2095 
	#NID_‹g™iz©i⁄ÆUnôName
 18

	)

2096 
	#OBJ_‹g™iz©i⁄ÆUnôName
 
OBJ_X509
,11L

	)

2098 
	#SN_tôÀ
 "tôÀ"

	)

2099 
	#LN_tôÀ
 "tôÀ"

	)

2100 
	#NID_tôÀ
 106

	)

2101 
	#OBJ_tôÀ
 
OBJ_X509
,12L

	)

2103 
	#LN_des¸ùti⁄
 "des¸ùti⁄"

	)

2104 
	#NID_des¸ùti⁄
 107

	)

2105 
	#OBJ_des¸ùti⁄
 
OBJ_X509
,13L

	)

2107 
	#LN_£¨chGuide
 "£¨chGuide"

	)

2108 
	#NID_£¨chGuide
 859

	)

2109 
	#OBJ_£¨chGuide
 
OBJ_X509
,14L

	)

2111 
	#LN_busöessC©eg‹y
 "busöessC©eg‹y"

	)

2112 
	#NID_busöessC©eg‹y
 860

	)

2113 
	#OBJ_busöessC©eg‹y
 
OBJ_X509
,15L

	)

2115 
	#LN_po°ÆAddªss
 "po°ÆAddªss"

	)

2116 
	#NID_po°ÆAddªss
 861

	)

2117 
	#OBJ_po°ÆAddªss
 
OBJ_X509
,16L

	)

2119 
	#LN_po°ÆCode
 "po°ÆCode"

	)

2120 
	#NID_po°ÆCode
 661

	)

2121 
	#OBJ_po°ÆCode
 
OBJ_X509
,17L

	)

2123 
	#LN_po°Offi˚Box
 "po°Offi˚Box"

	)

2124 
	#NID_po°Offi˚Box
 862

	)

2125 
	#OBJ_po°Offi˚Box
 
OBJ_X509
,18L

	)

2127 
	#LN_physiˇlDñivîyOffi˚Name
 "physiˇlDñivîyOffi˚Name"

	)

2128 
	#NID_physiˇlDñivîyOffi˚Name
 863

	)

2129 
	#OBJ_physiˇlDñivîyOffi˚Name
 
OBJ_X509
,19L

	)

2131 
	#LN_ãÀph⁄eNumbî
 "ãÀph⁄eNumbî"

	)

2132 
	#NID_ãÀph⁄eNumbî
 864

	)

2133 
	#OBJ_ãÀph⁄eNumbî
 
OBJ_X509
,20L

	)

2135 
	#LN_ãÀxNumbî
 "ãÀxNumbî"

	)

2136 
	#NID_ãÀxNumbî
 865

	)

2137 
	#OBJ_ãÀxNumbî
 
OBJ_X509
,21L

	)

2139 
	#LN_ãÀãxTîmöÆIdítifõr
 "ãÀãxTîmöÆIdítifõr"

	)

2140 
	#NID_ãÀãxTîmöÆIdítifõr
 866

	)

2141 
	#OBJ_ãÀãxTîmöÆIdítifõr
 
OBJ_X509
,22L

	)

2143 
	#LN_ÁcsimûeTñïh⁄eNumbî
 "ÁcsimûeTñïh⁄eNumbî"

	)

2144 
	#NID_ÁcsimûeTñïh⁄eNumbî
 867

	)

2145 
	#OBJ_ÁcsimûeTñïh⁄eNumbî
 
OBJ_X509
,23L

	)

2147 
	#LN_x121Addªss
 "x121Addªss"

	)

2148 
	#NID_x121Addªss
 868

	)

2149 
	#OBJ_x121Addªss
 
OBJ_X509
,24L

	)

2151 
	#LN_öã∫©i⁄ÆiSDNNumbî
 "öã∫©i⁄ÆiSDNNumbî"

	)

2152 
	#NID_öã∫©i⁄ÆiSDNNumbî
 869

	)

2153 
	#OBJ_öã∫©i⁄ÆiSDNNumbî
 
OBJ_X509
,25L

	)

2155 
	#LN_ªgi°îedAddªss
 "ªgi°îedAddªss"

	)

2156 
	#NID_ªgi°îedAddªss
 870

	)

2157 
	#OBJ_ªgi°îedAddªss
 
OBJ_X509
,26L

	)

2159 
	#LN_de°ö©i⁄Indiˇt‹
 "de°ö©i⁄Indiˇt‹"

	)

2160 
	#NID_de°ö©i⁄Indiˇt‹
 871

	)

2161 
	#OBJ_de°ö©i⁄Indiˇt‹
 
OBJ_X509
,27L

	)

2163 
	#LN_¥e„ºedDñivîyMëhod
 "¥e„ºedDñivîyMëhod"

	)

2164 
	#NID_¥e„ºedDñivîyMëhod
 872

	)

2165 
	#OBJ_¥e„ºedDñivîyMëhod
 
OBJ_X509
,28L

	)

2167 
	#LN_¥e£¡©i⁄Addªss
 "¥e£¡©i⁄Addªss"

	)

2168 
	#NID_¥e£¡©i⁄Addªss
 873

	)

2169 
	#OBJ_¥e£¡©i⁄Addªss
 
OBJ_X509
,29L

	)

2171 
	#LN_suµ‹ãdAµliˇti⁄C⁄ãxt
 "suµ‹ãdAµliˇti⁄C⁄ãxt"

	)

2172 
	#NID_suµ‹ãdAµliˇti⁄C⁄ãxt
 874

	)

2173 
	#OBJ_suµ‹ãdAµliˇti⁄C⁄ãxt
 
OBJ_X509
,30L

	)

2175 
	#SN_membî
 "membî"

	)

2176 
	#NID_membî
 875

	)

2177 
	#OBJ_membî
 
OBJ_X509
,31L

	)

2179 
	#SN_ow√r
 "ow√r"

	)

2180 
	#NID_ow√r
 876

	)

2181 
	#OBJ_ow√r
 
OBJ_X509
,32L

	)

2183 
	#LN_rﬁeOccu∑¡
 "rﬁeOccu∑¡"

	)

2184 
	#NID_rﬁeOccu∑¡
 877

	)

2185 
	#OBJ_rﬁeOccu∑¡
 
OBJ_X509
,33L

	)

2187 
	#SN_£eAlso
 "£eAlso"

	)

2188 
	#NID_£eAlso
 878

	)

2189 
	#OBJ_£eAlso
 
OBJ_X509
,34L

	)

2191 
	#LN_u£rPassw‹d
 "u£rPassw‹d"

	)

2192 
	#NID_u£rPassw‹d
 879

	)

2193 
	#OBJ_u£rPassw‹d
 
OBJ_X509
,35L

	)

2195 
	#LN_u£rCîtifiˇã
 "u£rCîtifiˇã"

	)

2196 
	#NID_u£rCîtifiˇã
 880

	)

2197 
	#OBJ_u£rCîtifiˇã
 
OBJ_X509
,36L

	)

2199 
	#LN_cACîtifiˇã
 "cACîtifiˇã"

	)

2200 
	#NID_cACîtifiˇã
 881

	)

2201 
	#OBJ_cACîtifiˇã
 
OBJ_X509
,37L

	)

2203 
	#LN_auth‹ôyRevoˇti⁄Li°
 "auth‹ôyRevoˇti⁄Li°"

	)

2204 
	#NID_auth‹ôyRevoˇti⁄Li°
 882

	)

2205 
	#OBJ_auth‹ôyRevoˇti⁄Li°
 
OBJ_X509
,38L

	)

2207 
	#LN_˚πifiˇãRevoˇti⁄Li°
 "˚πifiˇãRevoˇti⁄Li°"

	)

2208 
	#NID_˚πifiˇãRevoˇti⁄Li°
 883

	)

2209 
	#OBJ_˚πifiˇãRevoˇti⁄Li°
 
OBJ_X509
,39L

	)

2211 
	#LN_¸ossCîtifiˇãPaú
 "¸ossCîtifiˇãPaú"

	)

2212 
	#NID_¸ossCîtifiˇãPaú
 884

	)

2213 
	#OBJ_¸ossCîtifiˇãPaú
 
OBJ_X509
,40L

	)

2215 
	#SN_«me
 "«me"

	)

2216 
	#LN_«me
 "«me"

	)

2217 
	#NID_«me
 173

	)

2218 
	#OBJ_«me
 
OBJ_X509
,41L

	)

2220 
	#SN_givíName
 "GN"

	)

2221 
	#LN_givíName
 "givíName"

	)

2222 
	#NID_givíName
 99

	)

2223 
	#OBJ_givíName
 
OBJ_X509
,42L

	)

2225 
	#SN_öôüls
 "öôüls"

	)

2226 
	#LN_öôüls
 "öôüls"

	)

2227 
	#NID_öôüls
 101

	)

2228 
	#OBJ_öôüls
 
OBJ_X509
,43L

	)

2230 
	#LN_gíî©i⁄QuÆifõr
 "gíî©i⁄QuÆifõr"

	)

2231 
	#NID_gíî©i⁄QuÆifõr
 509

	)

2232 
	#OBJ_gíî©i⁄QuÆifõr
 
OBJ_X509
,44L

	)

2234 
	#LN_x500UniqueIdítifõr
 "x500UniqueIdítifõr"

	)

2235 
	#NID_x500UniqueIdítifõr
 503

	)

2236 
	#OBJ_x500UniqueIdítifõr
 
OBJ_X509
,45L

	)

2238 
	#SN_dnQuÆifõr
 "dnQuÆifõr"

	)

2239 
	#LN_dnQuÆifõr
 "dnQuÆifõr"

	)

2240 
	#NID_dnQuÆifõr
 174

	)

2241 
	#OBJ_dnQuÆifõr
 
OBJ_X509
,46L

	)

2243 
	#LN_íh™˚dSórchGuide
 "íh™˚dSórchGuide"

	)

2244 
	#NID_íh™˚dSórchGuide
 885

	)

2245 
	#OBJ_íh™˚dSórchGuide
 
OBJ_X509
,47L

	)

2247 
	#LN_¥ŸocﬁInf‹m©i⁄
 "¥ŸocﬁInf‹m©i⁄"

	)

2248 
	#NID_¥ŸocﬁInf‹m©i⁄
 886

	)

2249 
	#OBJ_¥ŸocﬁInf‹m©i⁄
 
OBJ_X509
,48L

	)

2251 
	#LN_di°öguishedName
 "di°öguishedName"

	)

2252 
	#NID_di°öguishedName
 887

	)

2253 
	#OBJ_di°öguishedName
 
OBJ_X509
,49L

	)

2255 
	#LN_uniqueMembî
 "uniqueMembî"

	)

2256 
	#NID_uniqueMembî
 888

	)

2257 
	#OBJ_uniqueMembî
 
OBJ_X509
,50L

	)

2259 
	#LN_hou£Idítifõr
 "hou£Idítifõr"

	)

2260 
	#NID_hou£Idítifõr
 889

	)

2261 
	#OBJ_hou£Idítifõr
 
OBJ_X509
,51L

	)

2263 
	#LN_suµ‹ãdAlg‹ôhms
 "suµ‹ãdAlg‹ôhms"

	)

2264 
	#NID_suµ‹ãdAlg‹ôhms
 890

	)

2265 
	#OBJ_suµ‹ãdAlg‹ôhms
 
OBJ_X509
,52L

	)

2267 
	#LN_dñèRevoˇti⁄Li°
 "dñèRevoˇti⁄Li°"

	)

2268 
	#NID_dñèRevoˇti⁄Li°
 891

	)

2269 
	#OBJ_dñèRevoˇti⁄Li°
 
OBJ_X509
,53L

	)

2271 
	#SN_dmdName
 "dmdName"

	)

2272 
	#NID_dmdName
 892

	)

2273 
	#OBJ_dmdName
 
OBJ_X509
,54L

	)

2275 
	#LN_p£ud⁄ym
 "p£ud⁄ym"

	)

2276 
	#NID_p£ud⁄ym
 510

	)

2277 
	#OBJ_p£ud⁄ym
 
OBJ_X509
,65L

	)

2279 
	#SN_rﬁe
 "rﬁe"

	)

2280 
	#LN_rﬁe
 "rﬁe"

	)

2281 
	#NID_rﬁe
 400

	)

2282 
	#OBJ_rﬁe
 
OBJ_X509
,72L

	)

2284 
	#SN_X500Æg‹ôhms
 "X500Æg‹ôhms"

	)

2285 
	#LN_X500Æg‹ôhms
 "dúe˘‹y sîvi˚†-álg‹ôhms"

	)

2286 
	#NID_X500Æg‹ôhms
 378

	)

2287 
	#OBJ_X500Æg‹ôhms
 
OBJ_X500
,8L

	)

2289 
	#SN_rß
 "RSA"

	)

2290 
	#LN_rß
 "rß"

	)

2291 
	#NID_rß
 19

	)

2292 
	#OBJ_rß
 
OBJ_X500Æg‹ôhms
,1L,1L

	)

2294 
	#SN_mdc2WôhRSA
 "RSA-MDC2"

	)

2295 
	#LN_mdc2WôhRSA
 "mdc2WôhRSA"

	)

2296 
	#NID_mdc2WôhRSA
 96

	)

2297 
	#OBJ_mdc2WôhRSA
 
OBJ_X500Æg‹ôhms
,3L,100L

	)

2299 
	#SN_mdc2
 "MDC2"

	)

2300 
	#LN_mdc2
 "mdc2"

	)

2301 
	#NID_mdc2
 95

	)

2302 
	#OBJ_mdc2
 
OBJ_X500Æg‹ôhms
,3L,101L

	)

2304 
	#SN_id_˚
 "id-˚"

	)

2305 
	#NID_id_˚
 81

	)

2306 
	#OBJ_id_˚
 
OBJ_X500
,29L

	)

2308 
	#SN_subje˘_dúe˘‹y_©åibuãs
 "subje˘Dúe˘‹yAâribuãs"

	)

2309 
	#LN_subje˘_dúe˘‹y_©åibuãs
 "X509v3 Subje˘ Dúe˘‹y Aâribuãs"

	)

2310 
	#NID_subje˘_dúe˘‹y_©åibuãs
 769

	)

2311 
	#OBJ_subje˘_dúe˘‹y_©åibuãs
 
OBJ_id_˚
,9L

	)

2313 
	#SN_subje˘_key_idítifõr
 "subje˘KeyIdítifõr"

	)

2314 
	#LN_subje˘_key_idítifõr
 "X509v3 Subje˘ Key Idítifõr"

	)

2315 
	#NID_subje˘_key_idítifõr
 82

	)

2316 
	#OBJ_subje˘_key_idítifõr
 
OBJ_id_˚
,14L

	)

2318 
	#SN_key_ußge
 "keyUßge"

	)

2319 
	#LN_key_ußge
 "X509v3 Key Ußge"

	)

2320 
	#NID_key_ußge
 83

	)

2321 
	#OBJ_key_ußge
 
OBJ_id_˚
,15L

	)

2323 
	#SN_¥iv©e_key_ußge_≥riod
 "¥iv©eKeyUßgePîiod"

	)

2324 
	#LN_¥iv©e_key_ußge_≥riod
 "X509v3 Priv©êKey UßgêPîiod"

	)

2325 
	#NID_¥iv©e_key_ußge_≥riod
 84

	)

2326 
	#OBJ_¥iv©e_key_ußge_≥riod
 
OBJ_id_˚
,16L

	)

2328 
	#SN_subje˘_Æt_«me
 "subje˘A…Name"

	)

2329 
	#LN_subje˘_Æt_«me
 "X509v3 Subje˘ A…î«tivêName"

	)

2330 
	#NID_subje˘_Æt_«me
 85

	)

2331 
	#OBJ_subje˘_Æt_«me
 
OBJ_id_˚
,17L

	)

2333 
	#SN_issuî_Æt_«me
 "issuîA…Name"

	)

2334 
	#LN_issuî_Æt_«me
 "X509v3 Issuî A…î«tivêName"

	)

2335 
	#NID_issuî_Æt_«me
 86

	)

2336 
	#OBJ_issuî_Æt_«me
 
OBJ_id_˚
,18L

	)

2338 
	#SN_basic_c⁄°øöts
 "basicC⁄°øöts"

	)

2339 
	#LN_basic_c⁄°øöts
 "X509v3 Basi¯C⁄°øöts"

	)

2340 
	#NID_basic_c⁄°øöts
 87

	)

2341 
	#OBJ_basic_c⁄°øöts
 
OBJ_id_˚
,19L

	)

2343 
	#SN_¸l_numbî
 "¸lNumbî"

	)

2344 
	#LN_¸l_numbî
 "X509v3 CRL Numbî"

	)

2345 
	#NID_¸l_numbî
 88

	)

2346 
	#OBJ_¸l_numbî
 
OBJ_id_˚
,20L

	)

2348 
	#SN_¸l_ªas⁄
 "CRLRós⁄"

	)

2349 
	#LN_¸l_ªas⁄
 "X509v3 CRL Rós⁄ Code"

	)

2350 
	#NID_¸l_ªas⁄
 141

	)

2351 
	#OBJ_¸l_ªas⁄
 
OBJ_id_˚
,21L

	)

2353 
	#SN_övÆidôy_d©e
 "övÆidôyD©e"

	)

2354 
	#LN_övÆidôy_d©e
 "InvÆidôy D©e"

	)

2355 
	#NID_övÆidôy_d©e
 142

	)

2356 
	#OBJ_övÆidôy_d©e
 
OBJ_id_˚
,24L

	)

2358 
	#SN_dñè_¸l
 "dñèCRL"

	)

2359 
	#LN_dñè_¸l
 "X509v3 Dñè CRL Indiˇt‹"

	)

2360 
	#NID_dñè_¸l
 140

	)

2361 
	#OBJ_dñè_¸l
 
OBJ_id_˚
,27L

	)

2363 
	#SN_issuög_di°ributi⁄_poöt
 "issuögDi°ributi⁄Poöt"

	)

2364 
	#LN_issuög_di°ributi⁄_poöt
 "X509v3 Issuög Di°ributi⁄ Poöt"

	)

2365 
	#NID_issuög_di°ributi⁄_poöt
 770

	)

2366 
	#OBJ_issuög_di°ributi⁄_poöt
 
OBJ_id_˚
,28L

	)

2368 
	#SN_˚πifiˇã_issuî
 "˚πifiˇãIssuî"

	)

2369 
	#LN_˚πifiˇã_issuî
 "X509v3 Cîtifiˇã Issuî"

	)

2370 
	#NID_˚πifiˇã_issuî
 771

	)

2371 
	#OBJ_˚πifiˇã_issuî
 
OBJ_id_˚
,29L

	)

2373 
	#SN_«me_c⁄°øöts
 "«meC⁄°øöts"

	)

2374 
	#LN_«me_c⁄°øöts
 "X509v3 NamêC⁄°øöts"

	)

2375 
	#NID_«me_c⁄°øöts
 666

	)

2376 
	#OBJ_«me_c⁄°øöts
 
OBJ_id_˚
,30L

	)

2378 
	#SN_¸l_di°ributi⁄_poöts
 "¸lDi°ributi⁄Poöts"

	)

2379 
	#LN_¸l_di°ributi⁄_poöts
 "X509v3 CRL Di°ributi⁄ Poöts"

	)

2380 
	#NID_¸l_di°ributi⁄_poöts
 103

	)

2381 
	#OBJ_¸l_di°ributi⁄_poöts
 
OBJ_id_˚
,31L

	)

2383 
	#SN_˚πifiˇã_pﬁicõs
 "˚πifiˇãPﬁicõs"

	)

2384 
	#LN_˚πifiˇã_pﬁicõs
 "X509v3 Cîtifiˇã Pﬁicõs"

	)

2385 
	#NID_˚πifiˇã_pﬁicõs
 89

	)

2386 
	#OBJ_˚πifiˇã_pﬁicõs
 
OBJ_id_˚
,32L

	)

2388 
	#SN_™y_pﬁicy
 "™yPﬁicy"

	)

2389 
	#LN_™y_pﬁicy
 "X509v3 Any Pﬁicy"

	)

2390 
	#NID_™y_pﬁicy
 746

	)

2391 
	#OBJ_™y_pﬁicy
 
OBJ_˚πifiˇã_pﬁicõs
,0L

	)

2393 
	#SN_pﬁicy_m≠pögs
 "pﬁicyM≠pögs"

	)

2394 
	#LN_pﬁicy_m≠pögs
 "X509v3 Pﬁicy M≠pögs"

	)

2395 
	#NID_pﬁicy_m≠pögs
 747

	)

2396 
	#OBJ_pﬁicy_m≠pögs
 
OBJ_id_˚
,33L

	)

2398 
	#SN_auth‹ôy_key_idítifõr
 "auth‹ôyKeyIdítifõr"

	)

2399 
	#LN_auth‹ôy_key_idítifõr
 "X509v3 Auth‹ôy Key Idítifõr"

	)

2400 
	#NID_auth‹ôy_key_idítifõr
 90

	)

2401 
	#OBJ_auth‹ôy_key_idítifõr
 
OBJ_id_˚
,35L

	)

2403 
	#SN_pﬁicy_c⁄°øöts
 "pﬁicyC⁄°øöts"

	)

2404 
	#LN_pﬁicy_c⁄°øöts
 "X509v3 Pﬁicy C⁄°øöts"

	)

2405 
	#NID_pﬁicy_c⁄°øöts
 401

	)

2406 
	#OBJ_pﬁicy_c⁄°øöts
 
OBJ_id_˚
,36L

	)

2408 
	#SN_ext_key_ußge
 "exãndedKeyUßge"

	)

2409 
	#LN_ext_key_ußge
 "X509v3 Exãnded Key Ußge"

	)

2410 
	#NID_ext_key_ußge
 126

	)

2411 
	#OBJ_ext_key_ußge
 
OBJ_id_˚
,37L

	)

2413 
	#SN_‰eshe°_¸l
 "‰eshe°CRL"

	)

2414 
	#LN_‰eshe°_¸l
 "X509v3 Fªshe° CRL"

	)

2415 
	#NID_‰eshe°_¸l
 857

	)

2416 
	#OBJ_‰eshe°_¸l
 
OBJ_id_˚
,46L

	)

2418 
	#SN_öhibô_™y_pﬁicy
 "öhibôAnyPﬁicy"

	)

2419 
	#LN_öhibô_™y_pﬁicy
 "X509v3 Inhibô Any Pﬁicy"

	)

2420 
	#NID_öhibô_™y_pﬁicy
 748

	)

2421 
	#OBJ_öhibô_™y_pﬁicy
 
OBJ_id_˚
,54L

	)

2423 
	#SN_èrgë_öf‹m©i⁄
 "èrgëInf‹m©i⁄"

	)

2424 
	#LN_èrgë_öf‹m©i⁄
 "X509v3 AC T¨gëög"

	)

2425 
	#NID_èrgë_öf‹m©i⁄
 402

	)

2426 
	#OBJ_èrgë_öf‹m©i⁄
 
OBJ_id_˚
,55L

	)

2428 
	#SN_no_ªv_avaû
 "noRevAvaû"

	)

2429 
	#LN_no_ªv_avaû
 "X509v3 NÿRevoˇti⁄ AvaûabÀ"

	)

2430 
	#NID_no_ªv_avaû
 403

	)

2431 
	#OBJ_no_ªv_avaû
 
OBJ_id_˚
,56L

	)

2433 
	#SN_™yExãndedKeyUßge
 "™yExãndedKeyUßge"

	)

2434 
	#LN_™yExãndedKeyUßge
 "Any Exãnded Key Ußge"

	)

2435 
	#NID_™yExãndedKeyUßge
 910

	)

2436 
	#OBJ_™yExãndedKeyUßge
 
OBJ_ext_key_ußge
,0L

	)

2438 
	#SN_√tsˇ≥
 "Nësˇ≥"

	)

2439 
	#LN_√tsˇ≥
 "Nësˇ≥ Communiˇti⁄†C‹p."

	)

2440 
	#NID_√tsˇ≥
 57

	)

2441 
	#OBJ_√tsˇ≥
 2L,16L,840L,1L,113730L

	)

2443 
	#SN_√tsˇ≥_˚π_exãnsi⁄
 "nsCîtExt"

	)

2444 
	#LN_√tsˇ≥_˚π_exãnsi⁄
 "Nësˇ≥ Cîtifiˇã Exãnsi⁄"

	)

2445 
	#NID_√tsˇ≥_˚π_exãnsi⁄
 58

	)

2446 
	#OBJ_√tsˇ≥_˚π_exãnsi⁄
 
OBJ_√tsˇ≥
,1L

	)

2448 
	#SN_√tsˇ≥_d©a_ty≥
 "nsD©aTy≥"

	)

2449 
	#LN_√tsˇ≥_d©a_ty≥
 "Nësˇ≥ D©®Ty≥"

	)

2450 
	#NID_√tsˇ≥_d©a_ty≥
 59

	)

2451 
	#OBJ_√tsˇ≥_d©a_ty≥
 
OBJ_√tsˇ≥
,2L

	)

2453 
	#SN_√tsˇ≥_˚π_ty≥
 "nsCîtTy≥"

	)

2454 
	#LN_√tsˇ≥_˚π_ty≥
 "Nësˇ≥ CîàTy≥"

	)

2455 
	#NID_√tsˇ≥_˚π_ty≥
 71

	)

2456 
	#OBJ_√tsˇ≥_˚π_ty≥
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,1L

	)

2458 
	#SN_√tsˇ≥_ba£_uæ
 "nsBa£Uæ"

	)

2459 
	#LN_√tsˇ≥_ba£_uæ
 "Nësˇ≥ Ba£ Uæ"

	)

2460 
	#NID_√tsˇ≥_ba£_uæ
 72

	)

2461 
	#OBJ_√tsˇ≥_ba£_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,2L

	)

2463 
	#SN_√tsˇ≥_ªvoˇti⁄_uæ
 "nsRevoˇti⁄Uæ"

	)

2464 
	#LN_√tsˇ≥_ªvoˇti⁄_uæ
 "Nësˇ≥ Revoˇti⁄ Uæ"

	)

2465 
	#NID_√tsˇ≥_ªvoˇti⁄_uæ
 73

	)

2466 
	#OBJ_√tsˇ≥_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,3L

	)

2468 
	#SN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "nsCaRevoˇti⁄Uæ"

	)

2469 
	#LN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "Nësˇ≥ CA Revoˇti⁄ Uæ"

	)

2470 
	#NID_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 74

	)

2471 
	#OBJ_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,4L

	)

2473 
	#SN_√tsˇ≥_ª√wÆ_uæ
 "nsRíewÆUæ"

	)

2474 
	#LN_√tsˇ≥_ª√wÆ_uæ
 "Nësˇ≥ RíewÆ Uæ"

	)

2475 
	#NID_√tsˇ≥_ª√wÆ_uæ
 75

	)

2476 
	#OBJ_√tsˇ≥_ª√wÆ_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,7L

	)

2478 
	#SN_√tsˇ≥_ˇ_pﬁicy_uæ
 "nsCaPﬁicyUæ"

	)

2479 
	#LN_√tsˇ≥_ˇ_pﬁicy_uæ
 "Nësˇ≥ CA Pﬁicy Uæ"

	)

2480 
	#NID_√tsˇ≥_ˇ_pﬁicy_uæ
 76

	)

2481 
	#OBJ_√tsˇ≥_ˇ_pﬁicy_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,8L

	)

2483 
	#SN_√tsˇ≥_s¶_£rvî_«me
 "nsS¶SîvîName"

	)

2484 
	#LN_√tsˇ≥_s¶_£rvî_«me
 "Nësˇ≥ SSL Sîvî Name"

	)

2485 
	#NID_√tsˇ≥_s¶_£rvî_«me
 77

	)

2486 
	#OBJ_√tsˇ≥_s¶_£rvî_«me
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,12L

	)

2488 
	#SN_√tsˇ≥_commít
 "nsCommít"

	)

2489 
	#LN_√tsˇ≥_commít
 "Nësˇ≥ Commít"

	)

2490 
	#NID_√tsˇ≥_commít
 78

	)

2491 
	#OBJ_√tsˇ≥_commít
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,13L

	)

2493 
	#SN_√tsˇ≥_˚π_£quí˚
 "nsCîtSequí˚"

	)

2494 
	#LN_√tsˇ≥_˚π_£quí˚
 "Nësˇ≥ Cîtifiˇã Sequí˚"

	)

2495 
	#NID_√tsˇ≥_˚π_£quí˚
 79

	)

2496 
	#OBJ_√tsˇ≥_˚π_£quí˚
 
OBJ_√tsˇ≥_d©a_ty≥
,5L

	)

2498 
	#SN_ns_sgc
 "nsSGC"

	)

2499 
	#LN_ns_sgc
 "Nësˇ≥ Sîvî G©ed Cry±o"

	)

2500 
	#NID_ns_sgc
 139

	)

2501 
	#OBJ_ns_sgc
 
OBJ_√tsˇ≥
,4L,1L

	)

2503 
	#SN_‹g
 "ORG"

	)

2504 
	#LN_‹g
 "‹g"

	)

2505 
	#NID_‹g
 379

	)

2506 
	#OBJ_‹g
 
OBJ_iso
,3L

	)

2508 
	#SN_dod
 "DOD"

	)

2509 
	#LN_dod
 "dod"

	)

2510 
	#NID_dod
 380

	)

2511 
	#OBJ_dod
 
OBJ_‹g
,6L

	)

2513 
	#SN_ü«
 "IANA"

	)

2514 
	#LN_ü«
 "ü«"

	)

2515 
	#NID_ü«
 381

	)

2516 
	#OBJ_ü«
 
OBJ_dod
,1L

	)

2518 
	#OBJ_öã∫ë
 
OBJ_ü«


	)

2520 
	#SN_Dúe˘‹y
 "dúe˘‹y"

	)

2521 
	#LN_Dúe˘‹y
 "Dúe˘‹y"

	)

2522 
	#NID_Dúe˘‹y
 382

	)

2523 
	#OBJ_Dúe˘‹y
 
OBJ_öã∫ë
,1L

	)

2525 
	#SN_M™agemít
 "mgmt"

	)

2526 
	#LN_M™agemít
 "M™agemít"

	)

2527 
	#NID_M™agemít
 383

	)

2528 
	#OBJ_M™agemít
 
OBJ_öã∫ë
,2L

	)

2530 
	#SN_Ex≥rimíèl
 "ex≥rimíèl"

	)

2531 
	#LN_Ex≥rimíèl
 "Ex≥rimíèl"

	)

2532 
	#NID_Ex≥rimíèl
 384

	)

2533 
	#OBJ_Ex≥rimíèl
 
OBJ_öã∫ë
,3L

	)

2535 
	#SN_Priv©e
 "¥iv©e"

	)

2536 
	#LN_Priv©e
 "Priv©e"

	)

2537 
	#NID_Priv©e
 385

	)

2538 
	#OBJ_Priv©e
 
OBJ_öã∫ë
,4L

	)

2540 
	#SN_Securôy
 "£curôy"

	)

2541 
	#LN_Securôy
 "Securôy"

	)

2542 
	#NID_Securôy
 386

	)

2543 
	#OBJ_Securôy
 
OBJ_öã∫ë
,5L

	)

2545 
	#SN_SNMPv2
 "¢mpv2"

	)

2546 
	#LN_SNMPv2
 "SNMPv2"

	)

2547 
	#NID_SNMPv2
 387

	)

2548 
	#OBJ_SNMPv2
 
OBJ_öã∫ë
,6L

	)

2550 
	#LN_Maû
 "Maû"

	)

2551 
	#NID_Maû
 388

	)

2552 
	#OBJ_Maû
 
OBJ_öã∫ë
,7L

	)

2554 
	#SN_E¡î¥i£s
 "íãΩri£s"

	)

2555 
	#LN_E¡î¥i£s
 "E¡î¥i£s"

	)

2556 
	#NID_E¡î¥i£s
 389

	)

2557 
	#OBJ_E¡î¥i£s
 
OBJ_Priv©e
,1L

	)

2559 
	#SN_dcObje˘
 "dcobje˘"

	)

2560 
	#LN_dcObje˘
 "dcObje˘"

	)

2561 
	#NID_dcObje˘
 390

	)

2562 
	#OBJ_dcObje˘
 
OBJ_E¡î¥i£s
,1466L,344L

	)

2564 
	#SN_mime_mhs
 "mime-mhs"

	)

2565 
	#LN_mime_mhs
 "MIME MHS"

	)

2566 
	#NID_mime_mhs
 504

	)

2567 
	#OBJ_mime_mhs
 
OBJ_Maû
,1L

	)

2569 
	#SN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2570 
	#LN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2571 
	#NID_mime_mhs_hódögs
 505

	)

2572 
	#OBJ_mime_mhs_hódögs
 
OBJ_mime_mhs
,1L

	)

2574 
	#SN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2575 
	#LN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2576 
	#NID_mime_mhs_bodõs
 506

	)

2577 
	#OBJ_mime_mhs_bodõs
 
OBJ_mime_mhs
,2L

	)

2579 
	#SN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2580 
	#LN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2581 
	#NID_id_hex_∑πül_mesßge
 507

	)

2582 
	#OBJ_id_hex_∑πül_mesßge
 
OBJ_mime_mhs_hódögs
,1L

	)

2584 
	#SN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2585 
	#LN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2586 
	#NID_id_hex_mu…ù¨t_mesßge
 508

	)

2587 
	#OBJ_id_hex_mu…ù¨t_mesßge
 
OBJ_mime_mhs_hódögs
,2L

	)

2589 
	#SN_zlib_com¥essi⁄
 "ZLIB"

	)

2590 
	#LN_zlib_com¥essi⁄
 "zlib com¥essi⁄"

	)

2591 
	#NID_zlib_com¥essi⁄
 125

	)

2592 
	#OBJ_zlib_com¥essi⁄
 
OBJ_id_smime_Æg
,8L

	)

2594 
	#OBJ_cs‹
 2L,16L,840L,1L,101L,3L

	)

2596 
	#OBJ_ni°Alg‹ôhms
 
OBJ_cs‹
,4L

	)

2598 
	#OBJ_´s
 
OBJ_ni°Alg‹ôhms
,1L

	)

2600 
	#SN_´s_128_ecb
 "AES-128-ECB"

	)

2601 
	#LN_´s_128_ecb
 "´s-128-ecb"

	)

2602 
	#NID_´s_128_ecb
 418

	)

2603 
	#OBJ_´s_128_ecb
 
OBJ_´s
,1L

	)

2605 
	#SN_´s_128_cbc
 "AES-128-CBC"

	)

2606 
	#LN_´s_128_cbc
 "´s-128-cbc"

	)

2607 
	#NID_´s_128_cbc
 419

	)

2608 
	#OBJ_´s_128_cbc
 
OBJ_´s
,2L

	)

2610 
	#SN_´s_128_ofb128
 "AES-128-OFB"

	)

2611 
	#LN_´s_128_ofb128
 "´s-128-ofb"

	)

2612 
	#NID_´s_128_ofb128
 420

	)

2613 
	#OBJ_´s_128_ofb128
 
OBJ_´s
,3L

	)

2615 
	#SN_´s_128_cfb128
 "AES-128-CFB"

	)

2616 
	#LN_´s_128_cfb128
 "´s-128-cfb"

	)

2617 
	#NID_´s_128_cfb128
 421

	)

2618 
	#OBJ_´s_128_cfb128
 
OBJ_´s
,4L

	)

2620 
	#SN_id_´s128_wøp
 "id-´s128-wøp"

	)

2621 
	#NID_id_´s128_wøp
 788

	)

2622 
	#OBJ_id_´s128_wøp
 
OBJ_´s
,5L

	)

2624 
	#SN_´s_128_gcm
 "id-´s128-GCM"

	)

2625 
	#LN_´s_128_gcm
 "´s-128-gcm"

	)

2626 
	#NID_´s_128_gcm
 895

	)

2627 
	#OBJ_´s_128_gcm
 
OBJ_´s
,6L

	)

2629 
	#SN_´s_128_ccm
 "id-´s128-CCM"

	)

2630 
	#LN_´s_128_ccm
 "´s-128-ccm"

	)

2631 
	#NID_´s_128_ccm
 896

	)

2632 
	#OBJ_´s_128_ccm
 
OBJ_´s
,7L

	)

2634 
	#SN_id_´s128_wøp_∑d
 "id-´s128-wøp-∑d"

	)

2635 
	#NID_id_´s128_wøp_∑d
 897

	)

2636 
	#OBJ_id_´s128_wøp_∑d
 
OBJ_´s
,8L

	)

2638 
	#SN_´s_192_ecb
 "AES-192-ECB"

	)

2639 
	#LN_´s_192_ecb
 "´s-192-ecb"

	)

2640 
	#NID_´s_192_ecb
 422

	)

2641 
	#OBJ_´s_192_ecb
 
OBJ_´s
,21L

	)

2643 
	#SN_´s_192_cbc
 "AES-192-CBC"

	)

2644 
	#LN_´s_192_cbc
 "´s-192-cbc"

	)

2645 
	#NID_´s_192_cbc
 423

	)

2646 
	#OBJ_´s_192_cbc
 
OBJ_´s
,22L

	)

2648 
	#SN_´s_192_ofb128
 "AES-192-OFB"

	)

2649 
	#LN_´s_192_ofb128
 "´s-192-ofb"

	)

2650 
	#NID_´s_192_ofb128
 424

	)

2651 
	#OBJ_´s_192_ofb128
 
OBJ_´s
,23L

	)

2653 
	#SN_´s_192_cfb128
 "AES-192-CFB"

	)

2654 
	#LN_´s_192_cfb128
 "´s-192-cfb"

	)

2655 
	#NID_´s_192_cfb128
 425

	)

2656 
	#OBJ_´s_192_cfb128
 
OBJ_´s
,24L

	)

2658 
	#SN_id_´s192_wøp
 "id-´s192-wøp"

	)

2659 
	#NID_id_´s192_wøp
 789

	)

2660 
	#OBJ_id_´s192_wøp
 
OBJ_´s
,25L

	)

2662 
	#SN_´s_192_gcm
 "id-´s192-GCM"

	)

2663 
	#LN_´s_192_gcm
 "´s-192-gcm"

	)

2664 
	#NID_´s_192_gcm
 898

	)

2665 
	#OBJ_´s_192_gcm
 
OBJ_´s
,26L

	)

2667 
	#SN_´s_192_ccm
 "id-´s192-CCM"

	)

2668 
	#LN_´s_192_ccm
 "´s-192-ccm"

	)

2669 
	#NID_´s_192_ccm
 899

	)

2670 
	#OBJ_´s_192_ccm
 
OBJ_´s
,27L

	)

2672 
	#SN_id_´s192_wøp_∑d
 "id-´s192-wøp-∑d"

	)

2673 
	#NID_id_´s192_wøp_∑d
 900

	)

2674 
	#OBJ_id_´s192_wøp_∑d
 
OBJ_´s
,28L

	)

2676 
	#SN_´s_256_ecb
 "AES-256-ECB"

	)

2677 
	#LN_´s_256_ecb
 "´s-256-ecb"

	)

2678 
	#NID_´s_256_ecb
 426

	)

2679 
	#OBJ_´s_256_ecb
 
OBJ_´s
,41L

	)

2681 
	#SN_´s_256_cbc
 "AES-256-CBC"

	)

2682 
	#LN_´s_256_cbc
 "´s-256-cbc"

	)

2683 
	#NID_´s_256_cbc
 427

	)

2684 
	#OBJ_´s_256_cbc
 
OBJ_´s
,42L

	)

2686 
	#SN_´s_256_ofb128
 "AES-256-OFB"

	)

2687 
	#LN_´s_256_ofb128
 "´s-256-ofb"

	)

2688 
	#NID_´s_256_ofb128
 428

	)

2689 
	#OBJ_´s_256_ofb128
 
OBJ_´s
,43L

	)

2691 
	#SN_´s_256_cfb128
 "AES-256-CFB"

	)

2692 
	#LN_´s_256_cfb128
 "´s-256-cfb"

	)

2693 
	#NID_´s_256_cfb128
 429

	)

2694 
	#OBJ_´s_256_cfb128
 
OBJ_´s
,44L

	)

2696 
	#SN_id_´s256_wøp
 "id-´s256-wøp"

	)

2697 
	#NID_id_´s256_wøp
 790

	)

2698 
	#OBJ_id_´s256_wøp
 
OBJ_´s
,45L

	)

2700 
	#SN_´s_256_gcm
 "id-´s256-GCM"

	)

2701 
	#LN_´s_256_gcm
 "´s-256-gcm"

	)

2702 
	#NID_´s_256_gcm
 901

	)

2703 
	#OBJ_´s_256_gcm
 
OBJ_´s
,46L

	)

2705 
	#SN_´s_256_ccm
 "id-´s256-CCM"

	)

2706 
	#LN_´s_256_ccm
 "´s-256-ccm"

	)

2707 
	#NID_´s_256_ccm
 902

	)

2708 
	#OBJ_´s_256_ccm
 
OBJ_´s
,47L

	)

2710 
	#SN_id_´s256_wøp_∑d
 "id-´s256-wøp-∑d"

	)

2711 
	#NID_id_´s256_wøp_∑d
 903

	)

2712 
	#OBJ_id_´s256_wøp_∑d
 
OBJ_´s
,48L

	)

2714 
	#SN_´s_128_cfb1
 "AES-128-CFB1"

	)

2715 
	#LN_´s_128_cfb1
 "´s-128-cfb1"

	)

2716 
	#NID_´s_128_cfb1
 650

	)

2718 
	#SN_´s_192_cfb1
 "AES-192-CFB1"

	)

2719 
	#LN_´s_192_cfb1
 "´s-192-cfb1"

	)

2720 
	#NID_´s_192_cfb1
 651

	)

2722 
	#SN_´s_256_cfb1
 "AES-256-CFB1"

	)

2723 
	#LN_´s_256_cfb1
 "´s-256-cfb1"

	)

2724 
	#NID_´s_256_cfb1
 652

	)

2726 
	#SN_´s_128_cfb8
 "AES-128-CFB8"

	)

2727 
	#LN_´s_128_cfb8
 "´s-128-cfb8"

	)

2728 
	#NID_´s_128_cfb8
 653

	)

2730 
	#SN_´s_192_cfb8
 "AES-192-CFB8"

	)

2731 
	#LN_´s_192_cfb8
 "´s-192-cfb8"

	)

2732 
	#NID_´s_192_cfb8
 654

	)

2734 
	#SN_´s_256_cfb8
 "AES-256-CFB8"

	)

2735 
	#LN_´s_256_cfb8
 "´s-256-cfb8"

	)

2736 
	#NID_´s_256_cfb8
 655

	)

2738 
	#SN_´s_128_˘r
 "AES-128-CTR"

	)

2739 
	#LN_´s_128_˘r
 "´s-128-˘r"

	)

2740 
	#NID_´s_128_˘r
 904

	)

2742 
	#SN_´s_192_˘r
 "AES-192-CTR"

	)

2743 
	#LN_´s_192_˘r
 "´s-192-˘r"

	)

2744 
	#NID_´s_192_˘r
 905

	)

2746 
	#SN_´s_256_˘r
 "AES-256-CTR"

	)

2747 
	#LN_´s_256_˘r
 "´s-256-˘r"

	)

2748 
	#NID_´s_256_˘r
 906

	)

2750 
	#SN_´s_128_ocb
 "AES-128-OCB"

	)

2751 
	#LN_´s_128_ocb
 "´s-128-ocb"

	)

2752 
	#NID_´s_128_ocb
 958

	)

2754 
	#SN_´s_192_ocb
 "AES-192-OCB"

	)

2755 
	#LN_´s_192_ocb
 "´s-192-ocb"

	)

2756 
	#NID_´s_192_ocb
 959

	)

2758 
	#SN_´s_256_ocb
 "AES-256-OCB"

	)

2759 
	#LN_´s_256_ocb
 "´s-256-ocb"

	)

2760 
	#NID_´s_256_ocb
 960

	)

2762 
	#SN_´s_128_xts
 "AES-128-XTS"

	)

2763 
	#LN_´s_128_xts
 "´s-128-xts"

	)

2764 
	#NID_´s_128_xts
 913

	)

2766 
	#SN_´s_256_xts
 "AES-256-XTS"

	)

2767 
	#LN_´s_256_xts
 "´s-256-xts"

	)

2768 
	#NID_´s_256_xts
 914

	)

2770 
	#SN_des_cfb1
 "DES-CFB1"

	)

2771 
	#LN_des_cfb1
 "des-cfb1"

	)

2772 
	#NID_des_cfb1
 656

	)

2774 
	#SN_des_cfb8
 "DES-CFB8"

	)

2775 
	#LN_des_cfb8
 "des-cfb8"

	)

2776 
	#NID_des_cfb8
 657

	)

2778 
	#SN_des_ede3_cfb1
 "DES-EDE3-CFB1"

	)

2779 
	#LN_des_ede3_cfb1
 "des-ede3-cfb1"

	)

2780 
	#NID_des_ede3_cfb1
 658

	)

2782 
	#SN_des_ede3_cfb8
 "DES-EDE3-CFB8"

	)

2783 
	#LN_des_ede3_cfb8
 "des-ede3-cfb8"

	)

2784 
	#NID_des_ede3_cfb8
 659

	)

2786 
	#OBJ_ni°_hashÆgs
 
OBJ_ni°Alg‹ôhms
,2L

	)

2788 
	#SN_sha256
 "SHA256"

	)

2789 
	#LN_sha256
 "sha256"

	)

2790 
	#NID_sha256
 672

	)

2791 
	#OBJ_sha256
 
OBJ_ni°_hashÆgs
,1L

	)

2793 
	#SN_sha384
 "SHA384"

	)

2794 
	#LN_sha384
 "sha384"

	)

2795 
	#NID_sha384
 673

	)

2796 
	#OBJ_sha384
 
OBJ_ni°_hashÆgs
,2L

	)

2798 
	#SN_sha512
 "SHA512"

	)

2799 
	#LN_sha512
 "sha512"

	)

2800 
	#NID_sha512
 674

	)

2801 
	#OBJ_sha512
 
OBJ_ni°_hashÆgs
,3L

	)

2803 
	#SN_sha224
 "SHA224"

	)

2804 
	#LN_sha224
 "sha224"

	)

2805 
	#NID_sha224
 675

	)

2806 
	#OBJ_sha224
 
OBJ_ni°_hashÆgs
,4L

	)

2808 
	#OBJ_dß_wôh_sha2
 
OBJ_ni°Alg‹ôhms
,3L

	)

2810 
	#SN_dß_wôh_SHA224
 "dß_wôh_SHA224"

	)

2811 
	#NID_dß_wôh_SHA224
 802

	)

2812 
	#OBJ_dß_wôh_SHA224
 
OBJ_dß_wôh_sha2
,1L

	)

2814 
	#SN_dß_wôh_SHA256
 "dß_wôh_SHA256"

	)

2815 
	#NID_dß_wôh_SHA256
 803

	)

2816 
	#OBJ_dß_wôh_SHA256
 
OBJ_dß_wôh_sha2
,2L

	)

2818 
	#SN_hﬁd_ö°ru˘i⁄_code
 "hﬁdIn°ru˘i⁄Code"

	)

2819 
	#LN_hﬁd_ö°ru˘i⁄_code
 "Hﬁd In°ru˘i⁄ Code"

	)

2820 
	#NID_hﬁd_ö°ru˘i⁄_code
 430

	)

2821 
	#OBJ_hﬁd_ö°ru˘i⁄_code
 
OBJ_id_˚
,23L

	)

2823 
	#OBJ_hﬁdIn°ru˘i⁄
 
OBJ_X9_57
,2L

	)

2825 
	#SN_hﬁd_ö°ru˘i⁄_n⁄e
 "hﬁdIn°ru˘i⁄N⁄e"

	)

2826 
	#LN_hﬁd_ö°ru˘i⁄_n⁄e
 "Hﬁd In°ru˘i⁄ N⁄e"

	)

2827 
	#NID_hﬁd_ö°ru˘i⁄_n⁄e
 431

	)

2828 
	#OBJ_hﬁd_ö°ru˘i⁄_n⁄e
 
OBJ_hﬁdIn°ru˘i⁄
,1L

	)

2830 
	#SN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "hﬁdIn°ru˘i⁄CÆlIssuî"

	)

2831 
	#LN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "Hﬁd In°ru˘i⁄ CÆ»Issuî"

	)

2832 
	#NID_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 432

	)

2833 
	#OBJ_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 
OBJ_hﬁdIn°ru˘i⁄
,2L

	)

2835 
	#SN_hﬁd_ö°ru˘i⁄_ªje˘
 "hﬁdIn°ru˘i⁄Reje˘"

	)

2836 
	#LN_hﬁd_ö°ru˘i⁄_ªje˘
 "Hﬁd In°ru˘i⁄ Reje˘"

	)

2837 
	#NID_hﬁd_ö°ru˘i⁄_ªje˘
 433

	)

2838 
	#OBJ_hﬁd_ö°ru˘i⁄_ªje˘
 
OBJ_hﬁdIn°ru˘i⁄
,3L

	)

2840 
	#SN_d©a
 "d©a"

	)

2841 
	#NID_d©a
 434

	)

2842 
	#OBJ_d©a
 
OBJ_ôu_t
,9L

	)

2844 
	#SN_pss
 "pss"

	)

2845 
	#NID_pss
 435

	)

2846 
	#OBJ_pss
 
OBJ_d©a
,2342L

	)

2848 
	#SN_u˛
 "u˛"

	)

2849 
	#NID_u˛
 436

	)

2850 
	#OBJ_u˛
 
OBJ_pss
,19200300L

	)

2852 
	#SN_pûŸ
 "pûŸ"

	)

2853 
	#NID_pûŸ
 437

	)

2854 
	#OBJ_pûŸ
 
OBJ_u˛
,100L

	)

2856 
	#LN_pûŸAâribuãTy≥
 "pûŸAâribuãTy≥"

	)

2857 
	#NID_pûŸAâribuãTy≥
 438

	)

2858 
	#OBJ_pûŸAâribuãTy≥
 
OBJ_pûŸ
,1L

	)

2860 
	#LN_pûŸAâribuãSy¡ax
 "pûŸAâribuãSy¡ax"

	)

2861 
	#NID_pûŸAâribuãSy¡ax
 439

	)

2862 
	#OBJ_pûŸAâribuãSy¡ax
 
OBJ_pûŸ
,3L

	)

2864 
	#LN_pûŸObje˘Cœss
 "pûŸObje˘Cœss"

	)

2865 
	#NID_pûŸObje˘Cœss
 440

	)

2866 
	#OBJ_pûŸObje˘Cœss
 
OBJ_pûŸ
,4L

	)

2868 
	#LN_pûŸGroups
 "pûŸGroups"

	)

2869 
	#NID_pûŸGroups
 441

	)

2870 
	#OBJ_pûŸGroups
 
OBJ_pûŸ
,10L

	)

2872 
	#LN_iA5SåögSy¡ax
 "iA5SåögSy¡ax"

	)

2873 
	#NID_iA5SåögSy¡ax
 442

	)

2874 
	#OBJ_iA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,4L

	)

2876 
	#LN_ˇ£Ign‹eIA5SåögSy¡ax
 "ˇ£Ign‹eIA5SåögSy¡ax"

	)

2877 
	#NID_ˇ£Ign‹eIA5SåögSy¡ax
 443

	)

2878 
	#OBJ_ˇ£Ign‹eIA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,5L

	)

2880 
	#LN_pûŸObje˘
 "pûŸObje˘"

	)

2881 
	#NID_pûŸObje˘
 444

	)

2882 
	#OBJ_pûŸObje˘
 
OBJ_pûŸObje˘Cœss
,3L

	)

2884 
	#LN_pûŸPîs⁄
 "pûŸPîs⁄"

	)

2885 
	#NID_pûŸPîs⁄
 445

	)

2886 
	#OBJ_pûŸPîs⁄
 
OBJ_pûŸObje˘Cœss
,4L

	)

2888 
	#SN_accou¡
 "accou¡"

	)

2889 
	#NID_accou¡
 446

	)

2890 
	#OBJ_accou¡
 
OBJ_pûŸObje˘Cœss
,5L

	)

2892 
	#SN_documít
 "documít"

	)

2893 
	#NID_documít
 447

	)

2894 
	#OBJ_documít
 
OBJ_pûŸObje˘Cœss
,6L

	)

2896 
	#SN_room
 "room"

	)

2897 
	#NID_room
 448

	)

2898 
	#OBJ_room
 
OBJ_pûŸObje˘Cœss
,7L

	)

2900 
	#LN_documítSîõs
 "documítSîõs"

	)

2901 
	#NID_documítSîõs
 449

	)

2902 
	#OBJ_documítSîõs
 
OBJ_pûŸObje˘Cœss
,9L

	)

2904 
	#SN_Domaö
 "domaö"

	)

2905 
	#LN_Domaö
 "Domaö"

	)

2906 
	#NID_Domaö
 392

	)

2907 
	#OBJ_Domaö
 
OBJ_pûŸObje˘Cœss
,13L

	)

2909 
	#LN_rFC822loˇlP¨t
 "rFC822loˇlP¨t"

	)

2910 
	#NID_rFC822loˇlP¨t
 450

	)

2911 
	#OBJ_rFC822loˇlP¨t
 
OBJ_pûŸObje˘Cœss
,14L

	)

2913 
	#LN_dNSDomaö
 "dNSDomaö"

	)

2914 
	#NID_dNSDomaö
 451

	)

2915 
	#OBJ_dNSDomaö
 
OBJ_pûŸObje˘Cœss
,15L

	)

2917 
	#LN_domaöRñ©edObje˘
 "domaöRñ©edObje˘"

	)

2918 
	#NID_domaöRñ©edObje˘
 452

	)

2919 
	#OBJ_domaöRñ©edObje˘
 
OBJ_pûŸObje˘Cœss
,17L

	)

2921 
	#LN_‰õndlyCou¡ry
 "‰õndlyCou¡ry"

	)

2922 
	#NID_‰õndlyCou¡ry
 453

	)

2923 
	#OBJ_‰õndlyCou¡ry
 
OBJ_pûŸObje˘Cœss
,18L

	)

2925 
	#LN_sim∂eSecurôyObje˘
 "sim∂eSecurôyObje˘"

	)

2926 
	#NID_sim∂eSecurôyObje˘
 454

	)

2927 
	#OBJ_sim∂eSecurôyObje˘
 
OBJ_pûŸObje˘Cœss
,19L

	)

2929 
	#LN_pûŸOrg™iz©i⁄
 "pûŸOrg™iz©i⁄"

	)

2930 
	#NID_pûŸOrg™iz©i⁄
 455

	)

2931 
	#OBJ_pûŸOrg™iz©i⁄
 
OBJ_pûŸObje˘Cœss
,20L

	)

2933 
	#LN_pûŸDSA
 "pûŸDSA"

	)

2934 
	#NID_pûŸDSA
 456

	)

2935 
	#OBJ_pûŸDSA
 
OBJ_pûŸObje˘Cœss
,21L

	)

2937 
	#LN_quÆôyLabñÀdD©a
 "quÆôyLabñÀdD©a"

	)

2938 
	#NID_quÆôyLabñÀdD©a
 457

	)

2939 
	#OBJ_quÆôyLabñÀdD©a
 
OBJ_pûŸObje˘Cœss
,22L

	)

2941 
	#SN_u£rId
 "UID"

	)

2942 
	#LN_u£rId
 "u£rId"

	)

2943 
	#NID_u£rId
 458

	)

2944 
	#OBJ_u£rId
 
OBJ_pûŸAâribuãTy≥
,1L

	)

2946 
	#LN_ãxtEncodedORAddªss
 "ãxtEncodedORAddªss"

	)

2947 
	#NID_ãxtEncodedORAddªss
 459

	)

2948 
	#OBJ_ãxtEncodedORAddªss
 
OBJ_pûŸAâribuãTy≥
,2L

	)

2950 
	#SN_rfc822Maûbox
 "maû"

	)

2951 
	#LN_rfc822Maûbox
 "rfc822Maûbox"

	)

2952 
	#NID_rfc822Maûbox
 460

	)

2953 
	#OBJ_rfc822Maûbox
 
OBJ_pûŸAâribuãTy≥
,3L

	)

2955 
	#SN_öfo
 "öfo"

	)

2956 
	#NID_öfo
 461

	)

2957 
	#OBJ_öfo
 
OBJ_pûŸAâribuãTy≥
,4L

	)

2959 
	#LN_ÁvourôeDrök
 "ÁvourôeDrök"

	)

2960 
	#NID_ÁvourôeDrök
 462

	)

2961 
	#OBJ_ÁvourôeDrök
 
OBJ_pûŸAâribuãTy≥
,5L

	)

2963 
	#LN_roomNumbî
 "roomNumbî"

	)

2964 
	#NID_roomNumbî
 463

	)

2965 
	#OBJ_roomNumbî
 
OBJ_pûŸAâribuãTy≥
,6L

	)

2967 
	#SN_phŸo
 "phŸo"

	)

2968 
	#NID_phŸo
 464

	)

2969 
	#OBJ_phŸo
 
OBJ_pûŸAâribuãTy≥
,7L

	)

2971 
	#LN_u£rCœss
 "u£rCœss"

	)

2972 
	#NID_u£rCœss
 465

	)

2973 
	#OBJ_u£rCœss
 
OBJ_pûŸAâribuãTy≥
,8L

	)

2975 
	#SN_ho°
 "ho°"

	)

2976 
	#NID_ho°
 466

	)

2977 
	#OBJ_ho°
 
OBJ_pûŸAâribuãTy≥
,9L

	)

2979 
	#SN_m™agî
 "m™agî"

	)

2980 
	#NID_m™agî
 467

	)

2981 
	#OBJ_m™agî
 
OBJ_pûŸAâribuãTy≥
,10L

	)

2983 
	#LN_documítIdítifõr
 "documítIdítifõr"

	)

2984 
	#NID_documítIdítifõr
 468

	)

2985 
	#OBJ_documítIdítifõr
 
OBJ_pûŸAâribuãTy≥
,11L

	)

2987 
	#LN_documítTôÀ
 "documítTôÀ"

	)

2988 
	#NID_documítTôÀ
 469

	)

2989 
	#OBJ_documítTôÀ
 
OBJ_pûŸAâribuãTy≥
,12L

	)

2991 
	#LN_documítVîsi⁄
 "documítVîsi⁄"

	)

2992 
	#NID_documítVîsi⁄
 470

	)

2993 
	#OBJ_documítVîsi⁄
 
OBJ_pûŸAâribuãTy≥
,13L

	)

2995 
	#LN_documítAuth‹
 "documítAuth‹"

	)

2996 
	#NID_documítAuth‹
 471

	)

2997 
	#OBJ_documítAuth‹
 
OBJ_pûŸAâribuãTy≥
,14L

	)

2999 
	#LN_documítLoˇti⁄
 "documítLoˇti⁄"

	)

3000 
	#NID_documítLoˇti⁄
 472

	)

3001 
	#OBJ_documítLoˇti⁄
 
OBJ_pûŸAâribuãTy≥
,15L

	)

3003 
	#LN_homeTñïh⁄eNumbî
 "homeTñïh⁄eNumbî"

	)

3004 
	#NID_homeTñïh⁄eNumbî
 473

	)

3005 
	#OBJ_homeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,20L

	)

3007 
	#SN_£¸ë¨y
 "£¸ë¨y"

	)

3008 
	#NID_£¸ë¨y
 474

	)

3009 
	#OBJ_£¸ë¨y
 
OBJ_pûŸAâribuãTy≥
,21L

	)

3011 
	#LN_ŸhîMaûbox
 "ŸhîMaûbox"

	)

3012 
	#NID_ŸhîMaûbox
 475

	)

3013 
	#OBJ_ŸhîMaûbox
 
OBJ_pûŸAâribuãTy≥
,22L

	)

3015 
	#LN_œ°ModifõdTime
 "œ°ModifõdTime"

	)

3016 
	#NID_œ°ModifõdTime
 476

	)

3017 
	#OBJ_œ°ModifõdTime
 
OBJ_pûŸAâribuãTy≥
,23L

	)

3019 
	#LN_œ°ModifõdBy
 "œ°ModifõdBy"

	)

3020 
	#NID_œ°ModifõdBy
 477

	)

3021 
	#OBJ_œ°ModifõdBy
 
OBJ_pûŸAâribuãTy≥
,24L

	)

3023 
	#SN_domaöComp⁄ít
 "DC"

	)

3024 
	#LN_domaöComp⁄ít
 "domaöComp⁄ít"

	)

3025 
	#NID_domaöComp⁄ít
 391

	)

3026 
	#OBJ_domaöComp⁄ít
 
OBJ_pûŸAâribuãTy≥
,25L

	)

3028 
	#LN_aRec‹d
 "aRec‹d"

	)

3029 
	#NID_aRec‹d
 478

	)

3030 
	#OBJ_aRec‹d
 
OBJ_pûŸAâribuãTy≥
,26L

	)

3032 
	#LN_pûŸAâribuãTy≥27
 "pûŸAâribuãTy≥27"

	)

3033 
	#NID_pûŸAâribuãTy≥27
 479

	)

3034 
	#OBJ_pûŸAâribuãTy≥27
 
OBJ_pûŸAâribuãTy≥
,27L

	)

3036 
	#LN_mXRec‹d
 "mXRec‹d"

	)

3037 
	#NID_mXRec‹d
 480

	)

3038 
	#OBJ_mXRec‹d
 
OBJ_pûŸAâribuãTy≥
,28L

	)

3040 
	#LN_nSRec‹d
 "nSRec‹d"

	)

3041 
	#NID_nSRec‹d
 481

	)

3042 
	#OBJ_nSRec‹d
 
OBJ_pûŸAâribuãTy≥
,29L

	)

3044 
	#LN_sOARec‹d
 "sOARec‹d"

	)

3045 
	#NID_sOARec‹d
 482

	)

3046 
	#OBJ_sOARec‹d
 
OBJ_pûŸAâribuãTy≥
,30L

	)

3048 
	#LN_cNAMERec‹d
 "cNAMERec‹d"

	)

3049 
	#NID_cNAMERec‹d
 483

	)

3050 
	#OBJ_cNAMERec‹d
 
OBJ_pûŸAâribuãTy≥
,31L

	)

3052 
	#LN_assocüãdDomaö
 "assocüãdDomaö"

	)

3053 
	#NID_assocüãdDomaö
 484

	)

3054 
	#OBJ_assocüãdDomaö
 
OBJ_pûŸAâribuãTy≥
,37L

	)

3056 
	#LN_assocüãdName
 "assocüãdName"

	)

3057 
	#NID_assocüãdName
 485

	)

3058 
	#OBJ_assocüãdName
 
OBJ_pûŸAâribuãTy≥
,38L

	)

3060 
	#LN_homePo°ÆAddªss
 "homePo°ÆAddªss"

	)

3061 
	#NID_homePo°ÆAddªss
 486

	)

3062 
	#OBJ_homePo°ÆAddªss
 
OBJ_pûŸAâribuãTy≥
,39L

	)

3064 
	#LN_≥rs⁄ÆTôÀ
 "≥rs⁄ÆTôÀ"

	)

3065 
	#NID_≥rs⁄ÆTôÀ
 487

	)

3066 
	#OBJ_≥rs⁄ÆTôÀ
 
OBJ_pûŸAâribuãTy≥
,40L

	)

3068 
	#LN_mobûeTñïh⁄eNumbî
 "mobûeTñïh⁄eNumbî"

	)

3069 
	#NID_mobûeTñïh⁄eNumbî
 488

	)

3070 
	#OBJ_mobûeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,41L

	)

3072 
	#LN_∑gîTñïh⁄eNumbî
 "∑gîTñïh⁄eNumbî"

	)

3073 
	#NID_∑gîTñïh⁄eNumbî
 489

	)

3074 
	#OBJ_∑gîTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,42L

	)

3076 
	#LN_‰õndlyCou¡ryName
 "‰õndlyCou¡ryName"

	)

3077 
	#NID_‰õndlyCou¡ryName
 490

	)

3078 
	#OBJ_‰õndlyCou¡ryName
 
OBJ_pûŸAâribuãTy≥
,43L

	)

3080 
	#SN_uniqueIdítifõr
 "uid"

	)

3081 
	#LN_uniqueIdítifõr
 "uniqueIdítifõr"

	)

3082 
	#NID_uniqueIdítifõr
 102

	)

3083 
	#OBJ_uniqueIdítifõr
 
OBJ_pûŸAâribuãTy≥
,44L

	)

3085 
	#LN_‹g™iz©i⁄ÆSètus
 "‹g™iz©i⁄ÆSètus"

	)

3086 
	#NID_‹g™iz©i⁄ÆSètus
 491

	)

3087 
	#OBJ_‹g™iz©i⁄ÆSètus
 
OBJ_pûŸAâribuãTy≥
,45L

	)

3089 
	#LN_j™ëMaûbox
 "j™ëMaûbox"

	)

3090 
	#NID_j™ëMaûbox
 492

	)

3091 
	#OBJ_j™ëMaûbox
 
OBJ_pûŸAâribuãTy≥
,46L

	)

3093 
	#LN_maûPª„ªn˚O±i⁄
 "maûPª„ªn˚O±i⁄"

	)

3094 
	#NID_maûPª„ªn˚O±i⁄
 493

	)

3095 
	#OBJ_maûPª„ªn˚O±i⁄
 
OBJ_pûŸAâribuãTy≥
,47L

	)

3097 
	#LN_buûdögName
 "buûdögName"

	)

3098 
	#NID_buûdögName
 494

	)

3099 
	#OBJ_buûdögName
 
OBJ_pûŸAâribuãTy≥
,48L

	)

3101 
	#LN_dSAQuÆôy
 "dSAQuÆôy"

	)

3102 
	#NID_dSAQuÆôy
 495

	)

3103 
	#OBJ_dSAQuÆôy
 
OBJ_pûŸAâribuãTy≥
,49L

	)

3105 
	#LN_sögÀLevñQuÆôy
 "sögÀLevñQuÆôy"

	)

3106 
	#NID_sögÀLevñQuÆôy
 496

	)

3107 
	#OBJ_sögÀLevñQuÆôy
 
OBJ_pûŸAâribuãTy≥
,50L

	)

3109 
	#LN_subåìMöimumQuÆôy
 "subåìMöimumQuÆôy"

	)

3110 
	#NID_subåìMöimumQuÆôy
 497

	)

3111 
	#OBJ_subåìMöimumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,51L

	)

3113 
	#LN_subåìMaximumQuÆôy
 "subåìMaximumQuÆôy"

	)

3114 
	#NID_subåìMaximumQuÆôy
 498

	)

3115 
	#OBJ_subåìMaximumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,52L

	)

3117 
	#LN_≥rs⁄ÆSig«tuª
 "≥rs⁄ÆSig«tuª"

	)

3118 
	#NID_≥rs⁄ÆSig«tuª
 499

	)

3119 
	#OBJ_≥rs⁄ÆSig«tuª
 
OBJ_pûŸAâribuãTy≥
,53L

	)

3121 
	#LN_dITRedúe˘
 "dITRedúe˘"

	)

3122 
	#NID_dITRedúe˘
 500

	)

3123 
	#OBJ_dITRedúe˘
 
OBJ_pûŸAâribuãTy≥
,54L

	)

3125 
	#SN_audio
 "audio"

	)

3126 
	#NID_audio
 501

	)

3127 
	#OBJ_audio
 
OBJ_pûŸAâribuãTy≥
,55L

	)

3129 
	#LN_documítPublishî
 "documítPublishî"

	)

3130 
	#NID_documítPublishî
 502

	)

3131 
	#OBJ_documítPublishî
 
OBJ_pûŸAâribuãTy≥
,56L

	)

3133 
	#SN_id_£t
 "id-£t"

	)

3134 
	#LN_id_£t
 "Secuª EÀ˘r⁄i¯Tønß˘i⁄s"

	)

3135 
	#NID_id_£t
 512

	)

3136 
	#OBJ_id_£t
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,42L

	)

3138 
	#SN_£t_˘y≥
 "£t-˘y≥"

	)

3139 
	#LN_£t_˘y≥
 "c⁄ã¡Åy≥s"

	)

3140 
	#NID_£t_˘y≥
 513

	)

3141 
	#OBJ_£t_˘y≥
 
OBJ_id_£t
,0L

	)

3143 
	#SN_£t_msgExt
 "£t-msgExt"

	)

3144 
	#LN_£t_msgExt
 "mesßgêexãnsi⁄s"

	)

3145 
	#NID_£t_msgExt
 514

	)

3146 
	#OBJ_£t_msgExt
 
OBJ_id_£t
,1L

	)

3148 
	#SN_£t_©å
 "£t-©å"

	)

3149 
	#NID_£t_©å
 515

	)

3150 
	#OBJ_£t_©å
 
OBJ_id_£t
,3L

	)

3152 
	#SN_£t_pﬁicy
 "£t-pﬁicy"

	)

3153 
	#NID_£t_pﬁicy
 516

	)

3154 
	#OBJ_£t_pﬁicy
 
OBJ_id_£t
,5L

	)

3156 
	#SN_£t_˚πExt
 "£t-˚πExt"

	)

3157 
	#LN_£t_˚πExt
 "˚πifiˇãÉxãnsi⁄s"

	)

3158 
	#NID_£t_˚πExt
 517

	)

3159 
	#OBJ_£t_˚πExt
 
OBJ_id_£t
,7L

	)

3161 
	#SN_£t_bønd
 "£t-bønd"

	)

3162 
	#NID_£t_bønd
 518

	)

3163 
	#OBJ_£t_bønd
 
OBJ_id_£t
,8L

	)

3165 
	#SN_£t˘_PAND©a
 "£t˘-PAND©a"

	)

3166 
	#NID_£t˘_PAND©a
 519

	)

3167 
	#OBJ_£t˘_PAND©a
 
OBJ_£t_˘y≥
,0L

	)

3169 
	#SN_£t˘_PANTokí
 "£t˘-PANTokí"

	)

3170 
	#NID_£t˘_PANTokí
 520

	)

3171 
	#OBJ_£t˘_PANTokí
 
OBJ_£t_˘y≥
,1L

	)

3173 
	#SN_£t˘_PANO∆y
 "£t˘-PANO∆y"

	)

3174 
	#NID_£t˘_PANO∆y
 521

	)

3175 
	#OBJ_£t˘_PANO∆y
 
OBJ_£t_˘y≥
,2L

	)

3177 
	#SN_£t˘_OID©a
 "£t˘-OID©a"

	)

3178 
	#NID_£t˘_OID©a
 522

	)

3179 
	#OBJ_£t˘_OID©a
 
OBJ_£t_˘y≥
,3L

	)

3181 
	#SN_£t˘_PI
 "£t˘-PI"

	)

3182 
	#NID_£t˘_PI
 523

	)

3183 
	#OBJ_£t˘_PI
 
OBJ_£t_˘y≥
,4L

	)

3185 
	#SN_£t˘_PID©a
 "£t˘-PID©a"

	)

3186 
	#NID_£t˘_PID©a
 524

	)

3187 
	#OBJ_£t˘_PID©a
 
OBJ_£t_˘y≥
,5L

	)

3189 
	#SN_£t˘_PID©aUnsig√d
 "£t˘-PID©aUnsig√d"

	)

3190 
	#NID_£t˘_PID©aUnsig√d
 525

	)

3191 
	#OBJ_£t˘_PID©aUnsig√d
 
OBJ_£t_˘y≥
,6L

	)

3193 
	#SN_£t˘_HODI≈ut
 "£t˘-HODI≈ut"

	)

3194 
	#NID_£t˘_HODI≈ut
 526

	)

3195 
	#OBJ_£t˘_HODI≈ut
 
OBJ_£t_˘y≥
,7L

	)

3197 
	#SN_£t˘_AuthResBaggage
 "£t˘-AuthResBaggage"

	)

3198 
	#NID_£t˘_AuthResBaggage
 527

	)

3199 
	#OBJ_£t˘_AuthResBaggage
 
OBJ_£t_˘y≥
,8L

	)

3201 
	#SN_£t˘_AuthRevReqBaggage
 "£t˘-AuthRevReqBaggage"

	)

3202 
	#NID_£t˘_AuthRevReqBaggage
 528

	)

3203 
	#OBJ_£t˘_AuthRevReqBaggage
 
OBJ_£t_˘y≥
,9L

	)

3205 
	#SN_£t˘_AuthRevResBaggage
 "£t˘-AuthRevResBaggage"

	)

3206 
	#NID_£t˘_AuthRevResBaggage
 529

	)

3207 
	#OBJ_£t˘_AuthRevResBaggage
 
OBJ_£t_˘y≥
,10L

	)

3209 
	#SN_£t˘_C≠TokíSeq
 "£t˘-C≠TokíSeq"

	)

3210 
	#NID_£t˘_C≠TokíSeq
 530

	)

3211 
	#OBJ_£t˘_C≠TokíSeq
 
OBJ_£t_˘y≥
,11L

	)

3213 
	#SN_£t˘_PInôResD©a
 "£t˘-PInôResD©a"

	)

3214 
	#NID_£t˘_PInôResD©a
 531

	)

3215 
	#OBJ_£t˘_PInôResD©a
 
OBJ_£t_˘y≥
,12L

	)

3217 
	#SN_£t˘_PI_TBS
 "£t˘-PI-TBS"

	)

3218 
	#NID_£t˘_PI_TBS
 532

	)

3219 
	#OBJ_£t˘_PI_TBS
 
OBJ_£t_˘y≥
,13L

	)

3221 
	#SN_£t˘_PResD©a
 "£t˘-PResD©a"

	)

3222 
	#NID_£t˘_PResD©a
 533

	)

3223 
	#OBJ_£t˘_PResD©a
 
OBJ_£t_˘y≥
,14L

	)

3225 
	#SN_£t˘_AuthReqTBS
 "£t˘-AuthReqTBS"

	)

3226 
	#NID_£t˘_AuthReqTBS
 534

	)

3227 
	#OBJ_£t˘_AuthReqTBS
 
OBJ_£t_˘y≥
,16L

	)

3229 
	#SN_£t˘_AuthResTBS
 "£t˘-AuthResTBS"

	)

3230 
	#NID_£t˘_AuthResTBS
 535

	)

3231 
	#OBJ_£t˘_AuthResTBS
 
OBJ_£t_˘y≥
,17L

	)

3233 
	#SN_£t˘_AuthResTBSX
 "£t˘-AuthResTBSX"

	)

3234 
	#NID_£t˘_AuthResTBSX
 536

	)

3235 
	#OBJ_£t˘_AuthResTBSX
 
OBJ_£t_˘y≥
,18L

	)

3237 
	#SN_£t˘_AuthTokíTBS
 "£t˘-AuthTokíTBS"

	)

3238 
	#NID_£t˘_AuthTokíTBS
 537

	)

3239 
	#OBJ_£t˘_AuthTokíTBS
 
OBJ_£t_˘y≥
,19L

	)

3241 
	#SN_£t˘_C≠TokíD©a
 "£t˘-C≠TokíD©a"

	)

3242 
	#NID_£t˘_C≠TokíD©a
 538

	)

3243 
	#OBJ_£t˘_C≠TokíD©a
 
OBJ_£t_˘y≥
,20L

	)

3245 
	#SN_£t˘_C≠TokíTBS
 "£t˘-C≠TokíTBS"

	)

3246 
	#NID_£t˘_C≠TokíTBS
 539

	)

3247 
	#OBJ_£t˘_C≠TokíTBS
 
OBJ_£t_˘y≥
,21L

	)

3249 
	#SN_£t˘_AcqC¨dCodeMsg
 "£t˘-AcqC¨dCodeMsg"

	)

3250 
	#NID_£t˘_AcqC¨dCodeMsg
 540

	)

3251 
	#OBJ_£t˘_AcqC¨dCodeMsg
 
OBJ_£t_˘y≥
,22L

	)

3253 
	#SN_£t˘_AuthRevReqTBS
 "£t˘-AuthRevReqTBS"

	)

3254 
	#NID_£t˘_AuthRevReqTBS
 541

	)

3255 
	#OBJ_£t˘_AuthRevReqTBS
 
OBJ_£t_˘y≥
,23L

	)

3257 
	#SN_£t˘_AuthRevResD©a
 "£t˘-AuthRevResD©a"

	)

3258 
	#NID_£t˘_AuthRevResD©a
 542

	)

3259 
	#OBJ_£t˘_AuthRevResD©a
 
OBJ_£t_˘y≥
,24L

	)

3261 
	#SN_£t˘_AuthRevResTBS
 "£t˘-AuthRevResTBS"

	)

3262 
	#NID_£t˘_AuthRevResTBS
 543

	)

3263 
	#OBJ_£t˘_AuthRevResTBS
 
OBJ_£t_˘y≥
,25L

	)

3265 
	#SN_£t˘_C≠ReqTBS
 "£t˘-C≠ReqTBS"

	)

3266 
	#NID_£t˘_C≠ReqTBS
 544

	)

3267 
	#OBJ_£t˘_C≠ReqTBS
 
OBJ_£t_˘y≥
,26L

	)

3269 
	#SN_£t˘_C≠ReqTBSX
 "£t˘-C≠ReqTBSX"

	)

3270 
	#NID_£t˘_C≠ReqTBSX
 545

	)

3271 
	#OBJ_£t˘_C≠ReqTBSX
 
OBJ_£t_˘y≥
,27L

	)

3273 
	#SN_£t˘_C≠ResD©a
 "£t˘-C≠ResD©a"

	)

3274 
	#NID_£t˘_C≠ResD©a
 546

	)

3275 
	#OBJ_£t˘_C≠ResD©a
 
OBJ_£t_˘y≥
,28L

	)

3277 
	#SN_£t˘_C≠RevReqTBS
 "£t˘-C≠RevReqTBS"

	)

3278 
	#NID_£t˘_C≠RevReqTBS
 547

	)

3279 
	#OBJ_£t˘_C≠RevReqTBS
 
OBJ_£t_˘y≥
,29L

	)

3281 
	#SN_£t˘_C≠RevReqTBSX
 "£t˘-C≠RevReqTBSX"

	)

3282 
	#NID_£t˘_C≠RevReqTBSX
 548

	)

3283 
	#OBJ_£t˘_C≠RevReqTBSX
 
OBJ_£t_˘y≥
,30L

	)

3285 
	#SN_£t˘_C≠RevResD©a
 "£t˘-C≠RevResD©a"

	)

3286 
	#NID_£t˘_C≠RevResD©a
 549

	)

3287 
	#OBJ_£t˘_C≠RevResD©a
 
OBJ_£t_˘y≥
,31L

	)

3289 
	#SN_£t˘_CªdReqTBS
 "£t˘-CªdReqTBS"

	)

3290 
	#NID_£t˘_CªdReqTBS
 550

	)

3291 
	#OBJ_£t˘_CªdReqTBS
 
OBJ_£t_˘y≥
,32L

	)

3293 
	#SN_£t˘_CªdReqTBSX
 "£t˘-CªdReqTBSX"

	)

3294 
	#NID_£t˘_CªdReqTBSX
 551

	)

3295 
	#OBJ_£t˘_CªdReqTBSX
 
OBJ_£t_˘y≥
,33L

	)

3297 
	#SN_£t˘_CªdResD©a
 "£t˘-CªdResD©a"

	)

3298 
	#NID_£t˘_CªdResD©a
 552

	)

3299 
	#OBJ_£t˘_CªdResD©a
 
OBJ_£t_˘y≥
,34L

	)

3301 
	#SN_£t˘_CªdRevReqTBS
 "£t˘-CªdRevReqTBS"

	)

3302 
	#NID_£t˘_CªdRevReqTBS
 553

	)

3303 
	#OBJ_£t˘_CªdRevReqTBS
 
OBJ_£t_˘y≥
,35L

	)

3305 
	#SN_£t˘_CªdRevReqTBSX
 "£t˘-CªdRevReqTBSX"

	)

3306 
	#NID_£t˘_CªdRevReqTBSX
 554

	)

3307 
	#OBJ_£t˘_CªdRevReqTBSX
 
OBJ_£t_˘y≥
,36L

	)

3309 
	#SN_£t˘_CªdRevResD©a
 "£t˘-CªdRevResD©a"

	)

3310 
	#NID_£t˘_CªdRevResD©a
 555

	)

3311 
	#OBJ_£t˘_CªdRevResD©a
 
OBJ_£t_˘y≥
,37L

	)

3313 
	#SN_£t˘_PCîtReqD©a
 "£t˘-PCîtReqD©a"

	)

3314 
	#NID_£t˘_PCîtReqD©a
 556

	)

3315 
	#OBJ_£t˘_PCîtReqD©a
 
OBJ_£t_˘y≥
,38L

	)

3317 
	#SN_£t˘_PCîtResTBS
 "£t˘-PCîtResTBS"

	)

3318 
	#NID_£t˘_PCîtResTBS
 557

	)

3319 
	#OBJ_£t˘_PCîtResTBS
 
OBJ_£t_˘y≥
,39L

	)

3321 
	#SN_£t˘_B©chAdmöReqD©a
 "£t˘-B©chAdmöReqD©a"

	)

3322 
	#NID_£t˘_B©chAdmöReqD©a
 558

	)

3323 
	#OBJ_£t˘_B©chAdmöReqD©a
 
OBJ_£t_˘y≥
,40L

	)

3325 
	#SN_£t˘_B©chAdmöResD©a
 "£t˘-B©chAdmöResD©a"

	)

3326 
	#NID_£t˘_B©chAdmöResD©a
 559

	)

3327 
	#OBJ_£t˘_B©chAdmöResD©a
 
OBJ_£t_˘y≥
,41L

	)

3329 
	#SN_£t˘_C¨dCInôResTBS
 "£t˘-C¨dCInôResTBS"

	)

3330 
	#NID_£t˘_C¨dCInôResTBS
 560

	)

3331 
	#OBJ_£t˘_C¨dCInôResTBS
 
OBJ_£t_˘y≥
,42L

	)

3333 
	#SN_£t˘_MeAqCInôResTBS
 "£t˘-MeAqCInôResTBS"

	)

3334 
	#NID_£t˘_MeAqCInôResTBS
 561

	)

3335 
	#OBJ_£t˘_MeAqCInôResTBS
 
OBJ_£t_˘y≥
,43L

	)

3337 
	#SN_£t˘_RegF‹mResTBS
 "£t˘-RegF‹mResTBS"

	)

3338 
	#NID_£t˘_RegF‹mResTBS
 562

	)

3339 
	#OBJ_£t˘_RegF‹mResTBS
 
OBJ_£t_˘y≥
,44L

	)

3341 
	#SN_£t˘_CîtReqD©a
 "£t˘-CîtReqD©a"

	)

3342 
	#NID_£t˘_CîtReqD©a
 563

	)

3343 
	#OBJ_£t˘_CîtReqD©a
 
OBJ_£t_˘y≥
,45L

	)

3345 
	#SN_£t˘_CîtReqTBS
 "£t˘-CîtReqTBS"

	)

3346 
	#NID_£t˘_CîtReqTBS
 564

	)

3347 
	#OBJ_£t˘_CîtReqTBS
 
OBJ_£t_˘y≥
,46L

	)

3349 
	#SN_£t˘_CîtResD©a
 "£t˘-CîtResD©a"

	)

3350 
	#NID_£t˘_CîtResD©a
 565

	)

3351 
	#OBJ_£t˘_CîtResD©a
 
OBJ_£t_˘y≥
,47L

	)

3353 
	#SN_£t˘_CîtInqReqTBS
 "£t˘-CîtInqReqTBS"

	)

3354 
	#NID_£t˘_CîtInqReqTBS
 566

	)

3355 
	#OBJ_£t˘_CîtInqReqTBS
 
OBJ_£t_˘y≥
,48L

	)

3357 
	#SN_£t˘_Eº‹TBS
 "£t˘-Eº‹TBS"

	)

3358 
	#NID_£t˘_Eº‹TBS
 567

	)

3359 
	#OBJ_£t˘_Eº‹TBS
 
OBJ_£t_˘y≥
,49L

	)

3361 
	#SN_£t˘_PIDuÆSig√dTBE
 "£t˘-PIDuÆSig√dTBE"

	)

3362 
	#NID_£t˘_PIDuÆSig√dTBE
 568

	)

3363 
	#OBJ_£t˘_PIDuÆSig√dTBE
 
OBJ_£t_˘y≥
,50L

	)

3365 
	#SN_£t˘_PIUnsig√dTBE
 "£t˘-PIUnsig√dTBE"

	)

3366 
	#NID_£t˘_PIUnsig√dTBE
 569

	)

3367 
	#OBJ_£t˘_PIUnsig√dTBE
 
OBJ_£t_˘y≥
,51L

	)

3369 
	#SN_£t˘_AuthReqTBE
 "£t˘-AuthReqTBE"

	)

3370 
	#NID_£t˘_AuthReqTBE
 570

	)

3371 
	#OBJ_£t˘_AuthReqTBE
 
OBJ_£t_˘y≥
,52L

	)

3373 
	#SN_£t˘_AuthResTBE
 "£t˘-AuthResTBE"

	)

3374 
	#NID_£t˘_AuthResTBE
 571

	)

3375 
	#OBJ_£t˘_AuthResTBE
 
OBJ_£t_˘y≥
,53L

	)

3377 
	#SN_£t˘_AuthResTBEX
 "£t˘-AuthResTBEX"

	)

3378 
	#NID_£t˘_AuthResTBEX
 572

	)

3379 
	#OBJ_£t˘_AuthResTBEX
 
OBJ_£t_˘y≥
,54L

	)

3381 
	#SN_£t˘_AuthTokíTBE
 "£t˘-AuthTokíTBE"

	)

3382 
	#NID_£t˘_AuthTokíTBE
 573

	)

3383 
	#OBJ_£t˘_AuthTokíTBE
 
OBJ_£t_˘y≥
,55L

	)

3385 
	#SN_£t˘_C≠TokíTBE
 "£t˘-C≠TokíTBE"

	)

3386 
	#NID_£t˘_C≠TokíTBE
 574

	)

3387 
	#OBJ_£t˘_C≠TokíTBE
 
OBJ_£t_˘y≥
,56L

	)

3389 
	#SN_£t˘_C≠TokíTBEX
 "£t˘-C≠TokíTBEX"

	)

3390 
	#NID_£t˘_C≠TokíTBEX
 575

	)

3391 
	#OBJ_£t˘_C≠TokíTBEX
 
OBJ_£t_˘y≥
,57L

	)

3393 
	#SN_£t˘_AcqC¨dCodeMsgTBE
 "£t˘-AcqC¨dCodeMsgTBE"

	)

3394 
	#NID_£t˘_AcqC¨dCodeMsgTBE
 576

	)

3395 
	#OBJ_£t˘_AcqC¨dCodeMsgTBE
 
OBJ_£t_˘y≥
,58L

	)

3397 
	#SN_£t˘_AuthRevReqTBE
 "£t˘-AuthRevReqTBE"

	)

3398 
	#NID_£t˘_AuthRevReqTBE
 577

	)

3399 
	#OBJ_£t˘_AuthRevReqTBE
 
OBJ_£t_˘y≥
,59L

	)

3401 
	#SN_£t˘_AuthRevResTBE
 "£t˘-AuthRevResTBE"

	)

3402 
	#NID_£t˘_AuthRevResTBE
 578

	)

3403 
	#OBJ_£t˘_AuthRevResTBE
 
OBJ_£t_˘y≥
,60L

	)

3405 
	#SN_£t˘_AuthRevResTBEB
 "£t˘-AuthRevResTBEB"

	)

3406 
	#NID_£t˘_AuthRevResTBEB
 579

	)

3407 
	#OBJ_£t˘_AuthRevResTBEB
 
OBJ_£t_˘y≥
,61L

	)

3409 
	#SN_£t˘_C≠ReqTBE
 "£t˘-C≠ReqTBE"

	)

3410 
	#NID_£t˘_C≠ReqTBE
 580

	)

3411 
	#OBJ_£t˘_C≠ReqTBE
 
OBJ_£t_˘y≥
,62L

	)

3413 
	#SN_£t˘_C≠ReqTBEX
 "£t˘-C≠ReqTBEX"

	)

3414 
	#NID_£t˘_C≠ReqTBEX
 581

	)

3415 
	#OBJ_£t˘_C≠ReqTBEX
 
OBJ_£t_˘y≥
,63L

	)

3417 
	#SN_£t˘_C≠ResTBE
 "£t˘-C≠ResTBE"

	)

3418 
	#NID_£t˘_C≠ResTBE
 582

	)

3419 
	#OBJ_£t˘_C≠ResTBE
 
OBJ_£t_˘y≥
,64L

	)

3421 
	#SN_£t˘_C≠RevReqTBE
 "£t˘-C≠RevReqTBE"

	)

3422 
	#NID_£t˘_C≠RevReqTBE
 583

	)

3423 
	#OBJ_£t˘_C≠RevReqTBE
 
OBJ_£t_˘y≥
,65L

	)

3425 
	#SN_£t˘_C≠RevReqTBEX
 "£t˘-C≠RevReqTBEX"

	)

3426 
	#NID_£t˘_C≠RevReqTBEX
 584

	)

3427 
	#OBJ_£t˘_C≠RevReqTBEX
 
OBJ_£t_˘y≥
,66L

	)

3429 
	#SN_£t˘_C≠RevResTBE
 "£t˘-C≠RevResTBE"

	)

3430 
	#NID_£t˘_C≠RevResTBE
 585

	)

3431 
	#OBJ_£t˘_C≠RevResTBE
 
OBJ_£t_˘y≥
,67L

	)

3433 
	#SN_£t˘_CªdReqTBE
 "£t˘-CªdReqTBE"

	)

3434 
	#NID_£t˘_CªdReqTBE
 586

	)

3435 
	#OBJ_£t˘_CªdReqTBE
 
OBJ_£t_˘y≥
,68L

	)

3437 
	#SN_£t˘_CªdReqTBEX
 "£t˘-CªdReqTBEX"

	)

3438 
	#NID_£t˘_CªdReqTBEX
 587

	)

3439 
	#OBJ_£t˘_CªdReqTBEX
 
OBJ_£t_˘y≥
,69L

	)

3441 
	#SN_£t˘_CªdResTBE
 "£t˘-CªdResTBE"

	)

3442 
	#NID_£t˘_CªdResTBE
 588

	)

3443 
	#OBJ_£t˘_CªdResTBE
 
OBJ_£t_˘y≥
,70L

	)

3445 
	#SN_£t˘_CªdRevReqTBE
 "£t˘-CªdRevReqTBE"

	)

3446 
	#NID_£t˘_CªdRevReqTBE
 589

	)

3447 
	#OBJ_£t˘_CªdRevReqTBE
 
OBJ_£t_˘y≥
,71L

	)

3449 
	#SN_£t˘_CªdRevReqTBEX
 "£t˘-CªdRevReqTBEX"

	)

3450 
	#NID_£t˘_CªdRevReqTBEX
 590

	)

3451 
	#OBJ_£t˘_CªdRevReqTBEX
 
OBJ_£t_˘y≥
,72L

	)

3453 
	#SN_£t˘_CªdRevResTBE
 "£t˘-CªdRevResTBE"

	)

3454 
	#NID_£t˘_CªdRevResTBE
 591

	)

3455 
	#OBJ_£t˘_CªdRevResTBE
 
OBJ_£t_˘y≥
,73L

	)

3457 
	#SN_£t˘_B©chAdmöReqTBE
 "£t˘-B©chAdmöReqTBE"

	)

3458 
	#NID_£t˘_B©chAdmöReqTBE
 592

	)

3459 
	#OBJ_£t˘_B©chAdmöReqTBE
 
OBJ_£t_˘y≥
,74L

	)

3461 
	#SN_£t˘_B©chAdmöResTBE
 "£t˘-B©chAdmöResTBE"

	)

3462 
	#NID_£t˘_B©chAdmöResTBE
 593

	)

3463 
	#OBJ_£t˘_B©chAdmöResTBE
 
OBJ_£t_˘y≥
,75L

	)

3465 
	#SN_£t˘_RegF‹mReqTBE
 "£t˘-RegF‹mReqTBE"

	)

3466 
	#NID_£t˘_RegF‹mReqTBE
 594

	)

3467 
	#OBJ_£t˘_RegF‹mReqTBE
 
OBJ_£t_˘y≥
,76L

	)

3469 
	#SN_£t˘_CîtReqTBE
 "£t˘-CîtReqTBE"

	)

3470 
	#NID_£t˘_CîtReqTBE
 595

	)

3471 
	#OBJ_£t˘_CîtReqTBE
 
OBJ_£t_˘y≥
,77L

	)

3473 
	#SN_£t˘_CîtReqTBEX
 "£t˘-CîtReqTBEX"

	)

3474 
	#NID_£t˘_CîtReqTBEX
 596

	)

3475 
	#OBJ_£t˘_CîtReqTBEX
 
OBJ_£t_˘y≥
,78L

	)

3477 
	#SN_£t˘_CîtResTBE
 "£t˘-CîtResTBE"

	)

3478 
	#NID_£t˘_CîtResTBE
 597

	)

3479 
	#OBJ_£t˘_CîtResTBE
 
OBJ_£t_˘y≥
,79L

	)

3481 
	#SN_£t˘_CRLNŸifiˇti⁄TBS
 "£t˘-CRLNŸifiˇti⁄TBS"

	)

3482 
	#NID_£t˘_CRLNŸifiˇti⁄TBS
 598

	)

3483 
	#OBJ_£t˘_CRLNŸifiˇti⁄TBS
 
OBJ_£t_˘y≥
,80L

	)

3485 
	#SN_£t˘_CRLNŸifiˇti⁄ResTBS
 "£t˘-CRLNŸifiˇti⁄ResTBS"

	)

3486 
	#NID_£t˘_CRLNŸifiˇti⁄ResTBS
 599

	)

3487 
	#OBJ_£t˘_CRLNŸifiˇti⁄ResTBS
 
OBJ_£t_˘y≥
,81L

	)

3489 
	#SN_£t˘_BCIDi°ributi⁄TBS
 "£t˘-BCIDi°ributi⁄TBS"

	)

3490 
	#NID_£t˘_BCIDi°ributi⁄TBS
 600

	)

3491 
	#OBJ_£t˘_BCIDi°ributi⁄TBS
 
OBJ_£t_˘y≥
,82L

	)

3493 
	#SN_£ãxt_gíCry±
 "£ãxt-gíCry±"

	)

3494 
	#LN_£ãxt_gíCry±
 "gíîi¯¸y±ogøm"

	)

3495 
	#NID_£ãxt_gíCry±
 601

	)

3496 
	#OBJ_£ãxt_gíCry±
 
OBJ_£t_msgExt
,1L

	)

3498 
	#SN_£ãxt_miAuth
 "£ãxt-miAuth"

	)

3499 
	#LN_£ãxt_miAuth
 "mîch™àöôüãdáuth"

	)

3500 
	#NID_£ãxt_miAuth
 602

	)

3501 
	#OBJ_£ãxt_miAuth
 
OBJ_£t_msgExt
,3L

	)

3503 
	#SN_£ãxt_pöSecuª
 "£ãxt-pöSecuª"

	)

3504 
	#NID_£ãxt_pöSecuª
 603

	)

3505 
	#OBJ_£ãxt_pöSecuª
 
OBJ_£t_msgExt
,4L

	)

3507 
	#SN_£ãxt_pöAny
 "£ãxt-pöAny"

	)

3508 
	#NID_£ãxt_pöAny
 604

	)

3509 
	#OBJ_£ãxt_pöAny
 
OBJ_£t_msgExt
,5L

	)

3511 
	#SN_£ãxt_åack2
 "£ãxt-åack2"

	)

3512 
	#NID_£ãxt_åack2
 605

	)

3513 
	#OBJ_£ãxt_åack2
 
OBJ_£t_msgExt
,7L

	)

3515 
	#SN_£ãxt_cv
 "£ãxt-cv"

	)

3516 
	#LN_£ãxt_cv
 "addôi⁄Æ vîifiˇti⁄"

	)

3517 
	#NID_£ãxt_cv
 606

	)

3518 
	#OBJ_£ãxt_cv
 
OBJ_£t_msgExt
,8L

	)

3520 
	#SN_£t_pﬁicy_roŸ
 "£t-pﬁicy-roŸ"

	)

3521 
	#NID_£t_pﬁicy_roŸ
 607

	)

3522 
	#OBJ_£t_pﬁicy_roŸ
 
OBJ_£t_pﬁicy
,0L

	)

3524 
	#SN_£tCext_hashedRoŸ
 "£tCext-hashedRoŸ"

	)

3525 
	#NID_£tCext_hashedRoŸ
 608

	)

3526 
	#OBJ_£tCext_hashedRoŸ
 
OBJ_£t_˚πExt
,0L

	)

3528 
	#SN_£tCext_˚πTy≥
 "£tCext-˚πTy≥"

	)

3529 
	#NID_£tCext_˚πTy≥
 609

	)

3530 
	#OBJ_£tCext_˚πTy≥
 
OBJ_£t_˚πExt
,1L

	)

3532 
	#SN_£tCext_mîchD©a
 "£tCext-mîchD©a"

	)

3533 
	#NID_£tCext_mîchD©a
 610

	)

3534 
	#OBJ_£tCext_mîchD©a
 
OBJ_£t_˚πExt
,2L

	)

3536 
	#SN_£tCext_cCîtRequúed
 "£tCext-cCîtRequúed"

	)

3537 
	#NID_£tCext_cCîtRequúed
 611

	)

3538 
	#OBJ_£tCext_cCîtRequúed
 
OBJ_£t_˚πExt
,3L

	)

3540 
	#SN_£tCext_tu¬ñög
 "£tCext-tu¬ñög"

	)

3541 
	#NID_£tCext_tu¬ñög
 612

	)

3542 
	#OBJ_£tCext_tu¬ñög
 
OBJ_£t_˚πExt
,4L

	)

3544 
	#SN_£tCext_£tExt
 "£tCext-£tExt"

	)

3545 
	#NID_£tCext_£tExt
 613

	)

3546 
	#OBJ_£tCext_£tExt
 
OBJ_£t_˚πExt
,5L

	)

3548 
	#SN_£tCext_£tQuÆf
 "£tCext-£tQuÆf"

	)

3549 
	#NID_£tCext_£tQuÆf
 614

	)

3550 
	#OBJ_£tCext_£tQuÆf
 
OBJ_£t_˚πExt
,6L

	)

3552 
	#SN_£tCext_PGWYˇ∑bûôõs
 "£tCext-PGWYˇ∑bûôõs"

	)

3553 
	#NID_£tCext_PGWYˇ∑bûôõs
 615

	)

3554 
	#OBJ_£tCext_PGWYˇ∑bûôõs
 
OBJ_£t_˚πExt
,7L

	)

3556 
	#SN_£tCext_TokíIdítifõr
 "£tCext-TokíIdítifõr"

	)

3557 
	#NID_£tCext_TokíIdítifõr
 616

	)

3558 
	#OBJ_£tCext_TokíIdítifõr
 
OBJ_£t_˚πExt
,8L

	)

3560 
	#SN_£tCext_Tøck2D©a
 "£tCext-Tøck2D©a"

	)

3561 
	#NID_£tCext_Tøck2D©a
 617

	)

3562 
	#OBJ_£tCext_Tøck2D©a
 
OBJ_£t_˚πExt
,9L

	)

3564 
	#SN_£tCext_TokíTy≥
 "£tCext-TokíTy≥"

	)

3565 
	#NID_£tCext_TokíTy≥
 618

	)

3566 
	#OBJ_£tCext_TokíTy≥
 
OBJ_£t_˚πExt
,10L

	)

3568 
	#SN_£tCext_IssuîC≠abûôõs
 "£tCext-IssuîC≠abûôõs"

	)

3569 
	#NID_£tCext_IssuîC≠abûôõs
 619

	)

3570 
	#OBJ_£tCext_IssuîC≠abûôõs
 
OBJ_£t_˚πExt
,11L

	)

3572 
	#SN_£tAâr_Cît
 "£tAâr-Cît"

	)

3573 
	#NID_£tAâr_Cît
 620

	)

3574 
	#OBJ_£tAâr_Cît
 
OBJ_£t_©å
,0L

	)

3576 
	#SN_£tAâr_PGWYˇp
 "£tAâr-PGWYˇp"

	)

3577 
	#LN_£tAâr_PGWYˇp
 "∑ymíàg©eway c≠abûôõs"

	)

3578 
	#NID_£tAâr_PGWYˇp
 621

	)

3579 
	#OBJ_£tAâr_PGWYˇp
 
OBJ_£t_©å
,1L

	)

3581 
	#SN_£tAâr_TokíTy≥
 "£tAâr-TokíTy≥"

	)

3582 
	#NID_£tAâr_TokíTy≥
 622

	)

3583 
	#OBJ_£tAâr_TokíTy≥
 
OBJ_£t_©å
,2L

	)

3585 
	#SN_£tAâr_IssC≠
 "£tAâr-IssC≠"

	)

3586 
	#LN_£tAâr_IssC≠
 "issuî c≠abûôõs"

	)

3587 
	#NID_£tAâr_IssC≠
 623

	)

3588 
	#OBJ_£tAâr_IssC≠
 
OBJ_£t_©å
,3L

	)

3590 
	#SN_£t_roŸKeyThumb
 "£t-roŸKeyThumb"

	)

3591 
	#NID_£t_roŸKeyThumb
 624

	)

3592 
	#OBJ_£t_roŸKeyThumb
 
OBJ_£tAâr_Cît
,0L

	)

3594 
	#SN_£t_addPﬁicy
 "£t-addPﬁicy"

	)

3595 
	#NID_£t_addPﬁicy
 625

	)

3596 
	#OBJ_£t_addPﬁicy
 
OBJ_£tAâr_Cît
,1L

	)

3598 
	#SN_£tAâr_Tokí_EMV
 "£tAâr-Tokí-EMV"

	)

3599 
	#NID_£tAâr_Tokí_EMV
 626

	)

3600 
	#OBJ_£tAâr_Tokí_EMV
 
OBJ_£tAâr_TokíTy≥
,1L

	)

3602 
	#SN_£tAâr_Tokí_B0Prime
 "£tAâr-Tokí-B0Prime"

	)

3603 
	#NID_£tAâr_Tokí_B0Prime
 627

	)

3604 
	#OBJ_£tAâr_Tokí_B0Prime
 
OBJ_£tAâr_TokíTy≥
,2L

	)

3606 
	#SN_£tAâr_IssC≠_CVM
 "£tAâr-IssC≠-CVM"

	)

3607 
	#NID_£tAâr_IssC≠_CVM
 628

	)

3608 
	#OBJ_£tAâr_IssC≠_CVM
 
OBJ_£tAâr_IssC≠
,3L

	)

3610 
	#SN_£tAâr_IssC≠_T2
 "£tAâr-IssC≠-T2"

	)

3611 
	#NID_£tAâr_IssC≠_T2
 629

	)

3612 
	#OBJ_£tAâr_IssC≠_T2
 
OBJ_£tAâr_IssC≠
,4L

	)

3614 
	#SN_£tAâr_IssC≠_Sig
 "£tAâr-IssC≠-Sig"

	)

3615 
	#NID_£tAâr_IssC≠_Sig
 630

	)

3616 
	#OBJ_£tAâr_IssC≠_Sig
 
OBJ_£tAâr_IssC≠
,5L

	)

3618 
	#SN_£tAâr_GíCry±grm
 "£tAâr-GíCry±grm"

	)

3619 
	#LN_£tAâr_GíCry±grm
 "gíî©ê¸y±ogøm"

	)

3620 
	#NID_£tAâr_GíCry±grm
 631

	)

3621 
	#OBJ_£tAâr_GíCry±grm
 
OBJ_£tAâr_IssC≠_CVM
,1L

	)

3623 
	#SN_£tAâr_T2Enc
 "£tAâr-T2Enc"

	)

3624 
	#LN_£tAâr_T2Enc
 "í¸y±edÅøck 2"

	)

3625 
	#NID_£tAâr_T2Enc
 632

	)

3626 
	#OBJ_£tAâr_T2Enc
 
OBJ_£tAâr_IssC≠_T2
,1L

	)

3628 
	#SN_£tAâr_T2˛óπxt
 "£tAâr-T2˛óπxt"

	)

3629 
	#LN_£tAâr_T2˛óπxt
 "˛óπexàåack 2"

	)

3630 
	#NID_£tAâr_T2˛óπxt
 633

	)

3631 
	#OBJ_£tAâr_T2˛óπxt
 
OBJ_£tAâr_IssC≠_T2
,2L

	)

3633 
	#SN_£tAâr_TokICCsig
 "£tAâr-TokICCsig"

	)

3634 
	#LN_£tAâr_TokICCsig
 "ICC o∏tokí sig«tuª"

	)

3635 
	#NID_£tAâr_TokICCsig
 634

	)

3636 
	#OBJ_£tAâr_TokICCsig
 
OBJ_£tAâr_IssC≠_Sig
,1L

	)

3638 
	#SN_£tAâr_SecDevSig
 "£tAâr-SecDevSig"

	)

3639 
	#LN_£tAâr_SecDevSig
 "£cuª devi˚ sig«tuª"

	)

3640 
	#NID_£tAâr_SecDevSig
 635

	)

3641 
	#OBJ_£tAâr_SecDevSig
 
OBJ_£tAâr_IssC≠_Sig
,2L

	)

3643 
	#SN_£t_bønd_IATA_ATA
 "£t-bønd-IATA-ATA"

	)

3644 
	#NID_£t_bønd_IATA_ATA
 636

	)

3645 
	#OBJ_£t_bønd_IATA_ATA
 
OBJ_£t_bønd
,1L

	)

3647 
	#SN_£t_bønd_Döîs
 "£t-bønd-Döîs"

	)

3648 
	#NID_£t_bønd_Döîs
 637

	)

3649 
	#OBJ_£t_bønd_Döîs
 
OBJ_£t_bønd
,30L

	)

3651 
	#SN_£t_bønd_AmîiˇnEx¥ess
 "£t-bønd-AmîiˇnEx¥ess"

	)

3652 
	#NID_£t_bønd_AmîiˇnEx¥ess
 638

	)

3653 
	#OBJ_£t_bønd_AmîiˇnEx¥ess
 
OBJ_£t_bønd
,34L

	)

3655 
	#SN_£t_bønd_JCB
 "£t-bønd-JCB"

	)

3656 
	#NID_£t_bønd_JCB
 639

	)

3657 
	#OBJ_£t_bønd_JCB
 
OBJ_£t_bønd
,35L

	)

3659 
	#SN_£t_bønd_Viß
 "£t-bønd-Viß"

	)

3660 
	#NID_£t_bønd_Viß
 640

	)

3661 
	#OBJ_£t_bønd_Viß
 
OBJ_£t_bønd
,4L

	)

3663 
	#SN_£t_bønd_Ma°îC¨d
 "£t-bønd-Ma°îC¨d"

	)

3664 
	#NID_£t_bønd_Ma°îC¨d
 641

	)

3665 
	#OBJ_£t_bønd_Ma°îC¨d
 
OBJ_£t_bønd
,5L

	)

3667 
	#SN_£t_bønd_Novus
 "£t-bønd-Novus"

	)

3668 
	#NID_£t_bønd_Novus
 642

	)

3669 
	#OBJ_£t_bønd_Novus
 
OBJ_£t_bønd
,6011L

	)

3671 
	#SN_des_cdmf
 "DES-CDMF"

	)

3672 
	#LN_des_cdmf
 "des-cdmf"

	)

3673 
	#NID_des_cdmf
 643

	)

3674 
	#OBJ_des_cdmf
 
OBJ_rßdsi
,3L,10L

	)

3676 
	#SN_rßOAEPEn¸y±i⁄SET
 "rßOAEPEn¸y±i⁄SET"

	)

3677 
	#NID_rßOAEPEn¸y±i⁄SET
 644

	)

3678 
	#OBJ_rßOAEPEn¸y±i⁄SET
 
OBJ_rßdsi
,1L,1L,6L

	)

3680 
	#SN_ù£c3
 "OakÀy-EC2N-3"

	)

3681 
	#LN_ù£c3
 "ù£c3"

	)

3682 
	#NID_ù£c3
 749

	)

3684 
	#SN_ù£c4
 "OakÀy-EC2N-4"

	)

3685 
	#LN_ù£c4
 "ù£c4"

	)

3686 
	#NID_ù£c4
 750

	)

3688 
	#SN_whúÕoﬁ
 "whúÕoﬁ"

	)

3689 
	#NID_whúÕoﬁ
 804

	)

3690 
	#OBJ_whúÕoﬁ
 
OBJ_iso
,0L,10118L,3L,0L,55L

	)

3692 
	#SN_¸y±›ro
 "¸y±›ro"

	)

3693 
	#NID_¸y±›ro
 805

	)

3694 
	#OBJ_¸y±›ro
 
OBJ_membî_body
,643L,2L,2L

	)

3696 
	#SN_¸y±ocom
 "¸y±ocom"

	)

3697 
	#NID_¸y±ocom
 806

	)

3698 
	#OBJ_¸y±ocom
 
OBJ_membî_body
,643L,2L,9L

	)

3700 
	#SN_id_tc26
 "id-tc26"

	)

3701 
	#NID_id_tc26
 974

	)

3702 
	#OBJ_id_tc26
 
OBJ_membî_body
,643L,7L,1L

	)

3704 
	#SN_id_Go°R3411_94_wôh_Go°R3410_2001
 "id-Go°R3411-94-wôh-Go°R3410-2001"

	)

3705 
	#LN_id_Go°R3411_94_wôh_Go°R3410_2001
 "GOST R 34.11-94 wôh GOST R 34.10-2001"

	)

3706 
	#NID_id_Go°R3411_94_wôh_Go°R3410_2001
 807

	)

3707 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_2001
 
OBJ_¸y±›ro
,3L

	)

3709 
	#SN_id_Go°R3411_94_wôh_Go°R3410_94
 "id-Go°R3411-94-wôh-Go°R3410-94"

	)

3710 
	#LN_id_Go°R3411_94_wôh_Go°R3410_94
 "GOST R 34.11-94 wôh GOST R 34.10-94"

	)

3711 
	#NID_id_Go°R3411_94_wôh_Go°R3410_94
 808

	)

3712 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_94
 
OBJ_¸y±›ro
,4L

	)

3714 
	#SN_id_Go°R3411_94
 "md_go°94"

	)

3715 
	#LN_id_Go°R3411_94
 "GOST R 34.11-94"

	)

3716 
	#NID_id_Go°R3411_94
 809

	)

3717 
	#OBJ_id_Go°R3411_94
 
OBJ_¸y±›ro
,9L

	)

3719 
	#SN_id_HMACGo°R3411_94
 "id-HMACGo°R3411-94"

	)

3720 
	#LN_id_HMACGo°R3411_94
 "HMAC GOST 34.11-94"

	)

3721 
	#NID_id_HMACGo°R3411_94
 810

	)

3722 
	#OBJ_id_HMACGo°R3411_94
 
OBJ_¸y±›ro
,10L

	)

3724 
	#SN_id_Go°R3410_2001
 "go°2001"

	)

3725 
	#LN_id_Go°R3410_2001
 "GOST R 34.10-2001"

	)

3726 
	#NID_id_Go°R3410_2001
 811

	)

3727 
	#OBJ_id_Go°R3410_2001
 
OBJ_¸y±›ro
,19L

	)

3729 
	#SN_id_Go°R3410_94
 "go°94"

	)

3730 
	#LN_id_Go°R3410_94
 "GOST R 34.10-94"

	)

3731 
	#NID_id_Go°R3410_94
 812

	)

3732 
	#OBJ_id_Go°R3410_94
 
OBJ_¸y±›ro
,20L

	)

3734 
	#SN_id_Go°28147_89
 "go°89"

	)

3735 
	#LN_id_Go°28147_89
 "GOST 28147-89"

	)

3736 
	#NID_id_Go°28147_89
 813

	)

3737 
	#OBJ_id_Go°28147_89
 
OBJ_¸y±›ro
,21L

	)

3739 
	#SN_go°89_˙t
 "go°89-˙t"

	)

3740 
	#NID_go°89_˙t
 814

	)

3742 
	#SN_go°89_˙t_12
 "go°89-˙t-12"

	)

3743 
	#NID_go°89_˙t_12
 975

	)

3745 
	#SN_go°89_cbc
 "go°89-cbc"

	)

3746 
	#NID_go°89_cbc
 1009

	)

3748 
	#SN_go°89_ecb
 "go°89-ecb"

	)

3749 
	#NID_go°89_ecb
 1010

	)

3751 
	#SN_go°89_˘r
 "go°89-˘r"

	)

3752 
	#NID_go°89_˘r
 1011

	)

3754 
	#SN_id_Go°28147_89_MAC
 "go°-mac"

	)

3755 
	#LN_id_Go°28147_89_MAC
 "GOST 28147-89 MAC"

	)

3756 
	#NID_id_Go°28147_89_MAC
 815

	)

3757 
	#OBJ_id_Go°28147_89_MAC
 
OBJ_¸y±›ro
,22L

	)

3759 
	#SN_go°_mac_12
 "go°-mac-12"

	)

3760 
	#NID_go°_mac_12
 976

	)

3762 
	#SN_id_Go°R3411_94_¥f
 "¥f-go°r3411-94"

	)

3763 
	#LN_id_Go°R3411_94_¥f
 "GOST R 34.11-94 PRF"

	)

3764 
	#NID_id_Go°R3411_94_¥f
 816

	)

3765 
	#OBJ_id_Go°R3411_94_¥f
 
OBJ_¸y±›ro
,23L

	)

3767 
	#SN_id_Go°R3410_2001DH
 "id-Go°R3410-2001DH"

	)

3768 
	#LN_id_Go°R3410_2001DH
 "GOST R 34.10-2001 DH"

	)

3769 
	#NID_id_Go°R3410_2001DH
 817

	)

3770 
	#OBJ_id_Go°R3410_2001DH
 
OBJ_¸y±›ro
,98L

	)

3772 
	#SN_id_Go°R3410_94DH
 "id-Go°R3410-94DH"

	)

3773 
	#LN_id_Go°R3410_94DH
 "GOST R 34.10-94 DH"

	)

3774 
	#NID_id_Go°R3410_94DH
 818

	)

3775 
	#OBJ_id_Go°R3410_94DH
 
OBJ_¸y±›ro
,99L

	)

3777 
	#SN_id_Go°28147_89_Cry±oPro_KeyMeshög
 "id-Go°28147-89-Cry±oPro-KeyMeshög"

	)

3778 
	#NID_id_Go°28147_89_Cry±oPro_KeyMeshög
 819

	)

3779 
	#OBJ_id_Go°28147_89_Cry±oPro_KeyMeshög
 
OBJ_¸y±›ro
,14L,1L

	)

3781 
	#SN_id_Go°28147_89_N⁄e_KeyMeshög
 "id-Go°28147-89-N⁄e-KeyMeshög"

	)

3782 
	#NID_id_Go°28147_89_N⁄e_KeyMeshög
 820

	)

3783 
	#OBJ_id_Go°28147_89_N⁄e_KeyMeshög
 
OBJ_¸y±›ro
,14L,0L

	)

3785 
	#SN_id_Go°R3411_94_Te°P¨amSë
 "id-Go°R3411-94-Te°P¨amSë"

	)

3786 
	#NID_id_Go°R3411_94_Te°P¨amSë
 821

	)

3787 
	#OBJ_id_Go°R3411_94_Te°P¨amSë
 
OBJ_¸y±›ro
,30L,0L

	)

3789 
	#SN_id_Go°R3411_94_Cry±oProP¨amSë
 "id-Go°R3411-94-Cry±oProP¨amSë"

	)

3790 
	#NID_id_Go°R3411_94_Cry±oProP¨amSë
 822

	)

3791 
	#OBJ_id_Go°R3411_94_Cry±oProP¨amSë
 
OBJ_¸y±›ro
,30L,1L

	)

3793 
	#SN_id_Go°28147_89_Te°P¨amSë
 "id-Go°28147-89-Te°P¨amSë"

	)

3794 
	#NID_id_Go°28147_89_Te°P¨amSë
 823

	)

3795 
	#OBJ_id_Go°28147_89_Te°P¨amSë
 
OBJ_¸y±›ro
,31L,0L

	)

3797 
	#SN_id_Go°28147_89_Cry±oPro_A_P¨amSë
 "id-Go°28147-89-Cry±oPro-A-P¨amSë"

	)

3798 
	#NID_id_Go°28147_89_Cry±oPro_A_P¨amSë
 824

	)

3799 
	#OBJ_id_Go°28147_89_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,31L,1L

	)

3801 
	#SN_id_Go°28147_89_Cry±oPro_B_P¨amSë
 "id-Go°28147-89-Cry±oPro-B-P¨amSë"

	)

3802 
	#NID_id_Go°28147_89_Cry±oPro_B_P¨amSë
 825

	)

3803 
	#OBJ_id_Go°28147_89_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,31L,2L

	)

3805 
	#SN_id_Go°28147_89_Cry±oPro_C_P¨amSë
 "id-Go°28147-89-Cry±oPro-C-P¨amSë"

	)

3806 
	#NID_id_Go°28147_89_Cry±oPro_C_P¨amSë
 826

	)

3807 
	#OBJ_id_Go°28147_89_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,31L,3L

	)

3809 
	#SN_id_Go°28147_89_Cry±oPro_D_P¨amSë
 "id-Go°28147-89-Cry±oPro-D-P¨amSë"

	)

3810 
	#NID_id_Go°28147_89_Cry±oPro_D_P¨amSë
 827

	)

3811 
	#OBJ_id_Go°28147_89_Cry±oPro_D_P¨amSë
 
OBJ_¸y±›ro
,31L,4L

	)

3813 
	#SN_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 "id-Go°28147-89-Cry±oPro-Osˇr-1-1-P¨amSë"

	)

3814 
	#NID_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 828

	)

3815 
	#OBJ_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 
OBJ_¸y±›ro
,31L,5L

	)

3817 
	#SN_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 "id-Go°28147-89-Cry±oPro-Osˇr-1-0-P¨amSë"

	)

3818 
	#NID_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 829

	)

3819 
	#OBJ_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 
OBJ_¸y±›ro
,31L,6L

	)

3821 
	#SN_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 "id-Go°28147-89-Cry±oPro-RIC-1-P¨amSë"

	)

3822 
	#NID_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 830

	)

3823 
	#OBJ_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 
OBJ_¸y±›ro
,31L,7L

	)

3825 
	#SN_id_Go°R3410_94_Te°P¨amSë
 "id-Go°R3410-94-Te°P¨amSë"

	)

3826 
	#NID_id_Go°R3410_94_Te°P¨amSë
 831

	)

3827 
	#OBJ_id_Go°R3410_94_Te°P¨amSë
 
OBJ_¸y±›ro
,32L,0L

	)

3829 
	#SN_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 "id-Go°R3410-94-Cry±oPro-A-P¨amSë"

	)

3830 
	#NID_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 832

	)

3831 
	#OBJ_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,32L,2L

	)

3833 
	#SN_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 "id-Go°R3410-94-Cry±oPro-B-P¨amSë"

	)

3834 
	#NID_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 833

	)

3835 
	#OBJ_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,32L,3L

	)

3837 
	#SN_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 "id-Go°R3410-94-Cry±oPro-C-P¨amSë"

	)

3838 
	#NID_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 834

	)

3839 
	#OBJ_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,32L,4L

	)

3841 
	#SN_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 "id-Go°R3410-94-Cry±oPro-D-P¨amSë"

	)

3842 
	#NID_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 835

	)

3843 
	#OBJ_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 
OBJ_¸y±›ro
,32L,5L

	)

3845 
	#SN_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchA-P¨amSë"

	)

3846 
	#NID_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 836

	)

3847 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 
OBJ_¸y±›ro
,33L,1L

	)

3849 
	#SN_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchB-P¨amSë"

	)

3850 
	#NID_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 837

	)

3851 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 
OBJ_¸y±›ro
,33L,2L

	)

3853 
	#SN_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchC-P¨amSë"

	)

3854 
	#NID_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 838

	)

3855 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 
OBJ_¸y±›ro
,33L,3L

	)

3857 
	#SN_id_Go°R3410_2001_Te°P¨amSë
 "id-Go°R3410-2001-Te°P¨amSë"

	)

3858 
	#NID_id_Go°R3410_2001_Te°P¨amSë
 839

	)

3859 
	#OBJ_id_Go°R3410_2001_Te°P¨amSë
 
OBJ_¸y±›ro
,35L,0L

	)

3861 
	#SN_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-A-P¨amSë"

	)

3862 
	#NID_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 840

	)

3863 
	#OBJ_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,35L,1L

	)

3865 
	#SN_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-B-P¨amSë"

	)

3866 
	#NID_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 841

	)

3867 
	#OBJ_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,35L,2L

	)

3869 
	#SN_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-C-P¨amSë"

	)

3870 
	#NID_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 842

	)

3871 
	#OBJ_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,35L,3L

	)

3873 
	#SN_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-XchA-P¨amSë"

	)

3874 
	#NID_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 843

	)

3875 
	#OBJ_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 
OBJ_¸y±›ro
,36L,0L

	)

3877 
	#SN_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-XchB-P¨amSë"

	)

3878 
	#NID_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 844

	)

3879 
	#OBJ_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 
OBJ_¸y±›ro
,36L,1L

	)

3881 
	#SN_id_Go°R3410_94_a
 "id-Go°R3410-94-a"

	)

3882 
	#NID_id_Go°R3410_94_a
 845

	)

3883 
	#OBJ_id_Go°R3410_94_a
 
OBJ_id_Go°R3410_94
,1L

	)

3885 
	#SN_id_Go°R3410_94_aBis
 "id-Go°R3410-94-aBis"

	)

3886 
	#NID_id_Go°R3410_94_aBis
 846

	)

3887 
	#OBJ_id_Go°R3410_94_aBis
 
OBJ_id_Go°R3410_94
,2L

	)

3889 
	#SN_id_Go°R3410_94_b
 "id-Go°R3410-94-b"

	)

3890 
	#NID_id_Go°R3410_94_b
 847

	)

3891 
	#OBJ_id_Go°R3410_94_b
 
OBJ_id_Go°R3410_94
,3L

	)

3893 
	#SN_id_Go°R3410_94_bBis
 "id-Go°R3410-94-bBis"

	)

3894 
	#NID_id_Go°R3410_94_bBis
 848

	)

3895 
	#OBJ_id_Go°R3410_94_bBis
 
OBJ_id_Go°R3410_94
,4L

	)

3897 
	#SN_id_Go°28147_89_cc
 "id-Go°28147-89-cc"

	)

3898 
	#LN_id_Go°28147_89_cc
 "GOST 28147-89 Cry±ocom P¨amSë"

	)

3899 
	#NID_id_Go°28147_89_cc
 849

	)

3900 
	#OBJ_id_Go°28147_89_cc
 
OBJ_¸y±ocom
,1L,6L,1L

	)

3902 
	#SN_id_Go°R3410_94_cc
 "go°94cc"

	)

3903 
	#LN_id_Go°R3410_94_cc
 "GOST 34.10-94 Cry±ocom"

	)

3904 
	#NID_id_Go°R3410_94_cc
 850

	)

3905 
	#OBJ_id_Go°R3410_94_cc
 
OBJ_¸y±ocom
,1L,5L,3L

	)

3907 
	#SN_id_Go°R3410_2001_cc
 "go°2001cc"

	)

3908 
	#LN_id_Go°R3410_2001_cc
 "GOST 34.10-2001 Cry±ocom"

	)

3909 
	#NID_id_Go°R3410_2001_cc
 851

	)

3910 
	#OBJ_id_Go°R3410_2001_cc
 
OBJ_¸y±ocom
,1L,5L,4L

	)

3912 
	#SN_id_Go°R3411_94_wôh_Go°R3410_94_cc
 "id-Go°R3411-94-wôh-Go°R3410-94-cc"

	)

3913 
	#LN_id_Go°R3411_94_wôh_Go°R3410_94_cc
 "GOST R 34.11-94 wôh GOST R 34.10-94 Cry±ocom"

	)

3914 
	#NID_id_Go°R3411_94_wôh_Go°R3410_94_cc
 852

	)

3915 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_94_cc
 
OBJ_¸y±ocom
,1L,3L,3L

	)

3917 
	#SN_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 "id-Go°R3411-94-wôh-Go°R3410-2001-cc"

	)

3918 
	#LN_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 "GOST R 34.11-94 wôh GOST R 34.10-2001 Cry±ocom"

	)

3919 
	#NID_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 853

	)

3920 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 
OBJ_¸y±ocom
,1L,3L,4L

	)

3922 
	#SN_id_Go°R3410_2001_P¨amSë_cc
 "id-Go°R3410-2001-P¨amSë-cc"

	)

3923 
	#LN_id_Go°R3410_2001_P¨amSë_cc
 "GOST R 3410-2001 P¨amëî Së Cry±ocom"

	)

3924 
	#NID_id_Go°R3410_2001_P¨amSë_cc
 854

	)

3925 
	#OBJ_id_Go°R3410_2001_P¨amSë_cc
 
OBJ_¸y±ocom
,1L,8L,1L

	)

3927 
	#SN_id_tc26_Æg‹ôhms
 "id-tc26-Æg‹ôhms"

	)

3928 
	#NID_id_tc26_Æg‹ôhms
 977

	)

3929 
	#OBJ_id_tc26_Æg‹ôhms
 
OBJ_id_tc26
,1L

	)

3931 
	#SN_id_tc26_sign
 "id-tc26-sign"

	)

3932 
	#NID_id_tc26_sign
 978

	)

3933 
	#OBJ_id_tc26_sign
 
OBJ_id_tc26_Æg‹ôhms
,1L

	)

3935 
	#SN_id_Go°R3410_2012_256
 "go°2012_256"

	)

3936 
	#LN_id_Go°R3410_2012_256
 "GOST R 34.10-2012 wôh 256 bô modulus"

	)

3937 
	#NID_id_Go°R3410_2012_256
 979

	)

3938 
	#OBJ_id_Go°R3410_2012_256
 
OBJ_id_tc26_sign
,1L

	)

3940 
	#SN_id_Go°R3410_2012_512
 "go°2012_512"

	)

3941 
	#LN_id_Go°R3410_2012_512
 "GOST R 34.10-2012 wôh 512 bô modulus"

	)

3942 
	#NID_id_Go°R3410_2012_512
 980

	)

3943 
	#OBJ_id_Go°R3410_2012_512
 
OBJ_id_tc26_sign
,2L

	)

3945 
	#SN_id_tc26_dige°
 "id-tc26-dige°"

	)

3946 
	#NID_id_tc26_dige°
 981

	)

3947 
	#OBJ_id_tc26_dige°
 
OBJ_id_tc26_Æg‹ôhms
,2L

	)

3949 
	#SN_id_Go°R3411_2012_256
 "md_go°12_256"

	)

3950 
	#LN_id_Go°R3411_2012_256
 "GOST R 34.11-2012 wôh 256 bô hash"

	)

3951 
	#NID_id_Go°R3411_2012_256
 982

	)

3952 
	#OBJ_id_Go°R3411_2012_256
 
OBJ_id_tc26_dige°
,2L

	)

3954 
	#SN_id_Go°R3411_2012_512
 "md_go°12_512"

	)

3955 
	#LN_id_Go°R3411_2012_512
 "GOST R 34.11-2012 wôh 512 bô hash"

	)

3956 
	#NID_id_Go°R3411_2012_512
 983

	)

3957 
	#OBJ_id_Go°R3411_2012_512
 
OBJ_id_tc26_dige°
,3L

	)

3959 
	#SN_id_tc26_signwôhdige°
 "id-tc26-signwôhdige°"

	)

3960 
	#NID_id_tc26_signwôhdige°
 984

	)

3961 
	#OBJ_id_tc26_signwôhdige°
 
OBJ_id_tc26_Æg‹ôhms
,3L

	)

3963 
	#SN_id_tc26_signwôhdige°_go°3410_2012_256
 "id-tc26-signwôhdige°-go°3410-2012-256"

	)

3964 
	#LN_id_tc26_signwôhdige°_go°3410_2012_256
 "GOST R 34.10-2012 wôh GOST R 34.11-2012 (256 bô)"

	)

3965 
	#NID_id_tc26_signwôhdige°_go°3410_2012_256
 985

	)

3966 
	#OBJ_id_tc26_signwôhdige°_go°3410_2012_256
 
OBJ_id_tc26_signwôhdige°
,2L

	)

3968 
	#SN_id_tc26_signwôhdige°_go°3410_2012_512
 "id-tc26-signwôhdige°-go°3410-2012-512"

	)

3969 
	#LN_id_tc26_signwôhdige°_go°3410_2012_512
 "GOST R 34.10-2012 wôh GOST R 34.11-2012 (512 bô)"

	)

3970 
	#NID_id_tc26_signwôhdige°_go°3410_2012_512
 986

	)

3971 
	#OBJ_id_tc26_signwôhdige°_go°3410_2012_512
 
OBJ_id_tc26_signwôhdige°
,3L

	)

3973 
	#SN_id_tc26_mac
 "id-tc26-mac"

	)

3974 
	#NID_id_tc26_mac
 987

	)

3975 
	#OBJ_id_tc26_mac
 
OBJ_id_tc26_Æg‹ôhms
,4L

	)

3977 
	#SN_id_tc26_hmac_go°_3411_2012_256
 "id-tc26-hmac-go°-3411-2012-256"

	)

3978 
	#LN_id_tc26_hmac_go°_3411_2012_256
 "HMAC GOST 34.11-2012 256 bô"

	)

3979 
	#NID_id_tc26_hmac_go°_3411_2012_256
 988

	)

3980 
	#OBJ_id_tc26_hmac_go°_3411_2012_256
 
OBJ_id_tc26_mac
,1L

	)

3982 
	#SN_id_tc26_hmac_go°_3411_2012_512
 "id-tc26-hmac-go°-3411-2012-512"

	)

3983 
	#LN_id_tc26_hmac_go°_3411_2012_512
 "HMAC GOST 34.11-2012 512 bô"

	)

3984 
	#NID_id_tc26_hmac_go°_3411_2012_512
 989

	)

3985 
	#OBJ_id_tc26_hmac_go°_3411_2012_512
 
OBJ_id_tc26_mac
,2L

	)

3987 
	#SN_id_tc26_cùhî
 "id-tc26-cùhî"

	)

3988 
	#NID_id_tc26_cùhî
 990

	)

3989 
	#OBJ_id_tc26_cùhî
 
OBJ_id_tc26_Æg‹ôhms
,5L

	)

3991 
	#SN_id_tc26_agªemít
 "id-tc26-agªemít"

	)

3992 
	#NID_id_tc26_agªemít
 991

	)

3993 
	#OBJ_id_tc26_agªemít
 
OBJ_id_tc26_Æg‹ôhms
,6L

	)

3995 
	#SN_id_tc26_agªemít_go°_3410_2012_256
 "id-tc26-agªemít-go°-3410-2012-256"

	)

3996 
	#NID_id_tc26_agªemít_go°_3410_2012_256
 992

	)

3997 
	#OBJ_id_tc26_agªemít_go°_3410_2012_256
 
OBJ_id_tc26_agªemít
,1L

	)

3999 
	#SN_id_tc26_agªemít_go°_3410_2012_512
 "id-tc26-agªemít-go°-3410-2012-512"

	)

4000 
	#NID_id_tc26_agªemít_go°_3410_2012_512
 993

	)

4001 
	#OBJ_id_tc26_agªemít_go°_3410_2012_512
 
OBJ_id_tc26_agªemít
,2L

	)

4003 
	#SN_id_tc26_c⁄°™ts
 "id-tc26-c⁄°™ts"

	)

4004 
	#NID_id_tc26_c⁄°™ts
 994

	)

4005 
	#OBJ_id_tc26_c⁄°™ts
 
OBJ_id_tc26
,2L

	)

4007 
	#SN_id_tc26_sign_c⁄°™ts
 "id-tc26-sign-c⁄°™ts"

	)

4008 
	#NID_id_tc26_sign_c⁄°™ts
 995

	)

4009 
	#OBJ_id_tc26_sign_c⁄°™ts
 
OBJ_id_tc26_c⁄°™ts
,1L

	)

4011 
	#SN_id_tc26_go°_3410_2012_512_c⁄°™ts
 "id-tc26-go°-3410-2012-512-c⁄°™ts"

	)

4012 
	#NID_id_tc26_go°_3410_2012_512_c⁄°™ts
 996

	)

4013 
	#OBJ_id_tc26_go°_3410_2012_512_c⁄°™ts
 
OBJ_id_tc26_sign_c⁄°™ts
,2L

	)

4015 
	#SN_id_tc26_go°_3410_2012_512_∑ømSëTe°
 "id-tc26-go°-3410-2012-512-∑ømSëTe°"

	)

4016 
	#LN_id_tc26_go°_3410_2012_512_∑ømSëTe°
 "GOST R 34.10-2012 (512 bôËã°ögÖ¨amëî së"

	)

4017 
	#NID_id_tc26_go°_3410_2012_512_∑ømSëTe°
 997

	)

4018 
	#OBJ_id_tc26_go°_3410_2012_512_∑ømSëTe°
 
OBJ_id_tc26_go°_3410_2012_512_c⁄°™ts
,0L

	)

4020 
	#SN_id_tc26_go°_3410_2012_512_∑ømSëA
 "id-tc26-go°-3410-2012-512-∑ømSëA"

	)

4021 
	#LN_id_tc26_go°_3410_2012_512_∑ømSëA
 "GOST R 34.10-2012 (512 bôËP¨amSë A"

	)

4022 
	#NID_id_tc26_go°_3410_2012_512_∑ømSëA
 998

	)

4023 
	#OBJ_id_tc26_go°_3410_2012_512_∑ømSëA
 
OBJ_id_tc26_go°_3410_2012_512_c⁄°™ts
,1L

	)

4025 
	#SN_id_tc26_go°_3410_2012_512_∑ømSëB
 "id-tc26-go°-3410-2012-512-∑ømSëB"

	)

4026 
	#LN_id_tc26_go°_3410_2012_512_∑ømSëB
 "GOST R 34.10-2012 (512 bôËP¨amSë B"

	)

4027 
	#NID_id_tc26_go°_3410_2012_512_∑ømSëB
 999

	)

4028 
	#OBJ_id_tc26_go°_3410_2012_512_∑ømSëB
 
OBJ_id_tc26_go°_3410_2012_512_c⁄°™ts
,2L

	)

4030 
	#SN_id_tc26_dige°_c⁄°™ts
 "id-tc26-dige°-c⁄°™ts"

	)

4031 
	#NID_id_tc26_dige°_c⁄°™ts
 1000

	)

4032 
	#OBJ_id_tc26_dige°_c⁄°™ts
 
OBJ_id_tc26_c⁄°™ts
,2L

	)

4034 
	#SN_id_tc26_cùhî_c⁄°™ts
 "id-tc26-cùhî-c⁄°™ts"

	)

4035 
	#NID_id_tc26_cùhî_c⁄°™ts
 1001

	)

4036 
	#OBJ_id_tc26_cùhî_c⁄°™ts
 
OBJ_id_tc26_c⁄°™ts
,5L

	)

4038 
	#SN_id_tc26_go°_28147_c⁄°™ts
 "id-tc26-go°-28147-c⁄°™ts"

	)

4039 
	#NID_id_tc26_go°_28147_c⁄°™ts
 1002

	)

4040 
	#OBJ_id_tc26_go°_28147_c⁄°™ts
 
OBJ_id_tc26_cùhî_c⁄°™ts
,1L

	)

4042 
	#SN_id_tc26_go°_28147_∑øm_Z
 "id-tc26-go°-28147-∑øm-Z"

	)

4043 
	#LN_id_tc26_go°_28147_∑øm_Z
 "GOST 28147-89 TC26Ö¨amëî së"

	)

4044 
	#NID_id_tc26_go°_28147_∑øm_Z
 1003

	)

4045 
	#OBJ_id_tc26_go°_28147_∑øm_Z
 
OBJ_id_tc26_go°_28147_c⁄°™ts
,1L

	)

4047 
	#SN_INN
 "INN"

	)

4048 
	#LN_INN
 "INN"

	)

4049 
	#NID_INN
 1004

	)

4050 
	#OBJ_INN
 
OBJ_membî_body
,643L,3L,131L,1L,1L

	)

4052 
	#SN_OGRN
 "OGRN"

	)

4053 
	#LN_OGRN
 "OGRN"

	)

4054 
	#NID_OGRN
 1005

	)

4055 
	#OBJ_OGRN
 
OBJ_membî_body
,643L,100L,1L

	)

4057 
	#SN_SNILS
 "SNILS"

	)

4058 
	#LN_SNILS
 "SNILS"

	)

4059 
	#NID_SNILS
 1006

	)

4060 
	#OBJ_SNILS
 
OBJ_membî_body
,643L,100L,3L

	)

4062 
	#SN_subje˘SignToﬁ
 "subje˘SignToﬁ"

	)

4063 
	#LN_subje˘SignToﬁ
 "Signög Toﬁ o‡Subje˘"

	)

4064 
	#NID_subje˘SignToﬁ
 1007

	)

4065 
	#OBJ_subje˘SignToﬁ
 
OBJ_membî_body
,643L,100L,111L

	)

4067 
	#SN_issuîSignToﬁ
 "issuîSignToﬁ"

	)

4068 
	#LN_issuîSignToﬁ
 "Signög Toﬁ o‡Issuî"

	)

4069 
	#NID_issuîSignToﬁ
 1008

	)

4070 
	#OBJ_issuîSignToﬁ
 
OBJ_membî_body
,643L,100L,112L

	)

4072 
	#SN_gøssh›≥r_ecb
 "gøssh›≥r-ecb"

	)

4073 
	#NID_gøssh›≥r_ecb
 1012

	)

4075 
	#SN_gøssh›≥r_˘r
 "gøssh›≥r-˘r"

	)

4076 
	#NID_gøssh›≥r_˘r
 1013

	)

4078 
	#SN_gøssh›≥r_ofb
 "gøssh›≥r-ofb"

	)

4079 
	#NID_gøssh›≥r_ofb
 1014

	)

4081 
	#SN_gøssh›≥r_cbc
 "gøssh›≥r-cbc"

	)

4082 
	#NID_gøssh›≥r_cbc
 1015

	)

4084 
	#SN_gøssh›≥r_cfb
 "gøssh›≥r-cfb"

	)

4085 
	#NID_gøssh›≥r_cfb
 1016

	)

4087 
	#SN_gøssh›≥r_mac
 "gøssh›≥r-mac"

	)

4088 
	#NID_gøssh›≥r_mac
 1017

	)

4090 
	#SN_ˇmñlü_128_cbc
 "CAMELLIA-128-CBC"

	)

4091 
	#LN_ˇmñlü_128_cbc
 "ˇmñlü-128-cbc"

	)

4092 
	#NID_ˇmñlü_128_cbc
 751

	)

4093 
	#OBJ_ˇmñlü_128_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,2L

	)

4095 
	#SN_ˇmñlü_192_cbc
 "CAMELLIA-192-CBC"

	)

4096 
	#LN_ˇmñlü_192_cbc
 "ˇmñlü-192-cbc"

	)

4097 
	#NID_ˇmñlü_192_cbc
 752

	)

4098 
	#OBJ_ˇmñlü_192_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,3L

	)

4100 
	#SN_ˇmñlü_256_cbc
 "CAMELLIA-256-CBC"

	)

4101 
	#LN_ˇmñlü_256_cbc
 "ˇmñlü-256-cbc"

	)

4102 
	#NID_ˇmñlü_256_cbc
 753

	)

4103 
	#OBJ_ˇmñlü_256_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,4L

	)

4105 
	#SN_id_ˇmñlü128_wøp
 "id-ˇmñlü128-wøp"

	)

4106 
	#NID_id_ˇmñlü128_wøp
 907

	)

4107 
	#OBJ_id_ˇmñlü128_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,2L

	)

4109 
	#SN_id_ˇmñlü192_wøp
 "id-ˇmñlü192-wøp"

	)

4110 
	#NID_id_ˇmñlü192_wøp
 908

	)

4111 
	#OBJ_id_ˇmñlü192_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,3L

	)

4113 
	#SN_id_ˇmñlü256_wøp
 "id-ˇmñlü256-wøp"

	)

4114 
	#NID_id_ˇmñlü256_wøp
 909

	)

4115 
	#OBJ_id_ˇmñlü256_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,4L

	)

4117 
	#OBJ_¡t_ds
 0L,3L,4401L,5L

	)

4119 
	#OBJ_ˇmñlü
 
OBJ_¡t_ds
,3L,1L,9L

	)

4121 
	#SN_ˇmñlü_128_ecb
 "CAMELLIA-128-ECB"

	)

4122 
	#LN_ˇmñlü_128_ecb
 "ˇmñlü-128-ecb"

	)

4123 
	#NID_ˇmñlü_128_ecb
 754

	)

4124 
	#OBJ_ˇmñlü_128_ecb
 
OBJ_ˇmñlü
,1L

	)

4126 
	#SN_ˇmñlü_128_ofb128
 "CAMELLIA-128-OFB"

	)

4127 
	#LN_ˇmñlü_128_ofb128
 "ˇmñlü-128-ofb"

	)

4128 
	#NID_ˇmñlü_128_ofb128
 766

	)

4129 
	#OBJ_ˇmñlü_128_ofb128
 
OBJ_ˇmñlü
,3L

	)

4131 
	#SN_ˇmñlü_128_cfb128
 "CAMELLIA-128-CFB"

	)

4132 
	#LN_ˇmñlü_128_cfb128
 "ˇmñlü-128-cfb"

	)

4133 
	#NID_ˇmñlü_128_cfb128
 757

	)

4134 
	#OBJ_ˇmñlü_128_cfb128
 
OBJ_ˇmñlü
,4L

	)

4136 
	#SN_ˇmñlü_128_gcm
 "CAMELLIA-128-GCM"

	)

4137 
	#LN_ˇmñlü_128_gcm
 "ˇmñlü-128-gcm"

	)

4138 
	#NID_ˇmñlü_128_gcm
 961

	)

4139 
	#OBJ_ˇmñlü_128_gcm
 
OBJ_ˇmñlü
,6L

	)

4141 
	#SN_ˇmñlü_128_ccm
 "CAMELLIA-128-CCM"

	)

4142 
	#LN_ˇmñlü_128_ccm
 "ˇmñlü-128-ccm"

	)

4143 
	#NID_ˇmñlü_128_ccm
 962

	)

4144 
	#OBJ_ˇmñlü_128_ccm
 
OBJ_ˇmñlü
,7L

	)

4146 
	#SN_ˇmñlü_128_˘r
 "CAMELLIA-128-CTR"

	)

4147 
	#LN_ˇmñlü_128_˘r
 "ˇmñlü-128-˘r"

	)

4148 
	#NID_ˇmñlü_128_˘r
 963

	)

4149 
	#OBJ_ˇmñlü_128_˘r
 
OBJ_ˇmñlü
,9L

	)

4151 
	#SN_ˇmñlü_128_cmac
 "CAMELLIA-128-CMAC"

	)

4152 
	#LN_ˇmñlü_128_cmac
 "ˇmñlü-128-cmac"

	)

4153 
	#NID_ˇmñlü_128_cmac
 964

	)

4154 
	#OBJ_ˇmñlü_128_cmac
 
OBJ_ˇmñlü
,10L

	)

4156 
	#SN_ˇmñlü_192_ecb
 "CAMELLIA-192-ECB"

	)

4157 
	#LN_ˇmñlü_192_ecb
 "ˇmñlü-192-ecb"

	)

4158 
	#NID_ˇmñlü_192_ecb
 755

	)

4159 
	#OBJ_ˇmñlü_192_ecb
 
OBJ_ˇmñlü
,21L

	)

4161 
	#SN_ˇmñlü_192_ofb128
 "CAMELLIA-192-OFB"

	)

4162 
	#LN_ˇmñlü_192_ofb128
 "ˇmñlü-192-ofb"

	)

4163 
	#NID_ˇmñlü_192_ofb128
 767

	)

4164 
	#OBJ_ˇmñlü_192_ofb128
 
OBJ_ˇmñlü
,23L

	)

4166 
	#SN_ˇmñlü_192_cfb128
 "CAMELLIA-192-CFB"

	)

4167 
	#LN_ˇmñlü_192_cfb128
 "ˇmñlü-192-cfb"

	)

4168 
	#NID_ˇmñlü_192_cfb128
 758

	)

4169 
	#OBJ_ˇmñlü_192_cfb128
 
OBJ_ˇmñlü
,24L

	)

4171 
	#SN_ˇmñlü_192_gcm
 "CAMELLIA-192-GCM"

	)

4172 
	#LN_ˇmñlü_192_gcm
 "ˇmñlü-192-gcm"

	)

4173 
	#NID_ˇmñlü_192_gcm
 965

	)

4174 
	#OBJ_ˇmñlü_192_gcm
 
OBJ_ˇmñlü
,26L

	)

4176 
	#SN_ˇmñlü_192_ccm
 "CAMELLIA-192-CCM"

	)

4177 
	#LN_ˇmñlü_192_ccm
 "ˇmñlü-192-ccm"

	)

4178 
	#NID_ˇmñlü_192_ccm
 966

	)

4179 
	#OBJ_ˇmñlü_192_ccm
 
OBJ_ˇmñlü
,27L

	)

4181 
	#SN_ˇmñlü_192_˘r
 "CAMELLIA-192-CTR"

	)

4182 
	#LN_ˇmñlü_192_˘r
 "ˇmñlü-192-˘r"

	)

4183 
	#NID_ˇmñlü_192_˘r
 967

	)

4184 
	#OBJ_ˇmñlü_192_˘r
 
OBJ_ˇmñlü
,29L

	)

4186 
	#SN_ˇmñlü_192_cmac
 "CAMELLIA-192-CMAC"

	)

4187 
	#LN_ˇmñlü_192_cmac
 "ˇmñlü-192-cmac"

	)

4188 
	#NID_ˇmñlü_192_cmac
 968

	)

4189 
	#OBJ_ˇmñlü_192_cmac
 
OBJ_ˇmñlü
,30L

	)

4191 
	#SN_ˇmñlü_256_ecb
 "CAMELLIA-256-ECB"

	)

4192 
	#LN_ˇmñlü_256_ecb
 "ˇmñlü-256-ecb"

	)

4193 
	#NID_ˇmñlü_256_ecb
 756

	)

4194 
	#OBJ_ˇmñlü_256_ecb
 
OBJ_ˇmñlü
,41L

	)

4196 
	#SN_ˇmñlü_256_ofb128
 "CAMELLIA-256-OFB"

	)

4197 
	#LN_ˇmñlü_256_ofb128
 "ˇmñlü-256-ofb"

	)

4198 
	#NID_ˇmñlü_256_ofb128
 768

	)

4199 
	#OBJ_ˇmñlü_256_ofb128
 
OBJ_ˇmñlü
,43L

	)

4201 
	#SN_ˇmñlü_256_cfb128
 "CAMELLIA-256-CFB"

	)

4202 
	#LN_ˇmñlü_256_cfb128
 "ˇmñlü-256-cfb"

	)

4203 
	#NID_ˇmñlü_256_cfb128
 759

	)

4204 
	#OBJ_ˇmñlü_256_cfb128
 
OBJ_ˇmñlü
,44L

	)

4206 
	#SN_ˇmñlü_256_gcm
 "CAMELLIA-256-GCM"

	)

4207 
	#LN_ˇmñlü_256_gcm
 "ˇmñlü-256-gcm"

	)

4208 
	#NID_ˇmñlü_256_gcm
 969

	)

4209 
	#OBJ_ˇmñlü_256_gcm
 
OBJ_ˇmñlü
,46L

	)

4211 
	#SN_ˇmñlü_256_ccm
 "CAMELLIA-256-CCM"

	)

4212 
	#LN_ˇmñlü_256_ccm
 "ˇmñlü-256-ccm"

	)

4213 
	#NID_ˇmñlü_256_ccm
 970

	)

4214 
	#OBJ_ˇmñlü_256_ccm
 
OBJ_ˇmñlü
,47L

	)

4216 
	#SN_ˇmñlü_256_˘r
 "CAMELLIA-256-CTR"

	)

4217 
	#LN_ˇmñlü_256_˘r
 "ˇmñlü-256-˘r"

	)

4218 
	#NID_ˇmñlü_256_˘r
 971

	)

4219 
	#OBJ_ˇmñlü_256_˘r
 
OBJ_ˇmñlü
,49L

	)

4221 
	#SN_ˇmñlü_256_cmac
 "CAMELLIA-256-CMAC"

	)

4222 
	#LN_ˇmñlü_256_cmac
 "ˇmñlü-256-cmac"

	)

4223 
	#NID_ˇmñlü_256_cmac
 972

	)

4224 
	#OBJ_ˇmñlü_256_cmac
 
OBJ_ˇmñlü
,50L

	)

4226 
	#SN_ˇmñlü_128_cfb1
 "CAMELLIA-128-CFB1"

	)

4227 
	#LN_ˇmñlü_128_cfb1
 "ˇmñlü-128-cfb1"

	)

4228 
	#NID_ˇmñlü_128_cfb1
 760

	)

4230 
	#SN_ˇmñlü_192_cfb1
 "CAMELLIA-192-CFB1"

	)

4231 
	#LN_ˇmñlü_192_cfb1
 "ˇmñlü-192-cfb1"

	)

4232 
	#NID_ˇmñlü_192_cfb1
 761

	)

4234 
	#SN_ˇmñlü_256_cfb1
 "CAMELLIA-256-CFB1"

	)

4235 
	#LN_ˇmñlü_256_cfb1
 "ˇmñlü-256-cfb1"

	)

4236 
	#NID_ˇmñlü_256_cfb1
 762

	)

4238 
	#SN_ˇmñlü_128_cfb8
 "CAMELLIA-128-CFB8"

	)

4239 
	#LN_ˇmñlü_128_cfb8
 "ˇmñlü-128-cfb8"

	)

4240 
	#NID_ˇmñlü_128_cfb8
 763

	)

4242 
	#SN_ˇmñlü_192_cfb8
 "CAMELLIA-192-CFB8"

	)

4243 
	#LN_ˇmñlü_192_cfb8
 "ˇmñlü-192-cfb8"

	)

4244 
	#NID_ˇmñlü_192_cfb8
 764

	)

4246 
	#SN_ˇmñlü_256_cfb8
 "CAMELLIA-256-CFB8"

	)

4247 
	#LN_ˇmñlü_256_cfb8
 "ˇmñlü-256-cfb8"

	)

4248 
	#NID_ˇmñlü_256_cfb8
 765

	)

4250 
	#SN_kiß
 "KISA"

	)

4251 
	#LN_kiß
 "kiß"

	)

4252 
	#NID_kiß
 773

	)

4253 
	#OBJ_kiß
 
OBJ_membî_body
,410L,200004L

	)

4255 
	#SN_£ed_ecb
 "SEED-ECB"

	)

4256 
	#LN_£ed_ecb
 "£ed-ecb"

	)

4257 
	#NID_£ed_ecb
 776

	)

4258 
	#OBJ_£ed_ecb
 
OBJ_kiß
,1L,3L

	)

4260 
	#SN_£ed_cbc
 "SEED-CBC"

	)

4261 
	#LN_£ed_cbc
 "£ed-cbc"

	)

4262 
	#NID_£ed_cbc
 777

	)

4263 
	#OBJ_£ed_cbc
 
OBJ_kiß
,1L,4L

	)

4265 
	#SN_£ed_cfb128
 "SEED-CFB"

	)

4266 
	#LN_£ed_cfb128
 "£ed-cfb"

	)

4267 
	#NID_£ed_cfb128
 779

	)

4268 
	#OBJ_£ed_cfb128
 
OBJ_kiß
,1L,5L

	)

4270 
	#SN_£ed_ofb128
 "SEED-OFB"

	)

4271 
	#LN_£ed_ofb128
 "£ed-ofb"

	)

4272 
	#NID_£ed_ofb128
 778

	)

4273 
	#OBJ_£ed_ofb128
 
OBJ_kiß
,1L,6L

	)

4275 
	#SN_hmac
 "HMAC"

	)

4276 
	#LN_hmac
 "hmac"

	)

4277 
	#NID_hmac
 855

	)

4279 
	#SN_cmac
 "CMAC"

	)

4280 
	#LN_cmac
 "cmac"

	)

4281 
	#NID_cmac
 894

	)

4283 
	#SN_rc4_hmac_md5
 "RC4-HMAC-MD5"

	)

4284 
	#LN_rc4_hmac_md5
 "rc4-hmac-md5"

	)

4285 
	#NID_rc4_hmac_md5
 915

	)

4287 
	#SN_´s_128_cbc_hmac_sha1
 "AES-128-CBC-HMAC-SHA1"

	)

4288 
	#LN_´s_128_cbc_hmac_sha1
 "´s-128-cbc-hmac-sha1"

	)

4289 
	#NID_´s_128_cbc_hmac_sha1
 916

	)

4291 
	#SN_´s_192_cbc_hmac_sha1
 "AES-192-CBC-HMAC-SHA1"

	)

4292 
	#LN_´s_192_cbc_hmac_sha1
 "´s-192-cbc-hmac-sha1"

	)

4293 
	#NID_´s_192_cbc_hmac_sha1
 917

	)

4295 
	#SN_´s_256_cbc_hmac_sha1
 "AES-256-CBC-HMAC-SHA1"

	)

4296 
	#LN_´s_256_cbc_hmac_sha1
 "´s-256-cbc-hmac-sha1"

	)

4297 
	#NID_´s_256_cbc_hmac_sha1
 918

	)

4299 
	#SN_´s_128_cbc_hmac_sha256
 "AES-128-CBC-HMAC-SHA256"

	)

4300 
	#LN_´s_128_cbc_hmac_sha256
 "´s-128-cbc-hmac-sha256"

	)

4301 
	#NID_´s_128_cbc_hmac_sha256
 948

	)

4303 
	#SN_´s_192_cbc_hmac_sha256
 "AES-192-CBC-HMAC-SHA256"

	)

4304 
	#LN_´s_192_cbc_hmac_sha256
 "´s-192-cbc-hmac-sha256"

	)

4305 
	#NID_´s_192_cbc_hmac_sha256
 949

	)

4307 
	#SN_´s_256_cbc_hmac_sha256
 "AES-256-CBC-HMAC-SHA256"

	)

4308 
	#LN_´s_256_cbc_hmac_sha256
 "´s-256-cbc-hmac-sha256"

	)

4309 
	#NID_´s_256_cbc_hmac_sha256
 950

	)

4311 
	#SN_chacha20_pﬁy1305
 "ChaCha20-Pﬁy1305"

	)

4312 
	#LN_chacha20_pﬁy1305
 "chacha20-pﬁy1305"

	)

4313 
	#NID_chacha20_pﬁy1305
 1018

	)

4315 
	#SN_chacha20
 "ChaCha20"

	)

4316 
	#LN_chacha20
 "chacha20"

	)

4317 
	#NID_chacha20
 1019

	)

4319 
	#SN_dhpubli˙umbî
 "dhpubli˙umbî"

	)

4320 
	#LN_dhpubli˙umbî
 "X9.42 DH"

	)

4321 
	#NID_dhpubli˙umbî
 920

	)

4322 
	#OBJ_dhpubli˙umbî
 
OBJ_ISO_US
,10046L,2L,1L

	)

4324 
	#SN_bøöpoﬁP160r1
 "bøöpoﬁP160r1"

	)

4325 
	#NID_bøöpoﬁP160r1
 921

	)

4326 
	#OBJ_bøöpoﬁP160r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,1L

	)

4328 
	#SN_bøöpoﬁP160t1
 "bøöpoﬁP160t1"

	)

4329 
	#NID_bøöpoﬁP160t1
 922

	)

4330 
	#OBJ_bøöpoﬁP160t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,2L

	)

4332 
	#SN_bøöpoﬁP192r1
 "bøöpoﬁP192r1"

	)

4333 
	#NID_bøöpoﬁP192r1
 923

	)

4334 
	#OBJ_bøöpoﬁP192r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,3L

	)

4336 
	#SN_bøöpoﬁP192t1
 "bøöpoﬁP192t1"

	)

4337 
	#NID_bøöpoﬁP192t1
 924

	)

4338 
	#OBJ_bøöpoﬁP192t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,4L

	)

4340 
	#SN_bøöpoﬁP224r1
 "bøöpoﬁP224r1"

	)

4341 
	#NID_bøöpoﬁP224r1
 925

	)

4342 
	#OBJ_bøöpoﬁP224r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,5L

	)

4344 
	#SN_bøöpoﬁP224t1
 "bøöpoﬁP224t1"

	)

4345 
	#NID_bøöpoﬁP224t1
 926

	)

4346 
	#OBJ_bøöpoﬁP224t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,6L

	)

4348 
	#SN_bøöpoﬁP256r1
 "bøöpoﬁP256r1"

	)

4349 
	#NID_bøöpoﬁP256r1
 927

	)

4350 
	#OBJ_bøöpoﬁP256r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,7L

	)

4352 
	#SN_bøöpoﬁP256t1
 "bøöpoﬁP256t1"

	)

4353 
	#NID_bøöpoﬁP256t1
 928

	)

4354 
	#OBJ_bøöpoﬁP256t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,8L

	)

4356 
	#SN_bøöpoﬁP320r1
 "bøöpoﬁP320r1"

	)

4357 
	#NID_bøöpoﬁP320r1
 929

	)

4358 
	#OBJ_bøöpoﬁP320r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,9L

	)

4360 
	#SN_bøöpoﬁP320t1
 "bøöpoﬁP320t1"

	)

4361 
	#NID_bøöpoﬁP320t1
 930

	)

4362 
	#OBJ_bøöpoﬁP320t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,10L

	)

4364 
	#SN_bøöpoﬁP384r1
 "bøöpoﬁP384r1"

	)

4365 
	#NID_bøöpoﬁP384r1
 931

	)

4366 
	#OBJ_bøöpoﬁP384r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,11L

	)

4368 
	#SN_bøöpoﬁP384t1
 "bøöpoﬁP384t1"

	)

4369 
	#NID_bøöpoﬁP384t1
 932

	)

4370 
	#OBJ_bøöpoﬁP384t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,12L

	)

4372 
	#SN_bøöpoﬁP512r1
 "bøöpoﬁP512r1"

	)

4373 
	#NID_bøöpoﬁP512r1
 933

	)

4374 
	#OBJ_bøöpoﬁP512r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,13L

	)

4376 
	#SN_bøöpoﬁP512t1
 "bøöpoﬁP512t1"

	)

4377 
	#NID_bøöpoﬁP512t1
 934

	)

4378 
	#OBJ_bøöpoﬁP512t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,14L

	)

4380 
	#OBJ_x9_63_scheme
 1L,3L,133L,16L,840L,63L,0L

	)

4382 
	#OBJ_£cg_scheme
 
OBJ_˚πicom_¨c
,1L

	)

4384 
	#SN_dhSögÀPass_°dDH_sha1kdf_scheme
 "dhSögÀPass-°dDH-sha1kdf-scheme"

	)

4385 
	#NID_dhSögÀPass_°dDH_sha1kdf_scheme
 936

	)

4386 
	#OBJ_dhSögÀPass_°dDH_sha1kdf_scheme
 
OBJ_x9_63_scheme
,2L

	)

4388 
	#SN_dhSögÀPass_°dDH_sha224kdf_scheme
 "dhSögÀPass-°dDH-sha224kdf-scheme"

	)

4389 
	#NID_dhSögÀPass_°dDH_sha224kdf_scheme
 937

	)

4390 
	#OBJ_dhSögÀPass_°dDH_sha224kdf_scheme
 
OBJ_£cg_scheme
,11L,0L

	)

4392 
	#SN_dhSögÀPass_°dDH_sha256kdf_scheme
 "dhSögÀPass-°dDH-sha256kdf-scheme"

	)

4393 
	#NID_dhSögÀPass_°dDH_sha256kdf_scheme
 938

	)

4394 
	#OBJ_dhSögÀPass_°dDH_sha256kdf_scheme
 
OBJ_£cg_scheme
,11L,1L

	)

4396 
	#SN_dhSögÀPass_°dDH_sha384kdf_scheme
 "dhSögÀPass-°dDH-sha384kdf-scheme"

	)

4397 
	#NID_dhSögÀPass_°dDH_sha384kdf_scheme
 939

	)

4398 
	#OBJ_dhSögÀPass_°dDH_sha384kdf_scheme
 
OBJ_£cg_scheme
,11L,2L

	)

4400 
	#SN_dhSögÀPass_°dDH_sha512kdf_scheme
 "dhSögÀPass-°dDH-sha512kdf-scheme"

	)

4401 
	#NID_dhSögÀPass_°dDH_sha512kdf_scheme
 940

	)

4402 
	#OBJ_dhSögÀPass_°dDH_sha512kdf_scheme
 
OBJ_£cg_scheme
,11L,3L

	)

4404 
	#SN_dhSögÀPass_coÁ˘‹DH_sha1kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha1kdf-scheme"

	)

4405 
	#NID_dhSögÀPass_coÁ˘‹DH_sha1kdf_scheme
 941

	)

4406 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha1kdf_scheme
 
OBJ_x9_63_scheme
,3L

	)

4408 
	#SN_dhSögÀPass_coÁ˘‹DH_sha224kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha224kdf-scheme"

	)

4409 
	#NID_dhSögÀPass_coÁ˘‹DH_sha224kdf_scheme
 942

	)

4410 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha224kdf_scheme
 
OBJ_£cg_scheme
,14L,0L

	)

4412 
	#SN_dhSögÀPass_coÁ˘‹DH_sha256kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha256kdf-scheme"

	)

4413 
	#NID_dhSögÀPass_coÁ˘‹DH_sha256kdf_scheme
 943

	)

4414 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha256kdf_scheme
 
OBJ_£cg_scheme
,14L,1L

	)

4416 
	#SN_dhSögÀPass_coÁ˘‹DH_sha384kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha384kdf-scheme"

	)

4417 
	#NID_dhSögÀPass_coÁ˘‹DH_sha384kdf_scheme
 944

	)

4418 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha384kdf_scheme
 
OBJ_£cg_scheme
,14L,2L

	)

4420 
	#SN_dhSögÀPass_coÁ˘‹DH_sha512kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha512kdf-scheme"

	)

4421 
	#NID_dhSögÀPass_coÁ˘‹DH_sha512kdf_scheme
 945

	)

4422 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha512kdf_scheme
 
OBJ_£cg_scheme
,14L,3L

	)

4424 
	#SN_dh_°d_kdf
 "dh-°d-kdf"

	)

4425 
	#NID_dh_°d_kdf
 946

	)

4427 
	#SN_dh_coÁ˘‹_kdf
 "dh-coÁ˘‹-kdf"

	)

4428 
	#NID_dh_coÁ˘‹_kdf
 947

	)

4430 
	#SN_˘_¥e˚π_s˘s
 "˘_¥e˚π_s˘s"

	)

4431 
	#LN_˘_¥e˚π_s˘s
 "CT Pª˚πifiˇã SCTs"

	)

4432 
	#NID_˘_¥e˚π_s˘s
 951

	)

4433 
	#OBJ_˘_¥e˚π_s˘s
 1L,3L,6L,1L,4L,1L,11129L,2L,4L,2L

	)

4435 
	#SN_˘_¥e˚π_pois⁄
 "˘_¥e˚π_pois⁄"

	)

4436 
	#LN_˘_¥e˚π_pois⁄
 "CT Pª˚πifiˇã Pois⁄"

	)

4437 
	#NID_˘_¥e˚π_pois⁄
 952

	)

4438 
	#OBJ_˘_¥e˚π_pois⁄
 1L,3L,6L,1L,4L,1L,11129L,2L,4L,3L

	)

4440 
	#SN_˘_¥e˚π_sig√r
 "˘_¥e˚π_sig√r"

	)

4441 
	#LN_˘_¥e˚π_sig√r
 "CT Pª˚πifiˇã Sig√r"

	)

4442 
	#NID_˘_¥e˚π_sig√r
 953

	)

4443 
	#OBJ_˘_¥e˚π_sig√r
 1L,3L,6L,1L,4L,1L,11129L,2L,4L,4L

	)

4445 
	#SN_˘_˚π_s˘s
 "˘_˚π_s˘s"

	)

4446 
	#LN_˘_˚π_s˘s
 "CT Cîtifiˇã SCTs"

	)

4447 
	#NID_˘_˚π_s˘s
 954

	)

4448 
	#OBJ_˘_˚π_s˘s
 1L,3L,6L,1L,4L,1L,11129L,2L,4L,5L

	)

4450 
	#SN_jurisdi˘i⁄LoˇlôyName
 "jurisdi˘i⁄L"

	)

4451 
	#LN_jurisdi˘i⁄LoˇlôyName
 "jurisdi˘i⁄LoˇlôyName"

	)

4452 
	#NID_jurisdi˘i⁄LoˇlôyName
 955

	)

4453 
	#OBJ_jurisdi˘i⁄LoˇlôyName
 1L,3L,6L,1L,4L,1L,311L,60L,2L,1L,1L

	)

4455 
	#SN_jurisdi˘i⁄SèãOrProvö˚Name
 "jurisdi˘i⁄ST"

	)

4456 
	#LN_jurisdi˘i⁄SèãOrProvö˚Name
 "jurisdi˘i⁄SèãOrProvö˚Name"

	)

4457 
	#NID_jurisdi˘i⁄SèãOrProvö˚Name
 956

	)

4458 
	#OBJ_jurisdi˘i⁄SèãOrProvö˚Name
 1L,3L,6L,1L,4L,1L,311L,60L,2L,1L,2L

	)

4460 
	#SN_jurisdi˘i⁄Cou¡ryName
 "jurisdi˘i⁄C"

	)

4461 
	#LN_jurisdi˘i⁄Cou¡ryName
 "jurisdi˘i⁄Cou¡ryName"

	)

4462 
	#NID_jurisdi˘i⁄Cou¡ryName
 957

	)

4463 
	#OBJ_jurisdi˘i⁄Cou¡ryName
 1L,3L,6L,1L,4L,1L,311L,60L,2L,1L,3L

	)

4465 
	#SN_id_s¸y±
 "id-s¸y±"

	)

4466 
	#NID_id_s¸y±
 973

	)

4467 
	#OBJ_id_s¸y±
 1L,3L,6L,1L,4L,1L,11591L,4L,11L

	)

4469 
	#SN_és1_¥f
 "TLS1-PRF"

	)

4470 
	#LN_és1_¥f
 "és1-¥f"

	)

4471 
	#NID_és1_¥f
 1021

	)

4473 
	#SN_hkdf
 "HKDF"

	)

4474 
	#LN_hkdf
 "hkdf"

	)

4475 
	#NID_hkdf
 1036

	)

4477 
	#SN_id_pköô
 "id-pköô"

	)

4478 
	#NID_id_pköô
 1031

	)

4479 
	#OBJ_id_pköô
 1L,3L,6L,1L,5L,2L,3L

	)

4481 
	#SN_pkInôClõ¡Auth
 "pkInôClõ¡Auth"

	)

4482 
	#LN_pkInôClõ¡Auth
 "PKINIT Clõ¡ Auth"

	)

4483 
	#NID_pkInôClõ¡Auth
 1032

	)

4484 
	#OBJ_pkInôClõ¡Auth
 
OBJ_id_pköô
,4L

	)

4486 
	#SN_pkInôKDC
 "pkInôKDC"

	)

4487 
	#LN_pkInôKDC
 "Signög KDC Re•⁄£"

	)

4488 
	#NID_pkInôKDC
 1033

	)

4489 
	#OBJ_pkInôKDC
 
OBJ_id_pköô
,5L

	)

4491 
	#SN_X25519
 "X25519"

	)

4492 
	#NID_X25519
 1034

	)

4493 
	#OBJ_X25519
 1L,3L,6L,1L,4L,1L,11591L,15L,1L

	)

4495 
	#SN_X448
 "X448"

	)

4496 
	#NID_X448
 1035

	)

4497 
	#OBJ_X448
 1L,3L,6L,1L,4L,1L,11591L,15L,2L

	)

4499 
	#SN_kx_rß
 "KxRSA"

	)

4500 
	#LN_kx_rß
 "kx-rß"

	)

4501 
	#NID_kx_rß
 1037

	)

4503 
	#SN_kx_ecdhe
 "KxECDHE"

	)

4504 
	#LN_kx_ecdhe
 "kx-ecdhe"

	)

4505 
	#NID_kx_ecdhe
 1038

	)

4507 
	#SN_kx_dhe
 "KxDHE"

	)

4508 
	#LN_kx_dhe
 "kx-dhe"

	)

4509 
	#NID_kx_dhe
 1039

	)

4511 
	#SN_kx_ecdhe_psk
 "KxECDHE-PSK"

	)

4512 
	#LN_kx_ecdhe_psk
 "kx-ecdhe-psk"

	)

4513 
	#NID_kx_ecdhe_psk
 1040

	)

4515 
	#SN_kx_dhe_psk
 "KxDHE-PSK"

	)

4516 
	#LN_kx_dhe_psk
 "kx-dhe-psk"

	)

4517 
	#NID_kx_dhe_psk
 1041

	)

4519 
	#SN_kx_rß_psk
 "KxRSA_PSK"

	)

4520 
	#LN_kx_rß_psk
 "kx-rß-psk"

	)

4521 
	#NID_kx_rß_psk
 1042

	)

4523 
	#SN_kx_psk
 "KxPSK"

	)

4524 
	#LN_kx_psk
 "kx-psk"

	)

4525 
	#NID_kx_psk
 1043

	)

4527 
	#SN_kx_§p
 "KxSRP"

	)

4528 
	#LN_kx_§p
 "kx-§p"

	)

4529 
	#NID_kx_§p
 1044

	)

4531 
	#SN_kx_go°
 "KxGOST"

	)

4532 
	#LN_kx_go°
 "kx-go°"

	)

4533 
	#NID_kx_go°
 1045

	)

4535 
	#SN_auth_rß
 "AuthRSA"

	)

4536 
	#LN_auth_rß
 "auth-rß"

	)

4537 
	#NID_auth_rß
 1046

	)

4539 
	#SN_auth_ecdß
 "AuthECDSA"

	)

4540 
	#LN_auth_ecdß
 "auth-ecdß"

	)

4541 
	#NID_auth_ecdß
 1047

	)

4543 
	#SN_auth_psk
 "AuthPSK"

	)

4544 
	#LN_auth_psk
 "auth-psk"

	)

4545 
	#NID_auth_psk
 1048

	)

4547 
	#SN_auth_dss
 "AuthDSS"

	)

4548 
	#LN_auth_dss
 "auth-dss"

	)

4549 
	#NID_auth_dss
 1049

	)

4551 
	#SN_auth_go°01
 "AuthGOST01"

	)

4552 
	#LN_auth_go°01
 "auth-go°01"

	)

4553 
	#NID_auth_go°01
 1050

	)

4555 
	#SN_auth_go°12
 "AuthGOST12"

	)

4556 
	#LN_auth_go°12
 "auth-go°12"

	)

4557 
	#NID_auth_go°12
 1051

	)

4559 
	#SN_auth_§p
 "AuthSRP"

	)

4560 
	#LN_auth_§p
 "auth-§p"

	)

4561 
	#NID_auth_§p
 1052

	)

4563 
	#SN_auth_nuŒ
 "AuthNULL"

	)

4564 
	#LN_auth_nuŒ
 "auth-nuŒ"

	)

4565 
	#NID_auth_nuŒ
 1053

	)

	@objects.h

10 #i‚de‡
HEADER_OBJECTS_H


11 
	#HEADER_OBJECTS_H


	)

13 
	#USE_OBJ_MAC


	)

15 #ifde‡
USE_OBJ_MAC


16 
	~<›ís¶/obj_mac.h
>

18 
	#SN_undef
 "UNDEF"

	)

19 
	#LN_undef
 "undeföed"

	)

20 
	#NID_undef
 0

	)

21 
	#OBJ_undef
 0L

	)

23 
	#SN_Alg‹ôhm
 "Alg‹ôhm"

	)

24 
	#LN_Æg‹ôhm
 "Æg‹ôhm"

	)

25 
	#NID_Æg‹ôhm
 38

	)

26 
	#OBJ_Æg‹ôhm
 1L,3L,14L,3L,2L

	)

28 
	#LN_rßdsi
 "rßdsi"

	)

29 
	#NID_rßdsi
 1

	)

30 
	#OBJ_rßdsi
 1L,2L,840L,113549L

	)

32 
	#LN_pkcs
 "pkcs"

	)

33 
	#NID_pkcs
 2

	)

34 
	#OBJ_pkcs
 
OBJ_rßdsi
,1L

	)

36 
	#SN_md2
 "MD2"

	)

37 
	#LN_md2
 "md2"

	)

38 
	#NID_md2
 3

	)

39 
	#OBJ_md2
 
OBJ_rßdsi
,2L,2L

	)

41 
	#SN_md5
 "MD5"

	)

42 
	#LN_md5
 "md5"

	)

43 
	#NID_md5
 4

	)

44 
	#OBJ_md5
 
OBJ_rßdsi
,2L,5L

	)

46 
	#SN_rc4
 "RC4"

	)

47 
	#LN_rc4
 "rc4"

	)

48 
	#NID_rc4
 5

	)

49 
	#OBJ_rc4
 
OBJ_rßdsi
,3L,4L

	)

51 
	#LN_rßEn¸y±i⁄
 "rßEn¸y±i⁄"

	)

52 
	#NID_rßEn¸y±i⁄
 6

	)

53 
	#OBJ_rßEn¸y±i⁄
 
OBJ_pkcs
,1L,1L

	)

55 
	#SN_md2WôhRSAEn¸y±i⁄
 "RSA-MD2"

	)

56 
	#LN_md2WôhRSAEn¸y±i⁄
 "md2WôhRSAEn¸y±i⁄"

	)

57 
	#NID_md2WôhRSAEn¸y±i⁄
 7

	)

58 
	#OBJ_md2WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,2L

	)

60 
	#SN_md5WôhRSAEn¸y±i⁄
 "RSA-MD5"

	)

61 
	#LN_md5WôhRSAEn¸y±i⁄
 "md5WôhRSAEn¸y±i⁄"

	)

62 
	#NID_md5WôhRSAEn¸y±i⁄
 8

	)

63 
	#OBJ_md5WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,4L

	)

65 
	#SN_pbeWôhMD2AndDES_CBC
 "PBE-MD2-DES"

	)

66 
	#LN_pbeWôhMD2AndDES_CBC
 "pbeWôhMD2AndDES-CBC"

	)

67 
	#NID_pbeWôhMD2AndDES_CBC
 9

	)

68 
	#OBJ_pbeWôhMD2AndDES_CBC
 
OBJ_pkcs
,5L,1L

	)

70 
	#SN_pbeWôhMD5AndDES_CBC
 "PBE-MD5-DES"

	)

71 
	#LN_pbeWôhMD5AndDES_CBC
 "pbeWôhMD5AndDES-CBC"

	)

72 
	#NID_pbeWôhMD5AndDES_CBC
 10

	)

73 
	#OBJ_pbeWôhMD5AndDES_CBC
 
OBJ_pkcs
,5L,3L

	)

75 
	#LN_X500
 "X500"

	)

76 
	#NID_X500
 11

	)

77 
	#OBJ_X500
 2L,5L

	)

79 
	#LN_X509
 "X509"

	)

80 
	#NID_X509
 12

	)

81 
	#OBJ_X509
 
OBJ_X500
,4L

	)

83 
	#SN_comm⁄Name
 "CN"

	)

84 
	#LN_comm⁄Name
 "comm⁄Name"

	)

85 
	#NID_comm⁄Name
 13

	)

86 
	#OBJ_comm⁄Name
 
OBJ_X509
,3L

	)

88 
	#SN_cou¡ryName
 "C"

	)

89 
	#LN_cou¡ryName
 "cou¡ryName"

	)

90 
	#NID_cou¡ryName
 14

	)

91 
	#OBJ_cou¡ryName
 
OBJ_X509
,6L

	)

93 
	#SN_loˇlôyName
 "L"

	)

94 
	#LN_loˇlôyName
 "loˇlôyName"

	)

95 
	#NID_loˇlôyName
 15

	)

96 
	#OBJ_loˇlôyName
 
OBJ_X509
,7L

	)

101 
	#SN_°©eOrProvö˚Name
 "ST"

	)

102 
	#LN_°©eOrProvö˚Name
 "°©eOrProvö˚Name"

	)

103 
	#NID_°©eOrProvö˚Name
 16

	)

104 
	#OBJ_°©eOrProvö˚Name
 
OBJ_X509
,8L

	)

106 
	#SN_‹g™iz©i⁄Name
 "O"

	)

107 
	#LN_‹g™iz©i⁄Name
 "‹g™iz©i⁄Name"

	)

108 
	#NID_‹g™iz©i⁄Name
 17

	)

109 
	#OBJ_‹g™iz©i⁄Name
 
OBJ_X509
,10L

	)

111 
	#SN_‹g™iz©i⁄ÆUnôName
 "OU"

	)

112 
	#LN_‹g™iz©i⁄ÆUnôName
 "‹g™iz©i⁄ÆUnôName"

	)

113 
	#NID_‹g™iz©i⁄ÆUnôName
 18

	)

114 
	#OBJ_‹g™iz©i⁄ÆUnôName
 
OBJ_X509
,11L

	)

116 
	#SN_rß
 "RSA"

	)

117 
	#LN_rß
 "rß"

	)

118 
	#NID_rß
 19

	)

119 
	#OBJ_rß
 
OBJ_X500
,8L,1L,1L

	)

121 
	#LN_pkcs7
 "pkcs7"

	)

122 
	#NID_pkcs7
 20

	)

123 
	#OBJ_pkcs7
 
OBJ_pkcs
,7L

	)

125 
	#LN_pkcs7_d©a
 "pkcs7-d©a"

	)

126 
	#NID_pkcs7_d©a
 21

	)

127 
	#OBJ_pkcs7_d©a
 
OBJ_pkcs7
,1L

	)

129 
	#LN_pkcs7_sig√d
 "pkcs7-sig√dD©a"

	)

130 
	#NID_pkcs7_sig√d
 22

	)

131 
	#OBJ_pkcs7_sig√d
 
OBJ_pkcs7
,2L

	)

133 
	#LN_pkcs7_ívñ›ed
 "pkcs7-ívñ›edD©a"

	)

134 
	#NID_pkcs7_ívñ›ed
 23

	)

135 
	#OBJ_pkcs7_ívñ›ed
 
OBJ_pkcs7
,3L

	)

137 
	#LN_pkcs7_sig√dAndEnvñ›ed
 "pkcs7-sig√dAndEnvñ›edD©a"

	)

138 
	#NID_pkcs7_sig√dAndEnvñ›ed
 24

	)

139 
	#OBJ_pkcs7_sig√dAndEnvñ›ed
 
OBJ_pkcs7
,4L

	)

141 
	#LN_pkcs7_dige°
 "pkcs7-dige°D©a"

	)

142 
	#NID_pkcs7_dige°
 25

	)

143 
	#OBJ_pkcs7_dige°
 
OBJ_pkcs7
,5L

	)

145 
	#LN_pkcs7_í¸y±ed
 "pkcs7-í¸y±edD©a"

	)

146 
	#NID_pkcs7_í¸y±ed
 26

	)

147 
	#OBJ_pkcs7_í¸y±ed
 
OBJ_pkcs7
,6L

	)

149 
	#LN_pkcs3
 "pkcs3"

	)

150 
	#NID_pkcs3
 27

	)

151 
	#OBJ_pkcs3
 
OBJ_pkcs
,3L

	)

153 
	#LN_dhKeyAgªemít
 "dhKeyAgªemít"

	)

154 
	#NID_dhKeyAgªemít
 28

	)

155 
	#OBJ_dhKeyAgªemít
 
OBJ_pkcs3
,1L

	)

157 
	#SN_des_ecb
 "DES-ECB"

	)

158 
	#LN_des_ecb
 "des-ecb"

	)

159 
	#NID_des_ecb
 29

	)

160 
	#OBJ_des_ecb
 
OBJ_Æg‹ôhm
,6L

	)

162 
	#SN_des_cfb64
 "DES-CFB"

	)

163 
	#LN_des_cfb64
 "des-cfb"

	)

164 
	#NID_des_cfb64
 30

	)

166 
	#OBJ_des_cfb64
 
OBJ_Æg‹ôhm
,9L

	)

168 
	#SN_des_cbc
 "DES-CBC"

	)

169 
	#LN_des_cbc
 "des-cbc"

	)

170 
	#NID_des_cbc
 31

	)

172 
	#OBJ_des_cbc
 
OBJ_Æg‹ôhm
,7L

	)

174 
	#SN_des_ede
 "DES-EDE"

	)

175 
	#LN_des_ede
 "des-ede"

	)

176 
	#NID_des_ede
 32

	)

178 
	#OBJ_des_ede
 
OBJ_Æg‹ôhm
,17L

	)

180 
	#SN_des_ede3
 "DES-EDE3"

	)

181 
	#LN_des_ede3
 "des-ede3"

	)

182 
	#NID_des_ede3
 33

	)

184 
	#SN_idó_cbc
 "IDEA-CBC"

	)

185 
	#LN_idó_cbc
 "idó-cbc"

	)

186 
	#NID_idó_cbc
 34

	)

187 
	#OBJ_idó_cbc
 1L,3L,6L,1L,4L,1L,188L,7L,1L,1L,2L

	)

189 
	#SN_idó_cfb64
 "IDEA-CFB"

	)

190 
	#LN_idó_cfb64
 "idó-cfb"

	)

191 
	#NID_idó_cfb64
 35

	)

193 
	#SN_idó_ecb
 "IDEA-ECB"

	)

194 
	#LN_idó_ecb
 "idó-ecb"

	)

195 
	#NID_idó_ecb
 36

	)

197 
	#SN_rc2_cbc
 "RC2-CBC"

	)

198 
	#LN_rc2_cbc
 "rc2-cbc"

	)

199 
	#NID_rc2_cbc
 37

	)

200 
	#OBJ_rc2_cbc
 
OBJ_rßdsi
,3L,2L

	)

202 
	#SN_rc2_ecb
 "RC2-ECB"

	)

203 
	#LN_rc2_ecb
 "rc2-ecb"

	)

204 
	#NID_rc2_ecb
 38

	)

206 
	#SN_rc2_cfb64
 "RC2-CFB"

	)

207 
	#LN_rc2_cfb64
 "rc2-cfb"

	)

208 
	#NID_rc2_cfb64
 39

	)

210 
	#SN_rc2_ofb64
 "RC2-OFB"

	)

211 
	#LN_rc2_ofb64
 "rc2-ofb"

	)

212 
	#NID_rc2_ofb64
 40

	)

214 
	#SN_sha
 "SHA"

	)

215 
	#LN_sha
 "sha"

	)

216 
	#NID_sha
 41

	)

217 
	#OBJ_sha
 
OBJ_Æg‹ôhm
,18L

	)

219 
	#SN_shaWôhRSAEn¸y±i⁄
 "RSA-SHA"

	)

220 
	#LN_shaWôhRSAEn¸y±i⁄
 "shaWôhRSAEn¸y±i⁄"

	)

221 
	#NID_shaWôhRSAEn¸y±i⁄
 42

	)

222 
	#OBJ_shaWôhRSAEn¸y±i⁄
 
OBJ_Æg‹ôhm
,15L

	)

224 
	#SN_des_ede_cbc
 "DES-EDE-CBC"

	)

225 
	#LN_des_ede_cbc
 "des-ede-cbc"

	)

226 
	#NID_des_ede_cbc
 43

	)

228 
	#SN_des_ede3_cbc
 "DES-EDE3-CBC"

	)

229 
	#LN_des_ede3_cbc
 "des-ede3-cbc"

	)

230 
	#NID_des_ede3_cbc
 44

	)

231 
	#OBJ_des_ede3_cbc
 
OBJ_rßdsi
,3L,7L

	)

233 
	#SN_des_ofb64
 "DES-OFB"

	)

234 
	#LN_des_ofb64
 "des-ofb"

	)

235 
	#NID_des_ofb64
 45

	)

236 
	#OBJ_des_ofb64
 
OBJ_Æg‹ôhm
,8L

	)

238 
	#SN_idó_ofb64
 "IDEA-OFB"

	)

239 
	#LN_idó_ofb64
 "idó-ofb"

	)

240 
	#NID_idó_ofb64
 46

	)

242 
	#LN_pkcs9
 "pkcs9"

	)

243 
	#NID_pkcs9
 47

	)

244 
	#OBJ_pkcs9
 
OBJ_pkcs
,9L

	)

246 
	#SN_pkcs9_emaûAddªss
 "Emaû"

	)

247 
	#LN_pkcs9_emaûAddªss
 "emaûAddªss"

	)

248 
	#NID_pkcs9_emaûAddªss
 48

	)

249 
	#OBJ_pkcs9_emaûAddªss
 
OBJ_pkcs9
,1L

	)

251 
	#LN_pkcs9_un°ru˘uªdName
 "un°ru˘uªdName"

	)

252 
	#NID_pkcs9_un°ru˘uªdName
 49

	)

253 
	#OBJ_pkcs9_un°ru˘uªdName
 
OBJ_pkcs9
,2L

	)

255 
	#LN_pkcs9_c⁄ã¡Ty≥
 "c⁄ã¡Ty≥"

	)

256 
	#NID_pkcs9_c⁄ã¡Ty≥
 50

	)

257 
	#OBJ_pkcs9_c⁄ã¡Ty≥
 
OBJ_pkcs9
,3L

	)

259 
	#LN_pkcs9_mesßgeDige°
 "mesßgeDige°"

	)

260 
	#NID_pkcs9_mesßgeDige°
 51

	)

261 
	#OBJ_pkcs9_mesßgeDige°
 
OBJ_pkcs9
,4L

	)

263 
	#LN_pkcs9_signögTime
 "signögTime"

	)

264 
	#NID_pkcs9_signögTime
 52

	)

265 
	#OBJ_pkcs9_signögTime
 
OBJ_pkcs9
,5L

	)

267 
	#LN_pkcs9_cou¡îsig«tuª
 "cou¡îsig«tuª"

	)

268 
	#NID_pkcs9_cou¡îsig«tuª
 53

	)

269 
	#OBJ_pkcs9_cou¡îsig«tuª
 
OBJ_pkcs9
,6L

	)

271 
	#LN_pkcs9_chÆÀngePassw‹d
 "chÆÀngePassw‹d"

	)

272 
	#NID_pkcs9_chÆÀngePassw‹d
 54

	)

273 
	#OBJ_pkcs9_chÆÀngePassw‹d
 
OBJ_pkcs9
,7L

	)

275 
	#LN_pkcs9_un°ru˘uªdAddªss
 "un°ru˘uªdAddªss"

	)

276 
	#NID_pkcs9_un°ru˘uªdAddªss
 55

	)

277 
	#OBJ_pkcs9_un°ru˘uªdAddªss
 
OBJ_pkcs9
,8L

	)

279 
	#LN_pkcs9_extCîtAâribuãs
 "exãndedCîtifiˇãAâribuãs"

	)

280 
	#NID_pkcs9_extCîtAâribuãs
 56

	)

281 
	#OBJ_pkcs9_extCîtAâribuãs
 
OBJ_pkcs9
,9L

	)

283 
	#SN_√tsˇ≥
 "Nësˇ≥"

	)

284 
	#LN_√tsˇ≥
 "Nësˇ≥ Communiˇti⁄†C‹p."

	)

285 
	#NID_√tsˇ≥
 57

	)

286 
	#OBJ_√tsˇ≥
 2L,16L,840L,1L,113730L

	)

288 
	#SN_√tsˇ≥_˚π_exãnsi⁄
 "nsCîtExt"

	)

289 
	#LN_√tsˇ≥_˚π_exãnsi⁄
 "Nësˇ≥ Cîtifiˇã Exãnsi⁄"

	)

290 
	#NID_√tsˇ≥_˚π_exãnsi⁄
 58

	)

291 
	#OBJ_√tsˇ≥_˚π_exãnsi⁄
 
OBJ_√tsˇ≥
,1L

	)

293 
	#SN_√tsˇ≥_d©a_ty≥
 "nsD©aTy≥"

	)

294 
	#LN_√tsˇ≥_d©a_ty≥
 "Nësˇ≥ D©®Ty≥"

	)

295 
	#NID_√tsˇ≥_d©a_ty≥
 59

	)

296 
	#OBJ_√tsˇ≥_d©a_ty≥
 
OBJ_√tsˇ≥
,2L

	)

298 
	#SN_des_ede_cfb64
 "DES-EDE-CFB"

	)

299 
	#LN_des_ede_cfb64
 "des-ede-cfb"

	)

300 
	#NID_des_ede_cfb64
 60

	)

302 
	#SN_des_ede3_cfb64
 "DES-EDE3-CFB"

	)

303 
	#LN_des_ede3_cfb64
 "des-ede3-cfb"

	)

304 
	#NID_des_ede3_cfb64
 61

	)

306 
	#SN_des_ede_ofb64
 "DES-EDE-OFB"

	)

307 
	#LN_des_ede_ofb64
 "des-ede-ofb"

	)

308 
	#NID_des_ede_ofb64
 62

	)

310 
	#SN_des_ede3_ofb64
 "DES-EDE3-OFB"

	)

311 
	#LN_des_ede3_ofb64
 "des-ede3-ofb"

	)

312 
	#NID_des_ede3_ofb64
 63

	)

315 
	#SN_sha1
 "SHA1"

	)

316 
	#LN_sha1
 "sha1"

	)

317 
	#NID_sha1
 64

	)

318 
	#OBJ_sha1
 
OBJ_Æg‹ôhm
,26L

	)

322 
	#SN_sha1WôhRSAEn¸y±i⁄
 "RSA-SHA1"

	)

323 
	#LN_sha1WôhRSAEn¸y±i⁄
 "sha1WôhRSAEn¸y±i⁄"

	)

324 
	#NID_sha1WôhRSAEn¸y±i⁄
 65

	)

325 
	#OBJ_sha1WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,5L

	)

327 
	#SN_dßWôhSHA
 "DSA-SHA"

	)

328 
	#LN_dßWôhSHA
 "dßWôhSHA"

	)

329 
	#NID_dßWôhSHA
 66

	)

330 
	#OBJ_dßWôhSHA
 
OBJ_Æg‹ôhm
,13L

	)

332 
	#SN_dß_2
 "DSA-ﬁd"

	)

333 
	#LN_dß_2
 "dßEn¸y±i⁄-ﬁd"

	)

334 
	#NID_dß_2
 67

	)

335 
	#OBJ_dß_2
 
OBJ_Æg‹ôhm
,12L

	)

338 
	#SN_pbeWôhSHA1AndRC2_CBC
 "PBE-SHA1-RC2-64"

	)

339 
	#LN_pbeWôhSHA1AndRC2_CBC
 "pbeWôhSHA1AndRC2-CBC"

	)

340 
	#NID_pbeWôhSHA1AndRC2_CBC
 68

	)

341 
	#OBJ_pbeWôhSHA1AndRC2_CBC
 
OBJ_pkcs
,5L,11L

	)

348 
	#LN_id_pbkdf2
 "PBKDF2"

	)

349 
	#NID_id_pbkdf2
 69

	)

350 
	#OBJ_id_pbkdf2
 
OBJ_pkcs
,5L,12L

	)

352 
	#SN_dßWôhSHA1_2
 "DSA-SHA1-ﬁd"

	)

353 
	#LN_dßWôhSHA1_2
 "dßWôhSHA1-ﬁd"

	)

354 
	#NID_dßWôhSHA1_2
 70

	)

356 
	#OBJ_dßWôhSHA1_2
 
OBJ_Æg‹ôhm
,27L

	)

358 
	#SN_√tsˇ≥_˚π_ty≥
 "nsCîtTy≥"

	)

359 
	#LN_√tsˇ≥_˚π_ty≥
 "Nësˇ≥ CîàTy≥"

	)

360 
	#NID_√tsˇ≥_˚π_ty≥
 71

	)

361 
	#OBJ_√tsˇ≥_˚π_ty≥
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,1L

	)

363 
	#SN_√tsˇ≥_ba£_uæ
 "nsBa£Uæ"

	)

364 
	#LN_√tsˇ≥_ba£_uæ
 "Nësˇ≥ Ba£ Uæ"

	)

365 
	#NID_√tsˇ≥_ba£_uæ
 72

	)

366 
	#OBJ_√tsˇ≥_ba£_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,2L

	)

368 
	#SN_√tsˇ≥_ªvoˇti⁄_uæ
 "nsRevoˇti⁄Uæ"

	)

369 
	#LN_√tsˇ≥_ªvoˇti⁄_uæ
 "Nësˇ≥ Revoˇti⁄ Uæ"

	)

370 
	#NID_√tsˇ≥_ªvoˇti⁄_uæ
 73

	)

371 
	#OBJ_√tsˇ≥_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,3L

	)

373 
	#SN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "nsCaRevoˇti⁄Uæ"

	)

374 
	#LN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "Nësˇ≥ CA Revoˇti⁄ Uæ"

	)

375 
	#NID_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 74

	)

376 
	#OBJ_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,4L

	)

378 
	#SN_√tsˇ≥_ª√wÆ_uæ
 "nsRíewÆUæ"

	)

379 
	#LN_√tsˇ≥_ª√wÆ_uæ
 "Nësˇ≥ RíewÆ Uæ"

	)

380 
	#NID_√tsˇ≥_ª√wÆ_uæ
 75

	)

381 
	#OBJ_√tsˇ≥_ª√wÆ_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,7L

	)

383 
	#SN_√tsˇ≥_ˇ_pﬁicy_uæ
 "nsCaPﬁicyUæ"

	)

384 
	#LN_√tsˇ≥_ˇ_pﬁicy_uæ
 "Nësˇ≥ CA Pﬁicy Uæ"

	)

385 
	#NID_√tsˇ≥_ˇ_pﬁicy_uæ
 76

	)

386 
	#OBJ_√tsˇ≥_ˇ_pﬁicy_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,8L

	)

388 
	#SN_√tsˇ≥_s¶_£rvî_«me
 "nsS¶SîvîName"

	)

389 
	#LN_√tsˇ≥_s¶_£rvî_«me
 "Nësˇ≥ SSL Sîvî Name"

	)

390 
	#NID_√tsˇ≥_s¶_£rvî_«me
 77

	)

391 
	#OBJ_√tsˇ≥_s¶_£rvî_«me
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,12L

	)

393 
	#SN_√tsˇ≥_commít
 "nsCommít"

	)

394 
	#LN_√tsˇ≥_commít
 "Nësˇ≥ Commít"

	)

395 
	#NID_√tsˇ≥_commít
 78

	)

396 
	#OBJ_√tsˇ≥_commít
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,13L

	)

398 
	#SN_√tsˇ≥_˚π_£quí˚
 "nsCîtSequí˚"

	)

399 
	#LN_√tsˇ≥_˚π_£quí˚
 "Nësˇ≥ Cîtifiˇã Sequí˚"

	)

400 
	#NID_√tsˇ≥_˚π_£quí˚
 79

	)

401 
	#OBJ_√tsˇ≥_˚π_£quí˚
 
OBJ_√tsˇ≥_d©a_ty≥
,5L

	)

403 
	#SN_desx_cbc
 "DESX-CBC"

	)

404 
	#LN_desx_cbc
 "desx-cbc"

	)

405 
	#NID_desx_cbc
 80

	)

407 
	#SN_id_˚
 "id-˚"

	)

408 
	#NID_id_˚
 81

	)

409 
	#OBJ_id_˚
 2L,5L,29L

	)

411 
	#SN_subje˘_key_idítifõr
 "subje˘KeyIdítifõr"

	)

412 
	#LN_subje˘_key_idítifõr
 "X509v3 Subje˘ Key Idítifõr"

	)

413 
	#NID_subje˘_key_idítifõr
 82

	)

414 
	#OBJ_subje˘_key_idítifõr
 
OBJ_id_˚
,14L

	)

416 
	#SN_key_ußge
 "keyUßge"

	)

417 
	#LN_key_ußge
 "X509v3 Key Ußge"

	)

418 
	#NID_key_ußge
 83

	)

419 
	#OBJ_key_ußge
 
OBJ_id_˚
,15L

	)

421 
	#SN_¥iv©e_key_ußge_≥riod
 "¥iv©eKeyUßgePîiod"

	)

422 
	#LN_¥iv©e_key_ußge_≥riod
 "X509v3 Priv©êKey UßgêPîiod"

	)

423 
	#NID_¥iv©e_key_ußge_≥riod
 84

	)

424 
	#OBJ_¥iv©e_key_ußge_≥riod
 
OBJ_id_˚
,16L

	)

426 
	#SN_subje˘_Æt_«me
 "subje˘A…Name"

	)

427 
	#LN_subje˘_Æt_«me
 "X509v3 Subje˘ A…î«tivêName"

	)

428 
	#NID_subje˘_Æt_«me
 85

	)

429 
	#OBJ_subje˘_Æt_«me
 
OBJ_id_˚
,17L

	)

431 
	#SN_issuî_Æt_«me
 "issuîA…Name"

	)

432 
	#LN_issuî_Æt_«me
 "X509v3 Issuî A…î«tivêName"

	)

433 
	#NID_issuî_Æt_«me
 86

	)

434 
	#OBJ_issuî_Æt_«me
 
OBJ_id_˚
,18L

	)

436 
	#SN_basic_c⁄°øöts
 "basicC⁄°øöts"

	)

437 
	#LN_basic_c⁄°øöts
 "X509v3 Basi¯C⁄°øöts"

	)

438 
	#NID_basic_c⁄°øöts
 87

	)

439 
	#OBJ_basic_c⁄°øöts
 
OBJ_id_˚
,19L

	)

441 
	#SN_¸l_numbî
 "¸lNumbî"

	)

442 
	#LN_¸l_numbî
 "X509v3 CRL Numbî"

	)

443 
	#NID_¸l_numbî
 88

	)

444 
	#OBJ_¸l_numbî
 
OBJ_id_˚
,20L

	)

446 
	#SN_˚πifiˇã_pﬁicõs
 "˚πifiˇãPﬁicõs"

	)

447 
	#LN_˚πifiˇã_pﬁicõs
 "X509v3 Cîtifiˇã Pﬁicõs"

	)

448 
	#NID_˚πifiˇã_pﬁicõs
 89

	)

449 
	#OBJ_˚πifiˇã_pﬁicõs
 
OBJ_id_˚
,32L

	)

451 
	#SN_auth‹ôy_key_idítifõr
 "auth‹ôyKeyIdítifõr"

	)

452 
	#LN_auth‹ôy_key_idítifõr
 "X509v3 Auth‹ôy Key Idítifõr"

	)

453 
	#NID_auth‹ôy_key_idítifõr
 90

	)

454 
	#OBJ_auth‹ôy_key_idítifõr
 
OBJ_id_˚
,35L

	)

456 
	#SN_bf_cbc
 "BF-CBC"

	)

457 
	#LN_bf_cbc
 "bf-cbc"

	)

458 
	#NID_bf_cbc
 91

	)

459 
	#OBJ_bf_cbc
 1L,3L,6L,1L,4L,1L,3029L,1L,2L

	)

461 
	#SN_bf_ecb
 "BF-ECB"

	)

462 
	#LN_bf_ecb
 "bf-ecb"

	)

463 
	#NID_bf_ecb
 92

	)

465 
	#SN_bf_cfb64
 "BF-CFB"

	)

466 
	#LN_bf_cfb64
 "bf-cfb"

	)

467 
	#NID_bf_cfb64
 93

	)

469 
	#SN_bf_ofb64
 "BF-OFB"

	)

470 
	#LN_bf_ofb64
 "bf-ofb"

	)

471 
	#NID_bf_ofb64
 94

	)

473 
	#SN_mdc2
 "MDC2"

	)

474 
	#LN_mdc2
 "mdc2"

	)

475 
	#NID_mdc2
 95

	)

476 
	#OBJ_mdc2
 2L,5L,8L,3L,101L

	)

479 
	#SN_mdc2WôhRSA
 "RSA-MDC2"

	)

480 
	#LN_mdc2WôhRSA
 "mdc2wôhRSA"

	)

481 
	#NID_mdc2WôhRSA
 96

	)

482 
	#OBJ_mdc2WôhRSA
 2L,5L,8L,3L,100L

	)

484 
	#SN_rc4_40
 "RC4-40"

	)

485 
	#LN_rc4_40
 "rc4-40"

	)

486 
	#NID_rc4_40
 97

	)

488 
	#SN_rc2_40_cbc
 "RC2-40-CBC"

	)

489 
	#LN_rc2_40_cbc
 "rc2-40-cbc"

	)

490 
	#NID_rc2_40_cbc
 98

	)

492 
	#SN_givíName
 "G"

	)

493 
	#LN_givíName
 "givíName"

	)

494 
	#NID_givíName
 99

	)

495 
	#OBJ_givíName
 
OBJ_X509
,42L

	)

497 
	#SN_su∫ame
 "S"

	)

498 
	#LN_su∫ame
 "su∫ame"

	)

499 
	#NID_su∫ame
 100

	)

500 
	#OBJ_su∫ame
 
OBJ_X509
,4L

	)

502 
	#SN_öôüls
 "I"

	)

503 
	#LN_öôüls
 "öôüls"

	)

504 
	#NID_öôüls
 101

	)

505 
	#OBJ_öôüls
 
OBJ_X509
,43L

	)

507 
	#SN_uniqueIdítifõr
 "UID"

	)

508 
	#LN_uniqueIdítifõr
 "uniqueIdítifõr"

	)

509 
	#NID_uniqueIdítifõr
 102

	)

510 
	#OBJ_uniqueIdítifõr
 
OBJ_X509
,45L

	)

512 
	#SN_¸l_di°ributi⁄_poöts
 "¸lDi°ributi⁄Poöts"

	)

513 
	#LN_¸l_di°ributi⁄_poöts
 "X509v3 CRL Di°ributi⁄ Poöts"

	)

514 
	#NID_¸l_di°ributi⁄_poöts
 103

	)

515 
	#OBJ_¸l_di°ributi⁄_poöts
 
OBJ_id_˚
,31L

	)

517 
	#SN_md5WôhRSA
 "RSA-NP-MD5"

	)

518 
	#LN_md5WôhRSA
 "md5WôhRSA"

	)

519 
	#NID_md5WôhRSA
 104

	)

520 
	#OBJ_md5WôhRSA
 
OBJ_Æg‹ôhm
,3L

	)

522 
	#SN_£rülNumbî
 "SN"

	)

523 
	#LN_£rülNumbî
 "£rülNumbî"

	)

524 
	#NID_£rülNumbî
 105

	)

525 
	#OBJ_£rülNumbî
 
OBJ_X509
,5L

	)

527 
	#SN_tôÀ
 "T"

	)

528 
	#LN_tôÀ
 "tôÀ"

	)

529 
	#NID_tôÀ
 106

	)

530 
	#OBJ_tôÀ
 
OBJ_X509
,12L

	)

532 
	#SN_des¸ùti⁄
 "D"

	)

533 
	#LN_des¸ùti⁄
 "des¸ùti⁄"

	)

534 
	#NID_des¸ùti⁄
 107

	)

535 
	#OBJ_des¸ùti⁄
 
OBJ_X509
,13L

	)

538 
	#SN_ˇ°5_cbc
 "CAST5-CBC"

	)

539 
	#LN_ˇ°5_cbc
 "ˇ°5-cbc"

	)

540 
	#NID_ˇ°5_cbc
 108

	)

541 
	#OBJ_ˇ°5_cbc
 1L,2L,840L,113533L,7L,66L,10L

	)

543 
	#SN_ˇ°5_ecb
 "CAST5-ECB"

	)

544 
	#LN_ˇ°5_ecb
 "ˇ°5-ecb"

	)

545 
	#NID_ˇ°5_ecb
 109

	)

547 
	#SN_ˇ°5_cfb64
 "CAST5-CFB"

	)

548 
	#LN_ˇ°5_cfb64
 "ˇ°5-cfb"

	)

549 
	#NID_ˇ°5_cfb64
 110

	)

551 
	#SN_ˇ°5_ofb64
 "CAST5-OFB"

	)

552 
	#LN_ˇ°5_ofb64
 "ˇ°5-ofb"

	)

553 
	#NID_ˇ°5_ofb64
 111

	)

555 
	#LN_pbeWôhMD5AndCa°5_CBC
 "pbeWôhMD5AndCa°5CBC"

	)

556 
	#NID_pbeWôhMD5AndCa°5_CBC
 112

	)

557 
	#OBJ_pbeWôhMD5AndCa°5_CBC
 1L,2L,840L,113533L,7L,66L,12L

	)

564 
	#SN_dßWôhSHA1
 "DSA-SHA1"

	)

565 
	#LN_dßWôhSHA1
 "dßWôhSHA1"

	)

566 
	#NID_dßWôhSHA1
 113

	)

567 
	#OBJ_dßWôhSHA1
 1L,2L,840L,10040L,4L,3L

	)

569 
	#NID_md5_sha1
 114

	)

570 
	#SN_md5_sha1
 "MD5-SHA1"

	)

571 
	#LN_md5_sha1
 "md5-sha1"

	)

573 
	#SN_sha1WôhRSA
 "RSA-SHA1-2"

	)

574 
	#LN_sha1WôhRSA
 "sha1WôhRSA"

	)

575 
	#NID_sha1WôhRSA
 115

	)

576 
	#OBJ_sha1WôhRSA
 
OBJ_Æg‹ôhm
,29L

	)

578 
	#SN_dß
 "DSA"

	)

579 
	#LN_dß
 "dßEn¸y±i⁄"

	)

580 
	#NID_dß
 116

	)

581 
	#OBJ_dß
 1L,2L,840L,10040L,4L,1L

	)

583 
	#SN_rùemd160
 "RIPEMD160"

	)

584 
	#LN_rùemd160
 "rùemd160"

	)

585 
	#NID_rùemd160
 117

	)

586 
	#OBJ_rùemd160
 1L,3L,36L,3L,2L,1L

	)

592 
	#SN_rùemd160WôhRSA
 "RSA-RIPEMD160"

	)

593 
	#LN_rùemd160WôhRSA
 "rùemd160WôhRSA"

	)

594 
	#NID_rùemd160WôhRSA
 119

	)

595 
	#OBJ_rùemd160WôhRSA
 1L,3L,36L,3L,3L,1L,2L

	)

606 
	#SN_rc5_cbc
 "RC5-CBC"

	)

607 
	#LN_rc5_cbc
 "rc5-cbc"

	)

608 
	#NID_rc5_cbc
 120

	)

609 
	#OBJ_rc5_cbc
 
OBJ_rßdsi
,3L,8L

	)

611 
	#SN_rc5_ecb
 "RC5-ECB"

	)

612 
	#LN_rc5_ecb
 "rc5-ecb"

	)

613 
	#NID_rc5_ecb
 121

	)

615 
	#SN_rc5_cfb64
 "RC5-CFB"

	)

616 
	#LN_rc5_cfb64
 "rc5-cfb"

	)

617 
	#NID_rc5_cfb64
 122

	)

619 
	#SN_rc5_ofb64
 "RC5-OFB"

	)

620 
	#LN_rc5_ofb64
 "rc5-ofb"

	)

621 
	#NID_rc5_ofb64
 123

	)

623 
	#SN_æe_com¥essi⁄
 "RLE"

	)

624 
	#LN_æe_com¥essi⁄
 "ru¿Àngth com¥essi⁄"

	)

625 
	#NID_æe_com¥essi⁄
 124

	)

626 
	#OBJ_æe_com¥essi⁄
 1L,1L,1L,1L,666L,1L

	)

628 
	#SN_zlib_com¥essi⁄
 "ZLIB"

	)

629 
	#LN_zlib_com¥essi⁄
 "zlib com¥essi⁄"

	)

630 
	#NID_zlib_com¥essi⁄
 125

	)

631 
	#OBJ_zlib_com¥essi⁄
 1L,1L,1L,1L,666L,2L

	)

633 
	#SN_ext_key_ußge
 "exãndedKeyUßge"

	)

634 
	#LN_ext_key_ußge
 "X509v3 Exãnded Key Ußge"

	)

635 
	#NID_ext_key_ußge
 126

	)

636 
	#OBJ_ext_key_ußge
 
OBJ_id_˚
,37

	)

638 
	#SN_id_pkix
 "PKIX"

	)

639 
	#NID_id_pkix
 127

	)

640 
	#OBJ_id_pkix
 1L,3L,6L,1L,5L,5L,7L

	)

642 
	#SN_id_kp
 "id-kp"

	)

643 
	#NID_id_kp
 128

	)

644 
	#OBJ_id_kp
 
OBJ_id_pkix
,3L

	)

648 
	#SN_£rvî_auth
 "£rvîAuth"

	)

649 
	#LN_£rvî_auth
 "TLS Web Sîvî Authítiˇti⁄"

	)

650 
	#NID_£rvî_auth
 129

	)

651 
	#OBJ_£rvî_auth
 
OBJ_id_kp
,1L

	)

653 
	#SN_˛õ¡_auth
 "˛õ¡Auth"

	)

654 
	#LN_˛õ¡_auth
 "TLS Web Clõ¡ Authítiˇti⁄"

	)

655 
	#NID_˛õ¡_auth
 130

	)

656 
	#OBJ_˛õ¡_auth
 
OBJ_id_kp
,2L

	)

658 
	#SN_code_sign
 "codeSignög"

	)

659 
	#LN_code_sign
 "CodêSignög"

	)

660 
	#NID_code_sign
 131

	)

661 
	#OBJ_code_sign
 
OBJ_id_kp
,3L

	)

663 
	#SN_emaû_¥Ÿe˘
 "emaûPrŸe˘i⁄"

	)

664 
	#LN_emaû_¥Ÿe˘
 "E-maû PrŸe˘i⁄"

	)

665 
	#NID_emaû_¥Ÿe˘
 132

	)

666 
	#OBJ_emaû_¥Ÿe˘
 
OBJ_id_kp
,4L

	)

668 
	#SN_time_°amp
 "timeSèmpög"

	)

669 
	#LN_time_°amp
 "TimêSèmpög"

	)

670 
	#NID_time_°amp
 133

	)

671 
	#OBJ_time_°amp
 
OBJ_id_kp
,8L

	)

675 
	#SN_ms_code_öd
 "msCodeInd"

	)

676 
	#LN_ms_code_öd
 "Mi¸oso· IndividuÆ CodêSignög"

	)

677 
	#NID_ms_code_öd
 134

	)

678 
	#OBJ_ms_code_öd
 1L,3L,6L,1L,4L,1L,311L,2L,1L,21L

	)

680 
	#SN_ms_code_com
 "msCodeCom"

	)

681 
	#LN_ms_code_com
 "Mi¸oso· Commîcü»CodêSignög"

	)

682 
	#NID_ms_code_com
 135

	)

683 
	#OBJ_ms_code_com
 1L,3L,6L,1L,4L,1L,311L,2L,1L,22L

	)

685 
	#SN_ms_˘l_sign
 "msCTLSign"

	)

686 
	#LN_ms_˘l_sign
 "Mi¸oso· Tru° Li° Signög"

	)

687 
	#NID_ms_˘l_sign
 136

	)

688 
	#OBJ_ms_˘l_sign
 1L,3L,6L,1L,4L,1L,311L,10L,3L,1L

	)

690 
	#SN_ms_sgc
 "msSGC"

	)

691 
	#LN_ms_sgc
 "Mi¸oso· Sîvî G©ed Cry±o"

	)

692 
	#NID_ms_sgc
 137

	)

693 
	#OBJ_ms_sgc
 1L,3L,6L,1L,4L,1L,311L,10L,3L,3L

	)

695 
	#SN_ms_efs
 "msEFS"

	)

696 
	#LN_ms_efs
 "Mi¸oso· En¸y±ed FûêSy°em"

	)

697 
	#NID_ms_efs
 138

	)

698 
	#OBJ_ms_efs
 1L,3L,6L,1L,4L,1L,311L,10L,3L,4L

	)

702 
	#SN_ns_sgc
 "nsSGC"

	)

703 
	#LN_ns_sgc
 "Nësˇ≥ Sîvî G©ed Cry±o"

	)

704 
	#NID_ns_sgc
 139

	)

705 
	#OBJ_ns_sgc
 
OBJ_√tsˇ≥
,4L,1L

	)

707 
	#SN_dñè_¸l
 "dñèCRL"

	)

708 
	#LN_dñè_¸l
 "X509v3 Dñè CRL Indiˇt‹"

	)

709 
	#NID_dñè_¸l
 140

	)

710 
	#OBJ_dñè_¸l
 
OBJ_id_˚
,27L

	)

712 
	#SN_¸l_ªas⁄
 "CRLRós⁄"

	)

713 
	#LN_¸l_ªas⁄
 "CRL Rós⁄ Code"

	)

714 
	#NID_¸l_ªas⁄
 141

	)

715 
	#OBJ_¸l_ªas⁄
 
OBJ_id_˚
,21L

	)

717 
	#SN_övÆidôy_d©e
 "övÆidôyD©e"

	)

718 
	#LN_övÆidôy_d©e
 "InvÆidôy D©e"

	)

719 
	#NID_övÆidôy_d©e
 142

	)

720 
	#OBJ_övÆidôy_d©e
 
OBJ_id_˚
,24L

	)

722 
	#SN_sx√t
 "SXNëID"

	)

723 
	#LN_sx√t
 "Så⁄g Exå™ë ID"

	)

724 
	#NID_sx√t
 143

	)

725 
	#OBJ_sx√t
 1L,3L,101L,1L,4L,1L

	)

729 
	#OBJ_pkcs12
 
OBJ_pkcs
,12L

	)

730 
	#OBJ_pkcs12_pbeids
 
OBJ_pkcs12
, 1

	)

732 
	#SN_pbe_WôhSHA1And128BôRC4
 "PBE-SHA1-RC4-128"

	)

733 
	#LN_pbe_WôhSHA1And128BôRC4
 "pbeWôhSHA1And128BôRC4"

	)

734 
	#NID_pbe_WôhSHA1And128BôRC4
 144

	)

735 
	#OBJ_pbe_WôhSHA1And128BôRC4
 
OBJ_pkcs12_pbeids
, 1L

	)

737 
	#SN_pbe_WôhSHA1And40BôRC4
 "PBE-SHA1-RC4-40"

	)

738 
	#LN_pbe_WôhSHA1And40BôRC4
 "pbeWôhSHA1And40BôRC4"

	)

739 
	#NID_pbe_WôhSHA1And40BôRC4
 145

	)

740 
	#OBJ_pbe_WôhSHA1And40BôRC4
 
OBJ_pkcs12_pbeids
, 2L

	)

742 
	#SN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "PBE-SHA1-3DES"

	)

743 
	#LN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "pbeWôhSHA1And3-KeyTrùÀDES-CBC"

	)

744 
	#NID_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 146

	)

745 
	#OBJ_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
, 3L

	)

747 
	#SN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "PBE-SHA1-2DES"

	)

748 
	#LN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "pbeWôhSHA1And2-KeyTrùÀDES-CBC"

	)

749 
	#NID_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 147

	)

750 
	#OBJ_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
, 4L

	)

752 
	#SN_pbe_WôhSHA1And128BôRC2_CBC
 "PBE-SHA1-RC2-128"

	)

753 
	#LN_pbe_WôhSHA1And128BôRC2_CBC
 "pbeWôhSHA1And128BôRC2-CBC"

	)

754 
	#NID_pbe_WôhSHA1And128BôRC2_CBC
 148

	)

755 
	#OBJ_pbe_WôhSHA1And128BôRC2_CBC
 
OBJ_pkcs12_pbeids
, 5L

	)

757 
	#SN_pbe_WôhSHA1And40BôRC2_CBC
 "PBE-SHA1-RC2-40"

	)

758 
	#LN_pbe_WôhSHA1And40BôRC2_CBC
 "pbeWôhSHA1And40BôRC2-CBC"

	)

759 
	#NID_pbe_WôhSHA1And40BôRC2_CBC
 149

	)

760 
	#OBJ_pbe_WôhSHA1And40BôRC2_CBC
 
OBJ_pkcs12_pbeids
, 6L

	)

762 
	#OBJ_pkcs12_Vîsi⁄1
 
OBJ_pkcs12
, 10L

	)

764 
	#OBJ_pkcs12_BagIds
 
OBJ_pkcs12_Vîsi⁄1
, 1L

	)

766 
	#LN_keyBag
 "keyBag"

	)

767 
	#NID_keyBag
 150

	)

768 
	#OBJ_keyBag
 
OBJ_pkcs12_BagIds
, 1L

	)

770 
	#LN_pkcs8ShroudedKeyBag
 "pkcs8ShroudedKeyBag"

	)

771 
	#NID_pkcs8ShroudedKeyBag
 151

	)

772 
	#OBJ_pkcs8ShroudedKeyBag
 
OBJ_pkcs12_BagIds
, 2L

	)

774 
	#LN_˚πBag
 "˚πBag"

	)

775 
	#NID_˚πBag
 152

	)

776 
	#OBJ_˚πBag
 
OBJ_pkcs12_BagIds
, 3L

	)

778 
	#LN_¸lBag
 "¸lBag"

	)

779 
	#NID_¸lBag
 153

	)

780 
	#OBJ_¸lBag
 
OBJ_pkcs12_BagIds
, 4L

	)

782 
	#LN_£¸ëBag
 "£¸ëBag"

	)

783 
	#NID_£¸ëBag
 154

	)

784 
	#OBJ_£¸ëBag
 
OBJ_pkcs12_BagIds
, 5L

	)

786 
	#LN_ß„C⁄ã¡sBag
 "ß„C⁄ã¡sBag"

	)

787 
	#NID_ß„C⁄ã¡sBag
 155

	)

788 
	#OBJ_ß„C⁄ã¡sBag
 
OBJ_pkcs12_BagIds
, 6L

	)

790 
	#LN_‰õndlyName
 "‰õndlyName"

	)

791 
	#NID_‰õndlyName
 156

	)

792 
	#OBJ_‰õndlyName
 
OBJ_pkcs9
, 20L

	)

794 
	#LN_loˇlKeyID
 "loˇlKeyID"

	)

795 
	#NID_loˇlKeyID
 157

	)

796 
	#OBJ_loˇlKeyID
 
OBJ_pkcs9
, 21L

	)

798 
	#OBJ_˚πTy≥s
 
OBJ_pkcs9
, 22L

	)

800 
	#LN_x509Cîtifiˇã
 "x509Cîtifiˇã"

	)

801 
	#NID_x509Cîtifiˇã
 158

	)

802 
	#OBJ_x509Cîtifiˇã
 
OBJ_˚πTy≥s
, 1L

	)

804 
	#LN_sdsiCîtifiˇã
 "sdsiCîtifiˇã"

	)

805 
	#NID_sdsiCîtifiˇã
 159

	)

806 
	#OBJ_sdsiCîtifiˇã
 
OBJ_˚πTy≥s
, 2L

	)

808 
	#OBJ_¸lTy≥s
 
OBJ_pkcs9
, 23L

	)

810 
	#LN_x509Cæ
 "x509Cæ"

	)

811 
	#NID_x509Cæ
 160

	)

812 
	#OBJ_x509Cæ
 
OBJ_¸lTy≥s
, 1L

	)

816 
	#LN_pbes2
 "PBES2"

	)

817 
	#NID_pbes2
 161

	)

818 
	#OBJ_pbes2
 
OBJ_pkcs
,5L,13L

	)

820 
	#LN_pbmac1
 "PBMAC1"

	)

821 
	#NID_pbmac1
 162

	)

822 
	#OBJ_pbmac1
 
OBJ_pkcs
,5L,14L

	)

824 
	#LN_hmacWôhSHA1
 "hmacWôhSHA1"

	)

825 
	#NID_hmacWôhSHA1
 163

	)

826 
	#OBJ_hmacWôhSHA1
 
OBJ_rßdsi
,2L,7L

	)

830 
	#LN_id_qt_˝s
 "Pﬁicy QuÆifõ∏CPS"

	)

831 
	#SN_id_qt_˝s
 "id-qt-˝s"

	)

832 
	#NID_id_qt_˝s
 164

	)

833 
	#OBJ_id_qt_˝s
 
OBJ_id_pkix
,2L,1L

	)

835 
	#LN_id_qt_unŸi˚
 "Pﬁicy QuÆifõ∏U£∏NŸi˚"

	)

836 
	#SN_id_qt_unŸi˚
 "id-qt-unŸi˚"

	)

837 
	#NID_id_qt_unŸi˚
 165

	)

838 
	#OBJ_id_qt_unŸi˚
 
OBJ_id_pkix
,2L,2L

	)

840 
	#SN_rc2_64_cbc
 "RC2-64-CBC"

	)

841 
	#LN_rc2_64_cbc
 "rc2-64-cbc"

	)

842 
	#NID_rc2_64_cbc
 166

	)

844 
	#SN_SMIMEC≠abûôõs
 "SMIME-CAPS"

	)

845 
	#LN_SMIMEC≠abûôõs
 "S/MIME C≠abûôõs"

	)

846 
	#NID_SMIMEC≠abûôõs
 167

	)

847 
	#OBJ_SMIMEC≠abûôõs
 
OBJ_pkcs9
,15L

	)

849 
	#SN_pbeWôhMD2AndRC2_CBC
 "PBE-MD2-RC2-64"

	)

850 
	#LN_pbeWôhMD2AndRC2_CBC
 "pbeWôhMD2AndRC2-CBC"

	)

851 
	#NID_pbeWôhMD2AndRC2_CBC
 168

	)

852 
	#OBJ_pbeWôhMD2AndRC2_CBC
 
OBJ_pkcs
,5L,4L

	)

854 
	#SN_pbeWôhMD5AndRC2_CBC
 "PBE-MD5-RC2-64"

	)

855 
	#LN_pbeWôhMD5AndRC2_CBC
 "pbeWôhMD5AndRC2-CBC"

	)

856 
	#NID_pbeWôhMD5AndRC2_CBC
 169

	)

857 
	#OBJ_pbeWôhMD5AndRC2_CBC
 
OBJ_pkcs
,5L,6L

	)

859 
	#SN_pbeWôhSHA1AndDES_CBC
 "PBE-SHA1-DES"

	)

860 
	#LN_pbeWôhSHA1AndDES_CBC
 "pbeWôhSHA1AndDES-CBC"

	)

861 
	#NID_pbeWôhSHA1AndDES_CBC
 170

	)

862 
	#OBJ_pbeWôhSHA1AndDES_CBC
 
OBJ_pkcs
,5L,10L

	)

866 
	#LN_ms_ext_ªq
 "Mi¸oso· Exãnsi⁄ Reque°"

	)

867 
	#SN_ms_ext_ªq
 "msExtReq"

	)

868 
	#NID_ms_ext_ªq
 171

	)

869 
	#OBJ_ms_ext_ªq
 1L,3L,6L,1L,4L,1L,311L,2L,1L,14L

	)

871 
	#LN_ext_ªq
 "Exãnsi⁄ Reque°"

	)

872 
	#SN_ext_ªq
 "extReq"

	)

873 
	#NID_ext_ªq
 172

	)

874 
	#OBJ_ext_ªq
 
OBJ_pkcs9
,14L

	)

876 
	#SN_«me
 "«me"

	)

877 
	#LN_«me
 "«me"

	)

878 
	#NID_«me
 173

	)

879 
	#OBJ_«me
 
OBJ_X509
,41L

	)

881 
	#SN_dnQuÆifõr
 "dnQuÆifõr"

	)

882 
	#LN_dnQuÆifõr
 "dnQuÆifõr"

	)

883 
	#NID_dnQuÆifõr
 174

	)

884 
	#OBJ_dnQuÆifõr
 
OBJ_X509
,46L

	)

886 
	#SN_id_≥
 "id-≥"

	)

887 
	#NID_id_≥
 175

	)

888 
	#OBJ_id_≥
 
OBJ_id_pkix
,1L

	)

890 
	#SN_id_ad
 "id-ad"

	)

891 
	#NID_id_ad
 176

	)

892 
	#OBJ_id_ad
 
OBJ_id_pkix
,48L

	)

894 
	#SN_öfo_ac˚ss
 "auth‹ôyInfoAc˚ss"

	)

895 
	#LN_öfo_ac˚ss
 "Auth‹ôy Inf‹m©i⁄ Ac˚ss"

	)

896 
	#NID_öfo_ac˚ss
 177

	)

897 
	#OBJ_öfo_ac˚ss
 
OBJ_id_≥
,1L

	)

899 
	#SN_ad_OCSP
 "OCSP"

	)

900 
	#LN_ad_OCSP
 "OCSP"

	)

901 
	#NID_ad_OCSP
 178

	)

902 
	#OBJ_ad_OCSP
 
OBJ_id_ad
,1L

	)

904 
	#SN_ad_ˇ_issuîs
 "ˇIssuîs"

	)

905 
	#LN_ad_ˇ_issuîs
 "CA Issuîs"

	)

906 
	#NID_ad_ˇ_issuîs
 179

	)

907 
	#OBJ_ad_ˇ_issuîs
 
OBJ_id_ad
,2L

	)

909 
	#SN_OCSP_sign
 "OCSPSignög"

	)

910 
	#LN_OCSP_sign
 "OCSP Signög"

	)

911 
	#NID_OCSP_sign
 180

	)

912 
	#OBJ_OCSP_sign
 
OBJ_id_kp
,9L

	)

915 
	~<›ís¶/bio.h
>

916 
	~<›ís¶/a¢1.h
>

918 
	#OBJ_NAME_TYPE_UNDEF
 0x00

	)

919 
	#OBJ_NAME_TYPE_MD_METH
 0x01

	)

920 
	#OBJ_NAME_TYPE_CIPHER_METH
 0x02

	)

921 
	#OBJ_NAME_TYPE_PKEY_METH
 0x03

	)

922 
	#OBJ_NAME_TYPE_COMP_METH
 0x04

	)

923 
	#OBJ_NAME_TYPE_NUM
 0x05

	)

925 
	#OBJ_NAME_ALIAS
 0x8000

	)

927 
	#OBJ_BSEARCH_VALUE_ON_NOMATCH
 0x01

	)

928 
	#OBJ_BSEARCH_FIRST_VALUE_ON_MATCH
 0x02

	)

931 #ifde‡ 
__˝lu•lus


935 
	sobj_«me_°
 {

936 
ty≥
;

937 
Æüs
;

938 c⁄° *
«me
;

939 c⁄° *
d©a
;

940 } 
	tOBJ_NAME
;

942 
	#OBJ_¸óã_™d_add_obje˘
(
a
,
b
,
c
Ë
	`OBJ_¸óã
◊,b,c)

	)

944 
OBJ_NAME_öô
();

945 
OBJ_NAME_√w_ödex
((*
hash_func
) (const *),

946 (*
cmp_func
) (const *, const *),

947 (*
‰ì_func
) (const *, , const *));

948 c⁄° *
OBJ_NAME_gë
(c⁄° *
«me
, 
ty≥
);

949 
OBJ_NAME_add
(c⁄° *
«me
, 
ty≥
, c⁄° *
d©a
);

950 
OBJ_NAME_ªmove
(c⁄° *
«me
, 
ty≥
);

951 
OBJ_NAME_˛ónup
(
ty≥
);

952 
OBJ_NAME_do_Æl
(
ty≥
, (*
‚
Ë(c⁄° 
OBJ_NAME
 *, *
¨g
),

953 *
¨g
);

954 
OBJ_NAME_do_Æl_s‹ãd
(
ty≥
,

955 (*
‚
Ë(c⁄° 
OBJ_NAME
 *, *
¨g
),

956 *
¨g
);

958 
ASN1_OBJECT
 *
OBJ_dup
(c⁄° ASN1_OBJECT *
o
);

959 
ASN1_OBJECT
 *
OBJ_nid2obj
(
n
);

960 c⁄° *
OBJ_nid2 
(
n
);

961 c⁄° *
OBJ_nid2¢
(
n
);

962 
OBJ_obj2nid
(c⁄° 
ASN1_OBJECT
 *
o
);

963 
ASN1_OBJECT
 *
OBJ_txt2obj
(c⁄° *
s
, 
no_«me
);

964 
OBJ_obj2txt
(*
buf
, 
buf_Àn
, c⁄° 
ASN1_OBJECT
 *
a
, 
no_«me
);

965 
OBJ_txt2nid
(c⁄° *
s
);

966 
OBJ_ 2nid
(c⁄° *
s
);

967 
OBJ_¢2nid
(c⁄° *
s
);

968 
OBJ_cmp
(c⁄° 
ASN1_OBJECT
 *
a
, c⁄° ASN1_OBJECT *
b
);

969 c⁄° *
OBJ_b£¨ch_
(c⁄° *
key
, c⁄° *
ba£
, 
num
, 
size
,

970 (*
cmp
) (const *, const *));

971 c⁄° *
OBJ_b£¨ch_ex_
(c⁄° *
key
, c⁄° *
ba£
, 
num
,

972 
size
,

973 (*
cmp
) (const *, const *),

974 
Êags
);

976 
	#_DECLARE_OBJ_BSEARCH_CMP_FN
(
sc›e
, 
ty≥1
, 
ty≥2
, 
nm
) \

977 
nm
##
	`_cmp_BSEARCH_CMP_FN
(const *, const *); \

978 
nm
##
	`_cmp
(
ty≥1
 c⁄° *, 
ty≥2
 const *); \

979 
sc›e
 
ty≥2
 * 
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
)

	)

981 
	#DECLARE_OBJ_BSEARCH_CMP_FN
(
ty≥1
, 
ty≥2
, 
cmp
) \

982 
	`_DECLARE_OBJ_BSEARCH_CMP_FN
(, 
ty≥1
, 
ty≥2
, 
cmp
)

	)

983 
	#DECLARE_OBJ_BSEARCH_GLOBAL_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

984 
ty≥2
 * 
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
)

	)

1013 
	#IMPLEMENT_OBJ_BSEARCH_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

1014 
nm
##
	`_cmp_BSEARCH_CMP_FN
(c⁄° *
a_
, c⁄° *
b_
) \

1016 
ty≥1
 c⁄° *
a
 = 
a_
; \

1017 
ty≥2
 c⁄° *
b
 = 
b_
; \

1018  
nm
##
	`_cmp
(
a
,
b
); \

1020 
ty≥2
 *
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
) \

1022  (
ty≥2
 *)
	`OBJ_b£¨ch_
(
key
, 
ba£
, 
num
, (type2), \

1023 
nm
##
_cmp_BSEARCH_CMP_FN
); \

1025 
	`dummy_¥ŸŸy≥
()

	)

1027 
	#IMPLEMENT_OBJ_BSEARCH_GLOBAL_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

1028 
nm
##
	`_cmp_BSEARCH_CMP_FN
(c⁄° *
a_
, c⁄° *
b_
) \

1030 
ty≥1
 c⁄° *
a
 = 
a_
; \

1031 
ty≥2
 c⁄° *
b
 = 
b_
; \

1032  
nm
##
	`_cmp
(
a
,
b
); \

1034 
ty≥2
 *
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
) \

1036  (
ty≥2
 *)
	`OBJ_b£¨ch_
(
key
, 
ba£
, 
num
, (type2), \

1037 
nm
##
_cmp_BSEARCH_CMP_FN
); \

1039 
	`dummy_¥ŸŸy≥
()

	)

1041 
	#OBJ_b£¨ch
(
ty≥1
,
key
,
ty≥2
,
ba£
,
num
,
cmp
) \

1042 ((
ty≥2
 *)
	`OBJ_b£¨ch_
(
	`CHECKED_PTR_OF
(
ty≥1
,
key
),CHECKED_PTR_OF—y≥2,
ba£
), \

1043 
num
,(
ty≥2
), \

1044 (()
	`CHECKED_PTR_OF
(
ty≥1
,
cmp
##
_ty≥_1
), \

1045 ()
	`CHECKED_PTR_OF
(
ty≥2
,
cmp
##
_ty≥_2
), \

1046 
cmp
##
_BSEARCH_CMP_FN
)))

	)

1048 
	#OBJ_b£¨ch_ex
(
ty≥1
,
key
,
ty≥2
,
ba£
,
num
,
cmp
,
Êags
) \

1049 ((
ty≥2
 *)
	`OBJ_b£¨ch_ex_
(
	`CHECKED_PTR_OF
(
ty≥1
,
key
),CHECKED_PTR_OF—y≥2,
ba£
), \

1050 
num
,(
ty≥2
), \

1051 (()
	`CHECKED_PTR_OF
(
ty≥1
,
cmp
##
_ty≥_1
), \

1052 ()
ty≥_2
=
	`CHECKED_PTR_OF
(
ty≥2
,
cmp
##
_ty≥_2
), \

1053 
cmp
##
_BSEARCH_CMP_FN
)),
Êags
)

	)

1055 
OBJ_√w_nid
(
num
);

1056 
OBJ_add_obje˘
(c⁄° 
ASN1_OBJECT
 *
obj
);

1057 
OBJ_¸óã
(c⁄° *
oid
, c⁄° *
¢
, c⁄° *
 
);

1058 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

1059 
	#OBJ_˛ónup
(Ë0Ë

	)

1061 
OBJ_¸óã_obje˘s
(
BIO
 *
ö
);

1063 
size_t
 
OBJ_Àngth
(c⁄° 
ASN1_OBJECT
 *
obj
);

1064 c⁄° *
OBJ_gë0_d©a
(c⁄° 
ASN1_OBJECT
 *
obj
);

1066 
OBJ_föd_sigid_Ægs
(
signid
, *
pdig_nid
, *
µkey_nid
);

1067 
OBJ_föd_sigid_by_Ægs
(*
psignid
, 
dig_nid
, 
pkey_nid
);

1068 
OBJ_add_sigid
(
signid
, 
dig_id
, 
pkey_id
);

1069 
OBJ_sigid_‰ì
();

1077 
ERR_lﬂd_OBJ_°rögs
();

1082 
	#OBJ_F_OBJ_ADD_OBJECT
 105

	)

1083 
	#OBJ_F_OBJ_CREATE
 100

	)

1084 
	#OBJ_F_OBJ_DUP
 101

	)

1085 
	#OBJ_F_OBJ_NAME_NEW_INDEX
 106

	)

1086 
	#OBJ_F_OBJ_NID2LN
 102

	)

1087 
	#OBJ_F_OBJ_NID2OBJ
 103

	)

1088 
	#OBJ_F_OBJ_NID2SN
 104

	)

1091 
	#OBJ_R_OID_EXISTS
 102

	)

1092 
	#OBJ_R_UNKNOWN_NID
 101

	)

1094 #ifde‡ 
__˝lu•lus


	@ocsp.h

10 #i‚de‡
HEADER_OCSP_H


11 
	#HEADER_OCSP_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

31 
	#OCSP_REVOKED_STATUS_NOSTATUS
 -1

	)

32 
	#OCSP_REVOKED_STATUS_UNSPECIFIED
 0

	)

33 
	#OCSP_REVOKED_STATUS_KEYCOMPROMISE
 1

	)

34 
	#OCSP_REVOKED_STATUS_CACOMPROMISE
 2

	)

35 
	#OCSP_REVOKED_STATUS_AFFILIATIONCHANGED
 3

	)

36 
	#OCSP_REVOKED_STATUS_SUPERSEDED
 4

	)

37 
	#OCSP_REVOKED_STATUS_CESSATIONOFOPERATION
 5

	)

38 
	#OCSP_REVOKED_STATUS_CERTIFICATEHOLD
 6

	)

39 
	#OCSP_REVOKED_STATUS_REMOVEFROMCRL
 8

	)

42 #i‚de‡
OPENSSL_NO_OCSP


44 
	~<›ís¶/os¶_typ.h
>

45 
	~<›ís¶/x509.h
>

46 
	~<›ís¶/x509v3.h
>

47 
	~<›ís¶/ß„°ack.h
>

49 #ifde‡ 
__˝lu•lus


55 
	#OCSP_DEFAULT_NONCE_LENGTH
 16

	)

57 
	#OCSP_NOCERTS
 0x1

	)

58 
	#OCSP_NOINTERN
 0x2

	)

59 
	#OCSP_NOSIGS
 0x4

	)

60 
	#OCSP_NOCHAIN
 0x8

	)

61 
	#OCSP_NOVERIFY
 0x10

	)

62 
	#OCSP_NOEXPLICIT
 0x20

	)

63 
	#OCSP_NOCASIGN
 0x40

	)

64 
	#OCSP_NODELEGATED
 0x80

	)

65 
	#OCSP_NOCHECKS
 0x100

	)

66 
	#OCSP_TRUSTOTHER
 0x200

	)

67 
	#OCSP_RESPID_KEY
 0x400

	)

68 
	#OCSP_NOTIME
 0x800

	)

70 
oc•_˚π_id_°
 
	tOCSP_CERTID
;

72 
DEFINE_STACK_OF
(
OCSP_CERTID
)

74 
oc•_⁄e_ªque°_°
 
	tOCSP_ONEREQ
;

76 
DEFINE_STACK_OF
(
OCSP_ONEREQ
)

78 
oc•_ªq_öfo_°
 
	tOCSP_REQINFO
;

79 
oc•_sig«tuª_°
 
	tOCSP_SIGNATURE
;

80 
oc•_ªque°_°
 
	tOCSP_REQUEST
;

82 
	#OCSP_RESPONSE_STATUS_SUCCESSFUL
 0

	)

83 
	#OCSP_RESPONSE_STATUS_MALFORMEDREQUEST
 1

	)

84 
	#OCSP_RESPONSE_STATUS_INTERNALERROR
 2

	)

85 
	#OCSP_RESPONSE_STATUS_TRYLATER
 3

	)

86 
	#OCSP_RESPONSE_STATUS_SIGREQUIRED
 5

	)

87 
	#OCSP_RESPONSE_STATUS_UNAUTHORIZED
 6

	)

89 
oc•_ª•_byãs_°
 
	tOCSP_RESPBYTES
;

91 
	#V_OCSP_RESPID_NAME
 0

	)

92 
	#V_OCSP_RESPID_KEY
 1

	)

94 
DEFINE_STACK_OF
(
OCSP_RESPID
)

95 
DECLARE_ASN1_FUNCTIONS
(
OCSP_RESPID
)

97 
oc•_ªvoked_öfo_°
 
	tOCSP_REVOKEDINFO
;

99 
	#V_OCSP_CERTSTATUS_GOOD
 0

	)

100 
	#V_OCSP_CERTSTATUS_REVOKED
 1

	)

101 
	#V_OCSP_CERTSTATUS_UNKNOWN
 2

	)

103 
oc•_˚π_°©us_°
 
	tOCSP_CERTSTATUS
;

104 
oc•_sögÀ_ª•⁄£_°
 
	tOCSP_SINGLERESP
;

106 
DEFINE_STACK_OF
(
OCSP_SINGLERESP
)

108 
oc•_ª•⁄£_d©a_°
 
	tOCSP_RESPDATA
;

110 
oc•_basic_ª•⁄£_°
 
	tOCSP_BASICRESP
;

112 
oc•_¸l_id_°
 
	tOCSP_CRLID
;

113 
oc•_£rvi˚_loˇt‹_°
 
	tOCSP_SERVICELOC
;

115 
	#PEM_STRING_OCSP_REQUEST
 "OCSP REQUEST"

	)

116 
	#PEM_STRING_OCSP_RESPONSE
 "OCSP RESPONSE"

	)

118 
	#d2i_OCSP_REQUEST_bio
(
bp
,
p
Ë
	`ASN1_d2i_bio_of
(
OCSP_REQUEST
,
OCSP_REQUEST_√w
,
d2i_OCSP_REQUEST
,bp,p)

	)

120 
	#d2i_OCSP_RESPONSE_bio
(
bp
,
p
Ë
	`ASN1_d2i_bio_of
(
OCSP_RESPONSE
,
OCSP_RESPONSE_√w
,
d2i_OCSP_RESPONSE
,bp,p)

	)

122 
	#PEM_ªad_bio_OCSP_REQUEST
(
bp
,
x
,
cb
Ë(
OCSP_REQUEST
 *)
	`PEM_ASN1_ªad_bio
( \

123 (*(*)())
d2i_OCSP_REQUEST
,
PEM_STRING_OCSP_REQUEST
,
bp
,(**)
x
,
cb
,
NULL
)

	)

125 
	#PEM_ªad_bio_OCSP_RESPONSE
(
bp
,
x
,
cb
)(
OCSP_RESPONSE
 *)
	`PEM_ASN1_ªad_bio
(\

126 (*(*)())
d2i_OCSP_RESPONSE
,
PEM_STRING_OCSP_RESPONSE
,
bp
,(**)
x
,
cb
,
NULL
)

	)

128 
	#PEM_wrôe_bio_OCSP_REQUEST
(
bp
,
o
) \

129 
	`PEM_ASN1_wrôe_bio
(((*)())
i2d_OCSP_REQUEST
,
PEM_STRING_OCSP_REQUEST
,\

130 
bp
,(*)
o
, 
NULL
,NULL,0,NULL,NULL)

	)

132 
	#PEM_wrôe_bio_OCSP_RESPONSE
(
bp
,
o
) \

133 
	`PEM_ASN1_wrôe_bio
(((*)())
i2d_OCSP_RESPONSE
,
PEM_STRING_OCSP_RESPONSE
,\

134 
bp
,(*)
o
, 
NULL
,NULL,0,NULL,NULL)

	)

136 
	#i2d_OCSP_RESPONSE_bio
(
bp
,
o
Ë
	`ASN1_i2d_bio_of
(
OCSP_RESPONSE
,
i2d_OCSP_RESPONSE
,bp,o)

	)

138 
	#i2d_OCSP_REQUEST_bio
(
bp
,
o
Ë
	`ASN1_i2d_bio_of
(
OCSP_REQUEST
,
i2d_OCSP_REQUEST
,bp,o)

	)

140 
	#OCSP_REQUEST_sign
(
o
,
pkey
,
md
) \

141 
	`ASN1_ôem_sign
(
	`ASN1_ITEM_Ωå
(
OCSP_REQINFO
),\

142 &
o
->
›ti⁄ÆSig«tuª
->
sig«tuªAlg‹ôhm
,
NULL
,\

143 
o
->
›ti⁄ÆSig«tuª
->
sig«tuª
,&o->
tbsReque°
,
pkey
,
md
)

	)

145 
	#OCSP_BASICRESP_sign
(
o
,
pkey
,
md
,
d
) \

146 
	`ASN1_ôem_sign
(
	`ASN1_ITEM_Ωå
(
OCSP_RESPDATA
),&
o
->
sig«tuªAlg‹ôhm
,
NULL
,\

147 
o
->
sig«tuª
,&o->
tbsRe•⁄£D©a
,
pkey
,
md
)

	)

149 
	#OCSP_REQUEST_vîify
(
a
,
r
Ë
	`ASN1_ôem_vîify
(
	`ASN1_ITEM_Ωå
(
OCSP_REQINFO
),\

150 &
a
->
›ti⁄ÆSig«tuª
->
sig«tuªAlg‹ôhm
,\

151 
a
->
›ti⁄ÆSig«tuª
->
sig«tuª
,&a->
tbsReque°
,
r
)

	)

153 
	#OCSP_BASICRESP_vîify
(
a
,
r
,
d
Ë
	`ASN1_ôem_vîify
(
	`ASN1_ITEM_Ωå
(
OCSP_RESPDATA
),\

154 &
a
->
sig«tuªAlg‹ôhm
,a->
sig«tuª
,&a->
tbsRe•⁄£D©a
,
r
)

	)

156 
	#ASN1_BIT_STRING_dige°
(
d©a
,
ty≥
,
md
,
Àn
) \

157 
	`ASN1_ôem_dige°
(
	`ASN1_ITEM_Ωå
(
ASN1_BIT_STRING
),
ty≥
,
d©a
,
md
,
Àn
)

	)

159 
	#OCSP_CERTSTATUS_dup
(
cs
)\

160 (
OCSP_CERTSTATUS
*)
	`ASN1_dup
(((*)())
i2d_OCSP_CERTSTATUS
,\

161 (*(*)())
d2i_OCSP_CERTSTATUS
,(*)(
cs
))

	)

163 
OCSP_CERTID
 *
OCSP_CERTID_dup
(OCSP_CERTID *
id
);

165 
OCSP_RESPONSE
 *
OCSP_£ndªq_bio
(
BIO
 *
b
, c⁄° *
∑th
, 
OCSP_REQUEST
 *
ªq
);

166 
OCSP_REQ_CTX
 *
OCSP_£ndªq_√w
(
BIO
 *
io
, c⁄° *
∑th
, 
OCSP_REQUEST
 *
ªq
,

167 
maxlöe
);

168 
OCSP_REQ_CTX_nbio
(
OCSP_REQ_CTX
 *
r˘x
);

169 
OCSP_£ndªq_nbio
(
OCSP_RESPONSE
 **
¥e•
, 
OCSP_REQ_CTX
 *
r˘x
);

170 
OCSP_REQ_CTX
 *
OCSP_REQ_CTX_√w
(
BIO
 *
io
, 
maxlöe
);

171 
OCSP_REQ_CTX_‰ì
(
OCSP_REQ_CTX
 *
r˘x
);

172 
OCSP_£t_max_ª•⁄£_Àngth
(
OCSP_REQ_CTX
 *
r˘x
, 
Àn
);

173 
OCSP_REQ_CTX_i2d
(
OCSP_REQ_CTX
 *
r˘x
, c⁄° 
ASN1_ITEM
 *
ô
,

174 
ASN1_VALUE
 *
vÆ
);

175 
OCSP_REQ_CTX_nbio_d2i
(
OCSP_REQ_CTX
 *
r˘x
, 
ASN1_VALUE
 **
pvÆ
,

176 c⁄° 
ASN1_ITEM
 *
ô
);

177 
BIO
 *
OCSP_REQ_CTX_gë0_mem_bio
(
OCSP_REQ_CTX
 *
r˘x
);

178 
OCSP_REQ_CTX_i2d
(
OCSP_REQ_CTX
 *
r˘x
, c⁄° 
ASN1_ITEM
 *
ô
,

179 
ASN1_VALUE
 *
vÆ
);

180 
OCSP_REQ_CTX_hâp
(
OCSP_REQ_CTX
 *
r˘x
, c⁄° *
›
, c⁄° *
∑th
);

181 
OCSP_REQ_CTX_£t1_ªq
(
OCSP_REQ_CTX
 *
r˘x
, 
OCSP_REQUEST
 *
ªq
);

182 
OCSP_REQ_CTX_add1_hódî
(
OCSP_REQ_CTX
 *
r˘x
,

183 c⁄° *
«me
, c⁄° *
vÆue
);

185 
OCSP_CERTID
 *
OCSP_˚π_to_id
(c⁄° 
EVP_MD
 *
dg°
, 
X509
 *
subje˘
, X509 *
issuî
);

187 
OCSP_CERTID
 *
OCSP_˚π_id_√w
(c⁄° 
EVP_MD
 *
dg°
,

188 
X509_NAME
 *
issuîName
,

189 
ASN1_BIT_STRING
 *
issuîKey
,

190 
ASN1_INTEGER
 *
£rülNumbî
);

192 
OCSP_ONEREQ
 *
OCSP_ªque°_add0_id
(
OCSP_REQUEST
 *
ªq
, 
OCSP_CERTID
 *
cid
);

194 
OCSP_ªque°_add1_n⁄˚
(
OCSP_REQUEST
 *
ªq
, *
vÆ
, 
Àn
);

195 
OCSP_basic_add1_n⁄˚
(
OCSP_BASICRESP
 *
ª•
, *
vÆ
, 
Àn
);

196 
OCSP_check_n⁄˚
(
OCSP_REQUEST
 *
ªq
, 
OCSP_BASICRESP
 *
bs
);

197 
OCSP_c›y_n⁄˚
(
OCSP_BASICRESP
 *
ª•
, 
OCSP_REQUEST
 *
ªq
);

199 
OCSP_ªque°_£t1_«me
(
OCSP_REQUEST
 *
ªq
, 
X509_NAME
 *
nm
);

200 
OCSP_ªque°_add1_˚π
(
OCSP_REQUEST
 *
ªq
, 
X509
 *
˚π
);

202 
OCSP_ªque°_sign
(
OCSP_REQUEST
 *
ªq
,

203 
X509
 *
sig√r
,

204 
EVP_PKEY
 *
key
,

205 c⁄° 
EVP_MD
 *
dg°
,

206 
STACK_OF
(
X509
Ë*
˚πs
, 
Êags
);

208 
OCSP_ª•⁄£_°©us
(
OCSP_RESPONSE
 *
ª•
);

209 
OCSP_BASICRESP
 *
OCSP_ª•⁄£_gë1_basic
(
OCSP_RESPONSE
 *
ª•
);

211 
ASN1_OCTET_STRING
 *
OCSP_ª•_gë0_sig«tuª
(
OCSP_BASICRESP
 *
bs
);

213 
OCSP_ª•_cou¡
(
OCSP_BASICRESP
 *
bs
);

214 
OCSP_SINGLERESP
 *
OCSP_ª•_gë0
(
OCSP_BASICRESP
 *
bs
, 
idx
);

215 
ASN1_GENERALIZEDTIME
 *
OCSP_ª•_gë0_¥odu˚d_©
(
OCSP_BASICRESP
* 
bs
);

216 
OCSP_ª•_föd
(
OCSP_BASICRESP
 *
bs
, 
OCSP_CERTID
 *
id
, 
œ°
);

217 
OCSP_sögÀ_gë0_°©us
(
OCSP_SINGLERESP
 *
sögÀ
, *
ªas⁄
,

218 
ASN1_GENERALIZEDTIME
 **
ªvtime
,

219 
ASN1_GENERALIZEDTIME
 **
thisupd
,

220 
ASN1_GENERALIZEDTIME
 **
√xtupd
);

221 
OCSP_ª•_föd_°©us
(
OCSP_BASICRESP
 *
bs
, 
OCSP_CERTID
 *
id
, *
°©us
,

222 *
ªas⁄
,

223 
ASN1_GENERALIZEDTIME
 **
ªvtime
,

224 
ASN1_GENERALIZEDTIME
 **
thisupd
,

225 
ASN1_GENERALIZEDTIME
 **
√xtupd
);

226 
OCSP_check_vÆidôy
(
ASN1_GENERALIZEDTIME
 *
thisupd
,

227 
ASN1_GENERALIZEDTIME
 *
√xtupd
, 
£c
, 
max£c
);

229 
OCSP_ªque°_vîify
(
OCSP_REQUEST
 *
ªq
, 
STACK_OF
(
X509
Ë*
˚πs
,

230 
X509_STORE
 *
°‹e
, 
Êags
);

232 
OCSP_∑r£_uæ
(c⁄° *
uæ
, **
pho°
, **
µ‹t
, **
µ©h
,

233 *
ps¶
);

235 
OCSP_id_issuî_cmp
(
OCSP_CERTID
 *
a
, OCSP_CERTID *
b
);

236 
OCSP_id_cmp
(
OCSP_CERTID
 *
a
, OCSP_CERTID *
b
);

238 
OCSP_ªque°_⁄îeq_cou¡
(
OCSP_REQUEST
 *
ªq
);

239 
OCSP_ONEREQ
 *
OCSP_ªque°_⁄îeq_gë0
(
OCSP_REQUEST
 *
ªq
, 
i
);

240 
OCSP_CERTID
 *
OCSP_⁄îeq_gë0_id
(
OCSP_ONEREQ
 *
⁄e
);

241 
OCSP_id_gë0_öfo
(
ASN1_OCTET_STRING
 **
piNameHash
, 
ASN1_OBJECT
 **
pmd
,

242 
ASN1_OCTET_STRING
 **
pikeyHash
,

243 
ASN1_INTEGER
 **
p£rül
, 
OCSP_CERTID
 *
cid
);

244 
OCSP_ªque°_is_sig√d
(
OCSP_REQUEST
 *
ªq
);

245 
OCSP_RESPONSE
 *
OCSP_ª•⁄£_¸óã
(
°©us
, 
OCSP_BASICRESP
 *
bs
);

246 
OCSP_SINGLERESP
 *
OCSP_basic_add1_°©us
(
OCSP_BASICRESP
 *
r•
,

247 
OCSP_CERTID
 *
cid
,

248 
°©us
, 
ªas⁄
,

249 
ASN1_TIME
 *
ªvtime
,

250 
ASN1_TIME
 *
thisupd
,

251 
ASN1_TIME
 *
√xtupd
);

252 
OCSP_basic_add1_˚π
(
OCSP_BASICRESP
 *
ª•
, 
X509
 *
˚π
);

253 
OCSP_basic_sign
(
OCSP_BASICRESP
 *
br•
,

254 
X509
 *
sig√r
, 
EVP_PKEY
 *
key
, c⁄° 
EVP_MD
 *
dg°
,

255 
STACK_OF
(
X509
Ë*
˚πs
, 
Êags
);

257 
X509_EXTENSION
 *
OCSP_¸lID_√w
(*
uæ
, *
n
, *
tim
);

259 
X509_EXTENSION
 *
OCSP_ac˚±_ª•⁄£s_√w
(**
oids
);

261 
X509_EXTENSION
 *
OCSP_¨chive_cutoff_√w
(*
tim
);

263 
X509_EXTENSION
 *
OCSP_uæ_sv˛oc_√w
(
X509_NAME
 *
issuî
, **
uæs
);

265 
OCSP_REQUEST_gë_ext_cou¡
(
OCSP_REQUEST
 *
x
);

266 
OCSP_REQUEST_gë_ext_by_NID
(
OCSP_REQUEST
 *
x
, 
nid
, 
œ°pos
);

267 
OCSP_REQUEST_gë_ext_by_OBJ
(
OCSP_REQUEST
 *
x
, 
ASN1_OBJECT
 *
obj
,

268 
œ°pos
);

269 
OCSP_REQUEST_gë_ext_by_¸ôiˇl
(
OCSP_REQUEST
 *
x
, 
¸ô
, 
œ°pos
);

270 
X509_EXTENSION
 *
OCSP_REQUEST_gë_ext
(
OCSP_REQUEST
 *
x
, 
loc
);

271 
X509_EXTENSION
 *
OCSP_REQUEST_dñëe_ext
(
OCSP_REQUEST
 *
x
, 
loc
);

272 *
OCSP_REQUEST_gë1_ext_d2i
(
OCSP_REQUEST
 *
x
, 
nid
, *
¸ô
,

273 *
idx
);

274 
OCSP_REQUEST_add1_ext_i2d
(
OCSP_REQUEST
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

275 
Êags
);

276 
OCSP_REQUEST_add_ext
(
OCSP_REQUEST
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

278 
OCSP_ONEREQ_gë_ext_cou¡
(
OCSP_ONEREQ
 *
x
);

279 
OCSP_ONEREQ_gë_ext_by_NID
(
OCSP_ONEREQ
 *
x
, 
nid
, 
œ°pos
);

280 
OCSP_ONEREQ_gë_ext_by_OBJ
(
OCSP_ONEREQ
 *
x
, 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

281 
OCSP_ONEREQ_gë_ext_by_¸ôiˇl
(
OCSP_ONEREQ
 *
x
, 
¸ô
, 
œ°pos
);

282 
X509_EXTENSION
 *
OCSP_ONEREQ_gë_ext
(
OCSP_ONEREQ
 *
x
, 
loc
);

283 
X509_EXTENSION
 *
OCSP_ONEREQ_dñëe_ext
(
OCSP_ONEREQ
 *
x
, 
loc
);

284 *
OCSP_ONEREQ_gë1_ext_d2i
(
OCSP_ONEREQ
 *
x
, 
nid
, *
¸ô
, *
idx
);

285 
OCSP_ONEREQ_add1_ext_i2d
(
OCSP_ONEREQ
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

286 
Êags
);

287 
OCSP_ONEREQ_add_ext
(
OCSP_ONEREQ
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

289 
OCSP_BASICRESP_gë_ext_cou¡
(
OCSP_BASICRESP
 *
x
);

290 
OCSP_BASICRESP_gë_ext_by_NID
(
OCSP_BASICRESP
 *
x
, 
nid
, 
œ°pos
);

291 
OCSP_BASICRESP_gë_ext_by_OBJ
(
OCSP_BASICRESP
 *
x
, 
ASN1_OBJECT
 *
obj
,

292 
œ°pos
);

293 
OCSP_BASICRESP_gë_ext_by_¸ôiˇl
(
OCSP_BASICRESP
 *
x
, 
¸ô
,

294 
œ°pos
);

295 
X509_EXTENSION
 *
OCSP_BASICRESP_gë_ext
(
OCSP_BASICRESP
 *
x
, 
loc
);

296 
X509_EXTENSION
 *
OCSP_BASICRESP_dñëe_ext
(
OCSP_BASICRESP
 *
x
, 
loc
);

297 *
OCSP_BASICRESP_gë1_ext_d2i
(
OCSP_BASICRESP
 *
x
, 
nid
, *
¸ô
,

298 *
idx
);

299 
OCSP_BASICRESP_add1_ext_i2d
(
OCSP_BASICRESP
 *
x
, 
nid
, *
vÆue
,

300 
¸ô
, 
Êags
);

301 
OCSP_BASICRESP_add_ext
(
OCSP_BASICRESP
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

303 
OCSP_SINGLERESP_gë_ext_cou¡
(
OCSP_SINGLERESP
 *
x
);

304 
OCSP_SINGLERESP_gë_ext_by_NID
(
OCSP_SINGLERESP
 *
x
, 
nid
, 
œ°pos
);

305 
OCSP_SINGLERESP_gë_ext_by_OBJ
(
OCSP_SINGLERESP
 *
x
, 
ASN1_OBJECT
 *
obj
,

306 
œ°pos
);

307 
OCSP_SINGLERESP_gë_ext_by_¸ôiˇl
(
OCSP_SINGLERESP
 *
x
, 
¸ô
,

308 
œ°pos
);

309 
X509_EXTENSION
 *
OCSP_SINGLERESP_gë_ext
(
OCSP_SINGLERESP
 *
x
, 
loc
);

310 
X509_EXTENSION
 *
OCSP_SINGLERESP_dñëe_ext
(
OCSP_SINGLERESP
 *
x
, 
loc
);

311 *
OCSP_SINGLERESP_gë1_ext_d2i
(
OCSP_SINGLERESP
 *
x
, 
nid
, *
¸ô
,

312 *
idx
);

313 
OCSP_SINGLERESP_add1_ext_i2d
(
OCSP_SINGLERESP
 *
x
, 
nid
, *
vÆue
,

314 
¸ô
, 
Êags
);

315 
OCSP_SINGLERESP_add_ext
(
OCSP_SINGLERESP
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

316 
OCSP_CERTID
 *
OCSP_SINGLERESP_gë0_id
(
OCSP_SINGLERESP
 *
x
);

318 
DECLARE_ASN1_FUNCTIONS
(
OCSP_SINGLERESP
)

319 
DECLARE_ASN1_FUNCTIONS
(
OCSP_CERTSTATUS
)

320 
DECLARE_ASN1_FUNCTIONS
(
OCSP_REVOKEDINFO
)

321 
DECLARE_ASN1_FUNCTIONS
(
OCSP_BASICRESP
)

322 
DECLARE_ASN1_FUNCTIONS
(
OCSP_RESPDATA
)

323 
DECLARE_ASN1_FUNCTIONS
(
OCSP_RESPID
)

324 
DECLARE_ASN1_FUNCTIONS
(
OCSP_RESPONSE
)

325 
DECLARE_ASN1_FUNCTIONS
(
OCSP_RESPBYTES
)

326 
DECLARE_ASN1_FUNCTIONS
(
OCSP_ONEREQ
)

327 
DECLARE_ASN1_FUNCTIONS
(
OCSP_CERTID
)

328 
DECLARE_ASN1_FUNCTIONS
(
OCSP_REQUEST
)

329 
DECLARE_ASN1_FUNCTIONS
(
OCSP_SIGNATURE
)

330 
DECLARE_ASN1_FUNCTIONS
(
OCSP_REQINFO
)

331 
DECLARE_ASN1_FUNCTIONS
(
OCSP_CRLID
)

332 
DECLARE_ASN1_FUNCTIONS
(
OCSP_SERVICELOC
)

334 c⁄° *
OCSP_ª•⁄£_°©us_°r
(
s
);

335 c⁄° *
OCSP_˚π_°©us_°r
(
s
);

336 c⁄° *
OCSP_¸l_ªas⁄_°r
(
s
);

338 
OCSP_REQUEST_¥öt
(
BIO
 *
bp
, 
OCSP_REQUEST
 *
a
, 
Êags
);

339 
OCSP_RESPONSE_¥öt
(
BIO
 *
bp
, 
OCSP_RESPONSE
 *
o
, 
Êags
);

341 
OCSP_basic_vîify
(
OCSP_BASICRESP
 *
bs
, 
STACK_OF
(
X509
Ë*
˚πs
,

342 
X509_STORE
 *
°
, 
Êags
);

350 
ERR_lﬂd_OCSP_°rögs
();

355 
	#OCSP_F_D2I_OCSP_NONCE
 102

	)

356 
	#OCSP_F_OCSP_BASIC_ADD1_STATUS
 103

	)

357 
	#OCSP_F_OCSP_BASIC_SIGN
 104

	)

358 
	#OCSP_F_OCSP_BASIC_VERIFY
 105

	)

359 
	#OCSP_F_OCSP_CERT_ID_NEW
 101

	)

360 
	#OCSP_F_OCSP_CHECK_DELEGATED
 106

	)

361 
	#OCSP_F_OCSP_CHECK_IDS
 107

	)

362 
	#OCSP_F_OCSP_CHECK_ISSUER
 108

	)

363 
	#OCSP_F_OCSP_CHECK_VALIDITY
 115

	)

364 
	#OCSP_F_OCSP_MATCH_ISSUERID
 109

	)

365 
	#OCSP_F_OCSP_PARSE_URL
 114

	)

366 
	#OCSP_F_OCSP_REQUEST_SIGN
 110

	)

367 
	#OCSP_F_OCSP_REQUEST_VERIFY
 116

	)

368 
	#OCSP_F_OCSP_RESPONSE_GET1_BASIC
 111

	)

369 
	#OCSP_F_PARSE_HTTP_LINE1
 118

	)

372 
	#OCSP_R_CERTIFICATE_VERIFY_ERROR
 101

	)

373 
	#OCSP_R_DIGEST_ERR
 102

	)

374 
	#OCSP_R_ERROR_IN_NEXTUPDATE_FIELD
 122

	)

375 
	#OCSP_R_ERROR_IN_THISUPDATE_FIELD
 123

	)

376 
	#OCSP_R_ERROR_PARSING_URL
 121

	)

377 
	#OCSP_R_MISSING_OCSPSIGNING_USAGE
 103

	)

378 
	#OCSP_R_NEXTUPDATE_BEFORE_THISUPDATE
 124

	)

379 
	#OCSP_R_NOT_BASIC_RESPONSE
 104

	)

380 
	#OCSP_R_NO_CERTIFICATES_IN_CHAIN
 105

	)

381 
	#OCSP_R_NO_RESPONSE_DATA
 108

	)

382 
	#OCSP_R_NO_REVOKED_TIME
 109

	)

383 
	#OCSP_R_NO_SIGNER_KEY
 130

	)

384 
	#OCSP_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE
 110

	)

385 
	#OCSP_R_REQUEST_NOT_SIGNED
 128

	)

386 
	#OCSP_R_RESPONSE_CONTAINS_NO_REVOCATION_DATA
 111

	)

387 
	#OCSP_R_ROOT_CA_NOT_TRUSTED
 112

	)

388 
	#OCSP_R_SERVER_RESPONSE_ERROR
 114

	)

389 
	#OCSP_R_SERVER_RESPONSE_PARSE_ERROR
 115

	)

390 
	#OCSP_R_SIGNATURE_FAILURE
 117

	)

391 
	#OCSP_R_SIGNER_CERTIFICATE_NOT_FOUND
 118

	)

392 
	#OCSP_R_STATUS_EXPIRED
 125

	)

393 
	#OCSP_R_STATUS_NOT_YET_VALID
 126

	)

394 
	#OCSP_R_STATUS_TOO_OLD
 127

	)

395 
	#OCSP_R_UNKNOWN_MESSAGE_DIGEST
 119

	)

396 
	#OCSP_R_UNKNOWN_NID
 120

	)

397 
	#OCSP_R_UNSUPPORTED_REQUESTORNAME_TYPE
 129

	)

399 #ifde‡ 
__˝lu•lus


	@opensslconf.h

13 #ifde‡ 
__˝lu•lus


17 #ifde‡
OPENSSL_ALGORITHM_DEFINES


18 #îr‹ 
OPENSSL_ALGORITHM_DEFINES
 
no
 
l⁄gî
 
suµ‹ãd


25 #i‚de‡
OPENSSL_NO_ASAN


26 
	#OPENSSL_NO_ASAN


	)

28 #i‚de‡
OPENSSL_NO_CRYPTO_MDEBUG


29 
	#OPENSSL_NO_CRYPTO_MDEBUG


	)

31 #i‚de‡
OPENSSL_NO_CRYPTO_MDEBUG_BACKTRACE


32 
	#OPENSSL_NO_CRYPTO_MDEBUG_BACKTRACE


	)

34 #i‚de‡
OPENSSL_NO_EC_NISTP_64_GCC_128


35 
	#OPENSSL_NO_EC_NISTP_64_GCC_128


	)

37 #i‚de‡
OPENSSL_NO_EGD


38 
	#OPENSSL_NO_EGD


	)

40 #i‚de‡
OPENSSL_NO_FUZZ_AFL


41 
	#OPENSSL_NO_FUZZ_AFL


	)

43 #i‚de‡
OPENSSL_NO_FUZZ_LIBFUZZER


44 
	#OPENSSL_NO_FUZZ_LIBFUZZER


	)

46 #i‚de‡
OPENSSL_NO_HEARTBEATS


47 
	#OPENSSL_NO_HEARTBEATS


	)

49 #i‚de‡
OPENSSL_NO_MD2


50 
	#OPENSSL_NO_MD2


	)

52 #i‚de‡
OPENSSL_NO_RC5


53 
	#OPENSSL_NO_RC5


	)

55 #i‚de‡
OPENSSL_NO_SCTP


56 
	#OPENSSL_NO_SCTP


	)

58 #i‚de‡
OPENSSL_NO_SSL_TRACE


59 
	#OPENSSL_NO_SSL_TRACE


	)

61 #i‚de‡
OPENSSL_NO_SSL3


62 
	#OPENSSL_NO_SSL3


	)

64 #i‚de‡
OPENSSL_NO_SSL3_METHOD


65 
	#OPENSSL_NO_SSL3_METHOD


	)

67 #i‚de‡
OPENSSL_NO_UBSAN


68 
	#OPENSSL_NO_UBSAN


	)

70 #i‚de‡
OPENSSL_NO_UNIT_TEST


71 
	#OPENSSL_NO_UNIT_TEST


	)

73 #i‚de‡
OPENSSL_NO_WEAK_SSL_CIPHERS


74 
	#OPENSSL_NO_WEAK_SSL_CIPHERS


	)

76 #i‚de‡
OPENSSL_THREADS


77 
	#OPENSSL_THREADS


	)

85 
	#NON_EMPTY_TRANSLATION_UNIT
 *
dummy
 = &dummy;

	)

93 #i‡
deföed
(
OPENSSL_NO_DEPRECATED
)

94 
	#DECLARE_DEPRECATED
(
f
)

	)

95 #ñi‡
__GNUC__
 > 3 || (__GNUC__ =3 && 
__GNUC_MINOR__
 > 0)

96 
	#DECLARE_DEPRECATED
(
f
Ë‡
	`__©åibuã__
 ((
dïªˇãd
));

	)

98 
	#DECLARE_DEPRECATED
(
f
Ëf;

	)

101 #i‚de‡
OPENSSL_FILE


102 #ifde‡
OPENSSL_NO_FILENAMES


103 
	#OPENSSL_FILE
 ""

	)

104 
	#OPENSSL_LINE
 0

	)

106 
	#OPENSSL_FILE
 
__FILE__


	)

107 
	#OPENSSL_LINE
 
__LINE__


	)

111 #i‚de‡
OPENSSL_MIN_API


112 
	#OPENSSL_MIN_API
 0

	)

115 #i‡!
deföed
(
OPENSSL_API_COMPAT
Ë|| OPENSSL_API_COMPAT < 
OPENSSL_MIN_API


116 #unde‡
OPENSSL_API_COMPAT


117 
	#OPENSSL_API_COMPAT
 
OPENSSL_MIN_API


	)

120 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

121 
	#DEPRECATEDIN_1_1_0
(
f
Ë
	`DECLARE_DEPRECATED
(f)

	)

123 
	#DEPRECATEDIN_1_1_0
(
f
)

	)

126 #i‡
OPENSSL_API_COMPAT
 < 0x10000000L

127 
	#DEPRECATEDIN_1_0_0
(
f
Ë
	`DECLARE_DEPRECATED
(f)

	)

129 
	#DEPRECATEDIN_1_0_0
(
f
)

	)

132 #i‡
OPENSSL_API_COMPAT
 < 0x00908000L

133 
	#DEPRECATEDIN_0_9_8
(
f
Ë
	`DECLARE_DEPRECATED
(f)

	)

135 
	#DEPRECATEDIN_0_9_8
(
f
)

	)

138 
	#OPENSSL_CPUID_OBJ


	)

141 #unde‡
I386_ONLY


143 #unde‡
OPENSSL_UNISTD


144 
	#OPENSSL_UNISTD
 <
uni°d
.
h
>

	)

146 #unde‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


151 #i‡!
deföed
(
OPENSSL_SYS_UEFI
)

152 #unde‡
BN_LLONG


154 
	#SIXTY_FOUR_BIT_LONG


	)

155 #unde‡
SIXTY_FOUR_BIT


156 #unde‡
THIRTY_TWO_BIT


159 
	#RC4_INT
 

	)

161 #ifde‡ 
__˝lu•lus


	@opensslv.h

10 #i‚de‡
HEADER_OPENSSLV_H


11 
	#HEADER_OPENSSLV_H


	)

13 #ifde‡ 
__˝lu•lus


42 
	#OPENSSL_VERSION_NUMBER
 0x10100006L

	)

43 #ifde‡
OPENSSL_FIPS


44 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 1.1.0-¥e6-fùs-dev xx XXX xxxx"

	)

46 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 1.1.0-¥e6-dev xx XXX xxxx"

	)

98 
	#SHLIB_VERSION_HISTORY
 ""

	)

99 
	#SHLIB_VERSION_NUMBER
 "1.1"

	)

102 #ifde‡ 
__˝lu•lus


	@ossl_typ.h

10 #i‚de‡
HEADER_OPENSSL_TYPES_H


11 
	#HEADER_OPENSSL_TYPES_H


	)

13 
	~<limôs.h
>

15 #ifde‡ 
__˝lu•lus


19 
	~<›ís¶/e_os2.h
>

21 #ifde‡
NO_ASN1_TYPEDEFS


22 
	#ASN1_INTEGER
 
ASN1_STRING


	)

23 
	#ASN1_ENUMERATED
 
ASN1_STRING


	)

24 
	#ASN1_BIT_STRING
 
ASN1_STRING


	)

25 
	#ASN1_OCTET_STRING
 
ASN1_STRING


	)

26 
	#ASN1_PRINTABLESTRING
 
ASN1_STRING


	)

27 
	#ASN1_T61STRING
 
ASN1_STRING


	)

28 
	#ASN1_IA5STRING
 
ASN1_STRING


	)

29 
	#ASN1_UTCTIME
 
ASN1_STRING


	)

30 
	#ASN1_GENERALIZEDTIME
 
ASN1_STRING


	)

31 
	#ASN1_TIME
 
ASN1_STRING


	)

32 
	#ASN1_GENERALSTRING
 
ASN1_STRING


	)

33 
	#ASN1_UNIVERSALSTRING
 
ASN1_STRING


	)

34 
	#ASN1_BMPSTRING
 
ASN1_STRING


	)

35 
	#ASN1_VISIBLESTRING
 
ASN1_STRING


	)

36 
	#ASN1_UTF8STRING
 
ASN1_STRING


	)

37 
	#ASN1_BOOLEAN
 

	)

38 
	#ASN1_NULL
 

	)

40 
a¢1_°rög_°
 
	tASN1_INTEGER
;

41 
a¢1_°rög_°
 
	tASN1_ENUMERATED
;

42 
a¢1_°rög_°
 
	tASN1_BIT_STRING
;

43 
a¢1_°rög_°
 
	tASN1_OCTET_STRING
;

44 
a¢1_°rög_°
 
	tASN1_PRINTABLESTRING
;

45 
a¢1_°rög_°
 
	tASN1_T61STRING
;

46 
a¢1_°rög_°
 
	tASN1_IA5STRING
;

47 
a¢1_°rög_°
 
	tASN1_GENERALSTRING
;

48 
a¢1_°rög_°
 
	tASN1_UNIVERSALSTRING
;

49 
a¢1_°rög_°
 
	tASN1_BMPSTRING
;

50 
a¢1_°rög_°
 
	tASN1_UTCTIME
;

51 
a¢1_°rög_°
 
	tASN1_TIME
;

52 
a¢1_°rög_°
 
	tASN1_GENERALIZEDTIME
;

53 
a¢1_°rög_°
 
	tASN1_VISIBLESTRING
;

54 
a¢1_°rög_°
 
	tASN1_UTF8STRING
;

55 
a¢1_°rög_°
 
	tASN1_STRING
;

56 
	tASN1_BOOLEAN
;

57 
	tASN1_NULL
;

60 
a¢1_obje˘_°
 
	tASN1_OBJECT
;

62 
ASN1_ITEM_°
 
	tASN1_ITEM
;

63 
a¢1_p˘x_°
 
	tASN1_PCTX
;

64 
a¢1_s˘x_°
 
	tASN1_SCTX
;

66 #ifde‡
_WIN32


67 #unde‡
X509_NAME


68 #unde‡
X509_EXTENSIONS


69 #unde‡
PKCS7_ISSUER_AND_SERIAL


70 #unde‡
PKCS7_SIGNER_INFO


71 #unde‡
OCSP_REQUEST


72 #unde‡
OCSP_RESPONSE


75 #ifde‡
BIGNUM


76 #unde‡
BIGNUM


78 
d™e_°
;

79 
bio_°
 
	tBIO
;

80 
bignum_°
 
	tBIGNUM
;

81 
bignum_˘x
 
	tBN_CTX
;

82 
bn_blödög_°
 
	tBN_BLINDING
;

83 
bn_m⁄t_˘x_°
 
	tBN_MONT_CTX
;

84 
bn_ª˝_˘x_°
 
	tBN_RECP_CTX
;

85 
bn_gícb_°
 
	tBN_GENCB
;

87 
buf_mem_°
 
	tBUF_MEM
;

89 
evp_cùhî_°
 
	tEVP_CIPHER
;

90 
evp_cùhî_˘x_°
 
	tEVP_CIPHER_CTX
;

91 
evp_md_°
 
	tEVP_MD
;

92 
evp_md_˘x_°
 
	tEVP_MD_CTX
;

93 
evp_pkey_°
 
	tEVP_PKEY
;

95 
evp_pkey_a¢1_mëhod_°
 
	tEVP_PKEY_ASN1_METHOD
;

97 
evp_pkey_mëhod_°
 
	tEVP_PKEY_METHOD
;

98 
evp_pkey_˘x_°
 
	tEVP_PKEY_CTX
;

100 
evp_Encode_Ctx_°
 
	tEVP_ENCODE_CTX
;

102 
hmac_˘x_°
 
	tHMAC_CTX
;

104 
dh_°
 
	tDH
;

105 
dh_mëhod
 
	tDH_METHOD
;

107 
dß_°
 
	tDSA
;

108 
dß_mëhod
 
	tDSA_METHOD
;

110 
rß_°
 
	tRSA
;

111 
rß_mëh_°
 
	tRSA_METHOD
;

113 
ec_key_°
 
	tEC_KEY
;

114 
ec_key_mëhod_°
 
	tEC_KEY_METHOD
;

116 
ønd_mëh_°
 
	tRAND_METHOD
;

118 
s¶_d™e_°
 
	tSSL_DANE
;

119 
x509_°
 
	tX509
;

120 
X509_Æg‹_°
 
	tX509_ALGOR
;

121 
X509_¸l_°
 
	tX509_CRL
;

122 
x509_¸l_mëhod_°
 
	tX509_CRL_METHOD
;

123 
x509_ªvoked_°
 
	tX509_REVOKED
;

124 
X509_«me_°
 
	tX509_NAME
;

125 
X509_pubkey_°
 
	tX509_PUBKEY
;

126 
x509_°‹e_°
 
	tX509_STORE
;

127 
x509_°‹e_˘x_°
 
	tX509_STORE_CTX
;

129 
x509_obje˘_°
 
	tX509_OBJECT
;

130 
x509_lookup_°
 
	tX509_LOOKUP
;

131 
x509_lookup_mëhod_°
 
	tX509_LOOKUP_METHOD
;

132 
X509_VERIFY_PARAM_°
 
	tX509_VERIFY_PARAM
;

134 
pkcs8_¥iv_key_öfo_°
 
	tPKCS8_PRIV_KEY_INFO
;

136 
v3_ext_˘x
 
	tX509V3_CTX
;

137 
c⁄f_°
 
	tCONF
;

138 
os¶_öô_£âögs_°
 
	tOPENSSL_INIT_SETTINGS
;

140 
ui_°
 
	tUI
;

141 
ui_mëhod_°
 
	tUI_METHOD
;

143 
ígöe_°
 
	tENGINE
;

144 
s¶_°
 
	tSSL
;

145 
s¶_˘x_°
 
	tSSL_CTX
;

147 
comp_˘x_°
 
	tCOMP_CTX
;

148 
comp_mëhod_°
 
	tCOMP_METHOD
;

150 
X509_POLICY_NODE_°
 
	tX509_POLICY_NODE
;

151 
X509_POLICY_LEVEL_°
 
	tX509_POLICY_LEVEL
;

152 
X509_POLICY_TREE_°
 
	tX509_POLICY_TREE
;

153 
X509_POLICY_CACHE_°
 
	tX509_POLICY_CACHE
;

155 
AUTHORITY_KEYID_°
 
	tAUTHORITY_KEYID
;

156 
DIST_POINT_°
 
	tDIST_POINT
;

157 
ISSUING_DIST_POINT_°
 
	tISSUING_DIST_POINT
;

158 
NAME_CONSTRAINTS_°
 
	tNAME_CONSTRAINTS
;

160 
¸y±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

162 
oc•_ªq_˘x_°
 
	tOCSP_REQ_CTX
;

163 
oc•_ª•⁄£_°
 
	tOCSP_RESPONSE
;

164 
oc•_ª•⁄dî_id_°
 
	tOCSP_RESPID
;

166 
s˘_°
 
	tSCT
;

167 
s˘_˘x_°
 
	tSCT_CTX
;

168 
˘log_°
 
	tCTLOG
;

169 
˘log_°‹e_°
 
	tCTLOG_STORE
;

170 
˘_pﬁicy_evÆ_˘x_°
 
	tCT_POLICY_EVAL_CTX
;

172 #i‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L && \

173 
deföed
(
INTMAX_MAX
Ë&& deföed(
UINTMAX_MAX
)

174 
ötmax_t
 
	tos¶_ötmax_t
;

175 
uötmax_t
 
	tos¶_uötmax_t
;

183 
	tos¶_ötmax_t
;

184 
	tos¶_uötmax_t
;

187 #ifde‡ 
__˝lu•lus


	@pem.h

10 #i‚de‡
HEADER_PEM_H


11 
	#HEADER_PEM_H


	)

13 
	~<›ís¶/e_os2.h
>

14 
	~<›ís¶/bio.h
>

15 
	~<›ís¶/°ack.h
>

16 
	~<›ís¶/evp.h
>

17 
	~<›ís¶/x509.h
>

18 
	~<›ís¶/≥m2.h
>

20 #ifde‡ 
__˝lu•lus


24 
	#PEM_BUFSIZE
 1024

	)

26 
	#PEM_STRING_X509_OLD
 "X509 CERTIFICATE"

	)

27 
	#PEM_STRING_X509
 "CERTIFICATE"

	)

28 
	#PEM_STRING_X509_TRUSTED
 "TRUSTED CERTIFICATE"

	)

29 
	#PEM_STRING_X509_REQ_OLD
 "NEW CERTIFICATE REQUEST"

	)

30 
	#PEM_STRING_X509_REQ
 "CERTIFICATE REQUEST"

	)

31 
	#PEM_STRING_X509_CRL
 "X509 CRL"

	)

32 
	#PEM_STRING_EVP_PKEY
 "ANY PRIVATE KEY"

	)

33 
	#PEM_STRING_PUBLIC
 "PUBLIC KEY"

	)

34 
	#PEM_STRING_RSA
 "RSA PRIVATE KEY"

	)

35 
	#PEM_STRING_RSA_PUBLIC
 "RSA PUBLIC KEY"

	)

36 
	#PEM_STRING_DSA
 "DSA PRIVATE KEY"

	)

37 
	#PEM_STRING_DSA_PUBLIC
 "DSA PUBLIC KEY"

	)

38 
	#PEM_STRING_PKCS7
 "PKCS7"

	)

39 
	#PEM_STRING_PKCS7_SIGNED
 "PKCS #7 SIGNED DATA"

	)

40 
	#PEM_STRING_PKCS8
 "ENCRYPTED PRIVATE KEY"

	)

41 
	#PEM_STRING_PKCS8INF
 "PRIVATE KEY"

	)

42 
	#PEM_STRING_DHPARAMS
 "DH PARAMETERS"

	)

43 
	#PEM_STRING_DHXPARAMS
 "X9.42 DH PARAMETERS"

	)

44 
	#PEM_STRING_SSL_SESSION
 "SSL SESSION PARAMETERS"

	)

45 
	#PEM_STRING_DSAPARAMS
 "DSA PARAMETERS"

	)

46 
	#PEM_STRING_ECDSA_PUBLIC
 "ECDSA PUBLIC KEY"

	)

47 
	#PEM_STRING_ECPARAMETERS
 "EC PARAMETERS"

	)

48 
	#PEM_STRING_ECPRIVATEKEY
 "EC PRIVATE KEY"

	)

49 
	#PEM_STRING_PARAMETERS
 "PARAMETERS"

	)

50 
	#PEM_STRING_CMS
 "CMS"

	)

52 
	#PEM_TYPE_ENCRYPTED
 10

	)

53 
	#PEM_TYPE_MIC_ONLY
 20

	)

54 
	#PEM_TYPE_MIC_CLEAR
 30

	)

55 
	#PEM_TYPE_CLEAR
 40

	)

57 
	s≥m_ªcù_°
 {

58 *
«me
;

59 
X509_NAME
 *
dn
;

60 
cùhî
;

61 
key_íc
;

63 } 
	tPEM_USER
;

65 
	s≥m_˘x_°
 {

66 
ty≥
;

68 
vîsi⁄
;

69 
mode
;

70 } 
¥oc_ty≥
;

72 *
domaö
;

75 
cùhî
;

79 } 
DEK_öfo
;

81 
PEM_USER
 *
‹igö©‹
;

83 
num_ªcùõ¡
;

84 
PEM_USER
 **
ªcùõ¡
;

89 
EVP_MD
 *
md
;

91 
md_íc
;

92 
md_Àn
;

93 *
md_d©a
;

95 
EVP_CIPHER
 *
dec
;

96 
key_Àn
;

97 *
key
;

102 
d©a_íc
;

103 
d©a_Àn
;

104 *
d©a
;

105 } 
	tPEM_CTX
;

113 #ifde‡
OPENSSL_NO_STDIO


115 
	#IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

116 
	#IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

117 
	#IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

118 
	#IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

119 
	#IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

122 
	#IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

123 
ty≥
 *
PEM_ªad_
##
	`«me
(
FILE
 *
Â
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
)\

125  
	`PEM_ASN1_ªad
((
d2i_of_void
 *)
d2i_
##
a¢1
, 
°r
,
Â
,(**)
x
,
cb
,
u
); \

126 }

	)

128 
	#IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

129 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
) \

131  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
NULL
,NULL,0,NULL,NULL); \

132 }

	)

134 
	#IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

135 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, c⁄° 
ty≥
 *
x
) \

137  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,(*)
x
,
NULL
,NULL,0,NULL,NULL); \

138 }

	)

140 
	#IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

141 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

142 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, \

143 *
u
) \

145  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

146 }

	)

148 
	#IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

149 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

150 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, \

151 *
u
) \

153  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

154 }

	)

158 
	#IMPLEMENT_PEM_ªad_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

159 
ty≥
 *
PEM_ªad_bio_
##
	`«me
(
BIO
 *
bp
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
)\

161  
	`PEM_ASN1_ªad_bio
((
d2i_of_void
 *)
d2i_
##
a¢1
, 
°r
,
bp
,(**)
x
,
cb
,
u
); \

162 }

	)

164 
	#IMPLEMENT_PEM_wrôe_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

165 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
) \

167  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,
x
,
NULL
,NULL,0,NULL,NULL); \

168 }

	)

170 
	#IMPLEMENT_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

171 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, c⁄° 
ty≥
 *
x
) \

173  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,(*)
x
,
NULL
,NULL,0,NULL,NULL); \

174 }

	)

176 
	#IMPLEMENT_PEM_wrôe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

177 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

178 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
) \

180  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

181 }

	)

183 
	#IMPLEMENT_PEM_wrôe_cb_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

184 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

185 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
) \

187  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,(*)
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

188 }

	)

190 
	#IMPLEMENT_PEM_wrôe
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

191 
	`IMPLEMENT_PEM_wrôe_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

192 
	`IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

194 
	#IMPLEMENT_PEM_wrôe_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

195 
	`IMPLEMENT_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

196 
	`IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

198 
	#IMPLEMENT_PEM_wrôe_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

199 
	`IMPLEMENT_PEM_wrôe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

200 
	`IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

202 
	#IMPLEMENT_PEM_wrôe_cb_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

203 
	`IMPLEMENT_PEM_wrôe_cb_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

204 
	`IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

206 
	#IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

207 
	`IMPLEMENT_PEM_ªad_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

208 
	`IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

210 
	#IMPLEMENT_PEM_rw
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

211 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

212 
	`IMPLEMENT_PEM_wrôe
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

214 
	#IMPLEMENT_PEM_rw_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

215 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

216 
	`IMPLEMENT_PEM_wrôe_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

218 
	#IMPLEMENT_PEM_rw_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

219 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

220 
	`IMPLEMENT_PEM_wrôe_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

224 #i‡
deföed
(
OPENSSL_NO_STDIO
)

226 
	#DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
Ë

	)

227 
	#DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
Ë

	)

228 
	#DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
Ë

	)

229 
	#DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
Ë

	)

232 
	#DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
) \

233 
ty≥
 *
PEM_ªad_
##
	`«me
(
FILE
 *
Â
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

235 
	#DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
) \

236 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
);

	)

238 
	#DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
) \

239 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, c⁄° 
ty≥
 *
x
);

	)

241 
	#DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
) \

242 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

243 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

247 
	#DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
) \

248 
ty≥
 *
PEM_ªad_bio_
##
	`«me
(
BIO
 *
bp
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

250 
	#DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
) \

251 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
);

	)

253 
	#DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
) \

254 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, c⁄° 
ty≥
 *
x
);

	)

256 
	#DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
) \

257 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

258 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

260 
	#DECLARE_PEM_wrôe
(
«me
, 
ty≥
) \

261 
	`DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
) \

262 
	`DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
)

	)

263 
	#DECLARE_PEM_wrôe_c⁄°
(
«me
, 
ty≥
) \

264 
	`DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
) \

265 
	`DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
)

	)

266 
	#DECLARE_PEM_wrôe_cb
(
«me
, 
ty≥
) \

267 
	`DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
) \

268 
	`DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
)

	)

269 
	#DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

270 
	`DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
) \

271 
	`DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
)

	)

272 
	#DECLARE_PEM_rw
(
«me
, 
ty≥
) \

273 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

274 
	`DECLARE_PEM_wrôe
(
«me
, 
ty≥
)

	)

275 
	#DECLARE_PEM_rw_c⁄°
(
«me
, 
ty≥
) \

276 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

277 
	`DECLARE_PEM_wrôe_c⁄°
(
«me
, 
ty≥
)

	)

278 
	#DECLARE_PEM_rw_cb
(
«me
, 
ty≥
) \

279 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

280 
	`DECLARE_PEM_wrôe_cb
(
«me
, 
ty≥
)

	)

281 
	t≥m_∑ssw‹d_cb
 (*
	tbuf
, 
	tsize
, 
	trwÊag
, *
	tu£rd©a
);

283 
PEM_gë_EVP_CIPHER_INFO
(*
hódî
, 
EVP_CIPHER_INFO
 *
cùhî
);

284 
PEM_do_hódî
(
EVP_CIPHER_INFO
 *
cùhî
, *
d©a
, *
Àn
,

285 
≥m_∑ssw‹d_cb
 *
ˇŒback
, *
u
);

287 
PEM_ªad_bio
(
BIO
 *
bp
, **
«me
, **
hódî
,

288 **
d©a
, *
Àn
);

289 
PEM_wrôe_bio
(
BIO
 *
bp
, c⁄° *
«me
, c⁄° *
hdr
,

290 c⁄° *
d©a
, 
Àn
);

291 
PEM_byãs_ªad_bio
(**
pd©a
, *
∂í
, **
≤m
,

292 c⁄° *
«me
, 
BIO
 *
bp
, 
≥m_∑ssw‹d_cb
 *
cb
,

293 *
u
);

294 *
PEM_ASN1_ªad_bio
(
d2i_of_void
 *
d2i
, c⁄° *
«me
, 
BIO
 *
bp
, **
x
,

295 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

296 
PEM_ASN1_wrôe_bio
(
i2d_of_void
 *
i2d
, c⁄° *
«me
, 
BIO
 *
bp
, *
x
,

297 c⁄° 
EVP_CIPHER
 *
íc
, *
k°r
, 
kÀn
,

298 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

300 
STACK_OF
(
X509_INFO
Ë*
PEM_X509_INFO_ªad_bio
(
BIO
 *
bp
, STACK_OF(X509_INFOË*
sk
,

301 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

302 
PEM_X509_INFO_wrôe_bio
(
BIO
 *
bp
, 
X509_INFO
 *
xi
, 
EVP_CIPHER
 *
íc
,

303 *
k°r
, 
kÀn
,

304 
≥m_∑ssw‹d_cb
 *
cd
, *
u
);

306 #i‚de‡
OPENSSL_NO_STDIO


307 
PEM_ªad
(
FILE
 *
Â
, **
«me
, **
hódî
,

308 **
d©a
, *
Àn
);

309 
PEM_wrôe
(
FILE
 *
Â
, c⁄° *
«me
, c⁄° *
hdr
,

310 c⁄° *
d©a
, 
Àn
);

311 *
PEM_ASN1_ªad
(
d2i_of_void
 *
d2i
, c⁄° *
«me
, 
FILE
 *
Â
, **
x
,

312 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

313 
PEM_ASN1_wrôe
(
i2d_of_void
 *
i2d
, c⁄° *
«me
, 
FILE
 *
Â
,

314 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, *
k°r
,

315 
kÀn
, 
≥m_∑ssw‹d_cb
 *
ˇŒback
, *
u
);

316 
STACK_OF
(
X509_INFO
Ë*
PEM_X509_INFO_ªad
(
FILE
 *
Â
, STACK_OF(X509_INFOË*
sk
,

317 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

320 
PEM_SignInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_MD
 *
ty≥
);

321 
PEM_SignUpd©e
(
EVP_MD_CTX
 *
˘x
, *
d
, 
˙t
);

322 
PEM_SignFöÆ
(
EVP_MD_CTX
 *
˘x
, *
sigªt
,

323 *
sigÀn
, 
EVP_PKEY
 *
pkey
);

325 
PEM_def_ˇŒback
(*
buf
, 
num
, 
w
, *
key
);

326 
PEM_¥oc_ty≥
(*
buf
, 
ty≥
);

327 
PEM_dek_öfo
(*
buf
, c⁄° *
ty≥
, 
Àn
, *
°r
);

329 
	~<›ís¶/symhacks.h
>

331 
DECLARE_PEM_rw
(
X509
, X509)

332 
DECLARE_PEM_rw
(
X509_AUX
, 
X509
)

333 
DECLARE_PEM_rw
(
X509_REQ
, X509_REQ)

334 
DECLARE_PEM_wrôe
(
X509_REQ_NEW
, 
X509_REQ
)

335 
DECLARE_PEM_rw
(
X509_CRL
, X509_CRL)

336 
DECLARE_PEM_rw
(
PKCS7
, PKCS7)

337 
DECLARE_PEM_rw
(
NETSCAPE_CERT_SEQUENCE
, NETSCAPE_CERT_SEQUENCE)

338 
DECLARE_PEM_rw
(
PKCS8
, 
X509_SIG
)

339 
DECLARE_PEM_rw
(
PKCS8_PRIV_KEY_INFO
, PKCS8_PRIV_KEY_INFO)

340 #i‚de‡
OPENSSL_NO_RSA


341 
DECLARE_PEM_rw_cb
(
RSAPriv©eKey
, 
RSA
)

342 
DECLARE_PEM_rw_c⁄°
(
RSAPublicKey
, 
RSA
)

343 
DECLARE_PEM_rw
(
RSA_PUBKEY
, 
RSA
)

345 #i‚de‡
OPENSSL_NO_DSA


346 
DECLARE_PEM_rw_cb
(
DSAPriv©eKey
, 
DSA
)

347 
DECLARE_PEM_rw
(
DSA_PUBKEY
, 
DSA
)

348 
DECLARE_PEM_rw_c⁄°
(
DSA∑øms
, 
DSA
)

350 #i‚de‡
OPENSSL_NO_EC


351 
DECLARE_PEM_rw_c⁄°
(
ECPKP¨amëîs
, 
EC_GROUP
)

352 
DECLARE_PEM_rw_cb
(
ECPriv©eKey
, 
EC_KEY
)

353 
DECLARE_PEM_rw
(
EC_PUBKEY
, 
EC_KEY
)

355 #i‚de‡
OPENSSL_NO_DH


356 
DECLARE_PEM_rw_c⁄°
(
DH∑øms
, 
DH
)

357 
DECLARE_PEM_wrôe_c⁄°
(
DHx∑øms
, 
DH
)

359 
DECLARE_PEM_rw_cb
(
Priv©eKey
, 
EVP_PKEY
)

360 
DECLARE_PEM_rw
(
PUBKEY
, 
EVP_PKEY
)

362 
PEM_wrôe_bio_Priv©eKey_åadôi⁄Æ
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
,

363 c⁄° 
EVP_CIPHER
 *
íc
,

364 *
k°r
, 
kÀn
,

365 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

367 
PEM_wrôe_bio_PKCS8Priv©eKey_nid
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, 
nid
,

368 *
k°r
, 
kÀn
,

369 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

370 
PEM_wrôe_bio_PKCS8Priv©eKey
(
BIO
 *, 
EVP_PKEY
 *, c⁄° 
EVP_CIPHER
 *,

371 *, , 
≥m_∑ssw‹d_cb
 *, *);

372 
i2d_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

373 *
k°r
, 
kÀn
,

374 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

375 
i2d_PKCS8Priv©eKey_nid_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, 
nid
,

376 *
k°r
, 
kÀn
,

377 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

378 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
x
, 
≥m_∑ssw‹d_cb
 *
cb
,

379 *
u
);

381 #i‚de‡
OPENSSL_NO_STDIO


382 
i2d_PKCS8Priv©eKey_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

383 *
k°r
, 
kÀn
,

384 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

385 
i2d_PKCS8Priv©eKey_nid_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, 
nid
,

386 *
k°r
, 
kÀn
,

387 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

388 
PEM_wrôe_PKCS8Priv©eKey_nid
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, 
nid
,

389 *
k°r
, 
kÀn
,

390 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

392 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_Â
(
FILE
 *
Â
, EVP_PKEY **
x
, 
≥m_∑ssw‹d_cb
 *
cb
,

393 *
u
);

395 
PEM_wrôe_PKCS8Priv©eKey
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

396 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cd
,

397 *
u
);

399 
EVP_PKEY
 *
PEM_ªad_bio_P¨amëîs
(
BIO
 *
bp
, EVP_PKEY **
x
);

400 
PEM_wrôe_bio_P¨amëîs
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
);

402 #i‚de‡
OPENSSL_NO_DSA


403 
EVP_PKEY
 *
b2i_Priv©eKey
(c⁄° **
ö
, 
Àngth
);

404 
EVP_PKEY
 *
b2i_PublicKey
(c⁄° **
ö
, 
Àngth
);

405 
EVP_PKEY
 *
b2i_Priv©eKey_bio
(
BIO
 *
ö
);

406 
EVP_PKEY
 *
b2i_PublicKey_bio
(
BIO
 *
ö
);

407 
i2b_Priv©eKey_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
);

408 
i2b_PublicKey_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
);

409 #i‚de‡
OPENSSL_NO_RC4


410 
EVP_PKEY
 *
b2i_PVK_bio
(
BIO
 *
ö
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

411 
i2b_PVK_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
, 
í˛evñ
,

412 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

422 
ERR_lﬂd_PEM_°rögs
();

427 
	#PEM_F_B2I_DSS
 127

	)

428 
	#PEM_F_B2I_PVK_BIO
 128

	)

429 
	#PEM_F_B2I_RSA
 129

	)

430 
	#PEM_F_CHECK_BITLEN_DSA
 130

	)

431 
	#PEM_F_CHECK_BITLEN_RSA
 131

	)

432 
	#PEM_F_D2I_PKCS8PRIVATEKEY_BIO
 120

	)

433 
	#PEM_F_D2I_PKCS8PRIVATEKEY_FP
 121

	)

434 
	#PEM_F_DO_B2I
 132

	)

435 
	#PEM_F_DO_B2I_BIO
 133

	)

436 
	#PEM_F_DO_BLOB_HEADER
 134

	)

437 
	#PEM_F_DO_PK8PKEY
 126

	)

438 
	#PEM_F_DO_PK8PKEY_FP
 125

	)

439 
	#PEM_F_DO_PVK_BODY
 135

	)

440 
	#PEM_F_DO_PVK_HEADER
 136

	)

441 
	#PEM_F_I2B_PVK
 137

	)

442 
	#PEM_F_I2B_PVK_BIO
 138

	)

443 
	#PEM_F_LOAD_IV
 101

	)

444 
	#PEM_F_PEM_ASN1_READ
 102

	)

445 
	#PEM_F_PEM_ASN1_READ_BIO
 103

	)

446 
	#PEM_F_PEM_ASN1_WRITE
 104

	)

447 
	#PEM_F_PEM_ASN1_WRITE_BIO
 105

	)

448 
	#PEM_F_PEM_DEF_CALLBACK
 100

	)

449 
	#PEM_F_PEM_DO_HEADER
 106

	)

450 
	#PEM_F_PEM_GET_EVP_CIPHER_INFO
 107

	)

451 
	#PEM_F_PEM_READ
 108

	)

452 
	#PEM_F_PEM_READ_BIO
 109

	)

453 
	#PEM_F_PEM_READ_BIO_DHPARAMS
 141

	)

454 
	#PEM_F_PEM_READ_BIO_PARAMETERS
 140

	)

455 
	#PEM_F_PEM_READ_BIO_PRIVATEKEY
 123

	)

456 
	#PEM_F_PEM_READ_DHPARAMS
 142

	)

457 
	#PEM_F_PEM_READ_PRIVATEKEY
 124

	)

458 
	#PEM_F_PEM_SIGNFINAL
 112

	)

459 
	#PEM_F_PEM_WRITE
 113

	)

460 
	#PEM_F_PEM_WRITE_BIO
 114

	)

461 
	#PEM_F_PEM_WRITE_PRIVATEKEY
 139

	)

462 
	#PEM_F_PEM_X509_INFO_READ
 115

	)

463 
	#PEM_F_PEM_X509_INFO_READ_BIO
 116

	)

464 
	#PEM_F_PEM_X509_INFO_WRITE_BIO
 117

	)

467 
	#PEM_R_BAD_BASE64_DECODE
 100

	)

468 
	#PEM_R_BAD_DECRYPT
 101

	)

469 
	#PEM_R_BAD_END_LINE
 102

	)

470 
	#PEM_R_BAD_IV_CHARS
 103

	)

471 
	#PEM_R_BAD_MAGIC_NUMBER
 116

	)

472 
	#PEM_R_BAD_PASSWORD_READ
 104

	)

473 
	#PEM_R_BAD_VERSION_NUMBER
 117

	)

474 
	#PEM_R_BIO_WRITE_FAILURE
 118

	)

475 
	#PEM_R_CIPHER_IS_NULL
 127

	)

476 
	#PEM_R_ERROR_CONVERTING_PRIVATE_KEY
 115

	)

477 
	#PEM_R_EXPECTING_PRIVATE_KEY_BLOB
 119

	)

478 
	#PEM_R_EXPECTING_PUBLIC_KEY_BLOB
 120

	)

479 
	#PEM_R_HEADER_TOO_LONG
 128

	)

480 
	#PEM_R_INCONSISTENT_HEADER
 121

	)

481 
	#PEM_R_KEYBLOB_HEADER_PARSE_ERROR
 122

	)

482 
	#PEM_R_KEYBLOB_TOO_SHORT
 123

	)

483 
	#PEM_R_MISSING_DEK_IV
 129

	)

484 
	#PEM_R_NOT_DEK_INFO
 105

	)

485 
	#PEM_R_NOT_ENCRYPTED
 106

	)

486 
	#PEM_R_NOT_PROC_TYPE
 107

	)

487 
	#PEM_R_NO_START_LINE
 108

	)

488 
	#PEM_R_PROBLEMS_GETTING_PASSWORD
 109

	)

489 
	#PEM_R_PVK_DATA_TOO_SHORT
 124

	)

490 
	#PEM_R_PVK_TOO_SHORT
 125

	)

491 
	#PEM_R_READ_KEY
 111

	)

492 
	#PEM_R_SHORT_HEADER
 112

	)

493 
	#PEM_R_UNEXPECTED_DEK_IV
 130

	)

494 
	#PEM_R_UNSUPPORTED_CIPHER
 113

	)

495 
	#PEM_R_UNSUPPORTED_ENCRYPTION
 114

	)

496 
	#PEM_R_UNSUPPORTED_KEY_COMPONENTS
 126

	)

498 #ifde‡ 
__˝lu•lus


	@pem2.h

10 #ifde‡
__˝lu•lus


14 #i‚de‡
HEADER_PEM_H


15 
ERR_lﬂd_PEM_°rögs
();

18 #ifde‡
__˝lu•lus


	@pkcs12.h

10 #i‚de‡
HEADER_PKCS12_H


11 
	#HEADER_PKCS12_H


	)

13 
	~<›ís¶/bio.h
>

14 
	~<›ís¶/x509.h
>

16 #ifde‡
__˝lu•lus


20 
	#PKCS12_KEY_ID
 1

	)

21 
	#PKCS12_IV_ID
 2

	)

22 
	#PKCS12_MAC_ID
 3

	)

25 #i‚de‡
PKCS12_DEFAULT_ITER


26 
	#PKCS12_DEFAULT_ITER
 
PKCS5_DEFAULT_ITER


	)

29 
	#PKCS12_MAC_KEY_LENGTH
 20

	)

31 
	#PKCS12_SALT_LEN
 8

	)

39 #ifde‡
PBE_UNICODE


40 
	#PKCS12_key_gí
 
PKCS12_key_gí_uni


	)

41 
	#PKCS12_add_‰õndly«me
 
PKCS12_add_‰õndly«me_uni


	)

43 
	#PKCS12_key_gí
 
PKCS12_key_gí_asc


	)

44 
	#PKCS12_add_‰õndly«me
 
PKCS12_add_‰õndly«me_asc


	)

49 
	#KEY_EX
 0x10

	)

50 
	#KEY_SIG
 0x80

	)

52 
PKCS12_MAC_DATA_°
 
	tPKCS12_MAC_DATA
;

54 
PKCS12_°
 
	tPKCS12
;

56 
PKCS12_SAFEBAG_°
 
	tPKCS12_SAFEBAG
;

58 
DEFINE_STACK_OF
(
PKCS12_SAFEBAG
)

60 
pkcs12_bag_°
 
	tPKCS12_BAGS
;

62 
	#PKCS12_ERROR
 0

	)

63 
	#PKCS12_OK
 1

	)

67 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

69 
	#M_PKCS12_bag_ty≥
 
PKCS12_bag_ty≥


	)

70 
	#M_PKCS12_˚π_bag_ty≥
 
PKCS12_˚π_bag_ty≥


	)

71 
	#M_PKCS12_¸l_bag_ty≥
 
PKCS12_˚π_bag_ty≥


	)

73 
	#PKCS12_˚πbag2x509
 
PKCS12_SAFEBAG_gë1_˚π


	)

74 
	#PKCS12_˚πbag2s¸l
 
PKCS12_SAFEBAG_gë1_¸l


	)

75 
	#PKCS12_gë_©å
 
PKCS12_SAFEBAG_gë0_©å


	)

76 
	#PKCS12_bag_ty≥
 
PKCS12_SAFEBAG_gë_nid


	)

77 
	#PKCS12_˚π_bag_ty≥
 
PKCS12_SAFEBAG_gë_bag_nid


	)

78 
	#PKCS12_x5092˚πbag
 
PKCS12_SAFEBAG_¸óã_˚π


	)

79 
	#PKCS12_x509¸l2˚πbag
 
PKCS12_SAFEBAG_¸óã_¸l


	)

80 
	#PKCS12_MAKE_KEYBAG
 
PKCS12_SAFEBAG_¸óã0_p8öf


	)

81 
	#PKCS12_MAKE_SHKEYBAG
 
PKCS12_SAFEBAG_¸óã_pkcs8_í¸y±


	)

85 
ASN1_TYPE
 *
PKCS8_gë_©å
(
PKCS8_PRIV_KEY_INFO
 *
p8
, 
©å_nid
);

86 
PKCS12_mac_¥e£¡
(
PKCS12
 *
p12
);

87 
PKCS12_gë0_mac
(
ASN1_OCTET_STRING
 **
pmac
, 
X509_ALGOR
 **
pmaˇlg
,

88 
ASN1_OCTET_STRING
 **
pß…
, 
ASN1_INTEGER
 **
pôî
,

89 
PKCS12
 *
p12
);

91 
ASN1_TYPE
 *
PKCS12_SAFEBAG_gë0_©å
(
PKCS12_SAFEBAG
 *
bag
, 
©å_nid
);

92 
ASN1_OBJECT
 *
PKCS12_SAFEBAG_gë0_ty≥
(
PKCS12_SAFEBAG
 *
bag
);

93 
PKCS12_SAFEBAG_gë_nid
(
PKCS12_SAFEBAG
 *
bag
);

94 
PKCS12_SAFEBAG_gë_bag_nid
(
PKCS12_SAFEBAG
 *
bag
);

96 
X509
 *
PKCS12_SAFEBAG_gë1_˚π
(
PKCS12_SAFEBAG
 *
bag
);

97 
X509_CRL
 *
PKCS12_SAFEBAG_gë1_¸l
(
PKCS12_SAFEBAG
 *
bag
);

98 
STACK_OF
(
PKCS12_SAFEBAG
Ë*
PKCS12_SAFEBAG_gë0_ß„s
(PKCS12_SAFEBAG *
bag
);

99 
PKCS8_PRIV_KEY_INFO
 *
PKCS12_SAFEBAG_gë0_p8öf
(
PKCS12_SAFEBAG
 *
bag
);

100 
X509_SIG
 *
PKCS12_SAFEBAG_gë0_pkcs8
(
PKCS12_SAFEBAG
 *
bag
);

102 
PKCS12_SAFEBAG
 *
PKCS12_SAFEBAG_¸óã_˚π
(
X509
 *
x509
);

103 
PKCS12_SAFEBAG
 *
PKCS12_SAFEBAG_¸óã_¸l
(
X509_CRL
 *
¸l
);

104 
PKCS12_SAFEBAG
 *
PKCS12_SAFEBAG_¸óã0_p8öf
(
PKCS8_PRIV_KEY_INFO
 *
p8
);

105 
PKCS12_SAFEBAG
 *
PKCS12_SAFEBAG_¸óã0_pkcs8
(
X509_SIG
 *
p8
);

106 
PKCS12_SAFEBAG
 *
PKCS12_SAFEBAG_¸óã_pkcs8_í¸y±
(
pbe_nid
,

107 c⁄° *
∑ss
,

108 
∑s¶í
,

109 *
ß…
,

110 
ß…Àn
, 
ôî
,

111 
PKCS8_PRIV_KEY_INFO
 *
p8öf
);

113 
PKCS12_SAFEBAG
 *
PKCS12_ôem_∑ck_ß„bag
(*
obj
, c⁄° 
ASN1_ITEM
 *
ô
,

114 
nid1
, 
nid2
);

115 
PKCS8_PRIV_KEY_INFO
 *
PKCS8_de¸y±
(
X509_SIG
 *
p8
, c⁄° *
∑ss
,

116 
∑s¶í
);

117 
PKCS8_PRIV_KEY_INFO
 *
PKCS12_de¸y±_skey
(
PKCS12_SAFEBAG
 *
bag
,

118 c⁄° *
∑ss
, 
∑s¶í
);

119 
X509_SIG
 *
PKCS8_í¸y±
(
pbe_nid
, c⁄° 
EVP_CIPHER
 *
cùhî
,

120 c⁄° *
∑ss
, 
∑s¶í
, *
ß…
,

121 
ß…Àn
, 
ôî
, 
PKCS8_PRIV_KEY_INFO
 *
p8
);

122 
X509_SIG
 *
PKCS8_£t0_pbe
(c⁄° *
∑ss
, 
∑s¶í
,

123 
PKCS8_PRIV_KEY_INFO
 *
p8öf
, 
X509_ALGOR
 *
pbe
);

124 
PKCS7
 *
PKCS12_∑ck_p7d©a
(
STACK_OF
(
PKCS12_SAFEBAG
Ë*
sk
);

125 
STACK_OF
(
PKCS12_SAFEBAG
Ë*
PKCS12_u≈ack_p7d©a
(
PKCS7
 *
p7
);

126 
PKCS7
 *
PKCS12_∑ck_p7ícd©a
(
pbe_nid
, c⁄° *
∑ss
, 
∑s¶í
,

127 *
ß…
, 
ß…Àn
, 
ôî
,

128 
STACK_OF
(
PKCS12_SAFEBAG
Ë*
bags
);

129 
STACK_OF
(
PKCS12_SAFEBAG
Ë*
PKCS12_u≈ack_p7ícd©a
(
PKCS7
 *
p7
, c⁄° *
∑ss
,

130 
∑s¶í
);

132 
PKCS12_∑ck_authß„s
(
PKCS12
 *
p12
, 
STACK_OF
(
PKCS7
Ë*
ß„s
);

133 
STACK_OF
(
PKCS7
Ë*
PKCS12_u≈ack_authß„s
(
PKCS12
 *
p12
);

135 
PKCS12_add_loˇlkeyid
(
PKCS12_SAFEBAG
 *
bag
, *
«me
,

136 
«mñí
);

137 
PKCS12_add_‰õndly«me_asc
(
PKCS12_SAFEBAG
 *
bag
, c⁄° *
«me
,

138 
«mñí
);

139 
PKCS12_add_CSPName_asc
(
PKCS12_SAFEBAG
 *
bag
, c⁄° *
«me
,

140 
«mñí
);

141 
PKCS12_add_‰õndly«me_uni
(
PKCS12_SAFEBAG
 *
bag
,

142 c⁄° *
«me
, 
«mñí
);

143 
PKCS8_add_keyußge
(
PKCS8_PRIV_KEY_INFO
 *
p8
, 
ußge
);

144 
ASN1_TYPE
 *
PKCS12_gë_©å_gí
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
©ås
, 
©å_nid
);

145 *
PKCS12_gë_‰õndly«me
(
PKCS12_SAFEBAG
 *
bag
);

146 
STACK_OF
(
X509_ATTRIBUTE
Ë*
PKCS12_SAFEBAG_gë0_©ås
(
PKCS12_SAFEBAG
 *
bag
);

147 *
PKCS12_pbe_¸y±
(
X509_ALGOR
 *
Æg‹
, c⁄° *
∑ss
,

148 
∑s¶í
, *
ö
, 
öÀn
,

149 **
d©a
, *
d©Æí
,

150 
í_de
);

151 *
PKCS12_ôem_de¸y±_d2i
(
X509_ALGOR
 *
Æg‹
, c⁄° 
ASN1_ITEM
 *
ô
,

152 c⁄° *
∑ss
, 
∑s¶í
,

153 
ASN1_OCTET_STRING
 *
o˘
, 
zbuf
);

154 
ASN1_OCTET_STRING
 *
PKCS12_ôem_i2d_í¸y±
(
X509_ALGOR
 *
Æg‹
,

155 c⁄° 
ASN1_ITEM
 *
ô
,

156 c⁄° *
∑ss
, 
∑s¶í
,

157 *
obj
, 
zbuf
);

158 
PKCS12
 *
PKCS12_öô
(
mode
);

159 
PKCS12_key_gí_asc
(c⁄° *
∑ss
, 
∑s¶í
, *
ß…
,

160 
ß…Àn
, 
id
, 
ôî
, 
n
,

161 *
out
, c⁄° 
EVP_MD
 *
md_ty≥
);

162 
PKCS12_key_gí_uni
(*
∑ss
, 
∑s¶í
, *
ß…
,

163 
ß…Àn
, 
id
, 
ôî
, 
n
,

164 *
out
, c⁄° 
EVP_MD
 *
md_ty≥
);

165 
PKCS12_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

166 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
,

167 c⁄° 
EVP_MD
 *
md_ty≥
, 
í_de
);

168 
PKCS12_gí_mac
(
PKCS12
 *
p12
, c⁄° *
∑ss
, 
∑s¶í
,

169 *
mac
, *
ma˛í
);

170 
PKCS12_vîify_mac
(
PKCS12
 *
p12
, c⁄° *
∑ss
, 
∑s¶í
);

171 
PKCS12_£t_mac
(
PKCS12
 *
p12
, c⁄° *
∑ss
, 
∑s¶í
,

172 *
ß…
, 
ß…Àn
, 
ôî
,

173 c⁄° 
EVP_MD
 *
md_ty≥
);

174 
PKCS12_£tup_mac
(
PKCS12
 *
p12
, 
ôî
, *
ß…
,

175 
ß…Àn
, c⁄° 
EVP_MD
 *
md_ty≥
);

176 *
OPENSSL_asc2uni
(c⁄° *
asc
, 
as˛í
,

177 **
uni
, *
unûí
);

178 *
OPENSSL_uni2asc
(*
uni
, 
unûí
);

180 
DECLARE_ASN1_FUNCTIONS
(
PKCS12
)

181 
DECLARE_ASN1_FUNCTIONS
(
PKCS12_MAC_DATA
)

182 
DECLARE_ASN1_FUNCTIONS
(
PKCS12_SAFEBAG
)

183 
DECLARE_ASN1_FUNCTIONS
(
PKCS12_BAGS
)

185 
DECLARE_ASN1_ITEM
(
PKCS12_SAFEBAGS
)

186 
DECLARE_ASN1_ITEM
(
PKCS12_AUTHSAFES
)

188 
PKCS12_PBE_add
();

189 
PKCS12_∑r£
(
PKCS12
 *
p12
, c⁄° *
∑ss
, 
EVP_PKEY
 **
pkey
, 
X509
 **
˚π
,

190 
STACK_OF
(
X509
Ë**
ˇ
);

191 
PKCS12
 *
PKCS12_¸óã
(c⁄° *
∑ss
, c⁄° *
«me
, 
EVP_PKEY
 *
pkey
,

192 
X509
 *
˚π
, 
STACK_OF
(X509Ë*
ˇ
, 
nid_key
, 
nid_˚π
,

193 
ôî
, 
mac_ôî
, 
keyty≥
);

195 
PKCS12_SAFEBAG
 *
PKCS12_add_˚π
(
STACK_OF
(PKCS12_SAFEBAGË**
pbags
, 
X509
 *
˚π
);

196 
PKCS12_SAFEBAG
 *
PKCS12_add_key
(
STACK_OF
(PKCS12_SAFEBAGË**
pbags
,

197 
EVP_PKEY
 *
key
, 
key_ußge
, 
ôî
,

198 
key_nid
, c⁄° *
∑ss
);

199 
PKCS12_add_ß„
(
STACK_OF
(
PKCS7
Ë**
pß„s
, STACK_OF(
PKCS12_SAFEBAG
Ë*
bags
,

200 
ß„_nid
, 
ôî
, c⁄° *
∑ss
);

201 
PKCS12
 *
PKCS12_add_ß„s
(
STACK_OF
(
PKCS7
Ë*
ß„s
, 
p7_nid
);

203 
i2d_PKCS12_bio
(
BIO
 *
bp
, 
PKCS12
 *
p12
);

204 
i2d_PKCS12_Â
(
FILE
 *
Â
, 
PKCS12
 *
p12
);

205 
PKCS12
 *
d2i_PKCS12_bio
(
BIO
 *
bp
, PKCS12 **
p12
);

206 
PKCS12
 *
d2i_PKCS12_Â
(
FILE
 *
Â
, PKCS12 **
p12
);

207 
PKCS12_√w∑ss
(
PKCS12
 *
p12
, c⁄° *
ﬁd∑ss
, c⁄° *
√w∑ss
);

215 
ERR_lﬂd_PKCS12_°rögs
();

220 
	#PKCS12_F_PKCS12_CREATE
 105

	)

221 
	#PKCS12_F_PKCS12_GEN_MAC
 107

	)

222 
	#PKCS12_F_PKCS12_INIT
 109

	)

223 
	#PKCS12_F_PKCS12_ITEM_DECRYPT_D2I
 106

	)

224 
	#PKCS12_F_PKCS12_ITEM_I2D_ENCRYPT
 108

	)

225 
	#PKCS12_F_PKCS12_ITEM_PACK_SAFEBAG
 117

	)

226 
	#PKCS12_F_PKCS12_KEY_GEN_ASC
 110

	)

227 
	#PKCS12_F_PKCS12_KEY_GEN_UNI
 111

	)

228 
	#PKCS12_F_PKCS12_NEWPASS
 128

	)

229 
	#PKCS12_F_PKCS12_PACK_P7DATA
 114

	)

230 
	#PKCS12_F_PKCS12_PACK_P7ENCDATA
 115

	)

231 
	#PKCS12_F_PKCS12_PARSE
 118

	)

232 
	#PKCS12_F_PKCS12_PBE_CRYPT
 119

	)

233 
	#PKCS12_F_PKCS12_PBE_KEYIVGEN
 120

	)

234 
	#PKCS12_F_PKCS12_SAFEBAG_CREATE0_P8INF
 112

	)

235 
	#PKCS12_F_PKCS12_SAFEBAG_CREATE0_PKCS8
 113

	)

236 
	#PKCS12_F_PKCS12_SAFEBAG_CREATE_PKCS8_ENCRYPT
 133

	)

237 
	#PKCS12_F_PKCS12_SETUP_MAC
 122

	)

238 
	#PKCS12_F_PKCS12_SET_MAC
 123

	)

239 
	#PKCS12_F_PKCS12_UNPACK_AUTHSAFES
 130

	)

240 
	#PKCS12_F_PKCS12_UNPACK_P7DATA
 131

	)

241 
	#PKCS12_F_PKCS12_VERIFY_MAC
 126

	)

242 
	#PKCS12_F_PKCS8_ENCRYPT
 125

	)

243 
	#PKCS12_F_PKCS8_SET0_PBE
 132

	)

246 
	#PKCS12_R_CANT_PACK_STRUCTURE
 100

	)

247 
	#PKCS12_R_CONTENT_TYPE_NOT_DATA
 121

	)

248 
	#PKCS12_R_DECODE_ERROR
 101

	)

249 
	#PKCS12_R_ENCODE_ERROR
 102

	)

250 
	#PKCS12_R_ENCRYPT_ERROR
 103

	)

251 
	#PKCS12_R_ERROR_SETTING_ENCRYPTED_DATA_TYPE
 120

	)

252 
	#PKCS12_R_INVALID_NULL_ARGUMENT
 104

	)

253 
	#PKCS12_R_INVALID_NULL_PKCS12_POINTER
 105

	)

254 
	#PKCS12_R_IV_GEN_ERROR
 106

	)

255 
	#PKCS12_R_KEY_GEN_ERROR
 107

	)

256 
	#PKCS12_R_MAC_ABSENT
 108

	)

257 
	#PKCS12_R_MAC_GENERATION_ERROR
 109

	)

258 
	#PKCS12_R_MAC_SETUP_ERROR
 110

	)

259 
	#PKCS12_R_MAC_STRING_SET_ERROR
 111

	)

260 
	#PKCS12_R_MAC_VERIFY_FAILURE
 113

	)

261 
	#PKCS12_R_PARSE_ERROR
 114

	)

262 
	#PKCS12_R_PKCS12_ALGOR_CIPHERINIT_ERROR
 115

	)

263 
	#PKCS12_R_PKCS12_CIPHERFINAL_ERROR
 116

	)

264 
	#PKCS12_R_PKCS12_PBE_CRYPT_ERROR
 117

	)

265 
	#PKCS12_R_UNKNOWN_DIGEST_ALGORITHM
 118

	)

266 
	#PKCS12_R_UNSUPPORTED_PKCS12_MODE
 119

	)

268 #ifde‡ 
__˝lu•lus


	@pkcs7.h

10 #i‚de‡
HEADER_PKCS7_H


11 
	#HEADER_PKCS7_H


	)

13 
	~<›ís¶/a¢1.h
>

14 
	~<›ís¶/bio.h
>

15 
	~<›ís¶/e_os2.h
>

17 
	~<›ís¶/symhacks.h
>

18 
	~<›ís¶/os¶_typ.h
>

20 #ifde‡ 
__˝lu•lus


31 
	spkcs7_issuî_™d_£rül_°
 {

32 
X509_NAME
 *
issuî
;

33 
ASN1_INTEGER
 *
£rül
;

34 } 
	tPKCS7_ISSUER_AND_SERIAL
;

36 
	spkcs7_sig√r_öfo_°
 {

37 
ASN1_INTEGER
 *
vîsi⁄
;

38 
PKCS7_ISSUER_AND_SERIAL
 *
issuî_™d_£rül
;

39 
X509_ALGOR
 *
dige°_Æg
;

40 
STACK_OF
(
X509_ATTRIBUTE
Ë*
auth_©å
;

41 
X509_ALGOR
 *
dige°_íc_Æg
;

42 
ASN1_OCTET_STRING
 *
íc_dige°
;

43 
STACK_OF
(
X509_ATTRIBUTE
Ë*
u«uth_©å
;

45 
EVP_PKEY
 *
pkey
;

46 } 
	tPKCS7_SIGNER_INFO
;

48 
DEFINE_STACK_OF
(
PKCS7_SIGNER_INFO
)

50 
	spkcs7_ªcù_öfo_°
 {

51 
ASN1_INTEGER
 *
vîsi⁄
;

52 
PKCS7_ISSUER_AND_SERIAL
 *
issuî_™d_£rül
;

53 
X509_ALGOR
 *
key_íc_Æg‹
;

54 
ASN1_OCTET_STRING
 *
íc_key
;

55 
X509
 *
˚π
;

56 } 
	tPKCS7_RECIP_INFO
;

58 
DEFINE_STACK_OF
(
PKCS7_RECIP_INFO
)

60 
	spkcs7_sig√d_°
 {

61 
ASN1_INTEGER
 *
vîsi⁄
;

62 
STACK_OF
(
X509_ALGOR
Ë*
md_Ægs
;

63 
STACK_OF
(
X509
Ë*
˚π
;

64 
STACK_OF
(
X509_CRL
Ë*
¸l
;

65 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
sig√r_öfo
;

66 
pkcs7_°
 *
c⁄ã¡s
;

67 } 
	tPKCS7_SIGNED
;

73 
	spkcs7_íc_c⁄ã¡_°
 {

74 
ASN1_OBJECT
 *
c⁄ã¡_ty≥
;

75 
X509_ALGOR
 *
Æg‹ôhm
;

76 
ASN1_OCTET_STRING
 *
íc_d©a
;

77 c⁄° 
EVP_CIPHER
 *
cùhî
;

78 } 
	tPKCS7_ENC_CONTENT
;

80 
	spkcs7_ívñ›ed_°
 {

81 
ASN1_INTEGER
 *
vîsi⁄
;

82 
STACK_OF
(
PKCS7_RECIP_INFO
Ë*
ªcùõ¡öfo
;

83 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

84 } 
	tPKCS7_ENVELOPE
;

86 
	spkcs7_sig√d™dívñ›ed_°
 {

87 
ASN1_INTEGER
 *
vîsi⁄
;

88 
STACK_OF
(
X509_ALGOR
Ë*
md_Ægs
;

89 
STACK_OF
(
X509
Ë*
˚π
;

90 
STACK_OF
(
X509_CRL
Ë*
¸l
;

91 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
sig√r_öfo
;

92 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

93 
STACK_OF
(
PKCS7_RECIP_INFO
Ë*
ªcùõ¡öfo
;

94 } 
	tPKCS7_SIGN_ENVELOPE
;

96 
	spkcs7_dige°_°
 {

97 
ASN1_INTEGER
 *
vîsi⁄
;

98 
X509_ALGOR
 *
md
;

99 
pkcs7_°
 *
c⁄ã¡s
;

100 
ASN1_OCTET_STRING
 *
dige°
;

101 } 
	tPKCS7_DIGEST
;

103 
	spkcs7_í¸y±ed_°
 {

104 
ASN1_INTEGER
 *
vîsi⁄
;

105 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

106 } 
	tPKCS7_ENCRYPT
;

108 
	spkcs7_°
 {

113 *
a¢1
;

114 
Àngth
;

115 
	#PKCS7_S_HEADER
 0

	)

116 
	#PKCS7_S_BODY
 1

	)

117 
	#PKCS7_S_TAIL
 2

	)

118 
°©e
;

119 
dëached
;

120 
ASN1_OBJECT
 *
ty≥
;

127 *
±r
;

129 
ASN1_OCTET_STRING
 *
d©a
;

131 
PKCS7_SIGNED
 *
sign
;

133 
PKCS7_ENVELOPE
 *
ívñ›ed
;

135 
PKCS7_SIGN_ENVELOPE
 *
sig√d_™d_ívñ›ed
;

137 
PKCS7_DIGEST
 *
dige°
;

139 
PKCS7_ENCRYPT
 *
í¸y±ed
;

141 
ASN1_TYPE
 *
Ÿhî
;

142 } 
d
;

143 } 
	tPKCS7
;

145 
DEFINE_STACK_OF
(
PKCS7
)

147 
	#PKCS7_OP_SET_DETACHED_SIGNATURE
 1

	)

148 
	#PKCS7_OP_GET_DETACHED_SIGNATURE
 2

	)

150 
	#PKCS7_gë_sig√d_©åibuãs
(
si
Ë((si)->
auth_©å
)

	)

151 
	#PKCS7_gë_©åibuãs
(
si
Ë((si)->
u«uth_©å
)

	)

153 
	#PKCS7_ty≥_is_sig√d
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_sig√d
)

	)

154 
	#PKCS7_ty≥_is_í¸y±ed
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_í¸y±ed
)

	)

155 
	#PKCS7_ty≥_is_ívñ›ed
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_ívñ›ed
)

	)

156 
	#PKCS7_ty≥_is_sig√dAndEnvñ›ed
(
a
) \

157 (
	`OBJ_obj2nid
((
a
)->
ty≥
Ë=
NID_pkcs7_sig√dAndEnvñ›ed
)

	)

158 
	#PKCS7_ty≥_is_d©a
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_d©a
)

	)

159 
	#PKCS7_ty≥_is_dige°
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_dige°
)

	)

161 
	#PKCS7_£t_dëached
(
p
,
v
) \

162 
	`PKCS7_˘æ
(
p
,
PKCS7_OP_SET_DETACHED_SIGNATURE
,
v
,
NULL
)

	)

163 
	#PKCS7_gë_dëached
(
p
) \

164 
	`PKCS7_˘æ
(
p
,
PKCS7_OP_GET_DETACHED_SIGNATURE
,0,
NULL
)

	)

166 
	#PKCS7_is_dëached
(
p7
Ë(
	`PKCS7_ty≥_is_sig√d
’7Ë&& 
	`PKCS7_gë_dëached
’7))

	)

170 
	#PKCS7_TEXT
 0x1

	)

171 
	#PKCS7_NOCERTS
 0x2

	)

172 
	#PKCS7_NOSIGS
 0x4

	)

173 
	#PKCS7_NOCHAIN
 0x8

	)

174 
	#PKCS7_NOINTERN
 0x10

	)

175 
	#PKCS7_NOVERIFY
 0x20

	)

176 
	#PKCS7_DETACHED
 0x40

	)

177 
	#PKCS7_BINARY
 0x80

	)

178 
	#PKCS7_NOATTR
 0x100

	)

179 
	#PKCS7_NOSMIMECAP
 0x200

	)

180 
	#PKCS7_NOOLDMIMETYPE
 0x400

	)

181 
	#PKCS7_CRLFEOL
 0x800

	)

182 
	#PKCS7_STREAM
 0x1000

	)

183 
	#PKCS7_NOCRL
 0x2000

	)

184 
	#PKCS7_PARTIAL
 0x4000

	)

185 
	#PKCS7_REUSE_DIGEST
 0x8000

	)

186 
	#PKCS7_NO_DUAL_CONTENT
 0x10000

	)

190 
	#SMIME_TEXT
 
PKCS7_TEXT


	)

191 
	#SMIME_NOCERTS
 
PKCS7_NOCERTS


	)

192 
	#SMIME_NOSIGS
 
PKCS7_NOSIGS


	)

193 
	#SMIME_NOCHAIN
 
PKCS7_NOCHAIN


	)

194 
	#SMIME_NOINTERN
 
PKCS7_NOINTERN


	)

195 
	#SMIME_NOVERIFY
 
PKCS7_NOVERIFY


	)

196 
	#SMIME_DETACHED
 
PKCS7_DETACHED


	)

197 
	#SMIME_BINARY
 
PKCS7_BINARY


	)

198 
	#SMIME_NOATTR
 
PKCS7_NOATTR


	)

201 
	#SMIME_ASCIICRLF
 0x80000

	)

203 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ISSUER_AND_SERIAL
)

205 
PKCS7_ISSUER_AND_SERIAL_dige°
(
PKCS7_ISSUER_AND_SERIAL
 *
d©a
,

206 c⁄° 
EVP_MD
 *
ty≥
, *
md
,

207 *
Àn
);

208 #i‚de‡
OPENSSL_NO_STDIO


209 
PKCS7
 *
d2i_PKCS7_Â
(
FILE
 *
Â
, PKCS7 **
p7
);

210 
i2d_PKCS7_Â
(
FILE
 *
Â
, 
PKCS7
 *
p7
);

212 
PKCS7
 *
PKCS7_dup
(PKCS7 *
p7
);

213 
PKCS7
 *
d2i_PKCS7_bio
(
BIO
 *
bp
, PKCS7 **
p7
);

214 
i2d_PKCS7_bio
(
BIO
 *
bp
, 
PKCS7
 *
p7
);

215 
i2d_PKCS7_bio_°ªam
(
BIO
 *
out
, 
PKCS7
 *
p7
, BIO *
ö
, 
Êags
);

216 
PEM_wrôe_bio_PKCS7_°ªam
(
BIO
 *
out
, 
PKCS7
 *
p7
, BIO *
ö
, 
Êags
);

218 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNER_INFO
)

219 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_RECIP_INFO
)

220 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNED
)

221 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENC_CONTENT
)

222 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENVELOPE
)

223 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGN_ENVELOPE
)

224 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_DIGEST
)

225 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENCRYPT
)

226 
DECLARE_ASN1_FUNCTIONS
(
PKCS7
)

228 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_SIGN
)

229 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_VERIFY
)

231 
DECLARE_ASN1_NDEF_FUNCTION
(
PKCS7
)

232 
DECLARE_ASN1_PRINT_FUNCTION
(
PKCS7
)

234 
PKCS7_˘æ
(
PKCS7
 *
p7
, 
cmd
, 
œrg
, *
∑rg
);

236 
PKCS7_£t_ty≥
(
PKCS7
 *
p7
, 
ty≥
);

237 
PKCS7_£t0_ty≥_Ÿhî
(
PKCS7
 *
p7
, 
ty≥
, 
ASN1_TYPE
 *
Ÿhî
);

238 
PKCS7_£t_c⁄ã¡
(
PKCS7
 *
p7
, PKCS7 *
p7_d©a
);

239 
PKCS7_SIGNER_INFO_£t
(
PKCS7_SIGNER_INFO
 *
p7i
, 
X509
 *
x509
, 
EVP_PKEY
 *
pkey
,

240 c⁄° 
EVP_MD
 *
dg°
);

241 
PKCS7_SIGNER_INFO_sign
(
PKCS7_SIGNER_INFO
 *
si
);

242 
PKCS7_add_sig√r
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
p7i
);

243 
PKCS7_add_˚πifiˇã
(
PKCS7
 *
p7
, 
X509
 *
x509
);

244 
PKCS7_add_¸l
(
PKCS7
 *
p7
, 
X509_CRL
 *
x509
);

245 
PKCS7_c⁄ã¡_√w
(
PKCS7
 *
p7
, 
nid
);

246 
PKCS7_d©aVîify
(
X509_STORE
 *
˚π_°‹e
, 
X509_STORE_CTX
 *
˘x
,

247 
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

248 
PKCS7_sig«tuªVîify
(
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
,

249 
X509
 *
x509
);

251 
BIO
 *
PKCS7_d©aInô
(
PKCS7
 *
p7
, BIO *
bio
);

252 
PKCS7_d©aFöÆ
(
PKCS7
 *
p7
, 
BIO
 *
bio
);

253 
BIO
 *
PKCS7_d©aDecode
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, BIO *
ö_bio
, 
X509
 *
p˚π
);

255 
PKCS7_SIGNER_INFO
 *
PKCS7_add_sig«tuª
(
PKCS7
 *
p7
, 
X509
 *
x509
,

256 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
dg°
);

257 
X509
 *
PKCS7_˚π_‰om_sig√r_öfo
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

258 
PKCS7_£t_dige°
(
PKCS7
 *
p7
, c⁄° 
EVP_MD
 *
md
);

259 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
PKCS7_gë_sig√r_öfo
(
PKCS7
 *
p7
);

261 
PKCS7_RECIP_INFO
 *
PKCS7_add_ªcùõ¡
(
PKCS7
 *
p7
, 
X509
 *
x509
);

262 
PKCS7_SIGNER_INFO_gë0_Ægs
(
PKCS7_SIGNER_INFO
 *
si
, 
EVP_PKEY
 **
pk
,

263 
X509_ALGOR
 **
pdig
, X509_ALGOR **
psig
);

264 
PKCS7_RECIP_INFO_gë0_Æg
(
PKCS7_RECIP_INFO
 *
ri
, 
X509_ALGOR
 **
≥nc
);

265 
PKCS7_add_ªcùõ¡_öfo
(
PKCS7
 *
p7
, 
PKCS7_RECIP_INFO
 *
ri
);

266 
PKCS7_RECIP_INFO_£t
(
PKCS7_RECIP_INFO
 *
p7i
, 
X509
 *
x509
);

267 
PKCS7_£t_cùhî
(
PKCS7
 *
p7
, c⁄° 
EVP_CIPHER
 *
cùhî
);

268 
PKCS7_°ªam
(***
bound¨y
, 
PKCS7
 *
p7
);

270 
PKCS7_ISSUER_AND_SERIAL
 *
PKCS7_gë_issuî_™d_£rül
(
PKCS7
 *
p7
, 
idx
);

271 
ASN1_OCTET_STRING
 *
PKCS7_dige°_‰om_©åibuãs
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

272 
PKCS7_add_sig√d_©åibuã
(
PKCS7_SIGNER_INFO
 *
p7si
, 
nid
, 
ty≥
,

273 *
d©a
);

274 
PKCS7_add_©åibuã
(
PKCS7_SIGNER_INFO
 *
p7si
, 
nid
, 
©πy≥
,

275 *
vÆue
);

276 
ASN1_TYPE
 *
PKCS7_gë_©åibuã
(
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

277 
ASN1_TYPE
 *
PKCS7_gë_sig√d_©åibuã
(
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

278 
PKCS7_£t_sig√d_©åibuãs
(
PKCS7_SIGNER_INFO
 *
p7si
,

279 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

280 
PKCS7_£t_©åibuãs
(
PKCS7_SIGNER_INFO
 *
p7si
,

281 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

283 
PKCS7
 *
PKCS7_sign
(
X509
 *
sign˚π
, 
EVP_PKEY
 *
pkey
, 
STACK_OF
(X509Ë*
˚πs
,

284 
BIO
 *
d©a
, 
Êags
);

286 
PKCS7_SIGNER_INFO
 *
PKCS7_sign_add_sig√r
(
PKCS7
 *
p7
,

287 
X509
 *
sign˚π
, 
EVP_PKEY
 *
pkey
,

288 c⁄° 
EVP_MD
 *
md
, 
Êags
);

290 
PKCS7_föÆ
(
PKCS7
 *
p7
, 
BIO
 *
d©a
, 
Êags
);

291 
PKCS7_vîify
(
PKCS7
 *
p7
, 
STACK_OF
(
X509
Ë*
˚πs
, 
X509_STORE
 *
°‹e
,

292 
BIO
 *
öd©a
, BIO *
out
, 
Êags
);

293 
STACK_OF
(
X509
Ë*
PKCS7_gë0_sig√rs
(
PKCS7
 *
p7
, STACK_OF(X509Ë*
˚πs
,

294 
Êags
);

295 
PKCS7
 *
PKCS7_í¸y±
(
STACK_OF
(
X509
Ë*
˚πs
, 
BIO
 *
ö
, c⁄° 
EVP_CIPHER
 *
cùhî
,

296 
Êags
);

297 
PKCS7_de¸y±
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, 
X509
 *
˚π
, 
BIO
 *
d©a
,

298 
Êags
);

300 
PKCS7_add_©åib_smimeˇp
(
PKCS7_SIGNER_INFO
 *
si
,

301 
STACK_OF
(
X509_ALGOR
Ë*
ˇp
);

302 
STACK_OF
(
X509_ALGOR
Ë*
PKCS7_gë_smimeˇp
(
PKCS7_SIGNER_INFO
 *
si
);

303 
PKCS7_sim∂e_smimeˇp
(
STACK_OF
(
X509_ALGOR
Ë*
sk
, 
nid
, 
¨g
);

305 
PKCS7_add_©åib_c⁄ã¡_ty≥
(
PKCS7_SIGNER_INFO
 *
si
, 
ASN1_OBJECT
 *
coid
);

306 
PKCS7_add0_©åib_signög_time
(
PKCS7_SIGNER_INFO
 *
si
, 
ASN1_TIME
 *
t
);

307 
PKCS7_add1_©åib_dige°
(
PKCS7_SIGNER_INFO
 *
si
,

308 c⁄° *
md
, 
mdÀn
);

310 
SMIME_wrôe_PKCS7
(
BIO
 *
bio
, 
PKCS7
 *
p7
, BIO *
d©a
, 
Êags
);

311 
PKCS7
 *
SMIME_ªad_PKCS7
(
BIO
 *
bio
, BIO **
bc⁄t
);

313 
BIO
 *
BIO_√w_PKCS7
(BIO *
out
, 
PKCS7
 *
p7
);

321 
ERR_lﬂd_PKCS7_°rögs
();

326 
	#PKCS7_F_DO_PKCS7_SIGNED_ATTRIB
 136

	)

327 
	#PKCS7_F_PKCS7_ADD0_ATTRIB_SIGNING_TIME
 135

	)

328 
	#PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP
 118

	)

329 
	#PKCS7_F_PKCS7_ADD_CERTIFICATE
 100

	)

330 
	#PKCS7_F_PKCS7_ADD_CRL
 101

	)

331 
	#PKCS7_F_PKCS7_ADD_RECIPIENT_INFO
 102

	)

332 
	#PKCS7_F_PKCS7_ADD_SIGNATURE
 131

	)

333 
	#PKCS7_F_PKCS7_ADD_SIGNER
 103

	)

334 
	#PKCS7_F_PKCS7_BIO_ADD_DIGEST
 125

	)

335 
	#PKCS7_F_PKCS7_COPY_EXISTING_DIGEST
 138

	)

336 
	#PKCS7_F_PKCS7_CTRL
 104

	)

337 
	#PKCS7_F_PKCS7_DATADECODE
 112

	)

338 
	#PKCS7_F_PKCS7_DATAFINAL
 128

	)

339 
	#PKCS7_F_PKCS7_DATAINIT
 105

	)

340 
	#PKCS7_F_PKCS7_DATAVERIFY
 107

	)

341 
	#PKCS7_F_PKCS7_DECRYPT
 114

	)

342 
	#PKCS7_F_PKCS7_DECRYPT_RINFO
 133

	)

343 
	#PKCS7_F_PKCS7_ENCODE_RINFO
 132

	)

344 
	#PKCS7_F_PKCS7_ENCRYPT
 115

	)

345 
	#PKCS7_F_PKCS7_FINAL
 134

	)

346 
	#PKCS7_F_PKCS7_FIND_DIGEST
 127

	)

347 
	#PKCS7_F_PKCS7_GET0_SIGNERS
 124

	)

348 
	#PKCS7_F_PKCS7_RECIP_INFO_SET
 130

	)

349 
	#PKCS7_F_PKCS7_SET_CIPHER
 108

	)

350 
	#PKCS7_F_PKCS7_SET_CONTENT
 109

	)

351 
	#PKCS7_F_PKCS7_SET_DIGEST
 126

	)

352 
	#PKCS7_F_PKCS7_SET_TYPE
 110

	)

353 
	#PKCS7_F_PKCS7_SIGN
 116

	)

354 
	#PKCS7_F_PKCS7_SIGNATUREVERIFY
 113

	)

355 
	#PKCS7_F_PKCS7_SIGNER_INFO_SET
 129

	)

356 
	#PKCS7_F_PKCS7_SIGNER_INFO_SIGN
 139

	)

357 
	#PKCS7_F_PKCS7_SIGN_ADD_SIGNER
 137

	)

358 
	#PKCS7_F_PKCS7_SIMPLE_SMIMECAP
 119

	)

359 
	#PKCS7_F_PKCS7_VERIFY
 117

	)

362 
	#PKCS7_R_CERTIFICATE_VERIFY_ERROR
 117

	)

363 
	#PKCS7_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 144

	)

364 
	#PKCS7_R_CIPHER_NOT_INITIALIZED
 116

	)

365 
	#PKCS7_R_CONTENT_AND_DATA_PRESENT
 118

	)

366 
	#PKCS7_R_CTRL_ERROR
 152

	)

367 
	#PKCS7_R_DECRYPT_ERROR
 119

	)

368 
	#PKCS7_R_DIGEST_FAILURE
 101

	)

369 
	#PKCS7_R_ENCRYPTION_CTRL_FAILURE
 149

	)

370 
	#PKCS7_R_ENCRYPTION_NOT_SUPPORTED_FOR_THIS_KEY_TYPE
 150

	)

371 
	#PKCS7_R_ERROR_ADDING_RECIPIENT
 120

	)

372 
	#PKCS7_R_ERROR_SETTING_CIPHER
 121

	)

373 
	#PKCS7_R_INVALID_NULL_POINTER
 143

	)

374 
	#PKCS7_R_INVALID_SIGNED_DATA_TYPE
 155

	)

375 
	#PKCS7_R_NO_CONTENT
 122

	)

376 
	#PKCS7_R_NO_DEFAULT_DIGEST
 151

	)

377 
	#PKCS7_R_NO_MATCHING_DIGEST_TYPE_FOUND
 154

	)

378 
	#PKCS7_R_NO_RECIPIENT_MATCHES_CERTIFICATE
 115

	)

379 
	#PKCS7_R_NO_SIGNATURES_ON_DATA
 123

	)

380 
	#PKCS7_R_NO_SIGNERS
 142

	)

381 
	#PKCS7_R_OPERATION_NOT_SUPPORTED_ON_THIS_TYPE
 104

	)

382 
	#PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR
 124

	)

383 
	#PKCS7_R_PKCS7_ADD_SIGNER_ERROR
 153

	)

384 
	#PKCS7_R_PKCS7_DATASIGN
 145

	)

385 
	#PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE
 127

	)

386 
	#PKCS7_R_SIGNATURE_FAILURE
 105

	)

387 
	#PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND
 128

	)

388 
	#PKCS7_R_SIGNING_CTRL_FAILURE
 147

	)

389 
	#PKCS7_R_SIGNING_NOT_SUPPORTED_FOR_THIS_KEY_TYPE
 148

	)

390 
	#PKCS7_R_SMIME_TEXT_ERROR
 129

	)

391 
	#PKCS7_R_UNABLE_TO_FIND_CERTIFICATE
 106

	)

392 
	#PKCS7_R_UNABLE_TO_FIND_MEM_BIO
 107

	)

393 
	#PKCS7_R_UNABLE_TO_FIND_MESSAGE_DIGEST
 108

	)

394 
	#PKCS7_R_UNKNOWN_DIGEST_TYPE
 109

	)

395 
	#PKCS7_R_UNKNOWN_OPERATION
 110

	)

396 
	#PKCS7_R_UNSUPPORTED_CIPHER_TYPE
 111

	)

397 
	#PKCS7_R_UNSUPPORTED_CONTENT_TYPE
 112

	)

398 
	#PKCS7_R_WRONG_CONTENT_TYPE
 113

	)

399 
	#PKCS7_R_WRONG_PKCS7_TYPE
 114

	)

401 #ifde‡ 
__˝lu•lus


	@rand.h

10 #i‚de‡
HEADER_RAND_H


11 
	#HEADER_RAND_H


	)

13 
	~<°dlib.h
>

14 
	~<›ís¶/os¶_typ.h
>

15 
	~<›ís¶/e_os2.h
>

17 #ifde‡ 
__˝lu•lus


24 
	sønd_mëh_°
 {

25 (*
£ed
Ë(c⁄° *
buf
, 
num
);

26 (*
byãs
Ë(*
buf
, 
num
);

27 (*
˛ónup
) ();

28 (*
add
Ë(c⁄° *
buf
, 
num
, 
íå›y
);

29 (*
p£ud‹™d
Ë(*
buf
, 
num
);

30 (*
°©us
) ();

33 #ifde‡
BN_DEBUG


34 
ønd_¥edi˘abÀ
;

37 
RAND_£t_ønd_mëhod
(c⁄° 
RAND_METHOD
 *
mëh
);

38 c⁄° 
RAND_METHOD
 *
RAND_gë_ønd_mëhod
();

39 #i‚de‡
OPENSSL_NO_ENGINE


40 
RAND_£t_ønd_ígöe
(
ENGINE
 *
ígöe
);

42 
RAND_METHOD
 *
RAND_O≥nSSL
();

43 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

44 
	#RAND_˛ónup
(Ë0Ë

	)

46 
RAND_byãs
(*
buf
, 
num
);

47 
DEPRECATEDIN_1_1_0
(
RAND_p£udo_byãs
(*
buf
, 
num
))

48 
RAND_£ed
(c⁄° *
buf
, 
num
);

49 #i‡
deföed
(
__ANDROID__
Ë&& deföed(
__NDK_FPABI__
)

50 
	g__NDK_FPABI__


52 
RAND_add
(c⁄° *
buf
, 
num
, 
íå›y
);

53 
RAND_lﬂd_fûe
(c⁄° *
fûe
, 
max_byãs
);

54 
RAND_wrôe_fûe
(c⁄° *
fûe
);

55 c⁄° *
RAND_fûe_«me
(*
fûe
, 
size_t
 
num
);

56 
RAND_°©us
();

57 #i‚de‡
OPENSSL_NO_EGD


58 
RAND_quîy_egd_byãs
(c⁄° *
∑th
, *
buf
, 
byãs
);

59 
RAND_egd
(c⁄° *
∑th
);

60 
RAND_egd_byãs
(c⁄° *
∑th
, 
byãs
);

62 
RAND_pﬁl
();

64 #i‡
deföed
(
_WIN32
Ë&& (deföed(
BASETYPES
Ë|| deföed(
_WINDEF_H
))

66 
DEPRECATEDIN_1_1_0
(
RAND_s¸ìn
())

67 
DEPRECATEDIN_1_1_0
(
RAND_evít
(
UINT
, 
WPARAM
, 
LPARAM
))

76 
ERR_lﬂd_RAND_°rögs
();

81 
	#RAND_F_RAND_BYTES
 100

	)

84 
	#RAND_R_PRNG_NOT_SEEDED
 100

	)

86 #ifde‡ 
__˝lu•lus


	@rc2.h

10 #i‚de‡
HEADER_RC2_H


11 
	#HEADER_RC2_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #i‚de‡
OPENSSL_NO_RC2


16 #ifde‡ 
__˝lu•lus


20 
	tRC2_INT
;

22 
	#RC2_ENCRYPT
 1

	)

23 
	#RC2_DECRYPT
 0

	)

25 
	#RC2_BLOCK
 8

	)

26 
	#RC2_KEY_LENGTH
 16

	)

28 
	src2_key_°
 {

29 
RC2_INT
 
d©a
[64];

30 } 
	tRC2_KEY
;

32 
RC2_£t_key
(
RC2_KEY
 *
key
, 
Àn
, c⁄° *
d©a
, 
bôs
);

33 
RC2_ecb_í¸y±
(c⁄° *
ö
, *
out
,

34 
RC2_KEY
 *
key
, 
íc
);

35 
RC2_í¸y±
(*
d©a
, 
RC2_KEY
 *
key
);

36 
RC2_de¸y±
(*
d©a
, 
RC2_KEY
 *
key
);

37 
RC2_cbc_í¸y±
(c⁄° *
ö
, *
out
, 
Àngth
,

38 
RC2_KEY
 *
ks
, *
iv
, 
íc
);

39 
RC2_cfb64_í¸y±
(c⁄° *
ö
, *
out
,

40 
Àngth
, 
RC2_KEY
 *
scheduÀ
, *
ivec
,

41 *
num
, 
íc
);

42 
RC2_ofb64_í¸y±
(c⁄° *
ö
, *
out
,

43 
Àngth
, 
RC2_KEY
 *
scheduÀ
, *
ivec
,

44 *
num
);

46 #ifde‡ 
__˝lu•lus


	@rc4.h

10 #i‚de‡
HEADER_RC4_H


11 
	#HEADER_RC4_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #i‚de‡
OPENSSL_NO_RC4


16 
	~<°ddef.h
>

17 #ifde‡ 
__˝lu•lus


21 
	src4_key_°
 {

22 
RC4_INT
 
x
, 
y
;

23 
RC4_INT
 
d©a
[256];

24 } 
	tRC4_KEY
;

26 c⁄° *
RC4_›ti⁄s
();

27 
RC4_£t_key
(
RC4_KEY
 *
key
, 
Àn
, c⁄° *
d©a
);

28 
RC4
(
RC4_KEY
 *
key
, 
size_t
 
Àn
, c⁄° *
öd©a
,

29 *
outd©a
);

31 #ifde‡ 
__˝lu•lus


	@rc5.h

10 #i‚de‡
HEADER_RC5_H


11 
	#HEADER_RC5_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #i‚de‡
OPENSSL_NO_RC5


16 #ifde‡ 
__˝lu•lus


20 
	#RC5_ENCRYPT
 1

	)

21 
	#RC5_DECRYPT
 0

	)

23 
	#RC5_32_INT
 

	)

25 
	#RC5_32_BLOCK
 8

	)

26 
	#RC5_32_KEY_LENGTH
 16

	)

32 
	#RC5_8_ROUNDS
 8

	)

33 
	#RC5_12_ROUNDS
 12

	)

34 
	#RC5_16_ROUNDS
 16

	)

36 
	src5_key_°
 {

38 
rounds
;

39 
RC5_32_INT
 
d©a
[2 * (
RC5_16_ROUNDS
 + 1)];

40 } 
	tRC5_32_KEY
;

42 
RC5_32_£t_key
(
RC5_32_KEY
 *
key
, 
Àn
, c⁄° *
d©a
,

43 
rounds
);

44 
RC5_32_ecb_í¸y±
(c⁄° *
ö
, *
out
,

45 
RC5_32_KEY
 *
key
, 
íc
);

46 
RC5_32_í¸y±
(*
d©a
, 
RC5_32_KEY
 *
key
);

47 
RC5_32_de¸y±
(*
d©a
, 
RC5_32_KEY
 *
key
);

48 
RC5_32_cbc_í¸y±
(c⁄° *
ö
, *
out
,

49 
Àngth
, 
RC5_32_KEY
 *
ks
, *
iv
,

50 
íc
);

51 
RC5_32_cfb64_í¸y±
(c⁄° *
ö
, *
out
,

52 
Àngth
, 
RC5_32_KEY
 *
scheduÀ
,

53 *
ivec
, *
num
, 
íc
);

54 
RC5_32_ofb64_í¸y±
(c⁄° *
ö
, *
out
,

55 
Àngth
, 
RC5_32_KEY
 *
scheduÀ
,

56 *
ivec
, *
num
);

58 #ifde‡ 
__˝lu•lus


	@ripemd.h

10 #i‚de‡
HEADER_RIPEMD_H


11 
	#HEADER_RIPEMD_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #i‚de‡
OPENSSL_NO_RMD160


16 
	~<›ís¶/e_os2.h
>

17 
	~<°ddef.h
>

18 #ifde‡ 
__˝lu•lus


22 
	#RIPEMD160_LONG
 

	)

24 
	#RIPEMD160_CBLOCK
 64

	)

25 
	#RIPEMD160_LBLOCK
 (
RIPEMD160_CBLOCK
/4)

	)

26 
	#RIPEMD160_DIGEST_LENGTH
 20

	)

28 
	sRIPEMD160°©e_°
 {

29 
RIPEMD160_LONG
 
A
, 
B
, 
C
, 
D
, 
E
;

30 
RIPEMD160_LONG
 
Nl
, 
Nh
;

31 
RIPEMD160_LONG
 
d©a
[
RIPEMD160_LBLOCK
];

32 
num
;

33 } 
	tRIPEMD160_CTX
;

35 
RIPEMD160_Inô
(
RIPEMD160_CTX
 *
c
);

36 
RIPEMD160_Upd©e
(
RIPEMD160_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

37 
RIPEMD160_FöÆ
(*
md
, 
RIPEMD160_CTX
 *
c
);

38 *
RIPEMD160
(c⁄° *
d
, 
size_t
 
n
, *
md
);

39 
RIPEMD160_Tønsf‹m
(
RIPEMD160_CTX
 *
c
, c⁄° *
b
);

41 #ifde‡ 
__˝lu•lus


	@rsa.h

10 #i‚de‡
HEADER_RSA_H


11 
	#HEADER_RSA_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #i‚de‡
OPENSSL_NO_RSA


16 
	~<›ís¶/a¢1.h
>

17 
	~<›ís¶/bio.h
>

18 
	~<›ís¶/¸y±o.h
>

19 
	~<›ís¶/os¶_typ.h
>

20 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

21 
	~<›ís¶/bn.h
>

23 #ifde‡ 
__˝lu•lus


29 #i‚de‡
OPENSSL_RSA_MAX_MODULUS_BITS


30 
	#OPENSSL_RSA_MAX_MODULUS_BITS
 16384

	)

33 
	#OPENSSL_RSA_FIPS_MIN_MODULUS_BITS
 1024

	)

35 #i‚de‡
OPENSSL_RSA_SMALL_MODULUS_BITS


36 
	#OPENSSL_RSA_SMALL_MODULUS_BITS
 3072

	)

38 #i‚de‡
OPENSSL_RSA_MAX_PUBEXP_BITS


41 
	#OPENSSL_RSA_MAX_PUBEXP_BITS
 64

	)

44 
	#RSA_3
 0x3L

	)

45 
	#RSA_F4
 0x10001L

	)

47 
	#RSA_METHOD_FLAG_NO_CHECK
 0x0001

	)

50 
	#RSA_FLAG_CACHE_PUBLIC
 0x0002

	)

51 
	#RSA_FLAG_CACHE_PRIVATE
 0x0004

	)

52 
	#RSA_FLAG_BLINDING
 0x0008

	)

53 
	#RSA_FLAG_THREAD_SAFE
 0x0010

	)

60 
	#RSA_FLAG_EXT_PKEY
 0x0020

	)

68 
	#RSA_FLAG_NO_BLINDING
 0x0080

	)

69 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

73 
	#RSA_FLAG_NO_CONSTTIME
 0x0000

	)

75 #i‡
OPENSSL_API_COMPAT
 < 0x00908000L

85 
	#RSA_FLAG_NO_EXP_CONSTTIME
 
RSA_FLAG_NO_CONSTTIME


	)

88 
	#EVP_PKEY_CTX_£t_rß_∑ddög
(
˘x
, 
∑d
) \

89 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, -1, 
EVP_PKEY_CTRL_RSA_PADDING
, \

90 
∑d
, 
NULL
)

	)

92 
	#EVP_PKEY_CTX_gë_rß_∑ddög
(
˘x
, 
µad
) \

93 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, -1, \

94 
EVP_PKEY_CTRL_GET_RSA_PADDING
, 0, 
µad
)

	)

96 
	#EVP_PKEY_CTX_£t_rß_pss_ß…Àn
(
˘x
, 
Àn
) \

97 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, \

98 (
EVP_PKEY_OP_SIGN
|
EVP_PKEY_OP_VERIFY
), \

99 
EVP_PKEY_CTRL_RSA_PSS_SALTLEN
, \

100 
Àn
, 
NULL
)

	)

102 
	#EVP_PKEY_CTX_gë_rß_pss_ß…Àn
(
˘x
, 
∂í
) \

103 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, \

104 (
EVP_PKEY_OP_SIGN
|
EVP_PKEY_OP_VERIFY
), \

105 
EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN
, \

106 0, 
∂í
)

	)

108 
	#EVP_PKEY_CTX_£t_rß_keygí_bôs
(
˘x
, 
bôs
) \

109 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_KEYGEN
, \

110 
EVP_PKEY_CTRL_RSA_KEYGEN_BITS
, 
bôs
, 
NULL
)

	)

112 
	#EVP_PKEY_CTX_£t_rß_keygí_pubexp
(
˘x
, 
pubexp
) \

113 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_KEYGEN
, \

114 
EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP
, 0, 
pubexp
)

	)

116 
	#EVP_PKEY_CTX_£t_rß_mgf1_md
(
˘x
, 
md
) \

117 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, \

118 
EVP_PKEY_OP_TYPE_SIG
 | 
EVP_PKEY_OP_TYPE_CRYPT
, \

119 
EVP_PKEY_CTRL_RSA_MGF1_MD
, 0, (*)
md
)

	)

121 
	#EVP_PKEY_CTX_£t_rß_ﬂï_md
(
˘x
, 
md
) \

122 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_CRYPT
, \

123 
EVP_PKEY_CTRL_RSA_OAEP_MD
, 0, (*)
md
)

	)

125 
	#EVP_PKEY_CTX_gë_rß_mgf1_md
(
˘x
, 
pmd
) \

126 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, \

127 
EVP_PKEY_OP_TYPE_SIG
 | 
EVP_PKEY_OP_TYPE_CRYPT
, \

128 
EVP_PKEY_CTRL_GET_RSA_MGF1_MD
, 0, (*)
pmd
)

	)

130 
	#EVP_PKEY_CTX_gë_rß_ﬂï_md
(
˘x
, 
pmd
) \

131 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_CRYPT
, \

132 
EVP_PKEY_CTRL_GET_RSA_OAEP_MD
, 0, (*)
pmd
)

	)

134 
	#EVP_PKEY_CTX_£t0_rß_ﬂï_œbñ
(
˘x
, 
l
, 
Œí
) \

135 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_CRYPT
, \

136 
EVP_PKEY_CTRL_RSA_OAEP_LABEL
, 
Œí
, (*)
l
)

	)

138 
	#EVP_PKEY_CTX_gë0_rß_ﬂï_œbñ
(
˘x
, 
l
) \

139 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_CRYPT
, \

140 
EVP_PKEY_CTRL_GET_RSA_OAEP_LABEL
, 0, (*)
l
)

	)

142 
	#EVP_PKEY_CTRL_RSA_PADDING
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

143 
	#EVP_PKEY_CTRL_RSA_PSS_SALTLEN
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

145 
	#EVP_PKEY_CTRL_RSA_KEYGEN_BITS
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

146 
	#EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP
 (
EVP_PKEY_ALG_CTRL
 + 4)

	)

147 
	#EVP_PKEY_CTRL_RSA_MGF1_MD
 (
EVP_PKEY_ALG_CTRL
 + 5)

	)

149 
	#EVP_PKEY_CTRL_GET_RSA_PADDING
 (
EVP_PKEY_ALG_CTRL
 + 6)

	)

150 
	#EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN
 (
EVP_PKEY_ALG_CTRL
 + 7)

	)

151 
	#EVP_PKEY_CTRL_GET_RSA_MGF1_MD
 (
EVP_PKEY_ALG_CTRL
 + 8)

	)

153 
	#EVP_PKEY_CTRL_RSA_OAEP_MD
 (
EVP_PKEY_ALG_CTRL
 + 9)

	)

154 
	#EVP_PKEY_CTRL_RSA_OAEP_LABEL
 (
EVP_PKEY_ALG_CTRL
 + 10)

	)

156 
	#EVP_PKEY_CTRL_GET_RSA_OAEP_MD
 (
EVP_PKEY_ALG_CTRL
 + 11)

	)

157 
	#EVP_PKEY_CTRL_GET_RSA_OAEP_LABEL
 (
EVP_PKEY_ALG_CTRL
 + 12)

	)

159 
	#RSA_PKCS1_PADDING
 1

	)

160 
	#RSA_SSLV23_PADDING
 2

	)

161 
	#RSA_NO_PADDING
 3

	)

162 
	#RSA_PKCS1_OAEP_PADDING
 4

	)

163 
	#RSA_X931_PADDING
 5

	)

165 
	#RSA_PKCS1_PSS_PADDING
 6

	)

167 
	#RSA_PKCS1_PADDING_SIZE
 11

	)

169 
	#RSA_£t_≠p_d©a
(
s
,
¨g
Ë
	`RSA_£t_ex_d©a
(s,0,¨g)

	)

170 
	#RSA_gë_≠p_d©a
(
s
Ë
	`RSA_gë_ex_d©a
(s,0)

	)

172 
RSA
 *
RSA_√w
();

173 
RSA
 *
RSA_√w_mëhod
(
ENGINE
 *
ígöe
);

174 
RSA_bôs
(c⁄° 
RSA
 *
rß
);

175 
RSA_size
(c⁄° 
RSA
 *
rß
);

176 
RSA_£curôy_bôs
(c⁄° 
RSA
 *
rß
);

178 
RSA_£t0_key
(
RSA
 *
r
, 
BIGNUM
 *
n
, BIGNUM *
e
, BIGNUM *
d
);

179 
RSA_£t0_Á˘‹s
(
RSA
 *
r
, 
BIGNUM
 *
p
, BIGNUM *
q
);

180 
RSA_£t0_¸t_∑øms
(
RSA
 *
r
,
BIGNUM
 *
dmp1
, BIGNUM *
dmq1
, BIGNUM *
iqmp
);

181 
RSA_gë0_key
(c⁄° 
RSA
 *
r
,

182 c⁄° 
BIGNUM
 **
n
, c⁄° BIGNUM **
e
, c⁄° BIGNUM **
d
);

183 
RSA_gë0_Á˘‹s
(c⁄° 
RSA
 *
r
, c⁄° 
BIGNUM
 **
p
, c⁄° BIGNUM **
q
);

184 
RSA_gë0_¸t_∑øms
(c⁄° 
RSA
 *
r
,

185 c⁄° 
BIGNUM
 **
dmp1
, c⁄° BIGNUM **
dmq1
,

186 c⁄° 
BIGNUM
 **
iqmp
);

187 
RSA_˛ór_Êags
(
RSA
 *
r
, 
Êags
);

188 
RSA_ã°_Êags
(c⁄° 
RSA
 *
r
, 
Êags
);

189 
RSA_£t_Êags
(
RSA
 *
r
, 
Êags
);

190 
ENGINE
 *
RSA_gë0_ígöe
(c⁄° 
RSA
 *
r
);

193 
DEPRECATEDIN_0_9_8
(
RSA
 *
RSA_gíî©e_key
(
bôs
, 
e
, 

194 (*
ˇŒback
) (, , *),

195 *
cb_¨g
))

198 
RSA_gíî©e_key_ex
(
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

200 
RSA_X931_dîive_ex
(
RSA
 *
rß
, 
BIGNUM
 *
p1
, BIGNUM *
p2
, BIGNUM *
q1
,

201 
BIGNUM
 *
q2
, c⁄° BIGNUM *
Xp1
, c⁄° BIGNUM *
Xp2
,

202 c⁄° 
BIGNUM
 *
Xp
, c⁄° BIGNUM *
Xq1
, c⁄° BIGNUM *
Xq2
,

203 c⁄° 
BIGNUM
 *
Xq
, c⁄° BIGNUM *
e
, 
BN_GENCB
 *
cb
);

204 
RSA_X931_gíî©e_key_ex
(
RSA
 *
rß
, 
bôs
, c⁄° 
BIGNUM
 *
e
,

205 
BN_GENCB
 *
cb
);

207 
RSA_check_key
(c⁄° 
RSA
 *);

208 
RSA_check_key_ex
(c⁄° 
RSA
 *, 
BN_GENCB
 *
cb
);

210 
RSA_public_í¸y±
(
Êí
, c⁄° *
‰om
,

211 *
to
, 
RSA
 *
rß
, 
∑ddög
);

212 
RSA_¥iv©e_í¸y±
(
Êí
, c⁄° *
‰om
,

213 *
to
, 
RSA
 *
rß
, 
∑ddög
);

214 
RSA_public_de¸y±
(
Êí
, c⁄° *
‰om
,

215 *
to
, 
RSA
 *
rß
, 
∑ddög
);

216 
RSA_¥iv©e_de¸y±
(
Êí
, c⁄° *
‰om
,

217 *
to
, 
RSA
 *
rß
, 
∑ddög
);

218 
RSA_‰ì
(
RSA
 *
r
);

220 
RSA_up_ªf
(
RSA
 *
r
);

222 
RSA_Êags
(c⁄° 
RSA
 *
r
);

224 
RSA_£t_deÁu…_mëhod
(c⁄° 
RSA_METHOD
 *
mëh
);

225 c⁄° 
RSA_METHOD
 *
RSA_gë_deÁu…_mëhod
();

226 c⁄° 
RSA_METHOD
 *
RSA_gë_mëhod
(c⁄° 
RSA
 *
rß
);

227 
RSA_£t_mëhod
(
RSA
 *
rß
, c⁄° 
RSA_METHOD
 *
mëh
);

230 c⁄° 
RSA_METHOD
 *
RSA_PKCS1_O≥nSSL
();

232 c⁄° 
RSA_METHOD
 *
RSA_nuŒ_mëhod
();

234 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
RSA
, 
RSAPublicKey
)

235 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
RSA
, 
RSAPriv©eKey
)

237 
	srß_pss_∑øms_°
 {

238 
X509_ALGOR
 *
hashAlg‹ôhm
;

239 
X509_ALGOR
 *
maskGíAlg‹ôhm
;

240 
ASN1_INTEGER
 *
ß…Lígth
;

241 
ASN1_INTEGER
 *
åaûîFõld
;

242 } 
	tRSA_PSS_PARAMS
;

244 
DECLARE_ASN1_FUNCTIONS
(
RSA_PSS_PARAMS
)

246 
	srß_ﬂï_∑øms_°
 {

247 
X509_ALGOR
 *
hashFunc
;

248 
X509_ALGOR
 *
maskGíFunc
;

249 
X509_ALGOR
 *
pSour˚Func
;

250 } 
	tRSA_OAEP_PARAMS
;

252 
DECLARE_ASN1_FUNCTIONS
(
RSA_OAEP_PARAMS
)

254 #i‚de‡
OPENSSL_NO_STDIO


255 
RSA_¥öt_Â
(
FILE
 *
Â
, c⁄° 
RSA
 *
r
, 
off£t
);

258 
RSA_¥öt
(
BIO
 *
bp
, c⁄° 
RSA
 *
r
, 
off£t
);

264 
RSA_sign
(
ty≥
, c⁄° *
m
, 
m_Àngth
,

265 *
sigªt
, *
sigÀn
, 
RSA
 *
rß
);

266 
RSA_vîify
(
ty≥
, c⁄° *
m
, 
m_Àngth
,

267 c⁄° *
sigbuf
, 
sigÀn
, 
RSA
 *
rß
);

273 
RSA_sign_ASN1_OCTET_STRING
(
ty≥
,

274 c⁄° *
m
, 
m_Àngth
,

275 *
sigªt
, *
sigÀn
,

276 
RSA
 *
rß
);

277 
RSA_vîify_ASN1_OCTET_STRING
(
ty≥
, c⁄° *
m
,

278 
m_Àngth
, *
sigbuf
,

279 
sigÀn
, 
RSA
 *
rß
);

281 
RSA_blödög_⁄
(
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

282 
RSA_blödög_off
(
RSA
 *
rß
);

283 
BN_BLINDING
 *
RSA_£tup_blödög
(
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

285 
RSA_∑ddög_add_PKCS1_ty≥_1
(*
to
, 
éí
,

286 c⁄° *
f
, 
Ê
);

287 
RSA_∑ddög_check_PKCS1_ty≥_1
(*
to
, 
éí
,

288 c⁄° *
f
, 
Ê
,

289 
rß_Àn
);

290 
RSA_∑ddög_add_PKCS1_ty≥_2
(*
to
, 
éí
,

291 c⁄° *
f
, 
Ê
);

292 
RSA_∑ddög_check_PKCS1_ty≥_2
(*
to
, 
éí
,

293 c⁄° *
f
, 
Ê
,

294 
rß_Àn
);

295 
PKCS1_MGF1
(*
mask
, 
Àn
, c⁄° *
£ed
,

296 
£edÀn
, c⁄° 
EVP_MD
 *
dg°
);

297 
RSA_∑ddög_add_PKCS1_OAEP
(*
to
, 
éí
,

298 c⁄° *
f
, 
Ê
,

299 c⁄° *
p
, 
∂
);

300 
RSA_∑ddög_check_PKCS1_OAEP
(*
to
, 
éí
,

301 c⁄° *
f
, 
Ê
, 
rß_Àn
,

302 c⁄° *
p
, 
∂
);

303 
RSA_∑ddög_add_PKCS1_OAEP_mgf1
(*
to
, 
éí
,

304 c⁄° *
‰om
, 
Êí
,

305 c⁄° *
∑øm
, 
∂í
,

306 c⁄° 
EVP_MD
 *
md
, c⁄° EVP_MD *
mgf1md
);

307 
RSA_∑ddög_check_PKCS1_OAEP_mgf1
(*
to
, 
éí
,

308 c⁄° *
‰om
, 
Êí
,

309 
num
, c⁄° *
∑øm
,

310 
∂í
, c⁄° 
EVP_MD
 *
md
,

311 c⁄° 
EVP_MD
 *
mgf1md
);

312 
RSA_∑ddög_add_SSLv23
(*
to
, 
éí
,

313 c⁄° *
f
, 
Ê
);

314 
RSA_∑ddög_check_SSLv23
(*
to
, 
éí
,

315 c⁄° *
f
, 
Ê
, 
rß_Àn
);

316 
RSA_∑ddög_add_n⁄e
(*
to
, 
éí
, c⁄° *
f
,

317 
Ê
);

318 
RSA_∑ddög_check_n⁄e
(*
to
, 
éí
,

319 c⁄° *
f
, 
Ê
, 
rß_Àn
);

320 
RSA_∑ddög_add_X931
(*
to
, 
éí
, c⁄° *
f
,

321 
Ê
);

322 
RSA_∑ddög_check_X931
(*
to
, 
éí
,

323 c⁄° *
f
, 
Ê
, 
rß_Àn
);

324 
RSA_X931_hash_id
(
nid
);

326 
RSA_vîify_PKCS1_PSS
(
RSA
 *
rß
, c⁄° *
mHash
,

327 c⁄° 
EVP_MD
 *
Hash
, c⁄° *
EM
,

328 
sLí
);

329 
RSA_∑ddög_add_PKCS1_PSS
(
RSA
 *
rß
, *
EM
,

330 c⁄° *
mHash
, c⁄° 
EVP_MD
 *
Hash
,

331 
sLí
);

333 
RSA_vîify_PKCS1_PSS_mgf1
(
RSA
 *
rß
, c⁄° *
mHash
,

334 c⁄° 
EVP_MD
 *
Hash
, c⁄° EVP_MD *
mgf1Hash
,

335 c⁄° *
EM
, 
sLí
);

337 
RSA_∑ddög_add_PKCS1_PSS_mgf1
(
RSA
 *
rß
, *
EM
,

338 c⁄° *
mHash
,

339 c⁄° 
EVP_MD
 *
Hash
, c⁄° EVP_MD *
mgf1Hash
,

340 
sLí
);

342 
	#RSA_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

343 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_RSA
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

344 
RSA_£t_ex_d©a
(
RSA
 *
r
, 
idx
, *
¨g
);

345 *
RSA_gë_ex_d©a
(c⁄° 
RSA
 *
r
, 
idx
);

347 
RSA
 *
RSAPublicKey_dup
(RSA *
rß
);

348 
RSA
 *
RSAPriv©eKey_dup
(RSA *
rß
);

357 
	#RSA_FLAG_FIPS_METHOD
 0x0400

	)

365 
	#RSA_FLAG_NON_FIPS_ALLOW
 0x0400

	)

370 
	#RSA_FLAG_CHECKED
 0x0800

	)

372 
RSA_METHOD
 *
RSA_mëh_√w
(c⁄° *
«me
, 
Êags
);

373 
RSA_mëh_‰ì
(
RSA_METHOD
 *
mëh
);

374 
RSA_METHOD
 *
RSA_mëh_dup
(c⁄° RSA_METHOD *
mëh
);

375 c⁄° *
RSA_mëh_gë0_«me
(c⁄° 
RSA_METHOD
 *
mëh
);

376 
RSA_mëh_£t1_«me
(
RSA_METHOD
 *
mëh
, c⁄° *
«me
);

377 
RSA_mëh_gë_Êags
(
RSA_METHOD
 *
mëh
);

378 
RSA_mëh_£t_Êags
(
RSA_METHOD
 *
mëh
, 
Êags
);

379 *
RSA_mëh_gë0_≠p_d©a
(c⁄° 
RSA_METHOD
 *
mëh
);

380 
RSA_mëh_£t0_≠p_d©a
(
RSA_METHOD
 *
mëh
, *
≠p_d©a
);

381 (*
RSA_mëh_gë_pub_íc
(c⁄° 
RSA_METHOD
 *
mëh
))

382 (
Êí
, c⁄° *
‰om
,

383 *
to
, 
RSA
 *
rß
, 
∑ddög
);

384 
RSA_mëh_£t_pub_íc
(
RSA_METHOD
 *
rß
,

385 (*
pub_íc
Ë(
Êí
, c⁄° *
‰om
,

386 *
to
, 
RSA
 *
rß
,

387 
∑ddög
));

388 (*
RSA_mëh_gë_pub_dec
(c⁄° 
RSA_METHOD
 *
mëh
))

389 (
Êí
, c⁄° *
‰om
,

390 *
to
, 
RSA
 *
rß
, 
∑ddög
);

391 
RSA_mëh_£t_pub_dec
(
RSA_METHOD
 *
rß
,

392 (*
pub_dec
Ë(
Êí
, c⁄° *
‰om
,

393 *
to
, 
RSA
 *
rß
,

394 
∑ddög
));

395 (*
RSA_mëh_gë_¥iv_íc
(c⁄° 
RSA_METHOD
 *
mëh
))

396 (
Êí
, c⁄° *
‰om
,

397 *
to
, 
RSA
 *
rß
, 
∑ddög
);

398 
RSA_mëh_£t_¥iv_íc
(
RSA_METHOD
 *
rß
,

399 (*
¥iv_íc
Ë(
Êí
, c⁄° *
‰om
,

400 *
to
, 
RSA
 *
rß
,

401 
∑ddög
));

402 (*
RSA_mëh_gë_¥iv_dec
(c⁄° 
RSA_METHOD
 *
mëh
))

403 (
Êí
, c⁄° *
‰om
,

404 *
to
, 
RSA
 *
rß
, 
∑ddög
);

405 
RSA_mëh_£t_¥iv_dec
(
RSA_METHOD
 *
rß
,

406 (*
¥iv_dec
Ë(
Êí
, c⁄° *
‰om
,

407 *
to
, 
RSA
 *
rß
,

408 
∑ddög
));

409 (*
RSA_mëh_gë_mod_exp
(c⁄° 
RSA_METHOD
 *
mëh
))

410 (
BIGNUM
 *
r0
, c⁄° BIGNUM *
I
, 
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

411 
RSA_mëh_£t_mod_exp
(
RSA_METHOD
 *
rß
,

412 (*
mod_exp
Ë(
BIGNUM
 *
r0
, c⁄° BIGNUM *
I
, 
RSA
 *
rß
,

413 
BN_CTX
 *
˘x
));

414 (*
RSA_mëh_gë_bn_mod_exp
(c⁄° 
RSA_METHOD
 *
mëh
))

415 (
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

416 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

417 
RSA_mëh_£t_bn_mod_exp
(
RSA_METHOD
 *
rß
,

418 (*
bn_mod_exp
Ë(
BIGNUM
 *
r
,

419 c⁄° 
BIGNUM
 *
a
,

420 c⁄° 
BIGNUM
 *
p
,

421 c⁄° 
BIGNUM
 *
m
,

422 
BN_CTX
 *
˘x
,

423 
BN_MONT_CTX
 *
m_˘x
));

424 (*
RSA_mëh_gë_öô
(c⁄° 
RSA_METHOD
 *
mëh
)Ë(
RSA
 *
rß
);

425 
RSA_mëh_£t_öô
(
RSA_METHOD
 *
rß
, (*
öô
Ë(
RSA
 *rsa));

426 (*
RSA_mëh_gë_föish
(c⁄° 
RSA_METHOD
 *
mëh
)Ë(
RSA
 *
rß
);

427 
RSA_mëh_£t_föish
(
RSA_METHOD
 *
rß
, (*
föish
Ë(
RSA
 *rsa));

428 (*
RSA_mëh_gë_sign
(c⁄° 
RSA_METHOD
 *
mëh
))

429 (
ty≥
,

430 c⁄° *
m
, 
m_Àngth
,

431 *
sigªt
, *
sigÀn
,

432 c⁄° 
RSA
 *
rß
);

433 
RSA_mëh_£t_sign
(
RSA_METHOD
 *
rß
,

434 (*
sign
Ë(
ty≥
, c⁄° *
m
,

435 
m_Àngth
,

436 *
sigªt
, *
sigÀn
,

437 c⁄° 
RSA
 *
rß
));

438 (*
RSA_mëh_gë_vîify
(c⁄° 
RSA_METHOD
 *
mëh
))

439 (
dty≥
, c⁄° *
m
,

440 
m_Àngth
, c⁄° *
sigbuf
,

441 
sigÀn
, c⁄° 
RSA
 *
rß
);

442 
RSA_mëh_£t_vîify
(
RSA_METHOD
 *
rß
,

443 (*
vîify
Ë(
dty≥
, c⁄° *
m
,

444 
m_Àngth
,

445 c⁄° *
sigbuf
,

446 
sigÀn
, c⁄° 
RSA
 *
rß
));

447 (*
RSA_mëh_gë_keygí
(c⁄° 
RSA_METHOD
 *
mëh
))

448 (
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

449 
RSA_mëh_£t_keygí
(
RSA_METHOD
 *
rß
,

450 (*
keygí
Ë(
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
,

451 
BN_GENCB
 *
cb
));

459 
ERR_lﬂd_RSA_°rögs
();

464 
	#RSA_F_CHECK_PADDING_MD
 140

	)

465 
	#RSA_F_INT_RSA_VERIFY
 145

	)

466 
	#RSA_F_OLD_RSA_PRIV_DECODE
 147

	)

467 
	#RSA_F_PKEY_RSA_CTRL
 143

	)

468 
	#RSA_F_PKEY_RSA_CTRL_STR
 144

	)

469 
	#RSA_F_PKEY_RSA_SIGN
 142

	)

470 
	#RSA_F_PKEY_RSA_VERIFYRECOVER
 141

	)

471 
	#RSA_F_RSA_ALGOR_TO_MD
 156

	)

472 
	#RSA_F_RSA_BUILTIN_KEYGEN
 129

	)

473 
	#RSA_F_RSA_CHECK_KEY
 123

	)

474 
	#RSA_F_RSA_CHECK_KEY_EX
 160

	)

475 
	#RSA_F_RSA_CMS_DECRYPT
 159

	)

476 
	#RSA_F_RSA_ITEM_VERIFY
 148

	)

477 
	#RSA_F_RSA_METH_DUP
 161

	)

478 
	#RSA_F_RSA_METH_NEW
 162

	)

479 
	#RSA_F_RSA_METH_SET1_NAME
 163

	)

480 
	#RSA_F_RSA_MGF1_TO_MD
 157

	)

481 
	#RSA_F_RSA_NEW_METHOD
 106

	)

482 
	#RSA_F_RSA_NULL
 124

	)

483 
	#RSA_F_RSA_NULL_PRIVATE_DECRYPT
 132

	)

484 
	#RSA_F_RSA_NULL_PRIVATE_ENCRYPT
 133

	)

485 
	#RSA_F_RSA_NULL_PUBLIC_DECRYPT
 134

	)

486 
	#RSA_F_RSA_NULL_PUBLIC_ENCRYPT
 135

	)

487 
	#RSA_F_RSA_OSSL_PRIVATE_DECRYPT
 101

	)

488 
	#RSA_F_RSA_OSSL_PRIVATE_ENCRYPT
 102

	)

489 
	#RSA_F_RSA_OSSL_PUBLIC_DECRYPT
 103

	)

490 
	#RSA_F_RSA_OSSL_PUBLIC_ENCRYPT
 104

	)

491 
	#RSA_F_RSA_PADDING_ADD_NONE
 107

	)

492 
	#RSA_F_RSA_PADDING_ADD_PKCS1_OAEP
 121

	)

493 
	#RSA_F_RSA_PADDING_ADD_PKCS1_OAEP_MGF1
 154

	)

494 
	#RSA_F_RSA_PADDING_ADD_PKCS1_PSS
 125

	)

495 
	#RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1
 152

	)

496 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1
 108

	)

497 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2
 109

	)

498 
	#RSA_F_RSA_PADDING_ADD_SSLV23
 110

	)

499 
	#RSA_F_RSA_PADDING_ADD_X931
 127

	)

500 
	#RSA_F_RSA_PADDING_CHECK_NONE
 111

	)

501 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP
 122

	)

502 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP_MGF1
 153

	)

503 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1
 112

	)

504 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2
 113

	)

505 
	#RSA_F_RSA_PADDING_CHECK_SSLV23
 114

	)

506 
	#RSA_F_RSA_PADDING_CHECK_X931
 128

	)

507 
	#RSA_F_RSA_PRINT
 115

	)

508 
	#RSA_F_RSA_PRINT_FP
 116

	)

509 
	#RSA_F_RSA_PRIV_ENCODE
 138

	)

510 
	#RSA_F_RSA_PSS_TO_CTX
 155

	)

511 
	#RSA_F_RSA_PUB_DECODE
 139

	)

512 
	#RSA_F_RSA_SETUP_BLINDING
 136

	)

513 
	#RSA_F_RSA_SIGN
 117

	)

514 
	#RSA_F_RSA_SIGN_ASN1_OCTET_STRING
 118

	)

515 
	#RSA_F_RSA_VERIFY
 119

	)

516 
	#RSA_F_RSA_VERIFY_ASN1_OCTET_STRING
 120

	)

517 
	#RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1
 126

	)

520 
	#RSA_R_ALGORITHM_MISMATCH
 100

	)

521 
	#RSA_R_BAD_E_VALUE
 101

	)

522 
	#RSA_R_BAD_FIXED_HEADER_DECRYPT
 102

	)

523 
	#RSA_R_BAD_PAD_BYTE_COUNT
 103

	)

524 
	#RSA_R_BAD_SIGNATURE
 104

	)

525 
	#RSA_R_BLOCK_TYPE_IS_NOT_01
 106

	)

526 
	#RSA_R_BLOCK_TYPE_IS_NOT_02
 107

	)

527 
	#RSA_R_DATA_GREATER_THAN_MOD_LEN
 108

	)

528 
	#RSA_R_DATA_TOO_LARGE
 109

	)

529 
	#RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 110

	)

530 
	#RSA_R_DATA_TOO_LARGE_FOR_MODULUS
 132

	)

531 
	#RSA_R_DATA_TOO_SMALL
 111

	)

532 
	#RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE
 122

	)

533 
	#RSA_R_DIGEST_DOES_NOT_MATCH
 158

	)

534 
	#RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY
 112

	)

535 
	#RSA_R_DMP1_NOT_CONGRUENT_TO_D
 124

	)

536 
	#RSA_R_DMQ1_NOT_CONGRUENT_TO_D
 125

	)

537 
	#RSA_R_D_E_NOT_CONGRUENT_TO_1
 123

	)

538 
	#RSA_R_FIRST_OCTET_INVALID
 133

	)

539 
	#RSA_R_ILLEGAL_OR_UNSUPPORTED_PADDING_MODE
 144

	)

540 
	#RSA_R_INVALID_DIGEST
 157

	)

541 
	#RSA_R_INVALID_DIGEST_LENGTH
 143

	)

542 
	#RSA_R_INVALID_HEADER
 137

	)

543 
	#RSA_R_INVALID_LABEL
 160

	)

544 
	#RSA_R_INVALID_MESSAGE_LENGTH
 131

	)

545 
	#RSA_R_INVALID_MGF1_MD
 156

	)

546 
	#RSA_R_INVALID_OAEP_PARAMETERS
 161

	)

547 
	#RSA_R_INVALID_PADDING
 138

	)

548 
	#RSA_R_INVALID_PADDING_MODE
 141

	)

549 
	#RSA_R_INVALID_PSS_PARAMETERS
 149

	)

550 
	#RSA_R_INVALID_PSS_SALTLEN
 146

	)

551 
	#RSA_R_INVALID_SALT_LENGTH
 150

	)

552 
	#RSA_R_INVALID_TRAILER
 139

	)

553 
	#RSA_R_INVALID_X931_DIGEST
 142

	)

554 
	#RSA_R_IQMP_NOT_INVERSE_OF_Q
 126

	)

555 
	#RSA_R_KEY_SIZE_TOO_SMALL
 120

	)

556 
	#RSA_R_LAST_OCTET_INVALID
 134

	)

557 
	#RSA_R_MODULUS_TOO_LARGE
 105

	)

558 
	#RSA_R_NO_PUBLIC_EXPONENT
 140

	)

559 
	#RSA_R_NULL_BEFORE_BLOCK_MISSING
 113

	)

560 
	#RSA_R_N_DOES_NOT_EQUAL_P_Q
 127

	)

561 
	#RSA_R_OAEP_DECODING_ERROR
 121

	)

562 
	#RSA_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE
 148

	)

563 
	#RSA_R_PADDING_CHECK_FAILED
 114

	)

564 
	#RSA_R_PKCS_DECODING_ERROR
 159

	)

565 
	#RSA_R_P_NOT_PRIME
 128

	)

566 
	#RSA_R_Q_NOT_PRIME
 129

	)

567 
	#RSA_R_RSA_OPERATIONS_NOT_SUPPORTED
 130

	)

568 
	#RSA_R_SLEN_CHECK_FAILED
 136

	)

569 
	#RSA_R_SLEN_RECOVERY_FAILED
 135

	)

570 
	#RSA_R_SSLV3_ROLLBACK_ATTACK
 115

	)

571 
	#RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 116

	)

572 
	#RSA_R_UNKNOWN_ALGORITHM_TYPE
 117

	)

573 
	#RSA_R_UNKNOWN_DIGEST
 166

	)

574 
	#RSA_R_UNKNOWN_MASK_DIGEST
 151

	)

575 
	#RSA_R_UNKNOWN_PADDING_TYPE
 118

	)

576 
	#RSA_R_UNSUPPORTED_ENCRYPTION_TYPE
 162

	)

577 
	#RSA_R_UNSUPPORTED_LABEL_SOURCE
 163

	)

578 
	#RSA_R_UNSUPPORTED_MASK_ALGORITHM
 153

	)

579 
	#RSA_R_UNSUPPORTED_MASK_PARAMETER
 154

	)

580 
	#RSA_R_UNSUPPORTED_SIGNATURE_TYPE
 155

	)

581 
	#RSA_R_VALUE_MISSING
 147

	)

582 
	#RSA_R_WRONG_SIGNATURE_LENGTH
 119

	)

584 #ifde‡ 
__˝lu•lus


	@safestack.h

10 #i‚de‡
HEADER_SAFESTACK_H


11 
	#HEADER_SAFESTACK_H


	)

13 
	~<›ís¶/°ack.h
>

14 
	~<›ís¶/e_os2.h
>

16 #ifde‡
__˝lu•lus


20 
	#STACK_OF
(
ty≥
Ë
°ack_°_
##
	)
type

22 
	#SKM_DEFINE_STACK_OF
(
t1
, 
t2
, 
t3
) \

23 
	`STACK_OF
(
t1
); \

24 (*
	tsk_
##
	tt1
##
	t_compfunc
)(c⁄° 
	tt3
 * c⁄° *
	ta
, c⁄°Å3 *c⁄° *
	tb
); \

25 (*
	tsk_
##
	tt1
##
	t_‰ìfunc
)(
	tt3
 *
	ta
); \

26 
t3
 * (*
	tsk_
##
	tt1
##
	t_c›yfunc
)(c⁄° 
	tt3
 *
	ta
); \

27 
os¶_ölöe
 
sk_
##
t1
##
	`_num
(c⁄° 
	`STACK_OF
—1Ë*
sk
) \

29  
	`OPENSSL_sk_num
((c⁄° 
OPENSSL_STACK
 *)
sk
); \

31 
os¶_ölöe
 
t2
 *
sk_
##
t1
##
	`_vÆue
(c⁄° 
	`STACK_OF
—1Ë*
sk
, 
idx
) \

33  (
t2
 *)
	`OPENSSL_sk_vÆue
((c⁄° 
OPENSSL_STACK
 *)
sk
, 
idx
); \

35 
os¶_ölöe
 
	`STACK_OF
(
t1
Ë*
sk_
##t1##
	`_√w
(sk_##t1##
_compfunc
 
com∑ª
) \

37  (
	`STACK_OF
(
t1
Ë*)
	`OPENSSL_sk_√w
((
OPENSSL_sk_compfunc
)
com∑ª
); \

39 
os¶_ölöe
 
	`STACK_OF
(
t1
Ë*
sk_
##t1##
	`_√w_nuŒ
() \

41  (
	`STACK_OF
(
t1
Ë*)
	`OPENSSL_sk_√w_nuŒ
(); \

43 
os¶_ölöe
 
sk_
##
t1
##
	`_‰ì
(
	`STACK_OF
—1Ë*
sk
) \

45 
	`OPENSSL_sk_‰ì
((
OPENSSL_STACK
 *)
sk
); \

47 
os¶_ölöe
 
sk_
##
t1
##
	`_zîo
(
	`STACK_OF
—1Ë*
sk
) \

49 
	`OPENSSL_sk_zîo
((
OPENSSL_STACK
 *)
sk
); \

51 
os¶_ölöe
 
t2
 *
sk_
##
t1
##
	`_dñëe
(
	`STACK_OF
—1Ë*
sk
, 
i
) \

53  (
t2
 *)
	`OPENSSL_sk_dñëe
((
OPENSSL_STACK
 *)
sk
, 
i
); \

55 
os¶_ölöe
 
t2
 *
sk_
##
t1
##
	`_dñëe_±r
(
	`STACK_OF
—1Ë*
sk
,Å2 *
±r
) \

57  (
t2
 *)
	`OPENSSL_sk_dñëe_±r
((
OPENSSL_STACK
 *)
sk
, \

58 (c⁄° *)
±r
); \

60 
os¶_ölöe
 
sk_
##
t1
##
	`_push
(
	`STACK_OF
—1Ë*
sk
, 
t2
 *
±r
) \

62  
	`OPENSSL_sk_push
((
OPENSSL_STACK
 *)
sk
, (*)
±r
); \

64 
os¶_ölöe
 
sk_
##
t1
##
	`_unshi·
(
	`STACK_OF
—1Ë*
sk
, 
t2
 *
±r
) \

66  
	`OPENSSL_sk_unshi·
((
OPENSSL_STACK
 *)
sk
, (*)
±r
); \

68 
os¶_ölöe
 
t2
 *
sk_
##
t1
##
	`_p›
(
	`STACK_OF
—1Ë*
sk
) \

70  (
t2
 *)
	`OPENSSL_sk_p›
((
OPENSSL_STACK
 *)
sk
); \

72 
os¶_ölöe
 
t2
 *
sk_
##
t1
##
	`_shi·
(
	`STACK_OF
—1Ë*
sk
) \

74  (
t2
 *)
	`OPENSSL_sk_shi·
((
OPENSSL_STACK
 *)
sk
); \

76 
os¶_ölöe
 
sk_
##
t1
##
	`_p›_‰ì
(
	`STACK_OF
—1Ë*
sk
, sk_##t1##
_‰ìfunc
 
‰ìfunc
) \

78 
	`OPENSSL_sk_p›_‰ì
((
OPENSSL_STACK
 *)
sk
, (
OPENSSL_sk_‰ìfunc
)
‰ìfunc
); \

80 
os¶_ölöe
 
sk_
##
t1
##
	`_ö£π
(
	`STACK_OF
—1Ë*
sk
, 
t2
 *
±r
, 
idx
) \

82  
	`OPENSSL_sk_ö£π
((
OPENSSL_STACK
 *)
sk
, (*)
±r
, 
idx
); \

84 
os¶_ölöe
 
t2
 *
sk_
##
t1
##
	`_£t
(
	`STACK_OF
—1Ë*
sk
, 
idx
,Å2 *
±r
) \

86  (
t2
 *)
	`OPENSSL_sk_£t
((
OPENSSL_STACK
 *)
sk
, 
idx
, (*)
±r
); \

88 
os¶_ölöe
 
sk_
##
t1
##
	`_föd
(
	`STACK_OF
—1Ë*
sk
, 
t2
 *
±r
) \

90  
	`OPENSSL_sk_föd
((
OPENSSL_STACK
 *)
sk
, (c⁄° *)
±r
); \

92 
os¶_ölöe
 
sk_
##
t1
##
	`_föd_ex
(
	`STACK_OF
—1Ë*
sk
, 
t2
 *
±r
) \

94  
	`OPENSSL_sk_föd_ex
((
OPENSSL_STACK
 *)
sk
, (c⁄° *)
±r
); \

96 
os¶_ölöe
 
sk_
##
t1
##
	`_s‹t
(
	`STACK_OF
—1Ë*
sk
) \

98 
	`OPENSSL_sk_s‹t
((
OPENSSL_STACK
 *)
sk
); \

100 
os¶_ölöe
 
sk_
##
t1
##
	`_is_s‹ãd
(c⁄° 
	`STACK_OF
—1Ë*
sk
) \

102  
	`OPENSSL_sk_is_s‹ãd
((c⁄° 
OPENSSL_STACK
 *)
sk
); \

104 
os¶_ölöe
 
	`STACK_OF
(
t1
Ë* 
sk_
##t1##
	`_dup
(c⁄° STACK_OF—1Ë*
sk
) \

106  (
	`STACK_OF
(
t1
Ë*)
	`OPENSSL_sk_dup
((c⁄° 
OPENSSL_STACK
 *)
sk
); \

108 
os¶_ölöe
 
	`STACK_OF
(
t1
Ë*
sk_
##t1##
	`_dìp_c›y
(c⁄° STACK_OF—1Ë*
sk
, \

109 
sk_
##
t1
##
_c›yfunc
 
c›yfunc
, \

110 
sk_
##
t1
##
_‰ìfunc
 
‰ìfunc
) \

112  (
	`STACK_OF
(
t1
Ë*)
	`OPENSSL_sk_dìp_c›y
((
OPENSSL_STACK
 *)
sk
, \

113 (
OPENSSL_sk_c›yfunc
)
c›yfunc
, \

114 (
OPENSSL_sk_‰ìfunc
)
‰ìfunc
); \

116 
os¶_ölöe
 
sk_
##
t1
##
_compfunc
 sk_##t1##
	`_£t_cmp_func
(
	`STACK_OF
—1Ë*
sk
, sk_##t1##_compfun¯
com∑ª
) \

118  (
sk_
##
t1
##
_compfunc
)
	`OPENSSL_sk_£t_cmp_func
((
OPENSSL_STACK
 *)
sk
, (
OPENSSL_sk_compfunc
)
com∑ª
); \

119 }

	)

121 
	#DEFINE_SPECIAL_STACK_OF
(
t1
, 
t2
Ë
	`SKM_DEFINE_STACK_OF
—1,Å2,Å2)

	)

122 
	#DEFINE_STACK_OF
(
t
Ë
	`SKM_DEFINE_STACK_OF
—,Å,Å)

	)

123 
	#DEFINE_SPECIAL_STACK_OF_CONST
(
t1
, 
t2
) \

124 
	`SKM_DEFINE_STACK_OF
(
t1
, c⁄° 
t2
,Å2)

	)

125 
	#DEFINE_STACK_OF_CONST
(
t
Ë
	`SKM_DEFINE_STACK_OF
—, c⁄°Å,Å)

	)

141 *
	tOPENSSL_STRING
;

142 c⁄° *
	tOPENSSL_CSTRING
;

151 
DEFINE_SPECIAL_STACK_OF
(
OPENSSL_STRING
, )

152 
DEFINE_SPECIAL_STACK_OF_CONST
(
OPENSSL_CSTRING
, )

158 *
	tOPENSSL_BLOCK
;

159 
DEFINE_SPECIAL_STACK_OF
(
OPENSSL_BLOCK
, )

161 #ifde‡ 
__˝lu•lus


	@seed.h

35 #i‚de‡
HEADER_SEED_H


36 
	#HEADER_SEED_H


	)

38 
	~<›ís¶/›ís¶c⁄f.h
>

40 #i‚de‡
OPENSSL_NO_SEED


41 
	~<›ís¶/e_os2.h
>

42 
	~<›ís¶/¸y±o.h
>

44 #ifde‡ 
__˝lu•lus


49 #ifde‡
AES_LONG


50 #i‚de‡
SEED_LONG


51 
	#SEED_LONG
 1

	)

55 #i‡!
deföed
(
NO_SYS_TYPES_H
)

56 
	~<sys/ty≥s.h
>

59 
	#SEED_BLOCK_SIZE
 16

	)

60 
	#SEED_KEY_LENGTH
 16

	)

62 
	s£ed_key_°
 {

63 #ifde‡
SEED_LONG


64 
d©a
[32];

66 
d©a
[32];

68 } 
	tSEED_KEY_SCHEDULE
;

70 
SEED_£t_key
(c⁄° 
øwkey
[
SEED_KEY_LENGTH
],

71 
SEED_KEY_SCHEDULE
 *
ks
);

73 
SEED_í¸y±
(c⁄° 
s
[
SEED_BLOCK_SIZE
],

74 
d
[
SEED_BLOCK_SIZE
],

75 c⁄° 
SEED_KEY_SCHEDULE
 *
ks
);

76 
SEED_de¸y±
(c⁄° 
s
[
SEED_BLOCK_SIZE
],

77 
d
[
SEED_BLOCK_SIZE
],

78 c⁄° 
SEED_KEY_SCHEDULE
 *
ks
);

80 
SEED_ecb_í¸y±
(c⁄° *
ö
, *
out
,

81 c⁄° 
SEED_KEY_SCHEDULE
 *
ks
, 
íc
);

82 
SEED_cbc_í¸y±
(c⁄° *
ö
, *
out
, 
size_t
 
Àn
,

83 c⁄° 
SEED_KEY_SCHEDULE
 *
ks
,

84 
ivec
[
SEED_BLOCK_SIZE
], 
íc
);

85 
SEED_cfb128_í¸y±
(c⁄° *
ö
, *
out
,

86 
size_t
 
Àn
, c⁄° 
SEED_KEY_SCHEDULE
 *
ks
,

87 
ivec
[
SEED_BLOCK_SIZE
], *
num
,

88 
íc
);

89 
SEED_ofb128_í¸y±
(c⁄° *
ö
, *
out
,

90 
size_t
 
Àn
, c⁄° 
SEED_KEY_SCHEDULE
 *
ks
,

91 
ivec
[
SEED_BLOCK_SIZE
], *
num
);

93 #ifde‡ 
__˝lu•lus


	@sha.h

10 #i‚de‡
HEADER_SHA_H


11 
	#HEADER_SHA_H


	)

13 
	~<›ís¶/e_os2.h
>

14 
	~<°ddef.h
>

16 #ifde‡ 
__˝lu•lus


25 
	#SHA_LONG
 

	)

27 
	#SHA_LBLOCK
 16

	)

28 
	#SHA_CBLOCK
 (
SHA_LBLOCK
*4)

	)

31 
	#SHA_LAST_BLOCK
 (
SHA_CBLOCK
-8)

	)

32 
	#SHA_DIGEST_LENGTH
 20

	)

34 
	sSHA°©e_°
 {

35 
SHA_LONG
 
h0
, 
h1
, 
h2
, 
h3
, 
h4
;

36 
SHA_LONG
 
Nl
, 
Nh
;

37 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

38 
num
;

39 } 
	tSHA_CTX
;

41 
SHA1_Inô
(
SHA_CTX
 *
c
);

42 
SHA1_Upd©e
(
SHA_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

43 
SHA1_FöÆ
(*
md
, 
SHA_CTX
 *
c
);

44 *
SHA1
(c⁄° *
d
, 
size_t
 
n
, *
md
);

45 
SHA1_Tønsf‹m
(
SHA_CTX
 *
c
, c⁄° *
d©a
);

47 
	#SHA256_CBLOCK
 (
SHA_LBLOCK
*4)

	)

51 
	sSHA256°©e_°
 {

52 
SHA_LONG
 
h
[8];

53 
SHA_LONG
 
Nl
, 
Nh
;

54 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

55 
num
, 
md_Àn
;

56 } 
	tSHA256_CTX
;

58 
SHA224_Inô
(
SHA256_CTX
 *
c
);

59 
SHA224_Upd©e
(
SHA256_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

60 
SHA224_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

61 *
SHA224
(c⁄° *
d
, 
size_t
 
n
, *
md
);

62 
SHA256_Inô
(
SHA256_CTX
 *
c
);

63 
SHA256_Upd©e
(
SHA256_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

64 
SHA256_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

65 *
SHA256
(c⁄° *
d
, 
size_t
 
n
, *
md
);

66 
SHA256_Tønsf‹m
(
SHA256_CTX
 *
c
, c⁄° *
d©a
);

68 
	#SHA224_DIGEST_LENGTH
 28

	)

69 
	#SHA256_DIGEST_LENGTH
 32

	)

70 
	#SHA384_DIGEST_LENGTH
 48

	)

71 
	#SHA512_DIGEST_LENGTH
 64

	)

83 
	#SHA512_CBLOCK
 (
SHA_LBLOCK
*8)

	)

84 #i‡(
deföed
(
_WIN32
Ë|| deföed(
_WIN64
)Ë&& !deföed(
__MINGW32__
)

85 
	#SHA_LONG64
 
__öt64


	)

86 
	#U64
(
C
ËC##
UI64


	)

87 #ñi‡
deföed
(
__¨ch64__
)

88 
	#SHA_LONG64
 

	)

89 
	#U64
(
C
ËC##
UL


	)

91 
	#SHA_LONG64
 

	)

92 
	#U64
(
C
ËC##
ULL


	)

95 
	sSHA512°©e_°
 {

96 
SHA_LONG64
 
h
[8];

97 
SHA_LONG64
 
Nl
, 
Nh
;

99 
SHA_LONG64
 
d
[
SHA_LBLOCK
];

100 
p
[
SHA512_CBLOCK
];

101 } 
u
;

102 
num
, 
md_Àn
;

103 } 
	tSHA512_CTX
;

105 
SHA384_Inô
(
SHA512_CTX
 *
c
);

106 
SHA384_Upd©e
(
SHA512_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

107 
SHA384_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

108 *
SHA384
(c⁄° *
d
, 
size_t
 
n
, *
md
);

109 
SHA512_Inô
(
SHA512_CTX
 *
c
);

110 
SHA512_Upd©e
(
SHA512_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

111 
SHA512_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

112 *
SHA512
(c⁄° *
d
, 
size_t
 
n
, *
md
);

113 
SHA512_Tønsf‹m
(
SHA512_CTX
 *
c
, c⁄° *
d©a
);

115 #ifde‡ 
__˝lu•lus


	@srp.h

10 #i‚de‡
HEADER_SRP_H


11 
	#HEADER_SRP_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #i‚de‡
OPENSSL_NO_SRP


16 
	~<°dio.h
>

17 
	~<°rög.h
>

18 
	~<›ís¶/ß„°ack.h
>

19 
	~<›ís¶/bn.h
>

20 
	~<›ís¶/¸y±o.h
>

22 #ifde‡ 
__˝lu•lus


26 
	sSRP_gN_ˇche_°
 {

27 *
b64_bn
;

28 
BIGNUM
 *
bn
;

29 } 
	tSRP_gN_ˇche
;

32 
DEFINE_STACK_OF
(
SRP_gN_ˇche
)

34 
	sSRP_u£r_pwd_°
 {

36 *
id
;

37 
BIGNUM
 *
s
;

38 
BIGNUM
 *
v
;

40 c⁄° 
BIGNUM
 *
g
;

41 c⁄° 
BIGNUM
 *
N
;

43 *
öfo
;

44 } 
	tSRP_u£r_pwd
;

46 
SRP_u£r_pwd_‰ì
(
SRP_u£r_pwd
 *
u£r_pwd
);

48 
DEFINE_STACK_OF
(
SRP_u£r_pwd
)

50 
	sSRP_VBASE_°
 {

51 
STACK_OF
(
SRP_u£r_pwd
Ë*
u£rs_pwd
;

52 
STACK_OF
(
SRP_gN_ˇche
Ë*
gN_ˇche
;

54 *
£ed_key
;

55 c⁄° 
BIGNUM
 *
deÁu…_g
;

56 c⁄° 
BIGNUM
 *
deÁu…_N
;

57 } 
	tSRP_VBASE
;

62 
	sSRP_gN_°
 {

63 *
id
;

64 c⁄° 
BIGNUM
 *
g
;

65 c⁄° 
BIGNUM
 *
N
;

66 } 
	tSRP_gN
;

68 
DEFINE_STACK_OF
(
SRP_gN
)

70 
SRP_VBASE
 *
SRP_VBASE_√w
(*
£ed_key
);

71 
SRP_VBASE_‰ì
(
SRP_VBASE
 *
vb
);

72 
SRP_VBASE_öô
(
SRP_VBASE
 *
vb
, *
vîifõr_fûe
);

75 
DEPRECATEDIN_1_1_0
(
SRP_u£r_pwd
 *
SRP_VBASE_gë_by_u£r
(
SRP_VBASE
 *
vb
, *
u£∫ame
))

77 
SRP_u£r_pwd
 *
SRP_VBASE_gë1_by_u£r
(
SRP_VBASE
 *
vb
, *
u£∫ame
);

79 *
SRP_¸óã_vîifõr
(c⁄° *
u£r
, c⁄° *
∑ss
, **
ß…
,

80 **
vîifõr
, c⁄° *
N
, c⁄° *
g
);

81 
SRP_¸óã_vîifõr_BN
(c⁄° *
u£r
, c⁄° *
∑ss
, 
BIGNUM
 **
ß…
,

82 
BIGNUM
 **
vîifõr
, c⁄° BIGNUM *
N
,

83 c⁄° 
BIGNUM
 *
g
);

85 
	#SRP_NO_ERROR
 0

	)

86 
	#SRP_ERR_VBASE_INCOMPLETE_FILE
 1

	)

87 
	#SRP_ERR_VBASE_BN_LIB
 2

	)

88 
	#SRP_ERR_OPEN_FILE
 3

	)

89 
	#SRP_ERR_MEMORY
 4

	)

91 
	#DB_§±y≥
 0

	)

92 
	#DB_§pvîifõr
 1

	)

93 
	#DB_§pß…
 2

	)

94 
	#DB_§pid
 3

	)

95 
	#DB_§pgN
 4

	)

96 
	#DB_§pöfo
 5

	)

97 #unde‡
DB_NUMBER


98 
	#DB_NUMBER
 6

	)

100 
	#DB_SRP_INDEX
 'I'

	)

101 
	#DB_SRP_VALID
 'V'

	)

102 
	#DB_SRP_REVOKED
 'R'

	)

103 
	#DB_SRP_MODIF
 'v'

	)

106 *
SRP_check_known_gN_∑øm
(c⁄° 
BIGNUM
 *
g
, c⁄° BIGNUM *
N
);

107 
SRP_gN
 *
SRP_gë_deÁu…_gN
(c⁄° *
id
);

110 
BIGNUM
 *
SRP_CÆc_£rvî_key
(c⁄° BIGNUM *
A
, c⁄° BIGNUM *
v
, c⁄° BIGNUM *
u
,

111 c⁄° 
BIGNUM
 *
b
, c⁄° BIGNUM *
N
);

112 
BIGNUM
 *
SRP_CÆc_B
(c⁄° BIGNUM *
b
, c⁄° BIGNUM *
N
, c⁄° BIGNUM *
g
,

113 c⁄° 
BIGNUM
 *
v
);

114 
SRP_Vîify_A_mod_N
(c⁄° 
BIGNUM
 *
A
, c⁄° BIGNUM *
N
);

115 
BIGNUM
 *
SRP_CÆc_u
(c⁄° BIGNUM *
A
, c⁄° BIGNUM *
B
, c⁄° BIGNUM *
N
);

118 
BIGNUM
 *
SRP_CÆc_x
(c⁄° BIGNUM *
s
, c⁄° *
u£r
, c⁄° *
∑ss
);

119 
BIGNUM
 *
SRP_CÆc_A
(c⁄° BIGNUM *
a
, c⁄° BIGNUM *
N
, c⁄° BIGNUM *
g
);

120 
BIGNUM
 *
SRP_CÆc_˛õ¡_key
(c⁄° BIGNUM *
N
, c⁄° BIGNUM *
B
, c⁄° BIGNUM *
g
,

121 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
u
);

122 
SRP_Vîify_B_mod_N
(c⁄° 
BIGNUM
 *
B
, c⁄° BIGNUM *
N
);

124 
	#SRP_MINIMAL_N
 1024

	)

126 #ifde‡ 
__˝lu•lus


	@srtp.h

16 #i‚de‡
HEADER_D1_SRTP_H


17 
	#HEADER_D1_SRTP_H


	)

19 
	~<›ís¶/s¶.h
>

21 #ifde‡ 
__˝lu•lus


25 
	#SRTP_AES128_CM_SHA1_80
 0x0001

	)

26 
	#SRTP_AES128_CM_SHA1_32
 0x0002

	)

27 
	#SRTP_AES128_F8_SHA1_80
 0x0003

	)

28 
	#SRTP_AES128_F8_SHA1_32
 0x0004

	)

29 
	#SRTP_NULL_SHA1_80
 0x0005

	)

30 
	#SRTP_NULL_SHA1_32
 0x0006

	)

33 
	#SRTP_AEAD_AES_128_GCM
 0x0007

	)

34 
	#SRTP_AEAD_AES_256_GCM
 0x0008

	)

36 #i‚de‡
OPENSSL_NO_SRTP


38 
__owur
 
SSL_CTX_£t_é£xt_u£_§ç
(
SSL_CTX
 *
˘x
, c⁄° *
¥ofûes
);

39 
__owur
 
SSL_£t_é£xt_u£_§ç
(
SSL
 *
˘x
, c⁄° *
¥ofûes
);

41 
__owur
 
STACK_OF
(
SRTP_PROTECTION_PROFILE
Ë*
SSL_gë_§ç_¥ofûes
(
SSL
 *
s¶
);

42 
__owur
 
SRTP_PROTECTION_PROFILE
 *
SSL_gë_£À˘ed_§ç_¥ofûe
(
SSL
 *
s
);

46 #ifde‡ 
__˝lu•lus


	@ssl.h

42 #i‚de‡
HEADER_SSL_H


43 
	#HEADER_SSL_H


	)

45 
	~<›ís¶/e_os2.h
>

46 
	~<›ís¶/›ís¶c⁄f.h
>

47 
	~<›ís¶/comp.h
>

48 
	~<›ís¶/bio.h
>

49 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

50 
	~<›ís¶/x509.h
>

51 
	~<›ís¶/¸y±o.h
>

52 
	~<›ís¶/lhash.h
>

53 
	~<›ís¶/buf„r.h
>

55 
	~<›ís¶/≥m.h
>

56 
	~<›ís¶/hmac.h
>

57 
	~<›ís¶/async.h
>

59 
	~<›ís¶/ß„°ack.h
>

60 
	~<›ís¶/symhacks.h
>

61 
	~<›ís¶/˘.h
>

63 #ifde‡ 
__˝lu•lus


72 
	#SSL_SESSION_ASN1_VERSION
 0x0001

	)

74 
	#SSL_MAX_SSL_SESSION_ID_LENGTH
 32

	)

75 
	#SSL_MAX_SID_CTX_LENGTH
 32

	)

77 
	#SSL_MIN_RSA_MODULUS_LENGTH_IN_BYTES
 (512/8)

	)

78 
	#SSL_MAX_KEY_ARG_LENGTH
 8

	)

79 
	#SSL_MAX_MASTER_KEY_LENGTH
 48

	)

82 
	#SSL_MAX_PIPELINES
 32

	)

88 
	#SSL_TXT_LOW
 "LOW"

	)

89 
	#SSL_TXT_MEDIUM
 "MEDIUM"

	)

90 
	#SSL_TXT_HIGH
 "HIGH"

	)

91 
	#SSL_TXT_FIPS
 "FIPS"

	)

93 
	#SSL_TXT_aNULL
 "aNULL"

	)

94 
	#SSL_TXT_eNULL
 "eNULL"

	)

95 
	#SSL_TXT_NULL
 "NULL"

	)

97 
	#SSL_TXT_kRSA
 "kRSA"

	)

98 
	#SSL_TXT_kDHr
 "kDHr"

	)

99 
	#SSL_TXT_kDHd
 "kDHd"

	)

100 
	#SSL_TXT_kDH
 "kDH"

	)

101 
	#SSL_TXT_kEDH
 "kEDH"

	)

102 
	#SSL_TXT_kDHE
 "kDHE"

	)

103 
	#SSL_TXT_kECDHr
 "kECDHr"

	)

104 
	#SSL_TXT_kECDHe
 "kECDHe"

	)

105 
	#SSL_TXT_kECDH
 "kECDH"

	)

106 
	#SSL_TXT_kEECDH
 "kEECDH"

	)

107 
	#SSL_TXT_kECDHE
 "kECDHE"

	)

108 
	#SSL_TXT_kPSK
 "kPSK"

	)

109 
	#SSL_TXT_kRSAPSK
 "kRSAPSK"

	)

110 
	#SSL_TXT_kECDHEPSK
 "kECDHEPSK"

	)

111 
	#SSL_TXT_kDHEPSK
 "kDHEPSK"

	)

112 
	#SSL_TXT_kGOST
 "kGOST"

	)

113 
	#SSL_TXT_kSRP
 "kSRP"

	)

115 
	#SSL_TXT_aRSA
 "aRSA"

	)

116 
	#SSL_TXT_aDSS
 "aDSS"

	)

117 
	#SSL_TXT_aDH
 "aDH"

	)

118 
	#SSL_TXT_aECDH
 "aECDH"

	)

119 
	#SSL_TXT_aECDSA
 "aECDSA"

	)

120 
	#SSL_TXT_aPSK
 "aPSK"

	)

121 
	#SSL_TXT_aGOST94
 "aGOST94"

	)

122 
	#SSL_TXT_aGOST01
 "aGOST01"

	)

123 
	#SSL_TXT_aGOST12
 "aGOST12"

	)

124 
	#SSL_TXT_aGOST
 "aGOST"

	)

125 
	#SSL_TXT_aSRP
 "aSRP"

	)

127 
	#SSL_TXT_DSS
 "DSS"

	)

128 
	#SSL_TXT_DH
 "DH"

	)

129 
	#SSL_TXT_DHE
 "DHE"

	)

130 
	#SSL_TXT_EDH
 "EDH"

	)

131 
	#SSL_TXT_ADH
 "ADH"

	)

132 
	#SSL_TXT_RSA
 "RSA"

	)

133 
	#SSL_TXT_ECDH
 "ECDH"

	)

134 
	#SSL_TXT_EECDH
 "EECDH"

	)

135 
	#SSL_TXT_ECDHE
 "ECDHE"

	)

136 
	#SSL_TXT_AECDH
 "AECDH"

	)

137 
	#SSL_TXT_ECDSA
 "ECDSA"

	)

138 
	#SSL_TXT_PSK
 "PSK"

	)

139 
	#SSL_TXT_SRP
 "SRP"

	)

141 
	#SSL_TXT_DES
 "DES"

	)

142 
	#SSL_TXT_3DES
 "3DES"

	)

143 
	#SSL_TXT_RC4
 "RC4"

	)

144 
	#SSL_TXT_RC2
 "RC2"

	)

145 
	#SSL_TXT_IDEA
 "IDEA"

	)

146 
	#SSL_TXT_SEED
 "SEED"

	)

147 
	#SSL_TXT_AES128
 "AES128"

	)

148 
	#SSL_TXT_AES256
 "AES256"

	)

149 
	#SSL_TXT_AES
 "AES"

	)

150 
	#SSL_TXT_AES_GCM
 "AESGCM"

	)

151 
	#SSL_TXT_AES_CCM
 "AESCCM"

	)

152 
	#SSL_TXT_AES_CCM_8
 "AESCCM8"

	)

153 
	#SSL_TXT_CAMELLIA128
 "CAMELLIA128"

	)

154 
	#SSL_TXT_CAMELLIA256
 "CAMELLIA256"

	)

155 
	#SSL_TXT_CAMELLIA
 "CAMELLIA"

	)

156 
	#SSL_TXT_CHACHA20
 "CHACHA20"

	)

157 
	#SSL_TXT_GOST
 "GOST89"

	)

159 
	#SSL_TXT_MD5
 "MD5"

	)

160 
	#SSL_TXT_SHA1
 "SHA1"

	)

161 
	#SSL_TXT_SHA
 "SHA"

	)

162 
	#SSL_TXT_GOST94
 "GOST94"

	)

163 
	#SSL_TXT_GOST89MAC
 "GOST89MAC"

	)

164 
	#SSL_TXT_GOST12
 "GOST12"

	)

165 
	#SSL_TXT_GOST89MAC12
 "GOST89MAC12"

	)

166 
	#SSL_TXT_SHA256
 "SHA256"

	)

167 
	#SSL_TXT_SHA384
 "SHA384"

	)

169 
	#SSL_TXT_SSLV3
 "SSLv3"

	)

170 
	#SSL_TXT_TLSV1
 "TLSv1"

	)

171 
	#SSL_TXT_TLSV1_1
 "TLSv1.1"

	)

172 
	#SSL_TXT_TLSV1_2
 "TLSv1.2"

	)

174 
	#SSL_TXT_ALL
 "ALL"

	)

190 
	#SSL_TXT_CMPALL
 "COMPLEMENTOFALL"

	)

191 
	#SSL_TXT_CMPDEF
 "COMPLEMENTOFDEFAULT"

	)

197 
	#SSL_DEFAULT_CIPHER_LIST
 "ALL:!COMPLEMENTOFDEFAULT:!eNULL"

	)

206 
	#SSL_SENT_SHUTDOWN
 1

	)

207 
	#SSL_RECEIVED_SHUTDOWN
 2

	)

209 #ifde‡
__˝lu•lus


213 #ifde‡ 
__˝lu•lus


217 
	#SSL_FILETYPE_ASN1
 
X509_FILETYPE_ASN1


	)

218 
	#SSL_FILETYPE_PEM
 
X509_FILETYPE_PEM


	)

224 
s¶_°
 *
	ts¶_¸ock_°
;

225 
és_£ssi⁄_tickë_ext_°
 
	tTLS_SESSION_TICKET_EXT
;

226 
s¶_mëhod_°
 
	tSSL_METHOD
;

227 
s¶_cùhî_°
 
	tSSL_CIPHER
;

228 
s¶_£ssi⁄_°
 
	tSSL_SESSION
;

229 
és_sigÆgs_°
 
	tTLS_SIGALGS
;

230 
s¶_c⁄f_˘x_°
 
	tSSL_CONF_CTX
;

231 
s¶_comp_°
 
	tSSL_COMP
;

233 
STACK_OF
(
SSL_CIPHER
);

234 
STACK_OF
(
SSL_COMP
);

237 
	s§ç_¥Ÿe˘i⁄_¥ofûe_°
 {

238 c⁄° *
«me
;

239 
id
;

240 } 
	tSRTP_PROTECTION_PROFILE
;

242 
DEFINE_STACK_OF
(
SRTP_PROTECTION_PROFILE
)

244 (*
és_£ssi⁄_tickë_ext_cb_‚
Ë(
	tSSL
 *
	ts
,

245 c⁄° *
	td©a
,

246 
	tÀn
, *
	t¨g
);

247 (*
és_£ssi⁄_£¸ë_cb_‚
Ë(
	tSSL
 *
	ts
, *
	t£¸ë
,

248 *
	t£¸ë_Àn
,

249 
	tSTACK_OF
(
	tSSL_CIPHER
Ë*
	t≥î_cùhîs
,

250 c⁄° 
	tSSL_CIPHER
 **
	tcùhî
, *
	t¨g
);

254 (*
cu°om_ext_add_cb
Ë(
	tSSL
 *
	ts
, 
	text_ty≥
,

255 c⁄° **
	tout
,

256 
	tsize_t
 *
	touéí
, *
	tÆ
, *
	tadd_¨g
);

258 (*
cu°om_ext_‰ì_cb
Ë(
	tSSL
 *
	ts
, 
	text_ty≥
,

259 c⁄° *
	tout
, *
	tadd_¨g
);

261 (*
cu°om_ext_∑r£_cb
Ë(
	tSSL
 *
	ts
, 
	text_ty≥
,

262 c⁄° *
	tö
,

263 
	tsize_t
 
	töÀn
, *
	tÆ
, *
	t∑r£_¨g
);

266 
	#SSL_OP_LEGACY_SERVER_CONNECT
 0x00000004U

	)

269 
	#SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG
 0x0U

	)

270 
	#SSL_OP_TLSEXT_PADDING
 0x00000010U

	)

271 
	#SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER
 0x0U

	)

272 
	#SSL_OP_SAFARI_ECDHE_ECDSA_BUG
 0x00000040U

	)

274 
	#SSL_OP_SSLEAY_080_CLIENT_DH_BUG
 0x0

	)

275 
	#SSL_OP_TLS_D5_BUG
 0x0U

	)

277 
	#SSL_OP_TLS_BLOCK_PADDING_BUG
 0x0U

	)

280 
	#SSL_OP_MSIE_SSLV2_RSA_PADDING
 0x0

	)

282 
	#SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG
 0x0

	)

284 
	#SSL_OP_MICROSOFT_SESS_ID_BUG
 0x0

	)

285 
	#SSL_OP_NETSCAPE_CHALLENGE_BUG
 0x0

	)

295 
	#SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
 0x00000800U

	)

301 
	#SSL_OP_ALL
 0x80000BFFU

	)

304 
	#SSL_OP_NO_QUERY_MTU
 0x00001000U

	)

306 
	#SSL_OP_COOKIE_EXCHANGE
 0x00002000U

	)

308 
	#SSL_OP_NO_TICKET
 0x00004000U

	)

310 
	#SSL_OP_CISCO_ANYCONNECT
 0x00008000U

	)

313 
	#SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION
 0x00010000U

	)

315 
	#SSL_OP_NO_COMPRESSION
 0x00020000U

	)

317 
	#SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION
 0x00040000U

	)

319 
	#SSL_OP_SINGLE_ECDH_USE
 0x0

	)

321 
	#SSL_OP_SINGLE_DH_USE
 0x0

	)

323 
	#SSL_OP_EPHEMERAL_RSA
 0x0

	)

327 
	#SSL_OP_CIPHER_SERVER_PREFERENCE
 0x00400000U

	)

334 
	#SSL_OP_TLS_ROLLBACK_BUG
 0x00800000U

	)

336 
	#SSL_OP_NO_SSLv2
 0x00000000U

	)

337 
	#SSL_OP_NO_SSLv3
 0x02000000U

	)

338 
	#SSL_OP_NO_TLSv1
 0x04000000U

	)

339 
	#SSL_OP_NO_TLSv1_2
 0x08000000U

	)

340 
	#SSL_OP_NO_TLSv1_1
 0x10000000U

	)

342 
	#SSL_OP_NO_DTLSv1
 0x04000000U

	)

343 
	#SSL_OP_NO_DTLSv1_2
 0x08000000U

	)

345 
	#SSL_OP_NO_SSL_MASK
 (
SSL_OP_NO_SSLv3
|\

346 
SSL_OP_NO_TLSv1
|
SSL_OP_NO_TLSv1_1
|
SSL_OP_NO_TLSv1_2
)

	)

347 
	#SSL_OP_NO_DTLS_MASK
 (
SSL_OP_NO_DTLSv1
|
SSL_OP_NO_DTLSv1_2
)

	)

351 
	#SSL_OP_PKCS1_CHECK_1
 0x0

	)

352 
	#SSL_OP_PKCS1_CHECK_2
 0x0

	)

353 
	#SSL_OP_NETSCAPE_CA_DN_BUG
 0x0

	)

354 
	#SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG
 0x0U

	)

360 
	#SSL_OP_CRYPTOPRO_TLSEXT_BUG
 0x80000000U

	)

366 
	#SSL_MODE_ENABLE_PARTIAL_WRITE
 0x00000001U

	)

373 
	#SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER
 0x00000002U

	)

377 
	#SSL_MODE_AUTO_RETRY
 0x00000004U

	)

379 
	#SSL_MODE_NO_AUTO_CHAIN
 0x00000008U

	)

385 
	#SSL_MODE_RELEASE_BUFFERS
 0x00000010U

	)

391 
	#SSL_MODE_SEND_CLIENTHELLO_TIME
 0x00000020U

	)

392 
	#SSL_MODE_SEND_SERVERHELLO_TIME
 0x00000040U

	)

401 
	#SSL_MODE_SEND_FALLBACK_SCSV
 0x00000080U

	)

405 
	#SSL_MODE_ASYNC
 0x00000100U

	)

412 
	#SSL_CERT_FLAG_TLS_STRICT
 0x00000001U

	)

415 
	#SSL_CERT_FLAG_SUITEB_128_LOS_ONLY
 0x10000

	)

417 
	#SSL_CERT_FLAG_SUITEB_192_LOS
 0x20000

	)

419 
	#SSL_CERT_FLAG_SUITEB_128_LOS
 0x30000

	)

422 
	#SSL_CERT_FLAG_BROKEN_PROTOCOL
 0x10000000

	)

426 
	#SSL_BUILD_CHAIN_FLAG_UNTRUSTED
 0x1

	)

428 
	#SSL_BUILD_CHAIN_FLAG_NO_ROOT
 0x2

	)

430 
	#SSL_BUILD_CHAIN_FLAG_CHECK
 0x4

	)

432 
	#SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR
 0x8

	)

434 
	#SSL_BUILD_CHAIN_FLAG_CLEAR_ERROR
 0x10

	)

438 
	#CERT_PKEY_VALID
 0x1

	)

440 
	#CERT_PKEY_SIGN
 0x2

	)

442 
	#CERT_PKEY_EE_SIGNATURE
 0x10

	)

444 
	#CERT_PKEY_CA_SIGNATURE
 0x20

	)

446 
	#CERT_PKEY_EE_PARAM
 0x40

	)

448 
	#CERT_PKEY_CA_PARAM
 0x80

	)

450 
	#CERT_PKEY_EXPLICIT_SIGN
 0x100

	)

452 
	#CERT_PKEY_ISSUER_NAME
 0x200

	)

454 
	#CERT_PKEY_CERT_TYPE
 0x400

	)

456 
	#CERT_PKEY_SUITEB
 0x800

	)

458 
	#SSL_CONF_FLAG_CMDLINE
 0x1

	)

459 
	#SSL_CONF_FLAG_FILE
 0x2

	)

460 
	#SSL_CONF_FLAG_CLIENT
 0x4

	)

461 
	#SSL_CONF_FLAG_SERVER
 0x8

	)

462 
	#SSL_CONF_FLAG_SHOW_ERRORS
 0x10

	)

463 
	#SSL_CONF_FLAG_CERTIFICATE
 0x20

	)

464 
	#SSL_CONF_FLAG_REQUIRE_PRIVATE
 0x40

	)

466 
	#SSL_CONF_TYPE_UNKNOWN
 0x0

	)

467 
	#SSL_CONF_TYPE_STRING
 0x1

	)

468 
	#SSL_CONF_TYPE_FILE
 0x2

	)

469 
	#SSL_CONF_TYPE_DIR
 0x3

	)

470 
	#SSL_CONF_TYPE_NONE
 0x4

	)

477 
SSL_CTX_gë_›ti⁄s
(c⁄° 
SSL_CTX
 *
˘x
);

478 
SSL_gë_›ti⁄s
(c⁄° 
SSL
* 
s
);

479 
SSL_CTX_˛ór_›ti⁄s
(
SSL_CTX
 *
˘x
, 
›
);

480 
SSL_˛ór_›ti⁄s
(
SSL
 *
s
, 
›
);

481 
SSL_CTX_£t_›ti⁄s
(
SSL_CTX
 *
˘x
, 
›
);

482 
SSL_£t_›ti⁄s
(
SSL
 *
s
, 
›
);

484 
	#SSL_CTX_£t_mode
(
˘x
,
›
) \

485 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_MODE
,(
›
),
NULL
)

	)

486 
	#SSL_CTX_˛ór_mode
(
˘x
,
›
) \

487 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_CLEAR_MODE
,(
›
),
NULL
)

	)

488 
	#SSL_CTX_gë_mode
(
˘x
) \

489 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_MODE
,0,
NULL
)

	)

490 
	#SSL_˛ór_mode
(
s¶
,
›
) \

491 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_MODE
,(
›
),
NULL
)

	)

492 
	#SSL_£t_mode
(
s¶
,
›
) \

493 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_MODE
,(
›
),
NULL
)

	)

494 
	#SSL_gë_mode
(
s¶
) \

495 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_MODE
,0,
NULL
)

	)

496 
	#SSL_£t_mtu
(
s¶
, 
mtu
) \

497 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_SET_MTU
,(
mtu
),
NULL
)

	)

498 
	#DTLS_£t_lök_mtu
(
s¶
, 
mtu
) \

499 
	`SSL_˘æ
((
s¶
),
DTLS_CTRL_SET_LINK_MTU
,(
mtu
),
NULL
)

	)

500 
	#DTLS_gë_lök_mö_mtu
(
s¶
) \

501 
	`SSL_˘æ
((
s¶
),
DTLS_CTRL_GET_LINK_MIN_MTU
,0,
NULL
)

	)

503 
	#SSL_gë_£cuª_ª√gŸüti⁄_suµ‹t
(
s¶
) \

504 
	`SSL_˘æ
((
s¶
), 
SSL_CTRL_GET_RI_SUPPORT
, 0, 
NULL
)

	)

506 #i‚de‡
OPENSSL_NO_HEARTBEATS


507 
	#SSL_hóπbót
(
s¶
) \

508 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_DTLS_EXT_SEND_HEARTBEAT
,0,
NULL
)

	)

511 
	#SSL_CTX_£t_˚π_Êags
(
˘x
,
›
) \

512 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_CERT_FLAGS
,(
›
),
NULL
)

	)

513 
	#SSL_£t_˚π_Êags
(
s
,
›
) \

514 
	`SSL_˘æ
((
s
),
SSL_CTRL_CERT_FLAGS
,(
›
),
NULL
)

	)

515 
	#SSL_CTX_˛ór_˚π_Êags
(
˘x
,
›
) \

516 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_CLEAR_CERT_FLAGS
,(
›
),
NULL
)

	)

517 
	#SSL_˛ór_˚π_Êags
(
s
,
›
) \

518 
	`SSL_˘æ
((
s
),
SSL_CTRL_CLEAR_CERT_FLAGS
,(
›
),
NULL
)

	)

520 
SSL_CTX_£t_msg_ˇŒback
(
SSL_CTX
 *
˘x
,

521 (*
cb
Ë(
wrôe_p
, 
vîsi⁄
,

522 
c⁄ã¡_ty≥
, c⁄° *
buf
,

523 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
));

524 
SSL_£t_msg_ˇŒback
(
SSL
 *
s¶
,

525 (*
cb
Ë(
wrôe_p
, 
vîsi⁄
,

526 
c⁄ã¡_ty≥
, c⁄° *
buf
,

527 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
));

528 
	#SSL_CTX_£t_msg_ˇŒback_¨g
(
˘x
, 
¨g
Ë
	`SSL_CTX_˘æ
((˘x), 
SSL_CTRL_SET_MSG_CALLBACK_ARG
, 0, (¨g))

	)

529 
	#SSL_£t_msg_ˇŒback_¨g
(
s¶
, 
¨g
Ë
	`SSL_˘æ
((s¶), 
SSL_CTRL_SET_MSG_CALLBACK_ARG
, 0, (¨g))

	)

531 
	#SSL_gë_extms_suµ‹t
(
s
) \

532 
	`SSL_˘æ
((
s
),
SSL_CTRL_GET_EXTMS_SUPPORT
,0,
NULL
)

	)

534 #i‚de‡
OPENSSL_NO_SRP


537 
__owur
 
SSL_SRP_CTX_öô
(
SSL
 *
s
);

538 
__owur
 
SSL_CTX_SRP_CTX_öô
(
SSL_CTX
 *
˘x
);

539 
SSL_SRP_CTX_‰ì
(
SSL
 *
˘x
);

540 
SSL_CTX_SRP_CTX_‰ì
(
SSL_CTX
 *
˘x
);

541 
__owur
 
SSL_§p_£rvî_∑øm_wôh_u£∫ame
(
SSL
 *
s
, *
ad
);

542 
__owur
 
SRP_CÆc_A_∑øm
(
SSL
 *
s
);

547 
	#SSL_MAX_CERT_LIST_DEFAULT
 1024*100

	)

549 
	#SSL_SESSION_CACHE_MAX_SIZE_DEFAULT
 (1024*20)

	)

563 (*
GEN_SESSION_CB
Ë(c⁄° 
	tSSL
 *
	ts¶
, *
	tid
,

564 *
	tid_Àn
);

566 
	#SSL_SESS_CACHE_OFF
 0x0000

	)

567 
	#SSL_SESS_CACHE_CLIENT
 0x0001

	)

568 
	#SSL_SESS_CACHE_SERVER
 0x0002

	)

569 
	#SSL_SESS_CACHE_BOTH
 (
SSL_SESS_CACHE_CLIENT
|
SSL_SESS_CACHE_SERVER
)

	)

570 
	#SSL_SESS_CACHE_NO_AUTO_CLEAR
 0x0080

	)

572 
	#SSL_SESS_CACHE_NO_INTERNAL_LOOKUP
 0x0100

	)

573 
	#SSL_SESS_CACHE_NO_INTERNAL_STORE
 0x0200

	)

574 
	#SSL_SESS_CACHE_NO_INTERNAL
 \

575 (
SSL_SESS_CACHE_NO_INTERNAL_LOOKUP
|
SSL_SESS_CACHE_NO_INTERNAL_STORE
)

	)

577 
LHASH_OF
(
SSL_SESSION
Ë*
SSL_CTX_£ssi⁄s
(
SSL_CTX
 *
˘x
);

578 
	#SSL_CTX_£ss_numbî
(
˘x
) \

579 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_NUMBER
,0,
NULL
)

	)

580 
	#SSL_CTX_£ss_c⁄√˘
(
˘x
) \

581 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT
,0,
NULL
)

	)

582 
	#SSL_CTX_£ss_c⁄√˘_good
(
˘x
) \

583 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT_GOOD
,0,
NULL
)

	)

584 
	#SSL_CTX_£ss_c⁄√˘_ª√gŸüã
(
˘x
) \

585 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT_RENEGOTIATE
,0,
NULL
)

	)

586 
	#SSL_CTX_£ss_ac˚±
(
˘x
) \

587 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT
,0,
NULL
)

	)

588 
	#SSL_CTX_£ss_ac˚±_ª√gŸüã
(
˘x
) \

589 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT_RENEGOTIATE
,0,
NULL
)

	)

590 
	#SSL_CTX_£ss_ac˚±_good
(
˘x
) \

591 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT_GOOD
,0,
NULL
)

	)

592 
	#SSL_CTX_£ss_hôs
(
˘x
) \

593 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_HIT
,0,
NULL
)

	)

594 
	#SSL_CTX_£ss_cb_hôs
(
˘x
) \

595 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CB_HIT
,0,
NULL
)

	)

596 
	#SSL_CTX_£ss_mis£s
(
˘x
) \

597 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_MISSES
,0,
NULL
)

	)

598 
	#SSL_CTX_£ss_timeouts
(
˘x
) \

599 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_TIMEOUTS
,0,
NULL
)

	)

600 
	#SSL_CTX_£ss_ˇche_fuŒ
(
˘x
) \

601 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CACHE_FULL
,0,
NULL
)

	)

603 
SSL_CTX_£ss_£t_√w_cb
(
SSL_CTX
 *
˘x
,

604 (*
√w_£ssi⁄_cb
Ë(
s¶_°
 *
s¶
,

605 
SSL_SESSION
 *
£ss
));

606 (*
SSL_CTX_£ss_gë_√w_cb
(
SSL_CTX
 *
˘x
)Ë(
s¶_°
 *
s¶
,

607 
SSL_SESSION
 *
£ss
);

608 
SSL_CTX_£ss_£t_ªmove_cb
(
SSL_CTX
 *
˘x
,

609 (*
ªmove_£ssi⁄_cb
Ë(
s¶_˘x_°


610 *
˘x
,

611 
SSL_SESSION


612 *
£ss
));

613 (*
SSL_CTX_£ss_gë_ªmove_cb
(
SSL_CTX
 *
˘x
)Ë(
s¶_˘x_°
 *ctx,

614 
SSL_SESSION
 *
£ss
);

615 
SSL_CTX_£ss_£t_gë_cb
(
SSL_CTX
 *
˘x
,

616 
SSL_SESSION
 *(*
gë_£ssi⁄_cb
Ë(
s¶_°


617 *
s¶
,

619 *
d©a
, 
Àn
,

620 *
c›y
));

621 
SSL_SESSION
 *(*
SSL_CTX_£ss_gë_gë_cb
(
SSL_CTX
 *
˘x
)Ë(
s¶_°
 *
s¶
,

622 c⁄° *
d©a
,

623 
Àn
, *
c›y
);

624 
SSL_CTX_£t_öfo_ˇŒback
(
SSL_CTX
 *
˘x
,

625 (*
cb
Ë(c⁄° 
SSL
 *
s¶
, 
ty≥
,

626 
vÆ
));

627 (*
SSL_CTX_gë_öfo_ˇŒback
(
SSL_CTX
 *
˘x
)Ë(c⁄° 
SSL
 *
s¶
, 
ty≥
,

628 
vÆ
);

629 
SSL_CTX_£t_˛õ¡_˚π_cb
(
SSL_CTX
 *
˘x
,

630 (*
˛õ¡_˚π_cb
Ë(
SSL
 *
s¶
, 
X509
 **
x509
,

631 
EVP_PKEY
 **
pkey
));

632 (*
SSL_CTX_gë_˛õ¡_˚π_cb
(
SSL_CTX
 *
˘x
)Ë(
SSL
 *
s¶
, 
X509
 **
x509
,

633 
EVP_PKEY
 **
pkey
);

634 #i‚de‡
OPENSSL_NO_ENGINE


635 
__owur
 
SSL_CTX_£t_˛õ¡_˚π_ígöe
(
SSL_CTX
 *
˘x
, 
ENGINE
 *
e
);

637 
SSL_CTX_£t_cookõ_gíî©e_cb
(
SSL_CTX
 *
˘x
,

638 (*
≠p_gí_cookõ_cb
Ë(
SSL
 *
s¶
,

640 *
cookõ
,

642 *
cookõ_Àn
));

643 
SSL_CTX_£t_cookõ_vîify_cb
(
SSL_CTX
 *
˘x
,

644 (*
≠p_vîify_cookõ_cb
Ë(
SSL
 *
s¶
,

646 *
cookõ
,

648 
cookõ_Àn
));

649 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


650 
SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb
(
SSL_CTX
 *
s
,

651 (*
cb
Ë(
SSL
 *
s¶
,

653 **
out
,

654 *
ouéí
,

655 *
¨g
), *arg);

656 
SSL_CTX_£t_√xt_¥Ÿo_£À˘_cb
(
SSL_CTX
 *
s
,

657 (*
cb
Ë(
SSL
 *
s¶
,

658 **
out
,

659 *
ouéí
,

660 c⁄° *
ö
,

661 
öÀn
,

662 *
¨g
), *arg);

663 
SSL_gë0_√xt_¥Ÿo_√gŸüãd
(c⁄° 
SSL
 *
s
, c⁄° **
d©a
,

664 *
Àn
);

667 
__owur
 
SSL_£À˘_√xt_¥Ÿo
(**
out
, *
ouéí
,

668 c⁄° *
ö
, 
öÀn
,

669 c⁄° *
˛õ¡
,

670 
˛õ¡_Àn
);

672 
	#OPENSSL_NPN_UNSUPPORTED
 0

	)

673 
	#OPENSSL_NPN_NEGOTIATED
 1

	)

674 
	#OPENSSL_NPN_NO_OVERLAP
 2

	)

676 
__owur
 
SSL_CTX_£t_Æ≤_¥Ÿos
(
SSL_CTX
 *
˘x
, c⁄° *
¥Ÿos
,

677 
¥Ÿos_Àn
);

678 
__owur
 
SSL_£t_Æ≤_¥Ÿos
(
SSL
 *
s¶
, c⁄° *
¥Ÿos
,

679 
¥Ÿos_Àn
);

680 
SSL_CTX_£t_Æ≤_£À˘_cb
(
SSL_CTX
 *
˘x
,

681 (*
cb
Ë(
SSL
 *
s¶
,

682 c⁄° **
out
,

683 *
ouéí
,

684 c⁄° *
ö
,

685 
öÀn
,

686 *
¨g
), *arg);

687 
SSL_gë0_Æ≤_£À˘ed
(c⁄° 
SSL
 *
s¶
, c⁄° **
d©a
,

688 *
Àn
);

690 #i‚de‡
OPENSSL_NO_PSK


695 
	#PSK_MAX_IDENTITY_LEN
 128

	)

696 
	#PSK_MAX_PSK_LEN
 256

	)

697 
SSL_CTX_£t_psk_˛õ¡_ˇŒback
(
SSL_CTX
 *
˘x
,

698 (*
psk_˛õ¡_ˇŒback
Ë(
SSL


699 *
s¶
,

702 *
höt
,

704 *
idítôy
,

707 
max_idítôy_Àn
,

710 *
psk
,

713 
max_psk_Àn
));

714 
SSL_£t_psk_˛õ¡_ˇŒback
(
SSL
 *
s¶
,

715 (*
psk_˛õ¡_ˇŒback
Ë(
SSL


716 *
s¶
,

719 *
höt
,

721 *
idítôy
,

724 
max_idítôy_Àn
,

727 *
psk
,

730 
max_psk_Àn
));

731 
SSL_CTX_£t_psk_£rvî_ˇŒback
(
SSL_CTX
 *
˘x
,

732 (*
psk_£rvî_ˇŒback
Ë(
SSL


733 *
s¶
,

736 *
idítôy
,

739 *
psk
,

742 
max_psk_Àn
));

743 
SSL_£t_psk_£rvî_ˇŒback
(
SSL
 *
s¶
,

744 (*
psk_£rvî_ˇŒback
Ë(
SSL


745 *
s¶
,

748 *
idítôy
,

751 *
psk
,

754 
max_psk_Àn
));

755 
__owur
 
SSL_CTX_u£_psk_idítôy_höt
(
SSL_CTX
 *
˘x
, c⁄° *
idítôy_höt
);

756 
__owur
 
SSL_u£_psk_idítôy_höt
(
SSL
 *
s
, c⁄° *
idítôy_höt
);

757 c⁄° *
SSL_gë_psk_idítôy_höt
(c⁄° 
SSL
 *
s
);

758 c⁄° *
SSL_gë_psk_idítôy
(c⁄° 
SSL
 *
s
);

763 
__owur
 
SSL_CTX_has_˛õ¡_cu°om_ext
(c⁄° 
SSL_CTX
 *
˘x
,

764 
ext_ty≥
);

766 
__owur
 
SSL_CTX_add_˛õ¡_cu°om_ext
(
SSL_CTX
 *
˘x
, 
ext_ty≥
,

767 
cu°om_ext_add_cb
 
add_cb
,

768 
cu°om_ext_‰ì_cb
 
‰ì_cb
,

769 *
add_¨g
,

770 
cu°om_ext_∑r£_cb
 
∑r£_cb
,

771 *
∑r£_¨g
);

773 
__owur
 
SSL_CTX_add_£rvî_cu°om_ext
(
SSL_CTX
 *
˘x
, 
ext_ty≥
,

774 
cu°om_ext_add_cb
 
add_cb
,

775 
cu°om_ext_‰ì_cb
 
‰ì_cb
,

776 *
add_¨g
,

777 
cu°om_ext_∑r£_cb
 
∑r£_cb
,

778 *
∑r£_¨g
);

780 
__owur
 
SSL_exãnsi⁄_suµ‹ãd
(
ext_ty≥
);

782 
	#SSL_NOTHING
 1

	)

783 
	#SSL_WRITING
 2

	)

784 
	#SSL_READING
 3

	)

785 
	#SSL_X509_LOOKUP
 4

	)

786 
	#SSL_ASYNC_PAUSED
 5

	)

787 
	#SSL_ASYNC_NO_JOBS
 6

	)

790 
	#SSL_w™t_nŸhög
(
s
Ë(
	`SSL_w™t
(sË=
SSL_NOTHING
)

	)

791 
	#SSL_w™t_ªad
(
s
Ë(
	`SSL_w™t
(sË=
SSL_READING
)

	)

792 
	#SSL_w™t_wrôe
(
s
Ë(
	`SSL_w™t
(sË=
SSL_WRITING
)

	)

793 
	#SSL_w™t_x509_lookup
(
s
Ë(
	`SSL_w™t
(sË=
SSL_X509_LOOKUP
)

	)

794 
	#SSL_w™t_async
(
s
Ë(
	`SSL_w™t
(sË=
SSL_ASYNC_PAUSED
)

	)

795 
	#SSL_w™t_async_job
(
s
Ë(
	`SSL_w™t
(sË=
SSL_ASYNC_NO_JOBS
)

	)

797 
	#SSL_MAC_FLAG_READ_MAC_STREAM
 1

	)

798 
	#SSL_MAC_FLAG_WRITE_MAC_STREAM
 2

	)

800 #ifde‡
__˝lu•lus


804 
	~<›ís¶/s¶2.h
>

805 
	~<›ís¶/s¶3.h
>

806 
	~<›ís¶/és1.h
>

807 
	~<›ís¶/dés1.h
>

808 
	~<›ís¶/§ç.h
>

810 #ifde‡ 
__˝lu•lus


818 
DEFINE_STACK_OF_CONST
(
SSL_CIPHER
)

819 
DEFINE_STACK_OF
(
SSL_COMP
)

822 
	#SSL_£t_≠p_d©a
(
s
,
¨g
Ë(
	`SSL_£t_ex_d©a
(s,0,(*Ôrg))

	)

823 
	#SSL_gë_≠p_d©a
(
s
Ë(
	`SSL_gë_ex_d©a
(s,0))

	)

824 
	#SSL_SESSION_£t_≠p_d©a
(
s
,
a
Ë(
	`SSL_SESSION_£t_ex_d©a
(s,0,(*Ô))

	)

825 
	#SSL_SESSION_gë_≠p_d©a
(
s
Ë(
	`SSL_SESSION_gë_ex_d©a
(s,0))

	)

826 
	#SSL_CTX_gë_≠p_d©a
(
˘x
Ë(
	`SSL_CTX_gë_ex_d©a
(˘x,0))

	)

827 
	#SSL_CTX_£t_≠p_d©a
(
˘x
,
¨g
Ë(
	`SSL_CTX_£t_ex_d©a
(˘x,0,(*Ôrg))

	)

828 
DEPRECATEDIN_1_1_0
(
SSL_£t_debug
(
SSL
 *
s
, 
debug
))

844 
TLS_ST_BEFORE
,

845 
TLS_ST_OK
,

846 
DTLS_ST_CR_HELLO_VERIFY_REQUEST
,

847 
TLS_ST_CR_SRVR_HELLO
,

848 
TLS_ST_CR_CERT
,

849 
TLS_ST_CR_CERT_STATUS
,

850 
TLS_ST_CR_KEY_EXCH
,

851 
TLS_ST_CR_CERT_REQ
,

852 
TLS_ST_CR_SRVR_DONE
,

853 
TLS_ST_CR_SESSION_TICKET
,

854 
TLS_ST_CR_CHANGE
,

855 
TLS_ST_CR_FINISHED
,

856 
TLS_ST_CW_CLNT_HELLO
,

857 
TLS_ST_CW_CERT
,

858 
TLS_ST_CW_KEY_EXCH
,

859 
TLS_ST_CW_CERT_VRFY
,

860 
TLS_ST_CW_CHANGE
,

861 
TLS_ST_CW_NEXT_PROTO
,

862 
TLS_ST_CW_FINISHED
,

863 
TLS_ST_SW_HELLO_REQ
,

864 
TLS_ST_SR_CLNT_HELLO
,

865 
DTLS_ST_SW_HELLO_VERIFY_REQUEST
,

866 
TLS_ST_SW_SRVR_HELLO
,

867 
TLS_ST_SW_CERT
,

868 
TLS_ST_SW_KEY_EXCH
,

869 
TLS_ST_SW_CERT_REQ
,

870 
TLS_ST_SW_SRVR_DONE
,

871 
TLS_ST_SR_CERT
,

872 
TLS_ST_SR_KEY_EXCH
,

873 
TLS_ST_SR_CERT_VRFY
,

874 
TLS_ST_SR_NEXT_PROTO
,

875 
TLS_ST_SR_CHANGE
,

876 
TLS_ST_SR_FINISHED
,

877 
TLS_ST_SW_SESSION_TICKET
,

878 
TLS_ST_SW_CERT_STATUS
,

879 
TLS_ST_SW_CHANGE
,

880 
TLS_ST_SW_FINISHED


881 } 
	tOSSL_HANDSHAKE_STATE
;

891 
	#SSL_ST_CONNECT
 0x1000

	)

892 
	#SSL_ST_ACCEPT
 0x2000

	)

894 
	#SSL_ST_MASK
 0x0FFF

	)

896 
	#SSL_CB_LOOP
 0x01

	)

897 
	#SSL_CB_EXIT
 0x02

	)

898 
	#SSL_CB_READ
 0x04

	)

899 
	#SSL_CB_WRITE
 0x08

	)

900 
	#SSL_CB_ALERT
 0x4000

	)

901 
	#SSL_CB_READ_ALERT
 (
SSL_CB_ALERT
|
SSL_CB_READ
)

	)

902 
	#SSL_CB_WRITE_ALERT
 (
SSL_CB_ALERT
|
SSL_CB_WRITE
)

	)

903 
	#SSL_CB_ACCEPT_LOOP
 (
SSL_ST_ACCEPT
|
SSL_CB_LOOP
)

	)

904 
	#SSL_CB_ACCEPT_EXIT
 (
SSL_ST_ACCEPT
|
SSL_CB_EXIT
)

	)

905 
	#SSL_CB_CONNECT_LOOP
 (
SSL_ST_CONNECT
|
SSL_CB_LOOP
)

	)

906 
	#SSL_CB_CONNECT_EXIT
 (
SSL_ST_CONNECT
|
SSL_CB_EXIT
)

	)

907 
	#SSL_CB_HANDSHAKE_START
 0x10

	)

908 
	#SSL_CB_HANDSHAKE_DONE
 0x20

	)

911 
	#SSL_ö_c⁄√˘_öô
(
a
Ë(
	`SSL_ö_öô
◊Ë&& !
	`SSL_is_£rvî
◊))

	)

912 
	#SSL_ö_ac˚±_öô
(
a
Ë(
	`SSL_ö_öô
◊Ë&& 
	`SSL_is_£rvî
◊))

	)

913 
SSL_ö_öô
(
SSL
 *
s
);

914 
SSL_ö_bef‹e
(
SSL
 *
s
);

915 
SSL_is_öô_föished
(
SSL
 *
s
);

921 
	#SSL_ST_READ_HEADER
 0xF0

	)

922 
	#SSL_ST_READ_BODY
 0xF1

	)

923 
	#SSL_ST_READ_DONE
 0xF2

	)

931 
size_t
 
SSL_gë_föished
(c⁄° 
SSL
 *
s
, *
buf
, size_à
cou¡
);

932 
size_t
 
SSL_gë_≥î_föished
(c⁄° 
SSL
 *
s
, *
buf
, size_à
cou¡
);

938 
	#SSL_VERIFY_NONE
 0x00

	)

939 
	#SSL_VERIFY_PEER
 0x01

	)

940 
	#SSL_VERIFY_FAIL_IF_NO_PEER_CERT
 0x02

	)

941 
	#SSL_VERIFY_CLIENT_ONCE
 0x04

	)

943 
	#O≥nSSL_add_s¶_Æg‹ôhms
(Ë
	`SSL_libøry_öô
()

	)

944 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

945 
	#SSLóy_add_s¶_Æg‹ôhms
(Ë
	`SSL_libøry_öô
()

	)

949 
	#SSL_gë_cùhî
(
s
) \

950 
	`SSL_CIPHER_gë_«me
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

951 
	#SSL_gë_cùhî_bôs
(
s
,
≈
) \

952 
	`SSL_CIPHER_gë_bôs
(
	`SSL_gë_cuºít_cùhî
(
s
),
≈
)

	)

953 
	#SSL_gë_cùhî_vîsi⁄
(
s
) \

954 
	`SSL_CIPHER_gë_vîsi⁄
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

955 
	#SSL_gë_cùhî_«me
(
s
) \

956 
	`SSL_CIPHER_gë_«me
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

957 
	#SSL_gë_time
(
a
Ë
	`SSL_SESSION_gë_time
◊)

	)

958 
	#SSL_£t_time
(
a
,
b
Ë
	`SSL_SESSION_£t_time
(◊),(b))

	)

959 
	#SSL_gë_timeout
(
a
Ë
	`SSL_SESSION_gë_timeout
◊)

	)

960 
	#SSL_£t_timeout
(
a
,
b
Ë
	`SSL_SESSION_£t_timeout
(◊),(b))

	)

962 
	#d2i_SSL_SESSION_bio
(
bp
,
s_id
Ë
	`ASN1_d2i_bio_of
(
SSL_SESSION
,
SSL_SESSION_√w
,
d2i_SSL_SESSION
,bp,s_id)

	)

963 
	#i2d_SSL_SESSION_bio
(
bp
,
s_id
Ë
	`ASN1_i2d_bio_of
(
SSL_SESSION
,
i2d_SSL_SESSION
,bp,s_id)

	)

965 
DECLARE_PEM_rw
(
SSL_SESSION
, SSL_SESSION)

966 
	#SSL_AD_REASON_OFFSET
 1000

	)

969 
	#SSL_AD_CLOSE_NOTIFY
 
SSL3_AD_CLOSE_NOTIFY


	)

971 
	#SSL_AD_UNEXPECTED_MESSAGE
 
SSL3_AD_UNEXPECTED_MESSAGE


	)

973 
	#SSL_AD_BAD_RECORD_MAC
 
SSL3_AD_BAD_RECORD_MAC


	)

974 
	#SSL_AD_DECRYPTION_FAILED
 
TLS1_AD_DECRYPTION_FAILED


	)

975 
	#SSL_AD_RECORD_OVERFLOW
 
TLS1_AD_RECORD_OVERFLOW


	)

977 
	#SSL_AD_DECOMPRESSION_FAILURE
 
SSL3_AD_DECOMPRESSION_FAILURE


	)

979 
	#SSL_AD_HANDSHAKE_FAILURE
 
SSL3_AD_HANDSHAKE_FAILURE


	)

981 
	#SSL_AD_NO_CERTIFICATE
 
SSL3_AD_NO_CERTIFICATE


	)

982 
	#SSL_AD_BAD_CERTIFICATE
 
SSL3_AD_BAD_CERTIFICATE


	)

983 
	#SSL_AD_UNSUPPORTED_CERTIFICATE
 
SSL3_AD_UNSUPPORTED_CERTIFICATE


	)

984 
	#SSL_AD_CERTIFICATE_REVOKED
 
SSL3_AD_CERTIFICATE_REVOKED


	)

985 
	#SSL_AD_CERTIFICATE_EXPIRED
 
SSL3_AD_CERTIFICATE_EXPIRED


	)

986 
	#SSL_AD_CERTIFICATE_UNKNOWN
 
SSL3_AD_CERTIFICATE_UNKNOWN


	)

988 
	#SSL_AD_ILLEGAL_PARAMETER
 
SSL3_AD_ILLEGAL_PARAMETER


	)

990 
	#SSL_AD_UNKNOWN_CA
 
TLS1_AD_UNKNOWN_CA


	)

992 
	#SSL_AD_ACCESS_DENIED
 
TLS1_AD_ACCESS_DENIED


	)

994 
	#SSL_AD_DECODE_ERROR
 
TLS1_AD_DECODE_ERROR


	)

995 
	#SSL_AD_DECRYPT_ERROR
 
TLS1_AD_DECRYPT_ERROR


	)

997 
	#SSL_AD_EXPORT_RESTRICTION
 
TLS1_AD_EXPORT_RESTRICTION


	)

999 
	#SSL_AD_PROTOCOL_VERSION
 
TLS1_AD_PROTOCOL_VERSION


	)

1001 
	#SSL_AD_INSUFFICIENT_SECURITY
 
TLS1_AD_INSUFFICIENT_SECURITY


	)

1003 
	#SSL_AD_INTERNAL_ERROR
 
TLS1_AD_INTERNAL_ERROR


	)

1004 
	#SSL_AD_USER_CANCELLED
 
TLS1_AD_USER_CANCELLED


	)

1005 
	#SSL_AD_NO_RENEGOTIATION
 
TLS1_AD_NO_RENEGOTIATION


	)

1006 
	#SSL_AD_UNSUPPORTED_EXTENSION
 
TLS1_AD_UNSUPPORTED_EXTENSION


	)

1007 
	#SSL_AD_CERTIFICATE_UNOBTAINABLE
 
TLS1_AD_CERTIFICATE_UNOBTAINABLE


	)

1008 
	#SSL_AD_UNRECOGNIZED_NAME
 
TLS1_AD_UNRECOGNIZED_NAME


	)

1009 
	#SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE
 
TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE


	)

1010 
	#SSL_AD_BAD_CERTIFICATE_HASH_VALUE
 
TLS1_AD_BAD_CERTIFICATE_HASH_VALUE


	)

1012 
	#SSL_AD_UNKNOWN_PSK_IDENTITY
 
TLS1_AD_UNKNOWN_PSK_IDENTITY


	)

1014 
	#SSL_AD_INAPPROPRIATE_FALLBACK
 
TLS1_AD_INAPPROPRIATE_FALLBACK


	)

1015 
	#SSL_AD_NO_APPLICATION_PROTOCOL
 
TLS1_AD_NO_APPLICATION_PROTOCOL


	)

1016 
	#SSL_ERROR_NONE
 0

	)

1017 
	#SSL_ERROR_SSL
 1

	)

1018 
	#SSL_ERROR_WANT_READ
 2

	)

1019 
	#SSL_ERROR_WANT_WRITE
 3

	)

1020 
	#SSL_ERROR_WANT_X509_LOOKUP
 4

	)

1021 
	#SSL_ERROR_SYSCALL
 5

	)

1023 
	#SSL_ERROR_ZERO_RETURN
 6

	)

1024 
	#SSL_ERROR_WANT_CONNECT
 7

	)

1025 
	#SSL_ERROR_WANT_ACCEPT
 8

	)

1026 
	#SSL_ERROR_WANT_ASYNC
 9

	)

1027 
	#SSL_ERROR_WANT_ASYNC_JOB
 10

	)

1028 
	#SSL_CTRL_SET_TMP_DH
 3

	)

1029 
	#SSL_CTRL_SET_TMP_ECDH
 4

	)

1030 
	#SSL_CTRL_SET_TMP_DH_CB
 6

	)

1031 
	#SSL_CTRL_GET_CLIENT_CERT_REQUEST
 9

	)

1032 
	#SSL_CTRL_GET_NUM_RENEGOTIATIONS
 10

	)

1033 
	#SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS
 11

	)

1034 
	#SSL_CTRL_GET_TOTAL_RENEGOTIATIONS
 12

	)

1035 
	#SSL_CTRL_GET_FLAGS
 13

	)

1036 
	#SSL_CTRL_EXTRA_CHAIN_CERT
 14

	)

1037 
	#SSL_CTRL_SET_MSG_CALLBACK
 15

	)

1038 
	#SSL_CTRL_SET_MSG_CALLBACK_ARG
 16

	)

1040 
	#SSL_CTRL_SET_MTU
 17

	)

1042 
	#SSL_CTRL_SESS_NUMBER
 20

	)

1043 
	#SSL_CTRL_SESS_CONNECT
 21

	)

1044 
	#SSL_CTRL_SESS_CONNECT_GOOD
 22

	)

1045 
	#SSL_CTRL_SESS_CONNECT_RENEGOTIATE
 23

	)

1046 
	#SSL_CTRL_SESS_ACCEPT
 24

	)

1047 
	#SSL_CTRL_SESS_ACCEPT_GOOD
 25

	)

1048 
	#SSL_CTRL_SESS_ACCEPT_RENEGOTIATE
 26

	)

1049 
	#SSL_CTRL_SESS_HIT
 27

	)

1050 
	#SSL_CTRL_SESS_CB_HIT
 28

	)

1051 
	#SSL_CTRL_SESS_MISSES
 29

	)

1052 
	#SSL_CTRL_SESS_TIMEOUTS
 30

	)

1053 
	#SSL_CTRL_SESS_CACHE_FULL
 31

	)

1054 
	#SSL_CTRL_MODE
 33

	)

1055 
	#SSL_CTRL_GET_READ_AHEAD
 40

	)

1056 
	#SSL_CTRL_SET_READ_AHEAD
 41

	)

1057 
	#SSL_CTRL_SET_SESS_CACHE_SIZE
 42

	)

1058 
	#SSL_CTRL_GET_SESS_CACHE_SIZE
 43

	)

1059 
	#SSL_CTRL_SET_SESS_CACHE_MODE
 44

	)

1060 
	#SSL_CTRL_GET_SESS_CACHE_MODE
 45

	)

1061 
	#SSL_CTRL_GET_MAX_CERT_LIST
 50

	)

1062 
	#SSL_CTRL_SET_MAX_CERT_LIST
 51

	)

1063 
	#SSL_CTRL_SET_MAX_SEND_FRAGMENT
 52

	)

1065 
	#SSL_CTRL_SET_TLSEXT_SERVERNAME_CB
 53

	)

1066 
	#SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG
 54

	)

1067 
	#SSL_CTRL_SET_TLSEXT_HOSTNAME
 55

	)

1068 
	#SSL_CTRL_SET_TLSEXT_DEBUG_CB
 56

	)

1069 
	#SSL_CTRL_SET_TLSEXT_DEBUG_ARG
 57

	)

1070 
	#SSL_CTRL_GET_TLSEXT_TICKET_KEYS
 58

	)

1071 
	#SSL_CTRL_SET_TLSEXT_TICKET_KEYS
 59

	)

1075 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
 63

	)

1076 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG
 64

	)

1077 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
 65

	)

1078 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS
 66

	)

1079 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS
 67

	)

1080 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS
 68

	)

1081 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS
 69

	)

1082 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP
 70

	)

1083 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP
 71

	)

1084 
	#SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB
 72

	)

1085 
	#SSL_CTRL_SET_TLS_EXT_SRP_USERNAME_CB
 75

	)

1086 
	#SSL_CTRL_SET_SRP_VERIFY_PARAM_CB
 76

	)

1087 
	#SSL_CTRL_SET_SRP_GIVE_CLIENT_PWD_CB
 77

	)

1088 
	#SSL_CTRL_SET_SRP_ARG
 78

	)

1089 
	#SSL_CTRL_SET_TLS_EXT_SRP_USERNAME
 79

	)

1090 
	#SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH
 80

	)

1091 
	#SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD
 81

	)

1092 #i‚de‡
OPENSSL_NO_HEARTBEATS


1093 
	#SSL_CTRL_DTLS_EXT_SEND_HEARTBEAT
 85

	)

1094 
	#SSL_CTRL_GET_DTLS_EXT_HEARTBEAT_PENDING
 86

	)

1095 
	#SSL_CTRL_SET_DTLS_EXT_HEARTBEAT_NO_REQUESTS
 87

	)

1097 
	#DTLS_CTRL_GET_TIMEOUT
 73

	)

1098 
	#DTLS_CTRL_HANDLE_TIMEOUT
 74

	)

1099 
	#SSL_CTRL_GET_RI_SUPPORT
 76

	)

1100 
	#SSL_CTRL_CLEAR_MODE
 78

	)

1101 
	#SSL_CTRL_SET_NOT_RESUMABLE_SESS_CB
 79

	)

1102 
	#SSL_CTRL_GET_EXTRA_CHAIN_CERTS
 82

	)

1103 
	#SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS
 83

	)

1104 
	#SSL_CTRL_CHAIN
 88

	)

1105 
	#SSL_CTRL_CHAIN_CERT
 89

	)

1106 
	#SSL_CTRL_GET_CURVES
 90

	)

1107 
	#SSL_CTRL_SET_CURVES
 91

	)

1108 
	#SSL_CTRL_SET_CURVES_LIST
 92

	)

1109 
	#SSL_CTRL_GET_SHARED_CURVE
 93

	)

1110 
	#SSL_CTRL_SET_SIGALGS
 97

	)

1111 
	#SSL_CTRL_SET_SIGALGS_LIST
 98

	)

1112 
	#SSL_CTRL_CERT_FLAGS
 99

	)

1113 
	#SSL_CTRL_CLEAR_CERT_FLAGS
 100

	)

1114 
	#SSL_CTRL_SET_CLIENT_SIGALGS
 101

	)

1115 
	#SSL_CTRL_SET_CLIENT_SIGALGS_LIST
 102

	)

1116 
	#SSL_CTRL_GET_CLIENT_CERT_TYPES
 103

	)

1117 
	#SSL_CTRL_SET_CLIENT_CERT_TYPES
 104

	)

1118 
	#SSL_CTRL_BUILD_CERT_CHAIN
 105

	)

1119 
	#SSL_CTRL_SET_VERIFY_CERT_STORE
 106

	)

1120 
	#SSL_CTRL_SET_CHAIN_CERT_STORE
 107

	)

1121 
	#SSL_CTRL_GET_PEER_SIGNATURE_NID
 108

	)

1122 
	#SSL_CTRL_GET_SERVER_TMP_KEY
 109

	)

1123 
	#SSL_CTRL_GET_RAW_CIPHERLIST
 110

	)

1124 
	#SSL_CTRL_GET_EC_POINT_FORMATS
 111

	)

1125 
	#SSL_CTRL_GET_CHAIN_CERTS
 115

	)

1126 
	#SSL_CTRL_SELECT_CURRENT_CERT
 116

	)

1127 
	#SSL_CTRL_SET_CURRENT_CERT
 117

	)

1128 
	#SSL_CTRL_SET_DH_AUTO
 118

	)

1129 
	#DTLS_CTRL_SET_LINK_MTU
 120

	)

1130 
	#DTLS_CTRL_GET_LINK_MIN_MTU
 121

	)

1131 
	#SSL_CTRL_GET_EXTMS_SUPPORT
 122

	)

1132 
	#SSL_CTRL_SET_MIN_PROTO_VERSION
 123

	)

1133 
	#SSL_CTRL_SET_MAX_PROTO_VERSION
 124

	)

1134 
	#SSL_CTRL_SET_SPLIT_SEND_FRAGMENT
 125

	)

1135 
	#SSL_CTRL_SET_MAX_PIPELINES
 126

	)

1136 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_TYPE
 127

	)

1137 
	#SSL_CERT_SET_FIRST
 1

	)

1138 
	#SSL_CERT_SET_NEXT
 2

	)

1139 
	#SSL_CERT_SET_SERVER
 3

	)

1140 
	#DTLSv1_gë_timeout
(
s¶
, 
¨g
) \

1141 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_GET_TIMEOUT
,0, (*)
¨g
)

	)

1142 
	#DTLSv1_h™dÀ_timeout
(
s¶
) \

1143 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_HANDLE_TIMEOUT
,0, 
NULL
)

	)

1144 
	#SSL_num_ª√gŸüti⁄s
(
s¶
) \

1145 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_NUM_RENEGOTIATIONS
,0,
NULL
)

	)

1146 
	#SSL_˛ór_num_ª√gŸüti⁄s
(
s¶
) \

1147 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS
,0,
NULL
)

	)

1148 
	#SSL_tŸÆ_ª√gŸüti⁄s
(
s¶
) \

1149 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_TOTAL_RENEGOTIATIONS
,0,
NULL
)

	)

1150 
	#SSL_CTX_£t_tmp_dh
(
˘x
,
dh
) \

1151 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_DH
,0,(*)
dh
)

	)

1152 
	#SSL_CTX_£t_tmp_ecdh
(
˘x
,
ecdh
) \

1153 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_ECDH
,0,(*)
ecdh
)

	)

1154 
	#SSL_CTX_£t_dh_auto
(
˘x
, 
⁄off
) \

1155 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_DH_AUTO
,
⁄off
,
NULL
)

	)

1156 
	#SSL_£t_dh_auto
(
s
, 
⁄off
) \

1157 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_DH_AUTO
,
⁄off
,
NULL
)

	)

1158 
	#SSL_£t_tmp_dh
(
s¶
,
dh
) \

1159 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_DH
,0,(*)
dh
)

	)

1160 
	#SSL_£t_tmp_ecdh
(
s¶
,
ecdh
) \

1161 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_ECDH
,0,(*)
ecdh
)

	)

1162 
	#SSL_CTX_add_exåa_chaö_˚π
(
˘x
,
x509
) \

1163 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_EXTRA_CHAIN_CERT
,0,(*)
x509
)

	)

1164 
	#SSL_CTX_gë_exåa_chaö_˚πs
(
˘x
,
px509
) \

1165 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_EXTRA_CHAIN_CERTS
,0,
px509
)

	)

1166 
	#SSL_CTX_gë_exåa_chaö_˚πs_⁄ly
(
˘x
,
px509
) \

1167 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_EXTRA_CHAIN_CERTS
,1,
px509
)

	)

1168 
	#SSL_CTX_˛ór_exåa_chaö_˚πs
(
˘x
) \

1169 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS
,0,
NULL
)

	)

1170 
	#SSL_CTX_£t0_chaö
(
˘x
,
sk
) \

1171 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_CHAIN
,0,(*)
sk
)

	)

1172 
	#SSL_CTX_£t1_chaö
(
˘x
,
sk
) \

1173 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_CHAIN
,1,(*)
sk
)

	)

1174 
	#SSL_CTX_add0_chaö_˚π
(
˘x
,
x509
) \

1175 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_CHAIN_CERT
,0,(*)
x509
)

	)

1176 
	#SSL_CTX_add1_chaö_˚π
(
˘x
,
x509
) \

1177 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_CHAIN_CERT
,1,(*)
x509
)

	)

1178 
	#SSL_CTX_gë0_chaö_˚πs
(
˘x
,
px509
) \

1179 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_CHAIN_CERTS
,0,
px509
)

	)

1180 
	#SSL_CTX_˛ór_chaö_˚πs
(
˘x
) \

1181 
	`SSL_CTX_£t0_chaö
(
˘x
,
NULL
)

	)

1182 
	#SSL_CTX_buûd_˚π_chaö
(
˘x
, 
Êags
) \

1183 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_BUILD_CERT_CHAIN
, 
Êags
, 
NULL
)

	)

1184 
	#SSL_CTX_£À˘_cuºít_˚π
(
˘x
,
x509
) \

1185 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SELECT_CURRENT_CERT
,0,(*)
x509
)

	)

1186 
	#SSL_CTX_£t_cuºít_˚π
(
˘x
, 
›
) \

1187 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CURRENT_CERT
, 
›
, 
NULL
)

	)

1188 
	#SSL_CTX_£t0_vîify_˚π_°‹e
(
˘x
,
°
) \

1189 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_VERIFY_CERT_STORE
,0,(*)
°
)

	)

1190 
	#SSL_CTX_£t1_vîify_˚π_°‹e
(
˘x
,
°
) \

1191 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_VERIFY_CERT_STORE
,1,(*)
°
)

	)

1192 
	#SSL_CTX_£t0_chaö_˚π_°‹e
(
˘x
,
°
) \

1193 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CHAIN_CERT_STORE
,0,(*)
°
)

	)

1194 
	#SSL_CTX_£t1_chaö_˚π_°‹e
(
˘x
,
°
) \

1195 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CHAIN_CERT_STORE
,1,(*)
°
)

	)

1196 
	#SSL_£t0_chaö
(
˘x
,
sk
) \

1197 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_CHAIN
,0,(*)
sk
)

	)

1198 
	#SSL_£t1_chaö
(
˘x
,
sk
) \

1199 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_CHAIN
,1,(*)
sk
)

	)

1200 
	#SSL_add0_chaö_˚π
(
˘x
,
x509
) \

1201 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_CHAIN_CERT
,0,(*)
x509
)

	)

1202 
	#SSL_add1_chaö_˚π
(
˘x
,
x509
) \

1203 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_CHAIN_CERT
,1,(*)
x509
)

	)

1204 
	#SSL_gë0_chaö_˚πs
(
˘x
,
px509
) \

1205 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_GET_CHAIN_CERTS
,0,
px509
)

	)

1206 
	#SSL_˛ór_chaö_˚πs
(
˘x
) \

1207 
	`SSL_£t0_chaö
(
˘x
,
NULL
)

	)

1208 
	#SSL_buûd_˚π_chaö
(
s
, 
Êags
) \

1209 
	`SSL_˘æ
(
s
,
SSL_CTRL_BUILD_CERT_CHAIN
, 
Êags
, 
NULL
)

	)

1210 
	#SSL_£À˘_cuºít_˚π
(
˘x
,
x509
) \

1211 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_SELECT_CURRENT_CERT
,0,(*)
x509
)

	)

1212 
	#SSL_£t_cuºít_˚π
(
˘x
,
›
) \

1213 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_SET_CURRENT_CERT
, 
›
, 
NULL
)

	)

1214 
	#SSL_£t0_vîify_˚π_°‹e
(
s
,
°
) \

1215 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_VERIFY_CERT_STORE
,0,(*)
°
)

	)

1216 
	#SSL_£t1_vîify_˚π_°‹e
(
s
,
°
) \

1217 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_VERIFY_CERT_STORE
,1,(*)
°
)

	)

1218 
	#SSL_£t0_chaö_˚π_°‹e
(
s
,
°
) \

1219 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_CHAIN_CERT_STORE
,0,(*)
°
)

	)

1220 
	#SSL_£t1_chaö_˚π_°‹e
(
s
,
°
) \

1221 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_CHAIN_CERT_STORE
,1,(*)
°
)

	)

1222 
	#SSL_gë1_curves
(
˘x
, 
s
) \

1223 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_GET_CURVES
,0,(*)
s
)

	)

1224 
	#SSL_CTX_£t1_curves
(
˘x
, 
˛i°
, 
˛i°Àn
) \

1225 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CURVES
,
˛i°Àn
,(*)
˛i°
)

	)

1226 
	#SSL_CTX_£t1_curves_li°
(
˘x
, 
s
) \

1227 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CURVES_LIST
,0,(*)
s
)

	)

1228 
	#SSL_£t1_curves
(
˘x
, 
˛i°
, 
˛i°Àn
) \

1229 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_SET_CURVES
,
˛i°Àn
,(*)
˛i°
)

	)

1230 
	#SSL_£t1_curves_li°
(
˘x
, 
s
) \

1231 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_SET_CURVES_LIST
,0,(*)
s
)

	)

1232 
	#SSL_gë_sh¨ed_curve
(
s
, 
n
) \

1233 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_SHARED_CURVE
,
n
,
NULL
)

	)

1234 
	#SSL_CTX_£t1_sigÆgs
(
˘x
, 
¶i°
, 
¶i°Àn
) \

1235 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SIGALGS
,
¶i°Àn
,(*)
¶i°
)

	)

1236 
	#SSL_CTX_£t1_sigÆgs_li°
(
˘x
, 
s
) \

1237 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SIGALGS_LIST
,0,(*)
s
)

	)

1238 
	#SSL_£t1_sigÆgs
(
˘x
, 
¶i°
, 
¶i°Àn
) \

1239 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_SET_SIGALGS
,
˛i°Àn
,(*)
¶i°
)

	)

1240 
	#SSL_£t1_sigÆgs_li°
(
˘x
, 
s
) \

1241 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_SET_SIGALGS_LIST
,0,(*)
s
)

	)

1242 
	#SSL_CTX_£t1_˛õ¡_sigÆgs
(
˘x
, 
¶i°
, 
¶i°Àn
) \

1243 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CLIENT_SIGALGS
,
¶i°Àn
,(*)
¶i°
)

	)

1244 
	#SSL_CTX_£t1_˛õ¡_sigÆgs_li°
(
˘x
, 
s
) \

1245 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CLIENT_SIGALGS_LIST
,0,(*)
s
)

	)

1246 
	#SSL_£t1_˛õ¡_sigÆgs
(
˘x
, 
¶i°
, 
¶i°Àn
) \

1247 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_SET_CLIENT_SIGALGS
,
˛i°Àn
,(*)
¶i°
)

	)

1248 
	#SSL_£t1_˛õ¡_sigÆgs_li°
(
˘x
, 
s
) \

1249 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_SET_CLIENT_SIGALGS_LIST
,0,(*)
s
)

	)

1250 
	#SSL_gë0_˚πifiˇã_ty≥s
(
s
, 
˛i°
) \

1251 
	`SSL_˘æ
(
s
, 
SSL_CTRL_GET_CLIENT_CERT_TYPES
, 0, (*)
˛i°
)

	)

1252 
	#SSL_CTX_£t1_˛õ¡_˚πifiˇã_ty≥s
(
˘x
, 
˛i°
, 
˛i°Àn
) \

1253 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CLIENT_CERT_TYPES
,
˛i°Àn
,(*)
˛i°
)

	)

1254 
	#SSL_£t1_˛õ¡_˚πifiˇã_ty≥s
(
s
, 
˛i°
, 
˛i°Àn
) \

1255 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_CLIENT_CERT_TYPES
,
˛i°Àn
,(*)
˛i°
)

	)

1256 
	#SSL_gë_≥î_sig«tuª_nid
(
s
, 
≤
) \

1257 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_PEER_SIGNATURE_NID
,0,
≤
)

	)

1258 
	#SSL_gë_£rvî_tmp_key
(
s
, 
pk
) \

1259 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_SERVER_TMP_KEY
,0,
pk
)

	)

1260 
	#SSL_gë0_øw_cùhîli°
(
s
, 
∂°
) \

1261 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_RAW_CIPHERLIST
,0,
∂°
)

	)

1262 
	#SSL_gë0_ec_poöt_f‹m©s
(
s
, 
∂°
) \

1263 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_EC_POINT_FORMATS
,0,
∂°
)

	)

1264 
	#SSL_CTX_£t_mö_¥Ÿo_vîsi⁄
(
˘x
, 
vîsi⁄
) \

1265 
	`SSL_CTX_˘æ
(
˘x
, 
SSL_CTRL_SET_MIN_PROTO_VERSION
, 
vîsi⁄
, 
NULL
)

	)

1266 
	#SSL_CTX_£t_max_¥Ÿo_vîsi⁄
(
˘x
, 
vîsi⁄
) \

1267 
	`SSL_CTX_˘æ
(
˘x
, 
SSL_CTRL_SET_MAX_PROTO_VERSION
, 
vîsi⁄
, 
NULL
)

	)

1268 
	#SSL_£t_mö_¥Ÿo_vîsi⁄
(
s
, 
vîsi⁄
) \

1269 
	`SSL_˘æ
(
s
, 
SSL_CTRL_SET_MIN_PROTO_VERSION
, 
vîsi⁄
, 
NULL
)

	)

1270 
	#SSL_£t_max_¥Ÿo_vîsi⁄
(
s
, 
vîsi⁄
) \

1271 
	`SSL_˘æ
(
s
, 
SSL_CTRL_SET_MAX_PROTO_VERSION
, 
vîsi⁄
, 
NULL
)

	)

1273 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

1275 
	#SSL_CTX_√ed_tmp_RSA
(
˘x
Ë0

	)

1276 
	#SSL_CTX_£t_tmp_rß
(
˘x
,
rß
Ë1

	)

1277 
	#SSL_√ed_tmp_RSA
(
s¶
Ë0

	)

1278 
	#SSL_£t_tmp_rß
(
s¶
,
rß
Ë1

	)

1283 
	#SSL_CTX_£t_tmp_rß_ˇŒback
(
˘x
, 
cb
Ë0Ë(cb)(
NULL
, 0, 0)

	)

1284 
	#SSL_£t_tmp_rß_ˇŒback
(
s¶
, 
cb
Ë0Ë(cb)(
NULL
, 0, 0)

	)

1287 
__owur
 c⁄° 
BIO_METHOD
 *
BIO_f_s¶
();

1288 
__owur
 
BIO
 *
BIO_√w_s¶
(
SSL_CTX
 *
˘x
, 
˛õ¡
);

1289 
__owur
 
BIO
 *
BIO_√w_s¶_c⁄√˘
(
SSL_CTX
 *
˘x
);

1290 
__owur
 
BIO
 *
BIO_√w_buf„r_s¶_c⁄√˘
(
SSL_CTX
 *
˘x
);

1291 
__owur
 
BIO_s¶_c›y_£ssi⁄_id
(
BIO
 *
to
, BIO *
‰om
);

1292 
BIO_s¶_shutdown
(
BIO
 *
s¶_bio
);

1294 
__owur
 
SSL_CTX_£t_cùhî_li°
(
SSL_CTX
 *, c⁄° *
°r
);

1295 
__owur
 
SSL_CTX
 *
SSL_CTX_√w
(c⁄° 
SSL_METHOD
 *
mëh
);

1296 
SSL_CTX_up_ªf
(
SSL_CTX
 *
˘x
);

1297 
SSL_CTX_‰ì
(
SSL_CTX
 *);

1298 
__owur
 
SSL_CTX_£t_timeout
(
SSL_CTX
 *
˘x
, 
t
);

1299 
__owur
 
SSL_CTX_gë_timeout
(c⁄° 
SSL_CTX
 *
˘x
);

1300 
__owur
 
X509_STORE
 *
SSL_CTX_gë_˚π_°‹e
(c⁄° 
SSL_CTX
 *);

1301 
SSL_CTX_£t_˚π_°‹e
(
SSL_CTX
 *, 
X509_STORE
 *);

1302 
__owur
 
SSL_w™t
(c⁄° 
SSL
 *
s
);

1303 
__owur
 
SSL_˛ór
(
SSL
 *
s
);

1305 
SSL_CTX_Êush_£ssi⁄s
(
SSL_CTX
 *
˘x
, 
tm
);

1307 
__owur
 c⁄° 
SSL_CIPHER
 *
SSL_gë_cuºít_cùhî
(c⁄° 
SSL
 *
s
);

1308 
__owur
 
SSL_CIPHER_gë_bôs
(c⁄° 
SSL_CIPHER
 *
c
, *
Æg_bôs
);

1309 
__owur
 c⁄° *
SSL_CIPHER_gë_vîsi⁄
(c⁄° 
SSL_CIPHER
 *
c
);

1310 
__owur
 c⁄° *
SSL_CIPHER_gë_«me
(c⁄° 
SSL_CIPHER
 *
c
);

1311 
__owur
 
uöt32_t
 
SSL_CIPHER_gë_id
(c⁄° 
SSL_CIPHER
 *
c
);

1312 
__owur
 
SSL_CIPHER_gë_kx_nid
(c⁄° 
SSL_CIPHER
 *
c
);

1313 
__owur
 
SSL_CIPHER_gë_auth_nid
(c⁄° 
SSL_CIPHER
 *
c
);

1314 
__owur
 
SSL_CIPHER_is_´ad
(c⁄° 
SSL_CIPHER
 *
c
);

1316 
__owur
 
SSL_gë_fd
(c⁄° 
SSL
 *
s
);

1317 
__owur
 
SSL_gë_rfd
(c⁄° 
SSL
 *
s
);

1318 
__owur
 
SSL_gë_wfd
(c⁄° 
SSL
 *
s
);

1319 
__owur
 c⁄° *
SSL_gë_cùhî_li°
(c⁄° 
SSL
 *
s
, 
n
);

1320 
__owur
 *
SSL_gë_sh¨ed_cùhîs
(c⁄° 
SSL
 *
s
, *
buf
, 
Àn
);

1321 
__owur
 
SSL_gë_ªad_ahód
(c⁄° 
SSL
 *
s
);

1322 
__owur
 
SSL_≥ndög
(c⁄° 
SSL
 *
s
);

1323 
__owur
 
SSL_has_≥ndög
(c⁄° 
SSL
 *
s
);

1324 #i‚de‡
OPENSSL_NO_SOCK


1325 
__owur
 
SSL_£t_fd
(
SSL
 *
s
, 
fd
);

1326 
__owur
 
SSL_£t_rfd
(
SSL
 *
s
, 
fd
);

1327 
__owur
 
SSL_£t_wfd
(
SSL
 *
s
, 
fd
);

1329 
SSL_£t_rbio
(
SSL
 *
s
, 
BIO
 *
rbio
);

1330 
SSL_£t_wbio
(
SSL
 *
s
, 
BIO
 *
wbio
);

1331 
SSL_£t_bio
(
SSL
 *
s
, 
BIO
 *
rbio
, BIO *
wbio
);

1332 
__owur
 
BIO
 *
SSL_gë_rbio
(c⁄° 
SSL
 *
s
);

1333 
__owur
 
BIO
 *
SSL_gë_wbio
(c⁄° 
SSL
 *
s
);

1334 
__owur
 
SSL_£t_cùhî_li°
(
SSL
 *
s
, c⁄° *
°r
);

1335 
SSL_£t_ªad_ahód
(
SSL
 *
s
, 
yes
);

1336 
__owur
 
SSL_gë_vîify_mode
(c⁄° 
SSL
 *
s
);

1337 
__owur
 
SSL_gë_vîify_dïth
(c⁄° 
SSL
 *
s
);

1338 
__owur
 (*
SSL_gë_vîify_ˇŒback
(c⁄° 
SSL
 *
s
)Ë(, 
X509_STORE_CTX
 *);

1339 
SSL_£t_vîify
(
SSL
 *
s
, 
mode
,

1340 (*
ˇŒback
Ë(
ok
, 
X509_STORE_CTX
 *
˘x
));

1341 
SSL_£t_vîify_dïth
(
SSL
 *
s
, 
dïth
);

1342 
SSL_£t_˚π_cb
(
SSL
 *
s
, (*
cb
Ë(SSL *
s¶
, *
¨g
), *arg);

1343 #i‚de‡
OPENSSL_NO_RSA


1344 
__owur
 
SSL_u£_RSAPriv©eKey
(
SSL
 *
s¶
, 
RSA
 *
rß
);

1345 
__owur
 
SSL_u£_RSAPriv©eKey_ASN1
(
SSL
 *
s¶
, c⁄° *
d
, 
Àn
);

1347 
__owur
 
SSL_u£_Priv©eKey
(
SSL
 *
s¶
, 
EVP_PKEY
 *
pkey
);

1348 
__owur
 
SSL_u£_Priv©eKey_ASN1
(
pk
, 
SSL
 *
s¶
, c⁄° *
d
,

1349 
Àn
);

1350 
__owur
 
SSL_u£_˚πifiˇã
(
SSL
 *
s¶
, 
X509
 *
x
);

1351 
__owur
 
SSL_u£_˚πifiˇã_ASN1
(
SSL
 *
s¶
, c⁄° *
d
, 
Àn
);

1354 
__owur
 
SSL_CTX_u£_£rvîöfo
(
SSL_CTX
 *
˘x
, c⁄° *
£rvîöfo
,

1355 
size_t
 
£rvîöfo_Àngth
);

1356 
__owur
 
SSL_CTX_u£_£rvîöfo_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
);

1358 #i‚de‡
OPENSSL_NO_RSA


1359 
__owur
 
SSL_u£_RSAPriv©eKey_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

1362 
__owur
 
SSL_u£_Priv©eKey_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

1363 
__owur
 
SSL_u£_˚πifiˇã_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

1365 #i‚de‡
OPENSSL_NO_RSA


1366 
__owur
 
SSL_CTX_u£_RSAPriv©eKey_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

1368 
__owur
 
SSL_CTX_u£_Priv©eKey_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

1369 
__owur
 
SSL_CTX_u£_˚πifiˇã_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

1371 
__owur
 
SSL_CTX_u£_˚πifiˇã_chaö_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
);

1372 
__owur
 
SSL_u£_˚πifiˇã_chaö_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
);

1373 
__owur
 
STACK_OF
(
X509_NAME
Ë*
SSL_lﬂd_˛õ¡_CA_fûe
(c⁄° *
fûe
);

1374 
__owur
 
SSL_add_fûe_˚π_subje˘s_to_°ack
(
STACK_OF
(
X509_NAME
Ë*
°ackCAs
,

1375 c⁄° *
fûe
);

1376 
SSL_add_dú_˚π_subje˘s_to_°ack
(
STACK_OF
(
X509_NAME
Ë*
°ackCAs
,

1377 c⁄° *
dú
);

1379 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

1380 
	#SSL_lﬂd_îr‹_°rögs
() \

1381 
	`OPENSSL_öô_s¶
(
OPENSSL_INIT_LOAD_SSL_STRINGS
 \

1382 | 
OPENSSL_INIT_LOAD_CRYPTO_STRINGS
, 
NULL
)

	)

1385 
__owur
 c⁄° *
SSL_°©e_°rög
(c⁄° 
SSL
 *
s
);

1386 
__owur
 c⁄° *
SSL_r°©e_°rög
(c⁄° 
SSL
 *
s
);

1387 
__owur
 c⁄° *
SSL_°©e_°rög_l⁄g
(c⁄° 
SSL
 *
s
);

1388 
__owur
 c⁄° *
SSL_r°©e_°rög_l⁄g
(c⁄° 
SSL
 *
s
);

1389 
__owur
 
SSL_SESSION_gë_time
(c⁄° 
SSL_SESSION
 *
s
);

1390 
__owur
 
SSL_SESSION_£t_time
(
SSL_SESSION
 *
s
, 
t
);

1391 
__owur
 
SSL_SESSION_gë_timeout
(c⁄° 
SSL_SESSION
 *
s
);

1392 
__owur
 
SSL_SESSION_£t_timeout
(
SSL_SESSION
 *
s
, 
t
);

1393 
__owur
 
SSL_SESSION_gë_¥Ÿocﬁ_vîsi⁄
(c⁄° 
SSL_SESSION
 *
s
);

1394 
__owur
 c⁄° *
SSL_SESSION_gë0_ho°«me
(c⁄° 
SSL_SESSION
 *
s
);

1395 
__owur
 
SSL_SESSION_has_tickë
(c⁄° 
SSL_SESSION
 *
s
);

1396 
__owur
 
SSL_SESSION_gë_tickë_li„time_höt
(c⁄° 
SSL_SESSION
 *
s
);

1397 
SSL_SESSION_gë0_tickë
(c⁄° 
SSL_SESSION
 *
s
, **
tick
,

1398 
size_t
 *
Àn
);

1399 
__owur
 
SSL_c›y_£ssi⁄_id
(
SSL
 *
to
, c⁄° SSL *
‰om
);

1400 
__owur
 
X509
 *
SSL_SESSION_gë0_≥î
(
SSL_SESSION
 *
s
);

1401 
__owur
 
SSL_SESSION_£t1_id_c⁄ãxt
(
SSL_SESSION
 *
s
, c⁄° *
sid_˘x
,

1402 
sid_˘x_Àn
);

1404 
__owur
 
SSL_SESSION
 *
SSL_SESSION_√w
();

1405 c⁄° *
SSL_SESSION_gë_id
(c⁄° 
SSL_SESSION
 *
s
,

1406 *
Àn
);

1407 
__owur
 
SSL_SESSION_gë_com¥ess_id
(c⁄° 
SSL_SESSION
 *
s
);

1408 #i‚de‡
OPENSSL_NO_STDIO


1409 
SSL_SESSION_¥öt_Â
(
FILE
 *
Â
, c⁄° 
SSL_SESSION
 *
£s
);

1411 
SSL_SESSION_¥öt
(
BIO
 *
Â
, c⁄° 
SSL_SESSION
 *
£s
);

1412 
SSL_SESSION_¥öt_keylog
(
BIO
 *
bp
, c⁄° 
SSL_SESSION
 *
x
);

1413 
SSL_SESSION_up_ªf
(
SSL_SESSION
 *
£s
);

1414 
SSL_SESSION_‰ì
(
SSL_SESSION
 *
£s
);

1415 
__owur
 
i2d_SSL_SESSION
(
SSL_SESSION
 *
ö
, **
µ
);

1416 
__owur
 
SSL_£t_£ssi⁄
(
SSL
 *
to
, 
SSL_SESSION
 *
£ssi⁄
);

1417 
__owur
 
SSL_CTX_add_£ssi⁄
(
SSL_CTX
 *
s
, 
SSL_SESSION
 *
c
);

1418 
SSL_CTX_ªmove_£ssi⁄
(
SSL_CTX
 *, 
SSL_SESSION
 *
c
);

1419 
__owur
 
SSL_CTX_£t_gíî©e_£ssi⁄_id
(
SSL_CTX
 *, 
GEN_SESSION_CB
);

1420 
__owur
 
SSL_£t_gíî©e_£ssi⁄_id
(
SSL
 *, 
GEN_SESSION_CB
);

1421 
__owur
 
SSL_has_m©chög_£ssi⁄_id
(c⁄° 
SSL
 *
s¶
, c⁄° *
id
,

1422 
id_Àn
);

1423 
SSL_SESSION
 *
d2i_SSL_SESSION
(SSL_SESSION **
a
, c⁄° **
µ
,

1424 
Àngth
);

1426 #ifde‡
HEADER_X509_H


1427 
__owur
 
X509
 *
SSL_gë_≥î_˚πifiˇã
(c⁄° 
SSL
 *
s
);

1430 
__owur
 
STACK_OF
(
X509
Ë*
SSL_gë_≥î_˚π_chaö
(c⁄° 
SSL
 *
s
);

1432 
__owur
 
SSL_CTX_gë_vîify_mode
(c⁄° 
SSL_CTX
 *
˘x
);

1433 
__owur
 
SSL_CTX_gë_vîify_dïth
(c⁄° 
SSL_CTX
 *
˘x
);

1434 
__owur
 (*
SSL_CTX_gë_vîify_ˇŒback
(c⁄° 
SSL_CTX
 *
˘x
)) (,

1435 
X509_STORE_CTX
 *);

1436 
SSL_CTX_£t_vîify
(
SSL_CTX
 *
˘x
, 
mode
,

1437 (*
ˇŒback
Ë(, 
X509_STORE_CTX
 *));

1438 
SSL_CTX_£t_vîify_dïth
(
SSL_CTX
 *
˘x
, 
dïth
);

1439 
SSL_CTX_£t_˚π_vîify_ˇŒback
(
SSL_CTX
 *
˘x
,

1440 (*
cb
Ë(
X509_STORE_CTX
 *, *),

1441 *
¨g
);

1442 
SSL_CTX_£t_˚π_cb
(
SSL_CTX
 *
c
, (*
cb
Ë(
SSL
 *
s¶
, *
¨g
),

1443 *
¨g
);

1444 #i‚de‡
OPENSSL_NO_RSA


1445 
__owur
 
SSL_CTX_u£_RSAPriv©eKey
(
SSL_CTX
 *
˘x
, 
RSA
 *
rß
);

1446 
__owur
 
SSL_CTX_u£_RSAPriv©eKey_ASN1
(
SSL_CTX
 *
˘x
, c⁄° *
d
,

1447 
Àn
);

1449 
__owur
 
SSL_CTX_u£_Priv©eKey
(
SSL_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
);

1450 
__owur
 
SSL_CTX_u£_Priv©eKey_ASN1
(
pk
, 
SSL_CTX
 *
˘x
,

1451 c⁄° *
d
, 
Àn
);

1452 
__owur
 
SSL_CTX_u£_˚πifiˇã
(
SSL_CTX
 *
˘x
, 
X509
 *
x
);

1453 
__owur
 
SSL_CTX_u£_˚πifiˇã_ASN1
(
SSL_CTX
 *
˘x
, 
Àn
,

1454 c⁄° *
d
);

1456 
SSL_CTX_£t_deÁu…_∑sswd_cb
(
SSL_CTX
 *
˘x
, 
≥m_∑ssw‹d_cb
 *
cb
);

1457 
SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a
(
SSL_CTX
 *
˘x
, *
u
);

1458 
≥m_∑ssw‹d_cb
 *
SSL_CTX_gë_deÁu…_∑sswd_cb
(
SSL_CTX
 *
˘x
);

1459 *
SSL_CTX_gë_deÁu…_∑sswd_cb_u£rd©a
(
SSL_CTX
 *
˘x
);

1460 
SSL_£t_deÁu…_∑sswd_cb
(
SSL
 *
s
, 
≥m_∑ssw‹d_cb
 *
cb
);

1461 
SSL_£t_deÁu…_∑sswd_cb_u£rd©a
(
SSL
 *
s
, *
u
);

1462 
≥m_∑ssw‹d_cb
 *
SSL_gë_deÁu…_∑sswd_cb
(
SSL
 *
s
);

1463 *
SSL_gë_deÁu…_∑sswd_cb_u£rd©a
(
SSL
 *
s
);

1465 
__owur
 
SSL_CTX_check_¥iv©e_key
(c⁄° 
SSL_CTX
 *
˘x
);

1466 
__owur
 
SSL_check_¥iv©e_key
(c⁄° 
SSL
 *
˘x
);

1468 
__owur
 
SSL_CTX_£t_£ssi⁄_id_c⁄ãxt
(
SSL_CTX
 *
˘x
, c⁄° *
sid_˘x
,

1469 
sid_˘x_Àn
);

1471 
SSL
 *
SSL_√w
(
SSL_CTX
 *
˘x
);

1472 
SSL_up_ªf
(
SSL
 *
s
);

1473 
SSL_is_dés
(c⁄° 
SSL
 *
s
);

1474 
__owur
 
SSL_£t_£ssi⁄_id_c⁄ãxt
(
SSL
 *
s¶
, c⁄° *
sid_˘x
,

1475 
sid_˘x_Àn
);

1477 
__owur
 
SSL_CTX_£t_puΩo£
(
SSL_CTX
 *
s
, 
puΩo£
);

1478 
__owur
 
SSL_£t_puΩo£
(
SSL
 *
s
, 
puΩo£
);

1479 
__owur
 
SSL_CTX_£t_åu°
(
SSL_CTX
 *
s
, 
åu°
);

1480 
__owur
 
SSL_£t_åu°
(
SSL
 *
s
, 
åu°
);

1482 
__owur
 
SSL_£t1_ho°
(
SSL
 *
s
, c⁄° *
ho°«me
);

1483 
__owur
 
SSL_add1_ho°
(
SSL
 *
s
, c⁄° *
ho°«me
);

1484 
__owur
 c⁄° *
SSL_gë0_≥î«me
(
SSL
 *
s
);

1485 
SSL_£t_ho°Êags
(
SSL
 *
s
, 
Êags
);

1487 
__owur
 
SSL_CTX_d™e_íabÀ
(
SSL_CTX
 *
˘x
);

1488 
__owur
 
SSL_CTX_d™e_mty≥_£t
(
SSL_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
md
,

1489 
uöt8_t
 
mty≥
, uöt8_à
‹d
);

1490 
__owur
 
SSL_d™e_íabÀ
(
SSL
 *
s
, c⁄° *
ba£domaö
);

1491 
__owur
 
SSL_d™e_éß_add
(
SSL
 *
s
, 
uöt8_t
 
ußge
, uöt8_à
£À˘‹
,

1492 
uöt8_t
 
mty≥
, *
d©a
, 
size_t
 
dÀn
);

1493 
__owur
 
SSL_gë0_d™e_auth‹ôy
(
SSL
 *
s
, 
X509
 **
m˚π
, 
EVP_PKEY
 **
m•ki
);

1494 
__owur
 
SSL_gë0_d™e_éß
(
SSL
 *
s
, 
uöt8_t
 *
ußge
, uöt8_à*
£À˘‹
,

1495 
uöt8_t
 *
mty≥
, c⁄° **
d©a
,

1496 
size_t
 *
dÀn
);

1501 
SSL_DANE
 *
SSL_gë0_d™e
(
SSL
 *
s¶
);

1503 
__owur
 
SSL_CTX_£t1_∑øm
(
SSL_CTX
 *
˘x
, 
X509_VERIFY_PARAM
 *
vpm
);

1504 
__owur
 
SSL_£t1_∑øm
(
SSL
 *
s¶
, 
X509_VERIFY_PARAM
 *
vpm
);

1506 
__owur
 
X509_VERIFY_PARAM
 *
SSL_CTX_gë0_∑øm
(
SSL_CTX
 *
˘x
);

1507 
__owur
 
X509_VERIFY_PARAM
 *
SSL_gë0_∑øm
(
SSL
 *
s¶
);

1509 #i‚de‡
OPENSSL_NO_SRP


1510 
SSL_CTX_£t_§p_u£∫ame
(
SSL_CTX
 *
˘x
, *
«me
);

1511 
SSL_CTX_£t_§p_∑ssw‹d
(
SSL_CTX
 *
˘x
, *
∑ssw‹d
);

1512 
SSL_CTX_£t_§p_°ªngth
(
SSL_CTX
 *
˘x
, 
°ªngth
);

1513 
SSL_CTX_£t_§p_˛õ¡_pwd_ˇŒback
(
SSL_CTX
 *
˘x
,

1514 *(*
cb
Ë(
SSL
 *, *));

1515 
SSL_CTX_£t_§p_vîify_∑øm_ˇŒback
(
SSL_CTX
 *
˘x
,

1516 (*
cb
Ë(
SSL
 *, *));

1517 
SSL_CTX_£t_§p_u£∫ame_ˇŒback
(
SSL_CTX
 *
˘x
,

1518 (*
cb
Ë(
SSL
 *, *, *));

1519 
SSL_CTX_£t_§p_cb_¨g
(
SSL_CTX
 *
˘x
, *
¨g
);

1521 
SSL_£t_§p_£rvî_∑øm
(
SSL
 *
s
, c⁄° 
BIGNUM
 *
N
, c⁄° BIGNUM *
g
,

1522 
BIGNUM
 *
ß
, BIGNUM *
v
, *
öfo
);

1523 
SSL_£t_§p_£rvî_∑øm_pw
(
SSL
 *
s
, c⁄° *
u£r
, c⁄° *
∑ss
,

1524 c⁄° *
gΩ
);

1526 
__owur
 
BIGNUM
 *
SSL_gë_§p_g
(
SSL
 *
s
);

1527 
__owur
 
BIGNUM
 *
SSL_gë_§p_N
(
SSL
 *
s
);

1529 
__owur
 *
SSL_gë_§p_u£∫ame
(
SSL
 *
s
);

1530 
__owur
 *
SSL_gë_§p_u£röfo
(
SSL
 *
s
);

1533 
SSL_˚πs_˛ór
(
SSL
 *
s
);

1534 
SSL_‰ì
(
SSL
 *
s¶
);

1535 #ifde‡
OSSL_ASYNC_FD


1539 
__owur
 
SSL_waôög_f‹_async
(
SSL
 *
s
);

1540 
__owur
 
SSL_gë_Æl_async_fds
(
SSL
 *
s
, 
OSSL_ASYNC_FD
 *
fds
, 
size_t
 *
numfds
);

1541 
__owur
 
SSL_gë_ch™ged_async_fds
(
SSL
 *
s
, 
OSSL_ASYNC_FD
 *
addfd
,

1542 
size_t
 *
numaddfds
, 
OSSL_ASYNC_FD
 *
dñfd
,

1543 
size_t
 *
numdñfds
);

1545 
__owur
 
SSL_ac˚±
(
SSL
 *
s¶
);

1546 
__owur
 
SSL_c⁄√˘
(
SSL
 *
s¶
);

1547 
__owur
 
SSL_ªad
(
SSL
 *
s¶
, *
buf
, 
num
);

1548 
__owur
 
SSL_≥ek
(
SSL
 *
s¶
, *
buf
, 
num
);

1549 
__owur
 
SSL_wrôe
(
SSL
 *
s¶
, c⁄° *
buf
, 
num
);

1550 
SSL_˘æ
(
SSL
 *
s¶
, 
cmd
, 
œrg
, *
∑rg
);

1551 
SSL_ˇŒback_˘æ
(
SSL
 *, , (*)());

1552 
SSL_CTX_˘æ
(
SSL_CTX
 *
˘x
, 
cmd
, 
œrg
, *
∑rg
);

1553 
SSL_CTX_ˇŒback_˘æ
(
SSL_CTX
 *, , (*)());

1555 
__owur
 
SSL_gë_îr‹
(c⁄° 
SSL
 *
s
, 
ªt_code
);

1556 
__owur
 c⁄° *
SSL_gë_vîsi⁄
(c⁄° 
SSL
 *
s
);

1559 
__owur
 
SSL_CTX_£t_s¶_vîsi⁄
(
SSL_CTX
 *
˘x
, c⁄° 
SSL_METHOD
 *
mëh
);

1561 #i‚de‡
OPENSSL_NO_SSL3_METHOD


1562 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
SSLv3_mëhod
())

1563 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
SSLv3_£rvî_mëhod
())

1564 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
SSLv3_˛õ¡_mëhod
())

1567 
	#SSLv23_mëhod
 
TLS_mëhod


	)

1568 
	#SSLv23_£rvî_mëhod
 
TLS_£rvî_mëhod


	)

1569 
	#SSLv23_˛õ¡_mëhod
 
TLS_˛õ¡_mëhod


	)

1572 
__owur
 c⁄° 
SSL_METHOD
 *
TLS_mëhod
();

1573 
__owur
 c⁄° 
SSL_METHOD
 *
TLS_£rvî_mëhod
();

1574 
__owur
 c⁄° 
SSL_METHOD
 *
TLS_˛õ¡_mëhod
();

1576 #i‚de‡
OPENSSL_NO_TLS1_METHOD


1577 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
TLSv1_mëhod
())

1578 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
TLSv1_£rvî_mëhod
())

1579 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
TLSv1_˛õ¡_mëhod
())

1582 #i‚de‡
OPENSSL_NO_TLS1_1_METHOD


1583 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
TLSv1_1_mëhod
())

1584 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
TLSv1_1_£rvî_mëhod
())

1585 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
TLSv1_1_˛õ¡_mëhod
())

1588 #i‚de‡
OPENSSL_NO_TLS1_2_METHOD


1589 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
TLSv1_2_mëhod
())

1590 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
TLSv1_2_£rvî_mëhod
())

1591 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
TLSv1_2_˛õ¡_mëhod
())

1594 #i‚de‡
OPENSSL_NO_DTLS1_METHOD


1595 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
DTLSv1_mëhod
())

1596 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
DTLSv1_£rvî_mëhod
())

1597 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
DTLSv1_˛õ¡_mëhod
())

1600 #i‚de‡
OPENSSL_NO_DTLS1_2_METHOD


1601 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
DTLSv1_2_mëhod
())

1602 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
DTLSv1_2_£rvî_mëhod
())

1603 
DEPRECATEDIN_1_1_0
(
__owur
 c⁄° 
SSL_METHOD
 *
DTLSv1_2_˛õ¡_mëhod
())

1606 
__owur
 c⁄° 
SSL_METHOD
 *
DTLS_mëhod
();

1607 
__owur
 c⁄° 
SSL_METHOD
 *
DTLS_£rvî_mëhod
();

1608 
__owur
 c⁄° 
SSL_METHOD
 *
DTLS_˛õ¡_mëhod
();

1610 
__owur
 
STACK_OF
(
SSL_CIPHER
Ë*
SSL_gë_cùhîs
(c⁄° 
SSL
 *
s
);

1611 
__owur
 
STACK_OF
(
SSL_CIPHER
Ë*
SSL_CTX_gë_cùhîs
(c⁄° 
SSL_CTX
 *
˘x
);

1612 
__owur
 
STACK_OF
(
SSL_CIPHER
Ë*
SSL_gë_˛õ¡_cùhîs
(c⁄° 
SSL
 *
s
);

1613 
__owur
 
STACK_OF
(
SSL_CIPHER
Ë*
SSL_gë1_suµ‹ãd_cùhîs
(
SSL
 *
s
);

1615 
__owur
 
SSL_do_h™dshake
(
SSL
 *
s
);

1616 
SSL_ª√gŸüã
(
SSL
 *
s
);

1617 
__owur
 
SSL_ª√gŸüã_abbªvüãd
(
SSL
 *
s
);

1618 
__owur
 
SSL_ª√gŸüã_≥ndög
(
SSL
 *
s
);

1619 
SSL_shutdown
(
SSL
 *
s
);

1621 
__owur
 c⁄° 
SSL_METHOD
 *
SSL_CTX_gë_s¶_mëhod
(
SSL_CTX
 *
˘x
);

1622 
__owur
 c⁄° 
SSL_METHOD
 *
SSL_gë_s¶_mëhod
(
SSL
 *
s
);

1623 
__owur
 
SSL_£t_s¶_mëhod
(
SSL
 *
s
, c⁄° 
SSL_METHOD
 *
mëhod
);

1624 
__owur
 c⁄° *
SSL_Æît_ty≥_°rög_l⁄g
(
vÆue
);

1625 
__owur
 c⁄° *
SSL_Æît_ty≥_°rög
(
vÆue
);

1626 
__owur
 c⁄° *
SSL_Æît_desc_°rög_l⁄g
(
vÆue
);

1627 
__owur
 c⁄° *
SSL_Æît_desc_°rög
(
vÆue
);

1629 
SSL_£t_˛õ¡_CA_li°
(
SSL
 *
s
, 
STACK_OF
(
X509_NAME
Ë*
«me_li°
);

1630 
SSL_CTX_£t_˛õ¡_CA_li°
(
SSL_CTX
 *
˘x
, 
STACK_OF
(
X509_NAME
Ë*
«me_li°
);

1631 
__owur
 
STACK_OF
(
X509_NAME
Ë*
SSL_gë_˛õ¡_CA_li°
(c⁄° 
SSL
 *
s
);

1632 
__owur
 
STACK_OF
(
X509_NAME
Ë*
SSL_CTX_gë_˛õ¡_CA_li°
(c⁄° 
SSL_CTX
 *
s
);

1633 
__owur
 
SSL_add_˛õ¡_CA
(
SSL
 *
s¶
, 
X509
 *
x
);

1634 
__owur
 
SSL_CTX_add_˛õ¡_CA
(
SSL_CTX
 *
˘x
, 
X509
 *
x
);

1636 
SSL_£t_c⁄√˘_°©e
(
SSL
 *
s
);

1637 
SSL_£t_ac˚±_°©e
(
SSL
 *
s
);

1639 
__owur
 
SSL_gë_deÁu…_timeout
(c⁄° 
SSL
 *
s
);

1641 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

1642 
	#SSL_libøry_öô
(Ë
	`OPENSSL_öô_s¶
(0, 
NULL
)

	)

1645 
__owur
 *
SSL_CIPHER_des¸ùti⁄
(c⁄° 
SSL_CIPHER
 *, *
buf
, 
size
);

1646 
__owur
 
STACK_OF
(
X509_NAME
Ë*
SSL_dup_CA_li°
(STACK_OF(X509_NAMEË*
sk
);

1648 
__owur
 
SSL
 *
SSL_dup
(SSL *
s¶
);

1650 
__owur
 
X509
 *
SSL_gë_˚πifiˇã
(c⁄° 
SSL
 *
s¶
);

1653  
evp_pkey_°
 *
SSL_gë_¥iv©ekey
(c⁄° 
SSL
 *
s¶
);

1655 
__owur
 
X509
 *
SSL_CTX_gë0_˚πifiˇã
(c⁄° 
SSL_CTX
 *
˘x
);

1656 
__owur
 
EVP_PKEY
 *
SSL_CTX_gë0_¥iv©ekey
(c⁄° 
SSL_CTX
 *
˘x
);

1658 
SSL_CTX_£t_quõt_shutdown
(
SSL_CTX
 *
˘x
, 
mode
);

1659 
__owur
 
SSL_CTX_gë_quõt_shutdown
(c⁄° 
SSL_CTX
 *
˘x
);

1660 
SSL_£t_quõt_shutdown
(
SSL
 *
s¶
, 
mode
);

1661 
__owur
 
SSL_gë_quõt_shutdown
(c⁄° 
SSL
 *
s¶
);

1662 
SSL_£t_shutdown
(
SSL
 *
s¶
, 
mode
);

1663 
__owur
 
SSL_gë_shutdown
(c⁄° 
SSL
 *
s¶
);

1664 
__owur
 
SSL_vîsi⁄
(c⁄° 
SSL
 *
s¶
);

1665 
__owur
 
SSL_˛õ¡_vîsi⁄
(c⁄° 
SSL
 *
s
);

1666 
__owur
 
SSL_CTX_£t_deÁu…_vîify_∑ths
(
SSL_CTX
 *
˘x
);

1667 
__owur
 
SSL_CTX_£t_deÁu…_vîify_dú
(
SSL_CTX
 *
˘x
);

1668 
__owur
 
SSL_CTX_£t_deÁu…_vîify_fûe
(
SSL_CTX
 *
˘x
);

1669 
__owur
 
SSL_CTX_lﬂd_vîify_loˇti⁄s
(
SSL_CTX
 *
˘x
, c⁄° *
CAfûe
,

1670 c⁄° *
CA∑th
);

1671 
	#SSL_gë0_£ssi⁄
 
SSL_gë_£ssi⁄


	)

1672 
__owur
 
SSL_SESSION
 *
SSL_gë_£ssi⁄
(c⁄° 
SSL
 *
s¶
);

1673 
__owur
 
SSL_SESSION
 *
SSL_gë1_£ssi⁄
(
SSL
 *
s¶
);

1674 
__owur
 
SSL_CTX
 *
SSL_gë_SSL_CTX
(c⁄° 
SSL
 *
s¶
);

1675 
SSL_CTX
 *
SSL_£t_SSL_CTX
(
SSL
 *
s¶
, SSL_CTX *
˘x
);

1676 
SSL_£t_öfo_ˇŒback
(
SSL
 *
s¶
,

1677 (*
cb
Ë(c⁄° 
SSL
 *
s¶
, 
ty≥
, 
vÆ
));

1678 (*
SSL_gë_öfo_ˇŒback
(c⁄° 
SSL
 *
s¶
)Ë(c⁄° SSL *s¶, 
ty≥
,

1679 
vÆ
);

1680 
__owur
 
OSSL_HANDSHAKE_STATE
 
SSL_gë_°©e
(c⁄° 
SSL
 *
s¶
);

1682 
SSL_£t_vîify_ªsu…
(
SSL
 *
s¶
, 
v
);

1683 
__owur
 
SSL_gë_vîify_ªsu…
(c⁄° 
SSL
 *
s¶
);

1684 
__owur
 
STACK_OF
(
X509
Ë*
SSL_gë0_vîifõd_chaö
(c⁄° 
SSL
 *
s
);

1686 
__owur
 
size_t
 
SSL_gë_˛õ¡_øndom
(c⁄° 
SSL
 *
s¶
, *
out
,

1687 
size_t
 
ouéí
);

1688 
__owur
 
size_t
 
SSL_gë_£rvî_øndom
(c⁄° 
SSL
 *
s¶
, *
out
,

1689 
size_t
 
ouéí
);

1690 
__owur
 
size_t
 
SSL_SESSION_gë_ma°î_key
(c⁄° 
SSL_SESSION
 *
s¶
,

1691 *
out
, 
size_t
 
ouéí
);

1693 
	#SSL_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

1694 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_SSL
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

1695 
__owur
 
SSL_£t_ex_d©a
(
SSL
 *
s¶
, 
idx
, *
d©a
);

1696 *
SSL_gë_ex_d©a
(c⁄° 
SSL
 *
s¶
, 
idx
);

1697 
	#SSL_SESSION_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

1698 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_SSL_SESSION
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

1699 
__owur
 
SSL_SESSION_£t_ex_d©a
(
SSL_SESSION
 *
ss
, 
idx
, *
d©a
);

1700 *
SSL_SESSION_gë_ex_d©a
(c⁄° 
SSL_SESSION
 *
ss
, 
idx
);

1701 
	#SSL_CTX_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

1702 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_SSL_CTX
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

1703 
__owur
 
SSL_CTX_£t_ex_d©a
(
SSL_CTX
 *
s¶
, 
idx
, *
d©a
);

1704 *
SSL_CTX_gë_ex_d©a
(c⁄° 
SSL_CTX
 *
s¶
, 
idx
);

1706 
__owur
 
SSL_gë_ex_d©a_X509_STORE_CTX_idx
();

1708 
	#SSL_CTX_£ss_£t_ˇche_size
(
˘x
,
t
) \

1709 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SESS_CACHE_SIZE
,
t
,
NULL
)

	)

1710 
	#SSL_CTX_£ss_gë_ˇche_size
(
˘x
) \

1711 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_SESS_CACHE_SIZE
,0,
NULL
)

	)

1712 
	#SSL_CTX_£t_£ssi⁄_ˇche_mode
(
˘x
,
m
) \

1713 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SESS_CACHE_MODE
,
m
,
NULL
)

	)

1714 
	#SSL_CTX_gë_£ssi⁄_ˇche_mode
(
˘x
) \

1715 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_SESS_CACHE_MODE
,0,
NULL
)

	)

1717 
	#SSL_CTX_gë_deÁu…_ªad_ahód
(
˘x
Ë
	`SSL_CTX_gë_ªad_ahód
(˘x)

	)

1718 
	#SSL_CTX_£t_deÁu…_ªad_ahód
(
˘x
,
m
Ë
	`SSL_CTX_£t_ªad_ahód
(˘x,m)

	)

1719 
	#SSL_CTX_gë_ªad_ahód
(
˘x
) \

1720 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_READ_AHEAD
,0,
NULL
)

	)

1721 
	#SSL_CTX_£t_ªad_ahód
(
˘x
,
m
) \

1722 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_READ_AHEAD
,
m
,
NULL
)

	)

1723 
	#SSL_CTX_gë_max_˚π_li°
(
˘x
) \

1724 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_MAX_CERT_LIST
,0,
NULL
)

	)

1725 
	#SSL_CTX_£t_max_˚π_li°
(
˘x
,
m
) \

1726 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_MAX_CERT_LIST
,
m
,
NULL
)

	)

1727 
	#SSL_gë_max_˚π_li°
(
s¶
) \

1728 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_MAX_CERT_LIST
,0,
NULL
)

	)

1729 
	#SSL_£t_max_˚π_li°
(
s¶
,
m
) \

1730 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_MAX_CERT_LIST
,
m
,
NULL
)

	)

1732 
	#SSL_CTX_£t_max_£nd_‰agmít
(
˘x
,
m
) \

1733 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_MAX_SEND_FRAGMENT
,
m
,
NULL
)

	)

1734 
	#SSL_£t_max_£nd_‰agmít
(
s¶
,
m
) \

1735 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_MAX_SEND_FRAGMENT
,
m
,
NULL
)

	)

1736 
	#SSL_CTX_£t_•lô_£nd_‰agmít
(
˘x
,
m
) \

1737 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SPLIT_SEND_FRAGMENT
,
m
,
NULL
)

	)

1738 
	#SSL_£t_•lô_£nd_‰agmít
(
s¶
,
m
) \

1739 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_SPLIT_SEND_FRAGMENT
,
m
,
NULL
)

	)

1740 
	#SSL_CTX_£t_max_pùñöes
(
˘x
,
m
) \

1741 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_MAX_PIPELINES
,
m
,
NULL
)

	)

1742 
	#SSL_£t_max_pùñöes
(
s¶
,
m
) \

1743 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_MAX_PIPELINES
,
m
,
NULL
)

	)

1745 
SSL_CTX_£t_deÁu…_ªad_buf„r_Àn
(
SSL_CTX
 *
˘x
, 
size_t
 
Àn
);

1746 
SSL_£t_deÁu…_ªad_buf„r_Àn
(
SSL
 *
s
, 
size_t
 
Àn
);

1749 #i‚de‡
OPENSSL_NO_DH


1750 
SSL_CTX_£t_tmp_dh_ˇŒback
(
SSL_CTX
 *
˘x
,

1751 
DH
 *(*
dh
Ë(
SSL
 *
s¶
, 
is_exp‹t
,

1752 
keyÀngth
));

1753 
SSL_£t_tmp_dh_ˇŒback
(
SSL
 *
s¶
,

1754 
DH
 *(*
dh
Ë(
SSL
 *
s¶
, 
is_exp‹t
,

1755 
keyÀngth
));

1758 
__owur
 c⁄° 
COMP_METHOD
 *
SSL_gë_cuºít_com¥essi⁄
(
SSL
 *
s
);

1759 
__owur
 c⁄° 
COMP_METHOD
 *
SSL_gë_cuºít_ex∑nsi⁄
(
SSL
 *
s
);

1760 
__owur
 c⁄° *
SSL_COMP_gë_«me
(c⁄° 
COMP_METHOD
 *
comp
);

1761 
STACK_OF
(
SSL_COMP
Ë*
SSL_COMP_gë_com¥essi⁄_mëhods
();

1762 
__owur
 
STACK_OF
(
SSL_COMP
Ë*
SSL_COMP_£t0_com¥essi⁄_mëhods
(STACK_OF(SSL_COMP)

1763 *
mëhs
);

1764 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

1765 
	#SSL_COMP_‰ì_com¥essi⁄_mëhods
(Ë0Ë

	)

1767 
__owur
 
SSL_COMP_add_com¥essi⁄_mëhod
(
id
, 
COMP_METHOD
 *
cm
);

1769 c⁄° 
SSL_CIPHER
 *
SSL_CIPHER_föd
(
SSL
 *
s¶
, c⁄° *
±r
);

1770 
SSL_CIPHER_gë_cùhî_nid
(c⁄° 
SSL_CIPHER
 *
c
);

1771 
SSL_CIPHER_gë_dige°_nid
(c⁄° 
SSL_CIPHER
 *
c
);

1774 
__owur
 
SSL_£t_£ssi⁄_tickë_ext
(
SSL
 *
s
, *
ext_d©a
, 
ext_Àn
);

1776 
__owur
 
SSL_£t_£ssi⁄_tickë_ext_cb
(
SSL
 *
s
, 
és_£ssi⁄_tickë_ext_cb_‚
 
cb
,

1777 *
¨g
);

1780 
__owur
 
SSL_£t_£ssi⁄_£¸ë_cb
(
SSL
 *
s
,

1781 
és_£ssi⁄_£¸ë_cb_‚
 
és_£ssi⁄_£¸ë_cb
,

1782 *
¨g
);

1784 
SSL_CTX_£t_nŸ_ªsumabÀ_£ssi⁄_ˇŒback
(
SSL_CTX
 *
˘x
,

1785 (*
cb
Ë(
SSL
 *
s¶
,

1787 
is_f‹w¨d_£cuª
));

1789 
SSL_£t_nŸ_ªsumabÀ_£ssi⁄_ˇŒback
(
SSL
 *
s¶
,

1790 (*
cb
Ë(
SSL
 *
s¶
,

1792 
is_f‹w¨d_£cuª
));

1793 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

1794 
	#SSL_ˇche_hô
(
s
Ë
	`SSL_£ssi⁄_ªu£d
(s)

	)

1797 
__owur
 
SSL_£ssi⁄_ªu£d
(
SSL
 *
s
);

1798 
__owur
 
SSL_is_£rvî
(
SSL
 *
s
);

1800 
__owur
 __owu∏
SSL_CONF_CTX
 *
SSL_CONF_CTX_√w
();

1801 
SSL_CONF_CTX_föish
(
SSL_CONF_CTX
 *
c˘x
);

1802 
SSL_CONF_CTX_‰ì
(
SSL_CONF_CTX
 *
c˘x
);

1803 
SSL_CONF_CTX_£t_Êags
(
SSL_CONF_CTX
 *
c˘x
, 
Êags
);

1804 
__owur
 
SSL_CONF_CTX_˛ór_Êags
(
SSL_CONF_CTX
 *
c˘x
, 
Êags
);

1805 
__owur
 
SSL_CONF_CTX_£t1_¥efix
(
SSL_CONF_CTX
 *
c˘x
, c⁄° *
¥e
);

1807 
SSL_CONF_CTX_£t_s¶
(
SSL_CONF_CTX
 *
c˘x
, 
SSL
 *
s¶
);

1808 
SSL_CONF_CTX_£t_s¶_˘x
(
SSL_CONF_CTX
 *
c˘x
, 
SSL_CTX
 *
˘x
);

1810 
__owur
 
SSL_CONF_cmd
(
SSL_CONF_CTX
 *
c˘x
, c⁄° *
cmd
, c⁄° *
vÆue
);

1811 
__owur
 
SSL_CONF_cmd_¨gv
(
SSL_CONF_CTX
 *
c˘x
, *
∑rgc
, ***
∑rgv
);

1812 
__owur
 
SSL_CONF_cmd_vÆue_ty≥
(
SSL_CONF_CTX
 *
c˘x
, c⁄° *
cmd
);

1814 
SSL_add_s¶_moduÀ
();

1815 
SSL_c⁄fig
(
SSL
 *
s
, c⁄° *
«me
);

1816 
SSL_CTX_c⁄fig
(
SSL_CTX
 *
˘x
, c⁄° *
«me
);

1818 #i‚de‡
OPENSSL_NO_SSL_TRACE


1819 
SSL_åa˚
(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
,

1820 c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
);

1821 
__owur
 c⁄° *
SSL_CIPHER_°™d¨d_«me
(c⁄° 
SSL_CIPHER
 *
c
);

1824 #i‚de‡
OPENSSL_NO_SOCK


1825 
DTLSv1_li°í
(
SSL
 *
s
, 
BIO_ADDR
 *
˛õ¡
);

1828 #i‚de‡
OPENSSL_NO_CT


1836 (*
s¶_˘_vÆid©i⁄_cb
)(c⁄° 
	tCT_POLICY_EVAL_CTX
 *
	t˘x
,

1837 c⁄° 
	tSTACK_OF
(
	tSCT
Ë*
	ts˘s
, *
	t¨g
);

1851 
SSL_£t_˘_vÆid©i⁄_ˇŒback
(
SSL
 *
s
, 
s¶_˘_vÆid©i⁄_cb
 
ˇŒback
,

1852 *
¨g
);

1853 
SSL_CTX_£t_˘_vÆid©i⁄_ˇŒback
(
SSL_CTX
 *
˘x
,

1854 
s¶_˘_vÆid©i⁄_cb
 
ˇŒback
,

1855 *
¨g
);

1856 
	#SSL_dißbÀ_˘
(
s
) \

1857 ((Ë
	`SSL_£t_vÆid©i⁄_ˇŒback
((
s
), 
NULL
, NULL))

	)

1858 
	#SSL_CTX_dißbÀ_˘
(
˘x
) \

1859 ((Ë
	`SSL_CTX_£t_vÆid©i⁄_ˇŒback
((
˘x
), 
NULL
, NULL))

	)

1867 
SSL_CT_VALIDATION_PERMISSIVE
 = 0,

1868 
SSL_CT_VALIDATION_STRICT


1879 
SSL_íabÀ_˘
(
SSL
 *
s
, 
vÆid©i⁄_mode
);

1880 
SSL_CTX_íabÀ_˘
(
SSL_CTX
 *
˘x
, 
vÆid©i⁄_mode
);

1885 
SSL_˘_is_íabÀd
(c⁄° 
SSL
 *
s
);

1886 
SSL_CTX_˘_is_íabÀd
(c⁄° 
SSL_CTX
 *
˘x
);

1889 c⁄° 
STACK_OF
(
SCT
Ë*
SSL_gë0_≥î_s˘s
(
SSL
 *
s
);

1898 
SSL_CTX_£t_deÁu…_˘log_li°_fûe
(
SSL_CTX
 *
˘x
);

1907 
SSL_CTX_£t_˘log_li°_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
∑th
);

1913 
SSL_CTX_£t0_˘log_°‹e
(
SSL_CTX
 *
˘x
, 
CTLOG_STORE
 *
logs
);

1922 c⁄° 
CTLOG_STORE
 *
SSL_CTX_gë0_˘log_°‹e
(c⁄° 
SSL_CTX
 *
˘x
);

1928 
	#SSL_SECOP_OTHER_TYPE
 0xffff0000

	)

1929 
	#SSL_SECOP_OTHER_NONE
 0

	)

1930 
	#SSL_SECOP_OTHER_CIPHER
 (1 << 16)

	)

1931 
	#SSL_SECOP_OTHER_CURVE
 (2 << 16)

	)

1932 
	#SSL_SECOP_OTHER_DH
 (3 << 16)

	)

1933 
	#SSL_SECOP_OTHER_PKEY
 (4 << 16)

	)

1934 
	#SSL_SECOP_OTHER_SIGALG
 (5 << 16)

	)

1935 
	#SSL_SECOP_OTHER_CERT
 (6 << 16)

	)

1938 
	#SSL_SECOP_PEER
 0x1000

	)

1944 
	#SSL_SECOP_CIPHER_SUPPORTED
 (1 | 
SSL_SECOP_OTHER_CIPHER
)

	)

1946 
	#SSL_SECOP_CIPHER_SHARED
 (2 | 
SSL_SECOP_OTHER_CIPHER
)

	)

1948 
	#SSL_SECOP_CIPHER_CHECK
 (3 | 
SSL_SECOP_OTHER_CIPHER
)

	)

1950 
	#SSL_SECOP_CURVE_SUPPORTED
 (4 | 
SSL_SECOP_OTHER_CURVE
)

	)

1952 
	#SSL_SECOP_CURVE_SHARED
 (5 | 
SSL_SECOP_OTHER_CURVE
)

	)

1954 
	#SSL_SECOP_CURVE_CHECK
 (6 | 
SSL_SECOP_OTHER_CURVE
)

	)

1956 
	#SSL_SECOP_TMP_DH
 (7 | 
SSL_SECOP_OTHER_PKEY
)

	)

1958 
	#SSL_SECOP_VERSION
 (9 | 
SSL_SECOP_OTHER_NONE
)

	)

1960 
	#SSL_SECOP_TICKET
 (10 | 
SSL_SECOP_OTHER_NONE
)

	)

1962 
	#SSL_SECOP_SIGALG_SUPPORTED
 (11 | 
SSL_SECOP_OTHER_SIGALG
)

	)

1964 
	#SSL_SECOP_SIGALG_SHARED
 (12 | 
SSL_SECOP_OTHER_SIGALG
)

	)

1966 
	#SSL_SECOP_SIGALG_CHECK
 (13 | 
SSL_SECOP_OTHER_SIGALG
)

	)

1968 
	#SSL_SECOP_SIGALG_MASK
 (14 | 
SSL_SECOP_OTHER_SIGALG
)

	)

1970 
	#SSL_SECOP_COMPRESSION
 (15 | 
SSL_SECOP_OTHER_NONE
)

	)

1972 
	#SSL_SECOP_EE_KEY
 (16 | 
SSL_SECOP_OTHER_CERT
)

	)

1974 
	#SSL_SECOP_CA_KEY
 (17 | 
SSL_SECOP_OTHER_CERT
)

	)

1976 
	#SSL_SECOP_CA_MD
 (18 | 
SSL_SECOP_OTHER_CERT
)

	)

1978 
	#SSL_SECOP_PEER_EE_KEY
 (
SSL_SECOP_EE_KEY
 | 
SSL_SECOP_PEER
)

	)

1980 
	#SSL_SECOP_PEER_CA_KEY
 (
SSL_SECOP_CA_KEY
 | 
SSL_SECOP_PEER
)

	)

1982 
	#SSL_SECOP_PEER_CA_MD
 (
SSL_SECOP_CA_MD
 | 
SSL_SECOP_PEER
)

	)

1984 
SSL_£t_£curôy_Àvñ
(
SSL
 *
s
, 
Àvñ
);

1985 
__owur
 
SSL_gë_£curôy_Àvñ
(c⁄° 
SSL
 *
s
);

1986 
SSL_£t_£curôy_ˇŒback
(
SSL
 *
s
,

1987 (*
cb
Ë(c⁄° 
SSL
 *
s
, c⁄° 
SSL_CTX
 *
˘x
, 
›
,

1988 
bôs
, 
nid
, *
Ÿhî
,

1989 *
ex
));

1990 (*
SSL_gë_£curôy_ˇŒback
(c⁄° 
SSL
 *
s
)Ë(c⁄° SSL *s, c⁄° 
SSL_CTX
 *
˘x
, 
›
,

1991 
bôs
, 
nid
,

1992 *
Ÿhî
, *
ex
);

1993 
SSL_£t0_£curôy_ex_d©a
(
SSL
 *
s
, *
ex
);

1994 
__owur
 *
SSL_gë0_£curôy_ex_d©a
(c⁄° 
SSL
 *
s
);

1996 
SSL_CTX_£t_£curôy_Àvñ
(
SSL_CTX
 *
˘x
, 
Àvñ
);

1997 
__owur
 
SSL_CTX_gë_£curôy_Àvñ
(c⁄° 
SSL_CTX
 *
˘x
);

1998 
SSL_CTX_£t_£curôy_ˇŒback
(
SSL_CTX
 *
˘x
,

1999 (*
cb
Ë(c⁄° 
SSL
 *
s
, c⁄° 
SSL_CTX
 *
˘x
, 
›
,

2000 
bôs
, 
nid
, *
Ÿhî
,

2001 *
ex
));

2002 (*
SSL_CTX_gë_£curôy_ˇŒback
(c⁄° 
SSL_CTX
 *
˘x
)Ë(c⁄° 
SSL
 *
s
,

2003 c⁄° 
SSL_CTX
 *
˘x
,

2004 
›
, 
bôs
,

2005 
nid
,

2006 *
Ÿhî
,

2007 *
ex
);

2008 
SSL_CTX_£t0_£curôy_ex_d©a
(
SSL_CTX
 *
˘x
, *
ex
);

2009 
__owur
 *
SSL_CTX_gë0_£curôy_ex_d©a
(c⁄° 
SSL_CTX
 *
˘x
);

2012 
	#OPENSSL_INIT_NO_LOAD_SSL_STRINGS
 0x00100000L

	)

2013 
	#OPENSSL_INIT_LOAD_SSL_STRINGS
 0x00200000L

	)

2015 
	#OPENSSL_INIT_SSL_DEFAULT
 \

2016 (
OPENSSL_INIT_LOAD_SSL_STRINGS
 | 
OPENSSL_INIT_LOAD_CRYPTO_STRINGS
)

	)

2018 
OPENSSL_öô_s¶
(
uöt64_t
 
›ts
, c⁄° 
OPENSSL_INIT_SETTINGS
 *
£âögs
);

2020 #i‚de‡
OPENSSL_NO_UNIT_TEST


2021 
__owur
 c⁄° 
›ís¶_s¶_ã°_fun˘i⁄s
 *
SSL_ã°_fun˘i⁄s
();

2024 c⁄° 
SSL_vîsi⁄_°r
[];

2032 
ERR_lﬂd_SSL_°rögs
();

2037 
	#SSL_F_CHECK_SUITEB_CIPHER_LIST
 331

	)

2038 
	#SSL_F_CT_MOVE_SCTS
 345

	)

2039 
	#SSL_F_CT_STRICT
 349

	)

2040 
	#SSL_F_D2I_SSL_SESSION
 103

	)

2041 
	#SSL_F_DANE_CTX_ENABLE
 347

	)

2042 
	#SSL_F_DANE_MTYPE_SET
 393

	)

2043 
	#SSL_F_DANE_TLSA_ADD
 394

	)

2044 
	#SSL_F_DO_DTLS1_WRITE
 245

	)

2045 
	#SSL_F_DO_SSL3_WRITE
 104

	)

2046 
	#SSL_F_DTLS1_BUFFER_RECORD
 247

	)

2047 
	#SSL_F_DTLS1_CHECK_TIMEOUT_NUM
 318

	)

2048 
	#SSL_F_DTLS1_HEARTBEAT
 305

	)

2049 
	#SSL_F_DTLS1_PREPROCESS_FRAGMENT
 288

	)

2050 
	#SSL_F_DTLS1_PROCESS_RECORD
 257

	)

2051 
	#SSL_F_DTLS1_READ_BYTES
 258

	)

2052 
	#SSL_F_DTLS1_READ_FAILED
 339

	)

2053 
	#SSL_F_DTLS1_RETRANSMIT_MESSAGE
 390

	)

2054 
	#SSL_F_DTLS1_WRITE_APP_DATA_BYTES
 268

	)

2055 
	#SSL_F_DTLSV1_LISTEN
 350

	)

2056 
	#SSL_F_DTLS_CONSTRUCT_CHANGE_CIPHER_SPEC
 371

	)

2057 
	#SSL_F_DTLS_CONSTRUCT_HELLO_VERIFY_REQUEST
 385

	)

2058 
	#SSL_F_DTLS_GET_REASSEMBLED_MESSAGE
 370

	)

2059 
	#SSL_F_DTLS_PROCESS_HELLO_VERIFY
 386

	)

2060 
	#SSL_F_OPENSSL_INIT_SSL
 342

	)

2061 
	#SSL_F_READ_STATE_MACHINE
 352

	)

2062 
	#SSL_F_SSL3_CHANGE_CIPHER_STATE
 129

	)

2063 
	#SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM
 130

	)

2064 
	#SSL_F_SSL3_CTRL
 213

	)

2065 
	#SSL_F_SSL3_CTX_CTRL
 133

	)

2066 
	#SSL_F_SSL3_DIGEST_CACHED_RECORDS
 293

	)

2067 
	#SSL_F_SSL3_DO_CHANGE_CIPHER_SPEC
 292

	)

2068 
	#SSL_F_SSL3_FINAL_FINISH_MAC
 285

	)

2069 
	#SSL_F_SSL3_GENERATE_KEY_BLOCK
 238

	)

2070 
	#SSL_F_SSL3_GENERATE_MASTER_SECRET
 388

	)

2071 
	#SSL_F_SSL3_GET_RECORD
 143

	)

2072 
	#SSL_F_SSL3_INIT_FINISHED_MAC
 397

	)

2073 
	#SSL_F_SSL3_OUTPUT_CERT_CHAIN
 147

	)

2074 
	#SSL_F_SSL3_READ_BYTES
 148

	)

2075 
	#SSL_F_SSL3_READ_N
 149

	)

2076 
	#SSL_F_SSL3_SETUP_KEY_BLOCK
 157

	)

2077 
	#SSL_F_SSL3_SETUP_READ_BUFFER
 156

	)

2078 
	#SSL_F_SSL3_SETUP_WRITE_BUFFER
 291

	)

2079 
	#SSL_F_SSL3_WRITE_BYTES
 158

	)

2080 
	#SSL_F_SSL3_WRITE_PENDING
 159

	)

2081 
	#SSL_F_SSL_ADD_CERT_CHAIN
 316

	)

2082 
	#SSL_F_SSL_ADD_CERT_TO_BUF
 319

	)

2083 
	#SSL_F_SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT
 298

	)

2084 
	#SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT
 277

	)

2085 
	#SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT
 307

	)

2086 
	#SSL_F_SSL_ADD_DIR_CERT_SUBJECTS_TO_STACK
 215

	)

2087 
	#SSL_F_SSL_ADD_FILE_CERT_SUBJECTS_TO_STACK
 216

	)

2088 
	#SSL_F_SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT
 299

	)

2089 
	#SSL_F_SSL_ADD_SERVERHELLO_TLSEXT
 278

	)

2090 
	#SSL_F_SSL_ADD_SERVERHELLO_USE_SRTP_EXT
 308

	)

2091 
	#SSL_F_SSL_BAD_METHOD
 160

	)

2092 
	#SSL_F_SSL_BUILD_CERT_CHAIN
 332

	)

2093 
	#SSL_F_SSL_BYTES_TO_CIPHER_LIST
 161

	)

2094 
	#SSL_F_SSL_CERT_ADD0_CHAIN_CERT
 346

	)

2095 
	#SSL_F_SSL_CERT_DUP
 221

	)

2096 
	#SSL_F_SSL_CERT_NEW
 162

	)

2097 
	#SSL_F_SSL_CERT_SET0_CHAIN
 340

	)

2098 
	#SSL_F_SSL_CHECK_PRIVATE_KEY
 163

	)

2099 
	#SSL_F_SSL_CHECK_SERVERHELLO_TLSEXT
 280

	)

2100 
	#SSL_F_SSL_CHECK_SRVR_ECC_CERT_AND_ALG
 279

	)

2101 
	#SSL_F_SSL_CIPHER_PROCESS_RULESTR
 230

	)

2102 
	#SSL_F_SSL_CIPHER_STRENGTH_SORT
 231

	)

2103 
	#SSL_F_SSL_CLEAR
 164

	)

2104 
	#SSL_F_SSL_COMP_ADD_COMPRESSION_METHOD
 165

	)

2105 
	#SSL_F_SSL_CONF_CMD
 334

	)

2106 
	#SSL_F_SSL_CREATE_CIPHER_LIST
 166

	)

2107 
	#SSL_F_SSL_CTRL
 232

	)

2108 
	#SSL_F_SSL_CTX_CHECK_PRIVATE_KEY
 168

	)

2109 
	#SSL_F_SSL_CTX_ENABLE_CT
 398

	)

2110 
	#SSL_F_SSL_CTX_MAKE_PROFILES
 309

	)

2111 
	#SSL_F_SSL_CTX_NEW
 169

	)

2112 
	#SSL_F_SSL_CTX_SET_ALPN_PROTOS
 343

	)

2113 
	#SSL_F_SSL_CTX_SET_CIPHER_LIST
 269

	)

2114 
	#SSL_F_SSL_CTX_SET_CLIENT_CERT_ENGINE
 290

	)

2115 
	#SSL_F_SSL_CTX_SET_CT_VALIDATION_CALLBACK
 396

	)

2116 
	#SSL_F_SSL_CTX_SET_SESSION_ID_CONTEXT
 219

	)

2117 
	#SSL_F_SSL_CTX_SET_SSL_VERSION
 170

	)

2118 
	#SSL_F_SSL_CTX_USE_CERTIFICATE
 171

	)

2119 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_ASN1
 172

	)

2120 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_FILE
 173

	)

2121 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY
 174

	)

2122 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY_ASN1
 175

	)

2123 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY_FILE
 176

	)

2124 
	#SSL_F_SSL_CTX_USE_PSK_IDENTITY_HINT
 272

	)

2125 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY
 177

	)

2126 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_ASN1
 178

	)

2127 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_FILE
 179

	)

2128 
	#SSL_F_SSL_CTX_USE_SERVERINFO
 336

	)

2129 
	#SSL_F_SSL_CTX_USE_SERVERINFO_FILE
 337

	)

2130 
	#SSL_F_SSL_DANE_DUP
 403

	)

2131 
	#SSL_F_SSL_DANE_ENABLE
 395

	)

2132 
	#SSL_F_SSL_DO_CONFIG
 391

	)

2133 
	#SSL_F_SSL_DO_HANDSHAKE
 180

	)

2134 
	#SSL_F_SSL_DUP_CA_LIST
 408

	)

2135 
	#SSL_F_SSL_ENABLE_CT
 402

	)

2136 
	#SSL_F_SSL_GET_NEW_SESSION
 181

	)

2137 
	#SSL_F_SSL_GET_PREV_SESSION
 217

	)

2138 
	#SSL_F_SSL_GET_SERVER_CERT_INDEX
 322

	)

2139 
	#SSL_F_SSL_GET_SIGN_PKEY
 183

	)

2140 
	#SSL_F_SSL_INIT_WBIO_BUFFER
 184

	)

2141 
	#SSL_F_SSL_LOAD_CLIENT_CA_FILE
 185

	)

2142 
	#SSL_F_SSL_MODULE_INIT
 392

	)

2143 
	#SSL_F_SSL_NEW
 186

	)

2144 
	#SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT
 300

	)

2145 
	#SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT
 302

	)

2146 
	#SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT
 310

	)

2147 
	#SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT
 301

	)

2148 
	#SSL_F_SSL_PARSE_SERVERHELLO_TLSEXT
 303

	)

2149 
	#SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT
 311

	)

2150 
	#SSL_F_SSL_PEEK
 270

	)

2151 
	#SSL_F_SSL_READ
 223

	)

2152 
	#SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT
 320

	)

2153 
	#SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT
 321

	)

2154 
	#SSL_F_SSL_SESSION_DUP
 348

	)

2155 
	#SSL_F_SSL_SESSION_NEW
 189

	)

2156 
	#SSL_F_SSL_SESSION_PRINT_FP
 190

	)

2157 
	#SSL_F_SSL_SESSION_SET1_ID_CONTEXT
 312

	)

2158 
	#SSL_F_SSL_SET_ALPN_PROTOS
 344

	)

2159 
	#SSL_F_SSL_SET_CERT
 191

	)

2160 
	#SSL_F_SSL_SET_CIPHER_LIST
 271

	)

2161 
	#SSL_F_SSL_SET_CT_VALIDATION_CALLBACK
 399

	)

2162 
	#SSL_F_SSL_SET_FD
 192

	)

2163 
	#SSL_F_SSL_SET_PKEY
 193

	)

2164 
	#SSL_F_SSL_SET_RFD
 194

	)

2165 
	#SSL_F_SSL_SET_SESSION
 195

	)

2166 
	#SSL_F_SSL_SET_SESSION_ID_CONTEXT
 218

	)

2167 
	#SSL_F_SSL_SET_SESSION_TICKET_EXT
 294

	)

2168 
	#SSL_F_SSL_SET_WFD
 196

	)

2169 
	#SSL_F_SSL_SHUTDOWN
 224

	)

2170 
	#SSL_F_SSL_SRP_CTX_INIT
 313

	)

2171 
	#SSL_F_SSL_START_ASYNC_JOB
 389

	)

2172 
	#SSL_F_SSL_UNDEFINED_FUNCTION
 197

	)

2173 
	#SSL_F_SSL_UNDEFINED_VOID_FUNCTION
 244

	)

2174 
	#SSL_F_SSL_USE_CERTIFICATE
 198

	)

2175 
	#SSL_F_SSL_USE_CERTIFICATE_ASN1
 199

	)

2176 
	#SSL_F_SSL_USE_CERTIFICATE_FILE
 200

	)

2177 
	#SSL_F_SSL_USE_PRIVATEKEY
 201

	)

2178 
	#SSL_F_SSL_USE_PRIVATEKEY_ASN1
 202

	)

2179 
	#SSL_F_SSL_USE_PRIVATEKEY_FILE
 203

	)

2180 
	#SSL_F_SSL_USE_PSK_IDENTITY_HINT
 273

	)

2181 
	#SSL_F_SSL_USE_RSAPRIVATEKEY
 204

	)

2182 
	#SSL_F_SSL_USE_RSAPRIVATEKEY_ASN1
 205

	)

2183 
	#SSL_F_SSL_USE_RSAPRIVATEKEY_FILE
 206

	)

2184 
	#SSL_F_SSL_VALIDATE_CT
 400

	)

2185 
	#SSL_F_SSL_VERIFY_CERT_CHAIN
 207

	)

2186 
	#SSL_F_SSL_WRITE
 208

	)

2187 
	#SSL_F_STATE_MACHINE
 353

	)

2188 
	#SSL_F_TLS12_CHECK_PEER_SIGALG
 333

	)

2189 
	#SSL_F_TLS1_CHANGE_CIPHER_STATE
 209

	)

2190 
	#SSL_F_TLS1_CHECK_DUPLICATE_EXTENSIONS
 341

	)

2191 
	#SSL_F_TLS1_ENC
 401

	)

2192 
	#SSL_F_TLS1_EXPORT_KEYING_MATERIAL
 314

	)

2193 
	#SSL_F_TLS1_GET_CURVELIST
 338

	)

2194 
	#SSL_F_TLS1_PRF
 284

	)

2195 
	#SSL_F_TLS1_SETUP_KEY_BLOCK
 211

	)

2196 
	#SSL_F_TLS1_SET_SERVER_SIGALGS
 335

	)

2197 
	#SSL_F_TLS_CLIENT_KEY_EXCHANGE_POST_WORK
 354

	)

2198 
	#SSL_F_TLS_CONSTRUCT_CERTIFICATE_REQUEST
 372

	)

2199 
	#SSL_F_TLS_CONSTRUCT_CLIENT_CERTIFICATE
 355

	)

2200 
	#SSL_F_TLS_CONSTRUCT_CLIENT_HELLO
 356

	)

2201 
	#SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE
 357

	)

2202 
	#SSL_F_TLS_CONSTRUCT_CLIENT_VERIFY
 358

	)

2203 
	#SSL_F_TLS_CONSTRUCT_FINISHED
 359

	)

2204 
	#SSL_F_TLS_CONSTRUCT_HELLO_REQUEST
 373

	)

2205 
	#SSL_F_TLS_CONSTRUCT_SERVER_CERTIFICATE
 374

	)

2206 
	#SSL_F_TLS_CONSTRUCT_SERVER_DONE
 375

	)

2207 
	#SSL_F_TLS_CONSTRUCT_SERVER_HELLO
 376

	)

2208 
	#SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE
 377

	)

2209 
	#SSL_F_TLS_GET_MESSAGE_BODY
 351

	)

2210 
	#SSL_F_TLS_GET_MESSAGE_HEADER
 387

	)

2211 
	#SSL_F_TLS_POST_PROCESS_CLIENT_HELLO
 378

	)

2212 
	#SSL_F_TLS_POST_PROCESS_CLIENT_KEY_EXCHANGE
 384

	)

2213 
	#SSL_F_TLS_PREPARE_CLIENT_CERTIFICATE
 360

	)

2214 
	#SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST
 361

	)

2215 
	#SSL_F_TLS_PROCESS_CERT_STATUS
 362

	)

2216 
	#SSL_F_TLS_PROCESS_CERT_VERIFY
 379

	)

2217 
	#SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC
 363

	)

2218 
	#SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE
 380

	)

2219 
	#SSL_F_TLS_PROCESS_CLIENT_HELLO
 381

	)

2220 
	#SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE
 382

	)

2221 
	#SSL_F_TLS_PROCESS_FINISHED
 364

	)

2222 
	#SSL_F_TLS_PROCESS_KEY_EXCHANGE
 365

	)

2223 
	#SSL_F_TLS_PROCESS_NEW_SESSION_TICKET
 366

	)

2224 
	#SSL_F_TLS_PROCESS_NEXT_PROTO
 383

	)

2225 
	#SSL_F_TLS_PROCESS_SERVER_CERTIFICATE
 367

	)

2226 
	#SSL_F_TLS_PROCESS_SERVER_DONE
 368

	)

2227 
	#SSL_F_TLS_PROCESS_SERVER_HELLO
 369

	)

2228 
	#SSL_F_USE_CERTIFICATE_CHAIN_FILE
 220

	)

2231 
	#SSL_R_APP_DATA_IN_HANDSHAKE
 100

	)

2232 
	#SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT
 272

	)

2233 
	#SSL_R_AT_LEAST_TLS_1_0_NEEDED_IN_FIPS_MODE
 143

	)

2234 
	#SSL_R_AT_LEAST_TLS_1_2_NEEDED_IN_SUITEB_MODE
 158

	)

2235 
	#SSL_R_BAD_CHANGE_CIPHER_SPEC
 103

	)

2236 
	#SSL_R_BAD_DATA
 390

	)

2237 
	#SSL_R_BAD_DATA_RETURNED_BY_CALLBACK
 106

	)

2238 
	#SSL_R_BAD_DECOMPRESSION
 107

	)

2239 
	#SSL_R_BAD_DH_VALUE
 102

	)

2240 
	#SSL_R_BAD_DIGEST_LENGTH
 111

	)

2241 
	#SSL_R_BAD_ECC_CERT
 304

	)

2242 
	#SSL_R_BAD_ECPOINT
 306

	)

2243 
	#SSL_R_BAD_HANDSHAKE_LENGTH
 332

	)

2244 
	#SSL_R_BAD_HELLO_REQUEST
 105

	)

2245 
	#SSL_R_BAD_LENGTH
 271

	)

2246 
	#SSL_R_BAD_PACKET_LENGTH
 115

	)

2247 
	#SSL_R_BAD_PROTOCOL_VERSION_NUMBER
 116

	)

2248 
	#SSL_R_BAD_RSA_ENCRYPT
 119

	)

2249 
	#SSL_R_BAD_SIGNATURE
 123

	)

2250 
	#SSL_R_BAD_SRP_A_LENGTH
 347

	)

2251 
	#SSL_R_BAD_SRP_PARAMETERS
 371

	)

2252 
	#SSL_R_BAD_SRTP_MKI_VALUE
 352

	)

2253 
	#SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST
 353

	)

2254 
	#SSL_R_BAD_SSL_FILETYPE
 124

	)

2255 
	#SSL_R_BAD_VALUE
 384

	)

2256 
	#SSL_R_BAD_WRITE_RETRY
 127

	)

2257 
	#SSL_R_BIO_NOT_SET
 128

	)

2258 
	#SSL_R_BLOCK_CIPHER_PAD_IS_WRONG
 129

	)

2259 
	#SSL_R_BN_LIB
 130

	)

2260 
	#SSL_R_CA_DN_LENGTH_MISMATCH
 131

	)

2261 
	#SSL_R_CA_KEY_TOO_SMALL
 397

	)

2262 
	#SSL_R_CA_MD_TOO_WEAK
 398

	)

2263 
	#SSL_R_CCS_RECEIVED_EARLY
 133

	)

2264 
	#SSL_R_CERTIFICATE_VERIFY_FAILED
 134

	)

2265 
	#SSL_R_CERT_CB_ERROR
 377

	)

2266 
	#SSL_R_CERT_LENGTH_MISMATCH
 135

	)

2267 
	#SSL_R_CIPHER_CODE_WRONG_LENGTH
 137

	)

2268 
	#SSL_R_CIPHER_OR_HASH_UNAVAILABLE
 138

	)

2269 
	#SSL_R_CLIENTHELLO_TLSEXT
 226

	)

2270 
	#SSL_R_COMPRESSED_LENGTH_TOO_LONG
 140

	)

2271 
	#SSL_R_COMPRESSION_DISABLED
 343

	)

2272 
	#SSL_R_COMPRESSION_FAILURE
 141

	)

2273 
	#SSL_R_COMPRESSION_ID_NOT_WITHIN_PRIVATE_RANGE
 307

	)

2274 
	#SSL_R_COMPRESSION_LIBRARY_ERROR
 142

	)

2275 
	#SSL_R_CONNECTION_TYPE_NOT_SET
 144

	)

2276 
	#SSL_R_CONTEXT_NOT_DANE_ENABLED
 167

	)

2277 
	#SSL_R_COOKIE_GEN_CALLBACK_FAILURE
 400

	)

2278 
	#SSL_R_COOKIE_MISMATCH
 308

	)

2279 
	#SSL_R_CUSTOM_EXT_HANDLER_ALREADY_INSTALLED
 206

	)

2280 
	#SSL_R_DANE_ALREADY_ENABLED
 172

	)

2281 
	#SSL_R_DANE_CANNOT_OVERRIDE_MTYPE_FULL
 173

	)

2282 
	#SSL_R_DANE_NOT_ENABLED
 175

	)

2283 
	#SSL_R_DANE_TLSA_BAD_CERTIFICATE
 180

	)

2284 
	#SSL_R_DANE_TLSA_BAD_CERTIFICATE_USAGE
 184

	)

2285 
	#SSL_R_DANE_TLSA_BAD_DATA_LENGTH
 189

	)

2286 
	#SSL_R_DANE_TLSA_BAD_DIGEST_LENGTH
 192

	)

2287 
	#SSL_R_DANE_TLSA_BAD_MATCHING_TYPE
 200

	)

2288 
	#SSL_R_DANE_TLSA_BAD_PUBLIC_KEY
 201

	)

2289 
	#SSL_R_DANE_TLSA_BAD_SELECTOR
 202

	)

2290 
	#SSL_R_DANE_TLSA_NULL_DATA
 203

	)

2291 
	#SSL_R_DATA_BETWEEN_CCS_AND_FINISHED
 145

	)

2292 
	#SSL_R_DATA_LENGTH_TOO_LONG
 146

	)

2293 
	#SSL_R_DECRYPTION_FAILED
 147

	)

2294 
	#SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC
 281

	)

2295 
	#SSL_R_DH_KEY_TOO_SMALL
 394

	)

2296 
	#SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG
 148

	)

2297 
	#SSL_R_DIGEST_CHECK_FAILED
 149

	)

2298 
	#SSL_R_DTLS_MESSAGE_TOO_BIG
 334

	)

2299 
	#SSL_R_DUPLICATE_COMPRESSION_ID
 309

	)

2300 
	#SSL_R_ECC_CERT_NOT_FOR_SIGNING
 318

	)

2301 
	#SSL_R_ECDH_REQUIRED_FOR_SUITEB_MODE
 374

	)

2302 
	#SSL_R_EE_KEY_TOO_SMALL
 399

	)

2303 
	#SSL_R_EMPTY_SRTP_PROTECTION_PROFILE_LIST
 354

	)

2304 
	#SSL_R_ENCRYPTED_LENGTH_TOO_LONG
 150

	)

2305 
	#SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST
 151

	)

2306 
	#SSL_R_ERROR_SETTING_TLSA_BASE_DOMAIN
 204

	)

2307 
	#SSL_R_EXCESSIVE_MESSAGE_SIZE
 152

	)

2308 
	#SSL_R_EXTRA_DATA_IN_MESSAGE
 153

	)

2309 
	#SSL_R_FAILED_TO_INIT_ASYNC
 405

	)

2310 
	#SSL_R_FRAGMENTED_CLIENT_HELLO
 401

	)

2311 
	#SSL_R_GOT_A_FIN_BEFORE_A_CCS
 154

	)

2312 
	#SSL_R_HTTPS_PROXY_REQUEST
 155

	)

2313 
	#SSL_R_HTTP_REQUEST
 156

	)

2314 
	#SSL_R_ILLEGAL_SUITEB_DIGEST
 380

	)

2315 
	#SSL_R_INAPPROPRIATE_FALLBACK
 373

	)

2316 
	#SSL_R_INCONSISTENT_COMPRESSION
 340

	)

2317 
	#SSL_R_INCONSISTENT_EXTMS
 104

	)

2318 
	#SSL_R_INVALID_COMMAND
 280

	)

2319 
	#SSL_R_INVALID_COMPRESSION_ALGORITHM
 341

	)

2320 
	#SSL_R_INVALID_CONFIGURATION_NAME
 113

	)

2321 
	#SSL_R_INVALID_CT_VALIDATION_TYPE
 212

	)

2322 
	#SSL_R_INVALID_NULL_CMD_NAME
 385

	)

2323 
	#SSL_R_INVALID_SEQUENCE_NUMBER
 402

	)

2324 
	#SSL_R_INVALID_SERVERINFO_DATA
 388

	)

2325 
	#SSL_R_INVALID_SRP_USERNAME
 357

	)

2326 
	#SSL_R_INVALID_STATUS_RESPONSE
 328

	)

2327 
	#SSL_R_INVALID_TICKET_KEYS_LENGTH
 325

	)

2328 
	#SSL_R_LENGTH_MISMATCH
 159

	)

2329 
	#SSL_R_LENGTH_TOO_LONG
 404

	)

2330 
	#SSL_R_LENGTH_TOO_SHORT
 160

	)

2331 
	#SSL_R_LIBRARY_BUG
 274

	)

2332 
	#SSL_R_LIBRARY_HAS_NO_CIPHERS
 161

	)

2333 
	#SSL_R_MISSING_DSA_SIGNING_CERT
 165

	)

2334 
	#SSL_R_MISSING_ECDSA_SIGNING_CERT
 381

	)

2335 
	#SSL_R_MISSING_RSA_CERTIFICATE
 168

	)

2336 
	#SSL_R_MISSING_RSA_ENCRYPTING_CERT
 169

	)

2337 
	#SSL_R_MISSING_RSA_SIGNING_CERT
 170

	)

2338 
	#SSL_R_MISSING_SRP_PARAM
 358

	)

2339 
	#SSL_R_MISSING_TMP_DH_KEY
 171

	)

2340 
	#SSL_R_MISSING_TMP_ECDH_KEY
 311

	)

2341 
	#SSL_R_NO_CERTIFICATES_RETURNED
 176

	)

2342 
	#SSL_R_NO_CERTIFICATE_ASSIGNED
 177

	)

2343 
	#SSL_R_NO_CERTIFICATE_SET
 179

	)

2344 
	#SSL_R_NO_CIPHERS_AVAILABLE
 181

	)

2345 
	#SSL_R_NO_CIPHERS_SPECIFIED
 183

	)

2346 
	#SSL_R_NO_CIPHER_MATCH
 185

	)

2347 
	#SSL_R_NO_CLIENT_CERT_METHOD
 331

	)

2348 
	#SSL_R_NO_COMPRESSION_SPECIFIED
 187

	)

2349 
	#SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER
 330

	)

2350 
	#SSL_R_NO_METHOD_SPECIFIED
 188

	)

2351 
	#SSL_R_NO_PEM_EXTENSIONS
 389

	)

2352 
	#SSL_R_NO_PRIVATE_KEY_ASSIGNED
 190

	)

2353 
	#SSL_R_NO_PROTOCOLS_AVAILABLE
 191

	)

2354 
	#SSL_R_NO_RENEGOTIATION
 339

	)

2355 
	#SSL_R_NO_REQUIRED_DIGEST
 324

	)

2356 
	#SSL_R_NO_SHARED_CIPHER
 193

	)

2357 
	#SSL_R_NO_SHARED_SIGNATURE_ALGORITHMS
 376

	)

2358 
	#SSL_R_NO_SRTP_PROFILES
 359

	)

2359 
	#SSL_R_NO_VALID_SCTS
 216

	)

2360 
	#SSL_R_NO_VERIFY_COOKIE_CALLBACK
 403

	)

2361 
	#SSL_R_NULL_SSL_CTX
 195

	)

2362 
	#SSL_R_NULL_SSL_METHOD_PASSED
 196

	)

2363 
	#SSL_R_OLD_SESSION_CIPHER_NOT_RETURNED
 197

	)

2364 
	#SSL_R_OLD_SESSION_COMPRESSION_ALGORITHM_NOT_RETURNED
 344

	)

2365 
	#SSL_R_PACKET_LENGTH_TOO_LONG
 198

	)

2366 
	#SSL_R_PARSE_TLSEXT
 227

	)

2367 
	#SSL_R_PATH_TOO_LONG
 270

	)

2368 
	#SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE
 199

	)

2369 
	#SSL_R_PEM_NAME_BAD_PREFIX
 391

	)

2370 
	#SSL_R_PEM_NAME_TOO_SHORT
 392

	)

2371 
	#SSL_R_PIPELINE_FAILURE
 406

	)

2372 
	#SSL_R_PROTOCOL_IS_SHUTDOWN
 207

	)

2373 
	#SSL_R_PSK_IDENTITY_NOT_FOUND
 223

	)

2374 
	#SSL_R_PSK_NO_CLIENT_CB
 224

	)

2375 
	#SSL_R_PSK_NO_SERVER_CB
 225

	)

2376 
	#SSL_R_READ_BIO_NOT_SET
 211

	)

2377 
	#SSL_R_READ_TIMEOUT_EXPIRED
 312

	)

2378 
	#SSL_R_RECORD_LENGTH_MISMATCH
 213

	)

2379 
	#SSL_R_RECORD_TOO_SMALL
 298

	)

2380 
	#SSL_R_RENEGOTIATE_EXT_TOO_LONG
 335

	)

2381 
	#SSL_R_RENEGOTIATION_ENCODING_ERR
 336

	)

2382 
	#SSL_R_RENEGOTIATION_MISMATCH
 337

	)

2383 
	#SSL_R_REQUIRED_CIPHER_MISSING
 215

	)

2384 
	#SSL_R_REQUIRED_COMPRESSION_ALGORITHM_MISSING
 342

	)

2385 
	#SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING
 345

	)

2386 
	#SSL_R_SCT_VERIFICATION_FAILED
 208

	)

2387 
	#SSL_R_SERVERHELLO_TLSEXT
 275

	)

2388 
	#SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED
 277

	)

2389 
	#SSL_R_SHUTDOWN_WHILE_IN_INIT
 407

	)

2390 
	#SSL_R_SIGNATURE_ALGORITHMS_ERROR
 360

	)

2391 
	#SSL_R_SIGNATURE_FOR_NON_SIGNING_CERTIFICATE
 220

	)

2392 
	#SSL_R_SRP_A_CALC
 361

	)

2393 
	#SSL_R_SRTP_COULD_NOT_ALLOCATE_PROFILES
 362

	)

2394 
	#SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG
 363

	)

2395 
	#SSL_R_SRTP_UNKNOWN_PROTECTION_PROFILE
 364

	)

2396 
	#SSL_R_SSL3_EXT_INVALID_SERVERNAME
 319

	)

2397 
	#SSL_R_SSL3_EXT_INVALID_SERVERNAME_TYPE
 320

	)

2398 
	#SSL_R_SSL3_SESSION_ID_TOO_LONG
 300

	)

2399 
	#SSL_R_SSLV3_ALERT_BAD_CERTIFICATE
 1042

	)

2400 
	#SSL_R_SSLV3_ALERT_BAD_RECORD_MAC
 1020

	)

2401 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED
 1045

	)

2402 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED
 1044

	)

2403 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN
 1046

	)

2404 
	#SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE
 1030

	)

2405 
	#SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE
 1040

	)

2406 
	#SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER
 1047

	)

2407 
	#SSL_R_SSLV3_ALERT_NO_CERTIFICATE
 1041

	)

2408 
	#SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE
 1010

	)

2409 
	#SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE
 1043

	)

2410 
	#SSL_R_SSL_COMMAND_SECTION_EMPTY
 117

	)

2411 
	#SSL_R_SSL_COMMAND_SECTION_NOT_FOUND
 125

	)

2412 
	#SSL_R_SSL_CTX_HAS_NO_DEFAULT_SSL_VERSION
 228

	)

2413 
	#SSL_R_SSL_HANDSHAKE_FAILURE
 229

	)

2414 
	#SSL_R_SSL_LIBRARY_HAS_NO_CIPHERS
 230

	)

2415 
	#SSL_R_SSL_NEGATIVE_LENGTH
 372

	)

2416 
	#SSL_R_SSL_SECTION_EMPTY
 126

	)

2417 
	#SSL_R_SSL_SECTION_NOT_FOUND
 136

	)

2418 
	#SSL_R_SSL_SESSION_ID_CALLBACK_FAILED
 301

	)

2419 
	#SSL_R_SSL_SESSION_ID_CONFLICT
 302

	)

2420 
	#SSL_R_SSL_SESSION_ID_CONTEXT_TOO_LONG
 273

	)

2421 
	#SSL_R_SSL_SESSION_ID_HAS_BAD_LENGTH
 303

	)

2422 
	#SSL_R_SSL_SESSION_VERSION_MISMATCH
 210

	)

2423 
	#SSL_R_TLSV1_ALERT_ACCESS_DENIED
 1049

	)

2424 
	#SSL_R_TLSV1_ALERT_DECODE_ERROR
 1050

	)

2425 
	#SSL_R_TLSV1_ALERT_DECRYPTION_FAILED
 1021

	)

2426 
	#SSL_R_TLSV1_ALERT_DECRYPT_ERROR
 1051

	)

2427 
	#SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION
 1060

	)

2428 
	#SSL_R_TLSV1_ALERT_INAPPROPRIATE_FALLBACK
 1086

	)

2429 
	#SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY
 1071

	)

2430 
	#SSL_R_TLSV1_ALERT_INTERNAL_ERROR
 1080

	)

2431 
	#SSL_R_TLSV1_ALERT_NO_RENEGOTIATION
 1100

	)

2432 
	#SSL_R_TLSV1_ALERT_PROTOCOL_VERSION
 1070

	)

2433 
	#SSL_R_TLSV1_ALERT_RECORD_OVERFLOW
 1022

	)

2434 
	#SSL_R_TLSV1_ALERT_UNKNOWN_CA
 1048

	)

2435 
	#SSL_R_TLSV1_ALERT_USER_CANCELLED
 1090

	)

2436 
	#SSL_R_TLSV1_BAD_CERTIFICATE_HASH_VALUE
 1114

	)

2437 
	#SSL_R_TLSV1_BAD_CERTIFICATE_STATUS_RESPONSE
 1113

	)

2438 
	#SSL_R_TLSV1_CERTIFICATE_UNOBTAINABLE
 1111

	)

2439 
	#SSL_R_TLSV1_UNRECOGNIZED_NAME
 1112

	)

2440 
	#SSL_R_TLSV1_UNSUPPORTED_EXTENSION
 1110

	)

2441 
	#SSL_R_TLS_HEARTBEAT_PEER_DOESNT_ACCEPT
 365

	)

2442 
	#SSL_R_TLS_HEARTBEAT_PENDING
 366

	)

2443 
	#SSL_R_TLS_ILLEGAL_EXPORTER_LABEL
 367

	)

2444 
	#SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST
 157

	)

2445 
	#SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS
 314

	)

2446 
	#SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS
 239

	)

2447 
	#SSL_R_UNABLE_TO_LOAD_SSL3_MD5_ROUTINES
 242

	)

2448 
	#SSL_R_UNABLE_TO_LOAD_SSL3_SHA1_ROUTINES
 243

	)

2449 
	#SSL_R_UNEXPECTED_MESSAGE
 244

	)

2450 
	#SSL_R_UNEXPECTED_RECORD
 245

	)

2451 
	#SSL_R_UNINITIALIZED
 276

	)

2452 
	#SSL_R_UNKNOWN_ALERT_TYPE
 246

	)

2453 
	#SSL_R_UNKNOWN_CERTIFICATE_TYPE
 247

	)

2454 
	#SSL_R_UNKNOWN_CIPHER_RETURNED
 248

	)

2455 
	#SSL_R_UNKNOWN_CIPHER_TYPE
 249

	)

2456 
	#SSL_R_UNKNOWN_CMD_NAME
 386

	)

2457 
	#SSL_R_UNKNOWN_COMMAND
 139

	)

2458 
	#SSL_R_UNKNOWN_DIGEST
 368

	)

2459 
	#SSL_R_UNKNOWN_KEY_EXCHANGE_TYPE
 250

	)

2460 
	#SSL_R_UNKNOWN_PKEY_TYPE
 251

	)

2461 
	#SSL_R_UNKNOWN_PROTOCOL
 252

	)

2462 
	#SSL_R_UNKNOWN_SSL_VERSION
 254

	)

2463 
	#SSL_R_UNKNOWN_STATE
 255

	)

2464 
	#SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED
 338

	)

2465 
	#SSL_R_UNSUPPORTED_COMPRESSION_ALGORITHM
 257

	)

2466 
	#SSL_R_UNSUPPORTED_ELLIPTIC_CURVE
 315

	)

2467 
	#SSL_R_UNSUPPORTED_PROTOCOL
 258

	)

2468 
	#SSL_R_UNSUPPORTED_SSL_VERSION
 259

	)

2469 
	#SSL_R_UNSUPPORTED_STATUS_TYPE
 329

	)

2470 
	#SSL_R_USE_SRTP_NOT_NEGOTIATED
 369

	)

2471 
	#SSL_R_VERSION_TOO_HIGH
 166

	)

2472 
	#SSL_R_VERSION_TOO_LOW
 396

	)

2473 
	#SSL_R_WRONG_CERTIFICATE_TYPE
 383

	)

2474 
	#SSL_R_WRONG_CIPHER_RETURNED
 261

	)

2475 
	#SSL_R_WRONG_CURVE
 378

	)

2476 
	#SSL_R_WRONG_SIGNATURE_LENGTH
 264

	)

2477 
	#SSL_R_WRONG_SIGNATURE_SIZE
 265

	)

2478 
	#SSL_R_WRONG_SIGNATURE_TYPE
 370

	)

2479 
	#SSL_R_WRONG_SSL_VERSION
 266

	)

2480 
	#SSL_R_WRONG_VERSION_NUMBER
 267

	)

2481 
	#SSL_R_X509_LIB
 268

	)

2482 
	#SSL_R_X509_VERIFICATION_SETUP_PROBLEMS
 269

	)

2484 #ifde‡ 
__˝lu•lus


	@ssl2.h

10 #i‚de‡
HEADER_SSL2_H


11 
	#HEADER_SSL2_H


	)

13 #ifde‡ 
__˝lu•lus


17 
	#SSL2_VERSION
 0x0002

	)

19 
	#SSL2_MT_CLIENT_HELLO
 1

	)

21 #ifde‡ 
__˝lu•lus


	@ssl3.h

16 #i‚de‡
HEADER_SSL3_H


17 
	#HEADER_SSL3_H


	)

19 
	~<›ís¶/comp.h
>

20 
	~<›ís¶/buf„r.h
>

21 
	~<›ís¶/evp.h
>

22 
	~<›ís¶/s¶.h
>

24 #ifde‡ 
__˝lu•lus


32 
	#SSL3_CK_SCSV
 0x030000FF

	)

38 
	#SSL3_CK_FALLBACK_SCSV
 0x03005600

	)

40 
	#SSL3_CK_RSA_NULL_MD5
 0x03000001

	)

41 
	#SSL3_CK_RSA_NULL_SHA
 0x03000002

	)

42 
	#SSL3_CK_RSA_RC4_40_MD5
 0x03000003

	)

43 
	#SSL3_CK_RSA_RC4_128_MD5
 0x03000004

	)

44 
	#SSL3_CK_RSA_RC4_128_SHA
 0x03000005

	)

45 
	#SSL3_CK_RSA_RC2_40_MD5
 0x03000006

	)

46 
	#SSL3_CK_RSA_IDEA_128_SHA
 0x03000007

	)

47 
	#SSL3_CK_RSA_DES_40_CBC_SHA
 0x03000008

	)

48 
	#SSL3_CK_RSA_DES_64_CBC_SHA
 0x03000009

	)

49 
	#SSL3_CK_RSA_DES_192_CBC3_SHA
 0x0300000A

	)

51 
	#SSL3_CK_DH_DSS_DES_40_CBC_SHA
 0x0300000B

	)

52 
	#SSL3_CK_DH_DSS_DES_64_CBC_SHA
 0x0300000C

	)

53 
	#SSL3_CK_DH_DSS_DES_192_CBC3_SHA
 0x0300000D

	)

54 
	#SSL3_CK_DH_RSA_DES_40_CBC_SHA
 0x0300000E

	)

55 
	#SSL3_CK_DH_RSA_DES_64_CBC_SHA
 0x0300000F

	)

56 
	#SSL3_CK_DH_RSA_DES_192_CBC3_SHA
 0x03000010

	)

58 
	#SSL3_CK_DHE_DSS_DES_40_CBC_SHA
 0x03000011

	)

59 
	#SSL3_CK_EDH_DSS_DES_40_CBC_SHA
 
SSL3_CK_DHE_DSS_DES_40_CBC_SHA


	)

60 
	#SSL3_CK_DHE_DSS_DES_64_CBC_SHA
 0x03000012

	)

61 
	#SSL3_CK_EDH_DSS_DES_64_CBC_SHA
 
SSL3_CK_DHE_DSS_DES_64_CBC_SHA


	)

62 
	#SSL3_CK_DHE_DSS_DES_192_CBC3_SHA
 0x03000013

	)

63 
	#SSL3_CK_EDH_DSS_DES_192_CBC3_SHA
 
SSL3_CK_DHE_DSS_DES_192_CBC3_SHA


	)

64 
	#SSL3_CK_DHE_RSA_DES_40_CBC_SHA
 0x03000014

	)

65 
	#SSL3_CK_EDH_RSA_DES_40_CBC_SHA
 
SSL3_CK_DHE_RSA_DES_40_CBC_SHA


	)

66 
	#SSL3_CK_DHE_RSA_DES_64_CBC_SHA
 0x03000015

	)

67 
	#SSL3_CK_EDH_RSA_DES_64_CBC_SHA
 
SSL3_CK_DHE_RSA_DES_64_CBC_SHA


	)

68 
	#SSL3_CK_DHE_RSA_DES_192_CBC3_SHA
 0x03000016

	)

69 
	#SSL3_CK_EDH_RSA_DES_192_CBC3_SHA
 
SSL3_CK_DHE_RSA_DES_192_CBC3_SHA


	)

71 
	#SSL3_CK_ADH_RC4_40_MD5
 0x03000017

	)

72 
	#SSL3_CK_ADH_RC4_128_MD5
 0x03000018

	)

73 
	#SSL3_CK_ADH_DES_40_CBC_SHA
 0x03000019

	)

74 
	#SSL3_CK_ADH_DES_64_CBC_SHA
 0x0300001A

	)

75 
	#SSL3_CK_ADH_DES_192_CBC_SHA
 0x0300001B

	)

77 
	#SSL3_TXT_RSA_NULL_MD5
 "NULL-MD5"

	)

78 
	#SSL3_TXT_RSA_NULL_SHA
 "NULL-SHA"

	)

79 
	#SSL3_TXT_RSA_RC4_40_MD5
 "EXP-RC4-MD5"

	)

80 
	#SSL3_TXT_RSA_RC4_128_MD5
 "RC4-MD5"

	)

81 
	#SSL3_TXT_RSA_RC4_128_SHA
 "RC4-SHA"

	)

82 
	#SSL3_TXT_RSA_RC2_40_MD5
 "EXP-RC2-CBC-MD5"

	)

83 
	#SSL3_TXT_RSA_IDEA_128_SHA
 "IDEA-CBC-SHA"

	)

84 
	#SSL3_TXT_RSA_DES_40_CBC_SHA
 "EXP-DES-CBC-SHA"

	)

85 
	#SSL3_TXT_RSA_DES_64_CBC_SHA
 "DES-CBC-SHA"

	)

86 
	#SSL3_TXT_RSA_DES_192_CBC3_SHA
 "DES-CBC3-SHA"

	)

88 
	#SSL3_TXT_DH_DSS_DES_40_CBC_SHA
 "EXP-DH-DSS-DES-CBC-SHA"

	)

89 
	#SSL3_TXT_DH_DSS_DES_64_CBC_SHA
 "DH-DSS-DES-CBC-SHA"

	)

90 
	#SSL3_TXT_DH_DSS_DES_192_CBC3_SHA
 "DH-DSS-DES-CBC3-SHA"

	)

91 
	#SSL3_TXT_DH_RSA_DES_40_CBC_SHA
 "EXP-DH-RSA-DES-CBC-SHA"

	)

92 
	#SSL3_TXT_DH_RSA_DES_64_CBC_SHA
 "DH-RSA-DES-CBC-SHA"

	)

93 
	#SSL3_TXT_DH_RSA_DES_192_CBC3_SHA
 "DH-RSA-DES-CBC3-SHA"

	)

95 
	#SSL3_TXT_DHE_DSS_DES_40_CBC_SHA
 "EXP-DHE-DSS-DES-CBC-SHA"

	)

96 
	#SSL3_TXT_DHE_DSS_DES_64_CBC_SHA
 "DHE-DSS-DES-CBC-SHA"

	)

97 
	#SSL3_TXT_DHE_DSS_DES_192_CBC3_SHA
 "DHE-DSS-DES-CBC3-SHA"

	)

98 
	#SSL3_TXT_DHE_RSA_DES_40_CBC_SHA
 "EXP-DHE-RSA-DES-CBC-SHA"

	)

99 
	#SSL3_TXT_DHE_RSA_DES_64_CBC_SHA
 "DHE-RSA-DES-CBC-SHA"

	)

100 
	#SSL3_TXT_DHE_RSA_DES_192_CBC3_SHA
 "DHE-RSA-DES-CBC3-SHA"

	)

107 
	#SSL3_TXT_EDH_DSS_DES_40_CBC_SHA
 "EXP-EDH-DSS-DES-CBC-SHA"

	)

108 
	#SSL3_TXT_EDH_DSS_DES_64_CBC_SHA
 "EDH-DSS-DES-CBC-SHA"

	)

109 
	#SSL3_TXT_EDH_DSS_DES_192_CBC3_SHA
 "EDH-DSS-DES-CBC3-SHA"

	)

110 
	#SSL3_TXT_EDH_RSA_DES_40_CBC_SHA
 "EXP-EDH-RSA-DES-CBC-SHA"

	)

111 
	#SSL3_TXT_EDH_RSA_DES_64_CBC_SHA
 "EDH-RSA-DES-CBC-SHA"

	)

112 
	#SSL3_TXT_EDH_RSA_DES_192_CBC3_SHA
 "EDH-RSA-DES-CBC3-SHA"

	)

114 
	#SSL3_TXT_ADH_RC4_40_MD5
 "EXP-ADH-RC4-MD5"

	)

115 
	#SSL3_TXT_ADH_RC4_128_MD5
 "ADH-RC4-MD5"

	)

116 
	#SSL3_TXT_ADH_DES_40_CBC_SHA
 "EXP-ADH-DES-CBC-SHA"

	)

117 
	#SSL3_TXT_ADH_DES_64_CBC_SHA
 "ADH-DES-CBC-SHA"

	)

118 
	#SSL3_TXT_ADH_DES_192_CBC_SHA
 "ADH-DES-CBC3-SHA"

	)

120 
	#SSL3_SSL_SESSION_ID_LENGTH
 32

	)

121 
	#SSL3_MAX_SSL_SESSION_ID_LENGTH
 32

	)

123 
	#SSL3_MASTER_SECRET_SIZE
 48

	)

124 
	#SSL3_RANDOM_SIZE
 32

	)

125 
	#SSL3_SESSION_ID_SIZE
 32

	)

126 
	#SSL3_RT_HEADER_LENGTH
 5

	)

128 
	#SSL3_HM_HEADER_LENGTH
 4

	)

130 #i‚de‡
SSL3_ALIGN_PAYLOAD


139 
	#SSL3_ALIGN_PAYLOAD
 8

	)

141 #i‡(
SSL3_ALIGN_PAYLOAD
&(SSL3_ALIGN_PAYLOAD-1))!=0

143 #unde‡
SSL3_ALIGN_PAYLOAD


153 
	#SSL3_RT_MAX_MD_SIZE
 64

	)

159 
	#SSL_RT_MAX_CIPHER_BLOCK_SIZE
 16

	)

161 
	#SSL3_RT_MAX_EXTRA
 (16384)

	)

164 
	#SSL3_RT_MAX_PLAIN_LENGTH
 16384

	)

166 
	#SSL3_RT_MAX_COMPRESSED_OVERHEAD
 1024

	)

173 
	#SSL3_RT_MAX_ENCRYPTED_OVERHEAD
 (256 + 
SSL3_RT_MAX_MD_SIZE
)

	)

180 
	#SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD
 \

181 (
SSL_RT_MAX_CIPHER_BLOCK_SIZE
 + 
SSL3_RT_MAX_MD_SIZE
)

	)

185 #ifde‡
OPENSSL_NO_COMP


186 
	#SSL3_RT_MAX_COMPRESSED_LENGTH
 
SSL3_RT_MAX_PLAIN_LENGTH


	)

188 
	#SSL3_RT_MAX_COMPRESSED_LENGTH
 \

189 (
SSL3_RT_MAX_PLAIN_LENGTH
+
SSL3_RT_MAX_COMPRESSED_OVERHEAD
)

	)

191 
	#SSL3_RT_MAX_ENCRYPTED_LENGTH
 \

192 (
SSL3_RT_MAX_ENCRYPTED_OVERHEAD
+
SSL3_RT_MAX_COMPRESSED_LENGTH
)

	)

193 
	#SSL3_RT_MAX_PACKET_SIZE
 \

194 (
SSL3_RT_MAX_ENCRYPTED_LENGTH
+
SSL3_RT_HEADER_LENGTH
)

	)

196 
	#SSL3_MD_CLIENT_FINISHED_CONST
 "\x43\x4C\x4E\x54"

	)

197 
	#SSL3_MD_SERVER_FINISHED_CONST
 "\x53\x52\x56\x52"

	)

199 
	#SSL3_VERSION
 0x0300

	)

200 
	#SSL3_VERSION_MAJOR
 0x03

	)

201 
	#SSL3_VERSION_MINOR
 0x00

	)

203 
	#SSL3_RT_CHANGE_CIPHER_SPEC
 20

	)

204 
	#SSL3_RT_ALERT
 21

	)

205 
	#SSL3_RT_HANDSHAKE
 22

	)

206 
	#SSL3_RT_APPLICATION_DATA
 23

	)

207 
	#DTLS1_RT_HEARTBEAT
 24

	)

210 
	#TLS1_RT_CRYPTO
 0x1000

	)

211 
	#TLS1_RT_CRYPTO_PREMASTER
 (
TLS1_RT_CRYPTO
 | 0x1)

	)

212 
	#TLS1_RT_CRYPTO_CLIENT_RANDOM
 (
TLS1_RT_CRYPTO
 | 0x2)

	)

213 
	#TLS1_RT_CRYPTO_SERVER_RANDOM
 (
TLS1_RT_CRYPTO
 | 0x3)

	)

214 
	#TLS1_RT_CRYPTO_MASTER
 (
TLS1_RT_CRYPTO
 | 0x4)

	)

216 
	#TLS1_RT_CRYPTO_READ
 0x0000

	)

217 
	#TLS1_RT_CRYPTO_WRITE
 0x0100

	)

218 
	#TLS1_RT_CRYPTO_MAC
 (
TLS1_RT_CRYPTO
 | 0x5)

	)

219 
	#TLS1_RT_CRYPTO_KEY
 (
TLS1_RT_CRYPTO
 | 0x6)

	)

220 
	#TLS1_RT_CRYPTO_IV
 (
TLS1_RT_CRYPTO
 | 0x7)

	)

221 
	#TLS1_RT_CRYPTO_FIXED_IV
 (
TLS1_RT_CRYPTO
 | 0x8)

	)

224 
	#SSL3_RT_HEADER
 0x100

	)

226 
	#SSL3_AL_WARNING
 1

	)

227 
	#SSL3_AL_FATAL
 2

	)

229 
	#SSL3_AD_CLOSE_NOTIFY
 0

	)

230 
	#SSL3_AD_UNEXPECTED_MESSAGE
 10

	)

231 
	#SSL3_AD_BAD_RECORD_MAC
 20

	)

232 
	#SSL3_AD_DECOMPRESSION_FAILURE
 30

	)

233 
	#SSL3_AD_HANDSHAKE_FAILURE
 40

	)

234 
	#SSL3_AD_NO_CERTIFICATE
 41

	)

235 
	#SSL3_AD_BAD_CERTIFICATE
 42

	)

236 
	#SSL3_AD_UNSUPPORTED_CERTIFICATE
 43

	)

237 
	#SSL3_AD_CERTIFICATE_REVOKED
 44

	)

238 
	#SSL3_AD_CERTIFICATE_EXPIRED
 45

	)

239 
	#SSL3_AD_CERTIFICATE_UNKNOWN
 46

	)

240 
	#SSL3_AD_ILLEGAL_PARAMETER
 47

	)

242 
	#TLS1_HB_REQUEST
 1

	)

243 
	#TLS1_HB_RESPONSE
 2

	)

246 
	#SSL3_CT_RSA_SIGN
 1

	)

247 
	#SSL3_CT_DSS_SIGN
 2

	)

248 
	#SSL3_CT_RSA_FIXED_DH
 3

	)

249 
	#SSL3_CT_DSS_FIXED_DH
 4

	)

250 
	#SSL3_CT_RSA_EPHEMERAL_DH
 5

	)

251 
	#SSL3_CT_DSS_EPHEMERAL_DH
 6

	)

252 
	#SSL3_CT_FORTEZZA_DMS
 20

	)

257 
	#SSL3_CT_NUMBER
 9

	)

259 
	#SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS
 0x0001

	)

262 
	#TLS1_FLAGS_TLS_PADDING_BUG
 0x0

	)

264 
	#TLS1_FLAGS_SKIP_CERT_VERIFY
 0x0010

	)

267 
	#TLS1_FLAGS_ENCRYPT_THEN_MAC
 0x0100

	)

270 
	#TLS1_FLAGS_RECEIVED_EXTMS
 0x0200

	)

272 
	#SSL3_MT_HELLO_REQUEST
 0

	)

273 
	#SSL3_MT_CLIENT_HELLO
 1

	)

274 
	#SSL3_MT_SERVER_HELLO
 2

	)

275 
	#SSL3_MT_NEWSESSION_TICKET
 4

	)

276 
	#SSL3_MT_CERTIFICATE
 11

	)

277 
	#SSL3_MT_SERVER_KEY_EXCHANGE
 12

	)

278 
	#SSL3_MT_CERTIFICATE_REQUEST
 13

	)

279 
	#SSL3_MT_SERVER_DONE
 14

	)

280 
	#SSL3_MT_CERTIFICATE_VERIFY
 15

	)

281 
	#SSL3_MT_CLIENT_KEY_EXCHANGE
 16

	)

282 
	#SSL3_MT_FINISHED
 20

	)

283 
	#SSL3_MT_CERTIFICATE_STATUS
 22

	)

284 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


285 
	#SSL3_MT_NEXT_PROTO
 67

	)

287 
	#DTLS1_MT_HELLO_VERIFY_REQUEST
 3

	)

290 
	#SSL3_MT_CHANGE_CIPHER_SPEC
 0x0101

	)

292 
	#SSL3_MT_CCS
 1

	)

295 
	#SSL3_CC_READ
 0x01

	)

296 
	#SSL3_CC_WRITE
 0x02

	)

297 
	#SSL3_CC_CLIENT
 0x10

	)

298 
	#SSL3_CC_SERVER
 0x20

	)

299 
	#SSL3_CHANGE_CIPHER_CLIENT_WRITE
 (
SSL3_CC_CLIENT
|
SSL3_CC_WRITE
)

	)

300 
	#SSL3_CHANGE_CIPHER_SERVER_READ
 (
SSL3_CC_SERVER
|
SSL3_CC_READ
)

	)

301 
	#SSL3_CHANGE_CIPHER_CLIENT_READ
 (
SSL3_CC_CLIENT
|
SSL3_CC_READ
)

	)

302 
	#SSL3_CHANGE_CIPHER_SERVER_WRITE
 (
SSL3_CC_SERVER
|
SSL3_CC_WRITE
)

	)

304 #ifde‡ 
__˝lu•lus


	@stack.h

10 #i‚de‡
HEADER_STACK_H


11 
	#HEADER_STACK_H


	)

13 #ifde‡ 
__˝lu•lus


17 
°ack_°
 
	tOPENSSL_STACK
;

19 (*
OPENSSL_sk_compfunc
)(const *, const *);

20 (*
OPENSSL_sk_‰ìfunc
)(*);

21 *(*
	tOPENSSL_sk_c›yfunc
)(const *);

23 
OPENSSL_sk_num
(c⁄° 
OPENSSL_STACK
 *);

24 *
OPENSSL_sk_vÆue
(c⁄° 
OPENSSL_STACK
 *, );

26 *
OPENSSL_sk_£t
(
OPENSSL_STACK
 *, , *);

28 
OPENSSL_STACK
 *
OPENSSL_sk_√w
(
OPENSSL_sk_compfunc
 
cmp
);

29 
OPENSSL_STACK
 *
OPENSSL_sk_√w_nuŒ
();

30 
OPENSSL_sk_‰ì
(
OPENSSL_STACK
 *);

31 
OPENSSL_sk_p›_‰ì
(
OPENSSL_STACK
 *
°
, (*
func
) (*));

32 
OPENSSL_STACK
 *
OPENSSL_sk_dìp_c›y
(c⁄° OPENSSL_STACK *, 
OPENSSL_sk_c›yfunc
 
c
, 
OPENSSL_sk_‰ìfunc
 
f
);

33 
OPENSSL_sk_ö£π
(
OPENSSL_STACK
 *
sk
, *
d©a
, 
whîe
);

34 *
OPENSSL_sk_dñëe
(
OPENSSL_STACK
 *
°
, 
loc
);

35 *
OPENSSL_sk_dñëe_±r
(
OPENSSL_STACK
 *
°
, c⁄° *
p
);

36 
OPENSSL_sk_föd
(
OPENSSL_STACK
 *
°
, c⁄° *
d©a
);

37 
OPENSSL_sk_föd_ex
(
OPENSSL_STACK
 *
°
, c⁄° *
d©a
);

38 
OPENSSL_sk_push
(
OPENSSL_STACK
 *
°
, *
d©a
);

39 
OPENSSL_sk_unshi·
(
OPENSSL_STACK
 *
°
, *
d©a
);

40 *
OPENSSL_sk_shi·
(
OPENSSL_STACK
 *
°
);

41 *
OPENSSL_sk_p›
(
OPENSSL_STACK
 *
°
);

42 
OPENSSL_sk_zîo
(
OPENSSL_STACK
 *
°
);

43 
OPENSSL_sk_compfunc
 
OPENSSL_sk_£t_cmp_func
(
OPENSSL_STACK
 *
sk
, OPENSSL_sk_compfun¯
cmp
);

44 
OPENSSL_STACK
 *
OPENSSL_sk_dup
(c⁄° OPENSSL_STACK *
°
);

45 
OPENSSL_sk_s‹t
(
OPENSSL_STACK
 *
°
);

46 
OPENSSL_sk_is_s‹ãd
(c⁄° 
OPENSSL_STACK
 *
°
);

48 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

49 
	#_STACK
 
OPENSSL_STACK


	)

50 
	#sk_num
 
OPENSSL_sk_num


	)

51 
	#sk_vÆue
 
OPENSSL_sk_vÆue


	)

52 
	#sk_£t
 
OPENSSL_sk_£t


	)

53 
	#sk_√w
 
OPENSSL_sk_√w


	)

54 
	#sk_√w_nuŒ
 
OPENSSL_sk_√w_nuŒ


	)

55 
	#sk_‰ì
 
OPENSSL_sk_‰ì


	)

56 
	#sk_p›_‰ì
 
OPENSSL_sk_p›_‰ì


	)

57 
	#sk_dìp_c›y
 
OPENSSL_sk_dìp_c›y


	)

58 
	#sk_ö£π
 
OPENSSL_sk_ö£π


	)

59 
	#sk_dñëe
 
OPENSSL_sk_dñëe


	)

60 
	#sk_dñëe_±r
 
OPENSSL_sk_dñëe_±r


	)

61 
	#sk_föd
 
OPENSSL_sk_föd


	)

62 
	#sk_föd_ex
 
OPENSSL_sk_föd_ex


	)

63 
	#sk_push
 
OPENSSL_sk_push


	)

64 
	#sk_unshi·
 
OPENSSL_sk_unshi·


	)

65 
	#sk_shi·
 
OPENSSL_sk_shi·


	)

66 
	#sk_p›
 
OPENSSL_sk_p›


	)

67 
	#sk_zîo
 
OPENSSL_sk_zîo


	)

68 
	#sk_£t_cmp_func
 
OPENSSL_sk_£t_cmp_func


	)

69 
	#sk_dup
 
OPENSSL_sk_dup


	)

70 
	#sk_s‹t
 
OPENSSL_sk_s‹t


	)

71 
	#sk_is_s‹ãd
 
OPENSSL_sk_is_s‹ãd


	)

74 #ifde‡ 
__˝lu•lus


	@symhacks.h

10 #i‚de‡
HEADER_SYMHACKS_H


11 
	#HEADER_SYMHACKS_H


	)

13 
	~<›ís¶/e_os2.h
>

16 #i‡
deföed
(
OPENSSL_SYS_VMS
)

17 #unde‡
ERR_lﬂd_CRYPTO_°rögs


18 
	#ERR_lﬂd_CRYPTO_°rögs
 
ERR_lﬂd_CRYPTOlib_°rögs


	)

19 #unde‡
OCSP_¸lID_√w


20 
	#OCSP_¸lID_√w
 
OCSP_¸lID2_√w


	)

22 #unde‡
d2i_ECPARAMETERS


23 
	#d2i_ECPARAMETERS
 
d2i_UC_ECPARAMETERS


	)

24 #unde‡
i2d_ECPARAMETERS


25 
	#i2d_ECPARAMETERS
 
i2d_UC_ECPARAMETERS


	)

26 #unde‡
d2i_ECPKPARAMETERS


27 
	#d2i_ECPKPARAMETERS
 
d2i_UC_ECPKPARAMETERS


	)

28 #unde‡
i2d_ECPKPARAMETERS


29 
	#i2d_ECPKPARAMETERS
 
i2d_UC_ECPKPARAMETERS


	)

37 #unde‡
X509v3_˛ónup_exãnsi⁄s


38 
	#X509v3_˛ónup_exãnsi⁄s
 
oX509v3_˛ónup_exãnsi⁄s


	)

39 #unde‡
X509v3_add_exãnsi⁄


40 
	#X509v3_add_exãnsi⁄
 
oX509v3_add_exãnsi⁄


	)

41 #unde‡
X509v3_add_√tsˇ≥_exãnsi⁄s


42 
	#X509v3_add_√tsˇ≥_exãnsi⁄s
 
oX509v3_add_√tsˇ≥_exãnsi⁄s


	)

43 #unde‡
X509v3_add_°™d¨d_exãnsi⁄s


44 
	#X509v3_add_°™d¨d_exãnsi⁄s
 
oX509v3_add_°™d¨d_exãnsi⁄s


	)

47 #unde‡
cms_D©a_¸óã


48 
	#cms_D©a_¸óã
 
¥iv_cms_D©a_¸óã


	)

	@tls1.h

50 #i‚de‡
HEADER_TLS1_H


51 
	#HEADER_TLS1_H


	)

53 
	~<›ís¶/buf„r.h
>

54 
	~<›ís¶/x509.h
>

56 #ifde‡ 
__˝lu•lus


61 #i‚de‡
OPENSSL_TLS_SECURITY_LEVEL


62 
	#OPENSSL_TLS_SECURITY_LEVEL
 1

	)

65 
	#TLS1_VERSION
 0x0301

	)

66 
	#TLS1_1_VERSION
 0x0302

	)

67 
	#TLS1_2_VERSION
 0x0303

	)

68 
	#TLS_MAX_VERSION
 
TLS1_2_VERSION


	)

71 
	#TLS_ANY_VERSION
 0x10000

	)

73 
	#TLS1_VERSION_MAJOR
 0x03

	)

74 
	#TLS1_VERSION_MINOR
 0x01

	)

76 
	#TLS1_1_VERSION_MAJOR
 0x03

	)

77 
	#TLS1_1_VERSION_MINOR
 0x02

	)

79 
	#TLS1_2_VERSION_MAJOR
 0x03

	)

80 
	#TLS1_2_VERSION_MINOR
 0x03

	)

82 
	#TLS1_gë_vîsi⁄
(
s
) \

83 ((
	`SSL_vîsi⁄
(
s
Ë>> 8Ë=
TLS1_VERSION_MAJOR
 ? SSL_vîsi⁄(sË: 0)

	)

85 
	#TLS1_gë_˛õ¡_vîsi⁄
(
s
) \

86 ((
	`SSL_˛õ¡_vîsi⁄
(
s
Ë>> 8Ë=
TLS1_VERSION_MAJOR
 ? SSL_˛õ¡_vîsi⁄(sË: 0)

	)

88 
	#TLS1_AD_DECRYPTION_FAILED
 21

	)

89 
	#TLS1_AD_RECORD_OVERFLOW
 22

	)

90 
	#TLS1_AD_UNKNOWN_CA
 48

	)

91 
	#TLS1_AD_ACCESS_DENIED
 49

	)

92 
	#TLS1_AD_DECODE_ERROR
 50

	)

93 
	#TLS1_AD_DECRYPT_ERROR
 51

	)

94 
	#TLS1_AD_EXPORT_RESTRICTION
 60

	)

95 
	#TLS1_AD_PROTOCOL_VERSION
 70

	)

96 
	#TLS1_AD_INSUFFICIENT_SECURITY
 71

	)

97 
	#TLS1_AD_INTERNAL_ERROR
 80

	)

98 
	#TLS1_AD_INAPPROPRIATE_FALLBACK
 86

	)

99 
	#TLS1_AD_USER_CANCELLED
 90

	)

100 
	#TLS1_AD_NO_RENEGOTIATION
 100

	)

102 
	#TLS1_AD_UNSUPPORTED_EXTENSION
 110

	)

103 
	#TLS1_AD_CERTIFICATE_UNOBTAINABLE
 111

	)

104 
	#TLS1_AD_UNRECOGNIZED_NAME
 112

	)

105 
	#TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE
 113

	)

106 
	#TLS1_AD_BAD_CERTIFICATE_HASH_VALUE
 114

	)

107 
	#TLS1_AD_UNKNOWN_PSK_IDENTITY
 115

	)

108 
	#TLS1_AD_NO_APPLICATION_PROTOCOL
 120

	)

111 
	#TLSEXT_TYPE_£rvî_«me
 0

	)

112 
	#TLSEXT_TYPE_max_‰agmít_Àngth
 1

	)

113 
	#TLSEXT_TYPE_˛õ¡_˚πifiˇã_uæ
 2

	)

114 
	#TLSEXT_TYPE_åu°ed_ˇ_keys
 3

	)

115 
	#TLSEXT_TYPE_åunˇãd_hmac
 4

	)

116 
	#TLSEXT_TYPE_°©us_ªque°
 5

	)

118 
	#TLSEXT_TYPE_u£r_m≠pög
 6

	)

120 
	#TLSEXT_TYPE_˛õ¡_authz
 7

	)

121 
	#TLSEXT_TYPE_£rvî_authz
 8

	)

123 
	#TLSEXT_TYPE_˚π_ty≥
 9

	)

126 
	#TLSEXT_TYPE_ñlùtic_curves
 10

	)

127 
	#TLSEXT_TYPE_ec_poöt_f‹m©s
 11

	)

130 
	#TLSEXT_TYPE_§p
 12

	)

133 
	#TLSEXT_TYPE_sig«tuª_Æg‹ôhms
 13

	)

136 
	#TLSEXT_TYPE_u£_§ç
 14

	)

139 
	#TLSEXT_TYPE_hóπbót
 15

	)

142 
	#TLSEXT_TYPE_≠∂iˇti⁄_œyî_¥Ÿocﬁ_√gŸüti⁄
 16

	)

148 
	#TLSEXT_TYPE_sig√d_˚πifiˇã_time°amp
 18

	)

154 
	#TLSEXT_TYPE_∑ddög
 21

	)

157 
	#TLSEXT_TYPE_í¸y±_thí_mac
 22

	)

160 
	#TLSEXT_TYPE_exãnded_ma°î_£¸ë
 23

	)

163 
	#TLSEXT_TYPE_£ssi⁄_tickë
 35

	)

166 
	#TLSEXT_TYPE_ª√gŸüã
 0xff01

	)

168 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


170 
	#TLSEXT_TYPE_√xt_¥Ÿo_√g
 13172

	)

174 
	#TLSEXT_NAMETYPE_ho°_«me
 0

	)

176 
	#TLSEXT_STATUSTYPE_oc•
 1

	)

179 
	#TLSEXT_ECPOINTFORMAT_fú°
 0

	)

180 
	#TLSEXT_ECPOINTFORMAT_uncom¥es£d
 0

	)

181 
	#TLSEXT_ECPOINTFORMAT_™siX962_com¥es£d_¥ime
 1

	)

182 
	#TLSEXT_ECPOINTFORMAT_™siX962_com¥es£d_ch¨2
 2

	)

183 
	#TLSEXT_ECPOINTFORMAT_œ°
 2

	)

186 
	#TLSEXT_sig«tuª_™⁄ymous
 0

	)

187 
	#TLSEXT_sig«tuª_rß
 1

	)

188 
	#TLSEXT_sig«tuª_dß
 2

	)

189 
	#TLSEXT_sig«tuª_ecdß
 3

	)

190 
	#TLSEXT_sig«tuª_go°r34102001
 237

	)

191 
	#TLSEXT_sig«tuª_go°r34102012_256
 238

	)

192 
	#TLSEXT_sig«tuª_go°r34102012_512
 239

	)

195 
	#TLSEXT_sig«tuª_num
 7

	)

197 
	#TLSEXT_hash_n⁄e
 0

	)

198 
	#TLSEXT_hash_md5
 1

	)

199 
	#TLSEXT_hash_sha1
 2

	)

200 
	#TLSEXT_hash_sha224
 3

	)

201 
	#TLSEXT_hash_sha256
 4

	)

202 
	#TLSEXT_hash_sha384
 5

	)

203 
	#TLSEXT_hash_sha512
 6

	)

204 
	#TLSEXT_hash_go°r3411
 237

	)

205 
	#TLSEXT_hash_go°r34112012_256
 238

	)

206 
	#TLSEXT_hash_go°r34112012_512
 239

	)

210 
	#TLSEXT_hash_num
 10

	)

213 
	#TLSEXT_nid_unknown
 0x1000000

	)

217 
	#TLSEXT_curve_P_256
 23

	)

218 
	#TLSEXT_curve_P_384
 24

	)

220 
	#TLSEXT_MAXLEN_ho°_«me
 255

	)

222 
__owur
 c⁄° *
SSL_gë_£rvî«me
(c⁄° 
SSL
 *
s
, c⁄° 
ty≥
);

223 
__owur
 
SSL_gë_£rvî«me_ty≥
(c⁄° 
SSL
 *
s
);

231 
__owur
 
SSL_exp‹t_keyög_m©îül
(
SSL
 *
s
, *
out
, 
size_t
 
ﬁí
,

232 c⁄° *
œbñ
, 
size_t
 
Œí
,

233 c⁄° *
p
, 
size_t
 
∂í
,

234 
u£_c⁄ãxt
);

236 
SSL_gë_sigÆgs
(
SSL
 *
s
, 
idx
,

237 *
psign
, *
phash
, *
psig«ndhash
,

238 *
rsig
, *
rhash
);

240 
SSL_gë_sh¨ed_sigÆgs
(
SSL
 *
s
, 
idx
,

241 *
psign
, *
phash
, *
psig«ndhash
,

242 *
rsig
, *
rhash
);

244 
__owur
 
SSL_check_chaö
(
SSL
 *
s
, 
X509
 *
x
, 
EVP_PKEY
 *
pk
, 
STACK_OF
(X509Ë*
chaö
);

246 
	#SSL_£t_é£xt_ho°_«me
(
s
,
«me
) \

247 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_TLSEXT_HOSTNAME
,
TLSEXT_NAMETYPE_ho°_«me
,(*)
«me
)

	)

249 
	#SSL_£t_é£xt_debug_ˇŒback
(
s¶
, 
cb
) \

250 
	`SSL_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_DEBUG_CB
,((*)())
cb
)

	)

252 
	#SSL_£t_é£xt_debug_¨g
(
s¶
, 
¨g
) \

253 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_DEBUG_ARG
,0, (*)
¨g
)

	)

255 
	#SSL_gë_é£xt_°©us_ty≥
(
s¶
) \

256 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_TYPE
,0, 
NULL
)

	)

258 
	#SSL_£t_é£xt_°©us_ty≥
(
s¶
, 
ty≥
) \

259 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
,
ty≥
, 
NULL
)

	)

261 
	#SSL_gë_é£xt_°©us_exts
(
s¶
, 
¨g
) \

262 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS
,0, (*)
¨g
)

	)

264 
	#SSL_£t_é£xt_°©us_exts
(
s¶
, 
¨g
) \

265 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS
,0, (*)
¨g
)

	)

267 
	#SSL_gë_é£xt_°©us_ids
(
s¶
, 
¨g
) \

268 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS
,0, (*)
¨g
)

	)

270 
	#SSL_£t_é£xt_°©us_ids
(
s¶
, 
¨g
) \

271 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS
,0, (*)
¨g
)

	)

273 
	#SSL_gë_é£xt_°©us_oc•_ª•
(
s¶
, 
¨g
) \

274 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP
,0, (*)
¨g
)

	)

276 
	#SSL_£t_é£xt_°©us_oc•_ª•
(
s¶
, 
¨g
, 
¨gÀn
) \

277 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP
,
¨gÀn
, (*)
¨g
)

	)

279 
	#SSL_CTX_£t_é£xt_£rvî«me_ˇŒback
(
˘x
, 
cb
) \

280 
	`SSL_CTX_ˇŒback_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_SERVERNAME_CB
,((*)())
cb
)

	)

282 
	#SSL_TLSEXT_ERR_OK
 0

	)

283 
	#SSL_TLSEXT_ERR_ALERT_WARNING
 1

	)

284 
	#SSL_TLSEXT_ERR_ALERT_FATAL
 2

	)

285 
	#SSL_TLSEXT_ERR_NOACK
 3

	)

287 
	#SSL_CTX_£t_é£xt_£rvî«me_¨g
(
˘x
, 
¨g
) \

288 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG
,0, (*)
¨g
)

	)

290 
	#SSL_CTX_gë_é£xt_tickë_keys
(
˘x
, 
keys
, 
keyÀn
) \

291 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_GET_TLSEXT_TICKET_KEYS
,(
keyÀn
),(
keys
))

	)

292 
	#SSL_CTX_£t_é£xt_tickë_keys
(
˘x
, 
keys
, 
keyÀn
) \

293 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_SET_TLSEXT_TICKET_KEYS
,(
keyÀn
),(
keys
))

	)

295 
	#SSL_CTX_£t_é£xt_°©us_cb
(
s¶
, 
cb
) \

296 
	`SSL_CTX_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
,((*)())
cb
)

	)

298 
	#SSL_CTX_£t_é£xt_°©us_¨g
(
s¶
, 
¨g
) \

299 
	`SSL_CTX_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG
,0, (*)
¨g
)

	)

301 
	#SSL_CTX_£t_é£xt_°©us_ty≥
(
s¶
, 
ty≥
) \

302 
	`SSL_CTX_˘æ
(
s¶
, 
SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
, 
ty≥
, 
NULL
)

	)

304 
	#SSL_CTX_gë_é£xt_°©us_ty≥
(
s¶
) \

305 
	`SSL_CTX_˘æ
(
s¶
, 
SSL_CTRL_GET_TLSEXT_STATUS_REQ_TYPE
, 0, 
NULL
)

	)

307 
	#SSL_CTX_£t_é£xt_tickë_key_cb
(
s¶
, 
cb
) \

308 
	`SSL_CTX_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB
,((*)())
cb
)

	)

310 #i‚de‡
OPENSSL_NO_HEARTBEATS


311 
	#SSL_DTLSEXT_HB_ENABLED
 0x01

	)

312 
	#SSL_DTLSEXT_HB_DONT_SEND_REQUESTS
 0x02

	)

313 
	#SSL_DTLSEXT_HB_DONT_RECV_REQUESTS
 0x04

	)

314 
	#SSL_gë_dé£xt_hóπbót_≥ndög
(
s¶
) \

315 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_DTLS_EXT_HEARTBEAT_PENDING
,0,
NULL
)

	)

316 
	#SSL_£t_dé£xt_hóπbót_no_ªque°s
(
s¶
, 
¨g
) \

317 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_SET_DTLS_EXT_HEARTBEAT_NO_REQUESTS
,
¨g
,
NULL
)

	)

319 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

320 
	#SSL_CTRL_TLS_EXT_SEND_HEARTBEAT
 \

321 
SSL_CTRL_DTLS_EXT_SEND_HEARTBEAT


	)

322 
	#SSL_CTRL_GET_TLS_EXT_HEARTBEAT_PENDING
 \

323 
SSL_CTRL_GET_DTLS_EXT_HEARTBEAT_PENDING


	)

324 
	#SSL_CTRL_SET_TLS_EXT_HEARTBEAT_NO_REQUESTS
 \

325 
SSL_CTRL_SET_DTLS_EXT_HEARTBEAT_NO_REQUESTS


	)

326 
	#SSL_TLSEXT_HB_ENABLED
 \

327 
SSL_DTLSEXT_HB_ENABLED


	)

328 
	#SSL_TLSEXT_HB_DONT_SEND_REQUESTS
 \

329 
SSL_DTLSEXT_HB_DONT_SEND_REQUESTS


	)

330 
	#SSL_TLSEXT_HB_DONT_RECV_REQUESTS
 \

331 
SSL_DTLSEXT_HB_DONT_RECV_REQUESTS


	)

332 
	#SSL_gë_é£xt_hóπbót_≥ndög
(
s¶
) \

333 
	`SSL_gë_dé£xt_hóπbót_≥ndög
(
s¶
)

	)

334 
	#SSL_£t_é£xt_hóπbót_no_ªque°s
(
s¶
, 
¨g
) \

335 
	`SSL_£t_dé£xt_hóπbót_no_ªque°s
(
s¶
, 
¨g
)

	)

340 
	#TLS1_CK_PSK_WITH_RC4_128_SHA
 0x0300008A

	)

341 
	#TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA
 0x0300008B

	)

342 
	#TLS1_CK_PSK_WITH_AES_128_CBC_SHA
 0x0300008C

	)

343 
	#TLS1_CK_PSK_WITH_AES_256_CBC_SHA
 0x0300008D

	)

345 
	#TLS1_CK_DHE_PSK_WITH_RC4_128_SHA
 0x0300008E

	)

346 
	#TLS1_CK_DHE_PSK_WITH_3DES_EDE_CBC_SHA
 0x0300008F

	)

347 
	#TLS1_CK_DHE_PSK_WITH_AES_128_CBC_SHA
 0x03000090

	)

348 
	#TLS1_CK_DHE_PSK_WITH_AES_256_CBC_SHA
 0x03000091

	)

350 
	#TLS1_CK_RSA_PSK_WITH_RC4_128_SHA
 0x03000092

	)

351 
	#TLS1_CK_RSA_PSK_WITH_3DES_EDE_CBC_SHA
 0x03000093

	)

352 
	#TLS1_CK_RSA_PSK_WITH_AES_128_CBC_SHA
 0x03000094

	)

353 
	#TLS1_CK_RSA_PSK_WITH_AES_256_CBC_SHA
 0x03000095

	)

356 
	#TLS1_CK_PSK_WITH_AES_128_GCM_SHA256
 0x030000A8

	)

357 
	#TLS1_CK_PSK_WITH_AES_256_GCM_SHA384
 0x030000A9

	)

358 
	#TLS1_CK_DHE_PSK_WITH_AES_128_GCM_SHA256
 0x030000AA

	)

359 
	#TLS1_CK_DHE_PSK_WITH_AES_256_GCM_SHA384
 0x030000AB

	)

360 
	#TLS1_CK_RSA_PSK_WITH_AES_128_GCM_SHA256
 0x030000AC

	)

361 
	#TLS1_CK_RSA_PSK_WITH_AES_256_GCM_SHA384
 0x030000AD

	)

363 
	#TLS1_CK_PSK_WITH_AES_128_CBC_SHA256
 0x030000AE

	)

364 
	#TLS1_CK_PSK_WITH_AES_256_CBC_SHA384
 0x030000AF

	)

365 
	#TLS1_CK_PSK_WITH_NULL_SHA256
 0x030000B0

	)

366 
	#TLS1_CK_PSK_WITH_NULL_SHA384
 0x030000B1

	)

368 
	#TLS1_CK_DHE_PSK_WITH_AES_128_CBC_SHA256
 0x030000B2

	)

369 
	#TLS1_CK_DHE_PSK_WITH_AES_256_CBC_SHA384
 0x030000B3

	)

370 
	#TLS1_CK_DHE_PSK_WITH_NULL_SHA256
 0x030000B4

	)

371 
	#TLS1_CK_DHE_PSK_WITH_NULL_SHA384
 0x030000B5

	)

373 
	#TLS1_CK_RSA_PSK_WITH_AES_128_CBC_SHA256
 0x030000B6

	)

374 
	#TLS1_CK_RSA_PSK_WITH_AES_256_CBC_SHA384
 0x030000B7

	)

375 
	#TLS1_CK_RSA_PSK_WITH_NULL_SHA256
 0x030000B8

	)

376 
	#TLS1_CK_RSA_PSK_WITH_NULL_SHA384
 0x030000B9

	)

379 
	#TLS1_CK_PSK_WITH_NULL_SHA
 0x0300002C

	)

380 
	#TLS1_CK_DHE_PSK_WITH_NULL_SHA
 0x0300002D

	)

381 
	#TLS1_CK_RSA_PSK_WITH_NULL_SHA
 0x0300002E

	)

384 
	#TLS1_CK_RSA_WITH_AES_128_SHA
 0x0300002F

	)

385 
	#TLS1_CK_DH_DSS_WITH_AES_128_SHA
 0x03000030

	)

386 
	#TLS1_CK_DH_RSA_WITH_AES_128_SHA
 0x03000031

	)

387 
	#TLS1_CK_DHE_DSS_WITH_AES_128_SHA
 0x03000032

	)

388 
	#TLS1_CK_DHE_RSA_WITH_AES_128_SHA
 0x03000033

	)

389 
	#TLS1_CK_ADH_WITH_AES_128_SHA
 0x03000034

	)

391 
	#TLS1_CK_RSA_WITH_AES_256_SHA
 0x03000035

	)

392 
	#TLS1_CK_DH_DSS_WITH_AES_256_SHA
 0x03000036

	)

393 
	#TLS1_CK_DH_RSA_WITH_AES_256_SHA
 0x03000037

	)

394 
	#TLS1_CK_DHE_DSS_WITH_AES_256_SHA
 0x03000038

	)

395 
	#TLS1_CK_DHE_RSA_WITH_AES_256_SHA
 0x03000039

	)

396 
	#TLS1_CK_ADH_WITH_AES_256_SHA
 0x0300003A

	)

399 
	#TLS1_CK_RSA_WITH_NULL_SHA256
 0x0300003B

	)

400 
	#TLS1_CK_RSA_WITH_AES_128_SHA256
 0x0300003C

	)

401 
	#TLS1_CK_RSA_WITH_AES_256_SHA256
 0x0300003D

	)

402 
	#TLS1_CK_DH_DSS_WITH_AES_128_SHA256
 0x0300003E

	)

403 
	#TLS1_CK_DH_RSA_WITH_AES_128_SHA256
 0x0300003F

	)

404 
	#TLS1_CK_DHE_DSS_WITH_AES_128_SHA256
 0x03000040

	)

407 
	#TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000041

	)

408 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA
 0x03000042

	)

409 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000043

	)

410 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA
 0x03000044

	)

411 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000045

	)

412 
	#TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA
 0x03000046

	)

415 
	#TLS1_CK_DHE_RSA_WITH_AES_128_SHA256
 0x03000067

	)

416 
	#TLS1_CK_DH_DSS_WITH_AES_256_SHA256
 0x03000068

	)

417 
	#TLS1_CK_DH_RSA_WITH_AES_256_SHA256
 0x03000069

	)

418 
	#TLS1_CK_DHE_DSS_WITH_AES_256_SHA256
 0x0300006A

	)

419 
	#TLS1_CK_DHE_RSA_WITH_AES_256_SHA256
 0x0300006B

	)

420 
	#TLS1_CK_ADH_WITH_AES_128_SHA256
 0x0300006C

	)

421 
	#TLS1_CK_ADH_WITH_AES_256_SHA256
 0x0300006D

	)

424 
	#TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000084

	)

425 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA
 0x03000085

	)

426 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000086

	)

427 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA
 0x03000087

	)

428 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000088

	)

429 
	#TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA
 0x03000089

	)

432 
	#TLS1_CK_RSA_WITH_SEED_SHA
 0x03000096

	)

433 
	#TLS1_CK_DH_DSS_WITH_SEED_SHA
 0x03000097

	)

434 
	#TLS1_CK_DH_RSA_WITH_SEED_SHA
 0x03000098

	)

435 
	#TLS1_CK_DHE_DSS_WITH_SEED_SHA
 0x03000099

	)

436 
	#TLS1_CK_DHE_RSA_WITH_SEED_SHA
 0x0300009A

	)

437 
	#TLS1_CK_ADH_WITH_SEED_SHA
 0x0300009B

	)

440 
	#TLS1_CK_RSA_WITH_AES_128_GCM_SHA256
 0x0300009C

	)

441 
	#TLS1_CK_RSA_WITH_AES_256_GCM_SHA384
 0x0300009D

	)

442 
	#TLS1_CK_DHE_RSA_WITH_AES_128_GCM_SHA256
 0x0300009E

	)

443 
	#TLS1_CK_DHE_RSA_WITH_AES_256_GCM_SHA384
 0x0300009F

	)

444 
	#TLS1_CK_DH_RSA_WITH_AES_128_GCM_SHA256
 0x030000A0

	)

445 
	#TLS1_CK_DH_RSA_WITH_AES_256_GCM_SHA384
 0x030000A1

	)

446 
	#TLS1_CK_DHE_DSS_WITH_AES_128_GCM_SHA256
 0x030000A2

	)

447 
	#TLS1_CK_DHE_DSS_WITH_AES_256_GCM_SHA384
 0x030000A3

	)

448 
	#TLS1_CK_DH_DSS_WITH_AES_128_GCM_SHA256
 0x030000A4

	)

449 
	#TLS1_CK_DH_DSS_WITH_AES_256_GCM_SHA384
 0x030000A5

	)

450 
	#TLS1_CK_ADH_WITH_AES_128_GCM_SHA256
 0x030000A6

	)

451 
	#TLS1_CK_ADH_WITH_AES_256_GCM_SHA384
 0x030000A7

	)

454 
	#TLS1_CK_RSA_WITH_AES_128_CCM
 0x0300C09C

	)

455 
	#TLS1_CK_RSA_WITH_AES_256_CCM
 0x0300C09D

	)

456 
	#TLS1_CK_DHE_RSA_WITH_AES_128_CCM
 0x0300C09E

	)

457 
	#TLS1_CK_DHE_RSA_WITH_AES_256_CCM
 0x0300C09F

	)

458 
	#TLS1_CK_RSA_WITH_AES_128_CCM_8
 0x0300C0A0

	)

459 
	#TLS1_CK_RSA_WITH_AES_256_CCM_8
 0x0300C0A1

	)

460 
	#TLS1_CK_DHE_RSA_WITH_AES_128_CCM_8
 0x0300C0A2

	)

461 
	#TLS1_CK_DHE_RSA_WITH_AES_256_CCM_8
 0x0300C0A3

	)

462 
	#TLS1_CK_PSK_WITH_AES_128_CCM
 0x0300C0A4

	)

463 
	#TLS1_CK_PSK_WITH_AES_256_CCM
 0x0300C0A5

	)

464 
	#TLS1_CK_DHE_PSK_WITH_AES_128_CCM
 0x0300C0A6

	)

465 
	#TLS1_CK_DHE_PSK_WITH_AES_256_CCM
 0x0300C0A7

	)

466 
	#TLS1_CK_PSK_WITH_AES_128_CCM_8
 0x0300C0A8

	)

467 
	#TLS1_CK_PSK_WITH_AES_256_CCM_8
 0x0300C0A9

	)

468 
	#TLS1_CK_DHE_PSK_WITH_AES_128_CCM_8
 0x0300C0AA

	)

469 
	#TLS1_CK_DHE_PSK_WITH_AES_256_CCM_8
 0x0300C0AB

	)

472 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CCM
 0x0300C0AC

	)

473 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CCM
 0x0300C0AD

	)

474 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CCM_8
 0x0300C0AE

	)

475 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CCM_8
 0x0300C0AF

	)

478 
	#TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA256
 0x030000BA

	)

479 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256
 0x030000BB

	)

480 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256
 0x030000BC

	)

481 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256
 0x030000BD

	)

482 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256
 0x030000BE

	)

483 
	#TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA256
 0x030000BF

	)

485 
	#TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA256
 0x030000C0

	)

486 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256
 0x030000C1

	)

487 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256
 0x030000C2

	)

488 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256
 0x030000C3

	)

489 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256
 0x030000C4

	)

490 
	#TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA256
 0x030000C5

	)

493 
	#TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA
 0x0300C001

	)

494 
	#TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA
 0x0300C002

	)

495 
	#TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA
 0x0300C003

	)

496 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA
 0x0300C004

	)

497 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA
 0x0300C005

	)

499 
	#TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA
 0x0300C006

	)

500 
	#TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA
 0x0300C007

	)

501 
	#TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA
 0x0300C008

	)

502 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
 0x0300C009

	)

503 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
 0x0300C00A

	)

505 
	#TLS1_CK_ECDH_RSA_WITH_NULL_SHA
 0x0300C00B

	)

506 
	#TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA
 0x0300C00C

	)

507 
	#TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA
 0x0300C00D

	)

508 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA
 0x0300C00E

	)

509 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA
 0x0300C00F

	)

511 
	#TLS1_CK_ECDHE_RSA_WITH_NULL_SHA
 0x0300C010

	)

512 
	#TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA
 0x0300C011

	)

513 
	#TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA
 0x0300C012

	)

514 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA
 0x0300C013

	)

515 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA
 0x0300C014

	)

517 
	#TLS1_CK_ECDH_™⁄_WITH_NULL_SHA
 0x0300C015

	)

518 
	#TLS1_CK_ECDH_™⁄_WITH_RC4_128_SHA
 0x0300C016

	)

519 
	#TLS1_CK_ECDH_™⁄_WITH_DES_192_CBC3_SHA
 0x0300C017

	)

520 
	#TLS1_CK_ECDH_™⁄_WITH_AES_128_CBC_SHA
 0x0300C018

	)

521 
	#TLS1_CK_ECDH_™⁄_WITH_AES_256_CBC_SHA
 0x0300C019

	)

524 
	#TLS1_CK_SRP_SHA_WITH_3DES_EDE_CBC_SHA
 0x0300C01A

	)

525 
	#TLS1_CK_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA
 0x0300C01B

	)

526 
	#TLS1_CK_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA
 0x0300C01C

	)

527 
	#TLS1_CK_SRP_SHA_WITH_AES_128_CBC_SHA
 0x0300C01D

	)

528 
	#TLS1_CK_SRP_SHA_RSA_WITH_AES_128_CBC_SHA
 0x0300C01E

	)

529 
	#TLS1_CK_SRP_SHA_DSS_WITH_AES_128_CBC_SHA
 0x0300C01F

	)

530 
	#TLS1_CK_SRP_SHA_WITH_AES_256_CBC_SHA
 0x0300C020

	)

531 
	#TLS1_CK_SRP_SHA_RSA_WITH_AES_256_CBC_SHA
 0x0300C021

	)

532 
	#TLS1_CK_SRP_SHA_DSS_WITH_AES_256_CBC_SHA
 0x0300C022

	)

536 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_SHA256
 0x0300C023

	)

537 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_SHA384
 0x0300C024

	)

538 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_SHA256
 0x0300C025

	)

539 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_SHA384
 0x0300C026

	)

540 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_SHA256
 0x0300C027

	)

541 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_SHA384
 0x0300C028

	)

542 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_SHA256
 0x0300C029

	)

543 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_SHA384
 0x0300C02A

	)

546 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
 0x0300C02B

	)

547 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
 0x0300C02C

	)

548 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
 0x0300C02D

	)

549 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
 0x0300C02E

	)

550 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_GCM_SHA256
 0x0300C02F

	)

551 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_GCM_SHA384
 0x0300C030

	)

552 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_GCM_SHA256
 0x0300C031

	)

553 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_GCM_SHA384
 0x0300C032

	)

556 
	#TLS1_CK_ECDHE_PSK_WITH_RC4_128_SHA
 0x0300C033

	)

557 
	#TLS1_CK_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA
 0x0300C034

	)

558 
	#TLS1_CK_ECDHE_PSK_WITH_AES_128_CBC_SHA
 0x0300C035

	)

559 
	#TLS1_CK_ECDHE_PSK_WITH_AES_256_CBC_SHA
 0x0300C036

	)

561 
	#TLS1_CK_ECDHE_PSK_WITH_AES_128_CBC_SHA256
 0x0300C037

	)

562 
	#TLS1_CK_ECDHE_PSK_WITH_AES_256_CBC_SHA384
 0x0300C038

	)

566 
	#TLS1_CK_ECDHE_PSK_WITH_NULL_SHA
 0x0300C039

	)

567 
	#TLS1_CK_ECDHE_PSK_WITH_NULL_SHA256
 0x0300C03A

	)

568 
	#TLS1_CK_ECDHE_PSK_WITH_NULL_SHA384
 0x0300C03B

	)

571 
	#TLS1_CK_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256
 0x0300C072

	)

572 
	#TLS1_CK_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384
 0x0300C073

	)

573 
	#TLS1_CK_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256
 0x0300C074

	)

574 
	#TLS1_CK_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384
 0x0300C075

	)

575 
	#TLS1_CK_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256
 0x0300C076

	)

576 
	#TLS1_CK_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384
 0x0300C077

	)

577 
	#TLS1_CK_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256
 0x0300C078

	)

578 
	#TLS1_CK_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384
 0x0300C079

	)

580 
	#TLS1_CK_PSK_WITH_CAMELLIA_128_CBC_SHA256
 0x0300C094

	)

581 
	#TLS1_CK_PSK_WITH_CAMELLIA_256_CBC_SHA384
 0x0300C095

	)

582 
	#TLS1_CK_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256
 0x0300C096

	)

583 
	#TLS1_CK_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384
 0x0300C097

	)

584 
	#TLS1_CK_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256
 0x0300C098

	)

585 
	#TLS1_CK_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384
 0x0300C099

	)

586 
	#TLS1_CK_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256
 0x0300C09A

	)

587 
	#TLS1_CK_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384
 0x0300C09B

	)

590 
	#TLS1_CK_ECDHE_RSA_WITH_CHACHA20_POLY1305
 0x0300CCA8

	)

591 
	#TLS1_CK_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
 0x0300CCA9

	)

592 
	#TLS1_CK_DHE_RSA_WITH_CHACHA20_POLY1305
 0x0300CCAA

	)

593 
	#TLS1_CK_PSK_WITH_CHACHA20_POLY1305
 0x0300CCAB

	)

594 
	#TLS1_CK_ECDHE_PSK_WITH_CHACHA20_POLY1305
 0x0300CCAC

	)

595 
	#TLS1_CK_DHE_PSK_WITH_CHACHA20_POLY1305
 0x0300CCAD

	)

596 
	#TLS1_CK_RSA_PSK_WITH_CHACHA20_POLY1305
 0x0300CCAE

	)

604 
	#TLS1_TXT_DHE_DSS_WITH_RC4_128_SHA
 "DHE-DSS-RC4-SHA"

	)

606 
	#TLS1_TXT_PSK_WITH_NULL_SHA
 "PSK-NULL-SHA"

	)

607 
	#TLS1_TXT_DHE_PSK_WITH_NULL_SHA
 "DHE-PSK-NULL-SHA"

	)

608 
	#TLS1_TXT_RSA_PSK_WITH_NULL_SHA
 "RSA-PSK-NULL-SHA"

	)

611 
	#TLS1_TXT_RSA_WITH_AES_128_SHA
 "AES128-SHA"

	)

612 
	#TLS1_TXT_DH_DSS_WITH_AES_128_SHA
 "DH-DSS-AES128-SHA"

	)

613 
	#TLS1_TXT_DH_RSA_WITH_AES_128_SHA
 "DH-RSA-AES128-SHA"

	)

614 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_SHA
 "DHE-DSS-AES128-SHA"

	)

615 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_SHA
 "DHE-RSA-AES128-SHA"

	)

616 
	#TLS1_TXT_ADH_WITH_AES_128_SHA
 "ADH-AES128-SHA"

	)

618 
	#TLS1_TXT_RSA_WITH_AES_256_SHA
 "AES256-SHA"

	)

619 
	#TLS1_TXT_DH_DSS_WITH_AES_256_SHA
 "DH-DSS-AES256-SHA"

	)

620 
	#TLS1_TXT_DH_RSA_WITH_AES_256_SHA
 "DH-RSA-AES256-SHA"

	)

621 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_SHA
 "DHE-DSS-AES256-SHA"

	)

622 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_SHA
 "DHE-RSA-AES256-SHA"

	)

623 
	#TLS1_TXT_ADH_WITH_AES_256_SHA
 "ADH-AES256-SHA"

	)

626 
	#TLS1_TXT_ECDH_ECDSA_WITH_NULL_SHA
 "ECDH-ECDSA-NULL-SHA"

	)

627 
	#TLS1_TXT_ECDH_ECDSA_WITH_RC4_128_SHA
 "ECDH-ECDSA-RC4-SHA"

	)

628 
	#TLS1_TXT_ECDH_ECDSA_WITH_DES_192_CBC3_SHA
 "ECDH-ECDSA-DES-CBC3-SHA"

	)

629 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_CBC_SHA
 "ECDH-ECDSA-AES128-SHA"

	)

630 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_CBC_SHA
 "ECDH-ECDSA-AES256-SHA"

	)

632 
	#TLS1_TXT_ECDHE_ECDSA_WITH_NULL_SHA
 "ECDHE-ECDSA-NULL-SHA"

	)

633 
	#TLS1_TXT_ECDHE_ECDSA_WITH_RC4_128_SHA
 "ECDHE-ECDSA-RC4-SHA"

	)

634 
	#TLS1_TXT_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA
 "ECDHE-ECDSA-DES-CBC3-SHA"

	)

635 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
 "ECDHE-ECDSA-AES128-SHA"

	)

636 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
 "ECDHE-ECDSA-AES256-SHA"

	)

638 
	#TLS1_TXT_ECDH_RSA_WITH_NULL_SHA
 "ECDH-RSA-NULL-SHA"

	)

639 
	#TLS1_TXT_ECDH_RSA_WITH_RC4_128_SHA
 "ECDH-RSA-RC4-SHA"

	)

640 
	#TLS1_TXT_ECDH_RSA_WITH_DES_192_CBC3_SHA
 "ECDH-RSA-DES-CBC3-SHA"

	)

641 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_CBC_SHA
 "ECDH-RSA-AES128-SHA"

	)

642 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_CBC_SHA
 "ECDH-RSA-AES256-SHA"

	)

644 
	#TLS1_TXT_ECDHE_RSA_WITH_NULL_SHA
 "ECDHE-RSA-NULL-SHA"

	)

645 
	#TLS1_TXT_ECDHE_RSA_WITH_RC4_128_SHA
 "ECDHE-RSA-RC4-SHA"

	)

646 
	#TLS1_TXT_ECDHE_RSA_WITH_DES_192_CBC3_SHA
 "ECDHE-RSA-DES-CBC3-SHA"

	)

647 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA
 "ECDHE-RSA-AES128-SHA"

	)

648 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA
 "ECDHE-RSA-AES256-SHA"

	)

650 
	#TLS1_TXT_ECDH_™⁄_WITH_NULL_SHA
 "AECDH-NULL-SHA"

	)

651 
	#TLS1_TXT_ECDH_™⁄_WITH_RC4_128_SHA
 "AECDH-RC4-SHA"

	)

652 
	#TLS1_TXT_ECDH_™⁄_WITH_DES_192_CBC3_SHA
 "AECDH-DES-CBC3-SHA"

	)

653 
	#TLS1_TXT_ECDH_™⁄_WITH_AES_128_CBC_SHA
 "AECDH-AES128-SHA"

	)

654 
	#TLS1_TXT_ECDH_™⁄_WITH_AES_256_CBC_SHA
 "AECDH-AES256-SHA"

	)

657 
	#TLS1_TXT_PSK_WITH_RC4_128_SHA
 "PSK-RC4-SHA"

	)

658 
	#TLS1_TXT_PSK_WITH_3DES_EDE_CBC_SHA
 "PSK-3DES-EDE-CBC-SHA"

	)

659 
	#TLS1_TXT_PSK_WITH_AES_128_CBC_SHA
 "PSK-AES128-CBC-SHA"

	)

660 
	#TLS1_TXT_PSK_WITH_AES_256_CBC_SHA
 "PSK-AES256-CBC-SHA"

	)

662 
	#TLS1_TXT_DHE_PSK_WITH_RC4_128_SHA
 "DHE-PSK-RC4-SHA"

	)

663 
	#TLS1_TXT_DHE_PSK_WITH_3DES_EDE_CBC_SHA
 "DHE-PSK-3DES-EDE-CBC-SHA"

	)

664 
	#TLS1_TXT_DHE_PSK_WITH_AES_128_CBC_SHA
 "DHE-PSK-AES128-CBC-SHA"

	)

665 
	#TLS1_TXT_DHE_PSK_WITH_AES_256_CBC_SHA
 "DHE-PSK-AES256-CBC-SHA"

	)

666 
	#TLS1_TXT_RSA_PSK_WITH_RC4_128_SHA
 "RSA-PSK-RC4-SHA"

	)

667 
	#TLS1_TXT_RSA_PSK_WITH_3DES_EDE_CBC_SHA
 "RSA-PSK-3DES-EDE-CBC-SHA"

	)

668 
	#TLS1_TXT_RSA_PSK_WITH_AES_128_CBC_SHA
 "RSA-PSK-AES128-CBC-SHA"

	)

669 
	#TLS1_TXT_RSA_PSK_WITH_AES_256_CBC_SHA
 "RSA-PSK-AES256-CBC-SHA"

	)

672 
	#TLS1_TXT_PSK_WITH_AES_128_GCM_SHA256
 "PSK-AES128-GCM-SHA256"

	)

673 
	#TLS1_TXT_PSK_WITH_AES_256_GCM_SHA384
 "PSK-AES256-GCM-SHA384"

	)

674 
	#TLS1_TXT_DHE_PSK_WITH_AES_128_GCM_SHA256
 "DHE-PSK-AES128-GCM-SHA256"

	)

675 
	#TLS1_TXT_DHE_PSK_WITH_AES_256_GCM_SHA384
 "DHE-PSK-AES256-GCM-SHA384"

	)

676 
	#TLS1_TXT_RSA_PSK_WITH_AES_128_GCM_SHA256
 "RSA-PSK-AES128-GCM-SHA256"

	)

677 
	#TLS1_TXT_RSA_PSK_WITH_AES_256_GCM_SHA384
 "RSA-PSK-AES256-GCM-SHA384"

	)

679 
	#TLS1_TXT_PSK_WITH_AES_128_CBC_SHA256
 "PSK-AES128-CBC-SHA256"

	)

680 
	#TLS1_TXT_PSK_WITH_AES_256_CBC_SHA384
 "PSK-AES256-CBC-SHA384"

	)

681 
	#TLS1_TXT_PSK_WITH_NULL_SHA256
 "PSK-NULL-SHA256"

	)

682 
	#TLS1_TXT_PSK_WITH_NULL_SHA384
 "PSK-NULL-SHA384"

	)

684 
	#TLS1_TXT_DHE_PSK_WITH_AES_128_CBC_SHA256
 "DHE-PSK-AES128-CBC-SHA256"

	)

685 
	#TLS1_TXT_DHE_PSK_WITH_AES_256_CBC_SHA384
 "DHE-PSK-AES256-CBC-SHA384"

	)

686 
	#TLS1_TXT_DHE_PSK_WITH_NULL_SHA256
 "DHE-PSK-NULL-SHA256"

	)

687 
	#TLS1_TXT_DHE_PSK_WITH_NULL_SHA384
 "DHE-PSK-NULL-SHA384"

	)

689 
	#TLS1_TXT_RSA_PSK_WITH_AES_128_CBC_SHA256
 "RSA-PSK-AES128-CBC-SHA256"

	)

690 
	#TLS1_TXT_RSA_PSK_WITH_AES_256_CBC_SHA384
 "RSA-PSK-AES256-CBC-SHA384"

	)

691 
	#TLS1_TXT_RSA_PSK_WITH_NULL_SHA256
 "RSA-PSK-NULL-SHA256"

	)

692 
	#TLS1_TXT_RSA_PSK_WITH_NULL_SHA384
 "RSA-PSK-NULL-SHA384"

	)

695 
	#TLS1_TXT_SRP_SHA_WITH_3DES_EDE_CBC_SHA
 "SRP-3DES-EDE-CBC-SHA"

	)

696 
	#TLS1_TXT_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA
 "SRP-RSA-3DES-EDE-CBC-SHA"

	)

697 
	#TLS1_TXT_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA
 "SRP-DSS-3DES-EDE-CBC-SHA"

	)

698 
	#TLS1_TXT_SRP_SHA_WITH_AES_128_CBC_SHA
 "SRP-AES-128-CBC-SHA"

	)

699 
	#TLS1_TXT_SRP_SHA_RSA_WITH_AES_128_CBC_SHA
 "SRP-RSA-AES-128-CBC-SHA"

	)

700 
	#TLS1_TXT_SRP_SHA_DSS_WITH_AES_128_CBC_SHA
 "SRP-DSS-AES-128-CBC-SHA"

	)

701 
	#TLS1_TXT_SRP_SHA_WITH_AES_256_CBC_SHA
 "SRP-AES-256-CBC-SHA"

	)

702 
	#TLS1_TXT_SRP_SHA_RSA_WITH_AES_256_CBC_SHA
 "SRP-RSA-AES-256-CBC-SHA"

	)

703 
	#TLS1_TXT_SRP_SHA_DSS_WITH_AES_256_CBC_SHA
 "SRP-DSS-AES-256-CBC-SHA"

	)

706 
	#TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA
 "CAMELLIA128-SHA"

	)

707 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA
 "DH-DSS-CAMELLIA128-SHA"

	)

708 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA
 "DH-RSA-CAMELLIA128-SHA"

	)

709 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA
 "DHE-DSS-CAMELLIA128-SHA"

	)

710 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
 "DHE-RSA-CAMELLIA128-SHA"

	)

711 
	#TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA
 "ADH-CAMELLIA128-SHA"

	)

713 
	#TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA
 "CAMELLIA256-SHA"

	)

714 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA
 "DH-DSS-CAMELLIA256-SHA"

	)

715 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA
 "DH-RSA-CAMELLIA256-SHA"

	)

716 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA
 "DHE-DSS-CAMELLIA256-SHA"

	)

717 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
 "DHE-RSA-CAMELLIA256-SHA"

	)

718 
	#TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA
 "ADH-CAMELLIA256-SHA"

	)

721 
	#TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA256
 "CAMELLIA128-SHA256"

	)

722 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256
 "DH-DSS-CAMELLIA128-SHA256"

	)

723 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256
 "DH-RSA-CAMELLIA128-SHA256"

	)

724 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256
 "DHE-DSS-CAMELLIA128-SHA256"

	)

725 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256
 "DHE-RSA-CAMELLIA128-SHA256"

	)

726 
	#TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA256
 "ADH-CAMELLIA128-SHA256"

	)

728 
	#TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA256
 "CAMELLIA256-SHA256"

	)

729 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256
 "DH-DSS-CAMELLIA256-SHA256"

	)

730 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256
 "DH-RSA-CAMELLIA256-SHA256"

	)

731 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256
 "DHE-DSS-CAMELLIA256-SHA256"

	)

732 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256
 "DHE-RSA-CAMELLIA256-SHA256"

	)

733 
	#TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA256
 "ADH-CAMELLIA256-SHA256"

	)

735 
	#TLS1_TXT_PSK_WITH_CAMELLIA_128_CBC_SHA256
 "PSK-CAMELLIA128-SHA256"

	)

736 
	#TLS1_TXT_PSK_WITH_CAMELLIA_256_CBC_SHA384
 "PSK-CAMELLIA256-SHA384"

	)

737 
	#TLS1_TXT_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256
 "DHE-PSK-CAMELLIA128-SHA256"

	)

738 
	#TLS1_TXT_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384
 "DHE-PSK-CAMELLIA256-SHA384"

	)

739 
	#TLS1_TXT_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256
 "RSA-PSK-CAMELLIA128-SHA256"

	)

740 
	#TLS1_TXT_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384
 "RSA-PSK-CAMELLIA256-SHA384"

	)

741 
	#TLS1_TXT_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256
 "ECDHE-PSK-CAMELLIA128-SHA256"

	)

742 
	#TLS1_TXT_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384
 "ECDHE-PSK-CAMELLIA256-SHA384"

	)

745 
	#TLS1_TXT_RSA_WITH_SEED_SHA
 "SEED-SHA"

	)

746 
	#TLS1_TXT_DH_DSS_WITH_SEED_SHA
 "DH-DSS-SEED-SHA"

	)

747 
	#TLS1_TXT_DH_RSA_WITH_SEED_SHA
 "DH-RSA-SEED-SHA"

	)

748 
	#TLS1_TXT_DHE_DSS_WITH_SEED_SHA
 "DHE-DSS-SEED-SHA"

	)

749 
	#TLS1_TXT_DHE_RSA_WITH_SEED_SHA
 "DHE-RSA-SEED-SHA"

	)

750 
	#TLS1_TXT_ADH_WITH_SEED_SHA
 "ADH-SEED-SHA"

	)

753 
	#TLS1_TXT_RSA_WITH_NULL_SHA256
 "NULL-SHA256"

	)

754 
	#TLS1_TXT_RSA_WITH_AES_128_SHA256
 "AES128-SHA256"

	)

755 
	#TLS1_TXT_RSA_WITH_AES_256_SHA256
 "AES256-SHA256"

	)

756 
	#TLS1_TXT_DH_DSS_WITH_AES_128_SHA256
 "DH-DSS-AES128-SHA256"

	)

757 
	#TLS1_TXT_DH_RSA_WITH_AES_128_SHA256
 "DH-RSA-AES128-SHA256"

	)

758 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_SHA256
 "DHE-DSS-AES128-SHA256"

	)

759 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_SHA256
 "DHE-RSA-AES128-SHA256"

	)

760 
	#TLS1_TXT_DH_DSS_WITH_AES_256_SHA256
 "DH-DSS-AES256-SHA256"

	)

761 
	#TLS1_TXT_DH_RSA_WITH_AES_256_SHA256
 "DH-RSA-AES256-SHA256"

	)

762 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_SHA256
 "DHE-DSS-AES256-SHA256"

	)

763 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_SHA256
 "DHE-RSA-AES256-SHA256"

	)

764 
	#TLS1_TXT_ADH_WITH_AES_128_SHA256
 "ADH-AES128-SHA256"

	)

765 
	#TLS1_TXT_ADH_WITH_AES_256_SHA256
 "ADH-AES256-SHA256"

	)

768 
	#TLS1_TXT_RSA_WITH_AES_128_GCM_SHA256
 "AES128-GCM-SHA256"

	)

769 
	#TLS1_TXT_RSA_WITH_AES_256_GCM_SHA384
 "AES256-GCM-SHA384"

	)

770 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_GCM_SHA256
 "DHE-RSA-AES128-GCM-SHA256"

	)

771 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_GCM_SHA384
 "DHE-RSA-AES256-GCM-SHA384"

	)

772 
	#TLS1_TXT_DH_RSA_WITH_AES_128_GCM_SHA256
 "DH-RSA-AES128-GCM-SHA256"

	)

773 
	#TLS1_TXT_DH_RSA_WITH_AES_256_GCM_SHA384
 "DH-RSA-AES256-GCM-SHA384"

	)

774 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_GCM_SHA256
 "DHE-DSS-AES128-GCM-SHA256"

	)

775 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_GCM_SHA384
 "DHE-DSS-AES256-GCM-SHA384"

	)

776 
	#TLS1_TXT_DH_DSS_WITH_AES_128_GCM_SHA256
 "DH-DSS-AES128-GCM-SHA256"

	)

777 
	#TLS1_TXT_DH_DSS_WITH_AES_256_GCM_SHA384
 "DH-DSS-AES256-GCM-SHA384"

	)

778 
	#TLS1_TXT_ADH_WITH_AES_128_GCM_SHA256
 "ADH-AES128-GCM-SHA256"

	)

779 
	#TLS1_TXT_ADH_WITH_AES_256_GCM_SHA384
 "ADH-AES256-GCM-SHA384"

	)

783 
	#TLS1_TXT_RSA_WITH_AES_128_CCM
 "AES128-CCM"

	)

784 
	#TLS1_TXT_RSA_WITH_AES_256_CCM
 "AES256-CCM"

	)

785 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_CCM
 "DHE-RSA-AES128-CCM"

	)

786 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_CCM
 "DHE-RSA-AES256-CCM"

	)

788 
	#TLS1_TXT_RSA_WITH_AES_128_CCM_8
 "AES128-CCM8"

	)

789 
	#TLS1_TXT_RSA_WITH_AES_256_CCM_8
 "AES256-CCM8"

	)

790 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_CCM_8
 "DHE-RSA-AES128-CCM8"

	)

791 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_CCM_8
 "DHE-RSA-AES256-CCM8"

	)

793 
	#TLS1_TXT_PSK_WITH_AES_128_CCM
 "PSK-AES128-CCM"

	)

794 
	#TLS1_TXT_PSK_WITH_AES_256_CCM
 "PSK-AES256-CCM"

	)

795 
	#TLS1_TXT_DHE_PSK_WITH_AES_128_CCM
 "DHE-PSK-AES128-CCM"

	)

796 
	#TLS1_TXT_DHE_PSK_WITH_AES_256_CCM
 "DHE-PSK-AES256-CCM"

	)

798 
	#TLS1_TXT_PSK_WITH_AES_128_CCM_8
 "PSK-AES128-CCM8"

	)

799 
	#TLS1_TXT_PSK_WITH_AES_256_CCM_8
 "PSK-AES256-CCM8"

	)

800 
	#TLS1_TXT_DHE_PSK_WITH_AES_128_CCM_8
 "DHE-PSK-AES128-CCM8"

	)

801 
	#TLS1_TXT_DHE_PSK_WITH_AES_256_CCM_8
 "DHE-PSK-AES256-CCM8"

	)

805 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CCM
 "ECDHE-ECDSA-AES128-CCM"

	)

806 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CCM
 "ECDHE-ECDSA-AES256-CCM"

	)

807 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CCM_8
 "ECDHE-ECDSA-AES128-CCM8"

	)

808 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CCM_8
 "ECDHE-ECDSA-AES256-CCM8"

	)

812 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_SHA256
 "ECDHE-ECDSA-AES128-SHA256"

	)

813 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_SHA384
 "ECDHE-ECDSA-AES256-SHA384"

	)

814 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_SHA256
 "ECDH-ECDSA-AES128-SHA256"

	)

815 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_SHA384
 "ECDH-ECDSA-AES256-SHA384"

	)

816 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_SHA256
 "ECDHE-RSA-AES128-SHA256"

	)

817 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_SHA384
 "ECDHE-RSA-AES256-SHA384"

	)

818 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_SHA256
 "ECDH-RSA-AES128-SHA256"

	)

819 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_SHA384
 "ECDH-RSA-AES256-SHA384"

	)

822 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
 "ECDHE-ECDSA-AES128-GCM-SHA256"

	)

823 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
 "ECDHE-ECDSA-AES256-GCM-SHA384"

	)

824 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
 "ECDH-ECDSA-AES128-GCM-SHA256"

	)

825 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
 "ECDH-ECDSA-AES256-GCM-SHA384"

	)

826 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_GCM_SHA256
 "ECDHE-RSA-AES128-GCM-SHA256"

	)

827 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_GCM_SHA384
 "ECDHE-RSA-AES256-GCM-SHA384"

	)

828 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_GCM_SHA256
 "ECDH-RSA-AES128-GCM-SHA256"

	)

829 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_GCM_SHA384
 "ECDH-RSA-AES256-GCM-SHA384"

	)

832 
	#TLS1_TXT_PSK_WITH_AES_128_GCM_SHA256
 "PSK-AES128-GCM-SHA256"

	)

833 
	#TLS1_TXT_PSK_WITH_AES_256_GCM_SHA384
 "PSK-AES256-GCM-SHA384"

	)

836 
	#TLS1_TXT_ECDHE_PSK_WITH_RC4_128_SHA
 "ECDHE-PSK-RC4-SHA"

	)

837 
	#TLS1_TXT_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA
 "ECDHE-PSK-3DES-EDE-CBC-SHA"

	)

838 
	#TLS1_TXT_ECDHE_PSK_WITH_AES_128_CBC_SHA
 "ECDHE-PSK-AES128-CBC-SHA"

	)

839 
	#TLS1_TXT_ECDHE_PSK_WITH_AES_256_CBC_SHA
 "ECDHE-PSK-AES256-CBC-SHA"

	)

841 
	#TLS1_TXT_ECDHE_PSK_WITH_AES_128_CBC_SHA256
 "ECDHE-PSK-AES128-CBC-SHA256"

	)

842 
	#TLS1_TXT_ECDHE_PSK_WITH_AES_256_CBC_SHA384
 "ECDHE-PSK-AES256-CBC-SHA384"

	)

844 
	#TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA
 "ECDHE-PSK-NULL-SHA"

	)

845 
	#TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA256
 "ECDHE-PSK-NULL-SHA256"

	)

846 
	#TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA384
 "ECDHE-PSK-NULL-SHA384"

	)

849 
	#TLS1_TXT_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256
 "ECDHE-ECDSA-CAMELLIA128-SHA256"

	)

850 
	#TLS1_TXT_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384
 "ECDHE-ECDSA-CAMELLIA256-SHA384"

	)

851 
	#TLS1_TXT_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256
 "ECDH-ECDSA-CAMELLIA128-SHA256"

	)

852 
	#TLS1_TXT_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384
 "ECDH-ECDSA-CAMELLIA256-SHA384"

	)

853 
	#TLS1_TXT_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256
 "ECDHE-RSA-CAMELLIA128-SHA256"

	)

854 
	#TLS1_TXT_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384
 "ECDHE-RSA-CAMELLIA256-SHA384"

	)

855 
	#TLS1_TXT_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256
 "ECDH-RSA-CAMELLIA128-SHA256"

	)

856 
	#TLS1_TXT_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384
 "ECDH-RSA-CAMELLIA256-SHA384"

	)

859 
	#TLS1_TXT_ECDHE_RSA_WITH_CHACHA20_POLY1305
 "ECDHE-RSA-CHACHA20-POLY1305"

	)

860 
	#TLS1_TXT_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
 "ECDHE-ECDSA-CHACHA20-POLY1305"

	)

861 
	#TLS1_TXT_DHE_RSA_WITH_CHACHA20_POLY1305
 "DHE-RSA-CHACHA20-POLY1305"

	)

862 
	#TLS1_TXT_PSK_WITH_CHACHA20_POLY1305
 "PSK-CHACHA20-POLY1305"

	)

863 
	#TLS1_TXT_ECDHE_PSK_WITH_CHACHA20_POLY1305
 "ECDHE-PSK-CHACHA20-POLY1305"

	)

864 
	#TLS1_TXT_DHE_PSK_WITH_CHACHA20_POLY1305
 "DHE-PSK-CHACHA20-POLY1305"

	)

865 
	#TLS1_TXT_RSA_PSK_WITH_CHACHA20_POLY1305
 "RSA-PSK-CHACHA20-POLY1305"

	)

867 
	#TLS_CT_RSA_SIGN
 1

	)

868 
	#TLS_CT_DSS_SIGN
 2

	)

869 
	#TLS_CT_RSA_FIXED_DH
 3

	)

870 
	#TLS_CT_DSS_FIXED_DH
 4

	)

871 
	#TLS_CT_ECDSA_SIGN
 64

	)

872 
	#TLS_CT_RSA_FIXED_ECDH
 65

	)

873 
	#TLS_CT_ECDSA_FIXED_ECDH
 66

	)

874 
	#TLS_CT_GOST01_SIGN
 22

	)

875 
	#TLS_CT_GOST12_SIGN
 238

	)

876 
	#TLS_CT_GOST12_512_SIGN
 239

	)

882 
	#TLS_CT_NUMBER
 9

	)

884 
	#TLS1_FINISH_MAC_LENGTH
 12

	)

886 
	#TLS_MD_MAX_CONST_SIZE
 22

	)

887 
	#TLS_MD_CLIENT_FINISH_CONST
 "˛õ¡ föished"

	)

888 
	#TLS_MD_CLIENT_FINISH_CONST_SIZE
 15

	)

889 
	#TLS_MD_SERVER_FINISH_CONST
 "£rvî föished"

	)

890 
	#TLS_MD_SERVER_FINISH_CONST_SIZE
 15

	)

891 
	#TLS_MD_KEY_EXPANSION_CONST
 "keyÉx∑nsi⁄"

	)

892 
	#TLS_MD_KEY_EXPANSION_CONST_SIZE
 13

	)

893 
	#TLS_MD_CLIENT_WRITE_KEY_CONST
 "˛õ¡ wrôêkey"

	)

894 
	#TLS_MD_CLIENT_WRITE_KEY_CONST_SIZE
 16

	)

895 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "£rvî wrôêkey"

	)

896 
	#TLS_MD_SERVER_WRITE_KEY_CONST_SIZE
 16

	)

897 
	#TLS_MD_IV_BLOCK_CONST
 "IV block"

	)

898 
	#TLS_MD_IV_BLOCK_CONST_SIZE
 8

	)

899 
	#TLS_MD_MASTER_SECRET_CONST
 "ma°î se¸ë"

	)

900 
	#TLS_MD_MASTER_SECRET_CONST_SIZE
 13

	)

901 
	#TLS_MD_EXTENDED_MASTER_SECRET_CONST
 "exãnded ma°î se¸ë"

	)

902 
	#TLS_MD_EXTENDED_MASTER_SECRET_CONST_SIZE
 22

	)

904 #ifde‡
CHARSET_EBCDIC


905 #unde‡
TLS_MD_CLIENT_FINISH_CONST


909 
	#TLS_MD_CLIENT_FINISH_CONST
 "\x63\x6c\x69\x65\x6e\x74\x20\x66\x69\x6e\x69\x73\x68\x65\x64"

	)

911 #unde‡
TLS_MD_SERVER_FINISH_CONST


915 
	#TLS_MD_SERVER_FINISH_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x66\x69\x6e\x69\x73\x68\x65\x64"

	)

917 #unde‡
TLS_MD_SERVER_WRITE_KEY_CONST


921 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

923 #unde‡
TLS_MD_KEY_EXPANSION_CONST


927 
	#TLS_MD_KEY_EXPANSION_CONST
 "\x6b\x65\x79\x20\x65\x78\x70\x61\x6e\x73\x69\x6f\x6e"

	)

929 #unde‡
TLS_MD_CLIENT_WRITE_KEY_CONST


933 
	#TLS_MD_CLIENT_WRITE_KEY_CONST
 "\x63\x6c\x69\x65\x6e\x74\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

935 #unde‡
TLS_MD_SERVER_WRITE_KEY_CONST


939 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

941 #unde‡
TLS_MD_IV_BLOCK_CONST


945 
	#TLS_MD_IV_BLOCK_CONST
 "\x49\x56\x20\x62\x6c\x6f\x63\x6b"

	)

947 #unde‡
TLS_MD_MASTER_SECRET_CONST


951 
	#TLS_MD_MASTER_SECRET_CONST
 "\x6d\x61\x73\x74\x65\x72\x20\x73\x65\x63\x72\x65\x74"

	)

952 #unde‡
TLS_MD_EXTENDED_MASTER_SECRET_CONST


956 
	#TLS_MD_EXTENDED_MASTER_SECRET_CONST
 "\x65\x78\x74\x65\x63\x64\x65\x64\x20\x6d\x61\x73\x74\x65\x72\x20\x73\x65\x63\x72\x65\x74"

	)

960 
	sés_£ssi⁄_tickë_ext_°
 {

961 
Àngth
;

962 *
d©a
;

965 #ifde‡ 
__˝lu•lus


	@ts.h

10 #i‚de‡
HEADER_TS_H


11 
	#HEADER_TS_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #i‚de‡
OPENSSL_NO_TS


16 
	~<›ís¶/symhacks.h
>

17 
	~<›ís¶/buf„r.h
>

18 
	~<›ís¶/evp.h
>

19 
	~<›ís¶/bio.h
>

20 
	~<›ís¶/°ack.h
>

21 
	~<›ís¶/a¢1.h
>

22 
	~<›ís¶/ß„°ack.h
>

23 
	~<›ís¶/rß.h
>

24 
	~<›ís¶/dß.h
>

25 
	~<›ís¶/dh.h
>

26 #ifde‡ 
__˝lu•lus


30 
	~<›ís¶/x509.h
>

31 
	~<›ís¶/x509v3.h
>

33 
TS_msg_im¥öt_°
 
	tTS_MSG_IMPRINT
;

34 
TS_ªq_°
 
	tTS_REQ
;

35 
TS_accuøcy_°
 
	tTS_ACCURACY
;

36 
TS_t°_öfo_°
 
	tTS_TST_INFO
;

39 
	#TS_STATUS_GRANTED
 0

	)

40 
	#TS_STATUS_GRANTED_WITH_MODS
 1

	)

41 
	#TS_STATUS_REJECTION
 2

	)

42 
	#TS_STATUS_WAITING
 3

	)

43 
	#TS_STATUS_REVOCATION_WARNING
 4

	)

44 
	#TS_STATUS_REVOCATION_NOTIFICATION
 5

	)

47 
	#TS_INFO_BAD_ALG
 0

	)

48 
	#TS_INFO_BAD_REQUEST
 2

	)

49 
	#TS_INFO_BAD_DATA_FORMAT
 5

	)

50 
	#TS_INFO_TIME_NOT_AVAILABLE
 14

	)

51 
	#TS_INFO_UNACCEPTED_POLICY
 15

	)

52 
	#TS_INFO_UNACCEPTED_EXTENSION
 16

	)

53 
	#TS_INFO_ADD_INFO_NOT_AVAILABLE
 17

	)

54 
	#TS_INFO_SYSTEM_FAILURE
 25

	)

57 
TS_°©us_öfo_°
 
	tTS_STATUS_INFO
;

58 
ESS_issuî_£rül
 
	tESS_ISSUER_SERIAL
;

59 
ESS_˚π_id
 
	tESS_CERT_ID
;

60 
ESS_signög_˚π
 
	tESS_SIGNING_CERT
;

62 
DEFINE_STACK_OF
(
ESS_CERT_ID
)

64 
TS_ª•_°
 
	tTS_RESP
;

66 
TS_REQ
 *
TS_REQ_√w
();

67 
TS_REQ_‰ì
(
TS_REQ
 *
a
);

68 
i2d_TS_REQ
(c⁄° 
TS_REQ
 *
a
, **
µ
);

69 
TS_REQ
 *
d2i_TS_REQ
(TS_REQ **
a
, c⁄° **
µ
, 
Àngth
);

71 
TS_REQ
 *
TS_REQ_dup
(TS_REQ *
a
);

73 #i‚de‡
OPENSSL_NO_STDIO


74 
TS_REQ
 *
d2i_TS_REQ_Â
(
FILE
 *
Â
, TS_REQ **
a
);

75 
i2d_TS_REQ_Â
(
FILE
 *
Â
, 
TS_REQ
 *
a
);

77 
TS_REQ
 *
d2i_TS_REQ_bio
(
BIO
 *
Â
, TS_REQ **
a
);

78 
i2d_TS_REQ_bio
(
BIO
 *
Â
, 
TS_REQ
 *
a
);

80 
TS_MSG_IMPRINT
 *
TS_MSG_IMPRINT_√w
();

81 
TS_MSG_IMPRINT_‰ì
(
TS_MSG_IMPRINT
 *
a
);

82 
i2d_TS_MSG_IMPRINT
(c⁄° 
TS_MSG_IMPRINT
 *
a
, **
µ
);

83 
TS_MSG_IMPRINT
 *
d2i_TS_MSG_IMPRINT
(TS_MSG_IMPRINT **
a
,

84 c⁄° **
µ
, 
Àngth
);

86 
TS_MSG_IMPRINT
 *
TS_MSG_IMPRINT_dup
(TS_MSG_IMPRINT *
a
);

88 #i‚de‡
OPENSSL_NO_STDIO


89 
TS_MSG_IMPRINT
 *
d2i_TS_MSG_IMPRINT_Â
(
FILE
 *
Â
, TS_MSG_IMPRINT **
a
);

90 
i2d_TS_MSG_IMPRINT_Â
(
FILE
 *
Â
, 
TS_MSG_IMPRINT
 *
a
);

92 
TS_MSG_IMPRINT
 *
d2i_TS_MSG_IMPRINT_bio
(
BIO
 *
bio
, TS_MSG_IMPRINT **
a
);

93 
i2d_TS_MSG_IMPRINT_bio
(
BIO
 *
bio
, 
TS_MSG_IMPRINT
 *
a
);

95 
TS_RESP
 *
TS_RESP_√w
();

96 
TS_RESP_‰ì
(
TS_RESP
 *
a
);

97 
i2d_TS_RESP
(c⁄° 
TS_RESP
 *
a
, **
µ
);

98 
TS_RESP
 *
d2i_TS_RESP
(TS_RESP **
a
, c⁄° **
µ
, 
Àngth
);

99 
TS_TST_INFO
 *
PKCS7_to_TS_TST_INFO
(
PKCS7
 *
tokí
);

100 
TS_RESP
 *
TS_RESP_dup
(TS_RESP *
a
);

102 #i‚de‡
OPENSSL_NO_STDIO


103 
TS_RESP
 *
d2i_TS_RESP_Â
(
FILE
 *
Â
, TS_RESP **
a
);

104 
i2d_TS_RESP_Â
(
FILE
 *
Â
, 
TS_RESP
 *
a
);

106 
TS_RESP
 *
d2i_TS_RESP_bio
(
BIO
 *
bio
, TS_RESP **
a
);

107 
i2d_TS_RESP_bio
(
BIO
 *
bio
, 
TS_RESP
 *
a
);

109 
TS_STATUS_INFO
 *
TS_STATUS_INFO_√w
();

110 
TS_STATUS_INFO_‰ì
(
TS_STATUS_INFO
 *
a
);

111 
i2d_TS_STATUS_INFO
(c⁄° 
TS_STATUS_INFO
 *
a
, **
µ
);

112 
TS_STATUS_INFO
 *
d2i_TS_STATUS_INFO
(TS_STATUS_INFO **
a
,

113 c⁄° **
µ
, 
Àngth
);

114 
TS_STATUS_INFO
 *
TS_STATUS_INFO_dup
(TS_STATUS_INFO *
a
);

116 
TS_TST_INFO
 *
TS_TST_INFO_√w
();

117 
TS_TST_INFO_‰ì
(
TS_TST_INFO
 *
a
);

118 
i2d_TS_TST_INFO
(c⁄° 
TS_TST_INFO
 *
a
, **
µ
);

119 
TS_TST_INFO
 *
d2i_TS_TST_INFO
(TS_TST_INFO **
a
, c⁄° **
µ
,

120 
Àngth
);

121 
TS_TST_INFO
 *
TS_TST_INFO_dup
(TS_TST_INFO *
a
);

123 #i‚de‡
OPENSSL_NO_STDIO


124 
TS_TST_INFO
 *
d2i_TS_TST_INFO_Â
(
FILE
 *
Â
, TS_TST_INFO **
a
);

125 
i2d_TS_TST_INFO_Â
(
FILE
 *
Â
, 
TS_TST_INFO
 *
a
);

127 
TS_TST_INFO
 *
d2i_TS_TST_INFO_bio
(
BIO
 *
bio
, TS_TST_INFO **
a
);

128 
i2d_TS_TST_INFO_bio
(
BIO
 *
bio
, 
TS_TST_INFO
 *
a
);

130 
TS_ACCURACY
 *
TS_ACCURACY_√w
();

131 
TS_ACCURACY_‰ì
(
TS_ACCURACY
 *
a
);

132 
i2d_TS_ACCURACY
(c⁄° 
TS_ACCURACY
 *
a
, **
µ
);

133 
TS_ACCURACY
 *
d2i_TS_ACCURACY
(TS_ACCURACY **
a
, c⁄° **
µ
,

134 
Àngth
);

135 
TS_ACCURACY
 *
TS_ACCURACY_dup
(TS_ACCURACY *
a
);

137 
ESS_ISSUER_SERIAL
 *
ESS_ISSUER_SERIAL_√w
();

138 
ESS_ISSUER_SERIAL_‰ì
(
ESS_ISSUER_SERIAL
 *
a
);

139 
i2d_ESS_ISSUER_SERIAL
(c⁄° 
ESS_ISSUER_SERIAL
 *
a
, **
µ
);

140 
ESS_ISSUER_SERIAL
 *
d2i_ESS_ISSUER_SERIAL
(ESS_ISSUER_SERIAL **
a
,

141 c⁄° **
µ
,

142 
Àngth
);

143 
ESS_ISSUER_SERIAL
 *
ESS_ISSUER_SERIAL_dup
(ESS_ISSUER_SERIAL *
a
);

145 
ESS_CERT_ID
 *
ESS_CERT_ID_√w
();

146 
ESS_CERT_ID_‰ì
(
ESS_CERT_ID
 *
a
);

147 
i2d_ESS_CERT_ID
(c⁄° 
ESS_CERT_ID
 *
a
, **
µ
);

148 
ESS_CERT_ID
 *
d2i_ESS_CERT_ID
(ESS_CERT_ID **
a
, c⁄° **
µ
,

149 
Àngth
);

150 
ESS_CERT_ID
 *
ESS_CERT_ID_dup
(ESS_CERT_ID *
a
);

152 
ESS_SIGNING_CERT
 *
ESS_SIGNING_CERT_√w
();

153 
ESS_SIGNING_CERT_‰ì
(
ESS_SIGNING_CERT
 *
a
);

154 
i2d_ESS_SIGNING_CERT
(c⁄° 
ESS_SIGNING_CERT
 *
a
, **
µ
);

155 
ESS_SIGNING_CERT
 *
d2i_ESS_SIGNING_CERT
(ESS_SIGNING_CERT **
a
,

156 c⁄° **
µ
, 
Àngth
);

157 
ESS_SIGNING_CERT
 *
ESS_SIGNING_CERT_dup
(ESS_SIGNING_CERT *
a
);

159 
ERR_lﬂd_TS_°rögs
();

161 
TS_REQ_£t_vîsi⁄
(
TS_REQ
 *
a
, 
vîsi⁄
);

162 
TS_REQ_gë_vîsi⁄
(c⁄° 
TS_REQ
 *
a
);

164 
TS_STATUS_INFO_£t_°©us
(
TS_STATUS_INFO
 *
a
, 
i
);

165 
ASN1_INTEGER
 *
TS_STATUS_INFO_gë0_°©us
(
TS_STATUS_INFO
 *
a
);

167 
STACK_OF
(
ASN1_UTF8STRING
Ë*
TS_STATUS_INFO_gë0_ãxt
(
TS_STATUS_INFO
 *
a
);

169 
ASN1_BIT_STRING
 *
TS_STATUS_INFO_gë0_Áûuª_öfo
(
TS_STATUS_INFO
 *
a
);

171 
TS_REQ_£t_msg_im¥öt
(
TS_REQ
 *
a
, 
TS_MSG_IMPRINT
 *
msg_im¥öt
);

172 
TS_MSG_IMPRINT
 *
TS_REQ_gë_msg_im¥öt
(
TS_REQ
 *
a
);

174 
TS_MSG_IMPRINT_£t_Ægo
(
TS_MSG_IMPRINT
 *
a
, 
X509_ALGOR
 *
Æg
);

175 
X509_ALGOR
 *
TS_MSG_IMPRINT_gë_Ægo
(
TS_MSG_IMPRINT
 *
a
);

177 
TS_MSG_IMPRINT_£t_msg
(
TS_MSG_IMPRINT
 *
a
, *
d
, 
Àn
);

178 
ASN1_OCTET_STRING
 *
TS_MSG_IMPRINT_gë_msg
(
TS_MSG_IMPRINT
 *
a
);

180 
TS_REQ_£t_pﬁicy_id
(
TS_REQ
 *
a
, 
ASN1_OBJECT
 *
pﬁicy
);

181 
ASN1_OBJECT
 *
TS_REQ_gë_pﬁicy_id
(
TS_REQ
 *
a
);

183 
TS_REQ_£t_n⁄˚
(
TS_REQ
 *
a
, c⁄° 
ASN1_INTEGER
 *
n⁄˚
);

184 c⁄° 
ASN1_INTEGER
 *
TS_REQ_gë_n⁄˚
(c⁄° 
TS_REQ
 *
a
);

186 
TS_REQ_£t_˚π_ªq
(
TS_REQ
 *
a
, 
˚π_ªq
);

187 
TS_REQ_gë_˚π_ªq
(c⁄° 
TS_REQ
 *
a
);

189 
STACK_OF
(
X509_EXTENSION
Ë*
TS_REQ_gë_exts
(
TS_REQ
 *
a
);

190 
TS_REQ_ext_‰ì
(
TS_REQ
 *
a
);

191 
TS_REQ_gë_ext_cou¡
(
TS_REQ
 *
a
);

192 
TS_REQ_gë_ext_by_NID
(
TS_REQ
 *
a
, 
nid
, 
œ°pos
);

193 
TS_REQ_gë_ext_by_OBJ
(
TS_REQ
 *
a
, 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

194 
TS_REQ_gë_ext_by_¸ôiˇl
(
TS_REQ
 *
a
, 
¸ô
, 
œ°pos
);

195 
X509_EXTENSION
 *
TS_REQ_gë_ext
(
TS_REQ
 *
a
, 
loc
);

196 
X509_EXTENSION
 *
TS_REQ_dñëe_ext
(
TS_REQ
 *
a
, 
loc
);

197 
TS_REQ_add_ext
(
TS_REQ
 *
a
, 
X509_EXTENSION
 *
ex
, 
loc
);

198 *
TS_REQ_gë_ext_d2i
(
TS_REQ
 *
a
, 
nid
, *
¸ô
, *
idx
);

202 
TS_REQ_¥öt_bio
(
BIO
 *
bio
, 
TS_REQ
 *
a
);

206 
TS_RESP_£t_°©us_öfo
(
TS_RESP
 *
a
, 
TS_STATUS_INFO
 *
öfo
);

207 
TS_STATUS_INFO
 *
TS_RESP_gë_°©us_öfo
(
TS_RESP
 *
a
);

210 
TS_RESP_£t_t°_öfo
(
TS_RESP
 *
a
, 
PKCS7
 *
p7
, 
TS_TST_INFO
 *
t°_öfo
);

211 
PKCS7
 *
TS_RESP_gë_tokí
(
TS_RESP
 *
a
);

212 
TS_TST_INFO
 *
TS_RESP_gë_t°_öfo
(
TS_RESP
 *
a
);

214 
TS_TST_INFO_£t_vîsi⁄
(
TS_TST_INFO
 *
a
, 
vîsi⁄
);

215 
TS_TST_INFO_gë_vîsi⁄
(c⁄° 
TS_TST_INFO
 *
a
);

217 
TS_TST_INFO_£t_pﬁicy_id
(
TS_TST_INFO
 *
a
, 
ASN1_OBJECT
 *
pﬁicy_id
);

218 
ASN1_OBJECT
 *
TS_TST_INFO_gë_pﬁicy_id
(
TS_TST_INFO
 *
a
);

220 
TS_TST_INFO_£t_msg_im¥öt
(
TS_TST_INFO
 *
a
, 
TS_MSG_IMPRINT
 *
msg_im¥öt
);

221 
TS_MSG_IMPRINT
 *
TS_TST_INFO_gë_msg_im¥öt
(
TS_TST_INFO
 *
a
);

223 
TS_TST_INFO_£t_£rül
(
TS_TST_INFO
 *
a
, c⁄° 
ASN1_INTEGER
 *
£rül
);

224 c⁄° 
ASN1_INTEGER
 *
TS_TST_INFO_gë_£rül
(c⁄° 
TS_TST_INFO
 *
a
);

226 
TS_TST_INFO_£t_time
(
TS_TST_INFO
 *
a
, c⁄° 
ASN1_GENERALIZEDTIME
 *
gtime
);

227 c⁄° 
ASN1_GENERALIZEDTIME
 *
TS_TST_INFO_gë_time
(c⁄° 
TS_TST_INFO
 *
a
);

229 
TS_TST_INFO_£t_accuøcy
(
TS_TST_INFO
 *
a
, 
TS_ACCURACY
 *
accuøcy
);

230 
TS_ACCURACY
 *
TS_TST_INFO_gë_accuøcy
(
TS_TST_INFO
 *
a
);

232 
TS_ACCURACY_£t_£c⁄ds
(
TS_ACCURACY
 *
a
, c⁄° 
ASN1_INTEGER
 *
£c⁄ds
);

233 c⁄° 
ASN1_INTEGER
 *
TS_ACCURACY_gë_£c⁄ds
(c⁄° 
TS_ACCURACY
 *
a
);

235 
TS_ACCURACY_£t_mûlis
(
TS_ACCURACY
 *
a
, c⁄° 
ASN1_INTEGER
 *
mûlis
);

236 c⁄° 
ASN1_INTEGER
 *
TS_ACCURACY_gë_mûlis
(c⁄° 
TS_ACCURACY
 *
a
);

238 
TS_ACCURACY_£t_mi¸os
(
TS_ACCURACY
 *
a
, c⁄° 
ASN1_INTEGER
 *
mi¸os
);

239 c⁄° 
ASN1_INTEGER
 *
TS_ACCURACY_gë_mi¸os
(c⁄° 
TS_ACCURACY
 *
a
);

241 
TS_TST_INFO_£t_‹dîög
(
TS_TST_INFO
 *
a
, 
‹dîög
);

242 
TS_TST_INFO_gë_‹dîög
(c⁄° 
TS_TST_INFO
 *
a
);

244 
TS_TST_INFO_£t_n⁄˚
(
TS_TST_INFO
 *
a
, c⁄° 
ASN1_INTEGER
 *
n⁄˚
);

245 c⁄° 
ASN1_INTEGER
 *
TS_TST_INFO_gë_n⁄˚
(c⁄° 
TS_TST_INFO
 *
a
);

247 
TS_TST_INFO_£t_tß
(
TS_TST_INFO
 *
a
, 
GENERAL_NAME
 *
tß
);

248 
GENERAL_NAME
 *
TS_TST_INFO_gë_tß
(
TS_TST_INFO
 *
a
);

250 
STACK_OF
(
X509_EXTENSION
Ë*
TS_TST_INFO_gë_exts
(
TS_TST_INFO
 *
a
);

251 
TS_TST_INFO_ext_‰ì
(
TS_TST_INFO
 *
a
);

252 
TS_TST_INFO_gë_ext_cou¡
(
TS_TST_INFO
 *
a
);

253 
TS_TST_INFO_gë_ext_by_NID
(
TS_TST_INFO
 *
a
, 
nid
, 
œ°pos
);

254 
TS_TST_INFO_gë_ext_by_OBJ
(
TS_TST_INFO
 *
a
, 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

255 
TS_TST_INFO_gë_ext_by_¸ôiˇl
(
TS_TST_INFO
 *
a
, 
¸ô
, 
œ°pos
);

256 
X509_EXTENSION
 *
TS_TST_INFO_gë_ext
(
TS_TST_INFO
 *
a
, 
loc
);

257 
X509_EXTENSION
 *
TS_TST_INFO_dñëe_ext
(
TS_TST_INFO
 *
a
, 
loc
);

258 
TS_TST_INFO_add_ext
(
TS_TST_INFO
 *
a
, 
X509_EXTENSION
 *
ex
, 
loc
);

259 *
TS_TST_INFO_gë_ext_d2i
(
TS_TST_INFO
 *
a
, 
nid
, *
¸ô
, *
idx
);

268 
	#TS_TSA_NAME
 0x01

	)

271 
	#TS_ORDERING
 0x02

	)

278 
	#TS_ESS_CERT_ID_CHAIN
 0x04

	)

281 
TS_ª•_˘x
;

284 
ASN1_INTEGER
 *(*
	tTS_£rül_cb
Ë(
	tTS_ª•_˘x
 *, *);

291 (*
TS_time_cb
Ë(
	tTS_ª•_˘x
 *, *, *
	t£c
,

292 *
	tu£c
);

299 (*
TS_exãnsi⁄_cb
Ë(
	tTS_ª•_˘x
 *, 
	tX509_EXTENSION
 *,

302 
TS_ª•_˘x
 
	tTS_RESP_CTX
;

304 
DEFINE_STACK_OF_CONST
(
EVP_MD
)

307 
TS_RESP_CTX
 *
TS_RESP_CTX_√w
();

308 
TS_RESP_CTX_‰ì
(
TS_RESP_CTX
 *
˘x
);

311 
TS_RESP_CTX_£t_sig√r_˚π
(
TS_RESP_CTX
 *
˘x
, 
X509
 *
sig√r
);

314 
TS_RESP_CTX_£t_sig√r_key
(
TS_RESP_CTX
 *
˘x
, 
EVP_PKEY
 *
key
);

316 
TS_RESP_CTX_£t_sig√r_dige°
(
TS_RESP_CTX
 *
˘x
,

317 c⁄° 
EVP_MD
 *
sig√r_dige°
);

320 
TS_RESP_CTX_£t_def_pﬁicy
(
TS_RESP_CTX
 *
˘x
, 
ASN1_OBJECT
 *
def_pﬁicy
);

323 
TS_RESP_CTX_£t_˚πs
(
TS_RESP_CTX
 *
˘x
, 
STACK_OF
(
X509
Ë*
˚πs
);

329 
TS_RESP_CTX_add_pﬁicy
(
TS_RESP_CTX
 *
˘x
, 
ASN1_OBJECT
 *
pﬁicy
);

335 
TS_RESP_CTX_add_md
(
TS_RESP_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
md
);

338 
TS_RESP_CTX_£t_accuøcy
(
TS_RESP_CTX
 *
˘x
,

339 
£cs
, 
mûlis
, 
mi¸os
);

345 
TS_RESP_CTX_£t_˛ock_¥ecisi⁄_digôs
(
TS_RESP_CTX
 *
˘x
,

346 
˛ock_¥ecisi⁄_digôs
);

348 
	#TS_MAX_CLOCK_PRECISION_DIGITS
 6

	)

351 
TS_RESP_CTX_add_Êags
(
TS_RESP_CTX
 *
˘x
, 
Êags
);

354 
TS_RESP_CTX_£t_£rül_cb
(
TS_RESP_CTX
 *
˘x
, 
TS_£rül_cb
 
cb
, *
d©a
);

357 
TS_RESP_CTX_£t_time_cb
(
TS_RESP_CTX
 *
˘x
, 
TS_time_cb
 
cb
, *
d©a
);

364 
TS_RESP_CTX_£t_exãnsi⁄_cb
(
TS_RESP_CTX
 *
˘x
,

365 
TS_exãnsi⁄_cb
 
cb
, *
d©a
);

368 
TS_RESP_CTX_£t_°©us_öfo
(
TS_RESP_CTX
 *
˘x
,

369 
°©us
, c⁄° *
ãxt
);

372 
TS_RESP_CTX_£t_°©us_öfo_c⁄d
(
TS_RESP_CTX
 *
˘x
,

373 
°©us
, c⁄° *
ãxt
);

375 
TS_RESP_CTX_add_Áûuª_öfo
(
TS_RESP_CTX
 *
˘x
, 
Áûuª
);

378 
TS_REQ
 *
TS_RESP_CTX_gë_ªque°
(
TS_RESP_CTX
 *
˘x
);

380 
TS_TST_INFO
 *
TS_RESP_CTX_gë_t°_öfo
(
TS_RESP_CTX
 *
˘x
);

387 
TS_RESP
 *
TS_RESP_¸óã_ª•⁄£
(
TS_RESP_CTX
 *
˘x
, 
BIO
 *
ªq_bio
);

394 
TS_RESP_vîify_sig«tuª
(
PKCS7
 *
tokí
, 
STACK_OF
(
X509
Ë*
˚πs
,

395 
X509_STORE
 *
°‹e
, 
X509
 **
sig√r_out
);

400 
	#TS_VFY_SIGNATURE
 (1u << 0)

	)

402 
	#TS_VFY_VERSION
 (1u << 1)

	)

404 
	#TS_VFY_POLICY
 (1u << 2)

	)

409 
	#TS_VFY_IMPRINT
 (1u << 3)

	)

415 
	#TS_VFY_DATA
 (1u << 4)

	)

417 
	#TS_VFY_NONCE
 (1u << 5)

	)

419 
	#TS_VFY_SIGNER
 (1u << 6)

	)

421 
	#TS_VFY_TSA_NAME
 (1u << 7)

	)

424 
	#TS_VFY_ALL_IMPRINT
 (
TS_VFY_SIGNATURE
 \

425 | 
TS_VFY_VERSION
 \

426 | 
TS_VFY_POLICY
 \

427 | 
TS_VFY_IMPRINT
 \

428 | 
TS_VFY_NONCE
 \

429 | 
TS_VFY_SIGNER
 \

430 | 
TS_VFY_TSA_NAME
)

	)

431 
	#TS_VFY_ALL_DATA
 (
TS_VFY_SIGNATURE
 \

432 | 
TS_VFY_VERSION
 \

433 | 
TS_VFY_POLICY
 \

434 | 
TS_VFY_DATA
 \

435 | 
TS_VFY_NONCE
 \

436 | 
TS_VFY_SIGNER
 \

437 | 
TS_VFY_TSA_NAME
)

	)

439 
TS_vîify_˘x
 
	tTS_VERIFY_CTX
;

441 
TS_RESP_vîify_ª•⁄£
(
TS_VERIFY_CTX
 *
˘x
, 
TS_RESP
 *
ª•⁄£
);

442 
TS_RESP_vîify_tokí
(
TS_VERIFY_CTX
 *
˘x
, 
PKCS7
 *
tokí
);

447 
TS_VERIFY_CTX
 *
TS_VERIFY_CTX_√w
();

448 
TS_VERIFY_CTX_öô
(
TS_VERIFY_CTX
 *
˘x
);

449 
TS_VERIFY_CTX_‰ì
(
TS_VERIFY_CTX
 *
˘x
);

450 
TS_VERIFY_CTX_˛ónup
(
TS_VERIFY_CTX
 *
˘x
);

451 
TS_VERIFY_CTX_£t_Êags
(
TS_VERIFY_CTX
 *
˘x
, 
f
);

452 
TS_VERIFY_CTX_add_Êags
(
TS_VERIFY_CTX
 *
˘x
, 
f
);

453 
BIO
 *
TS_VERIFY_CTX_£t_d©a
(
TS_VERIFY_CTX
 *
˘x
, BIO *
b
);

454 *
TS_VERIFY_CTX_£t_im¥öt
(
TS_VERIFY_CTX
 *
˘x
,

455 *
hex°r
, 
Àn
);

456 
X509_STORE
 *
TS_VERIFY_CTX_£t_°‹e
(
TS_VERIFY_CTX
 *
˘x
, X509_STORE *
s
);

457 
STACK_OF
(
X509
Ë*
TS_VERIFY_CTS_£t_˚πs
(
TS_VERIFY_CTX
 *
˘x
, STACK_OF(X509Ë*
˚πs
);

475 
TS_VERIFY_CTX
 *
TS_REQ_to_TS_VERIFY_CTX
(
TS_REQ
 *
ªq
, TS_VERIFY_CTX *
˘x
);

479 
TS_RESP_¥öt_bio
(
BIO
 *
bio
, 
TS_RESP
 *
a
);

480 
TS_STATUS_INFO_¥öt_bio
(
BIO
 *
bio
, 
TS_STATUS_INFO
 *
a
);

481 
TS_TST_INFO_¥öt_bio
(
BIO
 *
bio
, 
TS_TST_INFO
 *
a
);

485 
TS_ASN1_INTEGER_¥öt_bio
(
BIO
 *
bio
, c⁄° 
ASN1_INTEGER
 *
num
);

486 
TS_OBJ_¥öt_bio
(
BIO
 *
bio
, c⁄° 
ASN1_OBJECT
 *
obj
);

487 
TS_ext_¥öt_bio
(
BIO
 *
bio
, c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
exãnsi⁄s
);

488 
TS_X509_ALGOR_¥öt_bio
(
BIO
 *
bio
, c⁄° 
X509_ALGOR
 *
Æg
);

489 
TS_MSG_IMPRINT_¥öt_bio
(
BIO
 *
bio
, 
TS_MSG_IMPRINT
 *
msg
);

496 
X509
 *
TS_CONF_lﬂd_˚π
(c⁄° *
fûe
);

497 
STACK_OF
(
X509
Ë*
TS_CONF_lﬂd_˚πs
(c⁄° *
fûe
);

498 
EVP_PKEY
 *
TS_CONF_lﬂd_key
(c⁄° *
fûe
, c⁄° *
∑ss
);

499 c⁄° *
TS_CONF_gë_tß_£˘i⁄
(
CONF
 *
c⁄f
, c⁄° *
£˘i⁄
);

500 
TS_CONF_£t_£rül
(
CONF
 *
c⁄f
, c⁄° *
£˘i⁄
, 
TS_£rül_cb
 
cb
,

501 
TS_RESP_CTX
 *
˘x
);

502 #i‚de‡
OPENSSL_NO_ENGINE


503 
TS_CONF_£t_¸y±o_devi˚
(
CONF
 *
c⁄f
, c⁄° *
£˘i⁄
,

504 c⁄° *
devi˚
);

505 
TS_CONF_£t_deÁu…_ígöe
(c⁄° *
«me
);

507 
TS_CONF_£t_sig√r_˚π
(
CONF
 *
c⁄f
, c⁄° *
£˘i⁄
,

508 c⁄° *
˚π
, 
TS_RESP_CTX
 *
˘x
);

509 
TS_CONF_£t_˚πs
(
CONF
 *
c⁄f
, c⁄° *
£˘i⁄
, c⁄° *
˚πs
,

510 
TS_RESP_CTX
 *
˘x
);

511 
TS_CONF_£t_sig√r_key
(
CONF
 *
c⁄f
, c⁄° *
£˘i⁄
,

512 c⁄° *
key
, c⁄° *
∑ss
,

513 
TS_RESP_CTX
 *
˘x
);

514 
TS_CONF_£t_sig√r_dige°
(
CONF
 *
c⁄f
, c⁄° *
£˘i⁄
,

515 c⁄° *
md
, 
TS_RESP_CTX
 *
˘x
);

516 
TS_CONF_£t_def_pﬁicy
(
CONF
 *
c⁄f
, c⁄° *
£˘i⁄
,

517 c⁄° *
pﬁicy
, 
TS_RESP_CTX
 *
˘x
);

518 
TS_CONF_£t_pﬁicõs
(
CONF
 *
c⁄f
, c⁄° *
£˘i⁄
, 
TS_RESP_CTX
 *
˘x
);

519 
TS_CONF_£t_dige°s
(
CONF
 *
c⁄f
, c⁄° *
£˘i⁄
, 
TS_RESP_CTX
 *
˘x
);

520 
TS_CONF_£t_accuøcy
(
CONF
 *
c⁄f
, c⁄° *
£˘i⁄
, 
TS_RESP_CTX
 *
˘x
);

521 
TS_CONF_£t_˛ock_¥ecisi⁄_digôs
(
CONF
 *
c⁄f
, c⁄° *
£˘i⁄
,

522 
TS_RESP_CTX
 *
˘x
);

523 
TS_CONF_£t_‹dîög
(
CONF
 *
c⁄f
, c⁄° *
£˘i⁄
, 
TS_RESP_CTX
 *
˘x
);

524 
TS_CONF_£t_tß_«me
(
CONF
 *
c⁄f
, c⁄° *
£˘i⁄
, 
TS_RESP_CTX
 *
˘x
);

525 
TS_CONF_£t_ess_˚π_id_chaö
(
CONF
 *
c⁄f
, c⁄° *
£˘i⁄
,

526 
TS_RESP_CTX
 *
˘x
);

535 
ERR_lﬂd_TS_°rögs
();

540 
	#TS_F_DEF_SERIAL_CB
 110

	)

541 
	#TS_F_DEF_TIME_CB
 111

	)

542 
	#TS_F_ESS_ADD_SIGNING_CERT
 112

	)

543 
	#TS_F_ESS_CERT_ID_NEW_INIT
 113

	)

544 
	#TS_F_ESS_SIGNING_CERT_NEW_INIT
 114

	)

545 
	#TS_F_INT_TS_RESP_VERIFY_TOKEN
 149

	)

546 
	#TS_F_PKCS7_TO_TS_TST_INFO
 148

	)

547 
	#TS_F_TS_ACCURACY_SET_MICROS
 115

	)

548 
	#TS_F_TS_ACCURACY_SET_MILLIS
 116

	)

549 
	#TS_F_TS_ACCURACY_SET_SECONDS
 117

	)

550 
	#TS_F_TS_CHECK_IMPRINTS
 100

	)

551 
	#TS_F_TS_CHECK_NONCES
 101

	)

552 
	#TS_F_TS_CHECK_POLICY
 102

	)

553 
	#TS_F_TS_CHECK_SIGNING_CERTS
 103

	)

554 
	#TS_F_TS_CHECK_STATUS_INFO
 104

	)

555 
	#TS_F_TS_COMPUTE_IMPRINT
 145

	)

556 
	#TS_F_TS_CONF_INVALID
 151

	)

557 
	#TS_F_TS_CONF_LOAD_CERT
 153

	)

558 
	#TS_F_TS_CONF_LOAD_CERTS
 154

	)

559 
	#TS_F_TS_CONF_LOAD_KEY
 155

	)

560 
	#TS_F_TS_CONF_LOOKUP_FAIL
 152

	)

561 
	#TS_F_TS_CONF_SET_DEFAULT_ENGINE
 146

	)

562 
	#TS_F_TS_GET_STATUS_TEXT
 105

	)

563 
	#TS_F_TS_MSG_IMPRINT_SET_ALGO
 118

	)

564 
	#TS_F_TS_REQ_SET_MSG_IMPRINT
 119

	)

565 
	#TS_F_TS_REQ_SET_NONCE
 120

	)

566 
	#TS_F_TS_REQ_SET_POLICY_ID
 121

	)

567 
	#TS_F_TS_RESP_CREATE_RESPONSE
 122

	)

568 
	#TS_F_TS_RESP_CREATE_TST_INFO
 123

	)

569 
	#TS_F_TS_RESP_CTX_ADD_FAILURE_INFO
 124

	)

570 
	#TS_F_TS_RESP_CTX_ADD_MD
 125

	)

571 
	#TS_F_TS_RESP_CTX_ADD_POLICY
 126

	)

572 
	#TS_F_TS_RESP_CTX_NEW
 127

	)

573 
	#TS_F_TS_RESP_CTX_SET_ACCURACY
 128

	)

574 
	#TS_F_TS_RESP_CTX_SET_CERTS
 129

	)

575 
	#TS_F_TS_RESP_CTX_SET_DEF_POLICY
 130

	)

576 
	#TS_F_TS_RESP_CTX_SET_SIGNER_CERT
 131

	)

577 
	#TS_F_TS_RESP_CTX_SET_STATUS_INFO
 132

	)

578 
	#TS_F_TS_RESP_GET_POLICY
 133

	)

579 
	#TS_F_TS_RESP_SET_GENTIME_WITH_PRECISION
 134

	)

580 
	#TS_F_TS_RESP_SET_STATUS_INFO
 135

	)

581 
	#TS_F_TS_RESP_SET_TST_INFO
 150

	)

582 
	#TS_F_TS_RESP_SIGN
 136

	)

583 
	#TS_F_TS_RESP_VERIFY_SIGNATURE
 106

	)

584 
	#TS_F_TS_TST_INFO_SET_ACCURACY
 137

	)

585 
	#TS_F_TS_TST_INFO_SET_MSG_IMPRINT
 138

	)

586 
	#TS_F_TS_TST_INFO_SET_NONCE
 139

	)

587 
	#TS_F_TS_TST_INFO_SET_POLICY_ID
 140

	)

588 
	#TS_F_TS_TST_INFO_SET_SERIAL
 141

	)

589 
	#TS_F_TS_TST_INFO_SET_TIME
 142

	)

590 
	#TS_F_TS_TST_INFO_SET_TSA
 143

	)

591 
	#TS_F_TS_VERIFY
 108

	)

592 
	#TS_F_TS_VERIFY_CERT
 109

	)

593 
	#TS_F_TS_VERIFY_CTX_NEW
 144

	)

596 
	#TS_R_BAD_PKCS7_TYPE
 132

	)

597 
	#TS_R_BAD_TYPE
 133

	)

598 
	#TS_R_CANNOT_LOAD_CERT
 137

	)

599 
	#TS_R_CANNOT_LOAD_KEY
 138

	)

600 
	#TS_R_CERTIFICATE_VERIFY_ERROR
 100

	)

601 
	#TS_R_COULD_NOT_SET_ENGINE
 127

	)

602 
	#TS_R_COULD_NOT_SET_TIME
 115

	)

603 
	#TS_R_DETACHED_CONTENT
 134

	)

604 
	#TS_R_ESS_ADD_SIGNING_CERT_ERROR
 116

	)

605 
	#TS_R_ESS_SIGNING_CERTIFICATE_ERROR
 101

	)

606 
	#TS_R_INVALID_NULL_POINTER
 102

	)

607 
	#TS_R_INVALID_SIGNER_CERTIFICATE_PURPOSE
 117

	)

608 
	#TS_R_MESSAGE_IMPRINT_MISMATCH
 103

	)

609 
	#TS_R_NONCE_MISMATCH
 104

	)

610 
	#TS_R_NONCE_NOT_RETURNED
 105

	)

611 
	#TS_R_NO_CONTENT
 106

	)

612 
	#TS_R_NO_TIME_STAMP_TOKEN
 107

	)

613 
	#TS_R_PKCS7_ADD_SIGNATURE_ERROR
 118

	)

614 
	#TS_R_PKCS7_ADD_SIGNED_ATTR_ERROR
 119

	)

615 
	#TS_R_PKCS7_TO_TS_TST_INFO_FAILED
 129

	)

616 
	#TS_R_POLICY_MISMATCH
 108

	)

617 
	#TS_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE
 120

	)

618 
	#TS_R_RESPONSE_SETUP_ERROR
 121

	)

619 
	#TS_R_SIGNATURE_FAILURE
 109

	)

620 
	#TS_R_THERE_MUST_BE_ONE_SIGNER
 110

	)

621 
	#TS_R_TIME_SYSCALL_ERROR
 122

	)

622 
	#TS_R_TOKEN_NOT_PRESENT
 130

	)

623 
	#TS_R_TOKEN_PRESENT
 131

	)

624 
	#TS_R_TSA_NAME_MISMATCH
 111

	)

625 
	#TS_R_TSA_UNTRUSTED
 112

	)

626 
	#TS_R_TST_INFO_SETUP_ERROR
 123

	)

627 
	#TS_R_TS_DATASIGN
 124

	)

628 
	#TS_R_UNACCEPTABLE_POLICY
 125

	)

629 
	#TS_R_UNSUPPORTED_MD_ALGORITHM
 126

	)

630 
	#TS_R_UNSUPPORTED_VERSION
 113

	)

631 
	#TS_R_VAR_BAD_VALUE
 135

	)

632 
	#TS_R_VAR_LOOKUP_FAILURE
 136

	)

633 
	#TS_R_WRONG_CONTENT_TYPE
 114

	)

635 #ifde‡ 
__˝lu•lus


	@txt_db.h

10 #i‚de‡
HEADER_TXT_DB_H


11 
	#HEADER_TXT_DB_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

14 
	~<›ís¶/bio.h
>

15 
	~<›ís¶/°ack.h
>

16 
	~<›ís¶/lhash.h
>

18 
	#DB_ERROR_OK
 0

	)

19 
	#DB_ERROR_MALLOC
 1

	)

20 
	#DB_ERROR_INDEX_CLASH
 2

	)

21 
	#DB_ERROR_INDEX_OUT_OF_RANGE
 3

	)

22 
	#DB_ERROR_NO_INDEX
 4

	)

23 
	#DB_ERROR_INSERT_INDEX_CLASH
 5

	)

24 
	#DB_ERROR_WRONG_NUM_FIELDS
 6

	)

26 #ifde‡ 
__˝lu•lus


30 
OPENSSL_STRING
 *
	tOPENSSL_PSTRING
;

31 
DEFINE_SPECIAL_STACK_OF
(
OPENSSL_PSTRING
, 
OPENSSL_STRING
)

33 
	stxt_db_°
 {

34 
num_fõlds
;

35 
STACK_OF
(
OPENSSL_PSTRING
Ë*
d©a
;

36 
LHASH_OF
(
OPENSSL_STRING
Ë**
ödex
;

37 (**
quÆ
Ë(
OPENSSL_STRING
 *);

38 
îr‹
;

39 
¨g1
;

40 
¨g2
;

41 
OPENSSL_STRING
 *
¨g_row
;

42 } 
	tTXT_DB
;

44 
TXT_DB
 *
TXT_DB_ªad
(
BIO
 *
ö
, 
num
);

45 
TXT_DB_wrôe
(
BIO
 *
out
, 
TXT_DB
 *
db
);

46 
TXT_DB_¸óã_ödex
(
TXT_DB
 *
db
, 
fõld
, (*
quÆ
Ë(
OPENSSL_STRING
 *),

47 
OPENSSL_LH_HASHFUNC
 
hash
, 
OPENSSL_LH_COMPFUNC
 
cmp
);

48 
TXT_DB_‰ì
(
TXT_DB
 *
db
);

49 
OPENSSL_STRING
 *
TXT_DB_gë_by_ödex
(
TXT_DB
 *
db
, 
idx
,

50 
OPENSSL_STRING
 *
vÆue
);

51 
TXT_DB_ö£π
(
TXT_DB
 *
db
, 
OPENSSL_STRING
 *
vÆue
);

53 #ifde‡ 
__˝lu•lus


	@ui.h

10 #i‚de‡
HEADER_UI_H


11 
	#HEADER_UI_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #i‚de‡
OPENSSL_NO_UI


17 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

18 
	~<›ís¶/¸y±o.h
>

20 
	~<›ís¶/ß„°ack.h
>

21 
	~<›ís¶/os¶_typ.h
>

23 #ifde‡ 
__˝lu•lus


35 
UI
 *
UI_√w
();

36 
UI
 *
UI_√w_mëhod
(c⁄° 
UI_METHOD
 *
mëhod
);

37 
UI_‰ì
(
UI
 *
ui
);

82 
UI_add_öput_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

83 *
ªsu…_buf
, 
mösize
, 
maxsize
);

84 
UI_dup_öput_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

85 *
ªsu…_buf
, 
mösize
, 
maxsize
);

86 
UI_add_vîify_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

87 *
ªsu…_buf
, 
mösize
, 
maxsize
,

88 c⁄° *
ã°_buf
);

89 
UI_dup_vîify_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

90 *
ªsu…_buf
, 
mösize
, 
maxsize
,

91 c⁄° *
ã°_buf
);

92 
UI_add_öput_boﬁón
(
UI
 *
ui
, c⁄° *
¥om±
, c⁄° *
a˘i⁄_desc
,

93 c⁄° *
ok_ch¨s
, c⁄° *
ˇn˚l_ch¨s
,

94 
Êags
, *
ªsu…_buf
);

95 
UI_dup_öput_boﬁón
(
UI
 *
ui
, c⁄° *
¥om±
, c⁄° *
a˘i⁄_desc
,

96 c⁄° *
ok_ch¨s
, c⁄° *
ˇn˚l_ch¨s
,

97 
Êags
, *
ªsu…_buf
);

98 
UI_add_öfo_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

99 
UI_dup_öfo_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

100 
UI_add_îr‹_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

101 
UI_dup_îr‹_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

105 
	#UI_INPUT_FLAG_ECHO
 0x01

	)

113 
	#UI_INPUT_FLAG_DEFAULT_PWD
 0x02

	)

125 
	#UI_INPUT_FLAG_USER_BASE
 16

	)

145 *
UI_c⁄°ru˘_¥om±
(
UI
 *
ui_mëhod
,

146 c⁄° *
obje˘_desc
, c⁄° *
obje˘_«me
);

159 *
UI_add_u£r_d©a
(
UI
 *
ui
, *
u£r_d©a
);

161 *
UI_gë0_u£r_d©a
(
UI
 *
ui
);

164 c⁄° *
UI_gë0_ªsu…
(
UI
 *
ui
, 
i
);

167 
UI_¥o˚ss
(
UI
 *
ui
);

174 
UI_˘æ
(
UI
 *
ui
, 
cmd
, 
i
, *
p
, (*
f
) ());

182 
	#UI_CTRL_PRINT_ERRORS
 1

	)

188 
	#UI_CTRL_IS_REDOABLE
 2

	)

191 
	#UI_£t_≠p_d©a
(
s
,
¨g
Ë
	`UI_£t_ex_d©a
(s,0,¨g)

	)

192 
	#UI_gë_≠p_d©a
(
s
Ë
	`UI_gë_ex_d©a
(s,0)

	)

194 
	#UI_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

195 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_UI
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

196 
UI_£t_ex_d©a
(
UI
 *
r
, 
idx
, *
¨g
);

197 *
UI_gë_ex_d©a
(
UI
 *
r
, 
idx
);

200 
UI_£t_deÁu…_mëhod
(c⁄° 
UI_METHOD
 *
mëh
);

201 c⁄° 
UI_METHOD
 *
UI_gë_deÁu…_mëhod
();

202 c⁄° 
UI_METHOD
 *
UI_gë_mëhod
(
UI
 *
ui
);

203 c⁄° 
UI_METHOD
 *
UI_£t_mëhod
(
UI
 *
ui
, c⁄° UI_METHOD *
mëh
);

206 
UI_METHOD
 *
UI_O≥nSSL
();

255 
ui_°rög_°
 
	tUI_STRING
;

256 
DEFINE_STACK_OF
(
UI_STRING
)

262 
	eUI_°rög_ty≥s
 {

263 
UIT_NONE
 = 0,

264 
UIT_PROMPT
,

265 
UIT_VERIFY
,

266 
UIT_BOOLEAN
,

267 
UIT_INFO
,

268 
UIT_ERROR


272 
UI_METHOD
 *
UI_¸óã_mëhod
(c⁄° *
«me
);

273 
UI_de°roy_mëhod
(
UI_METHOD
 *
ui_mëhod
);

274 
UI_mëhod_£t_›íî
(
UI_METHOD
 *
mëhod
, (*
›íî
Ë(
UI
 *
ui
));

275 
UI_mëhod_£t_wrôî
(
UI_METHOD
 *
mëhod
,

276 (*
wrôî
Ë(
UI
 *
ui
, 
UI_STRING
 *
uis
));

277 
UI_mëhod_£t_Êushî
(
UI_METHOD
 *
mëhod
, (*
Êushî
Ë(
UI
 *
ui
));

278 
UI_mëhod_£t_ªadî
(
UI_METHOD
 *
mëhod
,

279 (*
ªadî
Ë(
UI
 *
ui
, 
UI_STRING
 *
uis
));

280 
UI_mëhod_£t_˛o£r
(
UI_METHOD
 *
mëhod
, (*
˛o£r
Ë(
UI
 *
ui
));

281 
UI_mëhod_£t_¥om±_c⁄°ru˘‹
(
UI_METHOD
 *
mëhod
,

282 *(*
¥om±_c⁄°ru˘‹
Ë(
UI
 *
ui
,

284 *
obje˘_desc
,

286 *
obje˘_«me
));

287 (*
UI_mëhod_gë_›íî
(
UI_METHOD
 *
mëhod
)Ë(
UI
 *);

288 (*
UI_mëhod_gë_wrôî
(
UI_METHOD
 *
mëhod
)Ë(
UI
 *, 
UI_STRING
 *);

289 (*
UI_mëhod_gë_Êushî
(
UI_METHOD
 *
mëhod
)Ë(
UI
 *);

290 (*
UI_mëhod_gë_ªadî
(
UI_METHOD
 *
mëhod
)Ë(
UI
 *, 
UI_STRING
 *);

291 (*
UI_mëhod_gë_˛o£r
(
UI_METHOD
 *
mëhod
)Ë(
UI
 *);

292 *(*
UI_mëhod_gë_¥om±_c⁄°ru˘‹
(
UI_METHOD
 *
mëhod
)Ë(
UI
 *,

302 
UI_°rög_ty≥s
 
UI_gë_°rög_ty≥
(
UI_STRING
 *
uis
);

304 
UI_gë_öput_Êags
(
UI_STRING
 *
uis
);

306 c⁄° *
UI_gë0_ouçut_°rög
(
UI_STRING
 *
uis
);

311 c⁄° *
UI_gë0_a˘i⁄_°rög
(
UI_STRING
 *
uis
);

313 c⁄° *
UI_gë0_ªsu…_°rög
(
UI_STRING
 *
uis
);

317 c⁄° *
UI_gë0_ã°_°rög
(
UI_STRING
 *
uis
);

319 
UI_gë_ªsu…_mösize
(
UI_STRING
 *
uis
);

321 
UI_gë_ªsu…_maxsize
(
UI_STRING
 *
uis
);

323 
UI_£t_ªsu…
(
UI
 *
ui
, 
UI_STRING
 *
uis
, c⁄° *
ªsu…
);

326 
UI_UTIL_ªad_pw_°rög
(*
buf
, 
Àngth
, c⁄° *
¥om±
,

327 
vîify
);

328 
UI_UTIL_ªad_pw
(*
buf
, *
buff
, 
size
, c⁄° *
¥om±
,

329 
vîify
);

337 
ERR_lﬂd_UI_°rögs
();

342 
	#UI_F_GENERAL_ALLOCATE_BOOLEAN
 108

	)

343 
	#UI_F_GENERAL_ALLOCATE_PROMPT
 109

	)

344 
	#UI_F_UI_CREATE_METHOD
 112

	)

345 
	#UI_F_UI_CTRL
 111

	)

346 
	#UI_F_UI_DUP_ERROR_STRING
 101

	)

347 
	#UI_F_UI_DUP_INFO_STRING
 102

	)

348 
	#UI_F_UI_DUP_INPUT_BOOLEAN
 110

	)

349 
	#UI_F_UI_DUP_INPUT_STRING
 103

	)

350 
	#UI_F_UI_DUP_VERIFY_STRING
 106

	)

351 
	#UI_F_UI_GET0_RESULT
 107

	)

352 
	#UI_F_UI_NEW_METHOD
 104

	)

353 
	#UI_F_UI_SET_RESULT
 105

	)

356 
	#UI_R_COMMON_OK_AND_CANCEL_CHARACTERS
 104

	)

357 
	#UI_R_INDEX_TOO_LARGE
 102

	)

358 
	#UI_R_INDEX_TOO_SMALL
 103

	)

359 
	#UI_R_NO_RESULT_BUFFER
 105

	)

360 
	#UI_R_RESULT_TOO_LARGE
 100

	)

361 
	#UI_R_RESULT_TOO_SMALL
 101

	)

362 
	#UI_R_UNKNOWN_CONTROL_COMMAND
 106

	)

364 #ifde‡ 
__˝lu•lus


	@whrlpool.h

10 #i‚de‡
HEADER_WHRLPOOL_H


11 
	#HEADER_WHRLPOOL_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #i‚de‡
OPENSSL_NO_WHIRLPOOL


16 
	~<›ís¶/e_os2.h
>

17 
	~<°ddef.h
>

18 #ifde‡
__˝lu•lus


22 
	#WHIRLPOOL_DIGEST_LENGTH
 (512/8)

	)

23 
	#WHIRLPOOL_BBLOCK
 512

	)

24 
	#WHIRLPOOL_COUNTER
 (256/8)

	)

28 
c
[
WHIRLPOOL_DIGEST_LENGTH
];

30 
q
[
WHIRLPOOL_DIGEST_LENGTH
 / ()];

31 } 
H
;

32 
d©a
[
WHIRLPOOL_BBLOCK
 / 8];

33 
bôoff
;

34 
size_t
 
bôÀn
[
WHIRLPOOL_COUNTER
 / (size_t)];

35 } 
	tWHIRLPOOL_CTX
;

37 
WHIRLPOOL_Inô
(
WHIRLPOOL_CTX
 *
c
);

38 
WHIRLPOOL_Upd©e
(
WHIRLPOOL_CTX
 *
c
, c⁄° *
öp
, 
size_t
 
byãs
);

39 
WHIRLPOOL_BôUpd©e
(
WHIRLPOOL_CTX
 *
c
, c⁄° *
öp
, 
size_t
 
bôs
);

40 
WHIRLPOOL_FöÆ
(*
md
, 
WHIRLPOOL_CTX
 *
c
);

41 *
WHIRLPOOL
(c⁄° *
öp
, 
size_t
 
byãs
, *
md
);

43 #ifde‡
__˝lu•lus


	@x509.h

16 #i‚de‡
HEADER_X509_H


17 
	#HEADER_X509_H


	)

19 
	~<›ís¶/e_os2.h
>

20 
	~<›ís¶/os¶_typ.h
>

21 
	~<›ís¶/symhacks.h
>

22 
	~<›ís¶/buf„r.h
>

23 
	~<›ís¶/evp.h
>

24 
	~<›ís¶/bio.h
>

25 
	~<›ís¶/°ack.h
>

26 
	~<›ís¶/a¢1.h
>

27 
	~<›ís¶/ß„°ack.h
>

28 
	~<›ís¶/ec.h
>

30 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

31 
	~<›ís¶/rß.h
>

32 
	~<›ís¶/dß.h
>

33 
	~<›ís¶/dh.h
>

36 
	~<›ís¶/sha.h
>

37 
	~<›ís¶/os¶_typ.h
>

39 #ifde‡ 
__˝lu•lus


43 
	#X509_FILETYPE_PEM
 1

	)

44 
	#X509_FILETYPE_ASN1
 2

	)

45 
	#X509_FILETYPE_DEFAULT
 3

	)

47 
	#X509v3_KU_DIGITAL_SIGNATURE
 0x0080

	)

48 
	#X509v3_KU_NON_REPUDIATION
 0x0040

	)

49 
	#X509v3_KU_KEY_ENCIPHERMENT
 0x0020

	)

50 
	#X509v3_KU_DATA_ENCIPHERMENT
 0x0010

	)

51 
	#X509v3_KU_KEY_AGREEMENT
 0x0008

	)

52 
	#X509v3_KU_KEY_CERT_SIGN
 0x0004

	)

53 
	#X509v3_KU_CRL_SIGN
 0x0002

	)

54 
	#X509v3_KU_ENCIPHER_ONLY
 0x0001

	)

55 
	#X509v3_KU_DECIPHER_ONLY
 0x8000

	)

56 
	#X509v3_KU_UNDEF
 0xffff

	)

58 
	sX509_Æg‹_°
 {

59 
ASN1_OBJECT
 *
Æg‹ôhm
;

60 
ASN1_TYPE
 *
∑ømëî
;

63 
STACK_OF
(
	tX509_ALGOR
Ë
	tX509_ALGORS
;

65 
	sX509_vÆ_°
 {

66 
ASN1_TIME
 *
nŸBef‹e
;

67 
ASN1_TIME
 *
nŸA·î
;

68 } 
	tX509_VAL
;

70 
X509_sig_°
 
	tX509_SIG
;

72 
X509_«me_íåy_°
 
	tX509_NAME_ENTRY
;

74 
DEFINE_STACK_OF
(
X509_NAME_ENTRY
)

76 
DEFINE_STACK_OF
(
X509_NAME
)

78 
	#X509_EX_V_NETSCAPE_HACK
 0x8000

	)

79 
	#X509_EX_V_INIT
 0x0001

	)

80 
X509_exãnsi⁄_°
 
	tX509_EXTENSION
;

82 
STACK_OF
(
	tX509_EXTENSION
Ë
	tX509_EXTENSIONS
;

84 
DEFINE_STACK_OF
(
X509_EXTENSION
)

86 
x509_©åibuãs_°
 
	tX509_ATTRIBUTE
;

88 
DEFINE_STACK_OF
(
X509_ATTRIBUTE
)

90 
X509_ªq_öfo_°
 
	tX509_REQ_INFO
;

92 
X509_ªq_°
 
	tX509_REQ
;

94 
x509_˚π_aux_°
 
	tX509_CERT_AUX
;

96 
x509_cöf_°
 
	tX509_CINF
;

98 
DEFINE_STACK_OF
(
X509
)

102 
	sx509_åu°_°
 {

103 
åu°
;

104 
Êags
;

105 (*
check_åu°
Ë(
x509_åu°_°
 *, 
X509
 *, );

106 *
«me
;

107 
¨g1
;

108 *
¨g2
;

109 } 
	tX509_TRUST
;

111 
DEFINE_STACK_OF
(
X509_TRUST
)

115 
	#X509_TRUST_DEFAULT
 0

	)

117 
	#X509_TRUST_COMPAT
 1

	)

118 
	#X509_TRUST_SSL_CLIENT
 2

	)

119 
	#X509_TRUST_SSL_SERVER
 3

	)

120 
	#X509_TRUST_EMAIL
 4

	)

121 
	#X509_TRUST_OBJECT_SIGN
 5

	)

122 
	#X509_TRUST_OCSP_SIGN
 6

	)

123 
	#X509_TRUST_OCSP_REQUEST
 7

	)

124 
	#X509_TRUST_TSA
 8

	)

127 
	#X509_TRUST_MIN
 1

	)

128 
	#X509_TRUST_MAX
 8

	)

131 
	#X509_TRUST_DYNAMIC
 (1U << 0)

	)

132 
	#X509_TRUST_DYNAMIC_NAME
 (1U << 1)

	)

134 
	#X509_TRUST_NO_SS_COMPAT
 (1U << 2)

	)

136 
	#X509_TRUST_DO_SS_COMPAT
 (1U << 3)

	)

138 
	#X509_TRUST_OK_ANY_EKU
 (1U << 4)

	)

142 
	#X509_TRUST_TRUSTED
 1

	)

143 
	#X509_TRUST_REJECTED
 2

	)

144 
	#X509_TRUST_UNTRUSTED
 3

	)

148 
	#X509_FLAG_COMPAT
 0

	)

149 
	#X509_FLAG_NO_HEADER
 1L

	)

150 
	#X509_FLAG_NO_VERSION
 (1L << 1)

	)

151 
	#X509_FLAG_NO_SERIAL
 (1L << 2)

	)

152 
	#X509_FLAG_NO_SIGNAME
 (1L << 3)

	)

153 
	#X509_FLAG_NO_ISSUER
 (1L << 4)

	)

154 
	#X509_FLAG_NO_VALIDITY
 (1L << 5)

	)

155 
	#X509_FLAG_NO_SUBJECT
 (1L << 6)

	)

156 
	#X509_FLAG_NO_PUBKEY
 (1L << 7)

	)

157 
	#X509_FLAG_NO_EXTENSIONS
 (1L << 8)

	)

158 
	#X509_FLAG_NO_SIGDUMP
 (1L << 9)

	)

159 
	#X509_FLAG_NO_AUX
 (1L << 10)

	)

160 
	#X509_FLAG_NO_ATTRIBUTES
 (1L << 11)

	)

161 
	#X509_FLAG_NO_IDS
 (1L << 12)

	)

167 
	#XN_FLAG_SEP_MASK
 (0x‡<< 16)

	)

169 
	#XN_FLAG_COMPAT
 0

	)

170 
	#XN_FLAG_SEP_COMMA_PLUS
 (1 << 16)

	)

171 
	#XN_FLAG_SEP_CPLUS_SPC
 (2 << 16)

	)

172 
	#XN_FLAG_SEP_SPLUS_SPC
 (3 << 16)

	)

173 
	#XN_FLAG_SEP_MULTILINE
 (4 << 16)

	)

175 
	#XN_FLAG_DN_REV
 (1 << 20)

	)

179 
	#XN_FLAG_FN_MASK
 (0x3 << 21)

	)

181 
	#XN_FLAG_FN_SN
 0

	)

182 
	#XN_FLAG_FN_LN
 (1 << 21)

	)

183 
	#XN_FLAG_FN_OID
 (2 << 21)

	)

184 
	#XN_FLAG_FN_NONE
 (3 << 21)

	)

186 
	#XN_FLAG_SPC_EQ
 (1 << 23)

	)

193 
	#XN_FLAG_DUMP_UNKNOWN_FIELDS
 (1 << 24)

	)

195 
	#XN_FLAG_FN_ALIGN
 (1 << 25)

	)

200 
	#XN_FLAG_RFC2253
 (
ASN1_STRFLGS_RFC2253
 | \

201 
XN_FLAG_SEP_COMMA_PLUS
 | \

202 
XN_FLAG_DN_REV
 | \

203 
XN_FLAG_FN_SN
 | \

204 
XN_FLAG_DUMP_UNKNOWN_FIELDS
)

	)

208 
	#XN_FLAG_ONELINE
 (
ASN1_STRFLGS_RFC2253
 | \

209 
ASN1_STRFLGS_ESC_QUOTE
 | \

210 
XN_FLAG_SEP_CPLUS_SPC
 | \

211 
XN_FLAG_SPC_EQ
 | \

212 
XN_FLAG_FN_SN
)

	)

216 
	#XN_FLAG_MULTILINE
 (
ASN1_STRFLGS_ESC_CTRL
 | \

217 
ASN1_STRFLGS_ESC_MSB
 | \

218 
XN_FLAG_SEP_MULTILINE
 | \

219 
XN_FLAG_SPC_EQ
 | \

220 
XN_FLAG_FN_LN
 | \

221 
XN_FLAG_FN_ALIGN
)

	)

223 
DEFINE_STACK_OF
(
X509_REVOKED
)

225 
X509_¸l_öfo_°
 
	tX509_CRL_INFO
;

227 
DEFINE_STACK_OF
(
X509_CRL
)

229 
	s¥iv©e_key_°
 {

230 
vîsi⁄
;

232 
X509_ALGOR
 *
íc_Æg‹
;

233 
ASN1_OCTET_STRING
 *
íc_pkey
;

235 
EVP_PKEY
 *
dec_pkey
;

237 
key_Àngth
;

238 *
key_d©a
;

239 
key_‰ì
;

241 
EVP_CIPHER_INFO
 
cùhî
;

242 } 
	tX509_PKEY
;

244 
	sX509_öfo_°
 {

245 
X509
 *
x509
;

246 
X509_CRL
 *
¸l
;

247 
X509_PKEY
 *
x_pkey
;

248 
EVP_CIPHER_INFO
 
íc_cùhî
;

249 
íc_Àn
;

250 *
íc_d©a
;

251 } 
	tX509_INFO
;

253 
DEFINE_STACK_OF
(
X509_INFO
)

260 
	sNësˇ≥_•kac_°
 {

261 
X509_PUBKEY
 *
pubkey
;

262 
ASN1_IA5STRING
 *
chÆÀnge
;

263 } 
	tNETSCAPE_SPKAC
;

265 
	sNësˇ≥_•ki_°
 {

266 
NETSCAPE_SPKAC
 *
•kac
;

267 
X509_ALGOR
 
sig_Æg‹
;

268 
ASN1_BIT_STRING
 *
sig«tuª
;

269 } 
	tNETSCAPE_SPKI
;

272 
	sNësˇ≥_˚πifiˇã_£quí˚
 {

273 
ASN1_OBJECT
 *
ty≥
;

274 
STACK_OF
(
X509
Ë*
˚πs
;

275 } 
	tNETSCAPE_CERT_SEQUENCE
;

286 
	sPBEPARAM_°
 {

287 
ASN1_OCTET_STRING
 *
ß…
;

288 
ASN1_INTEGER
 *
ôî
;

289 } 
	tPBEPARAM
;

293 
	sPBE2PARAM_°
 {

294 
X509_ALGOR
 *
keyfunc
;

295 
X509_ALGOR
 *
í¸y±i⁄
;

296 } 
	tPBE2PARAM
;

298 
	sPBKDF2PARAM_°
 {

300 
ASN1_TYPE
 *
ß…
;

301 
ASN1_INTEGER
 *
ôî
;

302 
ASN1_INTEGER
 *
keyÀngth
;

303 
X509_ALGOR
 *
¥f
;

304 } 
	tPBKDF2PARAM
;

306 #ifde‡ 
__˝lu•lus


310 
	~<›ís¶/x509_vfy.h
>

311 
	~<›ís¶/pkcs7.h
>

313 #ifde‡ 
__˝lu•lus


317 
	#X509_EXT_PACK_UNKNOWN
 1

	)

318 
	#X509_EXT_PACK_STRING
 2

	)

320 
	#X509_exåa˘_key
(
x
Ë
	`X509_gë_pubkey
(x)

	)

321 
	#X509_REQ_exåa˘_key
(
a
Ë
	`X509_REQ_gë_pubkey
◊)

	)

322 
	#X509_«me_cmp
(
a
,
b
Ë
	`X509_NAME_cmp
(◊),(b))

	)

324 
X509_CRL_£t_deÁu…_mëhod
(c⁄° 
X509_CRL_METHOD
 *
mëh
);

325 
X509_CRL_METHOD
 *
X509_CRL_METHOD_√w
((*
¸l_öô
Ë(
X509_CRL
 *
¸l
),

326 (*
¸l_‰ì
Ë(
X509_CRL
 *
¸l
),

327 (*
¸l_lookup
Ë(
X509_CRL
 *
¸l
,

328 
X509_REVOKED
 **
ªt
,

329 
ASN1_INTEGER
 *
£r
,

330 
X509_NAME
 *
issuî
),

331 (*
¸l_vîify
Ë(
X509_CRL
 *
¸l
,

332 
EVP_PKEY
 *
pk
));

333 
X509_CRL_METHOD_‰ì
(
X509_CRL_METHOD
 *
m
);

335 
X509_CRL_£t_mëh_d©a
(
X509_CRL
 *
¸l
, *
d©
);

336 *
X509_CRL_gë_mëh_d©a
(
X509_CRL
 *
¸l
);

338 c⁄° *
X509_vîify_˚π_îr‹_°rög
(
n
);

340 
X509_vîify
(
X509
 *
a
, 
EVP_PKEY
 *
r
);

342 
X509_REQ_vîify
(
X509_REQ
 *
a
, 
EVP_PKEY
 *
r
);

343 
X509_CRL_vîify
(
X509_CRL
 *
a
, 
EVP_PKEY
 *
r
);

344 
NETSCAPE_SPKI_vîify
(
NETSCAPE_SPKI
 *
a
, 
EVP_PKEY
 *
r
);

346 
NETSCAPE_SPKI
 *
NETSCAPE_SPKI_b64_decode
(c⁄° *
°r
, 
Àn
);

347 *
NETSCAPE_SPKI_b64_ícode
(
NETSCAPE_SPKI
 *
x
);

348 
EVP_PKEY
 *
NETSCAPE_SPKI_gë_pubkey
(
NETSCAPE_SPKI
 *
x
);

349 
NETSCAPE_SPKI_£t_pubkey
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
);

351 
NETSCAPE_SPKI_¥öt
(
BIO
 *
out
, 
NETSCAPE_SPKI
 *
•ki
);

353 
X509_sig«tuª_dump
(
BIO
 *
bp
, c⁄° 
ASN1_STRING
 *
sig
, 
ödít
);

354 
X509_sig«tuª_¥öt
(
BIO
 *
bp
, 
X509_ALGOR
 *
Æg
, 
ASN1_STRING
 *
sig
);

356 
X509_sign
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

357 
X509_sign_˘x
(
X509
 *
x
, 
EVP_MD_CTX
 *
˘x
);

358 #i‚de‡
OPENSSL_NO_OCSP


359 
X509_hâp_nbio
(
OCSP_REQ_CTX
 *
r˘x
, 
X509
 **
p˚π
);

361 
X509_REQ_sign
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

362 
X509_REQ_sign_˘x
(
X509_REQ
 *
x
, 
EVP_MD_CTX
 *
˘x
);

363 
X509_CRL_sign
(
X509_CRL
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

364 
X509_CRL_sign_˘x
(
X509_CRL
 *
x
, 
EVP_MD_CTX
 *
˘x
);

365 #i‚de‡
OPENSSL_NO_OCSP


366 
X509_CRL_hâp_nbio
(
OCSP_REQ_CTX
 *
r˘x
, 
X509_CRL
 **
p¸l
);

368 
NETSCAPE_SPKI_sign
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

370 
X509_pubkey_dige°
(c⁄° 
X509
 *
d©a
, c⁄° 
EVP_MD
 *
ty≥
,

371 *
md
, *
Àn
);

372 
X509_dige°
(c⁄° 
X509
 *
d©a
, c⁄° 
EVP_MD
 *
ty≥
,

373 *
md
, *
Àn
);

374 
X509_CRL_dige°
(c⁄° 
X509_CRL
 *
d©a
, c⁄° 
EVP_MD
 *
ty≥
,

375 *
md
, *
Àn
);

376 
X509_REQ_dige°
(c⁄° 
X509_REQ
 *
d©a
, c⁄° 
EVP_MD
 *
ty≥
,

377 *
md
, *
Àn
);

378 
X509_NAME_dige°
(c⁄° 
X509_NAME
 *
d©a
, c⁄° 
EVP_MD
 *
ty≥
,

379 *
md
, *
Àn
);

381 #i‚de‡
OPENSSL_NO_STDIO


382 
X509
 *
d2i_X509_Â
(
FILE
 *
Â
, X509 **
x509
);

383 
i2d_X509_Â
(
FILE
 *
Â
, 
X509
 *
x509
);

384 
X509_CRL
 *
d2i_X509_CRL_Â
(
FILE
 *
Â
, X509_CRL **
¸l
);

385 
i2d_X509_CRL_Â
(
FILE
 *
Â
, 
X509_CRL
 *
¸l
);

386 
X509_REQ
 *
d2i_X509_REQ_Â
(
FILE
 *
Â
, X509_REQ **
ªq
);

387 
i2d_X509_REQ_Â
(
FILE
 *
Â
, 
X509_REQ
 *
ªq
);

388 #i‚de‡
OPENSSL_NO_RSA


389 
RSA
 *
d2i_RSAPriv©eKey_Â
(
FILE
 *
Â
, RSA **
rß
);

390 
i2d_RSAPriv©eKey_Â
(
FILE
 *
Â
, 
RSA
 *
rß
);

391 
RSA
 *
d2i_RSAPublicKey_Â
(
FILE
 *
Â
, RSA **
rß
);

392 
i2d_RSAPublicKey_Â
(
FILE
 *
Â
, 
RSA
 *
rß
);

393 
RSA
 *
d2i_RSA_PUBKEY_Â
(
FILE
 *
Â
, RSA **
rß
);

394 
i2d_RSA_PUBKEY_Â
(
FILE
 *
Â
, 
RSA
 *
rß
);

396 #i‚de‡
OPENSSL_NO_DSA


397 
DSA
 *
d2i_DSA_PUBKEY_Â
(
FILE
 *
Â
, DSA **
dß
);

398 
i2d_DSA_PUBKEY_Â
(
FILE
 *
Â
, 
DSA
 *
dß
);

399 
DSA
 *
d2i_DSAPriv©eKey_Â
(
FILE
 *
Â
, DSA **
dß
);

400 
i2d_DSAPriv©eKey_Â
(
FILE
 *
Â
, 
DSA
 *
dß
);

402 #i‚de‡
OPENSSL_NO_EC


403 
EC_KEY
 *
d2i_EC_PUBKEY_Â
(
FILE
 *
Â
, EC_KEY **
eckey
);

404 
i2d_EC_PUBKEY_Â
(
FILE
 *
Â
, 
EC_KEY
 *
eckey
);

405 
EC_KEY
 *
d2i_ECPriv©eKey_Â
(
FILE
 *
Â
, EC_KEY **
eckey
);

406 
i2d_ECPriv©eKey_Â
(
FILE
 *
Â
, 
EC_KEY
 *
eckey
);

408 
X509_SIG
 *
d2i_PKCS8_Â
(
FILE
 *
Â
, X509_SIG **
p8
);

409 
i2d_PKCS8_Â
(
FILE
 *
Â
, 
X509_SIG
 *
p8
);

410 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_Â
(
FILE
 *
Â
,

411 
PKCS8_PRIV_KEY_INFO
 **
p8öf
);

412 
i2d_PKCS8_PRIV_KEY_INFO_Â
(
FILE
 *
Â
, 
PKCS8_PRIV_KEY_INFO
 *
p8öf
);

413 
i2d_PKCS8Priv©eKeyInfo_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
key
);

414 
i2d_Priv©eKey_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
pkey
);

415 
EVP_PKEY
 *
d2i_Priv©eKey_Â
(
FILE
 *
Â
, EVP_PKEY **
a
);

416 
i2d_PUBKEY_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
pkey
);

417 
EVP_PKEY
 *
d2i_PUBKEY_Â
(
FILE
 *
Â
, EVP_PKEY **
a
);

420 
X509
 *
d2i_X509_bio
(
BIO
 *
bp
, X509 **
x509
);

421 
i2d_X509_bio
(
BIO
 *
bp
, 
X509
 *
x509
);

422 
X509_CRL
 *
d2i_X509_CRL_bio
(
BIO
 *
bp
, X509_CRL **
¸l
);

423 
i2d_X509_CRL_bio
(
BIO
 *
bp
, 
X509_CRL
 *
¸l
);

424 
X509_REQ
 *
d2i_X509_REQ_bio
(
BIO
 *
bp
, X509_REQ **
ªq
);

425 
i2d_X509_REQ_bio
(
BIO
 *
bp
, 
X509_REQ
 *
ªq
);

426 #i‚de‡
OPENSSL_NO_RSA


427 
RSA
 *
d2i_RSAPriv©eKey_bio
(
BIO
 *
bp
, RSA **
rß
);

428 
i2d_RSAPriv©eKey_bio
(
BIO
 *
bp
, 
RSA
 *
rß
);

429 
RSA
 *
d2i_RSAPublicKey_bio
(
BIO
 *
bp
, RSA **
rß
);

430 
i2d_RSAPublicKey_bio
(
BIO
 *
bp
, 
RSA
 *
rß
);

431 
RSA
 *
d2i_RSA_PUBKEY_bio
(
BIO
 *
bp
, RSA **
rß
);

432 
i2d_RSA_PUBKEY_bio
(
BIO
 *
bp
, 
RSA
 *
rß
);

434 #i‚de‡
OPENSSL_NO_DSA


435 
DSA
 *
d2i_DSA_PUBKEY_bio
(
BIO
 *
bp
, DSA **
dß
);

436 
i2d_DSA_PUBKEY_bio
(
BIO
 *
bp
, 
DSA
 *
dß
);

437 
DSA
 *
d2i_DSAPriv©eKey_bio
(
BIO
 *
bp
, DSA **
dß
);

438 
i2d_DSAPriv©eKey_bio
(
BIO
 *
bp
, 
DSA
 *
dß
);

440 #i‚de‡
OPENSSL_NO_EC


441 
EC_KEY
 *
d2i_EC_PUBKEY_bio
(
BIO
 *
bp
, EC_KEY **
eckey
);

442 
i2d_EC_PUBKEY_bio
(
BIO
 *
bp
, 
EC_KEY
 *
eckey
);

443 
EC_KEY
 *
d2i_ECPriv©eKey_bio
(
BIO
 *
bp
, EC_KEY **
eckey
);

444 
i2d_ECPriv©eKey_bio
(
BIO
 *
bp
, 
EC_KEY
 *
eckey
);

446 
X509_SIG
 *
d2i_PKCS8_bio
(
BIO
 *
bp
, X509_SIG **
p8
);

447 
i2d_PKCS8_bio
(
BIO
 *
bp
, 
X509_SIG
 *
p8
);

448 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
,

449 
PKCS8_PRIV_KEY_INFO
 **
p8öf
);

450 
i2d_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
, 
PKCS8_PRIV_KEY_INFO
 *
p8öf
);

451 
i2d_PKCS8Priv©eKeyInfo_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
key
);

452 
i2d_Priv©eKey_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
pkey
);

453 
EVP_PKEY
 *
d2i_Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

454 
i2d_PUBKEY_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
pkey
);

455 
EVP_PKEY
 *
d2i_PUBKEY_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

457 
X509
 *
X509_dup
(X509 *
x509
);

458 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_dup
(X509_ATTRIBUTE *
xa
);

459 
X509_EXTENSION
 *
X509_EXTENSION_dup
(X509_EXTENSION *
ex
);

460 
X509_CRL
 *
X509_CRL_dup
(X509_CRL *
¸l
);

461 
X509_REVOKED
 *
X509_REVOKED_dup
(X509_REVOKED *
ªv
);

462 
X509_REQ
 *
X509_REQ_dup
(X509_REQ *
ªq
);

463 
X509_ALGOR
 *
X509_ALGOR_dup
(X509_ALGOR *
xn
);

464 
X509_ALGOR_£t0
(
X509_ALGOR
 *
Æg
, 
ASN1_OBJECT
 *
aobj
, 
±y≥
,

465 *
pvÆ
);

466 
X509_ALGOR_gë0
(
ASN1_OBJECT
 **
∑obj
, *
µty≥
, **
µvÆ
,

467 
X509_ALGOR
 *
Æg‹
);

468 
X509_ALGOR_£t_md
(
X509_ALGOR
 *
Æg
, c⁄° 
EVP_MD
 *
md
);

469 
X509_ALGOR_cmp
(c⁄° 
X509_ALGOR
 *
a
, c⁄° X509_ALGOR *
b
);

471 
X509_NAME
 *
X509_NAME_dup
(X509_NAME *
xn
);

472 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_dup
(X509_NAME_ENTRY *
√
);

474 
X509_cmp_time
(c⁄° 
ASN1_TIME
 *
s
, 
time_t
 *
t
);

475 
X509_cmp_cuºít_time
(c⁄° 
ASN1_TIME
 *
s
);

476 
ASN1_TIME
 *
X509_time_adj
(ASN1_TIME *
s
, 
adj
, 
time_t
 *
t
);

477 
ASN1_TIME
 *
X509_time_adj_ex
(ASN1_TIME *
s
,

478 
off£t_day
, 
off£t_£c
, 
time_t
 *
t
);

479 
ASN1_TIME
 *
X509_gmtime_adj
(ASN1_TIME *
s
, 
adj
);

481 c⁄° *
X509_gë_deÁu…_˚π_¨ó
();

482 c⁄° *
X509_gë_deÁu…_˚π_dú
();

483 c⁄° *
X509_gë_deÁu…_˚π_fûe
();

484 c⁄° *
X509_gë_deÁu…_˚π_dú_ív
();

485 c⁄° *
X509_gë_deÁu…_˚π_fûe_ív
();

486 c⁄° *
X509_gë_deÁu…_¥iv©e_dú
();

488 
X509_REQ
 *
X509_to_X509_REQ
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

489 
X509
 *
X509_REQ_to_X509
(
X509_REQ
 *
r
, 
days
, 
EVP_PKEY
 *
pkey
);

491 
DECLARE_ASN1_FUNCTIONS
(
X509_ALGOR
)

492 
DECLARE_ASN1_ENCODE_FUNCTIONS
(
X509_ALGORS
, X509_ALGORS, X509_ALGORS)

493 
DECLARE_ASN1_FUNCTIONS
(
X509_VAL
)

495 
DECLARE_ASN1_FUNCTIONS
(
X509_PUBKEY
)

497 
X509_PUBKEY_£t
(
X509_PUBKEY
 **
x
, 
EVP_PKEY
 *
pkey
);

498 
EVP_PKEY
 *
X509_PUBKEY_gë0
(
X509_PUBKEY
 *
key
);

499 
EVP_PKEY
 *
X509_PUBKEY_gë
(
X509_PUBKEY
 *
key
);

500 
X509_gë_pubkey_∑ømëîs
(
EVP_PKEY
 *
pkey
, 
STACK_OF
(
X509
Ë*
chaö
);

501 
X509_gë_∑thÀn
(
X509
 *
x
);

502 
i2d_PUBKEY
(
EVP_PKEY
 *
a
, **
µ
);

503 
EVP_PKEY
 *
d2i_PUBKEY
(EVP_PKEY **
a
, c⁄° **
µ
, 
Àngth
);

504 #i‚de‡
OPENSSL_NO_RSA


505 
i2d_RSA_PUBKEY
(
RSA
 *
a
, **
µ
);

506 
RSA
 *
d2i_RSA_PUBKEY
(RSA **
a
, c⁄° **
µ
, 
Àngth
);

508 #i‚de‡
OPENSSL_NO_DSA


509 
i2d_DSA_PUBKEY
(
DSA
 *
a
, **
µ
);

510 
DSA
 *
d2i_DSA_PUBKEY
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

512 #i‚de‡
OPENSSL_NO_EC


513 
i2d_EC_PUBKEY
(
EC_KEY
 *
a
, **
µ
);

514 
EC_KEY
 *
d2i_EC_PUBKEY
(EC_KEY **
a
, c⁄° **
µ
, 
Àngth
);

517 
DECLARE_ASN1_FUNCTIONS
(
X509_SIG
)

518 
X509_SIG_gë0
(
X509_ALGOR
 **
∑lg
, 
ASN1_OCTET_STRING
 **
pdige°
,

519 
X509_SIG
 *
sig
);

521 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ_INFO
)

522 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ
)

524 
DECLARE_ASN1_FUNCTIONS
(
X509_ATTRIBUTE
)

525 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã
(
nid
, 
©πy≥
, *
vÆue
);

527 
DECLARE_ASN1_FUNCTIONS
(
X509_EXTENSION
)

528 
DECLARE_ASN1_ENCODE_FUNCTIONS
(
X509_EXTENSIONS
, X509_EXTENSIONS, X509_EXTENSIONS)

530 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME_ENTRY
)

532 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME
)

534 
X509_NAME_£t
(
X509_NAME
 **
xn
, X509_NAME *
«me
);

536 
DECLARE_ASN1_FUNCTIONS
(
X509_CINF
)

538 
DECLARE_ASN1_FUNCTIONS
(
X509
)

539 
DECLARE_ASN1_FUNCTIONS
(
X509_CERT_AUX
)

541 
	#X509_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

542 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_X509
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

543 
X509_£t_ex_d©a
(
X509
 *
r
, 
idx
, *
¨g
);

544 *
X509_gë_ex_d©a
(
X509
 *
r
, 
idx
);

545 
i2d_X509_AUX
(
X509
 *
a
, **
µ
);

546 
X509
 *
d2i_X509_AUX
(X509 **
a
, c⁄° **
µ
, 
Àngth
);

548 
i2d_ª_X509_tbs
(
X509
 *
x
, **
µ
);

550 
X509_gë0_sig«tuª
(
ASN1_BIT_STRING
 **
psig
, 
X509_ALGOR
 **
∑lg
, 
X509
 *
x
);

551 
X509_gë_sig«tuª_nid
(c⁄° 
X509
 *
x
);

553 
X509_åu°ed
(c⁄° 
X509
 *
x
);

554 
X509_Æüs_£t1
(
X509
 *
x
, *
«me
, 
Àn
);

555 
X509_keyid_£t1
(
X509
 *
x
, *
id
, 
Àn
);

556 *
X509_Æüs_gë0
(
X509
 *
x
, *
Àn
);

557 *
X509_keyid_gë0
(
X509
 *
x
, *
Àn
);

558 (*
X509_TRUST_£t_deÁu…
((*
åu°
Ë(, 
X509
 *, ))) (, X509 *,

560 
X509_TRUST_£t
(*
t
, 
åu°
);

561 
X509_add1_åu°_obje˘
(
X509
 *
x
, 
ASN1_OBJECT
 *
obj
);

562 
X509_add1_ªje˘_obje˘
(
X509
 *
x
, 
ASN1_OBJECT
 *
obj
);

563 
X509_åu°_˛ór
(
X509
 *
x
);

564 
X509_ªje˘_˛ór
(
X509
 *
x
);

566 
STACK_OF
(
ASN1_OBJECT
Ë*
X509_gë0_åu°_obje˘s
(
X509
 *
x
);

567 
STACK_OF
(
ASN1_OBJECT
Ë*
X509_gë0_ªje˘_obje˘s
(
X509
 *
x
);

569 
DECLARE_ASN1_FUNCTIONS
(
X509_REVOKED
)

570 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL_INFO
)

571 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL
)

573 
X509_CRL_add0_ªvoked
(
X509_CRL
 *
¸l
, 
X509_REVOKED
 *
ªv
);

574 
X509_CRL_gë0_by_£rül
(
X509_CRL
 *
¸l
,

575 
X509_REVOKED
 **
ªt
, 
ASN1_INTEGER
 *
£rül
);

576 
X509_CRL_gë0_by_˚π
(
X509_CRL
 *
¸l
, 
X509_REVOKED
 **
ªt
, 
X509
 *
x
);

578 
X509_PKEY
 *
X509_PKEY_√w
();

579 
X509_PKEY_‰ì
(
X509_PKEY
 *
a
);

581 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKI
)

582 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKAC
)

583 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_CERT_SEQUENCE
)

585 
X509_INFO
 *
X509_INFO_√w
();

586 
X509_INFO_‰ì
(
X509_INFO
 *
a
);

587 *
X509_NAME_⁄ñöe
(
X509_NAME
 *
a
, *
buf
, 
size
);

589 
ASN1_vîify
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Æg‹1
,

590 
ASN1_BIT_STRING
 *
sig«tuª
, *
d©a
, 
EVP_PKEY
 *
pkey
);

592 
ASN1_dige°
(
i2d_of_void
 *
i2d
, c⁄° 
EVP_MD
 *
ty≥
, *
d©a
,

593 *
md
, *
Àn
);

595 
ASN1_sign
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Æg‹1
,

596 
X509_ALGOR
 *
Æg‹2
, 
ASN1_BIT_STRING
 *
sig«tuª
,

597 *
d©a
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
ty≥
);

599 
ASN1_ôem_dige°
(c⁄° 
ASN1_ITEM
 *
ô
, c⁄° 
EVP_MD
 *
ty≥
, *
d©a
,

600 *
md
, *
Àn
);

602 
ASN1_ôem_vîify
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
,

603 
ASN1_BIT_STRING
 *
sig«tuª
, *
d©a
, 
EVP_PKEY
 *
pkey
);

605 
ASN1_ôem_sign
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
,

606 
X509_ALGOR
 *
Æg‹2
, 
ASN1_BIT_STRING
 *
sig«tuª
, *
d©a
,

607 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
ty≥
);

608 
ASN1_ôem_sign_˘x
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
,

609 
X509_ALGOR
 *
Æg‹2
, 
ASN1_BIT_STRING
 *
sig«tuª
,

610 *
a¢
, 
EVP_MD_CTX
 *
˘x
);

612 
X509_gë_vîsi⁄
(
X509
 *
x
);

613 
X509_£t_vîsi⁄
(
X509
 *
x
, 
vîsi⁄
);

614 
X509_£t_£rülNumbî
(
X509
 *
x
, 
ASN1_INTEGER
 *
£rül
);

615 
ASN1_INTEGER
 *
X509_gë_£rülNumbî
(
X509
 *
x
);

616 
X509_£t_issuî_«me
(
X509
 *
x
, 
X509_NAME
 *
«me
);

617 
X509_NAME
 *
X509_gë_issuî_«me
(
X509
 *
a
);

618 
X509_£t_subje˘_«me
(
X509
 *
x
, 
X509_NAME
 *
«me
);

619 
X509_NAME
 *
X509_gë_subje˘_«me
(
X509
 *
a
);

620 
ASN1_TIME
 * 
X509_gë_nŸBef‹e
(
X509
 *
x
);

621 
X509_£t_nŸBef‹e
(
X509
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

622 
ASN1_TIME
 *
X509_gë_nŸA·î
(
X509
 *
x
);

623 
X509_£t_nŸA·î
(
X509
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

624 
X509_£t_pubkey
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
);

625 
X509_up_ªf
(
X509
 *
x
);

626 
X509_gë_sig«tuª_ty≥
(c⁄° 
X509
 *
x
);

631 
X509_PUBKEY
 *
X509_gë_X509_PUBKEY
(c⁄° 
X509
 *
x
);

632 
STACK_OF
(
X509_EXTENSION
Ë*
X509_gë0_exãnsi⁄s
(c⁄° 
X509
 *
x
);

633 
X509_gë0_uids
(
ASN1_BIT_STRING
 **
piuid
, ASN1_BIT_STRING **
psuid
, 
X509
 *
x
);

634 
X509_ALGOR
 *
X509_gë0_tbs_sigÆg
(
X509
 *
x
);

636 
EVP_PKEY
 *
X509_gë0_pubkey
(
X509
 *
x
);

637 
EVP_PKEY
 *
X509_gë_pubkey
(
X509
 *
x
);

638 
ASN1_BIT_STRING
 *
X509_gë0_pubkey_bô°r
(c⁄° 
X509
 *
x
);

639 
X509_˚πifiˇã_ty≥
(
X509
 *
x
, 
EVP_PKEY
 *
pubkey
 );

641 
X509_REQ_gë_vîsi⁄
(
X509_REQ
 *
ªq
);

642 
X509_REQ_£t_vîsi⁄
(
X509_REQ
 *
x
, 
vîsi⁄
);

643 
X509_NAME
 *
X509_REQ_gë_subje˘_«me
(
X509_REQ
 *
ªq
);

644 
X509_REQ_£t_subje˘_«me
(
X509_REQ
 *
ªq
, 
X509_NAME
 *
«me
);

645 
X509_REQ_gë0_sig«tuª
(
ASN1_BIT_STRING
 **
psig
, 
X509_ALGOR
 **
∑lg
,

646 
X509_REQ
 *
ªq
);

647 
X509_REQ_gë_sig«tuª_nid
(c⁄° 
X509_REQ
 *
ªq
);

648 
i2d_ª_X509_REQ_tbs
(
X509_REQ
 *
ªq
, **
µ
);

649 
X509_REQ_£t_pubkey
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
);

650 
EVP_PKEY
 *
X509_REQ_gë_pubkey
(
X509_REQ
 *
ªq
);

651 
EVP_PKEY
 *
X509_REQ_gë0_pubkey
(
X509_REQ
 *
ªq
);

652 
X509_PUBKEY
 *
X509_REQ_gë_X509_PUBKEY
(
X509_REQ
 *
ªq
);

653 
X509_REQ_exãnsi⁄_nid
(
nid
);

654 *
X509_REQ_gë_exãnsi⁄_nids
();

655 
X509_REQ_£t_exãnsi⁄_nids
(*
nids
);

656 
STACK_OF
(
X509_EXTENSION
Ë*
X509_REQ_gë_exãnsi⁄s
(
X509_REQ
 *
ªq
);

657 
X509_REQ_add_exãnsi⁄s_nid
(
X509_REQ
 *
ªq
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
,

658 
nid
);

659 
X509_REQ_add_exãnsi⁄s
(
X509_REQ
 *
ªq
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
);

660 
X509_REQ_gë_©å_cou¡
(c⁄° 
X509_REQ
 *
ªq
);

661 
X509_REQ_gë_©å_by_NID
(c⁄° 
X509_REQ
 *
ªq
, 
nid
, 
œ°pos
);

662 
X509_REQ_gë_©å_by_OBJ
(c⁄° 
X509_REQ
 *
ªq
, 
ASN1_OBJECT
 *
obj
,

663 
œ°pos
);

664 
X509_ATTRIBUTE
 *
X509_REQ_gë_©å
(c⁄° 
X509_REQ
 *
ªq
, 
loc
);

665 
X509_ATTRIBUTE
 *
X509_REQ_dñëe_©å
(
X509_REQ
 *
ªq
, 
loc
);

666 
X509_REQ_add1_©å
(
X509_REQ
 *
ªq
, 
X509_ATTRIBUTE
 *
©å
);

667 
X509_REQ_add1_©å_by_OBJ
(
X509_REQ
 *
ªq
,

668 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

669 c⁄° *
byãs
, 
Àn
);

670 
X509_REQ_add1_©å_by_NID
(
X509_REQ
 *
ªq
,

671 
nid
, 
ty≥
,

672 c⁄° *
byãs
, 
Àn
);

673 
X509_REQ_add1_©å_by_txt
(
X509_REQ
 *
ªq
,

674 c⁄° *
©å«me
, 
ty≥
,

675 c⁄° *
byãs
, 
Àn
);

677 
X509_CRL_£t_vîsi⁄
(
X509_CRL
 *
x
, 
vîsi⁄
);

678 
X509_CRL_£t_issuî_«me
(
X509_CRL
 *
x
, 
X509_NAME
 *
«me
);

679 
X509_CRL_£t_œ°Upd©e
(
X509_CRL
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

680 
X509_CRL_£t_√xtUpd©e
(
X509_CRL
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

681 
X509_CRL_s‹t
(
X509_CRL
 *
¸l
);

682 
X509_CRL_up_ªf
(
X509_CRL
 *
¸l
);

684 
X509_CRL_gë_vîsi⁄
(
X509_CRL
 *
¸l
);

685 
ASN1_TIME
 *
X509_CRL_gë_œ°Upd©e
(
X509_CRL
 *
¸l
);

686 
ASN1_TIME
 *
X509_CRL_gë_√xtUpd©e
(
X509_CRL
 *
¸l
);

687 
X509_NAME
 *
X509_CRL_gë_issuî
(
X509_CRL
 *
¸l
);

688 
STACK_OF
(
X509_EXTENSION
Ë*
X509_CRL_gë0_exãnsi⁄s
(
X509_CRL
 *
¸l
);

689 
STACK_OF
(
X509_REVOKED
Ë*
X509_CRL_gë_REVOKED
(
X509_CRL
 *
¸l
);

690 
X509_CRL_gë0_sig«tuª
(
ASN1_BIT_STRING
 **
psig
, 
X509_ALGOR
 **
∑lg
,

691 
X509_CRL
 *
¸l
);

692 
X509_CRL_gë_sig«tuª_nid
(c⁄° 
X509_CRL
 *
¸l
);

693 
i2d_ª_X509_CRL_tbs
(
X509_CRL
 *
ªq
, **
µ
);

695 
ASN1_INTEGER
 *
X509_REVOKED_gë0_£rülNumbî
(
X509_REVOKED
 *
x
);

696 
X509_REVOKED_£t_£rülNumbî
(
X509_REVOKED
 *
x
, 
ASN1_INTEGER
 *
£rül
);

697 
ASN1_TIME
 *
X509_REVOKED_gë0_ªvoˇti⁄D©e
(
X509_REVOKED
 *
x
);

698 
X509_REVOKED_£t_ªvoˇti⁄D©e
(
X509_REVOKED
 *
r
, 
ASN1_TIME
 *
tm
);

699 
STACK_OF
(
X509_EXTENSION
Ë*
X509_REVOKED_gë0_exãnsi⁄s
(
X509_REVOKED
 *
r
);

701 
X509_CRL
 *
X509_CRL_diff
(X509_CRL *
ba£
, X509_CRL *
√wî
,

702 
EVP_PKEY
 *
skey
, c⁄° 
EVP_MD
 *
md
, 
Êags
);

704 
X509_REQ_check_¥iv©e_key
(
X509_REQ
 *
x509
, 
EVP_PKEY
 *
pkey
);

706 
X509_check_¥iv©e_key
(
X509
 *
x509
, 
EVP_PKEY
 *
pkey
);

707 
X509_chaö_check_suôeb
(*
≥º‹_dïth
,

708 
X509
 *
x
, 
STACK_OF
(X509Ë*
chaö
,

709 
Êags
);

710 
X509_CRL_check_suôeb
(
X509_CRL
 *
¸l
, 
EVP_PKEY
 *
pk
, 
Êags
);

711 
STACK_OF
(
X509
Ë*
X509_chaö_up_ªf
(STACK_OF(X509Ë*
chaö
);

713 
X509_issuî_™d_£rül_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

714 
X509_issuî_™d_£rül_hash
(
X509
 *
a
);

716 
X509_issuî_«me_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

717 
X509_issuî_«me_hash
(
X509
 *
a
);

719 
X509_subje˘_«me_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

720 
X509_subje˘_«me_hash
(
X509
 *
x
);

722 #i‚de‡
OPENSSL_NO_MD5


723 
X509_issuî_«me_hash_ﬁd
(
X509
 *
a
);

724 
X509_subje˘_«me_hash_ﬁd
(
X509
 *
x
);

727 
X509_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

728 
X509_NAME_cmp
(c⁄° 
X509_NAME
 *
a
, c⁄° X509_NAME *
b
);

729 
X509_NAME_hash
(
X509_NAME
 *
x
);

730 
X509_NAME_hash_ﬁd
(
X509_NAME
 *
x
);

732 
X509_CRL_cmp
(c⁄° 
X509_CRL
 *
a
, c⁄° X509_CRL *
b
);

733 
X509_CRL_m©ch
(c⁄° 
X509_CRL
 *
a
, c⁄° X509_CRL *
b
);

734 
X509_aux_¥öt
(
BIO
 *
out
, 
X509
 *
x
, 
ödít
);

735 #i‚de‡
OPENSSL_NO_STDIO


736 
X509_¥öt_ex_Â
(
FILE
 *
bp
, 
X509
 *
x
, 
nmÊag
,

737 
cÊag
);

738 
X509_¥öt_Â
(
FILE
 *
bp
, 
X509
 *
x
);

739 
X509_CRL_¥öt_Â
(
FILE
 *
bp
, 
X509_CRL
 *
x
);

740 
X509_REQ_¥öt_Â
(
FILE
 *
bp
, 
X509_REQ
 *
ªq
);

741 
X509_NAME_¥öt_ex_Â
(
FILE
 *
Â
, 
X509_NAME
 *
nm
, 
ödít
,

742 
Êags
);

745 
X509_NAME_¥öt
(
BIO
 *
bp
, 
X509_NAME
 *
«me
, 
oba£
);

746 
X509_NAME_¥öt_ex
(
BIO
 *
out
, 
X509_NAME
 *
nm
, 
ödít
,

747 
Êags
);

748 
X509_¥öt_ex
(
BIO
 *
bp
, 
X509
 *
x
, 
nmÊag
,

749 
cÊag
);

750 
X509_¥öt
(
BIO
 *
bp
, 
X509
 *
x
);

751 
X509_oc•id_¥öt
(
BIO
 *
bp
, 
X509
 *
x
);

752 
X509_CRL_¥öt
(
BIO
 *
bp
, 
X509_CRL
 *
x
);

753 
X509_REQ_¥öt_ex
(
BIO
 *
bp
, 
X509_REQ
 *
x
, 
nmÊag
,

754 
cÊag
);

755 
X509_REQ_¥öt
(
BIO
 *
bp
, 
X509_REQ
 *
ªq
);

757 
X509_NAME_íåy_cou¡
(
X509_NAME
 *
«me
);

758 
X509_NAME_gë_ãxt_by_NID
(
X509_NAME
 *
«me
, 
nid
, *
buf
, 
Àn
);

759 
X509_NAME_gë_ãxt_by_OBJ
(
X509_NAME
 *
«me
, 
ASN1_OBJECT
 *
obj
,

760 *
buf
, 
Àn
);

766 
X509_NAME_gë_ödex_by_NID
(
X509_NAME
 *
«me
, 
nid
, 
œ°pos
);

767 
X509_NAME_gë_ödex_by_OBJ
(
X509_NAME
 *
«me
, 
ASN1_OBJECT
 *
obj
,

768 
œ°pos
);

769 
X509_NAME_ENTRY
 *
X509_NAME_gë_íåy
(
X509_NAME
 *
«me
, 
loc
);

770 
X509_NAME_ENTRY
 *
X509_NAME_dñëe_íåy
(
X509_NAME
 *
«me
, 
loc
);

771 
X509_NAME_add_íåy
(
X509_NAME
 *
«me
, 
X509_NAME_ENTRY
 *
√
,

772 
loc
, 
£t
);

773 
X509_NAME_add_íåy_by_OBJ
(
X509_NAME
 *
«me
, 
ASN1_OBJECT
 *
obj
, 
ty≥
,

774 *
byãs
, 
Àn
, 
loc
,

775 
£t
);

776 
X509_NAME_add_íåy_by_NID
(
X509_NAME
 *
«me
, 
nid
, 
ty≥
,

777 *
byãs
, 
Àn
, 
loc
,

778 
£t
);

779 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_txt
(X509_NAME_ENTRY **
√
,

780 c⁄° *
fõld
, 
ty≥
,

781 c⁄° *
byãs
,

782 
Àn
);

783 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_NID
(X509_NAME_ENTRY **
√
, 
nid
,

784 
ty≥
, *
byãs
,

785 
Àn
);

786 
X509_NAME_add_íåy_by_txt
(
X509_NAME
 *
«me
, c⁄° *
fõld
, 
ty≥
,

787 c⁄° *
byãs
, 
Àn
, 
loc
,

788 
£t
);

789 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_OBJ
(X509_NAME_ENTRY **
√
,

790 
ASN1_OBJECT
 *
obj
, 
ty≥
,

791 c⁄° *
byãs
,

792 
Àn
);

793 
X509_NAME_ENTRY_£t_obje˘
(
X509_NAME_ENTRY
 *
√
, 
ASN1_OBJECT
 *
obj
);

794 
X509_NAME_ENTRY_£t_d©a
(
X509_NAME_ENTRY
 *
√
, 
ty≥
,

795 c⁄° *
byãs
, 
Àn
);

796 
ASN1_OBJECT
 *
X509_NAME_ENTRY_gë_obje˘
(
X509_NAME_ENTRY
 *
√
);

797 
ASN1_STRING
 *
X509_NAME_ENTRY_gë_d©a
(
X509_NAME_ENTRY
 *
√
);

798 
X509_NAME_ENTRY_£t
(c⁄° 
X509_NAME_ENTRY
 *
√
);

800 
X509_NAME_gë0_dî
(c⁄° **
pdî
, 
size_t
 *
pdîÀn
,

801 
X509_NAME
 *
nm
);

803 
X509v3_gë_ext_cou¡
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
);

804 
X509v3_gë_ext_by_NID
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

805 
nid
, 
œ°pos
);

806 
X509v3_gë_ext_by_OBJ
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

807 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

808 
X509v3_gë_ext_by_¸ôiˇl
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

809 
¸ô
, 
œ°pos
);

810 
X509_EXTENSION
 *
X509v3_gë_ext
(c⁄° 
STACK_OF
(X509_EXTENSIONË*
x
, 
loc
);

811 
X509_EXTENSION
 *
X509v3_dñëe_ext
(
STACK_OF
(X509_EXTENSIONË*
x
, 
loc
);

812 
STACK_OF
(
X509_EXTENSION
Ë*
X509v3_add_ext
(STACK_OF(X509_EXTENSIONË**
x
,

813 
X509_EXTENSION
 *
ex
, 
loc
);

815 
X509_gë_ext_cou¡
(
X509
 *
x
);

816 
X509_gë_ext_by_NID
(
X509
 *
x
, 
nid
, 
œ°pos
);

817 
X509_gë_ext_by_OBJ
(
X509
 *
x
, 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

818 
X509_gë_ext_by_¸ôiˇl
(
X509
 *
x
, 
¸ô
, 
œ°pos
);

819 
X509_EXTENSION
 *
X509_gë_ext
(
X509
 *
x
, 
loc
);

820 
X509_EXTENSION
 *
X509_dñëe_ext
(
X509
 *
x
, 
loc
);

821 
X509_add_ext
(
X509
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

822 *
X509_gë_ext_d2i
(
X509
 *
x
, 
nid
, *
¸ô
, *
idx
);

823 
X509_add1_ext_i2d
(
X509
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

824 
Êags
);

826 
X509_CRL_gë_ext_cou¡
(
X509_CRL
 *
x
);

827 
X509_CRL_gë_ext_by_NID
(
X509_CRL
 *
x
, 
nid
, 
œ°pos
);

828 
X509_CRL_gë_ext_by_OBJ
(
X509_CRL
 *
x
, 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

829 
X509_CRL_gë_ext_by_¸ôiˇl
(
X509_CRL
 *
x
, 
¸ô
, 
œ°pos
);

830 
X509_EXTENSION
 *
X509_CRL_gë_ext
(
X509_CRL
 *
x
, 
loc
);

831 
X509_EXTENSION
 *
X509_CRL_dñëe_ext
(
X509_CRL
 *
x
, 
loc
);

832 
X509_CRL_add_ext
(
X509_CRL
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

833 *
X509_CRL_gë_ext_d2i
(
X509_CRL
 *
x
, 
nid
, *
¸ô
, *
idx
);

834 
X509_CRL_add1_ext_i2d
(
X509_CRL
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

835 
Êags
);

837 
X509_REVOKED_gë_ext_cou¡
(
X509_REVOKED
 *
x
);

838 
X509_REVOKED_gë_ext_by_NID
(
X509_REVOKED
 *
x
, 
nid
, 
œ°pos
);

839 
X509_REVOKED_gë_ext_by_OBJ
(
X509_REVOKED
 *
x
, 
ASN1_OBJECT
 *
obj
,

840 
œ°pos
);

841 
X509_REVOKED_gë_ext_by_¸ôiˇl
(
X509_REVOKED
 *
x
, 
¸ô
, 
œ°pos
);

842 
X509_EXTENSION
 *
X509_REVOKED_gë_ext
(
X509_REVOKED
 *
x
, 
loc
);

843 
X509_EXTENSION
 *
X509_REVOKED_dñëe_ext
(
X509_REVOKED
 *
x
, 
loc
);

844 
X509_REVOKED_add_ext
(
X509_REVOKED
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

845 *
X509_REVOKED_gë_ext_d2i
(
X509_REVOKED
 *
x
, 
nid
, *
¸ô
, *
idx
);

846 
X509_REVOKED_add1_ext_i2d
(
X509_REVOKED
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

847 
Êags
);

849 
X509_EXTENSION
 *
X509_EXTENSION_¸óã_by_NID
(X509_EXTENSION **
ex
,

850 
nid
, 
¸ô
,

851 
ASN1_OCTET_STRING
 *
d©a
);

852 
X509_EXTENSION
 *
X509_EXTENSION_¸óã_by_OBJ
(X509_EXTENSION **
ex
,

853 
ASN1_OBJECT
 *
obj
, 
¸ô
,

854 
ASN1_OCTET_STRING
 *
d©a
);

855 
X509_EXTENSION_£t_obje˘
(
X509_EXTENSION
 *
ex
, 
ASN1_OBJECT
 *
obj
);

856 
X509_EXTENSION_£t_¸ôiˇl
(
X509_EXTENSION
 *
ex
, 
¸ô
);

857 
X509_EXTENSION_£t_d©a
(
X509_EXTENSION
 *
ex
, 
ASN1_OCTET_STRING
 *
d©a
);

858 
ASN1_OBJECT
 *
X509_EXTENSION_gë_obje˘
(
X509_EXTENSION
 *
ex
);

859 
ASN1_OCTET_STRING
 *
X509_EXTENSION_gë_d©a
(
X509_EXTENSION
 *
√
);

860 
X509_EXTENSION_gë_¸ôiˇl
(
X509_EXTENSION
 *
ex
);

862 
X509©_gë_©å_cou¡
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
);

863 
X509©_gë_©å_by_NID
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
, 
nid
,

864 
œ°pos
);

865 
X509©_gë_©å_by_OBJ
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
,

866 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

867 
X509_ATTRIBUTE
 *
X509©_gë_©å
(c⁄° 
STACK_OF
(X509_ATTRIBUTEË*
x
, 
loc
);

868 
X509_ATTRIBUTE
 *
X509©_dñëe_©å
(
STACK_OF
(X509_ATTRIBUTEË*
x
, 
loc
);

869 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å
(STACK_OF(X509_ATTRIBUTEË**
x
,

870 
X509_ATTRIBUTE
 *
©å
);

871 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_OBJ
(STACK_OF(X509_ATTRIBUTE)

872 **
x
, c⁄° 
ASN1_OBJECT
 *
obj
,

873 
ty≥
,

874 c⁄° *
byãs
,

875 
Àn
);

876 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_NID
(STACK_OF(X509_ATTRIBUTE)

877 **
x
, 
nid
, 
ty≥
,

878 c⁄° *
byãs
,

879 
Àn
);

880 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_txt
(STACK_OF(X509_ATTRIBUTE)

881 **
x
, c⁄° *
©å«me
,

882 
ty≥
,

883 c⁄° *
byãs
,

884 
Àn
);

885 *
X509©_gë0_d©a_by_OBJ
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
, 
ASN1_OBJECT
 *
obj
,

886 
œ°pos
, 
ty≥
);

887 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_NID
(X509_ATTRIBUTE **
©å
, 
nid
,

888 
©πy≥
, c⁄° *
d©a
,

889 
Àn
);

890 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_OBJ
(X509_ATTRIBUTE **
©å
,

891 c⁄° 
ASN1_OBJECT
 *
obj
,

892 
©πy≥
, c⁄° *
d©a
,

893 
Àn
);

894 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_txt
(X509_ATTRIBUTE **
©å
,

895 c⁄° *
©∫ame
, 
ty≥
,

896 c⁄° *
byãs
,

897 
Àn
);

898 
X509_ATTRIBUTE_£t1_obje˘
(
X509_ATTRIBUTE
 *
©å
, c⁄° 
ASN1_OBJECT
 *
obj
);

899 
X509_ATTRIBUTE_£t1_d©a
(
X509_ATTRIBUTE
 *
©å
, 
©åty≥
,

900 c⁄° *
d©a
, 
Àn
);

901 *
X509_ATTRIBUTE_gë0_d©a
(
X509_ATTRIBUTE
 *
©å
, 
idx
, 
©πy≥
,

902 *
d©a
);

903 
X509_ATTRIBUTE_cou¡
(
X509_ATTRIBUTE
 *
©å
);

904 
ASN1_OBJECT
 *
X509_ATTRIBUTE_gë0_obje˘
(
X509_ATTRIBUTE
 *
©å
);

905 
ASN1_TYPE
 *
X509_ATTRIBUTE_gë0_ty≥
(
X509_ATTRIBUTE
 *
©å
, 
idx
);

907 
EVP_PKEY_gë_©å_cou¡
(c⁄° 
EVP_PKEY
 *
key
);

908 
EVP_PKEY_gë_©å_by_NID
(c⁄° 
EVP_PKEY
 *
key
, 
nid
, 
œ°pos
);

909 
EVP_PKEY_gë_©å_by_OBJ
(c⁄° 
EVP_PKEY
 *
key
, 
ASN1_OBJECT
 *
obj
,

910 
œ°pos
);

911 
X509_ATTRIBUTE
 *
EVP_PKEY_gë_©å
(c⁄° 
EVP_PKEY
 *
key
, 
loc
);

912 
X509_ATTRIBUTE
 *
EVP_PKEY_dñëe_©å
(
EVP_PKEY
 *
key
, 
loc
);

913 
EVP_PKEY_add1_©å
(
EVP_PKEY
 *
key
, 
X509_ATTRIBUTE
 *
©å
);

914 
EVP_PKEY_add1_©å_by_OBJ
(
EVP_PKEY
 *
key
,

915 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

916 c⁄° *
byãs
, 
Àn
);

917 
EVP_PKEY_add1_©å_by_NID
(
EVP_PKEY
 *
key
,

918 
nid
, 
ty≥
,

919 c⁄° *
byãs
, 
Àn
);

920 
EVP_PKEY_add1_©å_by_txt
(
EVP_PKEY
 *
key
,

921 c⁄° *
©å«me
, 
ty≥
,

922 c⁄° *
byãs
, 
Àn
);

924 
X509_vîify_˚π
(
X509_STORE_CTX
 *
˘x
);

927 
X509
 *
X509_föd_by_issuî_™d_£rül
(
STACK_OF
(X509Ë*
sk
, 
X509_NAME
 *
«me
,

928 
ASN1_INTEGER
 *
£rül
);

929 
X509
 *
X509_föd_by_subje˘
(
STACK_OF
(X509Ë*
sk
, 
X509_NAME
 *
«me
);

931 
DECLARE_ASN1_FUNCTIONS
(
PBEPARAM
)

932 
DECLARE_ASN1_FUNCTIONS
(
PBE2PARAM
)

933 
DECLARE_ASN1_FUNCTIONS
(
PBKDF2PARAM
)

935 
PKCS5_pbe_£t0_Æg‹
(
X509_ALGOR
 *
Æg‹
, 
Æg
, 
ôî
,

936 c⁄° *
ß…
, 
ß…Àn
);

938 
X509_ALGOR
 *
PKCS5_pbe_£t
(
Æg
, 
ôî
,

939 c⁄° *
ß…
, 
ß…Àn
);

940 
X509_ALGOR
 *
PKCS5_pbe2_£t
(c⁄° 
EVP_CIPHER
 *
cùhî
, 
ôî
,

941 *
ß…
, 
ß…Àn
);

942 
X509_ALGOR
 *
PKCS5_pbe2_£t_iv
(c⁄° 
EVP_CIPHER
 *
cùhî
, 
ôî
,

943 *
ß…
, 
ß…Àn
,

944 *
aiv
, 
¥f_nid
);

946 #i‚de‡
OPENSSL_NO_SCRYPT


947 
X509_ALGOR
 *
PKCS5_pbe2_£t_s¸y±
(c⁄° 
EVP_CIPHER
 *
cùhî
,

948 c⁄° *
ß…
, 
ß…Àn
,

949 *
aiv
, 
uöt64_t
 
N
, uöt64_à
r
,

950 
uöt64_t
 
p
);

953 
X509_ALGOR
 *
PKCS5_pbkdf2_£t
(
ôî
, *
ß…
, 
ß…Àn
,

954 
¥f_nid
, 
keyÀn
);

958 
DECLARE_ASN1_FUNCTIONS
(
PKCS8_PRIV_KEY_INFO
)

960 
EVP_PKEY
 *
EVP_PKCS82PKEY
(
PKCS8_PRIV_KEY_INFO
 *
p8
);

961 
PKCS8_PRIV_KEY_INFO
 *
EVP_PKEY2PKCS8
(
EVP_PKEY
 *
pkey
);

963 
PKCS8_pkey_£t0
(
PKCS8_PRIV_KEY_INFO
 *
¥iv
, 
ASN1_OBJECT
 *
aobj
,

964 
vîsi⁄
, 
±y≥
, *
pvÆ
,

965 *
≥nc
, 
≥n˛í
);

966 
PKCS8_pkey_gë0
(
ASN1_OBJECT
 **
µkÆg
,

967 c⁄° **
pk
, *
µkÀn
,

968 
X509_ALGOR
 **
∑
, 
PKCS8_PRIV_KEY_INFO
 *
p8
);

970 
STACK_OF
(
X509_ATTRIBUTE
Ë*
PKCS8_pkey_gë0_©ås
(
PKCS8_PRIV_KEY_INFO
 *
p8
);

971 
PKCS8_pkey_add1_©å_by_NID
(
PKCS8_PRIV_KEY_INFO
 *
p8
, 
nid
, 
ty≥
,

972 c⁄° *
byãs
, 
Àn
);

974 
X509_PUBKEY_£t0_∑øm
(
X509_PUBKEY
 *
pub
, 
ASN1_OBJECT
 *
aobj
,

975 
±y≥
, *
pvÆ
,

976 *
≥nc
, 
≥n˛í
);

977 
X509_PUBKEY_gë0_∑øm
(
ASN1_OBJECT
 **
µkÆg
,

978 c⁄° **
pk
, *
µkÀn
,

979 
X509_ALGOR
 **
∑
, 
X509_PUBKEY
 *
pub
);

981 
X509_check_åu°
(
X509
 *
x
, 
id
, 
Êags
);

982 
X509_TRUST_gë_cou¡
();

983 
X509_TRUST
 *
X509_TRUST_gë0
(
idx
);

984 
X509_TRUST_gë_by_id
(
id
);

985 
X509_TRUST_add
(
id
, 
Êags
, (*
ck
Ë(
X509_TRUST
 *, 
X509
 *, ),

986 c⁄° *
«me
, 
¨g1
, *
¨g2
);

987 
X509_TRUST_˛ónup
();

988 
X509_TRUST_gë_Êags
(c⁄° 
X509_TRUST
 *
xp
);

989 *
X509_TRUST_gë0_«me
(c⁄° 
X509_TRUST
 *
xp
);

990 
X509_TRUST_gë_åu°
(c⁄° 
X509_TRUST
 *
xp
);

998 
ERR_lﬂd_X509_°rögs
();

1003 
	#X509_F_ADD_CERT_DIR
 100

	)

1004 
	#X509_F_BUILD_CHAIN
 106

	)

1005 
	#X509_F_BY_FILE_CTRL
 101

	)

1006 
	#X509_F_CHECK_NAME_CONSTRAINTS
 149

	)

1007 
	#X509_F_CHECK_POLICY
 145

	)

1008 
	#X509_F_DANE_I2D
 107

	)

1009 
	#X509_F_DIR_CTRL
 102

	)

1010 
	#X509_F_GET_CERT_BY_SUBJECT
 103

	)

1011 
	#X509_F_NETSCAPE_SPKI_B64_DECODE
 129

	)

1012 
	#X509_F_NETSCAPE_SPKI_B64_ENCODE
 130

	)

1013 
	#X509_F_X509AT_ADD1_ATTR
 135

	)

1014 
	#X509_F_X509V3_ADD_EXT
 104

	)

1015 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_NID
 136

	)

1016 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ
 137

	)

1017 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_TXT
 140

	)

1018 
	#X509_F_X509_ATTRIBUTE_GET0_DATA
 139

	)

1019 
	#X509_F_X509_ATTRIBUTE_SET1_DATA
 138

	)

1020 
	#X509_F_X509_CHECK_PRIVATE_KEY
 128

	)

1021 
	#X509_F_X509_CRL_DIFF
 105

	)

1022 
	#X509_F_X509_CRL_PRINT_FP
 147

	)

1023 
	#X509_F_X509_EXTENSION_CREATE_BY_NID
 108

	)

1024 
	#X509_F_X509_EXTENSION_CREATE_BY_OBJ
 109

	)

1025 
	#X509_F_X509_GET_PUBKEY_PARAMETERS
 110

	)

1026 
	#X509_F_X509_LOAD_CERT_CRL_FILE
 132

	)

1027 
	#X509_F_X509_LOAD_CERT_FILE
 111

	)

1028 
	#X509_F_X509_LOAD_CRL_FILE
 112

	)

1029 
	#X509_F_X509_NAME_ADD_ENTRY
 113

	)

1030 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_NID
 114

	)

1031 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_TXT
 131

	)

1032 
	#X509_F_X509_NAME_ENTRY_SET_OBJECT
 115

	)

1033 
	#X509_F_X509_NAME_ONELINE
 116

	)

1034 
	#X509_F_X509_NAME_PRINT
 117

	)

1035 
	#X509_F_X509_OBJECT_NEW
 150

	)

1036 
	#X509_F_X509_PRINT_EX_FP
 118

	)

1037 
	#X509_F_X509_PUBKEY_DECODE
 148

	)

1038 
	#X509_F_X509_PUBKEY_GET0
 119

	)

1039 
	#X509_F_X509_PUBKEY_SET
 120

	)

1040 
	#X509_F_X509_REQ_CHECK_PRIVATE_KEY
 144

	)

1041 
	#X509_F_X509_REQ_PRINT_EX
 121

	)

1042 
	#X509_F_X509_REQ_PRINT_FP
 122

	)

1043 
	#X509_F_X509_REQ_TO_X509
 123

	)

1044 
	#X509_F_X509_STORE_ADD_CERT
 124

	)

1045 
	#X509_F_X509_STORE_ADD_CRL
 125

	)

1046 
	#X509_F_X509_STORE_CTX_GET1_ISSUER
 146

	)

1047 
	#X509_F_X509_STORE_CTX_INIT
 143

	)

1048 
	#X509_F_X509_STORE_CTX_NEW
 142

	)

1049 
	#X509_F_X509_STORE_CTX_PURPOSE_INHERIT
 134

	)

1050 
	#X509_F_X509_TO_X509_REQ
 126

	)

1051 
	#X509_F_X509_TRUST_ADD
 133

	)

1052 
	#X509_F_X509_TRUST_SET
 141

	)

1053 
	#X509_F_X509_VERIFY_CERT
 127

	)

1056 
	#X509_R_AKID_MISMATCH
 110

	)

1057 
	#X509_R_BAD_SELECTOR
 133

	)

1058 
	#X509_R_BAD_X509_FILETYPE
 100

	)

1059 
	#X509_R_BASE64_DECODE_ERROR
 118

	)

1060 
	#X509_R_CANT_CHECK_DH_KEY
 114

	)

1061 
	#X509_R_CERT_ALREADY_IN_HASH_TABLE
 101

	)

1062 
	#X509_R_CRL_ALREADY_DELTA
 127

	)

1063 
	#X509_R_CRL_VERIFY_FAILURE
 131

	)

1064 
	#X509_R_IDP_MISMATCH
 128

	)

1065 
	#X509_R_INVALID_DIRECTORY
 113

	)

1066 
	#X509_R_INVALID_FIELD_NAME
 119

	)

1067 
	#X509_R_INVALID_TRUST
 123

	)

1068 
	#X509_R_ISSUER_MISMATCH
 129

	)

1069 
	#X509_R_KEY_TYPE_MISMATCH
 115

	)

1070 
	#X509_R_KEY_VALUES_MISMATCH
 116

	)

1071 
	#X509_R_LOADING_CERT_DIR
 103

	)

1072 
	#X509_R_LOADING_DEFAULTS
 104

	)

1073 
	#X509_R_METHOD_NOT_SUPPORTED
 124

	)

1074 
	#X509_R_NAME_TOO_LONG
 134

	)

1075 
	#X509_R_NEWER_CRL_NOT_NEWER
 132

	)

1076 
	#X509_R_NO_CERT_SET_FOR_US_TO_VERIFY
 105

	)

1077 
	#X509_R_NO_CRL_NUMBER
 130

	)

1078 
	#X509_R_PUBLIC_KEY_DECODE_ERROR
 125

	)

1079 
	#X509_R_PUBLIC_KEY_ENCODE_ERROR
 126

	)

1080 
	#X509_R_SHOULD_RETRY
 106

	)

1081 
	#X509_R_UNABLE_TO_FIND_PARAMETERS_IN_CHAIN
 107

	)

1082 
	#X509_R_UNABLE_TO_GET_CERTS_PUBLIC_KEY
 108

	)

1083 
	#X509_R_UNKNOWN_KEY_TYPE
 117

	)

1084 
	#X509_R_UNKNOWN_NID
 109

	)

1085 
	#X509_R_UNKNOWN_PURPOSE_ID
 121

	)

1086 
	#X509_R_UNKNOWN_TRUST_ID
 120

	)

1087 
	#X509_R_UNSUPPORTED_ALGORITHM
 111

	)

1088 
	#X509_R_WRONG_LOOKUP_TYPE
 112

	)

1089 
	#X509_R_WRONG_TYPE
 122

	)

1091 #ifde‡ 
__˝lu•lus


	@x509_vfy.h

10 #i‚de‡
HEADER_X509_VFY_H


11 
	#HEADER_X509_VFY_H


	)

16 #i‚de‡
HEADER_X509_H


17 
	~<›ís¶/x509.h
>

20 
	~<›ís¶/›ís¶c⁄f.h
>

21 
	~<›ís¶/lhash.h
>

22 
	~<›ís¶/bio.h
>

23 
	~<›ís¶/¸y±o.h
>

24 
	~<›ís¶/symhacks.h
>

26 #ifde‡ 
__˝lu•lus


48 
X509_LU_RETRY
 = -1,

49 
X509_LU_FAIL
, 
X509_LU_X509
, 
X509_LU_CRL


50 } 
	tX509_LOOKUP_TYPE
;

53 
DEFINE_STACK_OF
(
X509_LOOKUP
)

54 
DEFINE_STACK_OF
(
X509_OBJECT
)

55 
DEFINE_STACK_OF
(
X509_VERIFY_PARAM
)

57 
X509_STORE_£t_dïth
(
X509_STORE
 *
°‹e
, 
dïth
);

59 
	#X509_STORE_£t_vîify_cb_func
(
˘x
,
func
) \

60 
	`X509_STORE_£t_vîify_cb
((
˘x
),(
func
))

	)

62 (*
X509_STORE_CTX_vîify_cb
)(, 
	tX509_STORE_CTX
 *);

63 (*
X509_STORE_CTX_vîify
)(
	tX509_STORE_CTX
 *);

65 
X509_STORE_£t_vîify
(
X509_STORE
 *
˘x
, 
X509_STORE_CTX_vîify
 
vîify
);

66 
	#X509_STORE_£t_vîify_func
(
˘x
, 
func
) \

67 
	`X509_STORE_£t_vîify
((
˘x
),(
func
))

	)

69 
X509_STORE_CTX_£t_dïth
(
X509_STORE_CTX
 *
˘x
, 
dïth
);

71 
	#X509_STORE_CTX_£t_≠p_d©a
(
˘x
,
d©a
) \

72 
	`X509_STORE_CTX_£t_ex_d©a
(
˘x
,0,
d©a
)

	)

73 
	#X509_STORE_CTX_gë_≠p_d©a
(
˘x
) \

74 
	`X509_STORE_CTX_gë_ex_d©a
(
˘x
,0)

	)

76 
	#X509_L_FILE_LOAD
 1

	)

77 
	#X509_L_ADD_DIR
 2

	)

79 
	#X509_LOOKUP_lﬂd_fûe
(
x
,
«me
,
ty≥
) \

80 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_FILE_LOAD
,(
«me
),()(
ty≥
),
NULL
)

	)

82 
	#X509_LOOKUP_add_dú
(
x
,
«me
,
ty≥
) \

83 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_ADD_DIR
,(
«me
),()(
ty≥
),
NULL
)

	)

85 
	#X509_V_OK
 0

	)

86 
	#X509_V_ERR_UNSPECIFIED
 1

	)

87 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT
 2

	)

88 
	#X509_V_ERR_UNABLE_TO_GET_CRL
 3

	)

89 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE
 4

	)

90 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE
 5

	)

91 
	#X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY
 6

	)

92 
	#X509_V_ERR_CERT_SIGNATURE_FAILURE
 7

	)

93 
	#X509_V_ERR_CRL_SIGNATURE_FAILURE
 8

	)

94 
	#X509_V_ERR_CERT_NOT_YET_VALID
 9

	)

95 
	#X509_V_ERR_CERT_HAS_EXPIRED
 10

	)

96 
	#X509_V_ERR_CRL_NOT_YET_VALID
 11

	)

97 
	#X509_V_ERR_CRL_HAS_EXPIRED
 12

	)

98 
	#X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD
 13

	)

99 
	#X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD
 14

	)

100 
	#X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD
 15

	)

101 
	#X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD
 16

	)

102 
	#X509_V_ERR_OUT_OF_MEM
 17

	)

103 
	#X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
 18

	)

104 
	#X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN
 19

	)

105 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY
 20

	)

106 
	#X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE
 21

	)

107 
	#X509_V_ERR_CERT_CHAIN_TOO_LONG
 22

	)

108 
	#X509_V_ERR_CERT_REVOKED
 23

	)

109 
	#X509_V_ERR_INVALID_CA
 24

	)

110 
	#X509_V_ERR_PATH_LENGTH_EXCEEDED
 25

	)

111 
	#X509_V_ERR_INVALID_PURPOSE
 26

	)

112 
	#X509_V_ERR_CERT_UNTRUSTED
 27

	)

113 
	#X509_V_ERR_CERT_REJECTED
 28

	)

115 
	#X509_V_ERR_SUBJECT_ISSUER_MISMATCH
 29

	)

116 
	#X509_V_ERR_AKID_SKID_MISMATCH
 30

	)

117 
	#X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH
 31

	)

118 
	#X509_V_ERR_KEYUSAGE_NO_CERTSIGN
 32

	)

119 
	#X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER
 33

	)

120 
	#X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION
 34

	)

121 
	#X509_V_ERR_KEYUSAGE_NO_CRL_SIGN
 35

	)

122 
	#X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION
 36

	)

123 
	#X509_V_ERR_INVALID_NON_CA
 37

	)

124 
	#X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED
 38

	)

125 
	#X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE
 39

	)

126 
	#X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED
 40

	)

127 
	#X509_V_ERR_INVALID_EXTENSION
 41

	)

128 
	#X509_V_ERR_INVALID_POLICY_EXTENSION
 42

	)

129 
	#X509_V_ERR_NO_EXPLICIT_POLICY
 43

	)

130 
	#X509_V_ERR_DIFFERENT_CRL_SCOPE
 44

	)

131 
	#X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE
 45

	)

132 
	#X509_V_ERR_UNNESTED_RESOURCE
 46

	)

133 
	#X509_V_ERR_PERMITTED_VIOLATION
 47

	)

134 
	#X509_V_ERR_EXCLUDED_VIOLATION
 48

	)

135 
	#X509_V_ERR_SUBTREE_MINMAX
 49

	)

137 
	#X509_V_ERR_APPLICATION_VERIFICATION
 50

	)

138 
	#X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE
 51

	)

139 
	#X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX
 52

	)

140 
	#X509_V_ERR_UNSUPPORTED_NAME_SYNTAX
 53

	)

141 
	#X509_V_ERR_CRL_PATH_VALIDATION_ERROR
 54

	)

143 
	#X509_V_ERR_PATH_LOOP
 55

	)

145 
	#X509_V_ERR_SUITE_B_INVALID_VERSION
 56

	)

146 
	#X509_V_ERR_SUITE_B_INVALID_ALGORITHM
 57

	)

147 
	#X509_V_ERR_SUITE_B_INVALID_CURVE
 58

	)

148 
	#X509_V_ERR_SUITE_B_INVALID_SIGNATURE_ALGORITHM
 59

	)

149 
	#X509_V_ERR_SUITE_B_LOS_NOT_ALLOWED
 60

	)

150 
	#X509_V_ERR_SUITE_B_CANNOT_SIGN_P_384_WITH_P_256
 61

	)

152 
	#X509_V_ERR_HOSTNAME_MISMATCH
 62

	)

153 
	#X509_V_ERR_EMAIL_MISMATCH
 63

	)

154 
	#X509_V_ERR_IP_ADDRESS_MISMATCH
 64

	)

156 
	#X509_V_ERR_DANE_NO_MATCH
 65

	)

158 
	#X509_V_ERR_EE_KEY_TOO_SMALL
 66

	)

159 
	#X509_V_ERR_CA_KEY_TOO_SMALL
 67

	)

160 
	#X509_V_ERR_CA_MD_TOO_WEAK
 68

	)

162 
	#X509_V_ERR_INVALID_CALL
 69

	)

164 
	#X509_V_ERR_STORE_LOOKUP
 70

	)

166 
	#X509_V_ERR_NO_VALID_SCTS
 71

	)

168 
	#X509_V_ERR_PROXY_SUBJECT_NAME_VIOLATION
 72

	)

172 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

173 
	#X509_V_FLAG_CB_ISSUER_CHECK
 0x0

	)

176 
	#X509_V_FLAG_USE_CHECK_TIME
 0x2

	)

178 
	#X509_V_FLAG_CRL_CHECK
 0x4

	)

180 
	#X509_V_FLAG_CRL_CHECK_ALL
 0x8

	)

182 
	#X509_V_FLAG_IGNORE_CRITICAL
 0x10

	)

184 
	#X509_V_FLAG_X509_STRICT
 0x20

	)

186 
	#X509_V_FLAG_ALLOW_PROXY_CERTS
 0x40

	)

188 
	#X509_V_FLAG_POLICY_CHECK
 0x80

	)

190 
	#X509_V_FLAG_EXPLICIT_POLICY
 0x100

	)

192 
	#X509_V_FLAG_INHIBIT_ANY
 0x200

	)

194 
	#X509_V_FLAG_INHIBIT_MAP
 0x400

	)

196 
	#X509_V_FLAG_NOTIFY_POLICY
 0x800

	)

198 
	#X509_V_FLAG_EXTENDED_CRL_SUPPORT
 0x1000

	)

200 
	#X509_V_FLAG_USE_DELTAS
 0x2000

	)

202 
	#X509_V_FLAG_CHECK_SS_SIGNATURE
 0x4000

	)

204 
	#X509_V_FLAG_TRUSTED_FIRST
 0x8000

	)

206 
	#X509_V_FLAG_SUITEB_128_LOS_ONLY
 0x10000

	)

208 
	#X509_V_FLAG_SUITEB_192_LOS
 0x20000

	)

210 
	#X509_V_FLAG_SUITEB_128_LOS
 0x30000

	)

212 
	#X509_V_FLAG_PARTIAL_CHAIN
 0x80000

	)

218 
	#X509_V_FLAG_NO_ALT_CHAINS
 0x100000

	)

220 
	#X509_V_FLAG_NO_CHECK_TIME
 0x200000

	)

222 
	#X509_VP_FLAG_DEFAULT
 0x1

	)

223 
	#X509_VP_FLAG_OVERWRITE
 0x2

	)

224 
	#X509_VP_FLAG_RESET_FLAGS
 0x4

	)

225 
	#X509_VP_FLAG_LOCKED
 0x8

	)

226 
	#X509_VP_FLAG_ONCE
 0x10

	)

229 
	#X509_V_FLAG_POLICY_MASK
 (
X509_V_FLAG_POLICY_CHECK
 \

230 | 
X509_V_FLAG_EXPLICIT_POLICY
 \

231 | 
X509_V_FLAG_INHIBIT_ANY
 \

232 | 
X509_V_FLAG_INHIBIT_MAP
)

	)

234 
X509_OBJECT_idx_by_subje˘
(
STACK_OF
(
X509_OBJECT
Ë*
h
, 
ty≥
,

235 
X509_NAME
 *
«me
);

236 
X509_OBJECT
 *
X509_OBJECT_ªåõve_by_subje˘
(
STACK_OF
(X509_OBJECTË*
h
,

237 
ty≥
, 
X509_NAME
 *
«me
);

238 
X509_OBJECT
 *
X509_OBJECT_ªåõve_m©ch
(
STACK_OF
(X509_OBJECTË*
h
,

239 
X509_OBJECT
 *
x
);

240 
X509_OBJECT_up_ªf_cou¡
(
X509_OBJECT
 *
a
);

241 
X509_OBJECT
 *
X509_OBJECT_√w
();

242 
X509_OBJECT_‰ì
(
X509_OBJECT
 *
a
);

243 
X509_OBJECT_gë_ty≥
(c⁄° 
X509_OBJECT
 *
a
);

244 
X509
 *
X509_OBJECT_gë0_X509
(c⁄° 
X509_OBJECT
 *
a
);

245 
X509_CRL
 *
X509_OBJECT_gë0_X509_CRL
(
X509_OBJECT
 *
a
);

246 
X509_STORE
 *
X509_STORE_√w
();

247 
X509_STORE_‰ì
(
X509_STORE
 *
v
);

248 
X509_STORE_up_ªf
(
X509_STORE
 *
v
);

249 
STACK_OF
(
X509_OBJECT
Ë*
X509_STORE_gë0_obje˘s
(
X509_STORE
 *
v
);

251 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë1_˚πs
(
X509_STORE_CTX
 *
°
, 
X509_NAME
 *
nm
);

252 
STACK_OF
(
X509_CRL
Ë*
X509_STORE_CTX_gë1_¸ls
(
X509_STORE_CTX
 *
°
, 
X509_NAME
 *
nm
);

253 
X509_STORE_£t_Êags
(
X509_STORE
 *
˘x
, 
Êags
);

254 
X509_STORE_£t_puΩo£
(
X509_STORE
 *
˘x
, 
puΩo£
);

255 
X509_STORE_£t_åu°
(
X509_STORE
 *
˘x
, 
åu°
);

256 
X509_STORE_£t1_∑øm
(
X509_STORE
 *
˘x
, 
X509_VERIFY_PARAM
 *
pm
);

257 
X509_VERIFY_PARAM
 *
X509_STORE_gë0_∑øm
(
X509_STORE
 *
˘x
);

259 
X509_STORE_£t_vîify_cb
(
X509_STORE
 *
˘x
,

260 (*
vîify_cb
Ë(, 
X509_STORE_CTX
 *));

262 
X509_STORE_£t_lookup_¸ls_cb
(
X509_STORE
 *
˘x
,

263 
STACK_OF
(
X509_CRL
Ë*(*
cb
Ë(
X509_STORE_CTX


264 *
˘x
,

265 
X509_NAME
 *
nm
));

266 
	#X509_STORE_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

267 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_X509_STORE
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

268 
X509_STORE_£t_ex_d©a
(
X509_STORE
 *
˘x
, 
idx
, *
d©a
);

269 *
X509_STORE_gë_ex_d©a
(
X509_STORE
 *
˘x
, 
idx
);

271 
X509_STORE_CTX
 *
X509_STORE_CTX_√w
();

273 
X509_STORE_CTX_gë1_issuî
(
X509
 **
issuî
, 
X509_STORE_CTX
 *
˘x
, X509 *
x
);

275 
X509_STORE_CTX_‰ì
(
X509_STORE_CTX
 *
˘x
);

276 
X509_STORE_CTX_öô
(
X509_STORE_CTX
 *
˘x
, 
X509_STORE
 *
°‹e
,

277 
X509
 *
x509
, 
STACK_OF
(X509Ë*
chaö
);

278 
X509_STORE_CTX_£t0_åu°ed_°ack
(
X509_STORE_CTX
 *
˘x
, 
STACK_OF
(
X509
Ë*
sk
);

279 
X509_STORE_CTX_˛ónup
(
X509_STORE_CTX
 *
˘x
);

281 
X509_STORE
 *
X509_STORE_CTX_gë0_°‹e
(
X509_STORE_CTX
 *
˘x
);

282 
X509
 *
X509_STORE_CTX_gë0_˚π
(
X509_STORE_CTX
 *
˘x
);

283 
STACK_OF
(
X509
)* 
X509_STORE_CTX_gë0_u¡ru°ed
(
X509_STORE_CTX
 *
˘x
);

284 
X509_STORE_CTX_£t0_u¡ru°ed
(
X509_STORE_CTX
 *
˘x
, 
STACK_OF
(
X509
Ë*
sk
);

285 
X509_STORE_CTX_£t_vîify_cb
(
X509_STORE_CTX
 *
˘x
,

286 
X509_STORE_CTX_vîify_cb
 
vîify
);

287 
X509_STORE_CTX_vîify_cb
 
X509_STORE_CTX_gë_vîify_cb
(
X509_STORE_CTX
 *
˘x
);

288 
X509_STORE_CTX_£t_vîify
(
X509_STORE_CTX
 *
˘x
,

289 
X509_STORE_CTX_vîify
 
vîify
);

290 
X509_STORE_CTX_vîify
 
X509_STORE_CTX_gë_vîify
(
X509_STORE_CTX
 *
˘x
);

292 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

293 
	#X509_STORE_CTX_gë_chaö
 
X509_STORE_CTX_gë0_chaö


	)

294 
	#X509_STORE_CTX_£t_chaö
 
X509_STORE_CTX_£t0_u¡ru°ed


	)

295 
	#X509_STORE_CTX_åu°ed_°ack
 
X509_STORE_CTX_£t0_åu°ed_°ack


	)

296 
	#X509_STORE_gë_by_subje˘
 
X509_STORE_CTX_gë_by_subje˘


	)

297 
	#X509_STORE_gë1_˚π
 
X509_STORE_CTX_gë1_˚πs


	)

298 
	#X509_STORE_gë1_¸l
 
X509_STORE_CTX_gë1_¸ls


	)

301 
X509_LOOKUP
 *
X509_STORE_add_lookup
(
X509_STORE
 *
v
, 
X509_LOOKUP_METHOD
 *
m
);

302 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_hash_dú
();

303 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_fûe
();

305 
X509_STORE_add_˚π
(
X509_STORE
 *
˘x
, 
X509
 *
x
);

306 
X509_STORE_add_¸l
(
X509_STORE
 *
˘x
, 
X509_CRL
 *
x
);

308 
X509_STORE_CTX_gë_by_subje˘
(
X509_STORE_CTX
 *
vs
, 
ty≥
, 
X509_NAME
 *
«me
,

309 
X509_OBJECT
 *
ªt
);

310 
X509_OBJECT
 *
X509_STORE_CTX_gë_obj_by_subje˘
(
X509_STORE_CTX
 *
vs
, 
ty≥
,

311 
X509_NAME
 *
«me
);

313 
X509_LOOKUP_˘æ
(
X509_LOOKUP
 *
˘x
, 
cmd
, c⁄° *
¨gc
,

314 
¨gl
, **
ªt
);

316 
X509_lﬂd_˚π_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

317 
X509_lﬂd_¸l_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

318 
X509_lﬂd_˚π_¸l_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

320 
X509_LOOKUP
 *
X509_LOOKUP_√w
(
X509_LOOKUP_METHOD
 *
mëhod
);

321 
X509_LOOKUP_‰ì
(
X509_LOOKUP
 *
˘x
);

322 
X509_LOOKUP_öô
(
X509_LOOKUP
 *
˘x
);

323 
X509_LOOKUP_by_subje˘
(
X509_LOOKUP
 *
˘x
, 
ty≥
, 
X509_NAME
 *
«me
,

324 
X509_OBJECT
 *
ªt
);

325 
X509_LOOKUP_by_issuî_£rül
(
X509_LOOKUP
 *
˘x
, 
ty≥
, 
X509_NAME
 *
«me
,

326 
ASN1_INTEGER
 *
£rül
, 
X509_OBJECT
 *
ªt
);

327 
X509_LOOKUP_by_fögî¥öt
(
X509_LOOKUP
 *
˘x
, 
ty≥
,

328 *
byãs
, 
Àn
,

329 
X509_OBJECT
 *
ªt
);

330 
X509_LOOKUP_by_Æüs
(
X509_LOOKUP
 *
˘x
, 
ty≥
, *
°r
, 
Àn
,

331 
X509_OBJECT
 *
ªt
);

332 
X509_LOOKUP_shutdown
(
X509_LOOKUP
 *
˘x
);

334 
X509_STORE_lﬂd_loˇti⁄s
(
X509_STORE
 *
˘x
,

335 c⁄° *
fûe
, c⁄° *
dú
);

336 
X509_STORE_£t_deÁu…_∑ths
(
X509_STORE
 *
˘x
);

338 
	#X509_STORE_CTX_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

339 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_X509_STORE_CTX
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

340 
X509_STORE_CTX_£t_ex_d©a
(
X509_STORE_CTX
 *
˘x
, 
idx
, *
d©a
);

341 *
X509_STORE_CTX_gë_ex_d©a
(
X509_STORE_CTX
 *
˘x
, 
idx
);

342 
X509_STORE_CTX_gë_îr‹
(
X509_STORE_CTX
 *
˘x
);

343 
X509_STORE_CTX_£t_îr‹
(
X509_STORE_CTX
 *
˘x
, 
s
);

344 
X509_STORE_CTX_gë_îr‹_dïth
(
X509_STORE_CTX
 *
˘x
);

345 
X509_STORE_CTX_£t_îr‹_dïth
(
X509_STORE_CTX
 *
˘x
, 
dïth
);

346 
X509
 *
X509_STORE_CTX_gë_cuºít_˚π
(
X509_STORE_CTX
 *
˘x
);

347 
X509_STORE_CTX_£t_cuºít_˚π
(
X509_STORE_CTX
 *
˘x
, 
X509
 *
x
);

348 
X509
 *
X509_STORE_CTX_gë0_cuºít_issuî
(
X509_STORE_CTX
 *
˘x
);

349 
X509_CRL
 *
X509_STORE_CTX_gë0_cuºít_¸l
(
X509_STORE_CTX
 *
˘x
);

350 
X509_STORE_CTX
 *
X509_STORE_CTX_gë0_∑ª¡_˘x
(X509_STORE_CTX *
˘x
);

351 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë0_chaö
(
X509_STORE_CTX
 *
˘x
);

352 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë1_chaö
(
X509_STORE_CTX
 *
˘x
);

353 
X509_STORE_CTX_£t_˚π
(
X509_STORE_CTX
 *
c
, 
X509
 *
x
);

354 
X509_STORE_CTX_£t0_vîifõd_chaö
(
X509_STORE_CTX
 *
c
, 
STACK_OF
(
X509
Ë*
sk
);

355 
X509_STORE_CTX_£t0_¸ls
(
X509_STORE_CTX
 *
c
, 
STACK_OF
(
X509_CRL
Ë*
sk
);

356 
X509_STORE_CTX_£t_puΩo£
(
X509_STORE_CTX
 *
˘x
, 
puΩo£
);

357 
X509_STORE_CTX_£t_åu°
(
X509_STORE_CTX
 *
˘x
, 
åu°
);

358 
X509_STORE_CTX_puΩo£_öhîô
(
X509_STORE_CTX
 *
˘x
, 
def_puΩo£
,

359 
puΩo£
, 
åu°
);

360 
X509_STORE_CTX_£t_Êags
(
X509_STORE_CTX
 *
˘x
, 
Êags
);

361 
X509_STORE_CTX_£t_time
(
X509_STORE_CTX
 *
˘x
, 
Êags
,

362 
time_t
 
t
);

363 
X509_STORE_CTX_£t_vîify_cb
(
X509_STORE_CTX
 *
˘x
,

364 (*
vîify_cb
Ë(, 
X509_STORE_CTX
 *));

366 
X509_POLICY_TREE
 *
X509_STORE_CTX_gë0_pﬁicy_åì
(
X509_STORE_CTX
 *
˘x
);

367 
X509_STORE_CTX_gë_ex∂icô_pﬁicy
(
X509_STORE_CTX
 *
˘x
);

368 
X509_STORE_CTX_gë_num_u¡ru°ed
(
X509_STORE_CTX
 *
˘x
);

370 
X509_VERIFY_PARAM
 *
X509_STORE_CTX_gë0_∑øm
(
X509_STORE_CTX
 *
˘x
);

371 
X509_STORE_CTX_£t0_∑øm
(
X509_STORE_CTX
 *
˘x
, 
X509_VERIFY_PARAM
 *
∑øm
);

372 
X509_STORE_CTX_£t_deÁu…
(
X509_STORE_CTX
 *
˘x
, c⁄° *
«me
);

378 
X509_STORE_CTX_£t0_d™e
(
X509_STORE_CTX
 *
˘x
, 
SSL_DANE
 *
d™e
);

382 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_√w
();

383 
X509_VERIFY_PARAM_‰ì
(
X509_VERIFY_PARAM
 *
∑øm
);

384 
X509_VERIFY_PARAM_öhîô
(
X509_VERIFY_PARAM
 *
to
,

385 c⁄° 
X509_VERIFY_PARAM
 *
‰om
);

386 
X509_VERIFY_PARAM_£t1
(
X509_VERIFY_PARAM
 *
to
,

387 c⁄° 
X509_VERIFY_PARAM
 *
‰om
);

388 
X509_VERIFY_PARAM_£t1_«me
(
X509_VERIFY_PARAM
 *
∑øm
, c⁄° *
«me
);

389 
X509_VERIFY_PARAM_£t_Êags
(
X509_VERIFY_PARAM
 *
∑øm
,

390 
Êags
);

391 
X509_VERIFY_PARAM_˛ór_Êags
(
X509_VERIFY_PARAM
 *
∑øm
,

392 
Êags
);

393 
X509_VERIFY_PARAM_gë_Êags
(
X509_VERIFY_PARAM
 *
∑øm
);

394 
X509_VERIFY_PARAM_£t_puΩo£
(
X509_VERIFY_PARAM
 *
∑øm
, 
puΩo£
);

395 
X509_VERIFY_PARAM_£t_åu°
(
X509_VERIFY_PARAM
 *
∑øm
, 
åu°
);

396 
X509_VERIFY_PARAM_£t_dïth
(
X509_VERIFY_PARAM
 *
∑øm
, 
dïth
);

397 
X509_VERIFY_PARAM_£t_auth_Àvñ
(
X509_VERIFY_PARAM
 *
∑øm
, 
auth_Àvñ
);

398 
X509_VERIFY_PARAM_£t_time
(
X509_VERIFY_PARAM
 *
∑øm
, 
time_t
 
t
);

399 
X509_VERIFY_PARAM_add0_pﬁicy
(
X509_VERIFY_PARAM
 *
∑øm
,

400 
ASN1_OBJECT
 *
pﬁicy
);

401 
X509_VERIFY_PARAM_£t1_pﬁicõs
(
X509_VERIFY_PARAM
 *
∑øm
,

402 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicõs
);

404 
X509_VERIFY_PARAM_£t1_ho°
(
X509_VERIFY_PARAM
 *
∑øm
,

405 c⁄° *
«me
, 
size_t
 
«mñí
);

406 
X509_VERIFY_PARAM_add1_ho°
(
X509_VERIFY_PARAM
 *
∑øm
,

407 c⁄° *
«me
, 
size_t
 
«mñí
);

408 
X509_VERIFY_PARAM_£t_ho°Êags
(
X509_VERIFY_PARAM
 *
∑øm
,

409 
Êags
);

410 *
X509_VERIFY_PARAM_gë0_≥î«me
(
X509_VERIFY_PARAM
 *);

411 
X509_VERIFY_PARAM_move_≥î«me
(
X509_VERIFY_PARAM
 *, X509_VERIFY_PARAM *);

412 
X509_VERIFY_PARAM_£t1_emaû
(
X509_VERIFY_PARAM
 *
∑øm
,

413 c⁄° *
emaû
, 
size_t
 
emaûÀn
);

414 
X509_VERIFY_PARAM_£t1_ù
(
X509_VERIFY_PARAM
 *
∑øm
,

415 c⁄° *
ù
, 
size_t
 
ùÀn
);

416 
X509_VERIFY_PARAM_£t1_ù_asc
(
X509_VERIFY_PARAM
 *
∑øm
,

417 c⁄° *
ùasc
);

419 
X509_VERIFY_PARAM_gë_dïth
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

420 
X509_VERIFY_PARAM_gë_auth_Àvñ
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

421 c⁄° *
X509_VERIFY_PARAM_gë0_«me
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

423 
X509_VERIFY_PARAM_add0_èbÀ
(
X509_VERIFY_PARAM
 *
∑øm
);

424 
X509_VERIFY_PARAM_gë_cou¡
();

425 c⁄° 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_gë0
(
id
);

426 c⁄° 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_lookup
(c⁄° *
«me
);

427 
X509_VERIFY_PARAM_èbÀ_˛ónup
();

430 
	#X509_PCY_TREE_FAILURE
 -2

	)

431 
	#X509_PCY_TREE_INVALID
 -1

	)

432 
	#X509_PCY_TREE_INTERNAL
 0

	)

438 
	#X509_PCY_TREE_VALID
 1

	)

439 
	#X509_PCY_TREE_EMPTY
 2

	)

440 
	#X509_PCY_TREE_EXPLICIT
 4

	)

442 
X509_pﬁicy_check
(
X509_POLICY_TREE
 **
±ªe
, *
≥x∂icô_pﬁicy
,

443 
STACK_OF
(
X509
Ë*
˚πs
,

444 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicy_oids
, 
Êags
);

446 
X509_pﬁicy_åì_‰ì
(
X509_POLICY_TREE
 *
åì
);

448 
X509_pﬁicy_åì_Àvñ_cou¡
(c⁄° 
X509_POLICY_TREE
 *
åì
);

449 
X509_POLICY_LEVEL
 *
X509_pﬁicy_åì_gë0_Àvñ
(c⁄° 
X509_POLICY_TREE
 *
åì
,

450 
i
);

452 
STACK_OF
(
X509_POLICY_NODE
Ë*
X509_pﬁicy_åì_gë0_pﬁicõs
(const

453 
X509_POLICY_TREE


454 *
åì
);

456 
STACK_OF
(
X509_POLICY_NODE
Ë*
X509_pﬁicy_åì_gë0_u£r_pﬁicõs
(const

457 
X509_POLICY_TREE


458 *
åì
);

460 
X509_pﬁicy_Àvñ_node_cou¡
(
X509_POLICY_LEVEL
 *
Àvñ
);

462 
X509_POLICY_NODE
 *
X509_pﬁicy_Àvñ_gë0_node
(
X509_POLICY_LEVEL
 *
Àvñ
,

463 
i
);

465 c⁄° 
ASN1_OBJECT
 *
X509_pﬁicy_node_gë0_pﬁicy
(c⁄° 
X509_POLICY_NODE
 *
node
);

467 
STACK_OF
(
POLICYQUALINFO
Ë*
X509_pﬁicy_node_gë0_quÆifõrs
(const

468 
X509_POLICY_NODE


469 *
node
);

470 c⁄° 
X509_POLICY_NODE
 *
X509_pﬁicy_node_gë0_∑ª¡
(const X509_POLICY_NODE

471 *
node
);

473 #ifde‡ 
__˝lu•lus


	@x509v3.h

10 #i‚de‡
HEADER_X509V3_H


11 
	#HEADER_X509V3_H


	)

13 
	~<›ís¶/bio.h
>

14 
	~<›ís¶/x509.h
>

15 
	~<›ís¶/c⁄f.h
>

17 #ifde‡
__˝lu•lus


22 
v3_ext_mëhod
;

23 
v3_ext_˘x
;

27 *(*
	tX509V3_EXT_NEW
)();

28 (*
X509V3_EXT_FREE
) (*);

29 *(*
	tX509V3_EXT_D2I
)(*, const **, );

30 (*
X509V3_EXT_I2D
) (*, **);

31 
STACK_OF
(
	tCONF_VALUE
) *

32 (*
	tX509V3_EXT_I2V
Ë(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
, *
	text
,

33 
	tSTACK_OF
(
	tCONF_VALUE
Ë*
	texéi°
);

34 *(*
	tX509V3_EXT_V2I
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
,

35 
	tv3_ext_˘x
 *
	t˘x
,

36 
	tSTACK_OF
(
	tCONF_VALUE
Ë*
	tvÆues
);

37 *(*
	tX509V3_EXT_I2S
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
,

38 *
	text
);

39 *(*
	tX509V3_EXT_S2I
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
,

40 
	tv3_ext_˘x
 *
	t˘x
, c⁄° *
	t°r
);

41 (*
X509V3_EXT_I2R
Ë(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
, *
	text
,

42 
	tBIO
 *
	tout
, 
	tödít
);

43 *(*
	tX509V3_EXT_R2I
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
,

44 
	tv3_ext_˘x
 *
	t˘x
, c⁄° *
	t°r
);

48 
	sv3_ext_mëhod
 {

49 
ext_nid
;

50 
ext_Êags
;

52 
ASN1_ITEM_EXP
 *
ô
;

54 
X509V3_EXT_NEW
 
ext_√w
;

55 
X509V3_EXT_FREE
 
ext_‰ì
;

56 
X509V3_EXT_D2I
 
d2i
;

57 
X509V3_EXT_I2D
 
i2d
;

59 
X509V3_EXT_I2S
 
i2s
;

60 
X509V3_EXT_S2I
 
s2i
;

62 
X509V3_EXT_I2V
 
i2v
;

63 
X509V3_EXT_V2I
 
v2i
;

65 
X509V3_EXT_I2R
 
i2r
;

66 
X509V3_EXT_R2I
 
r2i
;

67 *
u§_d©a
;

70 
	sX509V3_CONF_METHOD_°
 {

71 *(*
gë_°rög
Ë(*
db
, c⁄° *
£˘i⁄
, c⁄° *
vÆue
);

72 
STACK_OF
(
CONF_VALUE
Ë*(*
gë_£˘i⁄
Ë(*
db
, c⁄° *
£˘i⁄
);

73 (*
‰ì_°rög
Ë(*
db
, *
°rög
);

74 (*
‰ì_£˘i⁄
Ë(*
db
, 
STACK_OF
(
CONF_VALUE
Ë*
£˘i⁄
);

75 } 
	tX509V3_CONF_METHOD
;

78 
	sv3_ext_˘x
 {

79 
	#CTX_TEST
 0x1

	)

80 
	#X509V3_CTX_REPLACE
 0x2

	)

81 
Êags
;

82 
X509
 *
issuî_˚π
;

83 
X509
 *
subje˘_˚π
;

84 
X509_REQ
 *
subje˘_ªq
;

85 
X509_CRL
 *
¸l
;

86 
X509V3_CONF_METHOD
 *
db_mëh
;

87 *
db
;

91 
v3_ext_mëhod
 
	tX509V3_EXT_METHOD
;

93 
DEFINE_STACK_OF
(
X509V3_EXT_METHOD
)

96 
	#X509V3_EXT_DYNAMIC
 0x1

	)

97 
	#X509V3_EXT_CTX_DEP
 0x2

	)

98 
	#X509V3_EXT_MULTILINE
 0x4

	)

100 
BIT_STRING_BITNAME
 
	tENUMERATED_NAMES
;

102 
	sBASIC_CONSTRAINTS_°
 {

103 
ˇ
;

104 
ASN1_INTEGER
 *
∑thÀn
;

105 } 
	tBASIC_CONSTRAINTS
;

107 
	sPKEY_USAGE_PERIOD_°
 {

108 
ASN1_GENERALIZEDTIME
 *
nŸBef‹e
;

109 
ASN1_GENERALIZEDTIME
 *
nŸA·î
;

110 } 
	tPKEY_USAGE_PERIOD
;

112 
	sŸhîName_°
 {

113 
ASN1_OBJECT
 *
ty≥_id
;

114 
ASN1_TYPE
 *
vÆue
;

115 } 
	tOTHERNAME
;

117 
	sEDIP¨tyName_°
 {

118 
ASN1_STRING
 *
«meAssig√r
;

119 
ASN1_STRING
 *
∑πyName
;

120 } 
	tEDIPARTYNAME
;

122 
	sGENERAL_NAME_°
 {

123 
	#GEN_OTHERNAME
 0

	)

124 
	#GEN_EMAIL
 1

	)

125 
	#GEN_DNS
 2

	)

126 
	#GEN_X400
 3

	)

127 
	#GEN_DIRNAME
 4

	)

128 
	#GEN_EDIPARTY
 5

	)

129 
	#GEN_URI
 6

	)

130 
	#GEN_IPADD
 7

	)

131 
	#GEN_RID
 8

	)

132 
ty≥
;

134 *
±r
;

135 
OTHERNAME
 *
ŸhîName
;

136 
ASN1_IA5STRING
 *
rfc822Name
;

137 
ASN1_IA5STRING
 *
dNSName
;

138 
ASN1_TYPE
 *
x400Addªss
;

139 
X509_NAME
 *
dúe˘‹yName
;

140 
EDIPARTYNAME
 *
ediP¨tyName
;

141 
ASN1_IA5STRING
 *
unif‹mResour˚Idítifõr
;

142 
ASN1_OCTET_STRING
 *
iPAddªss
;

143 
ASN1_OBJECT
 *
ªgi°îedID
;

145 
ASN1_OCTET_STRING
 *
ù
;

146 
X509_NAME
 *
dún
;

147 
ASN1_IA5STRING
 *
ü5
;

149 
ASN1_OBJECT
 *
rid
;

150 
ASN1_TYPE
 *
Ÿhî
;

151 } 
d
;

152 } 
	tGENERAL_NAME
;

154 
	sACCESS_DESCRIPTION_°
 {

155 
ASN1_OBJECT
 *
mëhod
;

156 
GENERAL_NAME
 *
loˇti⁄
;

157 } 
	tACCESS_DESCRIPTION
;

159 
STACK_OF
(
	tACCESS_DESCRIPTION
Ë
	tAUTHORITY_INFO_ACCESS
;

161 
STACK_OF
(
	tASN1_OBJECT
Ë
	tEXTENDED_KEY_USAGE
;

163 
STACK_OF
(
	tASN1_INTEGER
Ë
	tTLS_FEATURE
;

165 
DEFINE_STACK_OF
(
GENERAL_NAME
)

166 
STACK_OF
(
	tGENERAL_NAME
Ë
	tGENERAL_NAMES
;

167 
DEFINE_STACK_OF
(
GENERAL_NAMES
)

169 
DEFINE_STACK_OF
(
ACCESS_DESCRIPTION
)

171 
	sDIST_POINT_NAME_°
 {

172 
ty≥
;

174 
GENERAL_NAMES
 *
fuŒ«me
;

175 
STACK_OF
(
X509_NAME_ENTRY
Ë*
ªœtivíame
;

176 } 
«me
;

178 
X509_NAME
 *
d≤ame
;

179 } 
	tDIST_POINT_NAME
;

181 
	#CRLDP_ALL_REASONS
 0x807f

	)

183 
	#CRL_REASON_NONE
 -1

	)

184 
	#CRL_REASON_UNSPECIFIED
 0

	)

185 
	#CRL_REASON_KEY_COMPROMISE
 1

	)

186 
	#CRL_REASON_CA_COMPROMISE
 2

	)

187 
	#CRL_REASON_AFFILIATION_CHANGED
 3

	)

188 
	#CRL_REASON_SUPERSEDED
 4

	)

189 
	#CRL_REASON_CESSATION_OF_OPERATION
 5

	)

190 
	#CRL_REASON_CERTIFICATE_HOLD
 6

	)

191 
	#CRL_REASON_REMOVE_FROM_CRL
 8

	)

192 
	#CRL_REASON_PRIVILEGE_WITHDRAWN
 9

	)

193 
	#CRL_REASON_AA_COMPROMISE
 10

	)

195 
	sDIST_POINT_°
 {

196 
DIST_POINT_NAME
 *
di°poöt
;

197 
ASN1_BIT_STRING
 *
ªas⁄s
;

198 
GENERAL_NAMES
 *
CRLissuî
;

199 
dp_ªas⁄s
;

202 
STACK_OF
(
	tDIST_POINT
Ë
	tCRL_DIST_POINTS
;

204 
DEFINE_STACK_OF
(
DIST_POINT
)

206 
	sAUTHORITY_KEYID_°
 {

207 
ASN1_OCTET_STRING
 *
keyid
;

208 
GENERAL_NAMES
 *
issuî
;

209 
ASN1_INTEGER
 *
£rül
;

214 
	sSXNET_ID_°
 {

215 
ASN1_INTEGER
 *
z⁄e
;

216 
ASN1_OCTET_STRING
 *
u£r
;

217 } 
	tSXNETID
;

219 
DEFINE_STACK_OF
(
SXNETID
)

221 
	sSXNET_°
 {

222 
ASN1_INTEGER
 *
vîsi⁄
;

223 
STACK_OF
(
SXNETID
Ë*
ids
;

224 } 
	tSXNET
;

226 
	sNOTICEREF_°
 {

227 
ASN1_STRING
 *
‹g™iz©i⁄
;

228 
STACK_OF
(
ASN1_INTEGER
Ë*
nŸi˚nos
;

229 } 
	tNOTICEREF
;

231 
	sUSERNOTICE_°
 {

232 
NOTICEREF
 *
nŸi˚ªf
;

233 
ASN1_STRING
 *
ex±ext
;

234 } 
	tUSERNOTICE
;

236 
	sPOLICYQUALINFO_°
 {

237 
ASN1_OBJECT
 *
pquÆid
;

239 
ASN1_IA5STRING
 *
˝suri
;

240 
USERNOTICE
 *
u£∫Ÿi˚
;

241 
ASN1_TYPE
 *
Ÿhî
;

242 } 
d
;

243 } 
	tPOLICYQUALINFO
;

245 
DEFINE_STACK_OF
(
POLICYQUALINFO
)

247 
	sPOLICYINFO_°
 {

248 
ASN1_OBJECT
 *
pﬁicyid
;

249 
STACK_OF
(
POLICYQUALINFO
Ë*
quÆifõrs
;

250 } 
	tPOLICYINFO
;

252 
STACK_OF
(
	tPOLICYINFO
Ë
	tCERTIFICATEPOLICIES
;

254 
DEFINE_STACK_OF
(
POLICYINFO
)

256 
	sPOLICY_MAPPING_°
 {

257 
ASN1_OBJECT
 *
issuîDomaöPﬁicy
;

258 
ASN1_OBJECT
 *
subje˘DomaöPﬁicy
;

259 } 
	tPOLICY_MAPPING
;

261 
DEFINE_STACK_OF
(
POLICY_MAPPING
)

263 
STACK_OF
(
	tPOLICY_MAPPING
Ë
	tPOLICY_MAPPINGS
;

265 
	sGENERAL_SUBTREE_°
 {

266 
GENERAL_NAME
 *
ba£
;

267 
ASN1_INTEGER
 *
möimum
;

268 
ASN1_INTEGER
 *
maximum
;

269 } 
	tGENERAL_SUBTREE
;

271 
DEFINE_STACK_OF
(
GENERAL_SUBTREE
)

273 
	sNAME_CONSTRAINTS_°
 {

274 
STACK_OF
(
GENERAL_SUBTREE
Ë*
≥rmôãdSubåìs
;

275 
STACK_OF
(
GENERAL_SUBTREE
Ë*
ex˛udedSubåìs
;

278 
	sPOLICY_CONSTRAINTS_°
 {

279 
ASN1_INTEGER
 *
ªquúeEx∂icôPﬁicy
;

280 
ASN1_INTEGER
 *
öhibôPﬁicyM≠pög
;

281 } 
	tPOLICY_CONSTRAINTS
;

284 
	sPROXY_POLICY_°
 {

285 
ASN1_OBJECT
 *
pﬁicyL™guage
;

286 
ASN1_OCTET_STRING
 *
pﬁicy
;

287 } 
	tPROXY_POLICY
;

289 
	sPROXY_CERT_INFO_EXTENSION_°
 {

290 
ASN1_INTEGER
 *
pcP©hLígthC⁄°øöt
;

291 
PROXY_POLICY
 *
¥oxyPﬁicy
;

292 } 
	tPROXY_CERT_INFO_EXTENSION
;

294 
DECLARE_ASN1_FUNCTIONS
(
PROXY_POLICY
)

295 
DECLARE_ASN1_FUNCTIONS
(
PROXY_CERT_INFO_EXTENSION
)

297 
	sISSUING_DIST_POINT_°
 {

298 
DIST_POINT_NAME
 *
di°poöt
;

299 
⁄lyu£r
;

300 
⁄lyCA
;

301 
ASN1_BIT_STRING
 *
⁄lysomîós⁄s
;

302 
ödúe˘CRL
;

303 
⁄ly©å
;

308 
	#IDP_PRESENT
 0x1

	)

310 
	#IDP_INVALID
 0x2

	)

312 
	#IDP_ONLYUSER
 0x4

	)

314 
	#IDP_ONLYCA
 0x8

	)

316 
	#IDP_ONLYATTR
 0x10

	)

318 
	#IDP_INDIRECT
 0x20

	)

320 
	#IDP_REASONS
 0x40

	)

322 
	#X509V3_c⁄f_îr
(
vÆ
Ë
	`ERR_add_îr‹_d©a
(6, "£˘i⁄:", vÆ->
£˘i⁄
, \

323 ",«me:", 
vÆ
->
«me
, ",vÆue:", vÆ->
vÆue
);

	)

325 
	#X509V3_£t_˘x_ã°
(
˘x
) \

326 
	`X509V3_£t_˘x
(
˘x
, 
NULL
, NULL, NULL, NULL, 
CTX_TEST
)

	)

327 
	#X509V3_£t_˘x_nodb
(
˘x
Ë(˘x)->
db
 = 
NULL
;

	)

329 
	#EXT_BITSTRING
(
nid
, 
èbÀ
Ë{Çid, 0, 
	`ASN1_ITEM_ªf
(
ASN1_BIT_STRING
), \

332 (
X509V3_EXT_I2V
)
i2v_ASN1_BIT_STRING
, \

333 (
X509V3_EXT_V2I
)
v2i_ASN1_BIT_STRING
, \

334 
NULL
, NULL, \

335 
èbÀ
}

	)

337 
	#EXT_IA5STRING
(
nid
Ë{Çid, 0, 
	`ASN1_ITEM_ªf
(
ASN1_IA5STRING
), \

339 (
X509V3_EXT_I2S
)
i2s_ASN1_IA5STRING
, \

340 (
X509V3_EXT_S2I
)
s2i_ASN1_IA5STRING
, \

342 
NULL
}

	)

344 
	#EXT_END
 { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	)

348 
	#EXFLAG_BCONS
 0x1

	)

349 
	#EXFLAG_KUSAGE
 0x2

	)

350 
	#EXFLAG_XKUSAGE
 0x4

	)

351 
	#EXFLAG_NSCERT
 0x8

	)

353 
	#EXFLAG_CA
 0x10

	)

355 
	#EXFLAG_SI
 0x20

	)

356 
	#EXFLAG_V1
 0x40

	)

357 
	#EXFLAG_INVALID
 0x80

	)

358 
	#EXFLAG_SET
 0x100

	)

359 
	#EXFLAG_CRITICAL
 0x200

	)

360 
	#EXFLAG_PROXY
 0x400

	)

362 
	#EXFLAG_INVALID_POLICY
 0x800

	)

363 
	#EXFLAG_FRESHEST
 0x1000

	)

365 
	#EXFLAG_SS
 0x2000

	)

367 
	#KU_DIGITAL_SIGNATURE
 0x0080

	)

368 
	#KU_NON_REPUDIATION
 0x0040

	)

369 
	#KU_KEY_ENCIPHERMENT
 0x0020

	)

370 
	#KU_DATA_ENCIPHERMENT
 0x0010

	)

371 
	#KU_KEY_AGREEMENT
 0x0008

	)

372 
	#KU_KEY_CERT_SIGN
 0x0004

	)

373 
	#KU_CRL_SIGN
 0x0002

	)

374 
	#KU_ENCIPHER_ONLY
 0x0001

	)

375 
	#KU_DECIPHER_ONLY
 0x8000

	)

377 
	#NS_SSL_CLIENT
 0x80

	)

378 
	#NS_SSL_SERVER
 0x40

	)

379 
	#NS_SMIME
 0x20

	)

380 
	#NS_OBJSIGN
 0x10

	)

381 
	#NS_SSL_CA
 0x04

	)

382 
	#NS_SMIME_CA
 0x02

	)

383 
	#NS_OBJSIGN_CA
 0x01

	)

384 
	#NS_ANY_CA
 (
NS_SSL_CA
|
NS_SMIME_CA
|
NS_OBJSIGN_CA
)

	)

386 
	#XKU_SSL_SERVER
 0x1

	)

387 
	#XKU_SSL_CLIENT
 0x2

	)

388 
	#XKU_SMIME
 0x4

	)

389 
	#XKU_CODE_SIGN
 0x8

	)

390 
	#XKU_SGC
 0x10

	)

391 
	#XKU_OCSP_SIGN
 0x20

	)

392 
	#XKU_TIMESTAMP
 0x40

	)

393 
	#XKU_DVCS
 0x80

	)

394 
	#XKU_ANYEKU
 0x100

	)

396 
	#X509_PURPOSE_DYNAMIC
 0x1

	)

397 
	#X509_PURPOSE_DYNAMIC_NAME
 0x2

	)

399 
	sx509_puΩo£_°
 {

400 
puΩo£
;

401 
åu°
;

402 
Êags
;

403 (*
check_puΩo£
Ë(c⁄° 
x509_puΩo£_°
 *, c⁄° 
X509
 *, );

404 *
«me
;

405 *
¢ame
;

406 *
u§_d©a
;

407 } 
	tX509_PURPOSE
;

409 
	#X509_PURPOSE_SSL_CLIENT
 1

	)

410 
	#X509_PURPOSE_SSL_SERVER
 2

	)

411 
	#X509_PURPOSE_NS_SSL_SERVER
 3

	)

412 
	#X509_PURPOSE_SMIME_SIGN
 4

	)

413 
	#X509_PURPOSE_SMIME_ENCRYPT
 5

	)

414 
	#X509_PURPOSE_CRL_SIGN
 6

	)

415 
	#X509_PURPOSE_ANY
 7

	)

416 
	#X509_PURPOSE_OCSP_HELPER
 8

	)

417 
	#X509_PURPOSE_TIMESTAMP_SIGN
 9

	)

419 
	#X509_PURPOSE_MIN
 1

	)

420 
	#X509_PURPOSE_MAX
 9

	)

424 
	#X509V3_EXT_UNKNOWN_MASK
 (0xfL << 16)

	)

426 
	#X509V3_EXT_DEFAULT
 0

	)

428 
	#X509V3_EXT_ERROR_UNKNOWN
 (1L << 16)

	)

430 
	#X509V3_EXT_PARSE_UNKNOWN
 (2L << 16)

	)

432 
	#X509V3_EXT_DUMP_UNKNOWN
 (3L << 16)

	)

436 
	#X509V3_ADD_OP_MASK
 0xfL

	)

437 
	#X509V3_ADD_DEFAULT
 0L

	)

438 
	#X509V3_ADD_APPEND
 1L

	)

439 
	#X509V3_ADD_REPLACE
 2L

	)

440 
	#X509V3_ADD_REPLACE_EXISTING
 3L

	)

441 
	#X509V3_ADD_KEEP_EXISTING
 4L

	)

442 
	#X509V3_ADD_DELETE
 5L

	)

443 
	#X509V3_ADD_SILENT
 0x10

	)

445 
DEFINE_STACK_OF
(
X509_PURPOSE
)

447 
DECLARE_ASN1_FUNCTIONS
(
BASIC_CONSTRAINTS
)

449 
DECLARE_ASN1_FUNCTIONS
(
SXNET
)

450 
DECLARE_ASN1_FUNCTIONS
(
SXNETID
)

452 
SXNET_add_id_asc
(
SXNET
 **
psx
, *
z⁄e
, *
u£r
, 
u£æí
);

453 
SXNET_add_id_ul⁄g
(
SXNET
 **
psx
, 
lz⁄e
, *
u£r
,

454 
u£æí
);

455 
SXNET_add_id_INTEGER
(
SXNET
 **
psx
, 
ASN1_INTEGER
 *
iz⁄e
, *
u£r
,

456 
u£æí
);

458 
ASN1_OCTET_STRING
 *
SXNET_gë_id_asc
(
SXNET
 *
sx
, *
z⁄e
);

459 
ASN1_OCTET_STRING
 *
SXNET_gë_id_ul⁄g
(
SXNET
 *
sx
, 
lz⁄e
);

460 
ASN1_OCTET_STRING
 *
SXNET_gë_id_INTEGER
(
SXNET
 *
sx
, 
ASN1_INTEGER
 *
z⁄e
);

462 
DECLARE_ASN1_FUNCTIONS
(
AUTHORITY_KEYID
)

464 
DECLARE_ASN1_FUNCTIONS
(
PKEY_USAGE_PERIOD
)

466 
DECLARE_ASN1_FUNCTIONS
(
GENERAL_NAME
)

467 
GENERAL_NAME
 *
GENERAL_NAME_dup
(GENERAL_NAME *
a
);

468 
GENERAL_NAME_cmp
(
GENERAL_NAME
 *
a
, GENERAL_NAME *
b
);

470 
ASN1_BIT_STRING
 *
v2i_ASN1_BIT_STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

471 
X509V3_CTX
 *
˘x
,

472 
STACK_OF
(
CONF_VALUE
Ë*
nvÆ
);

473 
STACK_OF
(
CONF_VALUE
Ë*
i2v_ASN1_BIT_STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

474 
ASN1_BIT_STRING
 *
bôs
,

475 
STACK_OF
(
CONF_VALUE
Ë*
exéi°
);

476 *
i2s_ASN1_IA5STRING
(
X509V3_EXT_METHOD
 *
mëhod
, 
ASN1_IA5STRING
 *
ü5
);

477 
ASN1_IA5STRING
 *
s2i_ASN1_IA5STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

478 
X509V3_CTX
 *
˘x
, c⁄° *
°r
);

480 
STACK_OF
(
CONF_VALUE
Ë*
i2v_GENERAL_NAME
(
X509V3_EXT_METHOD
 *
mëhod
,

481 
GENERAL_NAME
 *
gí
,

482 
STACK_OF
(
CONF_VALUE
Ë*
ªt
);

483 
GENERAL_NAME_¥öt
(
BIO
 *
out
, 
GENERAL_NAME
 *
gí
);

485 
DECLARE_ASN1_FUNCTIONS
(
GENERAL_NAMES
)

487 
STACK_OF
(
CONF_VALUE
Ë*
i2v_GENERAL_NAMES
(
X509V3_EXT_METHOD
 *
mëhod
,

488 
GENERAL_NAMES
 *
gí
,

489 
STACK_OF
(
CONF_VALUE
Ë*
exéi°
);

490 
GENERAL_NAMES
 *
v2i_GENERAL_NAMES
(c⁄° 
X509V3_EXT_METHOD
 *
mëhod
,

491 
X509V3_CTX
 *
˘x
, 
STACK_OF
(
CONF_VALUE
Ë*
nvÆ
);

493 
DECLARE_ASN1_FUNCTIONS
(
OTHERNAME
)

494 
DECLARE_ASN1_FUNCTIONS
(
EDIPARTYNAME
)

495 
OTHERNAME_cmp
(
OTHERNAME
 *
a
, OTHERNAME *
b
);

496 
GENERAL_NAME_£t0_vÆue
(
GENERAL_NAME
 *
a
, 
ty≥
, *
vÆue
);

497 *
GENERAL_NAME_gë0_vÆue
(
GENERAL_NAME
 *
a
, *
±y≥
);

498 
GENERAL_NAME_£t0_Ÿhî«me
(
GENERAL_NAME
 *
gí
,

499 
ASN1_OBJECT
 *
oid
, 
ASN1_TYPE
 *
vÆue
);

500 
GENERAL_NAME_gë0_ŸhîName
(
GENERAL_NAME
 *
gí
,

501 
ASN1_OBJECT
 **
poid
, 
ASN1_TYPE
 **
pvÆue
);

503 *
i2s_ASN1_OCTET_STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

504 
ASN1_OCTET_STRING
 *
ü5
);

505 
ASN1_OCTET_STRING
 *
s2i_ASN1_OCTET_STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

506 
X509V3_CTX
 *
˘x
, *
°r
);

508 
DECLARE_ASN1_FUNCTIONS
(
EXTENDED_KEY_USAGE
)

509 
i2a_ACCESS_DESCRIPTION
(
BIO
 *
bp
, 
ACCESS_DESCRIPTION
 *
a
);

511 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
TLS_FEATURE
)

513 
DECLARE_ASN1_FUNCTIONS
(
CERTIFICATEPOLICIES
)

514 
DECLARE_ASN1_FUNCTIONS
(
POLICYINFO
)

515 
DECLARE_ASN1_FUNCTIONS
(
POLICYQUALINFO
)

516 
DECLARE_ASN1_FUNCTIONS
(
USERNOTICE
)

517 
DECLARE_ASN1_FUNCTIONS
(
NOTICEREF
)

519 
DECLARE_ASN1_FUNCTIONS
(
CRL_DIST_POINTS
)

520 
DECLARE_ASN1_FUNCTIONS
(
DIST_POINT
)

521 
DECLARE_ASN1_FUNCTIONS
(
DIST_POINT_NAME
)

522 
DECLARE_ASN1_FUNCTIONS
(
ISSUING_DIST_POINT
)

524 
DIST_POINT_£t_d≤ame
(
DIST_POINT_NAME
 *
d≤
, 
X509_NAME
 *
öame
);

526 
NAME_CONSTRAINTS_check
(
X509
 *
x
, 
NAME_CONSTRAINTS
 *
nc
);

528 
DECLARE_ASN1_FUNCTIONS
(
ACCESS_DESCRIPTION
)

529 
DECLARE_ASN1_FUNCTIONS
(
AUTHORITY_INFO_ACCESS
)

531 
DECLARE_ASN1_ITEM
(
POLICY_MAPPING
)

532 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
POLICY_MAPPING
)

533 
DECLARE_ASN1_ITEM
(
POLICY_MAPPINGS
)

535 
DECLARE_ASN1_ITEM
(
GENERAL_SUBTREE
)

536 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
GENERAL_SUBTREE
)

538 
DECLARE_ASN1_ITEM
(
NAME_CONSTRAINTS
)

539 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
NAME_CONSTRAINTS
)

541 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
POLICY_CONSTRAINTS
)

542 
DECLARE_ASN1_ITEM
(
POLICY_CONSTRAINTS
)

544 
GENERAL_NAME
 *
a2i_GENERAL_NAME
(GENERAL_NAME *
out
,

545 c⁄° 
X509V3_EXT_METHOD
 *
mëhod
,

546 
X509V3_CTX
 *
˘x
, 
gí_ty≥
,

547 c⁄° *
vÆue
, 
is_nc
);

549 #ifde‡
HEADER_CONF_H


550 
GENERAL_NAME
 *
v2i_GENERAL_NAME
(c⁄° 
X509V3_EXT_METHOD
 *
mëhod
,

551 
X509V3_CTX
 *
˘x
, 
CONF_VALUE
 *
˙f
);

552 
GENERAL_NAME
 *
v2i_GENERAL_NAME_ex
(GENERAL_NAME *
out
,

553 c⁄° 
X509V3_EXT_METHOD
 *
mëhod
,

554 
X509V3_CTX
 *
˘x
, 
CONF_VALUE
 *
˙f
,

555 
is_nc
);

556 
X509V3_c⁄f_‰ì
(
CONF_VALUE
 *
vÆ
);

558 
X509_EXTENSION
 *
X509V3_EXT_nc⁄f_nid
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, 
ext_nid
,

559 c⁄° *
vÆue
);

560 
X509_EXTENSION
 *
X509V3_EXT_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, c⁄° *
«me
,

561 c⁄° *
vÆue
);

562 
X509V3_EXT_add_nc⁄f_sk
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, c⁄° *
£˘i⁄
,

563 
STACK_OF
(
X509_EXTENSION
Ë**
sk
);

564 
X509V3_EXT_add_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, c⁄° *
£˘i⁄
,

565 
X509
 *
˚π
);

566 
X509V3_EXT_REQ_add_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, c⁄° *
£˘i⁄
,

567 
X509_REQ
 *
ªq
);

568 
X509V3_EXT_CRL_add_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, c⁄° *
£˘i⁄
,

569 
X509_CRL
 *
¸l
);

571 
X509_EXTENSION
 *
X509V3_EXT_c⁄f_nid
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
,

572 
X509V3_CTX
 *
˘x
, 
ext_nid
,

573 c⁄° *
vÆue
);

574 
X509_EXTENSION
 *
X509V3_EXT_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

575 c⁄° *
«me
, c⁄° *
vÆue
);

576 
X509V3_EXT_add_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

577 c⁄° *
£˘i⁄
, 
X509
 *
˚π
);

578 
X509V3_EXT_REQ_add_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

579 c⁄° *
£˘i⁄
, 
X509_REQ
 *
ªq
);

580 
X509V3_EXT_CRL_add_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

581 c⁄° *
£˘i⁄
, 
X509_CRL
 *
¸l
);

583 
X509V3_add_vÆue_boﬁ_nf
(c⁄° *
«me
, 
a¢1_boﬁ
,

584 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

585 
X509V3_gë_vÆue_boﬁ
(
CONF_VALUE
 *
vÆue
, *
a¢1_boﬁ
);

586 
X509V3_gë_vÆue_öt
(
CONF_VALUE
 *
vÆue
, 
ASN1_INTEGER
 **
aöt
);

587 
X509V3_£t_nc⁄f
(
X509V3_CTX
 *
˘x
, 
CONF
 *
c⁄f
);

588 
X509V3_£t_c⁄f_lhash
(
X509V3_CTX
 *
˘x
, 
LHASH_OF
(
CONF_VALUE
Ë*
lhash
);

591 *
X509V3_gë_°rög
(
X509V3_CTX
 *
˘x
, c⁄° *
«me
, c⁄° *
£˘i⁄
);

592 
STACK_OF
(
CONF_VALUE
Ë*
X509V3_gë_£˘i⁄
(
X509V3_CTX
 *
˘x
, c⁄° *
£˘i⁄
);

593 
X509V3_°rög_‰ì
(
X509V3_CTX
 *
˘x
, *
°r
);

594 
X509V3_£˘i⁄_‰ì
(
X509V3_CTX
 *
˘x
, 
STACK_OF
(
CONF_VALUE
Ë*
£˘i⁄
);

595 
X509V3_£t_˘x
(
X509V3_CTX
 *
˘x
, 
X509
 *
issuî
, X509 *
subje˘
,

596 
X509_REQ
 *
ªq
, 
X509_CRL
 *
¸l
, 
Êags
);

598 
X509V3_add_vÆue
(c⁄° *
«me
, c⁄° *
vÆue
,

599 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

600 
X509V3_add_vÆue_uch¨
(c⁄° *
«me
, c⁄° *
vÆue
,

601 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

602 
X509V3_add_vÆue_boﬁ
(c⁄° *
«me
, 
a¢1_boﬁ
,

603 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

604 
X509V3_add_vÆue_öt
(c⁄° *
«me
, 
ASN1_INTEGER
 *
aöt
,

605 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

606 *
i2s_ASN1_INTEGER
(
X509V3_EXT_METHOD
 *
mëh
, 
ASN1_INTEGER
 *
aöt
);

607 
ASN1_INTEGER
 *
s2i_ASN1_INTEGER
(
X509V3_EXT_METHOD
 *
mëh
, c⁄° *
vÆue
);

608 *
i2s_ASN1_ENUMERATED
(
X509V3_EXT_METHOD
 *
mëh
, 
ASN1_ENUMERATED
 *
aöt
);

609 *
i2s_ASN1_ENUMERATED_TABLE
(
X509V3_EXT_METHOD
 *
mëh
,

610 
ASN1_ENUMERATED
 *
aöt
);

611 
X509V3_EXT_add
(
X509V3_EXT_METHOD
 *
ext
);

612 
X509V3_EXT_add_li°
(
X509V3_EXT_METHOD
 *
exéi°
);

613 
X509V3_EXT_add_Æüs
(
nid_to
, 
nid_‰om
);

614 
X509V3_EXT_˛ónup
();

616 c⁄° 
X509V3_EXT_METHOD
 *
X509V3_EXT_gë
(
X509_EXTENSION
 *
ext
);

617 c⁄° 
X509V3_EXT_METHOD
 *
X509V3_EXT_gë_nid
(
nid
);

618 
X509V3_add_°™d¨d_exãnsi⁄s
();

619 
STACK_OF
(
CONF_VALUE
Ë*
X509V3_∑r£_li°
(c⁄° *
löe
);

620 *
X509V3_EXT_d2i
(
X509_EXTENSION
 *
ext
);

621 *
X509V3_gë_d2i
(
STACK_OF
(
X509_EXTENSION
Ë*
x
, 
nid
, *
¸ô
,

622 *
idx
);

624 
X509_EXTENSION
 *
X509V3_EXT_i2d
(
ext_nid
, 
¸ô
, *
ext_°ruc
);

625 
X509V3_add1_i2d
(
STACK_OF
(
X509_EXTENSION
Ë**
x
, 
nid
, *
vÆue
,

626 
¸ô
, 
Êags
);

628 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

630 
	#hex_to_°rög
 
OPENSSL_buf2hex°r


	)

631 
	#°rög_to_hex
 
OPENSSL_hex°r2buf


	)

634 
X509V3_EXT_vÆ_¥n
(
BIO
 *
out
, 
STACK_OF
(
CONF_VALUE
Ë*
vÆ
, 
ödít
,

635 
ml
);

636 
X509V3_EXT_¥öt
(
BIO
 *
out
, 
X509_EXTENSION
 *
ext
, 
Êag
,

637 
ödít
);

638 #i‚de‡
OPENSSL_NO_STDIO


639 
X509V3_EXT_¥öt_Â
(
FILE
 *
out
, 
X509_EXTENSION
 *
ext
, 
Êag
, 
ödít
);

641 
X509V3_exãnsi⁄s_¥öt
(
BIO
 *
out
, *
tôÀ
,

642 
STACK_OF
(
X509_EXTENSION
Ë*
exts
,

643 
Êag
, 
ödít
);

645 
X509_check_ˇ
(
X509
 *
x
);

646 
X509_check_puΩo£
(
X509
 *
x
, 
id
, 
ˇ
);

647 
X509_suµ‹ãd_exãnsi⁄
(
X509_EXTENSION
 *
ex
);

648 
X509_PURPOSE_£t
(*
p
, 
puΩo£
);

649 
X509_check_issued
(
X509
 *
issuî
, X509 *
subje˘
);

650 
X509_check_akid
(
X509
 *
issuî
, 
AUTHORITY_KEYID
 *
akid
);

652 
uöt32_t
 
X509_gë_exãnsi⁄_Êags
(
X509
 *
x
);

653 
uöt32_t
 
X509_gë_key_ußge
(
X509
 *
x
);

654 
uöt32_t
 
X509_gë_exãnded_key_ußge
(
X509
 *
x
);

655 c⁄° 
ASN1_OCTET_STRING
 *
X509_gë0_subje˘_key_id
(
X509
 *
x
);

657 
X509_PURPOSE_gë_cou¡
();

658 
X509_PURPOSE
 *
X509_PURPOSE_gë0
(
idx
);

659 
X509_PURPOSE_gë_by_¢ame
(c⁄° *
¢ame
);

660 
X509_PURPOSE_gë_by_id
(
id
);

661 
X509_PURPOSE_add
(
id
, 
åu°
, 
Êags
,

662 (*
ck
Ë(c⁄° 
X509_PURPOSE
 *, c⁄° 
X509
 *, ),

663 c⁄° *
«me
, c⁄° *
¢ame
, *
¨g
);

664 *
X509_PURPOSE_gë0_«me
(c⁄° 
X509_PURPOSE
 *
xp
);

665 *
X509_PURPOSE_gë0_¢ame
(c⁄° 
X509_PURPOSE
 *
xp
);

666 
X509_PURPOSE_gë_åu°
(c⁄° 
X509_PURPOSE
 *
xp
);

667 
X509_PURPOSE_˛ónup
();

668 
X509_PURPOSE_gë_id
(c⁄° 
X509_PURPOSE
 *);

670 
STACK_OF
(
OPENSSL_STRING
Ë*
X509_gë1_emaû
(
X509
 *
x
);

671 
STACK_OF
(
OPENSSL_STRING
Ë*
X509_REQ_gë1_emaû
(
X509_REQ
 *
x
);

672 
X509_emaû_‰ì
(
STACK_OF
(
OPENSSL_STRING
Ë*
sk
);

673 
STACK_OF
(
OPENSSL_STRING
Ë*
X509_gë1_oc•
(
X509
 *
x
);

679 
	#X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT
 0x1

	)

681 
	#X509_CHECK_FLAG_NO_WILDCARDS
 0x2

	)

683 
	#X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS
 0x4

	)

685 
	#X509_CHECK_FLAG_MULTI_LABEL_WILDCARDS
 0x8

	)

687 
	#X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS
 0x10

	)

689 
	#X509_CHECK_FLAG_NEVER_CHECK_SUBJECT
 0x20

	)

695 
	#_X509_CHECK_FLAG_DOT_SUBDOMAINS
 0x8000

	)

697 
X509_check_ho°
(
X509
 *
x
, c⁄° *
chk
, 
size_t
 
chkÀn
,

698 
Êags
, **
≥î«me
);

699 
X509_check_emaû
(
X509
 *
x
, c⁄° *
chk
, 
size_t
 
chkÀn
,

700 
Êags
);

701 
X509_check_ù
(
X509
 *
x
, c⁄° *
chk
, 
size_t
 
chkÀn
,

702 
Êags
);

703 
X509_check_ù_asc
(
X509
 *
x
, c⁄° *
ùasc
, 
Êags
);

705 
ASN1_OCTET_STRING
 *
a2i_IPADDRESS
(c⁄° *
ùasc
);

706 
ASN1_OCTET_STRING
 *
a2i_IPADDRESS_NC
(c⁄° *
ùasc
);

707 
X509V3_NAME_‰om_£˘i⁄
(
X509_NAME
 *
nm
, 
STACK_OF
(
CONF_VALUE
Ë*
dn_sk
,

708 
chty≥
);

710 
X509_POLICY_NODE_¥öt
(
BIO
 *
out
, 
X509_POLICY_NODE
 *
node
, 
ödít
);

711 
DEFINE_STACK_OF
(
X509_POLICY_NODE
)

713 #i‚de‡
OPENSSL_NO_RFC3779


714 
	sASR™ge_°
 {

715 
ASN1_INTEGER
 *
mö
, *
max
;

716 } 
	tASR™ge
;

718 
	#ASIdOrR™ge_id
 0

	)

719 
	#ASIdOrR™ge_ønge
 1

	)

721 
	sASIdOrR™ge_°
 {

722 
ty≥
;

724 
ASN1_INTEGER
 *
id
;

725 
ASR™ge
 *
ønge
;

726 } 
u
;

727 } 
	tASIdOrR™ge
;

729 
STACK_OF
(
	tASIdOrR™ge
Ë
	tASIdOrR™ges
;

730 
DEFINE_STACK_OF
(
ASIdOrR™ge
)

732 
	#ASIdítifõrChoi˚_öhîô
 0

	)

733 
	#ASIdítifõrChoi˚_asIdsOrR™ges
 1

	)

735 
	sASIdítifõrChoi˚_°
 {

736 
ty≥
;

738 
ASN1_NULL
 *
öhîô
;

739 
ASIdOrR™ges
 *
asIdsOrR™ges
;

740 } 
u
;

741 } 
	tASIdítifõrChoi˚
;

743 
	sASIdítifõrs_°
 {

744 
ASIdítifõrChoi˚
 *
a¢um
, *
rdi
;

745 } 
	tASIdítifõrs
;

747 
DECLARE_ASN1_FUNCTIONS
(
ASR™ge
)

748 
DECLARE_ASN1_FUNCTIONS
(
ASIdOrR™ge
)

749 
DECLARE_ASN1_FUNCTIONS
(
ASIdítifõrChoi˚
)

750 
DECLARE_ASN1_FUNCTIONS
(
ASIdítifõrs
)

752 
	sIPAddªssR™ge_°
 {

753 
ASN1_BIT_STRING
 *
mö
, *
max
;

754 } 
	tIPAddªssR™ge
;

756 
	#IPAddªssOrR™ge_addªssPªfix
 0

	)

757 
	#IPAddªssOrR™ge_addªssR™ge
 1

	)

759 
	sIPAddªssOrR™ge_°
 {

760 
ty≥
;

762 
ASN1_BIT_STRING
 *
addªssPªfix
;

763 
IPAddªssR™ge
 *
addªssR™ge
;

764 } 
u
;

765 } 
	tIPAddªssOrR™ge
;

767 
STACK_OF
(
	tIPAddªssOrR™ge
Ë
	tIPAddªssOrR™ges
;

768 
DEFINE_STACK_OF
(
IPAddªssOrR™ge
)

770 
	#IPAddªssChoi˚_öhîô
 0

	)

771 
	#IPAddªssChoi˚_addªs£sOrR™ges
 1

	)

773 
	sIPAddªssChoi˚_°
 {

774 
ty≥
;

776 
ASN1_NULL
 *
öhîô
;

777 
IPAddªssOrR™ges
 *
addªs£sOrR™ges
;

778 } 
u
;

779 } 
	tIPAddªssChoi˚
;

781 
	sIPAddªssFamûy_°
 {

782 
ASN1_OCTET_STRING
 *
addªssFamûy
;

783 
IPAddªssChoi˚
 *
ùAddªssChoi˚
;

784 } 
	tIPAddªssFamûy
;

786 
STACK_OF
(
	tIPAddªssFamûy
Ë
	tIPAddrBlocks
;

787 
DEFINE_STACK_OF
(
IPAddªssFamûy
)

789 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssR™ge
)

790 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssOrR™ge
)

791 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssChoi˚
)

792 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssFamûy
)

797 
	#V3_ASID_ASNUM
 0

	)

798 
	#V3_ASID_RDI
 1

	)

806 
	#IANA_AFI_IPV4
 1

	)

807 
	#IANA_AFI_IPV6
 2

	)

814 
X509v3_asid_add_öhîô
(
ASIdítifõrs
 *
asid
, 
which
);

815 
X509v3_asid_add_id_‹_ønge
(
ASIdítifõrs
 *
asid
, 
which
,

816 
ASN1_INTEGER
 *
mö
, ASN1_INTEGER *
max
);

817 
X509v3_addr_add_öhîô
(
IPAddrBlocks
 *
addr
,

818 c⁄° 
afi
, c⁄° *
ßfi
);

819 
X509v3_addr_add_¥efix
(
IPAddrBlocks
 *
addr
,

820 c⁄° 
afi
, c⁄° *
ßfi
,

821 *
a
, c⁄° 
¥efixÀn
);

822 
X509v3_addr_add_ønge
(
IPAddrBlocks
 *
addr
,

823 c⁄° 
afi
, c⁄° *
ßfi
,

824 *
mö
, *
max
);

825 
X509v3_addr_gë_afi
(c⁄° 
IPAddªssFamûy
 *
f
);

826 
X509v3_addr_gë_ønge
(
IPAddªssOrR™ge
 *
a‹
, c⁄° 
afi
,

827 *
mö
, *
max
,

828 c⁄° 
Àngth
);

833 
X509v3_asid_is_ˇn⁄iˇl
(
ASIdítifõrs
 *
asid
);

834 
X509v3_addr_is_ˇn⁄iˇl
(
IPAddrBlocks
 *
addr
);

835 
X509v3_asid_ˇn⁄ize
(
ASIdítifõrs
 *
asid
);

836 
X509v3_addr_ˇn⁄ize
(
IPAddrBlocks
 *
addr
);

841 
X509v3_asid_öhîôs
(
ASIdítifõrs
 *
asid
);

842 
X509v3_addr_öhîôs
(
IPAddrBlocks
 *
addr
);

843 
X509v3_asid_sub£t
(
ASIdítifõrs
 *
a
, ASIdítifõr†*
b
);

844 
X509v3_addr_sub£t
(
IPAddrBlocks
 *
a
, IPAddrBlock†*
b
);

849 
X509v3_asid_vÆid©e_∑th
(
X509_STORE_CTX
 *);

850 
X509v3_addr_vÆid©e_∑th
(
X509_STORE_CTX
 *);

851 
X509v3_asid_vÆid©e_ªsour˚_£t
(
STACK_OF
(
X509
Ë*
chaö
,

852 
ASIdítifõrs
 *
ext
,

853 
Ælow_öhîô™˚
);

854 
X509v3_addr_vÆid©e_ªsour˚_£t
(
STACK_OF
(
X509
Ë*
chaö
,

855 
IPAddrBlocks
 *
ext
, 
Ælow_öhîô™˚
);

865 
ERR_lﬂd_X509V3_°rögs
();

870 
	#X509V3_F_A2I_GENERAL_NAME
 164

	)

871 
	#X509V3_F_ADDR_VALIDATE_PATH_INTERNAL
 166

	)

872 
	#X509V3_F_ASIDENTIFIERCHOICE_CANONIZE
 161

	)

873 
	#X509V3_F_ASIDENTIFIERCHOICE_IS_CANONICAL
 162

	)

874 
	#X509V3_F_COPY_EMAIL
 122

	)

875 
	#X509V3_F_COPY_ISSUER
 123

	)

876 
	#X509V3_F_DO_DIRNAME
 144

	)

877 
	#X509V3_F_DO_EXT_I2D
 135

	)

878 
	#X509V3_F_DO_EXT_NCONF
 151

	)

879 
	#X509V3_F_GNAMES_FROM_SECTNAME
 156

	)

880 
	#X509V3_F_I2S_ASN1_ENUMERATED
 121

	)

881 
	#X509V3_F_I2S_ASN1_IA5STRING
 149

	)

882 
	#X509V3_F_I2S_ASN1_INTEGER
 120

	)

883 
	#X509V3_F_I2V_AUTHORITY_INFO_ACCESS
 138

	)

884 
	#X509V3_F_NOTICE_SECTION
 132

	)

885 
	#X509V3_F_NREF_NOS
 133

	)

886 
	#X509V3_F_POLICY_SECTION
 131

	)

887 
	#X509V3_F_PROCESS_PCI_VALUE
 150

	)

888 
	#X509V3_F_R2I_CERTPOL
 130

	)

889 
	#X509V3_F_R2I_PCI
 155

	)

890 
	#X509V3_F_S2I_ASN1_IA5STRING
 100

	)

891 
	#X509V3_F_S2I_ASN1_INTEGER
 108

	)

892 
	#X509V3_F_S2I_ASN1_OCTET_STRING
 112

	)

893 
	#X509V3_F_S2I_SKEY_ID
 115

	)

894 
	#X509V3_F_SET_DIST_POINT_NAME
 158

	)

895 
	#X509V3_F_SXNET_ADD_ID_ASC
 125

	)

896 
	#X509V3_F_SXNET_ADD_ID_INTEGER
 126

	)

897 
	#X509V3_F_SXNET_ADD_ID_ULONG
 127

	)

898 
	#X509V3_F_SXNET_GET_ID_ASC
 128

	)

899 
	#X509V3_F_SXNET_GET_ID_ULONG
 129

	)

900 
	#X509V3_F_V2I_ASIDENTIFIERS
 163

	)

901 
	#X509V3_F_V2I_ASN1_BIT_STRING
 101

	)

902 
	#X509V3_F_V2I_AUTHORITY_INFO_ACCESS
 139

	)

903 
	#X509V3_F_V2I_AUTHORITY_KEYID
 119

	)

904 
	#X509V3_F_V2I_BASIC_CONSTRAINTS
 102

	)

905 
	#X509V3_F_V2I_CRLD
 134

	)

906 
	#X509V3_F_V2I_EXTENDED_KEY_USAGE
 103

	)

907 
	#X509V3_F_V2I_GENERAL_NAMES
 118

	)

908 
	#X509V3_F_V2I_GENERAL_NAME_EX
 117

	)

909 
	#X509V3_F_V2I_IDP
 157

	)

910 
	#X509V3_F_V2I_IPADDRBLOCKS
 159

	)

911 
	#X509V3_F_V2I_ISSUER_ALT
 153

	)

912 
	#X509V3_F_V2I_NAME_CONSTRAINTS
 147

	)

913 
	#X509V3_F_V2I_POLICY_CONSTRAINTS
 146

	)

914 
	#X509V3_F_V2I_POLICY_MAPPINGS
 145

	)

915 
	#X509V3_F_V2I_SUBJECT_ALT
 154

	)

916 
	#X509V3_F_V2I_TLS_FEATURE
 165

	)

917 
	#X509V3_F_V3_GENERIC_EXTENSION
 116

	)

918 
	#X509V3_F_X509V3_ADD1_I2D
 140

	)

919 
	#X509V3_F_X509V3_ADD_VALUE
 105

	)

920 
	#X509V3_F_X509V3_EXT_ADD
 104

	)

921 
	#X509V3_F_X509V3_EXT_ADD_ALIAS
 106

	)

922 
	#X509V3_F_X509V3_EXT_I2D
 136

	)

923 
	#X509V3_F_X509V3_EXT_NCONF
 152

	)

924 
	#X509V3_F_X509V3_GET_SECTION
 142

	)

925 
	#X509V3_F_X509V3_GET_STRING
 143

	)

926 
	#X509V3_F_X509V3_GET_VALUE_BOOL
 110

	)

927 
	#X509V3_F_X509V3_PARSE_LIST
 109

	)

928 
	#X509V3_F_X509_PURPOSE_ADD
 137

	)

929 
	#X509V3_F_X509_PURPOSE_SET
 141

	)

932 
	#X509V3_R_BAD_IP_ADDRESS
 118

	)

933 
	#X509V3_R_BAD_OBJECT
 119

	)

934 
	#X509V3_R_BN_DEC2BN_ERROR
 100

	)

935 
	#X509V3_R_BN_TO_ASN1_INTEGER_ERROR
 101

	)

936 
	#X509V3_R_DIRNAME_ERROR
 149

	)

937 
	#X509V3_R_DISTPOINT_ALREADY_SET
 160

	)

938 
	#X509V3_R_DUPLICATE_ZONE_ID
 133

	)

939 
	#X509V3_R_ERROR_CONVERTING_ZONE
 131

	)

940 
	#X509V3_R_ERROR_CREATING_EXTENSION
 144

	)

941 
	#X509V3_R_ERROR_IN_EXTENSION
 128

	)

942 
	#X509V3_R_EXPECTED_A_SECTION_NAME
 137

	)

943 
	#X509V3_R_EXTENSION_EXISTS
 145

	)

944 
	#X509V3_R_EXTENSION_NAME_ERROR
 115

	)

945 
	#X509V3_R_EXTENSION_NOT_FOUND
 102

	)

946 
	#X509V3_R_EXTENSION_SETTING_NOT_SUPPORTED
 103

	)

947 
	#X509V3_R_EXTENSION_VALUE_ERROR
 116

	)

948 
	#X509V3_R_ILLEGAL_EMPTY_EXTENSION
 151

	)

949 
	#X509V3_R_INCORRECT_POLICY_SYNTAX_TAG
 152

	)

950 
	#X509V3_R_INVALID_ASNUMBER
 162

	)

951 
	#X509V3_R_INVALID_ASRANGE
 163

	)

952 
	#X509V3_R_INVALID_BOOLEAN_STRING
 104

	)

953 
	#X509V3_R_INVALID_EXTENSION_STRING
 105

	)

954 
	#X509V3_R_INVALID_INHERITANCE
 165

	)

955 
	#X509V3_R_INVALID_IPADDRESS
 166

	)

956 
	#X509V3_R_INVALID_MULTIPLE_RDNS
 161

	)

957 
	#X509V3_R_INVALID_NAME
 106

	)

958 
	#X509V3_R_INVALID_NULL_ARGUMENT
 107

	)

959 
	#X509V3_R_INVALID_NULL_NAME
 108

	)

960 
	#X509V3_R_INVALID_NULL_VALUE
 109

	)

961 
	#X509V3_R_INVALID_NUMBER
 140

	)

962 
	#X509V3_R_INVALID_NUMBERS
 141

	)

963 
	#X509V3_R_INVALID_OBJECT_IDENTIFIER
 110

	)

964 
	#X509V3_R_INVALID_OPTION
 138

	)

965 
	#X509V3_R_INVALID_POLICY_IDENTIFIER
 134

	)

966 
	#X509V3_R_INVALID_PROXY_POLICY_SETTING
 153

	)

967 
	#X509V3_R_INVALID_PURPOSE
 146

	)

968 
	#X509V3_R_INVALID_SAFI
 164

	)

969 
	#X509V3_R_INVALID_SECTION
 135

	)

970 
	#X509V3_R_INVALID_SYNTAX
 143

	)

971 
	#X509V3_R_ISSUER_DECODE_ERROR
 126

	)

972 
	#X509V3_R_MISSING_VALUE
 124

	)

973 
	#X509V3_R_NEED_ORGANIZATION_AND_NUMBERS
 142

	)

974 
	#X509V3_R_NO_CONFIG_DATABASE
 136

	)

975 
	#X509V3_R_NO_ISSUER_CERTIFICATE
 121

	)

976 
	#X509V3_R_NO_ISSUER_DETAILS
 127

	)

977 
	#X509V3_R_NO_POLICY_IDENTIFIER
 139

	)

978 
	#X509V3_R_NO_PROXY_CERT_POLICY_LANGUAGE_DEFINED
 154

	)

979 
	#X509V3_R_NO_PUBLIC_KEY
 114

	)

980 
	#X509V3_R_NO_SUBJECT_DETAILS
 125

	)

981 
	#X509V3_R_OPERATION_NOT_DEFINED
 148

	)

982 
	#X509V3_R_OTHERNAME_ERROR
 147

	)

983 
	#X509V3_R_POLICY_LANGUAGE_ALREADY_DEFINED
 155

	)

984 
	#X509V3_R_POLICY_PATH_LENGTH
 156

	)

985 
	#X509V3_R_POLICY_PATH_LENGTH_ALREADY_DEFINED
 157

	)

986 
	#X509V3_R_POLICY_WHEN_PROXY_LANGUAGE_REQUIRES_NO_POLICY
 159

	)

987 
	#X509V3_R_SECTION_NOT_FOUND
 150

	)

988 
	#X509V3_R_UNABLE_TO_GET_ISSUER_DETAILS
 122

	)

989 
	#X509V3_R_UNABLE_TO_GET_ISSUER_KEYID
 123

	)

990 
	#X509V3_R_UNKNOWN_BIT_STRING_ARGUMENT
 111

	)

991 
	#X509V3_R_UNKNOWN_EXTENSION
 129

	)

992 
	#X509V3_R_UNKNOWN_EXTENSION_NAME
 130

	)

993 
	#X509V3_R_UNKNOWN_OPTION
 120

	)

994 
	#X509V3_R_UNSUPPORTED_OPTION
 117

	)

995 
	#X509V3_R_UNSUPPORTED_TYPE
 167

	)

996 
	#X509V3_R_USER_TOO_LONG
 132

	)

998 #ifde‡ 
__˝lu•lus


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/openssl/asn1.h

59 #i‚de‡
HEADER_ASN1_H


60 
	#HEADER_ASN1_H


	)

62 
	~<time.h
>

63 
	~<›ís¶/e_os2.h
>

64 #i‚de‡
OPENSSL_NO_BIO


65 
	~<›ís¶/bio.h
>

67 
	~<›ís¶/°ack.h
>

68 
	~<›ís¶/ß„°ack.h
>

70 
	~<›ís¶/symhacks.h
>

72 
	~<›ís¶/os¶_typ.h
>

73 #i‚de‡
OPENSSL_NO_DEPRECATED


74 
	~<›ís¶/bn.h
>

77 #ifde‡
OPENSSL_BUILD_SHLIBCRYPTO


78 #unde‡
OPENSSL_EXTERN


79 
	#OPENSSL_EXTERN
 
OPENSSL_EXPORT


	)

82 #ifde‡ 
__˝lu•lus


86 
	#V_ASN1_UNIVERSAL
 0x00

	)

87 
	#V_ASN1_APPLICATION
 0x40

	)

88 
	#V_ASN1_CONTEXT_SPECIFIC
 0x80

	)

89 
	#V_ASN1_PRIVATE
 0xc0

	)

91 
	#V_ASN1_CONSTRUCTED
 0x20

	)

92 
	#V_ASN1_PRIMITIVE_TAG
 0x1f

	)

93 
	#V_ASN1_PRIMATIVE_TAG
 0x1f

	)

95 
	#V_ASN1_APP_CHOOSE
 -2

	)

96 
	#V_ASN1_OTHER
 -3

	)

97 
	#V_ASN1_ANY
 -4

	)

99 
	#V_ASN1_UNDEF
 -1

	)

101 
	#V_ASN1_EOC
 0

	)

102 
	#V_ASN1_BOOLEAN
 1

	)

103 
	#V_ASN1_INTEGER
 2

	)

104 
	#V_ASN1_BIT_STRING
 3

	)

105 
	#V_ASN1_OCTET_STRING
 4

	)

106 
	#V_ASN1_NULL
 5

	)

107 
	#V_ASN1_OBJECT
 6

	)

108 
	#V_ASN1_OBJECT_DESCRIPTOR
 7

	)

109 
	#V_ASN1_EXTERNAL
 8

	)

110 
	#V_ASN1_REAL
 9

	)

111 
	#V_ASN1_ENUMERATED
 10

	)

112 
	#V_ASN1_UTF8STRING
 12

	)

113 
	#V_ASN1_SEQUENCE
 16

	)

114 
	#V_ASN1_SET
 17

	)

115 
	#V_ASN1_NUMERICSTRING
 18

	)

116 
	#V_ASN1_PRINTABLESTRING
 19

	)

117 
	#V_ASN1_T61STRING
 20

	)

118 
	#V_ASN1_TELETEXSTRING
 20

	)

119 
	#V_ASN1_VIDEOTEXSTRING
 21

	)

120 
	#V_ASN1_IA5STRING
 22

	)

121 
	#V_ASN1_UTCTIME
 23

	)

122 
	#V_ASN1_GENERALIZEDTIME
 24

	)

123 
	#V_ASN1_GRAPHICSTRING
 25

	)

124 
	#V_ASN1_ISO64STRING
 26

	)

125 
	#V_ASN1_VISIBLESTRING
 26

	)

126 
	#V_ASN1_GENERALSTRING
 27

	)

127 
	#V_ASN1_UNIVERSALSTRING
 28

	)

128 
	#V_ASN1_BMPSTRING
 30

	)

136 
	#V_ASN1_NEG
 0x100

	)

137 
	#V_ASN1_NEG_INTEGER
 (2 | 
V_ASN1_NEG
)

	)

138 
	#V_ASN1_NEG_ENUMERATED
 (10 | 
V_ASN1_NEG
)

	)

141 
	#B_ASN1_NUMERICSTRING
 0x0001

	)

142 
	#B_ASN1_PRINTABLESTRING
 0x0002

	)

143 
	#B_ASN1_T61STRING
 0x0004

	)

144 
	#B_ASN1_TELETEXSTRING
 0x0004

	)

145 
	#B_ASN1_VIDEOTEXSTRING
 0x0008

	)

146 
	#B_ASN1_IA5STRING
 0x0010

	)

147 
	#B_ASN1_GRAPHICSTRING
 0x0020

	)

148 
	#B_ASN1_ISO64STRING
 0x0040

	)

149 
	#B_ASN1_VISIBLESTRING
 0x0040

	)

150 
	#B_ASN1_GENERALSTRING
 0x0080

	)

151 
	#B_ASN1_UNIVERSALSTRING
 0x0100

	)

152 
	#B_ASN1_OCTET_STRING
 0x0200

	)

153 
	#B_ASN1_BIT_STRING
 0x0400

	)

154 
	#B_ASN1_BMPSTRING
 0x0800

	)

155 
	#B_ASN1_UNKNOWN
 0x1000

	)

156 
	#B_ASN1_UTF8STRING
 0x2000

	)

157 
	#B_ASN1_UTCTIME
 0x4000

	)

158 
	#B_ASN1_GENERALIZEDTIME
 0x8000

	)

159 
	#B_ASN1_SEQUENCE
 0x10000

	)

161 
	#MBSTRING_FLAG
 0x1000

	)

162 
	#MBSTRING_UTF8
 (
MBSTRING_FLAG
)

	)

163 
	#MBSTRING_ASC
 (
MBSTRING_FLAG
|1)

	)

164 
	#MBSTRING_BMP
 (
MBSTRING_FLAG
|2)

	)

165 
	#MBSTRING_UNIV
 (
MBSTRING_FLAG
|4)

	)

166 
	#SMIME_OLDMIME
 0x400

	)

167 
	#SMIME_CRLFEOL
 0x800

	)

168 
	#SMIME_STREAM
 0x1000

	)

169 
X509_Æg‹_°
;

170 
DECLARE_STACK_OF
(
X509_ALGOR
)

172 
	#DECLARE_ASN1_SET_OF
(
ty≥
)

	)

173 
	#IMPLEMENT_ASN1_SET_OF
(
ty≥
)

	)

180 
	sa¢1_˘x_°
 {

181 *
p
;

182 
eos
;

184 
îr‹
;

185 
öf
;

186 
èg
;

187 
x˛ass
;

188 
¶í
;

189 *
max
;

190 *
q
;

191 **
µ
;

192 
löe
;

193 } 
	tASN1_CTX
;

195 
	sa¢1_c⁄°_˘x_°
 {

196 c⁄° *
p
;

197 
eos
;

199 
îr‹
;

200 
öf
;

201 
èg
;

202 
x˛ass
;

203 
¶í
;

204 c⁄° *
max
;

205 c⁄° *
q
;

206 c⁄° **
µ
;

207 
löe
;

208 } 
	tASN1_c⁄°_CTX
;

214 
	#ASN1_OBJECT_FLAG_DYNAMIC
 0x01

	)

215 
	#ASN1_OBJECT_FLAG_CRITICAL
 0x02

	)

216 
	#ASN1_OBJECT_FLAG_DYNAMIC_STRINGS
 0x04

	)

217 
	#ASN1_OBJECT_FLAG_DYNAMIC_DATA
 0x08

	)

218 
	sa¢1_obje˘_°
 {

219 c⁄° *
¢
, *
 
;

220 
nid
;

221 
Àngth
;

222 c⁄° *
d©a
;

223 
Êags
;

226 
	#ASN1_STRING_FLAG_BITS_LEFT
 0x08

	)

232 
	#ASN1_STRING_FLAG_NDEF
 0x010

	)

240 
	#ASN1_STRING_FLAG_CONT
 0x020

	)

245 
	#ASN1_STRING_FLAG_MSTRING
 0x040

	)

247 
	sa¢1_°rög_°
 {

248 
Àngth
;

249 
ty≥
;

250 *
d©a
;

256 
Êags
;

265 
	sASN1_ENCODING_°
 {

266 *
íc
;

267 
Àn
;

268 
modifõd
;

269 } 
	tASN1_ENCODING
;

272 
	#ASN1_LONG_UNDEF
 0x7fffffffL

	)

274 
	#STABLE_FLAGS_MALLOC
 0x01

	)

275 
	#STABLE_NO_MASK
 0x02

	)

276 
	#DIRSTRING_TYPE
 \

277 (
B_ASN1_PRINTABLESTRING
|
B_ASN1_T61STRING
|
B_ASN1_BMPSTRING
|
B_ASN1_UTF8STRING
)

	)

278 
	#PKCS9STRING_TYPE
 (
DIRSTRING_TYPE
|
B_ASN1_IA5STRING
)

	)

280 
	sa¢1_°rög_èbÀ_°
 {

281 
nid
;

282 
mösize
;

283 
maxsize
;

284 
mask
;

285 
Êags
;

286 } 
	tASN1_STRING_TABLE
;

288 
DECLARE_STACK_OF
(
ASN1_STRING_TABLE
)

292 
	#ub_«me
 32768

	)

293 
	#ub_comm⁄_«me
 64

	)

294 
	#ub_loˇlôy_«me
 128

	)

295 
	#ub_°©e_«me
 128

	)

296 
	#ub_‹g™iz©i⁄_«me
 64

	)

297 
	#ub_‹g™iz©i⁄_unô_«me
 64

	)

298 
	#ub_tôÀ
 64

	)

299 
	#ub_emaû_addªss
 128

	)

304 
ASN1_TEMPLATE_°
 
	tASN1_TEMPLATE
;

305 
ASN1_TLC_°
 
	tASN1_TLC
;

307 
ASN1_VALUE_°
 
	tASN1_VALUE
;

311 
	#DECLARE_ASN1_FUNCTIONS
(
ty≥
Ë
	`DECLARE_ASN1_FUNCTIONS_«me
—y≥,Åy≥)

	)

313 
	#DECLARE_ASN1_ALLOC_FUNCTIONS
(
ty≥
) \

314 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
,Åy≥)

	)

316 
	#DECLARE_ASN1_FUNCTIONS_«me
(
ty≥
, 
«me
) \

317 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

318 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
«me
,Çame)

	)

320 
	#DECLARE_ASN1_FUNCTIONS_‚ame
(
ty≥
, 
ô«me
, 
«me
) \

321 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

322 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
)

	)

324 
	#DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
) \

325 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, c⁄° **
ö
, 
Àn
); \

326 
i2d_
##
	`«me
(
ty≥
 *
a
, **
out
); \

327 
	`DECLARE_ASN1_ITEM
(
ô«me
)

	)

329 
	#DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ty≥
, 
«me
) \

330 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, c⁄° **
ö
, 
Àn
); \

331 
i2d_
##
	`«me
(c⁄° 
ty≥
 *
a
, **
out
); \

332 
	`DECLARE_ASN1_ITEM
(
«me
)

	)

334 
	#DECLARE_ASN1_NDEF_FUNCTION
(
«me
) \

335 
i2d_
##
«me
##
	`_NDEF
“amê*
a
, **
out
);

	)

337 
	#DECLARE_ASN1_FUNCTIONS_c⁄°
(
«me
) \

338 
	`DECLARE_ASN1_ALLOC_FUNCTIONS
(
«me
) \

339 
	`DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
«me
,Çame)

	)

341 
	#DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

342 
ty≥
 *
«me
##
	`_√w
(); \

343 
«me
##
	`_‰ì
(
ty≥
 *
a
);

	)

345 
	#DECLARE_ASN1_PRINT_FUNCTION
(
°«me
) \

346 
	`DECLARE_ASN1_PRINT_FUNCTION_‚ame
(
°«me
, säame)

	)

348 
	#DECLARE_ASN1_PRINT_FUNCTION_‚ame
(
°«me
, 
‚ame
) \

349 
‚ame
##
	`_¥öt_˘x
(
BIO
 *
out
, 
°«me
 *
x
, 
ödít
, \

350 c⁄° 
ASN1_PCTX
 *
p˘x
);

	)

352 
	#D2I_OF
(
ty≥
Ëty≥ *(*)—y≥ **,c⁄° **,)

	)

353 
	#I2D_OF
(
ty≥
Ë(*)—y≥ *,**)

	)

354 
	#I2D_OF_c⁄°
(
ty≥
Ë(*)(c⁄°Åy≥ *,**)

	)

356 
	#CHECKED_D2I_OF
(
ty≥
, 
d2i
) \

357 ((
d2i_of_void
*Ë(1 ? 
d2i
 : ((
	`D2I_OF
(
ty≥
))0)))

	)

358 
	#CHECKED_I2D_OF
(
ty≥
, 
i2d
) \

359 ((
i2d_of_void
*Ë(1 ? 
i2d
 : ((
	`I2D_OF
(
ty≥
))0)))

	)

360 
	#CHECKED_NEW_OF
(
ty≥
, 
x√w
) \

361 ((*(*)()Ë(1 ? 
x√w
 : ((
ty≥
 *(*)())0)))

	)

362 
	#CHECKED_PTR_OF
(
ty≥
, 
p
) \

363 ((*Ë(1 ? 
p
 : (
ty≥
*)0))

	)

364 
	#CHECKED_PPTR_OF
(
ty≥
, 
p
) \

365 ((**Ë(1 ? 
p
 : (
ty≥
**)0))

	)

367 
	#TYPEDEF_D2I_OF
(
ty≥
Ëty≥ *
	td2i_of_
##
	tty≥
—y≥ **,c⁄° **,)

	)

368 
	tTYPEDEF_I2D_OF
(
	tty≥
Ë
	ti2d_of_
##ty≥—y≥ *,**)

	)

369 
	tTYPEDEF_D2I2D_OF
(
	tty≥
Ë
	tTYPEDEF_D2I_OF
—y≥); 
	`TYPEDEF_I2D_OF
(
ty≥
)

	)

371 
TYPEDEF_D2I2D_OF
();

409 #i‚de‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


412 c⁄° 
	tASN1_ITEM
 
	tASN1_ITEM_EXP
;

415 
	#ASN1_ITEM_±r
(
ùå
Ë(ùå)

	)

418 
	#ASN1_ITEM_ªf
(
ùå
Ë(&(ùå##
_ô
))

	)

420 
	#ASN1_ITEM_Ωå
(
ªf
Ë(&‘ef##
_ô
))

	)

422 
	#DECLARE_ASN1_ITEM
(
«me
) \

423 
OPENSSL_EXTERN
 c⁄° 
ASN1_ITEM
 
«me
##
_ô
;

	)

433 c⁄° 
	tASN1_ITEM
 *
	tASN1_ITEM_EXP
 ();

436 
	#ASN1_ITEM_±r
(
ùå
Ë(
	`ùå
())

	)

439 
	#ASN1_ITEM_ªf
(
ùå
Ë(ùå##
_ô
)

	)

441 
	#ASN1_ITEM_Ωå
(
ªf
Ë‘ef##
	`_ô
())

	)

443 
	#DECLARE_ASN1_ITEM
(
«me
) \

444 c⁄° 
ASN1_ITEM
 * 
«me
##
	`_ô
();

	)

455 
	#ASN1_STRFLGS_ESC_2253
 1

	)

456 
	#ASN1_STRFLGS_ESC_CTRL
 2

	)

457 
	#ASN1_STRFLGS_ESC_MSB
 4

	)

464 
	#ASN1_STRFLGS_ESC_QUOTE
 8

	)

469 
	#CHARTYPE_PRINTABLESTRING
 0x10

	)

471 
	#CHARTYPE_FIRST_ESC_2253
 0x20

	)

473 
	#CHARTYPE_LAST_ESC_2253
 0x40

	)

484 
	#ASN1_STRFLGS_UTF8_CONVERT
 0x10

	)

492 
	#ASN1_STRFLGS_IGNORE_TYPE
 0x20

	)

495 
	#ASN1_STRFLGS_SHOW_TYPE
 0x40

	)

505 
	#ASN1_STRFLGS_DUMP_ALL
 0x80

	)

506 
	#ASN1_STRFLGS_DUMP_UNKNOWN
 0x100

	)

513 
	#ASN1_STRFLGS_DUMP_DER
 0x200

	)

520 
	#ASN1_STRFLGS_RFC2253
 (
ASN1_STRFLGS_ESC_2253
 | \

521 
ASN1_STRFLGS_ESC_CTRL
 | \

522 
ASN1_STRFLGS_ESC_MSB
 | \

523 
ASN1_STRFLGS_UTF8_CONVERT
 | \

524 
ASN1_STRFLGS_DUMP_UNKNOWN
 | \

525 
ASN1_STRFLGS_DUMP_DER
)

	)

527 
DECLARE_STACK_OF
(
ASN1_INTEGER
)

528 
DECLARE_ASN1_SET_OF
(
ASN1_INTEGER
)

530 
DECLARE_STACK_OF
(
ASN1_GENERALSTRING
)

532 
	sa¢1_ty≥_°
 {

533 
ty≥
;

535 *
±r
;

536 
ASN1_BOOLEAN
 
boﬁón
;

537 
ASN1_STRING
 *
a¢1_°rög
;

538 
ASN1_OBJECT
 *
obje˘
;

539 
ASN1_INTEGER
 *
öãgî
;

540 
ASN1_ENUMERATED
 *
íumî©ed
;

541 
ASN1_BIT_STRING
 *
bô_°rög
;

542 
ASN1_OCTET_STRING
 *
o˘ë_°rög
;

543 
ASN1_PRINTABLESTRING
 *
¥öèbÀ°rög
;

544 
ASN1_T61STRING
 *
t61°rög
;

545 
ASN1_IA5STRING
 *
ü5°rög
;

546 
ASN1_GENERALSTRING
 *
gíîÆ°rög
;

547 
ASN1_BMPSTRING
 *
bmp°rög
;

548 
ASN1_UNIVERSALSTRING
 *
univîßl°rög
;

549 
ASN1_UTCTIME
 *
ut˘ime
;

550 
ASN1_GENERALIZEDTIME
 *
gíîÆizedtime
;

551 
ASN1_VISIBLESTRING
 *
visibÀ°rög
;

552 
ASN1_UTF8STRING
 *
utf8°rög
;

557 
ASN1_STRING
 *
£t
;

558 
ASN1_STRING
 *
£quí˚
;

559 
ASN1_VALUE
 *
a¢1_vÆue
;

560 } 
vÆue
;

561 } 
	tASN1_TYPE
;

563 
DECLARE_STACK_OF
(
ASN1_TYPE
)

564 
DECLARE_ASN1_SET_OF
(
ASN1_TYPE
)

566 
STACK_OF
(
	tASN1_TYPE
Ë
	tASN1_SEQUENCE_ANY
;

568 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ASN1_SEQUENCE_ANY
, ASN1_SEQUENCE_ANY)

569 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ASN1_SEQUENCE_ANY
, 
ASN1_SET_ANY
)

571 
	sNETSCAPE_X509_°
 {

572 
ASN1_OCTET_STRING
 *
hódî
;

573 
X509
 *
˚π
;

574 } 
	tNETSCAPE_X509
;

577 
	sBIT_STRING_BITNAME_°
 {

578 
bônum
;

579 c⁄° *
 ame
;

580 c⁄° *
¢ame
;

581 } 
	tBIT_STRING_BITNAME
;

583 
	#M_ASN1_STRING_Àngth
(
x
Ë((x)->
Àngth
)

	)

584 
	#M_ASN1_STRING_Àngth_£t
(
x
, 
n
Ë((x)->
Àngth
 = (n))

	)

585 
	#M_ASN1_STRING_ty≥
(
x
Ë((x)->
ty≥
)

	)

586 
	#M_ASN1_STRING_d©a
(
x
Ë((x)->
d©a
)

	)

589 
	#M_ASN1_BIT_STRING_√w
(Ë(
ASN1_BIT_STRING
 *)\

590 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_BIT_STRING
)

	)

591 
	#M_ASN1_BIT_STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

592 
	#M_ASN1_BIT_STRING_dup
(
a
Ë(
ASN1_BIT_STRING
 *)\

593 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

594 
	#M_ASN1_BIT_STRING_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

595 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

596 
	#M_ASN1_BIT_STRING_£t
(
a
,
b
,
c
Ë
	`ASN1_STRING_£t
((
ASN1_STRING
 *Ô,b,c)

	)

598 
	#M_ASN1_INTEGER_√w
(Ë(
ASN1_INTEGER
 *)\

599 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_INTEGER
)

	)

600 
	#M_ASN1_INTEGER_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

601 
	#M_ASN1_INTEGER_dup
(
a
Ë(
ASN1_INTEGER
 *)\

602 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

603 
	#M_ASN1_INTEGER_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

604 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

606 
	#M_ASN1_ENUMERATED_√w
(Ë(
ASN1_ENUMERATED
 *)\

607 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_ENUMERATED
)

	)

608 
	#M_ASN1_ENUMERATED_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

609 
	#M_ASN1_ENUMERATED_dup
(
a
Ë(
ASN1_ENUMERATED
 *)\

610 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

611 
	#M_ASN1_ENUMERATED_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

612 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

614 
	#M_ASN1_OCTET_STRING_√w
(Ë(
ASN1_OCTET_STRING
 *)\

615 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_OCTET_STRING
)

	)

616 
	#M_ASN1_OCTET_STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

617 
	#M_ASN1_OCTET_STRING_dup
(
a
Ë(
ASN1_OCTET_STRING
 *)\

618 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

619 
	#M_ASN1_OCTET_STRING_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

620 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

621 
	#M_ASN1_OCTET_STRING_£t
(
a
,
b
,
c
Ë
	`ASN1_STRING_£t
((
ASN1_STRING
 *Ô,b,c)

	)

622 
	#M_ASN1_OCTET_STRING_¥öt
(
a
,
b
Ë
	`ASN1_STRING_¥öt
◊,(
ASN1_STRING
 *)b)

	)

623 
	#M_i2d_ASN1_OCTET_STRING
(
a
,
µ
) \

624 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_OCTET_STRING
,\

625 
V_ASN1_UNIVERSAL
)

	)

627 
	#B_ASN1_TIME
 \

628 
B_ASN1_UTCTIME
 | \

629 
B_ASN1_GENERALIZEDTIME


	)

631 
	#B_ASN1_PRINTABLE
 \

632 
B_ASN1_NUMERICSTRING
| \

633 
B_ASN1_PRINTABLESTRING
| \

634 
B_ASN1_T61STRING
| \

635 
B_ASN1_IA5STRING
| \

636 
B_ASN1_BIT_STRING
| \

637 
B_ASN1_UNIVERSALSTRING
|\

638 
B_ASN1_BMPSTRING
|\

639 
B_ASN1_UTF8STRING
|\

640 
B_ASN1_SEQUENCE
|\

641 
B_ASN1_UNKNOWN


	)

643 
	#B_ASN1_DIRECTORYSTRING
 \

644 
B_ASN1_PRINTABLESTRING
| \

645 
B_ASN1_TELETEXSTRING
|\

646 
B_ASN1_BMPSTRING
|\

647 
B_ASN1_UNIVERSALSTRING
|\

648 
B_ASN1_UTF8STRING


	)

650 
	#B_ASN1_DISPLAYTEXT
 \

651 
B_ASN1_IA5STRING
| \

652 
B_ASN1_VISIBLESTRING
| \

653 
B_ASN1_BMPSTRING
|\

654 
B_ASN1_UTF8STRING


	)

656 
	#M_ASN1_PRINTABLE_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_T61STRING
)

	)

657 
	#M_ASN1_PRINTABLE_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

658 
	#M_i2d_ASN1_PRINTABLE
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

659 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

660 
	#M_d2i_ASN1_PRINTABLE
(
a
,
µ
,
l
) \

661 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

662 
B_ASN1_PRINTABLE
)

	)

664 
	#M_DIRECTORYSTRING_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_PRINTABLESTRING
)

	)

665 
	#M_DIRECTORYSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

666 
	#M_i2d_DIRECTORYSTRING
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

667 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

668 
	#M_d2i_DIRECTORYSTRING
(
a
,
µ
,
l
) \

669 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

670 
B_ASN1_DIRECTORYSTRING
)

	)

672 
	#M_DISPLAYTEXT_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_VISIBLESTRING
)

	)

673 
	#M_DISPLAYTEXT_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

674 
	#M_i2d_DISPLAYTEXT
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

675 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

676 
	#M_d2i_DISPLAYTEXT
(
a
,
µ
,
l
) \

677 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

678 
B_ASN1_DISPLAYTEXT
)

	)

680 
	#M_ASN1_PRINTABLESTRING_√w
(Ë(
ASN1_PRINTABLESTRING
 *)\

681 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_PRINTABLESTRING
)

	)

682 
	#M_ASN1_PRINTABLESTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

683 
	#M_i2d_ASN1_PRINTABLESTRING
(
a
,
µ
) \

684 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_PRINTABLESTRING
,\

685 
V_ASN1_UNIVERSAL
)

	)

686 
	#M_d2i_ASN1_PRINTABLESTRING
(
a
,
µ
,
l
) \

687 (
ASN1_PRINTABLESTRING
 *)
d2i_ASN1_ty≥_byãs
\

688 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_PRINTABLESTRING
)

	)

690 
	#M_ASN1_T61STRING_√w
(Ë(
ASN1_T61STRING
 *)\

691 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_T61STRING
)

	)

692 
	#M_ASN1_T61STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

693 
	#M_i2d_ASN1_T61STRING
(
a
,
µ
) \

694 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_T61STRING
,\

695 
V_ASN1_UNIVERSAL
)

	)

696 
	#M_d2i_ASN1_T61STRING
(
a
,
µ
,
l
) \

697 (
ASN1_T61STRING
 *)
d2i_ASN1_ty≥_byãs
\

698 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_T61STRING
)

	)

700 
	#M_ASN1_IA5STRING_√w
(Ë(
ASN1_IA5STRING
 *)\

701 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_IA5STRING
)

	)

702 
	#M_ASN1_IA5STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

703 
	#M_ASN1_IA5STRING_dup
(
a
) \

704 (
ASN1_IA5STRING
 *)
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

705 
	#M_i2d_ASN1_IA5STRING
(
a
,
µ
) \

706 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_IA5STRING
,\

707 
V_ASN1_UNIVERSAL
)

	)

708 
	#M_d2i_ASN1_IA5STRING
(
a
,
µ
,
l
) \

709 (
ASN1_IA5STRING
 *)
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
,\

710 
B_ASN1_IA5STRING
)

	)

712 
	#M_ASN1_UTCTIME_√w
(Ë(
ASN1_UTCTIME
 *)\

713 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTCTIME
)

	)

714 
	#M_ASN1_UTCTIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

715 
	#M_ASN1_UTCTIME_dup
(
a
Ë(
ASN1_UTCTIME
 *)\

716 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

718 
	#M_ASN1_GENERALIZEDTIME_√w
(Ë(
ASN1_GENERALIZEDTIME
 *)\

719 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_GENERALIZEDTIME
)

	)

720 
	#M_ASN1_GENERALIZEDTIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

721 
	#M_ASN1_GENERALIZEDTIME_dup
(
a
Ë(
ASN1_GENERALIZEDTIME
 *)
	`ASN1_STRING_dup
(\

722 (c⁄° 
ASN1_STRING
 *)
a
)

	)

724 
	#M_ASN1_TIME_√w
(Ë(
ASN1_TIME
 *)\

725 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTCTIME
)

	)

726 
	#M_ASN1_TIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

727 
	#M_ASN1_TIME_dup
(
a
Ë(
ASN1_TIME
 *)\

728 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

730 
	#M_ASN1_GENERALSTRING_√w
(Ë(
ASN1_GENERALSTRING
 *)\

731 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_GENERALSTRING
)

	)

732 
	#M_ASN1_GENERALSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

733 
	#M_i2d_ASN1_GENERALSTRING
(
a
,
µ
) \

734 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_GENERALSTRING
,\

735 
V_ASN1_UNIVERSAL
)

	)

736 
	#M_d2i_ASN1_GENERALSTRING
(
a
,
µ
,
l
) \

737 (
ASN1_GENERALSTRING
 *)
d2i_ASN1_ty≥_byãs
\

738 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_GENERALSTRING
)

	)

740 
	#M_ASN1_UNIVERSALSTRING_√w
(Ë(
ASN1_UNIVERSALSTRING
 *)\

741 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UNIVERSALSTRING
)

	)

742 
	#M_ASN1_UNIVERSALSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

743 
	#M_i2d_ASN1_UNIVERSALSTRING
(
a
,
µ
) \

744 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_UNIVERSALSTRING
,\

745 
V_ASN1_UNIVERSAL
)

	)

746 
	#M_d2i_ASN1_UNIVERSALSTRING
(
a
,
µ
,
l
) \

747 (
ASN1_UNIVERSALSTRING
 *)
d2i_ASN1_ty≥_byãs
\

748 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_UNIVERSALSTRING
)

	)

750 
	#M_ASN1_BMPSTRING_√w
(Ë(
ASN1_BMPSTRING
 *)\

751 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_BMPSTRING
)

	)

752 
	#M_ASN1_BMPSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

753 
	#M_i2d_ASN1_BMPSTRING
(
a
,
µ
) \

754 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_BMPSTRING
,\

755 
V_ASN1_UNIVERSAL
)

	)

756 
	#M_d2i_ASN1_BMPSTRING
(
a
,
µ
,
l
) \

757 (
ASN1_BMPSTRING
 *)
d2i_ASN1_ty≥_byãs
\

758 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_BMPSTRING
)

	)

760 
	#M_ASN1_VISIBLESTRING_√w
(Ë(
ASN1_VISIBLESTRING
 *)\

761 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_VISIBLESTRING
)

	)

762 
	#M_ASN1_VISIBLESTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

763 
	#M_i2d_ASN1_VISIBLESTRING
(
a
,
µ
) \

764 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_VISIBLESTRING
,\

765 
V_ASN1_UNIVERSAL
)

	)

766 
	#M_d2i_ASN1_VISIBLESTRING
(
a
,
µ
,
l
) \

767 (
ASN1_VISIBLESTRING
 *)
d2i_ASN1_ty≥_byãs
\

768 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_VISIBLESTRING
)

	)

770 
	#M_ASN1_UTF8STRING_√w
(Ë(
ASN1_UTF8STRING
 *)\

771 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTF8STRING
)

	)

772 
	#M_ASN1_UTF8STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

773 
	#M_i2d_ASN1_UTF8STRING
(
a
,
µ
) \

774 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_UTF8STRING
,\

775 
V_ASN1_UNIVERSAL
)

	)

776 
	#M_d2i_ASN1_UTF8STRING
(
a
,
µ
,
l
) \

777 (
ASN1_UTF8STRING
 *)
d2i_ASN1_ty≥_byãs
\

778 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_UTF8STRING
)

	)

781 
	#IS_SEQUENCE
 0

	)

782 
	#IS_SET
 1

	)

784 
DECLARE_ASN1_FUNCTIONS_‚ame
(
ASN1_TYPE
, 
ASN1_ANY
, ASN1_TYPE)

786 
ASN1_TYPE_gë
(
ASN1_TYPE
 *
a
);

787 
ASN1_TYPE_£t
(
ASN1_TYPE
 *
a
, 
ty≥
, *
vÆue
);

788 
ASN1_TYPE_£t1
(
ASN1_TYPE
 *
a
, 
ty≥
, c⁄° *
vÆue
);

789 
ASN1_TYPE_cmp
(c⁄° 
ASN1_TYPE
 *
a
, c⁄° ASN1_TYPE *
b
);

791 
ASN1_OBJECT
 *
ASN1_OBJECT_√w
();

792 
ASN1_OBJECT_‰ì
(
ASN1_OBJECT
 *
a
);

793 
i2d_ASN1_OBJECT
(
ASN1_OBJECT
 *
a
, **
µ
);

794 
ASN1_OBJECT
 *
c2i_ASN1_OBJECT
(ASN1_OBJECT **
a
, c⁄° **
µ
,

795 
Àngth
);

796 
ASN1_OBJECT
 *
d2i_ASN1_OBJECT
(ASN1_OBJECT **
a
, c⁄° **
µ
,

797 
Àngth
);

799 
DECLARE_ASN1_ITEM
(
ASN1_OBJECT
)

801 
DECLARE_STACK_OF
(
ASN1_OBJECT
)

802 
DECLARE_ASN1_SET_OF
(
ASN1_OBJECT
)

804 
ASN1_STRING
 *
ASN1_STRING_√w
();

805 
ASN1_STRING_‰ì
(
ASN1_STRING
 *
a
);

806 
ASN1_STRING_˛ór_‰ì
(
ASN1_STRING
 *
a
);

807 
ASN1_STRING_c›y
(
ASN1_STRING
 *
d°
, c⁄° ASN1_STRING *
°r
);

808 
ASN1_STRING
 *
ASN1_STRING_dup
(c⁄° ASN1_STRING *
a
);

809 
ASN1_STRING
 *
ASN1_STRING_ty≥_√w
(
ty≥
);

810 
ASN1_STRING_cmp
(c⁄° 
ASN1_STRING
 *
a
, c⁄° ASN1_STRING *
b
);

815 
ASN1_STRING_£t
(
ASN1_STRING
 *
°r
, c⁄° *
d©a
, 
Àn
);

816 
ASN1_STRING_£t0
(
ASN1_STRING
 *
°r
, *
d©a
, 
Àn
);

817 
ASN1_STRING_Àngth
(c⁄° 
ASN1_STRING
 *
x
);

818 
ASN1_STRING_Àngth_£t
(
ASN1_STRING
 *
x
, 
n
);

819 
ASN1_STRING_ty≥
(
ASN1_STRING
 *
x
);

820 *
ASN1_STRING_d©a
(
ASN1_STRING
 *
x
);

822 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BIT_STRING
)

823 
i2c_ASN1_BIT_STRING
(
ASN1_BIT_STRING
 *
a
, **
µ
);

824 
ASN1_BIT_STRING
 *
c2i_ASN1_BIT_STRING
(ASN1_BIT_STRING **
a
,

825 c⁄° **
µ
, 
Àngth
);

826 
ASN1_BIT_STRING_£t
(
ASN1_BIT_STRING
 *
a
, *
d
, 
Àngth
);

827 
ASN1_BIT_STRING_£t_bô
(
ASN1_BIT_STRING
 *
a
, 
n
, 
vÆue
);

828 
ASN1_BIT_STRING_gë_bô
(
ASN1_BIT_STRING
 *
a
, 
n
);

829 
ASN1_BIT_STRING_check
(
ASN1_BIT_STRING
 *
a
,

830 *
Êags
, 
Êags_Àn
);

832 #i‚de‡
OPENSSL_NO_BIO


833 
ASN1_BIT_STRING_«me_¥öt
(
BIO
 *
out
, 
ASN1_BIT_STRING
 *
bs
,

834 
BIT_STRING_BITNAME
 *
tbl
, 
ödít
);

836 
ASN1_BIT_STRING_num_asc
(*
«me
, 
BIT_STRING_BITNAME
 *
tbl
);

837 
ASN1_BIT_STRING_£t_asc
(
ASN1_BIT_STRING
 *
bs
, *
«me
, 
vÆue
,

838 
BIT_STRING_BITNAME
 *
tbl
);

840 
i2d_ASN1_BOOLEAN
(
a
, **
µ
);

841 
d2i_ASN1_BOOLEAN
(*
a
, c⁄° **
µ
, 
Àngth
);

843 
DECLARE_ASN1_FUNCTIONS
(
ASN1_INTEGER
)

844 
i2c_ASN1_INTEGER
(
ASN1_INTEGER
 *
a
, **
µ
);

845 
ASN1_INTEGER
 *
c2i_ASN1_INTEGER
(ASN1_INTEGER **
a
, c⁄° **
µ
,

846 
Àngth
);

847 
ASN1_INTEGER
 *
d2i_ASN1_UINTEGER
(ASN1_INTEGER **
a
, c⁄° **
µ
,

848 
Àngth
);

849 
ASN1_INTEGER
 *
ASN1_INTEGER_dup
(c⁄° ASN1_INTEGER *
x
);

850 
ASN1_INTEGER_cmp
(c⁄° 
ASN1_INTEGER
 *
x
, c⁄° ASN1_INTEGER *
y
);

852 
DECLARE_ASN1_FUNCTIONS
(
ASN1_ENUMERATED
)

854 
ASN1_UTCTIME_check
(c⁄° 
ASN1_UTCTIME
 *
a
);

855 
ASN1_UTCTIME
 *
ASN1_UTCTIME_£t
(ASN1_UTCTIME *
s
, 
time_t
 
t
);

856 
ASN1_UTCTIME
 *
ASN1_UTCTIME_adj
(ASN1_UTCTIME *
s
, 
time_t
 
t
,

857 
off£t_day
, 
off£t_£c
);

858 
ASN1_UTCTIME_£t_°rög
(
ASN1_UTCTIME
 *
s
, c⁄° *
°r
);

859 
ASN1_UTCTIME_cmp_time_t
(c⁄° 
ASN1_UTCTIME
 *
s
, 
time_t
 
t
);

861 
time_t
 
ASN1_UTCTIME_gë
(c⁄° 
ASN1_UTCTIME
 *
s
);

864 
ASN1_GENERALIZEDTIME_check
(c⁄° 
ASN1_GENERALIZEDTIME
 *
a
);

865 
ASN1_GENERALIZEDTIME
 *
ASN1_GENERALIZEDTIME_£t
(ASN1_GENERALIZEDTIME *
s
,

866 
time_t
 
t
);

867 
ASN1_GENERALIZEDTIME
 *
ASN1_GENERALIZEDTIME_adj
(ASN1_GENERALIZEDTIME *
s
,

868 
time_t
 
t
, 
off£t_day
,

869 
off£t_£c
);

870 
ASN1_GENERALIZEDTIME_£t_°rög
(
ASN1_GENERALIZEDTIME
 *
s
, c⁄° *
°r
);

871 
ASN1_TIME_diff
(*
pday
, *
p£c
,

872 c⁄° 
ASN1_TIME
 *
‰om
, c⁄° ASN1_TIME *
to
);

874 
DECLARE_ASN1_FUNCTIONS
(
ASN1_OCTET_STRING
)

875 
ASN1_OCTET_STRING
 *
ASN1_OCTET_STRING_dup
(c⁄° ASN1_OCTET_STRING *
a
);

876 
ASN1_OCTET_STRING_cmp
(c⁄° 
ASN1_OCTET_STRING
 *
a
,

877 c⁄° 
ASN1_OCTET_STRING
 *
b
);

878 
ASN1_OCTET_STRING_£t
(
ASN1_OCTET_STRING
 *
°r
, c⁄° *
d©a
,

879 
Àn
);

881 
DECLARE_ASN1_FUNCTIONS
(
ASN1_VISIBLESTRING
)

882 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UNIVERSALSTRING
)

883 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTF8STRING
)

884 
DECLARE_ASN1_FUNCTIONS
(
ASN1_NULL
)

885 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BMPSTRING
)

887 
UTF8_gëc
(c⁄° *
°r
, 
Àn
, *
vÆ
);

888 
UTF8_putc
(*
°r
, 
Àn
, 
vÆue
);

890 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
ASN1_PRINTABLE
)

892 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DIRECTORYSTRING
)

893 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DISPLAYTEXT
)

894 
DECLARE_ASN1_FUNCTIONS
(
ASN1_PRINTABLESTRING
)

895 
DECLARE_ASN1_FUNCTIONS
(
ASN1_T61STRING
)

896 
DECLARE_ASN1_FUNCTIONS
(
ASN1_IA5STRING
)

897 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALSTRING
)

898 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTCTIME
)

899 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALIZEDTIME
)

900 
DECLARE_ASN1_FUNCTIONS
(
ASN1_TIME
)

902 
DECLARE_ASN1_ITEM
(
ASN1_OCTET_STRING_NDEF
)

904 
ASN1_TIME
 *
ASN1_TIME_£t
(ASN1_TIME *
s
, 
time_t
 
t
);

905 
ASN1_TIME
 *
ASN1_TIME_adj
(ASN1_TIME *
s
, 
time_t
 
t
,

906 
off£t_day
, 
off£t_£c
);

907 
ASN1_TIME_check
(
ASN1_TIME
 *
t
);

908 
ASN1_GENERALIZEDTIME
 *
ASN1_TIME_to_gíîÆizedtime
(
ASN1_TIME
 *
t
, ASN1_GENERALIZEDTIME

909 **
out
);

910 
ASN1_TIME_£t_°rög
(
ASN1_TIME
 *
s
, c⁄° *
°r
);

912 
i2d_ASN1_SET
(
STACK_OF
(
OPENSSL_BLOCK
Ë*
a
, **
µ
,

913 
i2d_of_void
 *
i2d
, 
ex_èg
, 
ex_˛ass
, 
is_£t
);

914 
STACK_OF
(
OPENSSL_BLOCK
Ë*
d2i_ASN1_SET
(STACK_OF(OPENSSL_BLOCKË**
a
,

915 c⁄° **
µ
,

916 
Àngth
, 
d2i_of_void
 *
d2i
,

917 (*
‰ì_func
Ë(
OPENSSL_BLOCK
),

918 
ex_èg
, 
ex_˛ass
);

920 #i‚de‡
OPENSSL_NO_BIO


921 
i2a_ASN1_INTEGER
(
BIO
 *
bp
, 
ASN1_INTEGER
 *
a
);

922 
a2i_ASN1_INTEGER
(
BIO
 *
bp
, 
ASN1_INTEGER
 *
bs
, *
buf
, 
size
);

923 
i2a_ASN1_ENUMERATED
(
BIO
 *
bp
, 
ASN1_ENUMERATED
 *
a
);

924 
a2i_ASN1_ENUMERATED
(
BIO
 *
bp
, 
ASN1_ENUMERATED
 *
bs
, *
buf
, 
size
);

925 
i2a_ASN1_OBJECT
(
BIO
 *
bp
, 
ASN1_OBJECT
 *
a
);

926 
a2i_ASN1_STRING
(
BIO
 *
bp
, 
ASN1_STRING
 *
bs
, *
buf
, 
size
);

927 
i2a_ASN1_STRING
(
BIO
 *
bp
, 
ASN1_STRING
 *
a
, 
ty≥
);

929 
i2t_ASN1_OBJECT
(*
buf
, 
buf_Àn
, 
ASN1_OBJECT
 *
a
);

931 
a2d_ASN1_OBJECT
(*
out
, 
ﬁí
, c⁄° *
buf
, 
num
);

932 
ASN1_OBJECT
 *
ASN1_OBJECT_¸óã
(
nid
, *
d©a
, 
Àn
,

933 c⁄° *
¢
, c⁄° *
 
);

935 
ASN1_INTEGER_£t
(
ASN1_INTEGER
 *
a
, 
v
);

936 
ASN1_INTEGER_gë
(c⁄° 
ASN1_INTEGER
 *
a
);

937 
ASN1_INTEGER
 *
BN_to_ASN1_INTEGER
(c⁄° 
BIGNUM
 *
bn
, ASN1_INTEGER *
ai
);

938 
BIGNUM
 *
ASN1_INTEGER_to_BN
(c⁄° 
ASN1_INTEGER
 *
ai
, BIGNUM *
bn
);

940 
ASN1_ENUMERATED_£t
(
ASN1_ENUMERATED
 *
a
, 
v
);

941 
ASN1_ENUMERATED_gë
(
ASN1_ENUMERATED
 *
a
);

942 
ASN1_ENUMERATED
 *
BN_to_ASN1_ENUMERATED
(
BIGNUM
 *
bn
, ASN1_ENUMERATED *
ai
);

943 
BIGNUM
 *
ASN1_ENUMERATED_to_BN
(
ASN1_ENUMERATED
 *
ai
, BIGNUM *
bn
);

947 
ASN1_PRINTABLE_ty≥
(c⁄° *
s
, 
max
);

949 
i2d_ASN1_byãs
(
ASN1_STRING
 *
a
, **
µ
, 
èg
, 
x˛ass
);

950 
ASN1_STRING
 *
d2i_ASN1_byãs
(ASN1_STRING **
a
, c⁄° **
µ
,

951 
Àngth
, 
Pèg
, 
P˛ass
);

952 
ASN1_èg2bô
(
èg
);

954 
ASN1_STRING
 *
d2i_ASN1_ty≥_byãs
(ASN1_STRING **
a
, c⁄° **
µ
,

955 
Àngth
, 
ty≥
);

958 
a¢1_Föish
(
ASN1_CTX
 *
c
);

959 
a¢1_c⁄°_Föish
(
ASN1_c⁄°_CTX
 *
c
);

962 
ASN1_gë_obje˘
(c⁄° **
µ
, *
∂ígth
, *
±ag
,

963 *
p˛ass
, 
omax
);

964 
ASN1_check_öföôe_íd
(**
p
, 
Àn
);

965 
ASN1_c⁄°_check_öföôe_íd
(c⁄° **
p
, 
Àn
);

966 
ASN1_put_obje˘
(**
µ
, 
c⁄°ru˘ed
, 
Àngth
,

967 
èg
, 
x˛ass
);

968 
ASN1_put_eoc
(**
µ
);

969 
ASN1_obje˘_size
(
c⁄°ru˘ed
, 
Àngth
, 
èg
);

972 *
ASN1_dup
(
i2d_of_void
 *
i2d
, 
d2i_of_void
 *
d2i
, *
x
);

974 
	#ASN1_dup_of
(
ty≥
,
i2d
,
d2i
,
x
) \

975 ((
ty≥
*)
	`ASN1_dup
(
	`CHECKED_I2D_OF
—y≥, 
i2d
), \

976 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

977 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

979 
	#ASN1_dup_of_c⁄°
(
ty≥
,
i2d
,
d2i
,
x
) \

980 ((
ty≥
*)
	`ASN1_dup
(
	`CHECKED_I2D_OF
(c⁄°Åy≥, 
i2d
), \

981 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

982 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

984 *
ASN1_ôem_dup
(c⁄° 
ASN1_ITEM
 *
ô
, *
x
);

988 
	#M_ASN1_√w_of
(
ty≥
Ë—y≥ *)
	`ASN1_ôem_√w
(
	`ASN1_ITEM_Ωå
—y≥))

	)

989 
	#M_ASN1_‰ì_of
(
x
, 
ty≥
) \

990 
	`ASN1_ôem_‰ì
(
	`CHECKED_PTR_OF
(
ty≥
, 
x
), 
	`ASN1_ITEM_Ωå
—y≥))

	)

992 #i‚de‡
OPENSSL_NO_FP_API


993 *
ASN1_d2i_Â
(*(*
x√w
Ë(), 
d2i_of_void
 *
d2i
, 
FILE
 *
ö
, **
x
);

995 
	#ASN1_d2i_Â_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

996 ((
ty≥
*)
	`ASN1_d2i_Â
(
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

997 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

998 
ö
, \

999 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

1001 *
ASN1_ôem_d2i_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
ö
, *
x
);

1002 
ASN1_i2d_Â
(
i2d_of_void
 *
i2d
, 
FILE
 *
out
, *
x
);

1004 
	#ASN1_i2d_Â_of
(
ty≥
,
i2d
,
out
,
x
) \

1005 (
	`ASN1_i2d_Â
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

1006 
out
, \

1007 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

1009 
	#ASN1_i2d_Â_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
) \

1010 (
	`ASN1_i2d_Â
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d
), \

1011 
out
, \

1012 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

1014 
ASN1_ôem_i2d_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
out
, *
x
);

1015 
ASN1_STRING_¥öt_ex_Â
(
FILE
 *
Â
, 
ASN1_STRING
 *
°r
, 
Êags
);

1018 
ASN1_STRING_to_UTF8
(**
out
, 
ASN1_STRING
 *
ö
);

1020 #i‚de‡
OPENSSL_NO_BIO


1021 *
ASN1_d2i_bio
(*(*
x√w
Ë(), 
d2i_of_void
 *
d2i
, 
BIO
 *
ö
, **
x
);

1023 
	#ASN1_d2i_bio_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

1024 ((
ty≥
*)
	`ASN1_d2i_bio
–
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

1025 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

1026 
ö
, \

1027 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

1029 *
ASN1_ôem_d2i_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
ö
, *
x
);

1030 
ASN1_i2d_bio
(
i2d_of_void
 *
i2d
, 
BIO
 *
out
, *
x
);

1032 
	#ASN1_i2d_bio_of
(
ty≥
,
i2d
,
out
,
x
) \

1033 (
	`ASN1_i2d_bio
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

1034 
out
, \

1035 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

1037 
	#ASN1_i2d_bio_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
) \

1038 (
	`ASN1_i2d_bio
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d
), \

1039 
out
, \

1040 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

1042 
ASN1_ôem_i2d_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
out
, *
x
);

1043 
ASN1_UTCTIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_UTCTIME
 *
a
);

1044 
ASN1_GENERALIZEDTIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_GENERALIZEDTIME
 *
a
);

1045 
ASN1_TIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_TIME
 *
a
);

1046 
ASN1_STRING_¥öt
(
BIO
 *
bp
, c⁄° 
ASN1_STRING
 *
v
);

1047 
ASN1_STRING_¥öt_ex
(
BIO
 *
out
, 
ASN1_STRING
 *
°r
, 
Êags
);

1048 
ASN1_bn_¥öt
(
BIO
 *
bp
, c⁄° *
numbî
, c⁄° 
BIGNUM
 *
num
,

1049 *
buf
, 
off
);

1050 
ASN1_∑r£
(
BIO
 *
bp
, c⁄° *
µ
, 
Àn
, 
ödít
);

1051 
ASN1_∑r£_dump
(
BIO
 *
bp
, c⁄° *
µ
, 
Àn
, 
ödít
,

1052 
dump
);

1054 c⁄° *
ASN1_èg2°r
(
èg
);

1058 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_X509
)

1060 
ASN1_UNIVERSALSTRING_to_°rög
(
ASN1_UNIVERSALSTRING
 *
s
);

1062 
ASN1_TYPE_£t_o˘ë°rög
(
ASN1_TYPE
 *
a
, *
d©a
, 
Àn
);

1063 
ASN1_TYPE_gë_o˘ë°rög
(
ASN1_TYPE
 *
a
, *
d©a
, 
max_Àn
);

1064 
ASN1_TYPE_£t_öt_o˘ë°rög
(
ASN1_TYPE
 *
a
, 
num
,

1065 *
d©a
, 
Àn
);

1066 
ASN1_TYPE_gë_öt_o˘ë°rög
(
ASN1_TYPE
 *
a
, *
num
,

1067 *
d©a
, 
max_Àn
);

1069 
STACK_OF
(
OPENSSL_BLOCK
Ë*
ASN1_£q_u≈ack
(c⁄° *
buf
, 
Àn
,

1070 
d2i_of_void
 *
d2i
,

1071 (*
‰ì_func
Ë(
OPENSSL_BLOCK
));

1072 *
ASN1_£q_∑ck
(
STACK_OF
(
OPENSSL_BLOCK
Ë*
ß„s
, 
i2d_of_void
 *
i2d
,

1073 **
buf
, *
Àn
);

1074 *
ASN1_u≈ack_°rög
(
ASN1_STRING
 *
o˘
, 
d2i_of_void
 *
d2i
);

1075 *
ASN1_ôem_u≈ack
(
ASN1_STRING
 *
o˘
, c⁄° 
ASN1_ITEM
 *
ô
);

1076 
ASN1_STRING
 *
ASN1_∑ck_°rög
(*
obj
, 
i2d_of_void
 *
i2d
,

1077 
ASN1_OCTET_STRING
 **
o˘
);

1079 
	#ASN1_∑ck_°rög_of
(
ty≥
,
obj
,
i2d
,
o˘
) \

1080 (
	`ASN1_∑ck_°rög
(
	`CHECKED_PTR_OF
(
ty≥
, 
obj
), \

1081 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

1082 
o˘
))

	)

1084 
ASN1_STRING
 *
ASN1_ôem_∑ck
(*
obj
, c⁄° 
ASN1_ITEM
 *
ô
,

1085 
ASN1_OCTET_STRING
 **
o˘
);

1087 
ASN1_STRING_£t_deÁu…_mask
(
mask
);

1088 
ASN1_STRING_£t_deÁu…_mask_asc
(c⁄° *
p
);

1089 
ASN1_STRING_gë_deÁu…_mask
();

1090 
ASN1_mb°rög_c›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

1091 
öf‹m
, 
mask
);

1092 
ASN1_mb°rög_nc›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

1093 
öf‹m
, 
mask
,

1094 
mösize
, 
maxsize
);

1096 
ASN1_STRING
 *
ASN1_STRING_£t_by_NID
(ASN1_STRING **
out
,

1097 c⁄° *
ö
, 
öÀn
,

1098 
öf‹m
, 
nid
);

1099 
ASN1_STRING_TABLE
 *
ASN1_STRING_TABLE_gë
(
nid
);

1100 
ASN1_STRING_TABLE_add
(, , , , );

1101 
ASN1_STRING_TABLE_˛ónup
();

1106 
ASN1_VALUE
 *
ASN1_ôem_√w
(c⁄° 
ASN1_ITEM
 *
ô
);

1107 
ASN1_ôem_‰ì
(
ASN1_VALUE
 *
vÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

1108 
ASN1_VALUE
 *
ASN1_ôem_d2i
(ASN1_VALUE **
vÆ
, c⁄° **
ö
,

1109 
Àn
, c⁄° 
ASN1_ITEM
 *
ô
);

1110 
ASN1_ôem_i2d
(
ASN1_VALUE
 *
vÆ
, **
out
, c⁄° 
ASN1_ITEM
 *
ô
);

1111 
ASN1_ôem_ndef_i2d
(
ASN1_VALUE
 *
vÆ
, **
out
,

1112 c⁄° 
ASN1_ITEM
 *
ô
);

1114 
ASN1_add_oid_moduÀ
();

1116 
ASN1_TYPE
 *
ASN1_gíî©e_nc⁄f
(*
°r
, 
CONF
 *
nc⁄f
);

1117 
ASN1_TYPE
 *
ASN1_gíî©e_v3
(*
°r
, 
X509V3_CTX
 *
˙f
);

1122 
	#ASN1_PCTX_FLAGS_SHOW_ABSENT
 0x001

	)

1124 
	#ASN1_PCTX_FLAGS_SHOW_SEQUENCE
 0x002

	)

1126 
	#ASN1_PCTX_FLAGS_SHOW_SSOF
 0x004

	)

1128 
	#ASN1_PCTX_FLAGS_SHOW_TYPE
 0x008

	)

1130 
	#ASN1_PCTX_FLAGS_NO_ANY_TYPE
 0x010

	)

1132 
	#ASN1_PCTX_FLAGS_NO_MSTRING_TYPE
 0x020

	)

1134 
	#ASN1_PCTX_FLAGS_NO_FIELD_NAME
 0x040

	)

1136 
	#ASN1_PCTX_FLAGS_SHOW_FIELD_STRUCT_NAME
 0x080

	)

1138 
	#ASN1_PCTX_FLAGS_NO_STRUCT_NAME
 0x100

	)

1140 
ASN1_ôem_¥öt
(
BIO
 *
out
, 
ASN1_VALUE
 *
iÊd
, 
ödít
,

1141 c⁄° 
ASN1_ITEM
 *
ô
, c⁄° 
ASN1_PCTX
 *
p˘x
);

1142 
ASN1_PCTX
 *
ASN1_PCTX_√w
();

1143 
ASN1_PCTX_‰ì
(
ASN1_PCTX
 *
p
);

1144 
ASN1_PCTX_gë_Êags
(
ASN1_PCTX
 *
p
);

1145 
ASN1_PCTX_£t_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1146 
ASN1_PCTX_gë_nm_Êags
(
ASN1_PCTX
 *
p
);

1147 
ASN1_PCTX_£t_nm_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1148 
ASN1_PCTX_gë_˚π_Êags
(
ASN1_PCTX
 *
p
);

1149 
ASN1_PCTX_£t_˚π_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1150 
ASN1_PCTX_gë_oid_Êags
(
ASN1_PCTX
 *
p
);

1151 
ASN1_PCTX_£t_oid_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1152 
ASN1_PCTX_gë_°r_Êags
(
ASN1_PCTX
 *
p
);

1153 
ASN1_PCTX_£t_°r_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1155 
BIO_METHOD
 *
BIO_f_a¢1
();

1157 
BIO
 *
BIO_√w_NDEF
(BIO *
out
, 
ASN1_VALUE
 *
vÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

1159 
i2d_ASN1_bio_°ªam
(
BIO
 *
out
, 
ASN1_VALUE
 *
vÆ
, BIO *
ö
, 
Êags
,

1160 c⁄° 
ASN1_ITEM
 *
ô
);

1161 
PEM_wrôe_bio_ASN1_°ªam
(
BIO
 *
out
, 
ASN1_VALUE
 *
vÆ
, BIO *
ö
, 
Êags
,

1162 c⁄° *
hdr
, c⁄° 
ASN1_ITEM
 *
ô
);

1163 
SMIME_wrôe_ASN1
(
BIO
 *
bio
, 
ASN1_VALUE
 *
vÆ
, BIO *
d©a
, 
Êags
,

1164 
˘y≥_nid
, 
ec⁄t_nid
,

1165 
STACK_OF
(
X509_ALGOR
Ë*
mdÆgs
, c⁄° 
ASN1_ITEM
 *
ô
);

1166 
ASN1_VALUE
 *
SMIME_ªad_ASN1
(
BIO
 *
bio
, BIO **
bc⁄t
, c⁄° 
ASN1_ITEM
 *
ô
);

1167 
SMIME_¸lf_c›y
(
BIO
 *
ö
, BIO *
out
, 
Êags
);

1168 
SMIME_ãxt
(
BIO
 *
ö
, BIO *
out
);

1175 
ERR_lﬂd_ASN1_°rögs
();

1180 
	#ASN1_F_A2D_ASN1_OBJECT
 100

	)

1181 
	#ASN1_F_A2I_ASN1_ENUMERATED
 101

	)

1182 
	#ASN1_F_A2I_ASN1_INTEGER
 102

	)

1183 
	#ASN1_F_A2I_ASN1_STRING
 103

	)

1184 
	#ASN1_F_APPEND_EXP
 176

	)

1185 
	#ASN1_F_ASN1_BIT_STRING_SET_BIT
 183

	)

1186 
	#ASN1_F_ASN1_CB
 177

	)

1187 
	#ASN1_F_ASN1_CHECK_TLEN
 104

	)

1188 
	#ASN1_F_ASN1_COLLATE_PRIMITIVE
 105

	)

1189 
	#ASN1_F_ASN1_COLLECT
 106

	)

1190 
	#ASN1_F_ASN1_D2I_EX_PRIMITIVE
 108

	)

1191 
	#ASN1_F_ASN1_D2I_FP
 109

	)

1192 
	#ASN1_F_ASN1_D2I_READ_BIO
 107

	)

1193 
	#ASN1_F_ASN1_DIGEST
 184

	)

1194 
	#ASN1_F_ASN1_DO_ADB
 110

	)

1195 
	#ASN1_F_ASN1_DUP
 111

	)

1196 
	#ASN1_F_ASN1_ENUMERATED_SET
 112

	)

1197 
	#ASN1_F_ASN1_ENUMERATED_TO_BN
 113

	)

1198 
	#ASN1_F_ASN1_EX_C2I
 204

	)

1199 
	#ASN1_F_ASN1_FIND_END
 190

	)

1200 
	#ASN1_F_ASN1_GENERALIZEDTIME_ADJ
 216

	)

1201 
	#ASN1_F_ASN1_GENERALIZEDTIME_SET
 185

	)

1202 
	#ASN1_F_ASN1_GENERATE_V3
 178

	)

1203 
	#ASN1_F_ASN1_GET_OBJECT
 114

	)

1204 
	#ASN1_F_ASN1_HEADER_NEW
 115

	)

1205 
	#ASN1_F_ASN1_I2D_BIO
 116

	)

1206 
	#ASN1_F_ASN1_I2D_FP
 117

	)

1207 
	#ASN1_F_ASN1_INTEGER_SET
 118

	)

1208 
	#ASN1_F_ASN1_INTEGER_TO_BN
 119

	)

1209 
	#ASN1_F_ASN1_ITEM_D2I_FP
 206

	)

1210 
	#ASN1_F_ASN1_ITEM_DUP
 191

	)

1211 
	#ASN1_F_ASN1_ITEM_EX_COMBINE_NEW
 121

	)

1212 
	#ASN1_F_ASN1_ITEM_EX_D2I
 120

	)

1213 
	#ASN1_F_ASN1_ITEM_I2D_BIO
 192

	)

1214 
	#ASN1_F_ASN1_ITEM_I2D_FP
 193

	)

1215 
	#ASN1_F_ASN1_ITEM_PACK
 198

	)

1216 
	#ASN1_F_ASN1_ITEM_SIGN
 195

	)

1217 
	#ASN1_F_ASN1_ITEM_SIGN_CTX
 220

	)

1218 
	#ASN1_F_ASN1_ITEM_UNPACK
 199

	)

1219 
	#ASN1_F_ASN1_ITEM_VERIFY
 197

	)

1220 
	#ASN1_F_ASN1_MBSTRING_NCOPY
 122

	)

1221 
	#ASN1_F_ASN1_OBJECT_NEW
 123

	)

1222 
	#ASN1_F_ASN1_OUTPUT_DATA
 214

	)

1223 
	#ASN1_F_ASN1_PACK_STRING
 124

	)

1224 
	#ASN1_F_ASN1_PCTX_NEW
 205

	)

1225 
	#ASN1_F_ASN1_PKCS5_PBE_SET
 125

	)

1226 
	#ASN1_F_ASN1_SEQ_PACK
 126

	)

1227 
	#ASN1_F_ASN1_SEQ_UNPACK
 127

	)

1228 
	#ASN1_F_ASN1_SIGN
 128

	)

1229 
	#ASN1_F_ASN1_STR2TYPE
 179

	)

1230 
	#ASN1_F_ASN1_STRING_SET
 186

	)

1231 
	#ASN1_F_ASN1_STRING_TABLE_ADD
 129

	)

1232 
	#ASN1_F_ASN1_STRING_TYPE_NEW
 130

	)

1233 
	#ASN1_F_ASN1_TEMPLATE_EX_D2I
 132

	)

1234 
	#ASN1_F_ASN1_TEMPLATE_NEW
 133

	)

1235 
	#ASN1_F_ASN1_TEMPLATE_NOEXP_D2I
 131

	)

1236 
	#ASN1_F_ASN1_TIME_ADJ
 217

	)

1237 
	#ASN1_F_ASN1_TIME_SET
 175

	)

1238 
	#ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING
 134

	)

1239 
	#ASN1_F_ASN1_TYPE_GET_OCTETSTRING
 135

	)

1240 
	#ASN1_F_ASN1_UNPACK_STRING
 136

	)

1241 
	#ASN1_F_ASN1_UTCTIME_ADJ
 218

	)

1242 
	#ASN1_F_ASN1_UTCTIME_SET
 187

	)

1243 
	#ASN1_F_ASN1_VERIFY
 137

	)

1244 
	#ASN1_F_B64_READ_ASN1
 209

	)

1245 
	#ASN1_F_B64_WRITE_ASN1
 210

	)

1246 
	#ASN1_F_BIO_NEW_NDEF
 208

	)

1247 
	#ASN1_F_BITSTR_CB
 180

	)

1248 
	#ASN1_F_BN_TO_ASN1_ENUMERATED
 138

	)

1249 
	#ASN1_F_BN_TO_ASN1_INTEGER
 139

	)

1250 
	#ASN1_F_C2I_ASN1_BIT_STRING
 189

	)

1251 
	#ASN1_F_C2I_ASN1_INTEGER
 194

	)

1252 
	#ASN1_F_C2I_ASN1_OBJECT
 196

	)

1253 
	#ASN1_F_COLLECT_DATA
 140

	)

1254 
	#ASN1_F_D2I_ASN1_BIT_STRING
 141

	)

1255 
	#ASN1_F_D2I_ASN1_BOOLEAN
 142

	)

1256 
	#ASN1_F_D2I_ASN1_BYTES
 143

	)

1257 
	#ASN1_F_D2I_ASN1_GENERALIZEDTIME
 144

	)

1258 
	#ASN1_F_D2I_ASN1_HEADER
 145

	)

1259 
	#ASN1_F_D2I_ASN1_INTEGER
 146

	)

1260 
	#ASN1_F_D2I_ASN1_OBJECT
 147

	)

1261 
	#ASN1_F_D2I_ASN1_SET
 148

	)

1262 
	#ASN1_F_D2I_ASN1_TYPE_BYTES
 149

	)

1263 
	#ASN1_F_D2I_ASN1_UINTEGER
 150

	)

1264 
	#ASN1_F_D2I_ASN1_UTCTIME
 151

	)

1265 
	#ASN1_F_D2I_AUTOPRIVATEKEY
 207

	)

1266 
	#ASN1_F_D2I_NETSCAPE_RSA
 152

	)

1267 
	#ASN1_F_D2I_NETSCAPE_RSA_2
 153

	)

1268 
	#ASN1_F_D2I_PRIVATEKEY
 154

	)

1269 
	#ASN1_F_D2I_PUBLICKEY
 155

	)

1270 
	#ASN1_F_D2I_RSA_NET
 200

	)

1271 
	#ASN1_F_D2I_RSA_NET_2
 201

	)

1272 
	#ASN1_F_D2I_X509
 156

	)

1273 
	#ASN1_F_D2I_X509_CINF
 157

	)

1274 
	#ASN1_F_D2I_X509_PKEY
 159

	)

1275 
	#ASN1_F_I2D_ASN1_BIO_STREAM
 211

	)

1276 
	#ASN1_F_I2D_ASN1_SET
 188

	)

1277 
	#ASN1_F_I2D_ASN1_TIME
 160

	)

1278 
	#ASN1_F_I2D_DSA_PUBKEY
 161

	)

1279 
	#ASN1_F_I2D_EC_PUBKEY
 181

	)

1280 
	#ASN1_F_I2D_PRIVATEKEY
 163

	)

1281 
	#ASN1_F_I2D_PUBLICKEY
 164

	)

1282 
	#ASN1_F_I2D_RSA_NET
 162

	)

1283 
	#ASN1_F_I2D_RSA_PUBKEY
 165

	)

1284 
	#ASN1_F_LONG_C2I
 166

	)

1285 
	#ASN1_F_OID_MODULE_INIT
 174

	)

1286 
	#ASN1_F_PARSE_TAGGING
 182

	)

1287 
	#ASN1_F_PKCS5_PBE2_SET_IV
 167

	)

1288 
	#ASN1_F_PKCS5_PBE_SET
 202

	)

1289 
	#ASN1_F_PKCS5_PBE_SET0_ALGOR
 215

	)

1290 
	#ASN1_F_PKCS5_PBKDF2_SET
 219

	)

1291 
	#ASN1_F_SMIME_READ_ASN1
 212

	)

1292 
	#ASN1_F_SMIME_TEXT
 213

	)

1293 
	#ASN1_F_X509_CINF_NEW
 168

	)

1294 
	#ASN1_F_X509_CRL_ADD0_REVOKED
 169

	)

1295 
	#ASN1_F_X509_INFO_NEW
 170

	)

1296 
	#ASN1_F_X509_NAME_ENCODE
 203

	)

1297 
	#ASN1_F_X509_NAME_EX_D2I
 158

	)

1298 
	#ASN1_F_X509_NAME_EX_NEW
 171

	)

1299 
	#ASN1_F_X509_NEW
 172

	)

1300 
	#ASN1_F_X509_PKEY_NEW
 173

	)

1303 
	#ASN1_R_ADDING_OBJECT
 171

	)

1304 
	#ASN1_R_ASN1_PARSE_ERROR
 203

	)

1305 
	#ASN1_R_ASN1_SIG_PARSE_ERROR
 204

	)

1306 
	#ASN1_R_AUX_ERROR
 100

	)

1307 
	#ASN1_R_BAD_CLASS
 101

	)

1308 
	#ASN1_R_BAD_OBJECT_HEADER
 102

	)

1309 
	#ASN1_R_BAD_PASSWORD_READ
 103

	)

1310 
	#ASN1_R_BAD_TAG
 104

	)

1311 
	#ASN1_R_BMPSTRING_IS_WRONG_LENGTH
 214

	)

1312 
	#ASN1_R_BN_LIB
 105

	)

1313 
	#ASN1_R_BOOLEAN_IS_WRONG_LENGTH
 106

	)

1314 
	#ASN1_R_BUFFER_TOO_SMALL
 107

	)

1315 
	#ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 108

	)

1316 
	#ASN1_R_CONTEXT_NOT_INITIALISED
 217

	)

1317 
	#ASN1_R_DATA_IS_WRONG
 109

	)

1318 
	#ASN1_R_DECODE_ERROR
 110

	)

1319 
	#ASN1_R_DECODING_ERROR
 111

	)

1320 
	#ASN1_R_DEPTH_EXCEEDED
 174

	)

1321 
	#ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED
 198

	)

1322 
	#ASN1_R_ENCODE_ERROR
 112

	)

1323 
	#ASN1_R_ERROR_GETTING_TIME
 173

	)

1324 
	#ASN1_R_ERROR_LOADING_SECTION
 172

	)

1325 
	#ASN1_R_ERROR_PARSING_SET_ELEMENT
 113

	)

1326 
	#ASN1_R_ERROR_SETTING_CIPHER_PARAMS
 114

	)

1327 
	#ASN1_R_EXPECTING_AN_INTEGER
 115

	)

1328 
	#ASN1_R_EXPECTING_AN_OBJECT
 116

	)

1329 
	#ASN1_R_EXPECTING_A_BOOLEAN
 117

	)

1330 
	#ASN1_R_EXPECTING_A_TIME
 118

	)

1331 
	#ASN1_R_EXPLICIT_LENGTH_MISMATCH
 119

	)

1332 
	#ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED
 120

	)

1333 
	#ASN1_R_FIELD_MISSING
 121

	)

1334 
	#ASN1_R_FIRST_NUM_TOO_LARGE
 122

	)

1335 
	#ASN1_R_HEADER_TOO_LONG
 123

	)

1336 
	#ASN1_R_ILLEGAL_BITSTRING_FORMAT
 175

	)

1337 
	#ASN1_R_ILLEGAL_BOOLEAN
 176

	)

1338 
	#ASN1_R_ILLEGAL_CHARACTERS
 124

	)

1339 
	#ASN1_R_ILLEGAL_FORMAT
 177

	)

1340 
	#ASN1_R_ILLEGAL_HEX
 178

	)

1341 
	#ASN1_R_ILLEGAL_IMPLICIT_TAG
 179

	)

1342 
	#ASN1_R_ILLEGAL_INTEGER
 180

	)

1343 
	#ASN1_R_ILLEGAL_NESTED_TAGGING
 181

	)

1344 
	#ASN1_R_ILLEGAL_NULL
 125

	)

1345 
	#ASN1_R_ILLEGAL_NULL_VALUE
 182

	)

1346 
	#ASN1_R_ILLEGAL_OBJECT
 183

	)

1347 
	#ASN1_R_ILLEGAL_OPTIONAL_ANY
 126

	)

1348 
	#ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE
 170

	)

1349 
	#ASN1_R_ILLEGAL_TAGGED_ANY
 127

	)

1350 
	#ASN1_R_ILLEGAL_TIME_VALUE
 184

	)

1351 
	#ASN1_R_INTEGER_NOT_ASCII_FORMAT
 185

	)

1352 
	#ASN1_R_INTEGER_TOO_LARGE_FOR_LONG
 128

	)

1353 
	#ASN1_R_INVALID_BIT_STRING_BITS_LEFT
 220

	)

1354 
	#ASN1_R_INVALID_BMPSTRING_LENGTH
 129

	)

1355 
	#ASN1_R_INVALID_DIGIT
 130

	)

1356 
	#ASN1_R_INVALID_MIME_TYPE
 205

	)

1357 
	#ASN1_R_INVALID_MODIFIER
 186

	)

1358 
	#ASN1_R_INVALID_NUMBER
 187

	)

1359 
	#ASN1_R_INVALID_OBJECT_ENCODING
 216

	)

1360 
	#ASN1_R_INVALID_SEPARATOR
 131

	)

1361 
	#ASN1_R_INVALID_TIME_FORMAT
 132

	)

1362 
	#ASN1_R_INVALID_UNIVERSALSTRING_LENGTH
 133

	)

1363 
	#ASN1_R_INVALID_UTF8STRING
 134

	)

1364 
	#ASN1_R_IV_TOO_LARGE
 135

	)

1365 
	#ASN1_R_LENGTH_ERROR
 136

	)

1366 
	#ASN1_R_LIST_ERROR
 188

	)

1367 
	#ASN1_R_MIME_NO_CONTENT_TYPE
 206

	)

1368 
	#ASN1_R_MIME_PARSE_ERROR
 207

	)

1369 
	#ASN1_R_MIME_SIG_PARSE_ERROR
 208

	)

1370 
	#ASN1_R_MISSING_EOC
 137

	)

1371 
	#ASN1_R_MISSING_SECOND_NUMBER
 138

	)

1372 
	#ASN1_R_MISSING_VALUE
 189

	)

1373 
	#ASN1_R_MSTRING_NOT_UNIVERSAL
 139

	)

1374 
	#ASN1_R_MSTRING_WRONG_TAG
 140

	)

1375 
	#ASN1_R_NESTED_ASN1_STRING
 197

	)

1376 
	#ASN1_R_NON_HEX_CHARACTERS
 141

	)

1377 
	#ASN1_R_NOT_ASCII_FORMAT
 190

	)

1378 
	#ASN1_R_NOT_ENOUGH_DATA
 142

	)

1379 
	#ASN1_R_NO_CONTENT_TYPE
 209

	)

1380 
	#ASN1_R_NO_DEFAULT_DIGEST
 201

	)

1381 
	#ASN1_R_NO_MATCHING_CHOICE_TYPE
 143

	)

1382 
	#ASN1_R_NO_MULTIPART_BODY_FAILURE
 210

	)

1383 
	#ASN1_R_NO_MULTIPART_BOUNDARY
 211

	)

1384 
	#ASN1_R_NO_SIG_CONTENT_TYPE
 212

	)

1385 
	#ASN1_R_NULL_IS_WRONG_LENGTH
 144

	)

1386 
	#ASN1_R_OBJECT_NOT_ASCII_FORMAT
 191

	)

1387 
	#ASN1_R_ODD_NUMBER_OF_CHARS
 145

	)

1388 
	#ASN1_R_PRIVATE_KEY_HEADER_MISSING
 146

	)

1389 
	#ASN1_R_SECOND_NUMBER_TOO_LARGE
 147

	)

1390 
	#ASN1_R_SEQUENCE_LENGTH_MISMATCH
 148

	)

1391 
	#ASN1_R_SEQUENCE_NOT_CONSTRUCTED
 149

	)

1392 
	#ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG
 192

	)

1393 
	#ASN1_R_SHORT_LINE
 150

	)

1394 
	#ASN1_R_SIG_INVALID_MIME_TYPE
 213

	)

1395 
	#ASN1_R_STREAMING_NOT_SUPPORTED
 202

	)

1396 
	#ASN1_R_STRING_TOO_LONG
 151

	)

1397 
	#ASN1_R_STRING_TOO_SHORT
 152

	)

1398 
	#ASN1_R_TAG_VALUE_TOO_HIGH
 153

	)

1399 
	#ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 154

	)

1400 
	#ASN1_R_TIME_NOT_ASCII_FORMAT
 193

	)

1401 
	#ASN1_R_TOO_LONG
 155

	)

1402 
	#ASN1_R_TYPE_NOT_CONSTRUCTED
 156

	)

1403 
	#ASN1_R_TYPE_NOT_PRIMITIVE
 218

	)

1404 
	#ASN1_R_UNABLE_TO_DECODE_RSA_KEY
 157

	)

1405 
	#ASN1_R_UNABLE_TO_DECODE_RSA_PRIVATE_KEY
 158

	)

1406 
	#ASN1_R_UNEXPECTED_EOC
 159

	)

1407 
	#ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH
 215

	)

1408 
	#ASN1_R_UNKNOWN_FORMAT
 160

	)

1409 
	#ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM
 161

	)

1410 
	#ASN1_R_UNKNOWN_OBJECT_TYPE
 162

	)

1411 
	#ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE
 163

	)

1412 
	#ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM
 199

	)

1413 
	#ASN1_R_UNKNOWN_TAG
 194

	)

1414 
	#ASN1_R_UNKOWN_FORMAT
 195

	)

1415 
	#ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE
 164

	)

1416 
	#ASN1_R_UNSUPPORTED_CIPHER
 165

	)

1417 
	#ASN1_R_UNSUPPORTED_ENCRYPTION_ALGORITHM
 166

	)

1418 
	#ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE
 167

	)

1419 
	#ASN1_R_UNSUPPORTED_TYPE
 196

	)

1420 
	#ASN1_R_WRONG_PUBLIC_KEY_TYPE
 200

	)

1421 
	#ASN1_R_WRONG_TAG
 168

	)

1422 
	#ASN1_R_WRONG_TYPE
 169

	)

1424 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/async.h

10 
	~<°dlib.h
>

12 #i‚de‡
HEADER_ASYNC_H


13 
	#HEADER_ASYNC_H


	)

15 #i‡
deföed
(
_WIN32
)

16 
	~<wödows.h
>

17 
	#OSSL_ASYNC_FD
 
HANDLE


	)

18 
	#OSSL_BAD_ASYNC_FD
 
INVALID_HANDLE_VALUE


	)

20 
	#OSSL_ASYNC_FD
 

	)

21 
	#OSSL_BAD_ASYNC_FD
 -1

	)

25 #ifde‡ 
__˝lu•lus


29 
async_job_°
 
	tASYNC_JOB
;

30 
async_waô_˘x_°
 
	tASYNC_WAIT_CTX
;

32 
	#ASYNC_ERR
 0

	)

33 
	#ASYNC_NO_JOBS
 1

	)

34 
	#ASYNC_PAUSE
 2

	)

35 
	#ASYNC_FINISH
 3

	)

37 
ASYNC_öô_thªad
(
size_t
 
max_size
, size_à
öô_size
);

38 
ASYNC_˛ónup_thªad
();

40 
ASYNC_WAIT_CTX
 *
ASYNC_WAIT_CTX_√w
();

41 
ASYNC_WAIT_CTX_‰ì
(
ASYNC_WAIT_CTX
 *
˘x
);

42 
ASYNC_WAIT_CTX_£t_waô_fd
(
ASYNC_WAIT_CTX
 *
˘x
, c⁄° *
key
,

43 
OSSL_ASYNC_FD
 
fd
,

44 *
cu°om_d©a
,

45 (*
˛ónup
)(
ASYNC_WAIT_CTX
 *, const *,

46 
OSSL_ASYNC_FD
, *));

47 
ASYNC_WAIT_CTX_gë_fd
(
ASYNC_WAIT_CTX
 *
˘x
, c⁄° *
key
,

48 
OSSL_ASYNC_FD
 *
fd
, **
cu°om_d©a
);

49 
ASYNC_WAIT_CTX_gë_Æl_fds
(
ASYNC_WAIT_CTX
 *
˘x
, 
OSSL_ASYNC_FD
 *
fd
,

50 
size_t
 *
numfds
);

51 
ASYNC_WAIT_CTX_gë_ch™ged_fds
(
ASYNC_WAIT_CTX
 *
˘x
, 
OSSL_ASYNC_FD
 *
addfd
,

52 
size_t
 *
numaddfds
, 
OSSL_ASYNC_FD
 *
dñfd
,

53 
size_t
 *
numdñfds
);

54 
ASYNC_WAIT_CTX_˛ór_fd
(
ASYNC_WAIT_CTX
 *
˘x
, c⁄° *
key
);

56 
ASYNC_is_ˇ∑bÀ
();

58 
ASYNC_°¨t_job
(
ASYNC_JOB
 **
job
, 
ASYNC_WAIT_CTX
 *
˘x
, *
ªt
,

59 (*
func
)(*), *
¨gs
, 
size_t
 
size
);

60 
ASYNC_∑u£_job
();

62 
ASYNC_JOB
 *
ASYNC_gë_cuºít_job
();

63 
ASYNC_WAIT_CTX
 *
ASYNC_gë_waô_˘x
(
ASYNC_JOB
 *
job
);

64 
ASYNC_block_∑u£
();

65 
ASYNC_unblock_∑u£
();

73 
ERR_lﬂd_ASYNC_°rögs
();

78 
	#ASYNC_F_ASYNC_CTX_NEW
 100

	)

79 
	#ASYNC_F_ASYNC_INIT_THREAD
 101

	)

80 
	#ASYNC_F_ASYNC_JOB_NEW
 102

	)

81 
	#ASYNC_F_ASYNC_PAUSE_JOB
 103

	)

82 
	#ASYNC_F_ASYNC_START_FUNC
 104

	)

83 
	#ASYNC_F_ASYNC_START_JOB
 105

	)

86 
	#ASYNC_R_FAILED_TO_SET_POOL
 101

	)

87 
	#ASYNC_R_FAILED_TO_SWAP_CONTEXT
 102

	)

88 
	#ASYNC_R_INIT_FAILED
 105

	)

89 
	#ASYNC_R_INVALID_POOL_SIZE
 103

	)

91 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/bio.h

59 #i‚de‡
HEADER_BIO_H


60 
	#HEADER_BIO_H


	)

62 
	~<›ís¶/e_os2.h
>

64 #i‚de‡
OPENSSL_NO_FP_API


65 
	~<°dio.h
>

67 
	~<°d¨g.h
>

69 
	~<›ís¶/¸y±o.h
>

71 #i‚de‡
OPENSSL_NO_SCTP


72 #i‚de‡
OPENSSL_SYS_VMS


73 
	~<°döt.h
>

75 
	~<öây≥s.h
>

79 #ifde‡ 
__˝lu•lus


84 
	#BIO_TYPE_NONE
 0

	)

85 
	#BIO_TYPE_MEM
 (1|0x0400)

	)

86 
	#BIO_TYPE_FILE
 (2|0x0400)

	)

88 
	#BIO_TYPE_FD
 (4|0x0400|0x0100)

	)

89 
	#BIO_TYPE_SOCKET
 (5|0x0400|0x0100)

	)

90 
	#BIO_TYPE_NULL
 (6|0x0400)

	)

91 
	#BIO_TYPE_SSL
 (7|0x0200)

	)

92 
	#BIO_TYPE_MD
 (8|0x0200)

	)

93 
	#BIO_TYPE_BUFFER
 (9|0x0200)

	)

94 
	#BIO_TYPE_CIPHER
 (10|0x0200)

	)

95 
	#BIO_TYPE_BASE64
 (11|0x0200)

	)

96 
	#BIO_TYPE_CONNECT
 (12|0x0400|0x0100)

	)

97 
	#BIO_TYPE_ACCEPT
 (13|0x0400|0x0100)

	)

98 
	#BIO_TYPE_PROXY_CLIENT
 (14|0x0200)

	)

99 
	#BIO_TYPE_PROXY_SERVER
 (15|0x0200)

	)

100 
	#BIO_TYPE_NBIO_TEST
 (16|0x0200)

	)

101 
	#BIO_TYPE_NULL_FILTER
 (17|0x0200)

	)

102 
	#BIO_TYPE_BER
 (18|0x0200)

	)

103 
	#BIO_TYPE_BIO
 (19|0x0400)

	)

104 
	#BIO_TYPE_LINEBUFFER
 (20|0x0200)

	)

105 
	#BIO_TYPE_DGRAM
 (21|0x0400|0x0100)

	)

106 #i‚de‡
OPENSSL_NO_SCTP


107 
	#BIO_TYPE_DGRAM_SCTP
 (24|0x0400|0x0100)

	)

109 
	#BIO_TYPE_ASN1
 (22|0x0200)

	)

110 
	#BIO_TYPE_COMP
 (23|0x0200)

	)

112 
	#BIO_TYPE_DESCRIPTOR
 0x0100

	)

113 
	#BIO_TYPE_FILTER
 0x0200

	)

114 
	#BIO_TYPE_SOURCE_SINK
 0x0400

	)

120 
	#BIO_NOCLOSE
 0x00

	)

121 
	#BIO_CLOSE
 0x01

	)

126 
	#BIO_CTRL_RESET
 1

	)

127 
	#BIO_CTRL_EOF
 2

	)

128 
	#BIO_CTRL_INFO
 3

	)

129 
	#BIO_CTRL_SET
 4

	)

130 
	#BIO_CTRL_GET
 5

	)

131 
	#BIO_CTRL_PUSH
 6

	)

132 
	#BIO_CTRL_POP
 7

	)

133 
	#BIO_CTRL_GET_CLOSE
 8

	)

134 
	#BIO_CTRL_SET_CLOSE
 9

	)

135 
	#BIO_CTRL_PENDING
 10

	)

136 
	#BIO_CTRL_FLUSH
 11

	)

137 
	#BIO_CTRL_DUP
 12

	)

138 
	#BIO_CTRL_WPENDING
 13

	)

140 
	#BIO_CTRL_SET_CALLBACK
 14

	)

141 
	#BIO_CTRL_GET_CALLBACK
 15

	)

143 
	#BIO_CTRL_SET_FILENAME
 30

	)

146 
	#BIO_CTRL_DGRAM_CONNECT
 31

	)

147 
	#BIO_CTRL_DGRAM_SET_CONNECTED
 32

	)

149 
	#BIO_CTRL_DGRAM_SET_RECV_TIMEOUT
 33

	)

150 
	#BIO_CTRL_DGRAM_GET_RECV_TIMEOUT
 34

	)

151 
	#BIO_CTRL_DGRAM_SET_SEND_TIMEOUT
 35

	)

152 
	#BIO_CTRL_DGRAM_GET_SEND_TIMEOUT
 36

	)

154 
	#BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
 37

	)

155 
	#BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
 38

	)

158 
	#BIO_CTRL_DGRAM_MTU_DISCOVER
 39

	)

161 
	#BIO_CTRL_DGRAM_QUERY_MTU
 40

	)

162 
	#BIO_CTRL_DGRAM_GET_FALLBACK_MTU
 47

	)

163 
	#BIO_CTRL_DGRAM_GET_MTU
 41

	)

164 
	#BIO_CTRL_DGRAM_SET_MTU
 42

	)

168 
	#BIO_CTRL_DGRAM_MTU_EXCEEDED
 43

	)

172 
	#BIO_CTRL_DGRAM_GET_PEER
 46

	)

173 
	#BIO_CTRL_DGRAM_SET_PEER
 44

	)

175 
	#BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT
 45

	)

177 
	#BIO_CTRL_DGRAM_SET_DONT_FRAG
 48

	)

179 
	#BIO_CTRL_DGRAM_GET_MTU_OVERHEAD
 49

	)

181 #i‚de‡
OPENSSL_NO_SCTP


183 
	#BIO_CTRL_DGRAM_SCTP_SET_IN_HANDSHAKE
 50

	)

184 
	#BIO_CTRL_DGRAM_SCTP_ADD_AUTH_KEY
 51

	)

185 
	#BIO_CTRL_DGRAM_SCTP_NEXT_AUTH_KEY
 52

	)

186 
	#BIO_CTRL_DGRAM_SCTP_AUTH_CCS_RCVD
 53

	)

187 
	#BIO_CTRL_DGRAM_SCTP_GET_SNDINFO
 60

	)

188 
	#BIO_CTRL_DGRAM_SCTP_SET_SNDINFO
 61

	)

189 
	#BIO_CTRL_DGRAM_SCTP_GET_RCVINFO
 62

	)

190 
	#BIO_CTRL_DGRAM_SCTP_SET_RCVINFO
 63

	)

191 
	#BIO_CTRL_DGRAM_SCTP_GET_PRINFO
 64

	)

192 
	#BIO_CTRL_DGRAM_SCTP_SET_PRINFO
 65

	)

193 
	#BIO_CTRL_DGRAM_SCTP_SAVE_SHUTDOWN
 70

	)

197 
	#BIO_FP_READ
 0x02

	)

198 
	#BIO_FP_WRITE
 0x04

	)

199 
	#BIO_FP_APPEND
 0x08

	)

200 
	#BIO_FP_TEXT
 0x10

	)

202 
	#BIO_FLAGS_READ
 0x01

	)

203 
	#BIO_FLAGS_WRITE
 0x02

	)

204 
	#BIO_FLAGS_IO_SPECIAL
 0x04

	)

205 
	#BIO_FLAGS_RWS
 (
BIO_FLAGS_READ
|
BIO_FLAGS_WRITE
|
BIO_FLAGS_IO_SPECIAL
)

	)

206 
	#BIO_FLAGS_SHOULD_RETRY
 0x08

	)

207 #i‚de‡
BIO_FLAGS_UPLINK


212 
	#BIO_FLAGS_UPLINK
 0

	)

216 
	#BIO_GHBN_CTRL_HITS
 1

	)

217 
	#BIO_GHBN_CTRL_MISSES
 2

	)

218 
	#BIO_GHBN_CTRL_CACHE_SIZE
 3

	)

219 
	#BIO_GHBN_CTRL_GET_ENTRY
 4

	)

220 
	#BIO_GHBN_CTRL_FLUSH
 5

	)

230 
	#BIO_FLAGS_BASE64_NO_NL
 0x100

	)

236 
	#BIO_FLAGS_MEM_RDONLY
 0x200

	)

238 
bio_°
 
	tBIO
;

240 
BIO_£t_Êags
(
BIO
 *
b
, 
Êags
);

241 
BIO_ã°_Êags
(c⁄° 
BIO
 *
b
, 
Êags
);

242 
BIO_˛ór_Êags
(
BIO
 *
b
, 
Êags
);

244 
	#BIO_gë_Êags
(
b
Ë
	`BIO_ã°_Êags
(b, ~(0x0))

	)

245 
	#BIO_£t_ªåy_•ecül
(
b
) \

246 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_IO_SPECIAL
|
BIO_FLAGS_SHOULD_RETRY
))

	)

247 
	#BIO_£t_ªåy_ªad
(
b
) \

248 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_READ
|
BIO_FLAGS_SHOULD_RETRY
))

	)

249 
	#BIO_£t_ªåy_wrôe
(
b
) \

250 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_WRITE
|
BIO_FLAGS_SHOULD_RETRY
))

	)

253 
	#BIO_˛ór_ªåy_Êags
(
b
) \

254 
	`BIO_˛ór_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

255 
	#BIO_gë_ªåy_Êags
(
b
) \

256 
	`BIO_ã°_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

259 
	#BIO_should_ªad
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_READ
)

	)

260 
	#BIO_should_wrôe
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_WRITE
)

	)

261 
	#BIO_should_io_•ecül
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_IO_SPECIAL
)

	)

262 
	#BIO_ªåy_ty≥
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_RWS
)

	)

263 
	#BIO_should_ªåy
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_SHOULD_RETRY
)

	)

275 
	#BIO_RR_SSL_X509_LOOKUP
 0x01

	)

277 
	#BIO_RR_CONNECT
 0x02

	)

279 
	#BIO_RR_ACCEPT
 0x03

	)

282 
	#BIO_CB_FREE
 0x01

	)

283 
	#BIO_CB_READ
 0x02

	)

284 
	#BIO_CB_WRITE
 0x03

	)

285 
	#BIO_CB_PUTS
 0x04

	)

286 
	#BIO_CB_GETS
 0x05

	)

287 
	#BIO_CB_CTRL
 0x06

	)

293 
	#BIO_CB_RETURN
 0x80

	)

294 
	#BIO_CB_ªtu∫
(
a
Ë(◊)|
BIO_CB_RETURN
)

	)

295 
	#BIO_cb_¥e
(
a
Ë(!(◊)&
BIO_CB_RETURN
))

	)

296 
	#BIO_cb_po°
(
a
Ë(◊)&
BIO_CB_RETURN
)

	)

298 (*
BIO_gë_ˇŒback
(c⁄° 
BIO
 *
b
)Ë(
bio_°
 *, , const *,

300 
BIO_£t_ˇŒback
(
BIO
 *
b
,

301 (*
ˇŒback
Ë(
bio_°
 *, , const *,

303 *
BIO_gë_ˇŒback_¨g
(c⁄° 
BIO
 *
b
);

304 
BIO_£t_ˇŒback_¨g
(
BIO
 *
b
, *
¨g
);

306 c⁄° *
BIO_mëhod_«me
(c⁄° 
BIO
 *
b
);

307 
BIO_mëhod_ty≥
(c⁄° 
BIO
 *
b
);

309 
	tbio_öfo_cb
 (
	tbio_°
 *, , const *, , ,

312 
	sbio_mëhod_°
 {

313 
ty≥
;

314 c⁄° *
«me
;

315 (*
bwrôe
Ë(
BIO
 *, const *, );

316 (*
bªad
Ë(
BIO
 *, *, );

317 (*
bputs
Ë(
BIO
 *, const *);

318 (*
bgës
Ë(
BIO
 *, *, );

319 (*
˘æ
Ë(
BIO
 *, , , *);

320 (*
¸óã
Ë(
BIO
 *);

321 (*
de°roy
Ë(
BIO
 *);

322 (*
ˇŒback_˘æ
Ë(
BIO
 *, , 
bio_öfo_cb
 *);

323 } 
	tBIO_METHOD
;

325 
	sbio_°
 {

326 
BIO_METHOD
 *
mëhod
;

328 (*
ˇŒback
Ë(
bio_°
 *, , const *, , , );

329 *
cb_¨g
;

330 
öô
;

331 
shutdown
;

332 
Êags
;

333 
ªåy_ªas⁄
;

334 
num
;

335 *
±r
;

336 
bio_°
 *
√xt_bio
;

337 
bio_°
 *
¥ev_bio
;

338 
ª„ªn˚s
;

339 
num_ªad
;

340 
num_wrôe
;

341 
CRYPTO_EX_DATA
 
ex_d©a
;

344 
DECLARE_STACK_OF
(
BIO
)

346 
	sbio_f_buf„r_˘x_°ru˘
 {

359 
ibuf_size
;

360 
obuf_size
;

361 *
ibuf
;

362 
ibuf_Àn
;

363 
ibuf_off
;

364 *
obuf
;

365 
obuf_Àn
;

366 
obuf_off
;

367 } 
	tBIO_F_BUFFER_CTX
;

370 
	ta¢1_ps_func
 (
	tBIO
 *
	tb
, **
	tpbuf
, *
	t∂í
,

371 *
	t∑rg
);

373 #i‚de‡
OPENSSL_NO_SCTP


375 
	sbio_dgøm_s˘p_¢döfo
 {

376 
uöt16_t
 
¢d_sid
;

377 
uöt16_t
 
¢d_Êags
;

378 
uöt32_t
 
¢d_µid
;

379 
uöt32_t
 
¢d_c⁄ãxt
;

382 
	sbio_dgøm_s˘p_rcvöfo
 {

383 
uöt16_t
 
rcv_sid
;

384 
uöt16_t
 
rcv_s¢
;

385 
uöt16_t
 
rcv_Êags
;

386 
uöt32_t
 
rcv_µid
;

387 
uöt32_t
 
rcv_t¢
;

388 
uöt32_t
 
rcv_cumt¢
;

389 
uöt32_t
 
rcv_c⁄ãxt
;

392 
	sbio_dgøm_s˘p_¥öfo
 {

393 
uöt16_t
 
¥_pﬁicy
;

394 
uöt32_t
 
¥_vÆue
;

399 
	#BIO_CONN_S_BEFORE
 1

	)

400 
	#BIO_CONN_S_GET_IP
 2

	)

401 
	#BIO_CONN_S_GET_PORT
 3

	)

402 
	#BIO_CONN_S_CREATE_SOCKET
 4

	)

403 
	#BIO_CONN_S_CONNECT
 5

	)

404 
	#BIO_CONN_S_OK
 6

	)

405 
	#BIO_CONN_S_BLOCKED_CONNECT
 7

	)

406 
	#BIO_CONN_S_NBIO
 8

	)

411 
	#BIO_C_SET_CONNECT
 100

	)

412 
	#BIO_C_DO_STATE_MACHINE
 101

	)

413 
	#BIO_C_SET_NBIO
 102

	)

414 
	#BIO_C_SET_PROXY_PARAM
 103

	)

415 
	#BIO_C_SET_FD
 104

	)

416 
	#BIO_C_GET_FD
 105

	)

417 
	#BIO_C_SET_FILE_PTR
 106

	)

418 
	#BIO_C_GET_FILE_PTR
 107

	)

419 
	#BIO_C_SET_FILENAME
 108

	)

420 
	#BIO_C_SET_SSL
 109

	)

421 
	#BIO_C_GET_SSL
 110

	)

422 
	#BIO_C_SET_MD
 111

	)

423 
	#BIO_C_GET_MD
 112

	)

424 
	#BIO_C_GET_CIPHER_STATUS
 113

	)

425 
	#BIO_C_SET_BUF_MEM
 114

	)

426 
	#BIO_C_GET_BUF_MEM_PTR
 115

	)

427 
	#BIO_C_GET_BUFF_NUM_LINES
 116

	)

428 
	#BIO_C_SET_BUFF_SIZE
 117

	)

429 
	#BIO_C_SET_ACCEPT
 118

	)

430 
	#BIO_C_SSL_MODE
 119

	)

431 
	#BIO_C_GET_MD_CTX
 120

	)

432 
	#BIO_C_GET_PROXY_PARAM
 121

	)

433 
	#BIO_C_SET_BUFF_READ_DATA
 122

	)

434 
	#BIO_C_GET_CONNECT
 123

	)

435 
	#BIO_C_GET_ACCEPT
 124

	)

436 
	#BIO_C_SET_SSL_RENEGOTIATE_BYTES
 125

	)

437 
	#BIO_C_GET_SSL_NUM_RENEGOTIATES
 126

	)

438 
	#BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
 127

	)

439 
	#BIO_C_FILE_SEEK
 128

	)

440 
	#BIO_C_GET_CIPHER_CTX
 129

	)

441 
	#BIO_C_SET_BUF_MEM_EOF_RETURN
 130

	)

443 
	#BIO_C_SET_BIND_MODE
 131

	)

444 
	#BIO_C_GET_BIND_MODE
 132

	)

445 
	#BIO_C_FILE_TELL
 133

	)

446 
	#BIO_C_GET_SOCKS
 134

	)

447 
	#BIO_C_SET_SOCKS
 135

	)

449 
	#BIO_C_SET_WRITE_BUF_SIZE
 136

	)

450 
	#BIO_C_GET_WRITE_BUF_SIZE
 137

	)

451 
	#BIO_C_MAKE_BIO_PAIR
 138

	)

452 
	#BIO_C_DESTROY_BIO_PAIR
 139

	)

453 
	#BIO_C_GET_WRITE_GUARANTEE
 140

	)

454 
	#BIO_C_GET_READ_REQUEST
 141

	)

455 
	#BIO_C_SHUTDOWN_WR
 142

	)

456 
	#BIO_C_NREAD0
 143

	)

457 
	#BIO_C_NREAD
 144

	)

458 
	#BIO_C_NWRITE0
 145

	)

459 
	#BIO_C_NWRITE
 146

	)

460 
	#BIO_C_RESET_READ_REQUEST
 147

	)

461 
	#BIO_C_SET_MD_CTX
 148

	)

463 
	#BIO_C_SET_PREFIX
 149

	)

464 
	#BIO_C_GET_PREFIX
 150

	)

465 
	#BIO_C_SET_SUFFIX
 151

	)

466 
	#BIO_C_GET_SUFFIX
 152

	)

468 
	#BIO_C_SET_EX_ARG
 153

	)

469 
	#BIO_C_GET_EX_ARG
 154

	)

471 
	#BIO_£t_≠p_d©a
(
s
,
¨g
Ë
	`BIO_£t_ex_d©a
(s,0,¨g)

	)

472 
	#BIO_gë_≠p_d©a
(
s
Ë
	`BIO_gë_ex_d©a
(s,0)

	)

475 
	#BIO_£t_c⁄n_ho°«me
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,0,(*Íame)

	)

476 
	#BIO_£t_c⁄n_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,1,(*Ì‹t)

	)

477 
	#BIO_£t_c⁄n_ù
(
b
,
ù
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,2,(*)ù)

	)

478 
	#BIO_£t_c⁄n_öt_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,3,(*Ì‹t)

	)

479 
	#BIO_gë_c⁄n_ho°«me
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,0)

	)

480 
	#BIO_gë_c⁄n_p‹t
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,1)

	)

481 
	#BIO_gë_c⁄n_ù
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,2)

	)

482 
	#BIO_gë_c⁄n_öt_p‹t
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CONNECT
,3,
NULL
)

	)

484 
	#BIO_£t_nbio
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_NBIO
,“),
NULL
)

	)

487 
	#BIO_£t_ac˚±_p‹t
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,0,(*Íame)

	)

488 
	#BIO_gë_ac˚±_p‹t
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_ACCEPT
,0)

	)

490 
	#BIO_£t_nbio_ac˚±
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,1,“)?(*)"a":
NULL
)

	)

491 
	#BIO_£t_ac˚±_bios
(
b
,
bio
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,2,(*)bio)

	)

493 
	#BIO_BIND_NORMAL
 0

	)

494 
	#BIO_BIND_REUSEADDR_IF_UNUSED
 1

	)

495 
	#BIO_BIND_REUSEADDR
 2

	)

496 
	#BIO_£t_böd_mode
(
b
,
mode
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BIND_MODE
,mode,
NULL
)

	)

497 
	#BIO_gë_böd_mode
(
b
,
mode
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BIND_MODE
,0,
NULL
)

	)

500 
	#BIO_do_c⁄√˘
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

501 
	#BIO_do_ac˚±
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

502 
	#BIO_do_h™dshake
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_DO_STATE_MACHINE
,0,
NULL
)

	)

505 
	#BIO_£t_uæ
(
b
,
uæ
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,0,(*)(uæ))

	)

506 
	#BIO_£t_¥oxõs
(
b
,
p
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,1,(*)’))

	)

508 
	#BIO_£t_fûãr_bio
(
b
,
s
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,2,(*)(s))

	)

510 
	#BIO_£t_¥oxy_cb
(
b
,
cb
Ë
	`BIO_ˇŒback_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,3,(*(*cb)()))

	)

511 
	#BIO_£t_¥oxy_hódî
(
b
,
sk
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,4,(*)sk)

	)

512 
	#BIO_£t_no_c⁄√˘_ªtu∫
(
b
,
boﬁ
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,5,boﬁ)

	)

514 
	#BIO_gë_¥oxy_hódî
(
b
,
skp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,0,(*)skp)

	)

515 
	#BIO_gë_¥oxõs
(
b
,
pxy_p
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,1,(*)’xy_p))

	)

516 
	#BIO_gë_uæ
(
b
,
uæ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,2,(*)(uæ))

	)

517 
	#BIO_gë_no_c⁄√˘_ªtu∫
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,5,
NULL
)

	)

520 
	#BIO_£t_fd
(
b
,
fd
,
c
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_FD
,c,fd)

	)

521 
	#BIO_gë_fd
(
b
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FD
,0,(*)c)

	)

524 
	#BIO_£t_Â
(
b
,
Â
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILE_PTR
,c,(*)Â)

	)

525 
	#BIO_gë_Â
(
b
,
Âp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FILE_PTR
,0,(*)Âp)

	)

528 
	#BIO_£ek
(
b
,
ofs
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_SEEK
,ofs,
NULL
)

	)

529 
	#BIO_ãŒ
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_TELL
,0,
NULL
)

	)

535 #ifde‡
CONST_STRICT


540 
BIO_ªad_fûíame
(
BIO
 *
b
, c⁄° *
«me
);

542 
	#BIO_ªad_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

543 
BIO_CLOSE
|
BIO_FP_READ
,(*)
«me
)

	)

545 
	#BIO_wrôe_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

546 
BIO_CLOSE
|
BIO_FP_WRITE
,
«me
)

	)

547 
	#BIO_≠≥nd_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

548 
BIO_CLOSE
|
BIO_FP_APPEND
,
«me
)

	)

549 
	#BIO_rw_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

550 
BIO_CLOSE
|
BIO_FP_READ
|
BIO_FP_WRITE
,
«me
)

	)

558 
	#BIO_£t_s¶
(
b
,
s¶
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_SSL
,c,(*)s¶)

	)

559 
	#BIO_gë_s¶
(
b
,
s¶p
Ë
	`BIO_˘æ
(b,
BIO_C_GET_SSL
,0,(*)s¶p)

	)

560 
	#BIO_£t_s¶_mode
(
b
,
˛õ¡
Ë
	`BIO_˘æ
(b,
BIO_C_SSL_MODE
,˛õ¡,
NULL
)

	)

561 
	#BIO_£t_s¶_ª√gŸüã_byãs
(
b
,
num
) \

562 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_BYTES
,
num
,
NULL
);

	)

563 
	#BIO_gë_num_ª√gŸüãs
(
b
) \

564 
	`BIO_˘æ
(
b
,
BIO_C_GET_SSL_NUM_RENEGOTIATES
,0,
NULL
);

	)

565 
	#BIO_£t_s¶_ª√gŸüã_timeout
(
b
,
£c⁄ds
) \

566 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
,
£c⁄ds
,
NULL
);

	)

571 
	#BIO_gë_mem_d©a
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_CTRL_INFO
,0,(*Ìp)

	)

572 
	#BIO_£t_mem_buf
(
b
,
bm
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUF_MEM
,c,(*)bm)

	)

573 
	#BIO_gë_mem_±r
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUF_MEM_PTR
,0,(*Ìp)

	)

574 
	#BIO_£t_mem_eof_ªtu∫
(
b
,
v
) \

575 
	`BIO_˘æ
(
b
,
BIO_C_SET_BUF_MEM_EOF_RETURN
,
v
,
NULL
)

	)

578 
	#BIO_gë_buf„r_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUFF_NUM_LINES
,0,
NULL
)

	)

579 
	#BIO_£t_buf„r_size
(
b
,
size
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,
NULL
)

	)

580 
	#BIO_£t_ªad_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,0)

	)

581 
	#BIO_£t_wrôe_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,1)

	)

582 
	#BIO_£t_buf„r_ªad_d©a
(
b
,
buf
,
num
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_READ_DATA
,num,buf)

	)

585 
	#BIO_dup_°©e
(
b
,
ªt
Ë
	`BIO_˘æ
(b,
BIO_CTRL_DUP
,0,(*)‘ë))

	)

587 
	#BIO_ª£t
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_RESET
,0,
NULL
)

	)

588 
	#BIO_eof
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_EOF
,0,
NULL
)

	)

589 
	#BIO_£t_˛o£
(
b
,
c
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_SET_CLOSE
,(c),
NULL
)

	)

590 
	#BIO_gë_˛o£
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CLOSE
,0,
NULL
)

	)

591 
	#BIO_≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_PENDING
,0,
NULL
)

	)

592 
	#BIO_w≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_WPENDING
,0,
NULL
)

	)

594 
size_t
 
BIO_˘æ_≥ndög
(
BIO
 *
b
);

595 
size_t
 
BIO_˘æ_w≥ndög
(
BIO
 *
b
);

596 
	#BIO_Êush
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_FLUSH
,0,
NULL
)

	)

597 
	#BIO_gë_öfo_ˇŒback
(
b
,
cbp
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CALLBACK
,0, \

598 
cbp
)

	)

599 
	#BIO_£t_öfo_ˇŒback
(
b
,
cb
Ë()
	`BIO_ˇŒback_˘æ
(b,
BIO_CTRL_SET_CALLBACK
,cb)

	)

602 
	#BIO_buf„r_gë_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_CTRL_GET
,0,
NULL
)

	)

605 
	#BIO_£t_wrôe_buf_size
(
b
,
size
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_WRITE_BUF_SIZE
,size,
NULL
)

	)

606 
	#BIO_gë_wrôe_buf_size
(
b
,
size
Ë(
size_t
)
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_BUF_SIZE
,size,
NULL
)

	)

607 
	#BIO_make_bio_∑ú
(
b1
,
b2
Ë()
	`BIO_˘æ
(b1,
BIO_C_MAKE_BIO_PAIR
,0,b2)

	)

608 
	#BIO_de°roy_bio_∑ú
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_DESTROY_BIO_PAIR
,0,
NULL
)

	)

609 
	#BIO_shutdown_wr
(
b
Ë()
	`BIO_˘æ
(b, 
BIO_C_SHUTDOWN_WR
, 0, 
NULL
)

	)

611 
	#BIO_gë_wrôe_gu¨™ãe
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_GUARANTEE
,0,
NULL
)

	)

612 
	#BIO_gë_ªad_ªque°
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_READ_REQUEST
,0,
NULL
)

	)

613 
size_t
 
BIO_˘æ_gë_wrôe_gu¨™ãe
(
BIO
 *
b
);

614 
size_t
 
BIO_˘æ_gë_ªad_ªque°
(
BIO
 *
b
);

615 
BIO_˘æ_ª£t_ªad_ªque°
(
BIO
 *
b
);

618 
	#BIO_˘æ_dgøm_c⁄√˘
(
b
,
≥î
) \

619 ()
	`BIO_˘æ
(
b
,
BIO_CTRL_DGRAM_CONNECT
,0, (*)
≥î
)

	)

620 
	#BIO_˘æ_£t_c⁄√˘ed
(
b
, 
°©e
, 
≥î
) \

621 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_CONNECTED
, 
°©e
, (*)
≥î
)

	)

622 
	#BIO_dgøm_ªcv_timedout
(
b
) \

623 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
, 0, 
NULL
)

	)

624 
	#BIO_dgøm_£nd_timedout
(
b
) \

625 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
, 0, 
NULL
)

	)

626 
	#BIO_dgøm_gë_≥î
(
b
,
≥î
) \

627 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_PEER
, 0, (*)
≥î
)

	)

628 
	#BIO_dgøm_£t_≥î
(
b
,
≥î
) \

629 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_PEER
, 0, (*)
≥î
)

	)

630 
	#BIO_dgøm_gë_mtu_ovîhód
(
b
) \

631 ()
	`BIO_˘æ
((
b
), 
BIO_CTRL_DGRAM_GET_MTU_OVERHEAD
, 0, 
NULL
)

	)

636 
BIO_£t_ex_d©a
(
BIO
 *
bio
, 
idx
, *
d©a
);

637 *
BIO_gë_ex_d©a
(
BIO
 *
bio
, 
idx
);

638 
BIO_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

639 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

640 
BIO_numbî_ªad
(
BIO
 *
bio
);

641 
BIO_numbî_wrôãn
(
BIO
 *
bio
);

644 
BIO_a¢1_£t_¥efix
(
BIO
 *
b
, 
a¢1_ps_func
 *
¥efix
,

645 
a¢1_ps_func
 *
¥efix_‰ì
);

646 
BIO_a¢1_gë_¥efix
(
BIO
 *
b
, 
a¢1_ps_func
 **
µªfix
,

647 
a¢1_ps_func
 **
µªfix_‰ì
);

648 
BIO_a¢1_£t_suffix
(
BIO
 *
b
, 
a¢1_ps_func
 *
suffix
,

649 
a¢1_ps_func
 *
suffix_‰ì
);

650 
BIO_a¢1_gë_suffix
(
BIO
 *
b
, 
a¢1_ps_func
 **
psuffix
,

651 
a¢1_ps_func
 **
psuffix_‰ì
);

653 #i‚de‡
OPENSSL_NO_FP_API


654 
BIO_METHOD
 *
BIO_s_fûe
();

655 
BIO
 *
BIO_√w_fûe
(c⁄° *
fûíame
, c⁄° *
mode
);

656 
BIO
 *
BIO_√w_Â
(
FILE
 *
°ªam
, 
˛o£_Êag
);

657 
	#BIO_s_fûe_öã∫Æ
 
BIO_s_fûe


	)

659 
BIO
 *
BIO_√w
(
BIO_METHOD
 *
ty≥
);

660 
BIO_£t
(
BIO
 *
a
, 
BIO_METHOD
 *
ty≥
);

661 
BIO_‰ì
(
BIO
 *
a
);

662 
BIO_v‰ì
(
BIO
 *
a
);

663 
BIO_ªad
(
BIO
 *
b
, *
d©a
, 
Àn
);

664 
BIO_gës
(
BIO
 *
bp
, *
buf
, 
size
);

665 
BIO_wrôe
(
BIO
 *
b
, c⁄° *
d©a
, 
Àn
);

666 
BIO_puts
(
BIO
 *
bp
, c⁄° *
buf
);

667 
BIO_ödít
(
BIO
 *
b
, 
ödít
, 
max
);

668 
BIO_˘æ
(
BIO
 *
bp
, 
cmd
, 
œrg
, *
∑rg
);

669 
BIO_ˇŒback_˘æ
(
BIO
 *
b
, 
cmd
,

670 (*
Â
Ë(
bio_°
 *, , const *, ,

672 *
BIO_±r_˘æ
(
BIO
 *
bp
, 
cmd
, 
œrg
);

673 
BIO_öt_˘æ
(
BIO
 *
bp
, 
cmd
, 
œrg
, 
ürg
);

674 
BIO
 *
BIO_push
(BIO *
b
, BIO *
≠≥nd
);

675 
BIO
 *
BIO_p›
(BIO *
b
);

676 
BIO_‰ì_Æl
(
BIO
 *
a
);

677 
BIO
 *
BIO_föd_ty≥
(BIO *
b
, 
bio_ty≥
);

678 
BIO
 *
BIO_√xt
(BIO *
b
);

679 
BIO
 *
BIO_gë_ªåy_BIO
(BIO *
bio
, *
ªas⁄
);

680 
BIO_gë_ªåy_ªas⁄
(
BIO
 *
bio
);

681 
BIO
 *
BIO_dup_chaö
(BIO *
ö
);

683 
BIO_ƒód0
(
BIO
 *
bio
, **
buf
);

684 
BIO_ƒód
(
BIO
 *
bio
, **
buf
, 
num
);

685 
BIO_nwrôe0
(
BIO
 *
bio
, **
buf
);

686 
BIO_nwrôe
(
BIO
 *
bio
, **
buf
, 
num
);

688 
BIO_debug_ˇŒback
(
BIO
 *
bio
, 
cmd
, c⁄° *
¨gp
, 
¨gi
,

689 
¨gl
, 
ªt
);

691 
BIO_METHOD
 *
BIO_s_mem
();

692 
BIO
 *
BIO_√w_mem_buf
(c⁄° *
buf
, 
Àn
);

693 
BIO_METHOD
 *
BIO_s_sockë
();

694 
BIO_METHOD
 *
BIO_s_c⁄√˘
();

695 
BIO_METHOD
 *
BIO_s_ac˚±
();

696 
BIO_METHOD
 *
BIO_s_fd
();

697 #i‚de‡
OPENSSL_SYS_OS2


698 
BIO_METHOD
 *
BIO_s_log
();

700 
BIO_METHOD
 *
BIO_s_bio
();

701 
BIO_METHOD
 *
BIO_s_nuŒ
();

702 
BIO_METHOD
 *
BIO_f_nuŒ
();

703 
BIO_METHOD
 *
BIO_f_buf„r
();

704 #ifde‡
OPENSSL_SYS_VMS


705 
BIO_METHOD
 *
BIO_f_löebuf„r
();

707 
BIO_METHOD
 *
BIO_f_nbio_ã°
();

708 #i‚de‡
OPENSSL_NO_DGRAM


709 
BIO_METHOD
 *
BIO_s_d©agøm
();

710 #i‚de‡
OPENSSL_NO_SCTP


711 
BIO_METHOD
 *
BIO_s_d©agøm_s˘p
();

717 
BIO_sock_should_ªåy
(
i
);

718 
BIO_sock_n⁄_Áèl_îr‹
(
îr‹
);

719 
BIO_dgøm_n⁄_Áèl_îr‹
(
îr‹
);

721 
BIO_fd_should_ªåy
(
i
);

722 
BIO_fd_n⁄_Áèl_îr‹
(
îr‹
);

723 
BIO_dump_cb
((*
cb
Ë(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

724 *
u
, c⁄° *
s
, 
Àn
);

725 
BIO_dump_ödít_cb
((*
cb
Ë(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

726 *
u
, c⁄° *
s
, 
Àn
, 
ödít
);

727 
BIO_dump
(
BIO
 *
b
, c⁄° *
byãs
, 
Àn
);

728 
BIO_dump_ödít
(
BIO
 *
b
, c⁄° *
byãs
, 
Àn
, 
ödít
);

729 #i‚de‡
OPENSSL_NO_FP_API


730 
BIO_dump_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
);

731 
BIO_dump_ödít_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
, 
ödít
);

733 
BIO_hex_°rög
(
BIO
 *
out
, 
ödít
, 
width
, *
d©a
,

734 
d©Æí
);

736 
ho°ít
 *
BIO_gëho°by«me
(c⁄° *
«me
);

746 
BIO_sock_îr‹
(
sock
);

747 
BIO_sockë_io˘l
(
fd
, 
ty≥
, *
¨g
);

748 
BIO_sockë_nbio
(
fd
, 
mode
);

749 
BIO_gë_p‹t
(c⁄° *
°r
, *
p‹t_±r
);

750 
BIO_gë_ho°_ù
(c⁄° *
°r
, *
ù
);

751 
BIO_gë_ac˚±_sockë
(*
ho°_p‹t
, 
mode
);

752 
BIO_ac˚±
(
sock
, **
ù_p‹t
);

753 
BIO_sock_öô
();

754 
BIO_sock_˛ónup
();

755 
BIO_£t_t˝_ndñay
(
sock
, 
tu∫_⁄
);

757 
BIO
 *
BIO_√w_sockë
(
sock
, 
˛o£_Êag
);

758 
BIO
 *
BIO_√w_dgøm
(
fd
, 
˛o£_Êag
);

759 #i‚de‡
OPENSSL_NO_SCTP


760 
BIO
 *
BIO_√w_dgøm_s˘p
(
fd
, 
˛o£_Êag
);

761 
BIO_dgøm_is_s˘p
(
BIO
 *
bio
);

762 
BIO_dgøm_s˘p_nŸifiˇti⁄_cb
(
BIO
 *
b
,

763 (*
h™dÀ_nŸifiˇti⁄s
Ë(
BIO
 *
bio
,

765 *
c⁄ãxt
,

766 *
buf
),

767 *
c⁄ãxt
);

768 
BIO_dgøm_s˘p_waô_f‹_dry
(
BIO
 *
b
);

769 
BIO_dgøm_s˘p_msg_waôög
(
BIO
 *
b
);

771 
BIO
 *
BIO_√w_fd
(
fd
, 
˛o£_Êag
);

772 
BIO
 *
BIO_√w_c⁄√˘
(c⁄° *
ho°_p‹t
);

773 
BIO
 *
BIO_√w_ac˚±
(c⁄° *
ho°_p‹t
);

775 
BIO_√w_bio_∑ú
(
BIO
 **
bio1
, 
size_t
 
wrôebuf1
,

776 
BIO
 **
bio2
, 
size_t
 
wrôebuf2
);

783 
BIO_c›y_√xt_ªåy
(
BIO
 *
b
);

789 #ifde‡
__GNUC__


790 
	#__bio_h__©å__
 
__©åibuã__


	)

792 
	#__bio_h__©å__
(
x
)

	)

794 
BIO_¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, ...)

795 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
, 2, 3)));

796 
BIO_v¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

797 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
, 2, 0)));

798 
BIO_¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, ...)

799 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
, 3, 4)));

800 
BIO_v¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

801 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
, 3, 0)));

802 #unde‡
__bio_h__©å__


809 
ERR_lﬂd_BIO_°rögs
();

814 
	#BIO_F_ACPT_STATE
 100

	)

815 
	#BIO_F_BIO_ACCEPT
 101

	)

816 
	#BIO_F_BIO_BER_GET_HEADER
 102

	)

817 
	#BIO_F_BIO_CALLBACK_CTRL
 131

	)

818 
	#BIO_F_BIO_CTRL
 103

	)

819 
	#BIO_F_BIO_GETHOSTBYNAME
 120

	)

820 
	#BIO_F_BIO_GETS
 104

	)

821 
	#BIO_F_BIO_GET_ACCEPT_SOCKET
 105

	)

822 
	#BIO_F_BIO_GET_HOST_IP
 106

	)

823 
	#BIO_F_BIO_GET_PORT
 107

	)

824 
	#BIO_F_BIO_MAKE_PAIR
 121

	)

825 
	#BIO_F_BIO_NEW
 108

	)

826 
	#BIO_F_BIO_NEW_FILE
 109

	)

827 
	#BIO_F_BIO_NEW_MEM_BUF
 126

	)

828 
	#BIO_F_BIO_NREAD
 123

	)

829 
	#BIO_F_BIO_NREAD0
 124

	)

830 
	#BIO_F_BIO_NWRITE
 125

	)

831 
	#BIO_F_BIO_NWRITE0
 122

	)

832 
	#BIO_F_BIO_PUTS
 110

	)

833 
	#BIO_F_BIO_READ
 111

	)

834 
	#BIO_F_BIO_SOCK_INIT
 112

	)

835 
	#BIO_F_BIO_WRITE
 113

	)

836 
	#BIO_F_BUFFER_CTRL
 114

	)

837 
	#BIO_F_CONN_CTRL
 127

	)

838 
	#BIO_F_CONN_STATE
 115

	)

839 
	#BIO_F_DGRAM_SCTP_READ
 132

	)

840 
	#BIO_F_DGRAM_SCTP_WRITE
 133

	)

841 
	#BIO_F_FILE_CTRL
 116

	)

842 
	#BIO_F_FILE_READ
 130

	)

843 
	#BIO_F_LINEBUFFER_CTRL
 129

	)

844 
	#BIO_F_MEM_READ
 128

	)

845 
	#BIO_F_MEM_WRITE
 117

	)

846 
	#BIO_F_SSL_NEW
 118

	)

847 
	#BIO_F_WSASTARTUP
 119

	)

850 
	#BIO_R_ACCEPT_ERROR
 100

	)

851 
	#BIO_R_BAD_FOPEN_MODE
 101

	)

852 
	#BIO_R_BAD_HOSTNAME_LOOKUP
 102

	)

853 
	#BIO_R_BROKEN_PIPE
 124

	)

854 
	#BIO_R_CONNECT_ERROR
 103

	)

855 
	#BIO_R_EOF_ON_MEMORY_BIO
 127

	)

856 
	#BIO_R_ERROR_SETTING_NBIO
 104

	)

857 
	#BIO_R_ERROR_SETTING_NBIO_ON_ACCEPTED_SOCKET
 105

	)

858 
	#BIO_R_ERROR_SETTING_NBIO_ON_ACCEPT_SOCKET
 106

	)

859 
	#BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET
 107

	)

860 
	#BIO_R_INVALID_ARGUMENT
 125

	)

861 
	#BIO_R_INVALID_IP_ADDRESS
 108

	)

862 
	#BIO_R_IN_USE
 123

	)

863 
	#BIO_R_KEEPALIVE
 109

	)

864 
	#BIO_R_NBIO_CONNECT_ERROR
 110

	)

865 
	#BIO_R_NO_ACCEPT_PORT_SPECIFIED
 111

	)

866 
	#BIO_R_NO_HOSTNAME_SPECIFIED
 112

	)

867 
	#BIO_R_NO_PORT_DEFINED
 113

	)

868 
	#BIO_R_NO_PORT_SPECIFIED
 114

	)

869 
	#BIO_R_NO_SUCH_FILE
 128

	)

870 
	#BIO_R_NULL_PARAMETER
 115

	)

871 
	#BIO_R_TAG_MISMATCH
 116

	)

872 
	#BIO_R_UNABLE_TO_BIND_SOCKET
 117

	)

873 
	#BIO_R_UNABLE_TO_CREATE_SOCKET
 118

	)

874 
	#BIO_R_UNABLE_TO_LISTEN_SOCKET
 119

	)

875 
	#BIO_R_UNINITIALIZED
 120

	)

876 
	#BIO_R_UNSUPPORTED_METHOD
 121

	)

877 
	#BIO_R_WRITE_TO_READ_ONLY_BIO
 126

	)

878 
	#BIO_R_WSASTARTUP
 122

	)

880 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/bn.h

125 #i‚de‡
HEADER_BN_H


126 
	#HEADER_BN_H


	)

128 
	~<limôs.h
>

129 
	~<›ís¶/e_os2.h
>

130 #i‚de‡
OPENSSL_NO_FP_API


131 
	~<°dio.h
>

133 
	~<›ís¶/os¶_typ.h
>

134 
	~<›ís¶/¸y±o.h
>

136 #ifde‡ 
__˝lu•lus


152 #i‚de‡
OPENSSL_SMALL_FOOTPRINT


153 
	#BN_MUL_COMBA


	)

154 
	#BN_SQR_COMBA


	)

155 
	#BN_RECURSION


	)

170 #i‡
deföed
(
OPENSSL_SYS_MSDOS
Ë|| deföed(
OPENSSL_SYS_WINDOWS
) || \

171 
deföed
(
OPENSSL_SYS_WIN32
Ë|| 
	$deföed
(
löux
)

172 #i‚de‡
BN_DIV2W


173 
	#BN_DIV2W


	)

181 #ifde‡
SIXTY_FOUR_BIT_LONG


182 
	#BN_ULLONG
 

	)

183 
	#BN_ULONG
 

	)

184 
	#BN_LONG
 

	)

185 
	#BN_BITS
 128

	)

186 
	#BN_BYTES
 8

	)

187 
	#BN_BITS2
 64

	)

188 
	#BN_BITS4
 32

	)

189 
	#BN_MASK
 (0xffffffffffffffffffffffffffffffffLL)

	)

190 
	#BN_MASK2
 (0xffffffffffffffffL)

	)

191 
	#BN_MASK2l
 (0xffffffffL)

	)

192 
	#BN_MASK2h
 (0xffffffff00000000L)

	)

193 
	#BN_MASK2h1
 (0xffffffff80000000L)

	)

194 
	#BN_TBIT
 (0x8000000000000000L)

	)

195 
	#BN_DEC_CONV
 (10000000000000000000UL)

	)

196 
	#BN_DEC_FMT1
 "%lu"

	)

197 
	#BN_DEC_FMT2
 "%019lu"

	)

198 
	#BN_DEC_NUM
 19

	)

199 
	#BN_HEX_FMT1
 "%lX"

	)

200 
	#BN_HEX_FMT2
 "%016lX"

	)

209 #ifde‡
SIXTY_FOUR_BIT


210 #unde‡
BN_LLONG


211 #unde‡
BN_ULLONG


212 
	#BN_ULONG
 

	)

213 
	#BN_LONG
 

	)

214 
	#BN_BITS
 128

	)

215 
	#BN_BYTES
 8

	)

216 
	#BN_BITS2
 64

	)

217 
	#BN_BITS4
 32

	)

218 
	#BN_MASK2
 (0xffffffffffffffffLL)

	)

219 
	#BN_MASK2l
 (0xffffffffL)

	)

220 
	#BN_MASK2h
 (0xffffffff00000000LL)

	)

221 
	#BN_MASK2h1
 (0xffffffff80000000LL)

	)

222 
	#BN_TBIT
 (0x8000000000000000LL)

	)

223 
	#BN_DEC_CONV
 (10000000000000000000ULL)

	)

224 
	#BN_DEC_FMT1
 "%Œu"

	)

225 
	#BN_DEC_FMT2
 "%019Œu"

	)

226 
	#BN_DEC_NUM
 19

	)

227 
	#BN_HEX_FMT1
 "%ŒX"

	)

228 
	#BN_HEX_FMT2
 "%016ŒX"

	)

231 #ifde‡
THIRTY_TWO_BIT


232 #ifde‡
BN_LLONG


233 #i‡
	`deföed
(
_WIN32
Ë&& !deföed(
__GNUC__
)

234 
	#BN_ULLONG
 
__öt64


	)

235 
	#BN_MASK
 (0xffffffffffffffff
I64
)

	)

237 
	#BN_ULLONG
 

	)

238 
	#BN_MASK
 (0xffffffffffffffffLL)

	)

241 
	#BN_ULONG
 

	)

242 
	#BN_LONG
 

	)

243 
	#BN_BITS
 64

	)

244 
	#BN_BYTES
 4

	)

245 
	#BN_BITS2
 32

	)

246 
	#BN_BITS4
 16

	)

247 
	#BN_MASK2
 (0xffffffffL)

	)

248 
	#BN_MASK2l
 (0xffff)

	)

249 
	#BN_MASK2h1
 (0xffff8000L)

	)

250 
	#BN_MASK2h
 (0xffff0000L)

	)

251 
	#BN_TBIT
 (0x80000000L)

	)

252 
	#BN_DEC_CONV
 (1000000000L)

	)

253 
	#BN_DEC_FMT1
 "%u"

	)

254 
	#BN_DEC_FMT2
 "%09u"

	)

255 
	#BN_DEC_NUM
 9

	)

256 
	#BN_HEX_FMT1
 "%X"

	)

257 
	#BN_HEX_FMT2
 "%08X"

	)

260 
	#BN_DEFAULT_BITS
 1280

	)

262 
	#BN_FLG_MALLOCED
 0x01

	)

263 
	#BN_FLG_STATIC_DATA
 0x02

	)

271 
	#BN_FLG_CONSTTIME
 0x04

	)

273 #ifde‡
OPENSSL_NO_DEPRECATED


275 
	#BN_FLG_EXP_CONSTTIME
 
BN_FLG_CONSTTIME


	)

282 #i‚de‡
OPENSSL_NO_DEPRECATED


283 
	#BN_FLG_FREE
 0x8000

	)

286 
	#BN_£t_Êags
(
b
,
n
Ë((b)->
Êags
|=“))

	)

287 
	#BN_gë_Êags
(
b
,
n
Ë((b)->
Êags
&“))

	)

293 
	#BN_wôh_Êags
(
de°
,
b
,
n
Ë((de°)->
d
=(b)->d, \

294 (
de°
)->
t›
=(
b
)->top, \

295 (
de°
)->
dmax
=(
b
)->dmax, \

296 (
de°
)->
√g
=(
b
)->neg, \

297 (
de°
)->
Êags
=(((de°)->Êag†& 
BN_FLG_MALLOCED
) \

298 | ((
b
)->
Êags
 & ~
BN_FLG_MALLOCED
) \

299 | 
BN_FLG_STATIC_DATA
 \

300 | (
n
)))

	)

304 
bignum_°
 
	tBIGNUM
;

306 
bignum_˘x
 
	tBN_CTX
;

307 
bn_blödög_°
 
	tBN_BLINDING
;

308 
bn_m⁄t_˘x_°
 
	tBN_MONT_CTX
;

309 
bn_ª˝_˘x_°
 
	tBN_RECP_CTX
;

310 
bn_gícb_°
 
	tBN_GENCB
;

313 
	sbignum_°
 {

314 
BN_ULONG
 *
d
;

316 
t›
;

318 
dmax
;

319 
√g
;

320 
Êags
;

324 
	sbn_m⁄t_˘x_°
 {

325 
ri
;

326 
BIGNUM
 
RR
;

327 
BIGNUM
 
N
;

328 
BIGNUM
 
Ni
;

330 
BN_ULONG
 
n0
[2];

333 
Êags
;

340 
	sbn_ª˝_˘x_°
 {

341 
BIGNUM
 
N
;

342 
BIGNUM
 
Nr
;

343 
num_bôs
;

344 
shi·
;

345 
Êags
;

349 
	sbn_gícb_°
 {

350 
vî
;

351 *
¨g
;

354 (*
cb_1
) (, , *);

356 (*
cb_2
Ë(, , 
BN_GENCB
 *);

357 } 
cb
;

360 
	`BN_GENCB_ˇŒ
(
BN_GENCB
 *
cb
, 
a
, 
b
);

362 
	#BN_GENCB_£t_ﬁd
(
gícb
, 
ˇŒback
, 
cb_¨g
) { \

363 
BN_GENCB
 *
tmp_gícb
 = (
gícb
); \

364 
tmp_gícb
->
vî
 = 1; \

365 
tmp_gícb
->
¨g
 = (
cb_¨g
); \

366 
tmp_gícb
->
cb
.
cb_1
 = (
ˇŒback
); }

	)

368 
	#BN_GENCB_£t
(
gícb
, 
ˇŒback
, 
cb_¨g
) { \

369 
BN_GENCB
 *
tmp_gícb
 = (
gícb
); \

370 
tmp_gícb
->
vî
 = 2; \

371 
tmp_gícb
->
¨g
 = (
cb_¨g
); \

372 
tmp_gícb
->
cb
.
cb_2
 = (
ˇŒback
); }

	)

374 
	#BN_¥ime_checks
 0

	)

385 
	#BN_¥ime_checks_f‹_size
(
b
) ((b) >= 1300 ? 2 : \

386 (
b
) >= 850 ? 3 : \

387 (
b
) >= 650 ? 4 : \

388 (
b
) >= 550 ? 5 : \

389 (
b
) >= 450 ? 6 : \

390 (
b
) >= 400 ? 7 : \

391 (
b
) >= 350 ? 8 : \

392 (
b
) >= 300 ? 9 : \

393 (
b
) >= 250 ? 12 : \

394 (
b
) >= 200 ? 15 : \

395 (
b
) >= 150 ? 18 : \

396  27)

	)

398 
	#BN_num_byãs
(
a
Ë((
	`BN_num_bôs
◊)+7)/8)

	)

401 
	#BN_abs_is_w‹d
(
a
,
w
Ë(((◊)->
t›
 =1Ë&& (◊)->
d
[0] =(
BN_ULONG
)(w))) || \

402 (((
w
Ë=0Ë&& ((
a
)->
t›
 =0)))

	)

403 
	#BN_is_zîo
(
a
Ë(◊)->
t›
 =0)

	)

404 
	#BN_is_⁄e
(
a
Ë(
	`BN_abs_is_w‹d
(◊),1Ë&& !◊)->
√g
)

	)

405 
	#BN_is_w‹d
(
a
,
w
Ë(
	`BN_abs_is_w‹d
(◊),(w)Ë&& (!(wË|| !◊)->
√g
))

	)

406 
	#BN_is_odd
(
a
Ë((◊)->
t›
 > 0Ë&& (◊)->
d
[0] & 1))

	)

408 
	#BN_⁄e
(
a
Ë(
	`BN_£t_w‹d
(◊),1))

	)

409 
	#BN_zîo_ex
(
a
) \

411 
BIGNUM
 *
_tmp_bn
 = (
a
); \

412 
_tmp_bn
->
t›
 = 0; \

413 
_tmp_bn
->
√g
 = 0; \

414 } 0)

	)

415 #ifde‡
OPENSSL_NO_DEPRECATED


416 
	#BN_zîo
(
a
Ë
	`BN_zîo_ex
◊)

	)

418 
	#BN_zîo
(
a
Ë(
	`BN_£t_w‹d
(◊),0))

	)

421 c⁄° 
BIGNUM
 *
	`BN_vÆue_⁄e
();

422 *
	`BN_›ti⁄s
();

423 
BN_CTX
 *
	`BN_CTX_√w
();

424 #i‚de‡
OPENSSL_NO_DEPRECATED


425 
	`BN_CTX_öô
(
BN_CTX
 *
c
);

427 
	`BN_CTX_‰ì
(
BN_CTX
 *
c
);

428 
	`BN_CTX_°¨t
(
BN_CTX
 *
˘x
);

429 
BIGNUM
 *
	`BN_CTX_gë
(
BN_CTX
 *
˘x
);

430 
	`BN_CTX_íd
(
BN_CTX
 *
˘x
);

431 
	`BN_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
, 
bŸtom
);

432 
	`BN_p£udo_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
, 
bŸtom
);

433 
	`BN_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

434 
	`BN_p£udo_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

435 
	`BN_num_bôs
(c⁄° 
BIGNUM
 *
a
);

436 
	`BN_num_bôs_w‹d
(
BN_ULONG
);

437 
BIGNUM
 *
	`BN_√w
();

438 
	`BN_öô
(
BIGNUM
 *);

439 
	`BN_˛ór_‰ì
(
BIGNUM
 *
a
);

440 
BIGNUM
 *
	`BN_c›y
(BIGNUM *
a
, c⁄° BIGNUM *
b
);

441 
	`BN_sw≠
(
BIGNUM
 *
a
, BIGNUM *
b
);

442 
BIGNUM
 *
	`BN_bö2bn
(c⁄° *
s
, 
Àn
, BIGNUM *
ªt
);

443 
	`BN_bn2bö
(c⁄° 
BIGNUM
 *
a
, *
to
);

444 
BIGNUM
 *
	`BN_mpi2bn
(c⁄° *
s
, 
Àn
, BIGNUM *
ªt
);

445 
	`BN_bn2mpi
(c⁄° 
BIGNUM
 *
a
, *
to
);

446 
	`BN_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

447 
	`BN_usub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

448 
	`BN_uadd
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

449 
	`BN_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

450 
	`BN_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

451 
	`BN_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
BN_CTX
 *
˘x
);

456 
	`BN_£t_√g©ive
(
BIGNUM
 *
b
, 
n
);

461 
	#BN_is_√g©ive
(
a
Ë(◊)->
√g
 !0)

	)

463 
	`BN_div
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
,

464 
BN_CTX
 *
˘x
);

465 
	#BN_mod
(
ªm
,
m
,
d
,
˘x
Ë
	`BN_div
(
NULL
,‘em),(m),(d),(˘x))

	)

466 
	`BN_¬mod
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
, 
BN_CTX
 *
˘x
);

467 
	`BN_mod_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
,

468 
BN_CTX
 *
˘x
);

469 
	`BN_mod_add_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

470 c⁄° 
BIGNUM
 *
m
);

471 
	`BN_mod_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
,

472 
BN_CTX
 *
˘x
);

473 
	`BN_mod_sub_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

474 c⁄° 
BIGNUM
 *
m
);

475 
	`BN_mod_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
,

476 
BN_CTX
 *
˘x
);

477 
	`BN_mod_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

478 
	`BN_mod_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

479 
	`BN_mod_lshi·1_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
);

480 
	`BN_mod_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
,

481 
BN_CTX
 *
˘x
);

482 
	`BN_mod_lshi·_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
);

484 
BN_ULONG
 
	`BN_mod_w‹d
(c⁄° 
BIGNUM
 *
a
, BN_ULONG 
w
);

485 
BN_ULONG
 
	`BN_div_w‹d
(
BIGNUM
 *
a
, BN_ULONG 
w
);

486 
	`BN_mul_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

487 
	`BN_add_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

488 
	`BN_sub_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

489 
	`BN_£t_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

490 
BN_ULONG
 
	`BN_gë_w‹d
(c⁄° 
BIGNUM
 *
a
);

492 
	`BN_cmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

493 
	`BN_‰ì
(
BIGNUM
 *
a
);

494 
	`BN_is_bô_£t
(c⁄° 
BIGNUM
 *
a
, 
n
);

495 
	`BN_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

496 
	`BN_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

497 
	`BN_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

499 
	`BN_mod_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

500 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

501 
	`BN_mod_exp_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

502 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

503 
	`BN_mod_exp_m⁄t_c⁄°time
(
BIGNUM
 *
º
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

504 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
,

505 
BN_MONT_CTX
 *
ö_m⁄t
);

506 
	`BN_mod_exp_m⁄t_w‹d
(
BIGNUM
 *
r
, 
BN_ULONG
 
a
, c⁄° BIGNUM *
p
,

507 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

508 
	`BN_mod_exp2_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a1
, c⁄° BIGNUM *
p1
,

509 c⁄° 
BIGNUM
 *
a2
, c⁄° BIGNUM *
p2
, c⁄° BIGNUM *
m
,

510 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

511 
	`BN_mod_exp_sim∂e
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

512 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

514 
	`BN_mask_bôs
(
BIGNUM
 *
a
, 
n
);

515 #i‚de‡
OPENSSL_NO_FP_API


516 
	`BN_¥öt_Â
(
FILE
 *
Â
, c⁄° 
BIGNUM
 *
a
);

518 #ifde‡
HEADER_BIO_H


519 
	`BN_¥öt
(
BIO
 *
Â
, c⁄° 
BIGNUM
 *
a
);

521 
	`BN_¥öt
(*
Â
, c⁄° 
BIGNUM
 *
a
);

523 
	`BN_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, 
Àn
, 
BN_CTX
 *
˘x
);

524 
	`BN_rshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

525 
	`BN_rshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

526 
	`BN_˛ór
(
BIGNUM
 *
a
);

527 
BIGNUM
 *
	`BN_dup
(c⁄° BIGNUM *
a
);

528 
	`BN_ucmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

529 
	`BN_£t_bô
(
BIGNUM
 *
a
, 
n
);

530 
	`BN_˛ór_bô
(
BIGNUM
 *
a
, 
n
);

531 *
	`BN_bn2hex
(c⁄° 
BIGNUM
 *
a
);

532 *
	`BN_bn2dec
(c⁄° 
BIGNUM
 *
a
);

533 
	`BN_hex2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

534 
	`BN_dec2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

535 
	`BN_asc2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

536 
	`BN_gcd
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

537 
	`BN_kr⁄eckî
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

540 
BIGNUM
 *
	`BN_mod_övî£
(BIGNUM *
ªt
,

541 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
, 
BN_CTX
 *
˘x
);

542 
BIGNUM
 *
	`BN_mod_sqπ
(BIGNUM *
ªt
,

543 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
, 
BN_CTX
 *
˘x
);

545 
	`BN_c⁄°time_sw≠
(
BN_ULONG
 
sw≠
, 
BIGNUM
 *
a
, BIGNUM *
b
, 
nw‹ds
);

548 #i‚de‡
OPENSSL_NO_DEPRECATED


549 
BIGNUM
 *
	`BN_gíî©e_¥ime
(BIGNUM *
ªt
, 
bôs
, 
ß„
,

550 c⁄° 
BIGNUM
 *
add
, c⁄° BIGNUM *
ªm
,

551 (*
ˇŒback
Ë(, , *), *
cb_¨g
);

552 
	`BN_is_¥ime
(c⁄° 
BIGNUM
 *
p
, 
nchecks
,

553 (*
ˇŒback
) (, , *),

554 
BN_CTX
 *
˘x
, *
cb_¨g
);

555 
	`BN_is_¥ime_Á°ã°
(c⁄° 
BIGNUM
 *
p
, 
nchecks
,

556 (*
ˇŒback
Ë(, , *), 
BN_CTX
 *
˘x
,

557 *
cb_¨g
, 
do_åül_divisi⁄
);

561 
	`BN_gíî©e_¥ime_ex
(
BIGNUM
 *
ªt
, 
bôs
, 
ß„
, c⁄° BIGNUM *
add
,

562 c⁄° 
BIGNUM
 *
ªm
, 
BN_GENCB
 *
cb
);

563 
	`BN_is_¥ime_ex
(c⁄° 
BIGNUM
 *
p
, 
nchecks
, 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

564 
	`BN_is_¥ime_Á°ã°_ex
(c⁄° 
BIGNUM
 *
p
, 
nchecks
, 
BN_CTX
 *
˘x
,

565 
do_åül_divisi⁄
, 
BN_GENCB
 *
cb
);

567 
	`BN_X931_gíî©e_Xpq
(
BIGNUM
 *
Xp
, BIGNUM *
Xq
, 
nbôs
, 
BN_CTX
 *
˘x
);

569 
	`BN_X931_dîive_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
,

570 c⁄° 
BIGNUM
 *
Xp
, c⁄° BIGNUM *
Xp1
,

571 c⁄° 
BIGNUM
 *
Xp2
, c⁄° BIGNUM *
e
, 
BN_CTX
 *
˘x
,

572 
BN_GENCB
 *
cb
);

573 
	`BN_X931_gíî©e_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
, BIGNUM *
Xp1
,

574 
BIGNUM
 *
Xp2
, c⁄° BIGNUM *
Xp
, c⁄° BIGNUM *
e
,

575 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

577 
BN_MONT_CTX
 *
	`BN_MONT_CTX_√w
();

578 
	`BN_MONT_CTX_öô
(
BN_MONT_CTX
 *
˘x
);

579 
	`BN_mod_mul_m⁄tgomîy
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

580 
BN_MONT_CTX
 *
m⁄t
, 
BN_CTX
 *
˘x
);

581 
	#BN_to_m⁄tgomîy
(
r
,
a
,
m⁄t
,
˘x
Ë
	`BN_mod_mul_m⁄tgomîy
(\

582 (
r
),(
a
),&((
m⁄t
)->
RR
),(m⁄t),(
˘x
))

	)

583 
	`BN_‰om_m⁄tgomîy
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

584 
BN_MONT_CTX
 *
m⁄t
, 
BN_CTX
 *
˘x
);

585 
	`BN_MONT_CTX_‰ì
(
BN_MONT_CTX
 *
m⁄t
);

586 
	`BN_MONT_CTX_£t
(
BN_MONT_CTX
 *
m⁄t
, c⁄° 
BIGNUM
 *
mod
, 
BN_CTX
 *
˘x
);

587 
BN_MONT_CTX
 *
	`BN_MONT_CTX_c›y
(BN_MONT_CTX *
to
, BN_MONT_CTX *
‰om
);

588 
BN_MONT_CTX
 *
	`BN_MONT_CTX_£t_locked
(BN_MONT_CTX **
pm⁄t
, 
lock
,

589 c⁄° 
BIGNUM
 *
mod
, 
BN_CTX
 *
˘x
);

592 
	#BN_BLINDING_NO_UPDATE
 0x00000001

	)

593 
	#BN_BLINDING_NO_RECREATE
 0x00000002

	)

595 
BN_BLINDING
 *
	`BN_BLINDING_√w
(c⁄° 
BIGNUM
 *
A
, c⁄° BIGNUM *
Ai
, BIGNUM *
mod
);

596 
	`BN_BLINDING_‰ì
(
BN_BLINDING
 *
b
);

597 
	`BN_BLINDING_upd©e
(
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

598 
	`BN_BLINDING_c⁄vît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

599 
	`BN_BLINDING_övît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

600 
	`BN_BLINDING_c⁄vît_ex
(
BIGNUM
 *
n
, BIGNUM *
r
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *);

601 
	`BN_BLINDING_övît_ex
(
BIGNUM
 *
n
, c⁄° BIGNUM *
r
, 
BN_BLINDING
 *
b
,

602 
BN_CTX
 *);

603 #i‚de‡
OPENSSL_NO_DEPRECATED


604 
	`BN_BLINDING_gë_thªad_id
(c⁄° 
BN_BLINDING
 *);

605 
	`BN_BLINDING_£t_thªad_id
(
BN_BLINDING
 *, );

607 
CRYPTO_THREADID
 *
	`BN_BLINDING_thªad_id
(
BN_BLINDING
 *);

608 
	`BN_BLINDING_gë_Êags
(c⁄° 
BN_BLINDING
 *);

609 
	`BN_BLINDING_£t_Êags
(
BN_BLINDING
 *, );

610 
BN_BLINDING
 *
	`BN_BLINDING_¸óã_∑øm
(BN_BLINDING *
b
,

611 c⁄° 
BIGNUM
 *
e
, BIGNUM *
m
, 
BN_CTX
 *
˘x
,

612 (*
bn_mod_exp
Ë(
BIGNUM
 *
r
,

613 c⁄° 
BIGNUM
 *
a
,

614 c⁄° 
BIGNUM
 *
p
,

615 c⁄° 
BIGNUM
 *
m
,

616 
BN_CTX
 *
˘x
,

617 
BN_MONT_CTX
 *
m_˘x
),

618 
BN_MONT_CTX
 *
m_˘x
);

620 #i‚de‡
OPENSSL_NO_DEPRECATED


621 
	`BN_£t_∑øms
(
mul
, 
high
, 
low
, 
m⁄t
);

622 
	`BN_gë_∑øms
(
which
);

625 
	`BN_RECP_CTX_öô
(
BN_RECP_CTX
 *
ª˝
);

626 
BN_RECP_CTX
 *
	`BN_RECP_CTX_√w
();

627 
	`BN_RECP_CTX_‰ì
(
BN_RECP_CTX
 *
ª˝
);

628 
	`BN_RECP_CTX_£t
(
BN_RECP_CTX
 *
ª˝
, c⁄° 
BIGNUM
 *
rdiv
, 
BN_CTX
 *
˘x
);

629 
	`BN_mod_mul_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
x
, c⁄° BIGNUM *
y
,

630 
BN_RECP_CTX
 *
ª˝
, 
BN_CTX
 *
˘x
);

631 
	`BN_mod_exp_ª˝
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

632 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

633 
	`BN_div_ª˝
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
,

634 
BN_RECP_CTX
 *
ª˝
, 
BN_CTX
 *
˘x
);

636 #i‚de‡
OPENSSL_NO_EC2M


648 
	`BN_GF2m_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

649 
	#BN_GF2m_sub
(
r
, 
a
, 
b
Ë
	`BN_GF2m_add
‘,á, b)

	)

653 
	`BN_GF2m_mod
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
);

655 
	`BN_GF2m_mod_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

656 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

658 
	`BN_GF2m_mod_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

660 
	`BN_GF2m_mod_öv
(
BIGNUM
 *
r
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

662 
	`BN_GF2m_mod_div
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

663 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

665 
	`BN_GF2m_mod_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

666 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

668 
	`BN_GF2m_mod_sqπ
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

669 
BN_CTX
 *
˘x
);

671 
	`BN_GF2m_mod_sﬁve_quad
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

672 
BN_CTX
 *
˘x
);

673 
	#BN_GF2m_cmp
(
a
, 
b
Ë
	`BN_ucmp
(◊), (b))

	)

681 
	`BN_GF2m_mod_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° 
p
[]);

683 
	`BN_GF2m_mod_mul_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

684 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

686 
	`BN_GF2m_mod_sqr_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° 
p
[],

687 
BN_CTX
 *
˘x
);

689 
	`BN_GF2m_mod_öv_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
b
, c⁄° 
p
[],

690 
BN_CTX
 *
˘x
);

692 
	`BN_GF2m_mod_div_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

693 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

695 
	`BN_GF2m_mod_exp_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

696 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

698 
	`BN_GF2m_mod_sqπ_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

699 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

701 
	`BN_GF2m_mod_sﬁve_quad_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

702 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

703 
	`BN_GF2m_pﬁy2¨r
(c⁄° 
BIGNUM
 *
a
, 
p
[], 
max
);

704 
	`BN_GF2m_¨r2pﬁy
(c⁄° 
p
[], 
BIGNUM
 *
a
);

711 
	`BN_ni°_mod_192
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

712 
	`BN_ni°_mod_224
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

713 
	`BN_ni°_mod_256
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

714 
	`BN_ni°_mod_384
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

715 
	`BN_ni°_mod_521
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

717 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_192
();

718 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_224
();

719 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_256
();

720 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_384
();

721 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_521
();

725 
	#bn_ex∑nd
(
a
,
bôs
) \

727 
bôs
 > (
INT_MAX
 - 
BN_BITS2
 + 1) ? \

728 
NULL
 \

730 (((
bôs
+
BN_BITS2
-1)/BN_BITS2Ë<(
a
)->
dmax
) ? \

731 (
a
) \

733 
	`bn_ex∑nd2
((
a
),(
bôs
+
BN_BITS2
-1)/BN_BITS2) \

734 )

	)

736 
	#bn_wex∑nd
(
a
,
w‹ds
Ë(((w‹dsË<◊)->
dmax
)?◊):
	`bn_ex∑nd2
(◊),(w‹ds)))

	)

737 
BIGNUM
 *
	`bn_ex∑nd2
(BIGNUM *
a
, 
w‹ds
);

738 #i‚de‡
OPENSSL_NO_DEPRECATED


739 
BIGNUM
 *
	`bn_dup_ex∑nd
(c⁄° BIGNUM *
a
, 
w‹ds
);

771 #ifde‡
BN_DEBUG


774 
	~<as£π.h
>

776 #ifde‡
BN_DEBUG_RAND


778 #i‚de‡
RAND_p£udo_byãs


779 
	`RAND_p£udo_byãs
(*
buf
, 
num
);

780 
	#BN_DEBUG_TRIX


	)

782 
	#bn_pﬁluã
(
a
) \

784 c⁄° 
BIGNUM
 *
_bnum1
 = (
a
); \

785 if(
_bnum1
->
t›
 < _bnum1->
dmax
) { \

786 
_tmp_ch¨
; \

790 
BN_ULONG
 *
_nŸ_c⁄°
; \

791 
	`mem˝y
(&
_nŸ_c⁄°
, &
_bnum1
->
d
, (
BN_ULONG
*)); \

793 
	`RAND_p£udo_byãs
(&
_tmp_ch¨
, 1); \

794 
	`mem£t
((*)(
_nŸ_c⁄°
 + 
_bnum1
->
t›
), 
_tmp_ch¨
, \

795 (
_bnum1
->
dmax
 - _bnum1->
t›
Ë* (
BN_ULONG
)); \

797 } 0)

	)

798 #ifde‡
BN_DEBUG_TRIX


799 #unde‡
RAND_p£udo_byãs


802 
	#bn_pﬁluã
(
a
)

	)

804 
	#bn_check_t›
(
a
) \

806 c⁄° 
BIGNUM
 *
_bnum2
 = (
a
); \

807 i‡(
_bnum2
 !
NULL
) { \

808 
	`as£π
((
_bnum2
->
t›
 == 0) || \

809 (
_bnum2
->
d
[_bnum2->
t›
 - 1] != 0)); \

810 
	`bn_pﬁluã
(
_bnum2
); \

812 } 0)

	)

814 
	#bn_fix_t›
(
a
Ë
	`bn_check_t›
◊)

	)

816 
	#bn_check_size
(
bn
, 
bôs
Ë
	`bn_wcheck_size
(bn, ((bôs+
BN_BITS2
-1))/BN_BITS2)

	)

817 
	#bn_wcheck_size
(
bn
, 
w‹ds
) \

819 c⁄° 
BIGNUM
 *
_bnum2
 = (
bn
); \

820 
	`as£π
((
w‹ds
Ë<(
_bnum2
)->
dmax
 && (w‹dsË>(_bnum2)->
t›
); \

822 ()(
_bnum2
); \

823 } 0)

	)

827 
	#bn_pﬁluã
(
a
)

	)

828 
	#bn_check_t›
(
a
)

	)

829 
	#bn_fix_t›
(
a
Ë
	`bn_c‹ª˘_t›
◊)

	)

830 
	#bn_check_size
(
bn
, 
bôs
)

	)

831 
	#bn_wcheck_size
(
bn
, 
w‹ds
)

	)

835 
	#bn_c‹ª˘_t›
(
a
) \

837 
BN_ULONG
 *
·l
; \

838 
tmp_t›
 = (
a
)->
t›
; \

839 i‡(
tmp_t›
 > 0) \

841 
·l
&((
a
)->
d
[
tmp_t›
-1]);Åmp_top > 0;Åmp_top--) \

842 i‡(*(
·l
--)) ; \

843 (
a
)->
t›
 = 
tmp_t›
; \

845 
	`bn_pﬁluã
(
a
); \

846 }

	)

848 
BN_ULONG
 
	`bn_mul_add_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, 
num
,

849 
BN_ULONG
 
w
);

850 
BN_ULONG
 
	`bn_mul_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, 
num
, BN_ULONG 
w
);

851 
	`bn_sqr_w‹ds
(
BN_ULONG
 *
Ω
, c⁄° BN_ULONG *
≠
, 
num
);

852 
BN_ULONG
 
	`bn_div_w‹ds
(BN_ULONG 
h
, BN_ULONG 
l
, BN_ULONG 
d
);

853 
BN_ULONG
 
	`bn_add_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, c⁄° BN_ULONG *
bp
,

854 
num
);

855 
BN_ULONG
 
	`bn_sub_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, c⁄° BN_ULONG *
bp
,

856 
num
);

859 
BIGNUM
 *
	`gë_rfc2409_¥ime_768
(BIGNUM *
bn
);

860 
BIGNUM
 *
	`gë_rfc2409_¥ime_1024
(BIGNUM *
bn
);

863 
BIGNUM
 *
	`gë_rfc3526_¥ime_1536
(BIGNUM *
bn
);

864 
BIGNUM
 *
	`gë_rfc3526_¥ime_2048
(BIGNUM *
bn
);

865 
BIGNUM
 *
	`gë_rfc3526_¥ime_3072
(BIGNUM *
bn
);

866 
BIGNUM
 *
	`gë_rfc3526_¥ime_4096
(BIGNUM *
bn
);

867 
BIGNUM
 *
	`gë_rfc3526_¥ime_6144
(BIGNUM *
bn
);

868 
BIGNUM
 *
	`gë_rfc3526_¥ime_8192
(BIGNUM *
bn
);

870 
	`BN_b¡e°_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
, 
bŸtom
);

877 
	`ERR_lﬂd_BN_°rögs
();

882 
	#BN_F_BNRAND
 127

	)

883 
	#BN_F_BN_BLINDING_CONVERT_EX
 100

	)

884 
	#BN_F_BN_BLINDING_CREATE_PARAM
 128

	)

885 
	#BN_F_BN_BLINDING_INVERT_EX
 101

	)

886 
	#BN_F_BN_BLINDING_NEW
 102

	)

887 
	#BN_F_BN_BLINDING_UPDATE
 103

	)

888 
	#BN_F_BN_BN2DEC
 104

	)

889 
	#BN_F_BN_BN2HEX
 105

	)

890 
	#BN_F_BN_CTX_GET
 116

	)

891 
	#BN_F_BN_CTX_NEW
 106

	)

892 
	#BN_F_BN_CTX_START
 129

	)

893 
	#BN_F_BN_DIV
 107

	)

894 
	#BN_F_BN_DIV_NO_BRANCH
 138

	)

895 
	#BN_F_BN_DIV_RECP
 130

	)

896 
	#BN_F_BN_EXP
 123

	)

897 
	#BN_F_BN_EXPAND2
 108

	)

898 
	#BN_F_BN_EXPAND_INTERNAL
 120

	)

899 
	#BN_F_BN_GF2M_MOD
 131

	)

900 
	#BN_F_BN_GF2M_MOD_EXP
 132

	)

901 
	#BN_F_BN_GF2M_MOD_MUL
 133

	)

902 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD
 134

	)

903 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR
 135

	)

904 
	#BN_F_BN_GF2M_MOD_SQR
 136

	)

905 
	#BN_F_BN_GF2M_MOD_SQRT
 137

	)

906 
	#BN_F_BN_LSHIFT
 145

	)

907 
	#BN_F_BN_MOD_EXP2_MONT
 118

	)

908 
	#BN_F_BN_MOD_EXP_MONT
 109

	)

909 
	#BN_F_BN_MOD_EXP_MONT_CONSTTIME
 124

	)

910 
	#BN_F_BN_MOD_EXP_MONT_WORD
 117

	)

911 
	#BN_F_BN_MOD_EXP_RECP
 125

	)

912 
	#BN_F_BN_MOD_EXP_SIMPLE
 126

	)

913 
	#BN_F_BN_MOD_INVERSE
 110

	)

914 
	#BN_F_BN_MOD_INVERSE_NO_BRANCH
 139

	)

915 
	#BN_F_BN_MOD_LSHIFT_QUICK
 119

	)

916 
	#BN_F_BN_MOD_MUL_RECIPROCAL
 111

	)

917 
	#BN_F_BN_MOD_SQRT
 121

	)

918 
	#BN_F_BN_MPI2BN
 112

	)

919 
	#BN_F_BN_NEW
 113

	)

920 
	#BN_F_BN_RAND
 114

	)

921 
	#BN_F_BN_RAND_RANGE
 122

	)

922 
	#BN_F_BN_RSHIFT
 146

	)

923 
	#BN_F_BN_USUB
 115

	)

926 
	#BN_R_ARG2_LT_ARG3
 100

	)

927 
	#BN_R_BAD_RECIPROCAL
 101

	)

928 
	#BN_R_BIGNUM_TOO_LONG
 114

	)

929 
	#BN_R_BITS_TOO_SMALL
 118

	)

930 
	#BN_R_CALLED_WITH_EVEN_MODULUS
 102

	)

931 
	#BN_R_DIV_BY_ZERO
 103

	)

932 
	#BN_R_ENCODING_ERROR
 104

	)

933 
	#BN_R_EXPAND_ON_STATIC_BIGNUM_DATA
 105

	)

934 
	#BN_R_INPUT_NOT_REDUCED
 110

	)

935 
	#BN_R_INVALID_LENGTH
 106

	)

936 
	#BN_R_INVALID_RANGE
 115

	)

937 
	#BN_R_INVALID_SHIFT
 119

	)

938 
	#BN_R_NOT_A_SQUARE
 111

	)

939 
	#BN_R_NOT_INITIALIZED
 107

	)

940 
	#BN_R_NO_INVERSE
 108

	)

941 
	#BN_R_NO_SOLUTION
 116

	)

942 
	#BN_R_P_IS_NOT_PRIME
 112

	)

943 
	#BN_R_TOO_MANY_ITERATIONS
 113

	)

944 
	#BN_R_TOO_MANY_TEMPORARY_VARIABLES
 109

	)

946 #ifde‡ 
__˝lu•lus


947 
	}
}

	@/usr/include/openssl/buffer.h

59 #i‚de‡
HEADER_BUFFER_H


60 
	#HEADER_BUFFER_H


	)

62 
	~<›ís¶/os¶_typ.h
>

64 #ifde‡ 
__˝lu•lus


68 
	~<°ddef.h
>

70 #i‡!
deföed
(
NO_SYS_TYPES_H
)

71 
	~<sys/ty≥s.h
>

77 
	sbuf_mem_°
 {

78 
size_t
 
Àngth
;

79 *
d©a
;

80 
size_t
 
max
;

83 
BUF_MEM
 *
BUF_MEM_√w
();

84 
BUF_MEM_‰ì
(
BUF_MEM
 *
a
);

85 
BUF_MEM_grow
(
BUF_MEM
 *
°r
, 
size_t
 
Àn
);

86 
BUF_MEM_grow_˛ón
(
BUF_MEM
 *
°r
, 
size_t
 
Àn
);

87 
size_t
 
BUF_°∫Àn
(c⁄° *
°r
, size_à
maxÀn
);

88 *
BUF_°rdup
(c⁄° *
°r
);

94 *
BUF_°∫dup
(c⁄° *
°r
, 
size_t
 
siz
);

96 *
BUF_memdup
(c⁄° *
d©a
, 
size_t
 
siz
);

97 
BUF_ªvî£
(*
out
, c⁄° *
ö
, 
size_t
 
siz
);

100 
size_t
 
BUF_°æ˝y
(*
d°
, c⁄° *
§c
, size_à
siz
);

101 
size_t
 
BUF_°æˇt
(*
d°
, c⁄° *
§c
, size_à
siz
);

108 
ERR_lﬂd_BUF_°rögs
();

113 
	#BUF_F_BUF_MEMDUP
 103

	)

114 
	#BUF_F_BUF_MEM_GROW
 100

	)

115 
	#BUF_F_BUF_MEM_GROW_CLEAN
 105

	)

116 
	#BUF_F_BUF_MEM_NEW
 101

	)

117 
	#BUF_F_BUF_STRDUP
 102

	)

118 
	#BUF_F_BUF_STRNDUP
 104

	)

122 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/comp.h

2 #i‚de‡
HEADER_COMP_H


3 
	#HEADER_COMP_H


	)

5 
	~<›ís¶/¸y±o.h
>

7 #ifde‡ 
__˝lu•lus


11 
comp_˘x_°
 
	tCOMP_CTX
;

13 
	scomp_mëhod_°
 {

14 
ty≥
;

15 c⁄° *
«me
;

16 (*
öô
Ë(
COMP_CTX
 *
˘x
);

17 (*
föish
Ë(
COMP_CTX
 *
˘x
);

18 (*
com¥ess
Ë(
COMP_CTX
 *
˘x
,

19 *
out
, 
ﬁí
,

20 *
ö
, 
ûí
);

21 (*
ex∑nd
Ë(
COMP_CTX
 *
˘x
,

22 *
out
, 
ﬁí
,

23 *
ö
, 
ûí
);

27 (*
˘æ
) ();

28 (*
ˇŒback_˘æ
) ();

29 } 
	tCOMP_METHOD
;

31 
	scomp_˘x_°
 {

32 
COMP_METHOD
 *
mëh
;

33 
com¥ess_ö
;

34 
com¥ess_out
;

35 
ex∑nd_ö
;

36 
ex∑nd_out
;

37 
CRYPTO_EX_DATA
 
ex_d©a
;

40 
COMP_CTX
 *
COMP_CTX_√w
(
COMP_METHOD
 *
mëh
);

41 
COMP_CTX_‰ì
(
COMP_CTX
 *
˘x
);

42 
COMP_com¥ess_block
(
COMP_CTX
 *
˘x
, *
out
, 
ﬁí
,

43 *
ö
, 
ûí
);

44 
COMP_ex∑nd_block
(
COMP_CTX
 *
˘x
, *
out
, 
ﬁí
,

45 *
ö
, 
ûí
);

46 
COMP_METHOD
 *
COMP_æe
();

47 
COMP_METHOD
 *
COMP_zlib
();

48 
COMP_zlib_˛ónup
();

50 #ifde‡
HEADER_BIO_H


51 #ifde‡
ZLIB


52 
BIO_METHOD
 *
BIO_f_zlib
();

61 
ERR_lﬂd_COMP_°rögs
();

66 
	#COMP_F_BIO_ZLIB_FLUSH
 99

	)

67 
	#COMP_F_BIO_ZLIB_NEW
 100

	)

68 
	#COMP_F_BIO_ZLIB_READ
 101

	)

69 
	#COMP_F_BIO_ZLIB_WRITE
 102

	)

72 
	#COMP_R_ZLIB_DEFLATE_ERROR
 99

	)

73 
	#COMP_R_ZLIB_INFLATE_ERROR
 100

	)

74 
	#COMP_R_ZLIB_NOT_SUPPORTED
 101

	)

76 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/conf.h

59 #i‚de‡ 
HEADER_CONF_H


60 
	#HEADER_CONF_H


	)

62 
	~<›ís¶/bio.h
>

63 
	~<›ís¶/lhash.h
>

64 
	~<›ís¶/°ack.h
>

65 
	~<›ís¶/ß„°ack.h
>

66 
	~<›ís¶/e_os2.h
>

68 
	~<›ís¶/os¶_typ.h
>

70 #ifde‡ 
__˝lu•lus


75 *
£˘i⁄
;

76 *
«me
;

77 *
vÆue
;

78 } 
	tCONF_VALUE
;

80 
DECLARE_STACK_OF
(
CONF_VALUE
)

81 
DECLARE_LHASH_OF
(
CONF_VALUE
);

83 
c⁄f_°
;

84 
c⁄f_mëhod_°
;

85 
c⁄f_mëhod_°
 
	tCONF_METHOD
;

87 
	sc⁄f_mëhod_°
 {

88 c⁄° *
«me
;

89 
CONF
 *(*
¸óã
Ë(
CONF_METHOD
 *
mëh
);

90 (*
öô
Ë(
CONF
 *
c⁄f
);

91 (*
de°roy
Ë(
CONF
 *
c⁄f
);

92 (*
de°roy_d©a
Ë(
CONF
 *
c⁄f
);

93 (*
lﬂd_bio
Ë(
CONF
 *
c⁄f
, 
BIO
 *
bp
, *
ñöe
);

94 (*
dump
Ë(c⁄° 
CONF
 *
c⁄f
, 
BIO
 *
bp
);

95 (*
is_numbî
Ë(c⁄° 
CONF
 *
c⁄f
, 
c
);

96 (*
to_öt
Ë(c⁄° 
CONF
 *
c⁄f
, 
c
);

97 (*
lﬂd
Ë(
CONF
 *
c⁄f
, c⁄° *
«me
, *
ñöe
);

102 
c⁄f_imoduÀ_°
 
	tCONF_IMODULE
;

103 
c⁄f_moduÀ_°
 
	tCONF_MODULE
;

105 
DECLARE_STACK_OF
(
CONF_MODULE
)

106 
DECLARE_STACK_OF
(
CONF_IMODULE
)

109 
	tc⁄f_öô_func
 (
	tCONF_IMODULE
 *
	tmd
, c⁄° 
	tCONF
 *
	t˙f
);

110 
	tc⁄f_föish_func
 (
	tCONF_IMODULE
 *
	tmd
);

112 
	#CONF_MFLAGS_IGNORE_ERRORS
 0x1

	)

113 
	#CONF_MFLAGS_IGNORE_RETURN_CODES
 0x2

	)

114 
	#CONF_MFLAGS_SILENT
 0x4

	)

115 
	#CONF_MFLAGS_NO_DSO
 0x8

	)

116 
	#CONF_MFLAGS_IGNORE_MISSING_FILE
 0x10

	)

117 
	#CONF_MFLAGS_DEFAULT_SECTION
 0x20

	)

119 
CONF_£t_deÁu…_mëhod
(
CONF_METHOD
 *
mëh
);

120 
CONF_£t_nc⁄f
(
CONF
 *
c⁄f
, 
LHASH_OF
(
CONF_VALUE
Ë*
hash
);

121 
LHASH_OF
(
CONF_VALUE
Ë*
CONF_lﬂd
(LHASH_OF(CONF_VALUEË*
c⁄f
, c⁄° *
fûe
,

122 *
ñöe
);

123 #i‚de‡
OPENSSL_NO_FP_API


124 
LHASH_OF
(
CONF_VALUE
Ë*
CONF_lﬂd_Â
(LHASH_OF(CONF_VALUEË*
c⁄f
, 
FILE
 *
Â
,

125 *
ñöe
);

127 
LHASH_OF
(
CONF_VALUE
Ë*
CONF_lﬂd_bio
(LHASH_OF(CONF_VALUEË*
c⁄f
, 
BIO
 *
bp
,

128 *
ñöe
);

129 
STACK_OF
(
CONF_VALUE
Ë*
CONF_gë_£˘i⁄
(
LHASH_OF
(CONF_VALUEË*
c⁄f
,

130 c⁄° *
£˘i⁄
);

131 *
CONF_gë_°rög
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, c⁄° *
group
,

132 c⁄° *
«me
);

133 
CONF_gë_numbî
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, c⁄° *
group
,

134 c⁄° *
«me
);

135 
CONF_‰ì
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
);

136 
CONF_dump_Â
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
FILE
 *
out
);

137 
CONF_dump_bio
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
BIO
 *
out
);

139 
OPENSSL_c⁄fig
(c⁄° *
c⁄fig_«me
);

140 
OPENSSL_no_c⁄fig
();

147 
	sc⁄f_°
 {

148 
CONF_METHOD
 *
mëh
;

149 *
mëh_d©a
;

150 
LHASH_OF
(
CONF_VALUE
Ë*
d©a
;

153 
CONF
 *
NCONF_√w
(
CONF_METHOD
 *
mëh
);

154 
CONF_METHOD
 *
NCONF_deÁu…
();

155 
CONF_METHOD
 *
NCONF_WIN32
();

158 
CONF_METHOD
 *
NCONF_XML
();

160 
NCONF_‰ì
(
CONF
 *
c⁄f
);

161 
NCONF_‰ì_d©a
(
CONF
 *
c⁄f
);

163 
NCONF_lﬂd
(
CONF
 *
c⁄f
, c⁄° *
fûe
, *
ñöe
);

164 #i‚de‡
OPENSSL_NO_FP_API


165 
NCONF_lﬂd_Â
(
CONF
 *
c⁄f
, 
FILE
 *
Â
, *
ñöe
);

167 
NCONF_lﬂd_bio
(
CONF
 *
c⁄f
, 
BIO
 *
bp
, *
ñöe
);

168 
STACK_OF
(
CONF_VALUE
Ë*
NCONF_gë_£˘i⁄
(c⁄° 
CONF
 *
c⁄f
,

169 c⁄° *
£˘i⁄
);

170 *
NCONF_gë_°rög
(c⁄° 
CONF
 *
c⁄f
, c⁄° *
group
, c⁄° *
«me
);

171 
NCONF_gë_numbî_e
(c⁄° 
CONF
 *
c⁄f
, c⁄° *
group
, c⁄° *
«me
,

172 *
ªsu…
);

173 
NCONF_dump_Â
(c⁄° 
CONF
 *
c⁄f
, 
FILE
 *
out
);

174 
NCONF_dump_bio
(c⁄° 
CONF
 *
c⁄f
, 
BIO
 *
out
);

178 
NCONF_gë_numbî
(
CONF
 *
c⁄f
, *
group
, *
«me
);

180 
	#NCONF_gë_numbî
(
c
,
g
,
n
,
r
Ë
	`NCONF_gë_numbî_e
(c,g,n,r)

	)

185 
CONF_moduÀs_lﬂd
(c⁄° 
CONF
 *
˙f
, c⁄° *
≠≤ame
,

186 
Êags
);

187 
CONF_moduÀs_lﬂd_fûe
(c⁄° *
fûíame
, c⁄° *
≠≤ame
,

188 
Êags
);

189 
CONF_moduÀs_u∆ﬂd
(
Æl
);

190 
CONF_moduÀs_föish
();

191 
CONF_moduÀs_‰ì
();

192 
CONF_moduÀ_add
(c⁄° *
«me
, 
c⁄f_öô_func
 *
ifunc
,

193 
c⁄f_föish_func
 *
ffunc
);

195 c⁄° *
CONF_imoduÀ_gë_«me
(c⁄° 
CONF_IMODULE
 *
md
);

196 c⁄° *
CONF_imoduÀ_gë_vÆue
(c⁄° 
CONF_IMODULE
 *
md
);

197 *
CONF_imoduÀ_gë_u§_d©a
(c⁄° 
CONF_IMODULE
 *
md
);

198 
CONF_imoduÀ_£t_u§_d©a
(
CONF_IMODULE
 *
md
, *
u§_d©a
);

199 
CONF_MODULE
 *
CONF_imoduÀ_gë_moduÀ
(c⁄° 
CONF_IMODULE
 *
md
);

200 
CONF_imoduÀ_gë_Êags
(c⁄° 
CONF_IMODULE
 *
md
);

201 
CONF_imoduÀ_£t_Êags
(
CONF_IMODULE
 *
md
, 
Êags
);

202 *
CONF_moduÀ_gë_u§_d©a
(
CONF_MODULE
 *
pmod
);

203 
CONF_moduÀ_£t_u§_d©a
(
CONF_MODULE
 *
pmod
, *
u§_d©a
);

205 *
CONF_gë1_deÁu…_c⁄fig_fûe
();

207 
CONF_∑r£_li°
(c⁄° *
li°
, 
£p
, 
no•c
,

208 (*
li°_cb
Ë(c⁄° *
ñem
, 
Àn
, *
u§
),

209 *
¨g
);

211 
OPENSSL_lﬂd_buûtö_moduÀs
();

218 
ERR_lﬂd_CONF_°rögs
();

223 
	#CONF_F_CONF_DUMP_FP
 104

	)

224 
	#CONF_F_CONF_LOAD
 100

	)

225 
	#CONF_F_CONF_LOAD_BIO
 102

	)

226 
	#CONF_F_CONF_LOAD_FP
 103

	)

227 
	#CONF_F_CONF_MODULES_LOAD
 116

	)

228 
	#CONF_F_CONF_PARSE_LIST
 119

	)

229 
	#CONF_F_DEF_LOAD
 120

	)

230 
	#CONF_F_DEF_LOAD_BIO
 121

	)

231 
	#CONF_F_MODULE_INIT
 115

	)

232 
	#CONF_F_MODULE_LOAD_DSO
 117

	)

233 
	#CONF_F_MODULE_RUN
 118

	)

234 
	#CONF_F_NCONF_DUMP_BIO
 105

	)

235 
	#CONF_F_NCONF_DUMP_FP
 106

	)

236 
	#CONF_F_NCONF_GET_NUMBER
 107

	)

237 
	#CONF_F_NCONF_GET_NUMBER_E
 112

	)

238 
	#CONF_F_NCONF_GET_SECTION
 108

	)

239 
	#CONF_F_NCONF_GET_STRING
 109

	)

240 
	#CONF_F_NCONF_LOAD
 113

	)

241 
	#CONF_F_NCONF_LOAD_BIO
 110

	)

242 
	#CONF_F_NCONF_LOAD_FP
 114

	)

243 
	#CONF_F_NCONF_NEW
 111

	)

244 
	#CONF_F_STR_COPY
 101

	)

247 
	#CONF_R_ERROR_LOADING_DSO
 110

	)

248 
	#CONF_R_LIST_CANNOT_BE_NULL
 115

	)

249 
	#CONF_R_MISSING_CLOSE_SQUARE_BRACKET
 100

	)

250 
	#CONF_R_MISSING_EQUAL_SIGN
 101

	)

251 
	#CONF_R_MISSING_FINISH_FUNCTION
 111

	)

252 
	#CONF_R_MISSING_INIT_FUNCTION
 112

	)

253 
	#CONF_R_MODULE_INITIALIZATION_ERROR
 109

	)

254 
	#CONF_R_NO_CLOSE_BRACE
 102

	)

255 
	#CONF_R_NO_CONF
 105

	)

256 
	#CONF_R_NO_CONF_OR_ENVIRONMENT_VARIABLE
 106

	)

257 
	#CONF_R_NO_SECTION
 107

	)

258 
	#CONF_R_NO_SUCH_FILE
 114

	)

259 
	#CONF_R_NO_VALUE
 108

	)

260 
	#CONF_R_UNABLE_TO_CREATE_NEW_SECTION
 103

	)

261 
	#CONF_R_UNKNOWN_MODULE_NAME
 113

	)

262 
	#CONF_R_VARIABLE_HAS_NO_VALUE
 104

	)

264 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/crypto.h

117 #i‚de‡
HEADER_CRYPTO_H


118 
	#HEADER_CRYPTO_H


	)

120 
	~<°dlib.h
>

122 
	~<›ís¶/e_os2.h
>

124 #i‚de‡
OPENSSL_NO_FP_API


125 
	~<°dio.h
>

128 
	~<›ís¶/°ack.h
>

129 
	~<›ís¶/ß„°ack.h
>

130 
	~<›ís¶/›ís¶v.h
>

131 
	~<›ís¶/os¶_typ.h
>

133 #ifde‡
CHARSET_EBCDIC


134 
	~<›ís¶/ebcdic.h
>

141 
	~<›ís¶/symhacks.h
>

143 #ifde‡ 
__˝lu•lus


152 
	#SSLEAY_VERSION_NUMBER
 
OPENSSL_VERSION_NUMBER


	)

153 
	#SSLEAY_VERSION
 0

	)

155 
	#SSLEAY_CFLAGS
 2

	)

156 
	#SSLEAY_BUILT_ON
 3

	)

157 
	#SSLEAY_PLATFORM
 4

	)

158 
	#SSLEAY_DIR
 5

	)

162 
¸y±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

164 
	tCRYPTO_EX_√w
 (*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

165 
	tidx
, 
	t¨gl
, *
	t¨gp
);

167 
	tCRYPTO_EX_‰ì
 (*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

168 
	tidx
, 
	t¨gl
, *
	t¨gp
);

170 
	tCRYPTO_EX_dup
 (
	tCRYPTO_EX_DATA
 *
	tto
, CRYPTO_EX_DATA *
	t‰om
,

171 *
	t‰om_d
, 
	tidx
, 
	t¨gl
, *
	t¨gp
);

175 
	s›ís¶_ôem_°
 {

176 
code
;

177 *
vÆue
;

178 
size_t
 
vÆue_size
;

180 
size_t
 *
vÆue_Àngth
;

181 } 
	tOPENSSL_ITEM
;

188 
	#CRYPTO_LOCK_ERR
 1

	)

189 
	#CRYPTO_LOCK_EX_DATA
 2

	)

190 
	#CRYPTO_LOCK_X509
 3

	)

191 
	#CRYPTO_LOCK_X509_INFO
 4

	)

192 
	#CRYPTO_LOCK_X509_PKEY
 5

	)

193 
	#CRYPTO_LOCK_X509_CRL
 6

	)

194 
	#CRYPTO_LOCK_X509_REQ
 7

	)

195 
	#CRYPTO_LOCK_DSA
 8

	)

196 
	#CRYPTO_LOCK_RSA
 9

	)

197 
	#CRYPTO_LOCK_EVP_PKEY
 10

	)

198 
	#CRYPTO_LOCK_X509_STORE
 11

	)

199 
	#CRYPTO_LOCK_SSL_CTX
 12

	)

200 
	#CRYPTO_LOCK_SSL_CERT
 13

	)

201 
	#CRYPTO_LOCK_SSL_SESSION
 14

	)

202 
	#CRYPTO_LOCK_SSL_SESS_CERT
 15

	)

203 
	#CRYPTO_LOCK_SSL
 16

	)

204 
	#CRYPTO_LOCK_SSL_METHOD
 17

	)

205 
	#CRYPTO_LOCK_RAND
 18

	)

206 
	#CRYPTO_LOCK_RAND2
 19

	)

207 
	#CRYPTO_LOCK_MALLOC
 20

	)

208 
	#CRYPTO_LOCK_BIO
 21

	)

209 
	#CRYPTO_LOCK_GETHOSTBYNAME
 22

	)

210 
	#CRYPTO_LOCK_GETSERVBYNAME
 23

	)

211 
	#CRYPTO_LOCK_READDIR
 24

	)

212 
	#CRYPTO_LOCK_RSA_BLINDING
 25

	)

213 
	#CRYPTO_LOCK_DH
 26

	)

214 
	#CRYPTO_LOCK_MALLOC2
 27

	)

215 
	#CRYPTO_LOCK_DSO
 28

	)

216 
	#CRYPTO_LOCK_DYNLOCK
 29

	)

217 
	#CRYPTO_LOCK_ENGINE
 30

	)

218 
	#CRYPTO_LOCK_UI
 31

	)

219 
	#CRYPTO_LOCK_ECDSA
 32

	)

220 
	#CRYPTO_LOCK_EC
 33

	)

221 
	#CRYPTO_LOCK_ECDH
 34

	)

222 
	#CRYPTO_LOCK_BN
 35

	)

223 
	#CRYPTO_LOCK_EC_PRE_COMP
 36

	)

224 
	#CRYPTO_LOCK_STORE
 37

	)

225 
	#CRYPTO_LOCK_COMP
 38

	)

226 
	#CRYPTO_LOCK_FIPS
 39

	)

227 
	#CRYPTO_LOCK_FIPS2
 40

	)

228 
	#CRYPTO_NUM_LOCKS
 41

	)

230 
	#CRYPTO_LOCK
 1

	)

231 
	#CRYPTO_UNLOCK
 2

	)

232 
	#CRYPTO_READ
 4

	)

233 
	#CRYPTO_WRITE
 8

	)

235 #i‚de‡
OPENSSL_NO_LOCKING


236 #i‚de‡
CRYPTO_w_lock


237 
	#CRYPTO_w_lock
(
ty≥
) \

238 
	`CRYPTO_lock
(
CRYPTO_LOCK
|
CRYPTO_WRITE
,
ty≥
,
__FILE__
,
__LINE__
)

	)

239 
	#CRYPTO_w_u∆ock
(
ty≥
) \

240 
	`CRYPTO_lock
(
CRYPTO_UNLOCK
|
CRYPTO_WRITE
,
ty≥
,
__FILE__
,
__LINE__
)

	)

241 
	#CRYPTO_r_lock
(
ty≥
) \

242 
	`CRYPTO_lock
(
CRYPTO_LOCK
|
CRYPTO_READ
,
ty≥
,
__FILE__
,
__LINE__
)

	)

243 
	#CRYPTO_r_u∆ock
(
ty≥
) \

244 
	`CRYPTO_lock
(
CRYPTO_UNLOCK
|
CRYPTO_READ
,
ty≥
,
__FILE__
,
__LINE__
)

	)

245 
	#CRYPTO_add
(
addr
,
amou¡
,
ty≥
) \

246 
	`CRYPTO_add_lock
(
addr
,
amou¡
,
ty≥
,
__FILE__
,
__LINE__
)

	)

249 
	#CRYPTO_w_lock
(
a
)

	)

250 
	#CRYPTO_w_u∆ock
(
a
)

	)

251 
	#CRYPTO_r_lock
(
a
)

	)

252 
	#CRYPTO_r_u∆ock
(
a
)

	)

253 
	#CRYPTO_add
(
a
,
b
,
c
Ë((*◊))+=(b))

	)

263 
ª„ªn˚s
;

264 
CRYPTO_dy∆ock_vÆue
 *
d©a
;

265 } 
	tCRYPTO_dy∆ock
;

272 
	#CRYPTO_MEM_CHECK_OFF
 0x0

	)

273 
	#CRYPTO_MEM_CHECK_ON
 0x1

	)

274 
	#CRYPTO_MEM_CHECK_ENABLE
 0x2

	)

275 
	#CRYPTO_MEM_CHECK_DISABLE
 0x3

	)

283 
	#V_CRYPTO_MDEBUG_TIME
 0x1

	)

285 
	#V_CRYPTO_MDEBUG_THREAD
 0x2

	)

287 
	#V_CRYPTO_MDEBUG_ALL
 (
V_CRYPTO_MDEBUG_TIME
 | 
V_CRYPTO_MDEBUG_THREAD
)

	)

290 
bio_°
 
	tBIO_dummy
;

292 
	s¸y±o_ex_d©a_°
 {

293 
STACK_OF
(Ë*
sk
;

295 
dummy
;

297 
DECLARE_STACK_OF
()

304 
	s¸y±o_ex_d©a_func_°
 {

305 
¨gl
;

306 *
¨gp
;

307 
CRYPTO_EX_√w
 *
√w_func
;

308 
CRYPTO_EX_‰ì
 *
‰ì_func
;

309 
CRYPTO_EX_dup
 *
dup_func
;

310 } 
	tCRYPTO_EX_DATA_FUNCS
;

312 
DECLARE_STACK_OF
(
CRYPTO_EX_DATA_FUNCS
)

319 
	#CRYPTO_EX_INDEX_BIO
 0

	)

320 
	#CRYPTO_EX_INDEX_SSL
 1

	)

321 
	#CRYPTO_EX_INDEX_SSL_CTX
 2

	)

322 
	#CRYPTO_EX_INDEX_SSL_SESSION
 3

	)

323 
	#CRYPTO_EX_INDEX_X509_STORE
 4

	)

324 
	#CRYPTO_EX_INDEX_X509_STORE_CTX
 5

	)

325 
	#CRYPTO_EX_INDEX_RSA
 6

	)

326 
	#CRYPTO_EX_INDEX_DSA
 7

	)

327 
	#CRYPTO_EX_INDEX_DH
 8

	)

328 
	#CRYPTO_EX_INDEX_ENGINE
 9

	)

329 
	#CRYPTO_EX_INDEX_X509
 10

	)

330 
	#CRYPTO_EX_INDEX_UI
 11

	)

331 
	#CRYPTO_EX_INDEX_ECDSA
 12

	)

332 
	#CRYPTO_EX_INDEX_ECDH
 13

	)

333 
	#CRYPTO_EX_INDEX_COMP
 14

	)

334 
	#CRYPTO_EX_INDEX_STORE
 15

	)

340 
	#CRYPTO_EX_INDEX_USER
 100

	)

347 
	#CRYPTO_mÆloc_öô
(Ë
	`CRYPTO_£t_mem_fun˘i⁄s
(\

348 
mÆloc
, 
ªÆloc
, 
‰ì
)

	)

350 #i‡
deföed
 
CRYPTO_MDEBUG_ALL
 || deföed 
CRYPTO_MDEBUG_TIME
 || deföed 
CRYPTO_MDEBUG_THREAD


351 #i‚de‡
CRYPTO_MDEBUG


352 
	#CRYPTO_MDEBUG


	)

360 
	#CRYPTO_mÆloc_debug_öô
() do {\

361 
	`CRYPTO_£t_mem_debug_fun˘i⁄s
(\

362 
CRYPTO_dbg_mÆloc
,\

363 
CRYPTO_dbg_ªÆloc
,\

364 
CRYPTO_dbg_‰ì
,\

365 
CRYPTO_dbg_£t_›ti⁄s
,\

366 
CRYPTO_dbg_gë_›ti⁄s
);\

367 } 0)

	)

369 
CRYPTO_mem_˘æ
(
mode
);

370 
CRYPTO_is_mem_check_⁄
();

373 
	#MemCheck_°¨t
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_ON
)

	)

374 
	#MemCheck_°›
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_OFF
)

	)

377 
	#MemCheck_⁄
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_ENABLE
)

	)

378 
	#MemCheck_off
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_DISABLE
)

	)

379 
	#is_MemCheck_⁄
(Ë
	`CRYPTO_is_mem_check_⁄
()

	)

381 
	#OPENSSL_mÆloc
(
num
Ë
	`CRYPTO_mÆloc
((Íum,
__FILE__
,
__LINE__
)

	)

382 
	#OPENSSL_°rdup
(
°r
Ë
	`CRYPTO_°rdup
((°r),
__FILE__
,
__LINE__
)

	)

383 
	#OPENSSL_ªÆloc
(
addr
,
num
) \

384 
	`CRYPTO_ªÆloc
((*)
addr
,()
num
,
__FILE__
,
__LINE__
)

	)

385 
	#OPENSSL_ªÆloc_˛ón
(
addr
,
ﬁd_num
,
num
) \

386 
	`CRYPTO_ªÆloc_˛ón
(
addr
,
ﬁd_num
,
num
,
__FILE__
,
__LINE__
)

	)

387 
	#OPENSSL_ªmÆloc
(
addr
,
num
) \

388 
	`CRYPTO_ªmÆloc
((**)
addr
,()
num
,
__FILE__
,
__LINE__
)

	)

389 
	#OPENSSL_‰ìFunc
 
CRYPTO_‰ì


	)

390 
	#OPENSSL_‰ì
(
addr
Ë
	`CRYPTO_‰ì
◊ddr)

	)

392 
	#OPENSSL_mÆloc_locked
(
num
) \

393 
	`CRYPTO_mÆloc_locked
(()
num
,
__FILE__
,
__LINE__
)

	)

394 
	#OPENSSL_‰ì_locked
(
addr
Ë
	`CRYPTO_‰ì_locked
◊ddr)

	)

396 c⁄° *
SSLóy_vîsi⁄
(
ty≥
);

397 
SSLóy
();

399 
OPENSSL_is£tugid
();

402 
°_CRYPTO_EX_DATA_IMPL
 
	tCRYPTO_EX_DATA_IMPL
;

404 c⁄° 
CRYPTO_EX_DATA_IMPL
 *
CRYPTO_gë_ex_d©a_im∂emíèti⁄
();

406 
CRYPTO_£t_ex_d©a_im∂emíèti⁄
(c⁄° 
CRYPTO_EX_DATA_IMPL
 *
i
);

408 
CRYPTO_ex_d©a_√w_˛ass
();

410 
CRYPTO_gë_ex_√w_ödex
(
˛ass_ödex
, 
¨gl
, *
¨gp
,

411 
CRYPTO_EX_√w
 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
,

412 
CRYPTO_EX_‰ì
 *
‰ì_func
);

417 
CRYPTO_√w_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

418 
CRYPTO_dup_ex_d©a
(
˛ass_ödex
, 
CRYPTO_EX_DATA
 *
to
,

419 
CRYPTO_EX_DATA
 *
‰om
);

420 
CRYPTO_‰ì_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

425 
CRYPTO_£t_ex_d©a
(
CRYPTO_EX_DATA
 *
ad
, 
idx
, *
vÆ
);

426 *
CRYPTO_gë_ex_d©a
(c⁄° 
CRYPTO_EX_DATA
 *
ad
, 
idx
);

431 
CRYPTO_˛ónup_Æl_ex_d©a
();

433 
CRYPTO_gë_√w_lockid
(*
«me
);

435 
CRYPTO_num_locks
();

436 
CRYPTO_lock
(
mode
, 
ty≥
, c⁄° *
fûe
, 
löe
);

437 
CRYPTO_£t_lockög_ˇŒback
((*
func
Ë(
mode
, 
ty≥
,

438 c⁄° *
fûe
, 
löe
));

439 (*
CRYPTO_gë_lockög_ˇŒback
()Ë(
mode
, 
ty≥
,

440 c⁄° *
fûe
, 
löe
);

441 
CRYPTO_£t_add_lock_ˇŒback
((*
func
)

442 (*
num
, 
mou¡
, 
ty≥
,

443 c⁄° *
fûe
, 
löe
));

444 (*
CRYPTO_gë_add_lock_ˇŒback
()Ë(*
num
, 
mou¡
, 
ty≥
,

445 c⁄° *
fûe
, 
löe
);

448 
	s¸y±o_thªadid_°
 {

449 *
±r
;

450 
vÆ
;

451 } 
	tCRYPTO_THREADID
;

453 
CRYPTO_THREADID_£t_numîic
(
CRYPTO_THREADID
 *
id
, 
vÆ
);

454 
CRYPTO_THREADID_£t_poöãr
(
CRYPTO_THREADID
 *
id
, *
±r
);

455 
CRYPTO_THREADID_£t_ˇŒback
((*
thªadid_func
Ë(
CRYPTO_THREADID
 *));

456 (*
CRYPTO_THREADID_gë_ˇŒback
()Ë(
CRYPTO_THREADID
 *);

457 
CRYPTO_THREADID_cuºít
(
CRYPTO_THREADID
 *
id
);

458 
CRYPTO_THREADID_cmp
(c⁄° 
CRYPTO_THREADID
 *
a
, c⁄° CRYPTO_THREADID *
b
);

459 
CRYPTO_THREADID_˝y
(
CRYPTO_THREADID
 *
de°
, c⁄° CRYPTO_THREADID *
§c
);

460 
CRYPTO_THREADID_hash
(c⁄° 
CRYPTO_THREADID
 *
id
);

461 #i‚de‡
OPENSSL_NO_DEPRECATED


462 
CRYPTO_£t_id_ˇŒback
((*
func
) ());

463 (*
CRYPTO_gë_id_ˇŒback
()) ();

464 
CRYPTO_thªad_id
();

467 c⁄° *
CRYPTO_gë_lock_«me
(
ty≥
);

468 
CRYPTO_add_lock
(*
poöãr
, 
amou¡
, 
ty≥
, c⁄° *
fûe
,

469 
löe
);

471 
CRYPTO_gë_√w_dy∆ockid
();

472 
CRYPTO_de°roy_dy∆ockid
(
i
);

473 
CRYPTO_dy∆ock_vÆue
 *
CRYPTO_gë_dy∆ock_vÆue
(
i
);

474 
CRYPTO_£t_dy∆ock_¸óã_ˇŒback
(
CRYPTO_dy∆ock_vÆue


475 *(*
dyn_¸óã_fun˘i⁄
) (const 

476 *
fûe
,

477 
löe
));

478 
CRYPTO_£t_dy∆ock_lock_ˇŒback
((*
dyn_lock_fun˘i⁄
)

479 (
mode
,

480 
CRYPTO_dy∆ock_vÆue
 *
l
,

481 c⁄° *
fûe
, 
löe
));

482 
CRYPTO_£t_dy∆ock_de°roy_ˇŒback
((*
dyn_de°roy_fun˘i⁄
)

483 (
CRYPTO_dy∆ock_vÆue
 *
l
,

484 c⁄° *
fûe
, 
löe
));

485 
CRYPTO_dy∆ock_vÆue


486 *(*
CRYPTO_gë_dy∆ock_¸óã_ˇŒback
()Ë(c⁄° *
fûe
, 
löe
);

487 (*
CRYPTO_gë_dy∆ock_lock_ˇŒback
()Ë(
mode
,

488 
CRYPTO_dy∆ock_vÆue


489 *
l
, c⁄° *
fûe
,

490 
löe
);

491 (*
CRYPTO_gë_dy∆ock_de°roy_ˇŒback
()Ë(
CRYPTO_dy∆ock_vÆue


492 *
l
, c⁄° *
fûe
,

493 
löe
);

499 
CRYPTO_£t_mem_fun˘i⁄s
(*(*
m
Ë(
size_t
), *(*
r
) (*, size_t),

500 (*
f
) (*));

501 
CRYPTO_£t_locked_mem_fun˘i⁄s
(*(*
m
Ë(
size_t
),

502 (*
‰ì_func
) (*));

503 
CRYPTO_£t_mem_ex_fun˘i⁄s
(*(*
m
Ë(
size_t
, const *, ),

504 *(*
r
Ë(*, 
size_t
, const *,

505 ), (*
f
) (*));

506 
CRYPTO_£t_locked_mem_ex_fun˘i⁄s
(*(*
m
Ë(
size_t
, const *, ),

507 (*
‰ì_func
) (*));

508 
CRYPTO_£t_mem_debug_fun˘i⁄s
((*
m
)

510 (*
r
) (*, *, ,

512 (*
f
Ë(*, ), (*
so
) (),

513 (*
go
) ());

514 
CRYPTO_gë_mem_fun˘i⁄s
(*(**
m
Ë(
size_t
),

515 *(**
r
Ë(*, 
size_t
),

516 (**
f
) (*));

517 
CRYPTO_gë_locked_mem_fun˘i⁄s
(*(**
m
Ë(
size_t
),

518 (**
f
) (*));

519 
CRYPTO_gë_mem_ex_fun˘i⁄s
(*(**
m
Ë(
size_t
, const *, ),

520 *(**
r
Ë(*, 
size_t
, const *,

521 ), (**
f
) (*));

522 
CRYPTO_gë_locked_mem_ex_fun˘i⁄s
(

523 *(**
m
Ë(
size_t
, const *, ),

524 (**
f
) (*));

525 
CRYPTO_gë_mem_debug_fun˘i⁄s
((**
m
)

527 (**
r
) (*, *, ,

529 (**
f
) (*, ),

530 (**
so
Ë(), (**
go
) ());

532 *
CRYPTO_mÆloc_locked
(
num
, c⁄° *
fûe
, 
löe
);

533 
CRYPTO_‰ì_locked
(*
±r
);

534 *
CRYPTO_mÆloc
(
num
, c⁄° *
fûe
, 
löe
);

535 *
CRYPTO_°rdup
(c⁄° *
°r
, c⁄° *
fûe
, 
löe
);

536 
CRYPTO_‰ì
(*
±r
);

537 *
CRYPTO_ªÆloc
(*
addr
, 
num
, c⁄° *
fûe
, 
löe
);

538 *
CRYPTO_ªÆloc_˛ón
(*
addr
, 
ﬁd_num
, 
num
, c⁄° *
fûe
,

539 
löe
);

540 *
CRYPTO_ªmÆloc
(*
addr
, 
num
, c⁄° *
fûe
, 
löe
);

542 
OPENSSL_˛ón£
(*
±r
, 
size_t
 
Àn
);

544 
CRYPTO_£t_mem_debug_›ti⁄s
(
bôs
);

545 
CRYPTO_gë_mem_debug_›ti⁄s
();

547 
	#CRYPTO_push_öfo
(
öfo
) \

548 
	`CRYPTO_push_öfo_
(
öfo
, 
__FILE__
, 
__LINE__
);

	)

549 
CRYPTO_push_öfo_
(c⁄° *
öfo
, c⁄° *
fûe
, 
löe
);

550 
CRYPTO_p›_öfo
();

551 
CRYPTO_ªmove_Æl_öfo
();

563 
CRYPTO_dbg_mÆloc
(*
addr
, 
num
, c⁄° *
fûe
, 
löe
,

564 
bef‹e_p
);

565 
CRYPTO_dbg_ªÆloc
(*
addr1
, *
addr2
, 
num
, c⁄° *
fûe
,

566 
löe
, 
bef‹e_p
);

567 
CRYPTO_dbg_‰ì
(*
addr
, 
bef‹e_p
);

577 
CRYPTO_dbg_£t_›ti⁄s
(
bôs
);

578 
CRYPTO_dbg_gë_›ti⁄s
();

580 #i‚de‡
OPENSSL_NO_FP_API


581 
CRYPTO_mem_Àaks_Â
(
FILE
 *);

583 
CRYPTO_mem_Àaks
(
bio_°
 *
bio
);

585 *
	tCRYPTO_MEM_LEAK_CB
 (, const *, , ,

587 
CRYPTO_mem_Àaks_cb
(
CRYPTO_MEM_LEAK_CB
 *
cb
);

590 
O≥nSSLDõ
(c⁄° *
fûe
, 
löe
, c⁄° *
as£πi⁄
);

591 
	#OPENSSL_as£π
(
e
Ë()(”Ë? 0 : (
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, #e),1))

	)

593 *
OPENSSL_ü32ˇp_loc
();

594 
	#OPENSSL_ü32ˇp
 (*(
	`OPENSSL_ü32ˇp_loc
()))

	)

595 
OPENSSL_is£rvi˚
();

597 
FIPS_mode
();

598 
FIPS_mode_£t
(
r
);

600 
OPENSSL_öô
();

602 
	#fùs_md_öô
(
Æg
Ë
	`fùs_md_öô_˘x
◊lg,álg)

	)

603 
	#n⁄fùs_md_öô
(
Æg
Ë
	`n⁄fùs_md_öô_˘x
◊lg,álg)

	)

604 
	#fùs_md_öô_˘x
(
Æg
, 
cx
) \

605 
Æg
##
	`_Inô
(
cx
##
_CTX
 *
c
)

	)

607 #ifde‡
OPENSSL_FIPS


608 
	#n⁄fùs_md_öô_˘x
(
Æg
, 
cx
) \

609 
Æg
##
	`_Inô
(
cx
##
_CTX
 *
c
) \

611 i‡(
	`FIPS_mode
()Ë
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, \

613  
¥iv©e_
##
Æg
##
	`_Inô
(
c
); \

615 
¥iv©e_
##
Æg
##
	`_Inô
(
cx
##
_CTX
 *
c
)

	)

617 
	#fùs_cùhî_ab‹t
(
Æg
) \

618 i‡(
	`FIPS_mode
()Ë
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, \

619 "Cùhî " #Æg " f‹biddí i¿FIPS mode!")

	)

622 
FIPS_£l·e°_check
();

625 
	#n⁄fùs_md_öô_˘x
(
Æg
, 
cx
Ë
	`fùs_md_öô_˘x
◊lg, cx)

	)

626 
	#fùs_cùhî_ab‹t
(
Æg
Ë0)

	)

636 
CRYPTO_memcmp
(c⁄° vﬁ©ûê*
a
, c⁄° vﬁ©ûê*
b
, 
size_t
 
Àn
);

643 
ERR_lﬂd_CRYPTO_°rögs
();

645 
	#OPENSSL_HAVE_INIT
 1

	)

646 
OPENSSL_öô_libøry
();

651 
	#CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX
 100

	)

652 
	#CRYPTO_F_CRYPTO_GET_NEW_DYNLOCKID
 103

	)

653 
	#CRYPTO_F_CRYPTO_GET_NEW_LOCKID
 101

	)

654 
	#CRYPTO_F_CRYPTO_SET_EX_DATA
 102

	)

655 
	#CRYPTO_F_DEF_ADD_INDEX
 104

	)

656 
	#CRYPTO_F_DEF_GET_CLASS
 105

	)

657 
	#CRYPTO_F_FIPS_MODE_SET
 109

	)

658 
	#CRYPTO_F_INT_DUP_EX_DATA
 106

	)

659 
	#CRYPTO_F_INT_FREE_EX_DATA
 107

	)

660 
	#CRYPTO_F_INT_NEW_EX_DATA
 108

	)

663 
	#CRYPTO_R_FIPS_MODE_NOT_SUPPORTED
 101

	)

664 
	#CRYPTO_R_NO_DYNLOCK_CREATE_CALLBACK
 100

	)

666 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ct.h

10 #i‚de‡
HEADER_CT_H


11 
	#HEADER_CT_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #i‚de‡
OPENSSL_NO_CT


16 
	~<›ís¶/os¶_typ.h
>

17 
	~<›ís¶/ß„°ack.h
>

18 
	~<›ís¶/x509.h
>

19 #ifde‡ 
__˝lu•lus


25 
	#SCT_MIN_RSA_BITS
 2048

	)

28 
	#CT_V1_HASHLEN
 
SHA256_DIGEST_LENGTH


	)

31 
CT_LOG_ENTRY_TYPE_NOT_SET
 = -1,

32 
CT_LOG_ENTRY_TYPE_X509
 = 0,

33 
CT_LOG_ENTRY_TYPE_PRECERT
 = 1

34 } 
	t˘_log_íåy_ty≥_t
;

37 
SCT_VERSION_NOT_SET
 = -1,

38 
SCT_VERSION_V1
 = 0

39 } 
	ts˘_vîsi⁄_t
;

42 
SCT_SOURCE_UNKNOWN
,

43 
SCT_SOURCE_TLS_EXTENSION
,

44 
SCT_SOURCE_X509V3_EXTENSION
,

45 
SCT_SOURCE_OCSP_STAPLED_RESPONSE


46 } 
	ts˘_sour˚_t
;

49 
SCT_VALIDATION_STATUS_NOT_SET
,

50 
SCT_VALIDATION_STATUS_UNKNOWN_LOG
,

51 
SCT_VALIDATION_STATUS_VALID
,

52 
SCT_VALIDATION_STATUS_INVALID
,

53 
SCT_VALIDATION_STATUS_UNVERIFIED
,

54 
SCT_VALIDATION_STATUS_UNKNOWN_VERSION


55 } 
	ts˘_vÆid©i⁄_°©us_t
;

57 
DEFINE_STACK_OF
(
SCT
)

58 
DEFINE_STACK_OF
(
CTLOG
)

65 
CT_POLICY_EVAL_CTX
 *
CT_POLICY_EVAL_CTX_√w
();

68 
CT_POLICY_EVAL_CTX_‰ì
(
CT_POLICY_EVAL_CTX
 *
˘x
);

71 
X509
* 
CT_POLICY_EVAL_CTX_gë0_˚π
(c⁄° 
CT_POLICY_EVAL_CTX
 *
˘x
);

74 
CT_POLICY_EVAL_CTX_£t0_˚π
(
CT_POLICY_EVAL_CTX
 *
˘x
, 
X509
 *
˚π
);

77 
X509
* 
CT_POLICY_EVAL_CTX_gë0_issuî
(c⁄° 
CT_POLICY_EVAL_CTX
 *
˘x
);

80 
CT_POLICY_EVAL_CTX_£t0_issuî
(
CT_POLICY_EVAL_CTX
 *
˘x
, 
X509
 *
issuî
);

83 c⁄° 
CTLOG_STORE
 *
CT_POLICY_EVAL_CTX_gë0_log_°‹e
(c⁄° 
CT_POLICY_EVAL_CTX
 *
˘x
);

86 
CT_POLICY_EVAL_CTX_£t0_log_°‹e
(
CT_POLICY_EVAL_CTX
 *
˘x
,

87 
CTLOG_STORE
 *
log_°‹e
);

97 
SCT
 *
SCT_√w
();

103 
SCT
 *
SCT_√w_‰om_ba£64
(
vîsi⁄
,

104 c⁄° *
logid_ba£64
,

105 
˘_log_íåy_ty≥_t
 
íåy_ty≥
,

106 
uöt64_t
 
time°amp
,

107 c⁄° *
exãnsi⁄s_ba£64
,

108 c⁄° *
sig«tuª_ba£64
);

113 
SCT_‰ì
(
SCT
 *
s˘
);

119 
SCT_LIST_‰ì
(
STACK_OF
(
SCT
Ë*
a
);

124 
s˘_vîsi⁄_t
 
SCT_gë_vîsi⁄
(c⁄° 
SCT
 *
s˘
);

130 
__owur
 
SCT_£t_vîsi⁄
(
SCT
 *
s˘
, 
s˘_vîsi⁄_t
 
vîsi⁄
);

135 
˘_log_íåy_ty≥_t
 
SCT_gë_log_íåy_ty≥
(c⁄° 
SCT
 *
s˘
);

141 
__owur
 
SCT_£t_log_íåy_ty≥
(
SCT
 *
s˘
, 
˘_log_íåy_ty≥_t
 
íåy_ty≥
);

148 
size_t
 
SCT_gë0_log_id
(c⁄° 
SCT
 *
s˘
, **
log_id
);

155 
__owur
 
SCT_£t0_log_id
(
SCT
 *
s˘
, *
log_id
, 
size_t
 
log_id_Àn
);

162 
__owur
 
SCT_£t1_log_id
(
SCT
 *
s˘
, c⁄° *
log_id
,

163 
size_t
 
log_id_Àn
);

168 
uöt64_t
 
SCT_gë_time°amp
(c⁄° 
SCT
 *
s˘
);

173 
SCT_£t_time°amp
(
SCT
 *
s˘
, 
uöt64_t
 
time°amp
);

180 
SCT_gë_sig«tuª_nid
(c⁄° 
SCT
 *
s˘
);

188 
__owur
 
SCT_£t_sig«tuª_nid
(
SCT
 *
s˘
, 
nid
);

195 
size_t
 
SCT_gë0_exãnsi⁄s
(c⁄° 
SCT
 *
s˘
, **
ext
);

201 
SCT_£t0_exãnsi⁄s
(
SCT
 *
s˘
, *
ext
, 
size_t
 
ext_Àn
);

208 
__owur
 
SCT_£t1_exãnsi⁄s
(
SCT
 *
s˘
, c⁄° *
ext
,

209 
size_t
 
ext_Àn
);

216 
size_t
 
SCT_gë0_sig«tuª
(c⁄° 
SCT
 *
s˘
, **
sig
);

222 
SCT_£t0_sig«tuª
(
SCT
 *
s˘
, *
sig
, 
size_t
 
sig_Àn
);

228 
__owur
 
SCT_£t1_sig«tuª
(
SCT
 *
s˘
, c⁄° *
sig
,

229 
size_t
 
sig_Àn
);

234 
s˘_sour˚_t
 
SCT_gë_sour˚
(c⁄° 
SCT
 *
s˘
);

240 
__owur
 
SCT_£t_sour˚
(
SCT
 *
s˘
, 
s˘_sour˚_t
 
sour˚
);

245 c⁄° *
SCT_vÆid©i⁄_°©us_°rög
(c⁄° 
SCT
 *
s˘
);

253 
SCT_¥öt
(c⁄° 
SCT
 *
s˘
, 
BIO
 *
out
, 
ödít
, c⁄° 
CTLOG_STORE
 *
logs
);

262 
SCT_LIST_¥öt
(c⁄° 
STACK_OF
(
SCT
Ë*
s˘_li°
, 
BIO
 *
out
, 
ödít
,

263 c⁄° *
£∑øt‹
, c⁄° 
CTLOG_STORE
 *
logs
);

269 
__owur
 
SCT_vîify
(c⁄° 
SCT_CTX
 *
s˘x
, c⁄° 
SCT
 *
s˘
);

275 
__owur
 
SCT_vîify_v1
(
SCT
 *
s˘
, 
X509
 *
˚π
, X509 *
¥eissuî
,

276 
X509_PUBKEY
 *
log_pubkey
, 
X509
 *
issuî_˚π
);

282 
s˘_vÆid©i⁄_°©us_t
 
SCT_gë_vÆid©i⁄_°©us
(c⁄° 
SCT
 *
s˘
);

291 
__owur
 
SCT_vÆid©e
(
SCT
 *
s˘
, c⁄° 
CT_POLICY_EVAL_CTX
 *
˘x
);

300 
__owur
 
SCT_LIST_vÆid©e
(c⁄° 
STACK_OF
(
SCT
Ë*
s˘s
,

301 
CT_POLICY_EVAL_CTX
 *
˘x
);

320 
__owur
 
i2o_SCT_LIST
(c⁄° 
STACK_OF
(
SCT
Ë*
a
, **
µ
);

332 
STACK_OF
(
SCT
Ë*
o2i_SCT_LIST
(STACK_OF(SCTË**
a
, c⁄° **
µ
,

333 
size_t
 
Àn
);

347 
__owur
 
i2d_SCT_LIST
(c⁄° 
STACK_OF
(
SCT
Ë*
a
, **
µ
);

359 
STACK_OF
(
SCT
Ë*
d2i_SCT_LIST
(STACK_OF(SCTË**
a
, c⁄° **
µ
,

360 
Àn
);

371 
__owur
 
i2o_SCT
(c⁄° 
SCT
 *
s˘
, **
out
);

384 
SCT
 *
o2i_SCT
(SCT **
ps˘
, c⁄° **
ö
, 
size_t
 
Àn
);

394 
__owur
 
i2o_SCT_sig«tuª
(c⁄° 
SCT
 *
s˘
, **
out
);

403 
__owur
 
o2i_SCT_sig«tuª
(
SCT
 *
s˘
, c⁄° **
ö
, 
size_t
 
Àn
);

413 
CTLOG
 *
CTLOG_√w
(
EVP_PKEY
 *
public_key
, c⁄° *
«me
);

419 
CTLOG
 *
CTLOG_√w_nuŒ
();

425 
CTLOG
 *
CTLOG_√w_‰om_ba£64
(c⁄° *
pkey_ba£64
, c⁄° *
«me
);

430 
CTLOG_‰ì
(
CTLOG
 *
log
);

433 c⁄° *
CTLOG_gë0_«me
(c⁄° 
CTLOG
 *
log
);

435 
CTLOG_gë0_log_id
(c⁄° 
CTLOG
 *
log
, c⁄° 
uöt8_t
 **
log_id
,

436 
size_t
 *
log_id_Àn
);

438 
EVP_PKEY
 *
CTLOG_gë0_public_key
(c⁄° 
CTLOG
 *
log
);

448 
CTLOG_STORE
 *
CTLOG_STORE_√w
();

453 
CTLOG_STORE_‰ì
(
CTLOG_STORE
 *
°‹e
);

459 c⁄° 
CTLOG
 *
CTLOG_STORE_gë0_log_by_id
(c⁄° 
CTLOG_STORE
 *
°‹e
,

460 c⁄° 
uöt8_t
 *
log_id
,

461 
size_t
 
log_id_Àn
);

467 
__owur
 
CTLOG_STORE_lﬂd_fûe
(
CTLOG_STORE
 *
°‹e
, c⁄° *
fûe
);

475 
__owur
 
CTLOG_STORE_lﬂd_deÁu…_fûe
(
CTLOG_STORE
 *
°‹e
);

483 
ERR_lﬂd_CT_°rögs
();

488 
	#CT_F_CTLOG_NEW
 117

	)

489 
	#CT_F_CTLOG_NEW_FROM_BASE64
 118

	)

490 
	#CT_F_CTLOG_NEW_FROM_CONF
 119

	)

491 
	#CT_F_CTLOG_NEW_NULL
 120

	)

492 
	#CT_F_CTLOG_STORE_LOAD_CTX_NEW
 122

	)

493 
	#CT_F_CTLOG_STORE_LOAD_FILE
 123

	)

494 
	#CT_F_CT_BASE64_DECODE
 124

	)

495 
	#CT_F_CT_POLICY_EVAL_CTX_NEW
 133

	)

496 
	#CT_F_CT_V1_LOG_ID_FROM_PKEY
 125

	)

497 
	#CT_F_I2O_SCT
 107

	)

498 
	#CT_F_I2O_SCT_LIST
 108

	)

499 
	#CT_F_I2O_SCT_SIGNATURE
 109

	)

500 
	#CT_F_O2I_SCT
 110

	)

501 
	#CT_F_O2I_SCT_LIST
 111

	)

502 
	#CT_F_O2I_SCT_SIGNATURE
 112

	)

503 
	#CT_F_SCT_CTX_NEW
 126

	)

504 
	#CT_F_SCT_NEW
 100

	)

505 
	#CT_F_SCT_NEW_FROM_BASE64
 127

	)

506 
	#CT_F_SCT_SET0_LOG_ID
 101

	)

507 
	#CT_F_SCT_SET1_EXTENSIONS
 114

	)

508 
	#CT_F_SCT_SET1_LOG_ID
 115

	)

509 
	#CT_F_SCT_SET1_SIGNATURE
 116

	)

510 
	#CT_F_SCT_SET_LOG_ENTRY_TYPE
 102

	)

511 
	#CT_F_SCT_SET_SIGNATURE_NID
 103

	)

512 
	#CT_F_SCT_SET_VERSION
 104

	)

513 
	#CT_F_SCT_VERIFY
 128

	)

514 
	#CT_F_SCT_VERIFY_V1
 129

	)

517 
	#CT_R_BASE64_DECODE_ERROR
 108

	)

518 
	#CT_R_INVALID_LOG_ID_LENGTH
 100

	)

519 
	#CT_R_LOG_CONF_INVALID
 109

	)

520 
	#CT_R_LOG_CONF_INVALID_KEY
 110

	)

521 
	#CT_R_LOG_CONF_MISSING_DESCRIPTION
 111

	)

522 
	#CT_R_LOG_CONF_MISSING_KEY
 112

	)

523 
	#CT_R_LOG_KEY_INVALID
 113

	)

524 
	#CT_R_SCT_INVALID
 104

	)

525 
	#CT_R_SCT_INVALID_SIGNATURE
 107

	)

526 
	#CT_R_SCT_LIST_INVALID
 105

	)

527 
	#CT_R_SCT_LOG_ID_MISMATCH
 114

	)

528 
	#CT_R_SCT_NOT_SET
 106

	)

529 
	#CT_R_SCT_UNSUPPORTED_VERSION
 115

	)

530 
	#CT_R_UNRECOGNIZED_SIGNATURE_NID
 101

	)

531 
	#CT_R_UNSUPPORTED_ENTRY_TYPE
 102

	)

532 
	#CT_R_UNSUPPORTED_VERSION
 103

	)

534 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/des.h

59 #i‚de‡
HEADER_NEW_DES_H


60 
	#HEADER_NEW_DES_H


	)

62 
	~<›ís¶/e_os2.h
>

65 #ifde‡
OPENSSL_NO_DES


66 #îr‹ 
DES
 
is
 
dißbÀd
.

69 #ifde‡
OPENSSL_BUILD_SHLIBCRYPTO


70 #unde‡
OPENSSL_EXTERN


71 
	#OPENSSL_EXTERN
 
OPENSSL_EXPORT


	)

74 #ifde‡ 
__˝lu•lus


78 
	tDES_cblock
[8];

79 
	tc⁄°_DES_cblock
[8];

85 
	sDES_ks
 {

87 
DES_cblock
 
cblock
;

91 
DES_LONG
 
de¶⁄g
[2];

92 } 
ks
[16];

93 } 
	tDES_key_scheduÀ
;

95 #i‚de‡
OPENSSL_DISABLE_OLD_DES_SUPPORT


96 #i‚de‡
OPENSSL_ENABLE_OLD_DES_SUPPORT


97 
	#OPENSSL_ENABLE_OLD_DES_SUPPORT


	)

101 #ifde‡
OPENSSL_ENABLE_OLD_DES_SUPPORT


102 
	~<›ís¶/des_ﬁd.h
>

105 
	#DES_KEY_SZ
 ((
DES_cblock
))

	)

106 
	#DES_SCHEDULE_SZ
 ((
DES_key_scheduÀ
))

	)

108 
	#DES_ENCRYPT
 1

	)

109 
	#DES_DECRYPT
 0

	)

111 
	#DES_CBC_MODE
 0

	)

112 
	#DES_PCBC_MODE
 1

	)

114 
	#DES_ecb2_í¸y±
(
i
,
o
,
k1
,
k2
,
e
) \

115 
	`DES_ecb3_í¸y±
((
i
),(
o
),(
k1
),(
k2
),(k1),(
e
))

	)

117 
	#DES_ede2_cbc_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
e
) \

118 
	`DES_ede3_cbc_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
e
))

	)

120 
	#DES_ede2_cfb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
n
,
e
) \

121 
	`DES_ede3_cfb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
n
),(
e
))

	)

123 
	#DES_ede2_ofb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
n
) \

124 
	`DES_ede3_ofb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
n
))

	)

126 
OPENSSL_DECLARE_GLOBAL
(, 
DES_check_key
);

127 
	#DES_check_key
 
	`OPENSSL_GLOBAL_REF
(
DES_check_key
)

	)

128 
OPENSSL_DECLARE_GLOBAL
(, 
DES_rw_mode
);

129 
	#DES_rw_mode
 
	`OPENSSL_GLOBAL_REF
(
DES_rw_mode
)

	)

131 c⁄° *
DES_›ti⁄s
();

132 
DES_ecb3_í¸y±
(
c⁄°_DES_cblock
 *
öput
, 
DES_cblock
 *
ouçut
,

133 
DES_key_scheduÀ
 *
ks1
, DES_key_scheduÀ *
ks2
,

134 
DES_key_scheduÀ
 *
ks3
, 
íc
);

135 
DES_LONG
 
DES_cbc_cksum
(c⁄° *
öput
, 
DES_cblock
 *
ouçut
,

136 
Àngth
, 
DES_key_scheduÀ
 *
scheduÀ
,

137 
c⁄°_DES_cblock
 *
ivec
);

139 
DES_cbc_í¸y±
(c⁄° *
öput
, *
ouçut
,

140 
Àngth
, 
DES_key_scheduÀ
 *
scheduÀ
,

141 
DES_cblock
 *
ivec
, 
íc
);

142 
DES_ncbc_í¸y±
(c⁄° *
öput
, *
ouçut
,

143 
Àngth
, 
DES_key_scheduÀ
 *
scheduÀ
,

144 
DES_cblock
 *
ivec
, 
íc
);

145 
DES_xcbc_í¸y±
(c⁄° *
öput
, *
ouçut
,

146 
Àngth
, 
DES_key_scheduÀ
 *
scheduÀ
,

147 
DES_cblock
 *
ivec
, 
c⁄°_DES_cblock
 *
öw
,

148 
c⁄°_DES_cblock
 *
outw
, 
íc
);

149 
DES_cfb_í¸y±
(c⁄° *
ö
, *
out
, 
numbôs
,

150 
Àngth
, 
DES_key_scheduÀ
 *
scheduÀ
,

151 
DES_cblock
 *
ivec
, 
íc
);

152 
DES_ecb_í¸y±
(
c⁄°_DES_cblock
 *
öput
, 
DES_cblock
 *
ouçut
,

153 
DES_key_scheduÀ
 *
ks
, 
íc
);

165 
DES_í¸y±1
(
DES_LONG
 *
d©a
, 
DES_key_scheduÀ
 *
ks
, 
íc
);

175 
DES_í¸y±2
(
DES_LONG
 *
d©a
, 
DES_key_scheduÀ
 *
ks
, 
íc
);

177 
DES_í¸y±3
(
DES_LONG
 *
d©a
, 
DES_key_scheduÀ
 *
ks1
,

178 
DES_key_scheduÀ
 *
ks2
, DES_key_scheduÀ *
ks3
);

179 
DES_de¸y±3
(
DES_LONG
 *
d©a
, 
DES_key_scheduÀ
 *
ks1
,

180 
DES_key_scheduÀ
 *
ks2
, DES_key_scheduÀ *
ks3
);

181 
DES_ede3_cbc_í¸y±
(c⁄° *
öput
, *
ouçut
,

182 
Àngth
,

183 
DES_key_scheduÀ
 *
ks1
, DES_key_scheduÀ *
ks2
,

184 
DES_key_scheduÀ
 *
ks3
, 
DES_cblock
 *
ivec
, 
íc
);

185 
DES_ede3_cbcm_í¸y±
(c⁄° *
ö
, *
out
,

186 
Àngth
,

187 
DES_key_scheduÀ
 *
ks1
, DES_key_scheduÀ *
ks2
,

188 
DES_key_scheduÀ
 *
ks3
,

189 
DES_cblock
 *
ivec1
, DES_cblock *
ivec2
, 
íc
);

190 
DES_ede3_cfb64_í¸y±
(c⁄° *
ö
, *
out
,

191 
Àngth
, 
DES_key_scheduÀ
 *
ks1
,

192 
DES_key_scheduÀ
 *
ks2
, DES_key_scheduÀ *
ks3
,

193 
DES_cblock
 *
ivec
, *
num
, 
íc
);

194 
DES_ede3_cfb_í¸y±
(c⁄° *
ö
, *
out
,

195 
numbôs
, 
Àngth
, 
DES_key_scheduÀ
 *
ks1
,

196 
DES_key_scheduÀ
 *
ks2
, DES_key_scheduÀ *
ks3
,

197 
DES_cblock
 *
ivec
, 
íc
);

198 
DES_ede3_ofb64_í¸y±
(c⁄° *
ö
, *
out
,

199 
Àngth
, 
DES_key_scheduÀ
 *
ks1
,

200 
DES_key_scheduÀ
 *
ks2
, DES_key_scheduÀ *
ks3
,

201 
DES_cblock
 *
ivec
, *
num
);

203 
DES_xwhôe_ö2out
(
c⁄°_DES_cblock
 *
DES_key
, c⁄°_DES_cblock *
ö_whôe
,

204 
DES_cblock
 *
out_whôe
);

207 
DES_íc_ªad
(
fd
, *
buf
, 
Àn
, 
DES_key_scheduÀ
 *
sched
,

208 
DES_cblock
 *
iv
);

209 
DES_íc_wrôe
(
fd
, c⁄° *
buf
, 
Àn
, 
DES_key_scheduÀ
 *
sched
,

210 
DES_cblock
 *
iv
);

211 *
DES_f¸y±
(c⁄° *
buf
, c⁄° *
ß…
, *
ªt
);

212 *
DES_¸y±
(c⁄° *
buf
, c⁄° *
ß…
);

213 
DES_ofb_í¸y±
(c⁄° *
ö
, *
out
, 
numbôs
,

214 
Àngth
, 
DES_key_scheduÀ
 *
scheduÀ
,

215 
DES_cblock
 *
ivec
);

216 
DES_pcbc_í¸y±
(c⁄° *
öput
, *
ouçut
,

217 
Àngth
, 
DES_key_scheduÀ
 *
scheduÀ
,

218 
DES_cblock
 *
ivec
, 
íc
);

219 
DES_LONG
 
DES_quad_cksum
(c⁄° *
öput
, 
DES_cblock
 
ouçut
[],

220 
Àngth
, 
out_cou¡
, 
DES_cblock
 *
£ed
);

221 
DES_øndom_key
(
DES_cblock
 *
ªt
);

222 
DES_£t_odd_∑rôy
(
DES_cblock
 *
key
);

223 
DES_check_key_∑rôy
(
c⁄°_DES_cblock
 *
key
);

224 
DES_is_wók_key
(
c⁄°_DES_cblock
 *
key
);

230 
DES_£t_key
(
c⁄°_DES_cblock
 *
key
, 
DES_key_scheduÀ
 *
scheduÀ
);

231 
DES_key_sched
(
c⁄°_DES_cblock
 *
key
, 
DES_key_scheduÀ
 *
scheduÀ
);

232 
DES_£t_key_checked
(
c⁄°_DES_cblock
 *
key
, 
DES_key_scheduÀ
 *
scheduÀ
);

233 
DES_£t_key_unchecked
(
c⁄°_DES_cblock
 *
key
, 
DES_key_scheduÀ
 *
scheduÀ
);

234 
DES_°rög_to_key
(c⁄° *
°r
, 
DES_cblock
 *
key
);

235 
DES_°rög_to_2keys
(c⁄° *
°r
, 
DES_cblock
 *
key1
, DES_cblock *
key2
);

236 
DES_cfb64_í¸y±
(c⁄° *
ö
, *
out
,

237 
Àngth
, 
DES_key_scheduÀ
 *
scheduÀ
,

238 
DES_cblock
 *
ivec
, *
num
, 
íc
);

239 
DES_ofb64_í¸y±
(c⁄° *
ö
, *
out
,

240 
Àngth
, 
DES_key_scheduÀ
 *
scheduÀ
,

241 
DES_cblock
 *
ivec
, *
num
);

243 
DES_ªad_∑ssw‹d
(
DES_cblock
 *
key
, c⁄° *
¥om±
, 
vîify
);

244 
DES_ªad_2∑ssw‹ds
(
DES_cblock
 *
key1
, DES_cblock *
key2
,

245 c⁄° *
¥om±
, 
vîify
);

247 
	#DES_fixup_key_∑rôy
 
DES_£t_odd_∑rôy


	)

249 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dh.h

59 #i‚de‡
HEADER_DH_H


60 
	#HEADER_DH_H


	)

62 
	~<›ís¶/e_os2.h
>

64 #ifde‡
OPENSSL_NO_DH


65 #îr‹ 
DH
 
is
 
dißbÀd
.

68 #i‚de‡
OPENSSL_NO_BIO


69 
	~<›ís¶/bio.h
>

71 
	~<›ís¶/os¶_typ.h
>

72 #i‚de‡
OPENSSL_NO_DEPRECATED


73 
	~<›ís¶/bn.h
>

76 #i‚de‡
OPENSSL_DH_MAX_MODULUS_BITS


77 
	#OPENSSL_DH_MAX_MODULUS_BITS
 10000

	)

80 
	#OPENSSL_DH_FIPS_MIN_MODULUS_BITS
 1024

	)

81 
	#OPENSSL_DH_FIPS_MIN_MODULUS_BITS_GEN
 2048

	)

83 
	#DH_FLAG_CACHE_MONT_P
 0x01

	)

93 
	#DH_FLAG_NO_EXP_CONSTTIME
 0x02

	)

102 
	#DH_FLAG_FIPS_METHOD
 0x0400

	)

110 
	#DH_FLAG_NON_FIPS_ALLOW
 0x0400

	)

112 #ifde‡ 
__˝lu•lus


120 
	sdh_mëhod
 {

121 c⁄° *
«me
;

123 (*
gíî©e_key
Ë(
DH
 *
dh
);

124 (*
compuã_key
Ë(*
key
, c⁄° 
BIGNUM
 *
pub_key
, 
DH
 *
dh
);

126 (*
bn_mod_exp
Ë(c⁄° 
DH
 *
dh
, 
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

127 c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
,

128 
BN_MONT_CTX
 *
m_˘x
);

129 (*
öô
Ë(
DH
 *
dh
);

130 (*
föish
Ë(
DH
 *
dh
);

131 
Êags
;

132 *
≠p_d©a
;

134 (*
gíî©e_∑øms
Ë(
DH
 *
dh
, 
¥ime_Àn
, 
gíî©‹
,

135 
BN_GENCB
 *
cb
);

138 
	sdh_°
 {

143 
∑d
;

144 
vîsi⁄
;

145 
BIGNUM
 *
p
;

146 
BIGNUM
 *
g
;

147 
Àngth
;

148 
BIGNUM
 *
pub_key
;

149 
BIGNUM
 *
¥iv_key
;

150 
Êags
;

151 
BN_MONT_CTX
 *
mëhod_m⁄t_p
;

153 
BIGNUM
 *
q
;

154 
BIGNUM
 *
j
;

155 *
£ed
;

156 
£edÀn
;

157 
BIGNUM
 *
cou¡î
;

158 
ª„ªn˚s
;

159 
CRYPTO_EX_DATA
 
ex_d©a
;

160 c⁄° 
DH_METHOD
 *
mëh
;

161 
ENGINE
 *
ígöe
;

164 
	#DH_GENERATOR_2
 2

	)

166 
	#DH_GENERATOR_5
 5

	)

169 
	#DH_CHECK_P_NOT_PRIME
 0x01

	)

170 
	#DH_CHECK_P_NOT_SAFE_PRIME
 0x02

	)

171 
	#DH_UNABLE_TO_CHECK_GENERATOR
 0x04

	)

172 
	#DH_NOT_SUITABLE_GENERATOR
 0x08

	)

173 
	#DH_CHECK_Q_NOT_PRIME
 0x10

	)

174 
	#DH_CHECK_INVALID_Q_VALUE
 0x20

	)

175 
	#DH_CHECK_INVALID_J_VALUE
 0x40

	)

178 
	#DH_CHECK_PUBKEY_TOO_SMALL
 0x01

	)

179 
	#DH_CHECK_PUBKEY_TOO_LARGE
 0x02

	)

180 
	#DH_CHECK_PUBKEY_INVALID
 0x04

	)

186 
	#DH_CHECK_P_NOT_STRONG_PRIME
 
DH_CHECK_P_NOT_SAFE_PRIME


	)

188 
	#d2i_DH∑øms_Â
(
Â
,
x
Ë(
DH
 *)
	`ASN1_d2i_Â
((*(*)())
DH_√w
, \

189 (*(*)())
d2i_DH∑øms
,(
Â
),(**)(
x
))

	)

190 
	#i2d_DH∑øms_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_DH∑øms
,(fp), \

191 (*)(
x
))

	)

192 
	#d2i_DH∑øms_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
DH
,
DH_√w
,
d2i_DH∑øms
,bp,x)

	)

193 
	#i2d_DH∑øms_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
DH
,
i2d_DH∑øms
,bp,x)

	)

195 
DH
 *
DH∑øms_dup
(DH *);

197 c⁄° 
DH_METHOD
 *
DH_O≥nSSL
();

199 
DH_£t_deÁu…_mëhod
(c⁄° 
DH_METHOD
 *
mëh
);

200 c⁄° 
DH_METHOD
 *
DH_gë_deÁu…_mëhod
();

201 
DH_£t_mëhod
(
DH
 *
dh
, c⁄° 
DH_METHOD
 *
mëh
);

202 
DH
 *
DH_√w_mëhod
(
ENGINE
 *
ígöe
);

204 
DH
 *
DH_√w
();

205 
DH_‰ì
(
DH
 *
dh
);

206 
DH_up_ªf
(
DH
 *
dh
);

207 
DH_size
(c⁄° 
DH
 *
dh
);

208 
DH_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

209 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

210 
DH_£t_ex_d©a
(
DH
 *
d
, 
idx
, *
¨g
);

211 *
DH_gë_ex_d©a
(
DH
 *
d
, 
idx
);

214 #i‚de‡
OPENSSL_NO_DEPRECATED


215 
DH
 *
DH_gíî©e_∑ømëîs
(
¥ime_Àn
, 
gíî©‹
,

216 (*
ˇŒback
Ë(, , *), *
cb_¨g
);

220 
DH_gíî©e_∑ømëîs_ex
(
DH
 *
dh
, 
¥ime_Àn
, 
gíî©‹
,

221 
BN_GENCB
 *
cb
);

223 
DH_check
(c⁄° 
DH
 *
dh
, *
codes
);

224 
DH_check_pub_key
(c⁄° 
DH
 *
dh
, c⁄° 
BIGNUM
 *
pub_key
, *
codes
);

225 
DH_gíî©e_key
(
DH
 *
dh
);

226 
DH_compuã_key
(*
key
, c⁄° 
BIGNUM
 *
pub_key
, 
DH
 *
dh
);

227 
DH_compuã_key_∑dded
(*
key
, c⁄° 
BIGNUM
 *
pub_key
, 
DH
 *
dh
);

228 
DH
 *
d2i_DH∑øms
(DH **
a
, c⁄° **
µ
, 
Àngth
);

229 
i2d_DH∑øms
(c⁄° 
DH
 *
a
, **
µ
);

230 
DH
 *
d2i_DHx∑øms
(DH **
a
, c⁄° **
µ
, 
Àngth
);

231 
i2d_DHx∑øms
(c⁄° 
DH
 *
a
, **
µ
);

232 #i‚de‡
OPENSSL_NO_FP_API


233 
DH∑øms_¥öt_Â
(
FILE
 *
Â
, c⁄° 
DH
 *
x
);

235 #i‚de‡
OPENSSL_NO_BIO


236 
DH∑øms_¥öt
(
BIO
 *
bp
, c⁄° 
DH
 *
x
);

238 
DH∑øms_¥öt
(*
bp
, c⁄° 
DH
 *
x
);

242 
DH
 *
DH_gë_1024_160
();

243 
DH
 *
DH_gë_2048_224
();

244 
DH
 *
DH_gë_2048_256
();

247 
DH_KDF_X9_42
(*
out
, 
size_t
 
ouéí
,

248 c⁄° *
Z
, 
size_t
 
ZÀn
,

249 
ASN1_OBJECT
 *
key_oid
,

250 c⁄° *
ukm
, 
size_t
 
ukmÀn
, c⁄° 
EVP_MD
 *
md
);

252 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_¥ime_Àn
(
˘x
, 
Àn
) \

253 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

254 
EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN
, 
Àn
, 
NULL
)

	)

256 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_sub¥ime_Àn
(
˘x
, 
Àn
) \

257 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

258 
EVP_PKEY_CTRL_DH_PARAMGEN_SUBPRIME_LEN
, 
Àn
, 
NULL
)

	)

260 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_ty≥
(
˘x
, 
typ
) \

261 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

262 
EVP_PKEY_CTRL_DH_PARAMGEN_TYPE
, 
typ
, 
NULL
)

	)

264 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_gíî©‹
(
˘x
, 
gí
) \

265 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

266 
EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR
, 
gí
, 
NULL
)

	)

268 
	#EVP_PKEY_CTX_£t_dh_rfc5114
(
˘x
, 
gí
) \

269 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, 
EVP_PKEY_OP_PARAMGEN
, \

270 
EVP_PKEY_CTRL_DH_RFC5114
, 
gí
, 
NULL
)

	)

272 
	#EVP_PKEY_CTX_£t_dhx_rfc5114
(
˘x
, 
gí
) \

273 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, 
EVP_PKEY_OP_PARAMGEN
, \

274 
EVP_PKEY_CTRL_DH_RFC5114
, 
gí
, 
NULL
)

	)

276 
	#EVP_PKEY_CTX_£t_dh_kdf_ty≥
(
˘x
, 
kdf
) \

277 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

278 
EVP_PKEY_OP_DERIVE
, \

279 
EVP_PKEY_CTRL_DH_KDF_TYPE
, 
kdf
, 
NULL
)

	)

281 
	#EVP_PKEY_CTX_gë_dh_kdf_ty≥
(
˘x
) \

282 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

283 
EVP_PKEY_OP_DERIVE
, \

284 
EVP_PKEY_CTRL_DH_KDF_TYPE
, -2, 
NULL
)

	)

286 
	#EVP_PKEY_CTX_£t0_dh_kdf_oid
(
˘x
, 
oid
) \

287 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

288 
EVP_PKEY_OP_DERIVE
, \

289 
EVP_PKEY_CTRL_DH_KDF_OID
, 0, (*)
oid
)

	)

291 
	#EVP_PKEY_CTX_gë0_dh_kdf_oid
(
˘x
, 
poid
) \

292 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

293 
EVP_PKEY_OP_DERIVE
, \

294 
EVP_PKEY_CTRL_GET_DH_KDF_OID
, 0, (*)
poid
)

	)

296 
	#EVP_PKEY_CTX_£t_dh_kdf_md
(
˘x
, 
md
) \

297 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

298 
EVP_PKEY_OP_DERIVE
, \

299 
EVP_PKEY_CTRL_DH_KDF_MD
, 0, (*)
md
)

	)

301 
	#EVP_PKEY_CTX_gë_dh_kdf_md
(
˘x
, 
pmd
) \

302 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

303 
EVP_PKEY_OP_DERIVE
, \

304 
EVP_PKEY_CTRL_GET_DH_KDF_MD
, 0, (*)
pmd
)

	)

306 
	#EVP_PKEY_CTX_£t_dh_kdf_ouéí
(
˘x
, 
Àn
) \

307 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

308 
EVP_PKEY_OP_DERIVE
, \

309 
EVP_PKEY_CTRL_DH_KDF_OUTLEN
, 
Àn
, 
NULL
)

	)

311 
	#EVP_PKEY_CTX_gë_dh_kdf_ouéí
(
˘x
, 
∂í
) \

312 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

313 
EVP_PKEY_OP_DERIVE
, \

314 
EVP_PKEY_CTRL_GET_DH_KDF_OUTLEN
, 0, (*)
∂í
)

	)

316 
	#EVP_PKEY_CTX_£t0_dh_kdf_ukm
(
˘x
, 
p
, 
∂í
) \

317 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

318 
EVP_PKEY_OP_DERIVE
, \

319 
EVP_PKEY_CTRL_DH_KDF_UKM
, 
∂í
, (*)
p
)

	)

321 
	#EVP_PKEY_CTX_gë0_dh_kdf_ukm
(
˘x
, 
p
) \

322 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

323 
EVP_PKEY_OP_DERIVE
, \

324 
EVP_PKEY_CTRL_GET_DH_KDF_UKM
, 0, (*)
p
)

	)

326 
	#EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

327 
	#EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

328 
	#EVP_PKEY_CTRL_DH_RFC5114
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

329 
	#EVP_PKEY_CTRL_DH_PARAMGEN_SUBPRIME_LEN
 (
EVP_PKEY_ALG_CTRL
 + 4)

	)

330 
	#EVP_PKEY_CTRL_DH_PARAMGEN_TYPE
 (
EVP_PKEY_ALG_CTRL
 + 5)

	)

331 
	#EVP_PKEY_CTRL_DH_KDF_TYPE
 (
EVP_PKEY_ALG_CTRL
 + 6)

	)

332 
	#EVP_PKEY_CTRL_DH_KDF_MD
 (
EVP_PKEY_ALG_CTRL
 + 7)

	)

333 
	#EVP_PKEY_CTRL_GET_DH_KDF_MD
 (
EVP_PKEY_ALG_CTRL
 + 8)

	)

334 
	#EVP_PKEY_CTRL_DH_KDF_OUTLEN
 (
EVP_PKEY_ALG_CTRL
 + 9)

	)

335 
	#EVP_PKEY_CTRL_GET_DH_KDF_OUTLEN
 (
EVP_PKEY_ALG_CTRL
 + 10)

	)

336 
	#EVP_PKEY_CTRL_DH_KDF_UKM
 (
EVP_PKEY_ALG_CTRL
 + 11)

	)

337 
	#EVP_PKEY_CTRL_GET_DH_KDF_UKM
 (
EVP_PKEY_ALG_CTRL
 + 12)

	)

338 
	#EVP_PKEY_CTRL_DH_KDF_OID
 (
EVP_PKEY_ALG_CTRL
 + 13)

	)

339 
	#EVP_PKEY_CTRL_GET_DH_KDF_OID
 (
EVP_PKEY_ALG_CTRL
 + 14)

	)

342 
	#EVP_PKEY_DH_KDF_NONE
 1

	)

343 
	#EVP_PKEY_DH_KDF_X9_42
 2

	)

350 
ERR_lﬂd_DH_°rögs
();

355 
	#DH_F_COMPUTE_KEY
 102

	)

356 
	#DH_F_DHPARAMS_PRINT_FP
 101

	)

357 
	#DH_F_DH_BUILTIN_GENPARAMS
 106

	)

358 
	#DH_F_DH_CMS_DECRYPT
 117

	)

359 
	#DH_F_DH_CMS_SET_PEERKEY
 118

	)

360 
	#DH_F_DH_CMS_SET_SHARED_INFO
 119

	)

361 
	#DH_F_DH_COMPUTE_KEY
 114

	)

362 
	#DH_F_DH_GENERATE_KEY
 115

	)

363 
	#DH_F_DH_GENERATE_PARAMETERS_EX
 116

	)

364 
	#DH_F_DH_NEW_METHOD
 105

	)

365 
	#DH_F_DH_PARAM_DECODE
 107

	)

366 
	#DH_F_DH_PRIV_DECODE
 110

	)

367 
	#DH_F_DH_PRIV_ENCODE
 111

	)

368 
	#DH_F_DH_PUB_DECODE
 108

	)

369 
	#DH_F_DH_PUB_ENCODE
 109

	)

370 
	#DH_F_DO_DH_PRINT
 100

	)

371 
	#DH_F_GENERATE_KEY
 103

	)

372 
	#DH_F_GENERATE_PARAMETERS
 104

	)

373 
	#DH_F_PKEY_DH_DERIVE
 112

	)

374 
	#DH_F_PKEY_DH_KEYGEN
 113

	)

377 
	#DH_R_BAD_GENERATOR
 101

	)

378 
	#DH_R_BN_DECODE_ERROR
 109

	)

379 
	#DH_R_BN_ERROR
 106

	)

380 
	#DH_R_DECODE_ERROR
 104

	)

381 
	#DH_R_INVALID_PUBKEY
 102

	)

382 
	#DH_R_KDF_PARAMETER_ERROR
 112

	)

383 
	#DH_R_KEYS_NOT_SET
 108

	)

384 
	#DH_R_KEY_SIZE_TOO_SMALL
 110

	)

385 
	#DH_R_MODULUS_TOO_LARGE
 103

	)

386 
	#DH_R_NON_FIPS_METHOD
 111

	)

387 
	#DH_R_NO_PARAMETERS_SET
 107

	)

388 
	#DH_R_NO_PRIVATE_VALUE
 100

	)

389 
	#DH_R_PARAMETER_ENCODING_ERROR
 105

	)

390 
	#DH_R_PEER_KEY_ERROR
 113

	)

391 
	#DH_R_SHARED_INFO_ERROR
 114

	)

393 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dsa.h

65 #i‚de‡
HEADER_DSA_H


66 
	#HEADER_DSA_H


	)

68 
	~<›ís¶/e_os2.h
>

70 #ifde‡
OPENSSL_NO_DSA


71 #îr‹ 
DSA
 
is
 
dißbÀd
.

74 #i‚de‡
OPENSSL_NO_BIO


75 
	~<›ís¶/bio.h
>

77 
	~<›ís¶/¸y±o.h
>

78 
	~<›ís¶/os¶_typ.h
>

80 #i‚de‡
OPENSSL_NO_DEPRECATED


81 
	~<›ís¶/bn.h
>

82 #i‚de‡
OPENSSL_NO_DH


83 
	~<›ís¶/dh.h
>

87 #i‚de‡
OPENSSL_DSA_MAX_MODULUS_BITS


88 
	#OPENSSL_DSA_MAX_MODULUS_BITS
 10000

	)

91 
	#OPENSSL_DSA_FIPS_MIN_MODULUS_BITS
 1024

	)

92 
	#OPENSSL_DSA_FIPS_MIN_MODULUS_BITS_GEN
 (
	`gëív
("OPENSSL_ENFORCE_MODULUS_BITS")?2048:1024)

	)

94 
	#DSA_FLAG_CACHE_MONT_P
 0x01

	)

100 
	#DSA_FLAG_NO_EXP_CONSTTIME
 0x02

	)

109 
	#DSA_FLAG_FIPS_METHOD
 0x0400

	)

117 
	#DSA_FLAG_NON_FIPS_ALLOW
 0x0400

	)

118 
	#DSA_FLAG_FIPS_CHECKED
 0x0800

	)

120 #ifde‡ 
__˝lu•lus


128 
	sDSA_SIG_°
 {

129 
BIGNUM
 *
r
;

130 
BIGNUM
 *
s
;

131 } 
	tDSA_SIG
;

133 
	sdß_mëhod
 {

134 c⁄° *
«me
;

135 
DSA_SIG
 *(*
dß_do_sign
Ë(c⁄° *
dg°
, 
dÀn
, 
DSA
 *
dß
);

136 (*
dß_sign_£tup
Ë(
DSA
 *
dß
, 
BN_CTX
 *
˘x_ö
, 
BIGNUM
 **
kövp
,

137 
BIGNUM
 **
Ω
);

138 (*
dß_do_vîify
Ë(c⁄° *
dg°
, 
dg°_Àn
,

139 
DSA_SIG
 *
sig
, 
DSA
 *
dß
);

140 (*
dß_mod_exp
Ë(
DSA
 *
dß
, 
BIGNUM
 *
º
, BIGNUM *
a1
, BIGNUM *
p1
,

141 
BIGNUM
 *
a2
, BIGNUM *
p2
, BIGNUM *
m
, 
BN_CTX
 *
˘x
,

142 
BN_MONT_CTX
 *
ö_m⁄t
);

144 (*
bn_mod_exp
Ë(
DSA
 *
dß
, 
BIGNUM
 *
r
, BIGNUM *
a
, c⁄° BIGNUM *
p
,

145 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

146 (*
öô
Ë(
DSA
 *
dß
);

147 (*
föish
Ë(
DSA
 *
dß
);

148 
Êags
;

149 *
≠p_d©a
;

151 (*
dß_∑ømgí
Ë(
DSA
 *
dß
, 
bôs
,

152 c⁄° *
£ed
, 
£ed_Àn
,

153 *
cou¡î_ªt
, *
h_ªt
,

154 
BN_GENCB
 *
cb
);

156 (*
dß_keygí
Ë(
DSA
 *
dß
);

159 
	sdß_°
 {

164 
∑d
;

165 
vîsi⁄
;

166 
wrôe_∑øms
;

167 
BIGNUM
 *
p
;

168 
BIGNUM
 *
q
;

169 
BIGNUM
 *
g
;

170 
BIGNUM
 *
pub_key
;

171 
BIGNUM
 *
¥iv_key
;

172 
BIGNUM
 *
köv
;

173 
BIGNUM
 *
r
;

174 
Êags
;

176 
BN_MONT_CTX
 *
mëhod_m⁄t_p
;

177 
ª„ªn˚s
;

178 
CRYPTO_EX_DATA
 
ex_d©a
;

179 c⁄° 
DSA_METHOD
 *
mëh
;

181 
ENGINE
 *
ígöe
;

184 
	#d2i_DSA∑øms_Â
(
Â
,
x
Ë(
DSA
 *)
	`ASN1_d2i_Â
((*(*)())
DSA_√w
, \

185 (*(*)())
d2i_DSA∑øms
,(
Â
),(**)(
x
))

	)

186 
	#i2d_DSA∑øms_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_DSA∑øms
,(fp), \

187 (*)(
x
))

	)

188 
	#d2i_DSA∑øms_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
DSA
,
DSA_√w
,
d2i_DSA∑øms
,bp,x)

	)

189 
	#i2d_DSA∑øms_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
DSA
,
i2d_DSA∑øms
,bp,x)

	)

191 
DSA
 *
DSA∑øms_dup
(DSA *
x
);

192 
DSA_SIG
 *
DSA_SIG_√w
();

193 
DSA_SIG_‰ì
(
DSA_SIG
 *
a
);

194 
i2d_DSA_SIG
(c⁄° 
DSA_SIG
 *
a
, **
µ
);

195 
DSA_SIG
 *
d2i_DSA_SIG
(DSA_SIG **
v
, c⁄° **
µ
, 
Àngth
);

197 
DSA_SIG
 *
DSA_do_sign
(c⁄° *
dg°
, 
dÀn
, 
DSA
 *
dß
);

198 
DSA_do_vîify
(c⁄° *
dg°
, 
dg°_Àn
,

199 
DSA_SIG
 *
sig
, 
DSA
 *
dß
);

201 c⁄° 
DSA_METHOD
 *
DSA_O≥nSSL
();

203 
DSA_£t_deÁu…_mëhod
(c⁄° 
DSA_METHOD
 *);

204 c⁄° 
DSA_METHOD
 *
DSA_gë_deÁu…_mëhod
();

205 
DSA_£t_mëhod
(
DSA
 *
dß
, c⁄° 
DSA_METHOD
 *);

207 
DSA
 *
DSA_√w
();

208 
DSA
 *
DSA_√w_mëhod
(
ENGINE
 *
ígöe
);

209 
DSA_‰ì
(
DSA
 *
r
);

211 
DSA_up_ªf
(
DSA
 *
r
);

212 
DSA_size
(c⁄° 
DSA
 *);

214 
DSA_sign_£tup
(
DSA
 *
dß
, 
BN_CTX
 *
˘x_ö
, 
BIGNUM
 **
kövp
, BIGNUM **
Ω
);

215 
DSA_sign
(
ty≥
, c⁄° *
dg°
, 
dÀn
,

216 *
sig
, *
sigÀn
, 
DSA
 *
dß
);

217 
DSA_vîify
(
ty≥
, c⁄° *
dg°
, 
dg°_Àn
,

218 c⁄° *
sigbuf
, 
sigÀn
, 
DSA
 *
dß
);

219 
DSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

220 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

221 
DSA_£t_ex_d©a
(
DSA
 *
d
, 
idx
, *
¨g
);

222 *
DSA_gë_ex_d©a
(
DSA
 *
d
, 
idx
);

224 
DSA
 *
d2i_DSAPublicKey
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

225 
DSA
 *
d2i_DSAPriv©eKey
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

226 
DSA
 *
d2i_DSA∑øms
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

229 #i‚de‡
OPENSSL_NO_DEPRECATED


230 
DSA
 *
DSA_gíî©e_∑ømëîs
(
bôs
,

231 *
£ed
, 
£ed_Àn
,

232 *
cou¡î_ªt
, *
h_ªt
, 

233 (*
ˇŒback
Ë(, , *), *
cb_¨g
);

237 
DSA_gíî©e_∑ømëîs_ex
(
DSA
 *
dß
, 
bôs
,

238 c⁄° *
£ed
, 
£ed_Àn
,

239 *
cou¡î_ªt
, *
h_ªt
,

240 
BN_GENCB
 *
cb
);

242 
DSA_gíî©e_key
(
DSA
 *
a
);

243 
i2d_DSAPublicKey
(c⁄° 
DSA
 *
a
, **
µ
);

244 
i2d_DSAPriv©eKey
(c⁄° 
DSA
 *
a
, **
µ
);

245 
i2d_DSA∑øms
(c⁄° 
DSA
 *
a
, **
µ
);

247 #i‚de‡
OPENSSL_NO_BIO


248 
DSA∑øms_¥öt
(
BIO
 *
bp
, c⁄° 
DSA
 *
x
);

249 
DSA_¥öt
(
BIO
 *
bp
, c⁄° 
DSA
 *
x
, 
off
);

251 #i‚de‡
OPENSSL_NO_FP_API


252 
DSA∑øms_¥öt_Â
(
FILE
 *
Â
, c⁄° 
DSA
 *
x
);

253 
DSA_¥öt_Â
(
FILE
 *
bp
, c⁄° 
DSA
 *
x
, 
off
);

256 
	#DSS_¥ime_checks
 64

	)

261 
	#DSA_is_¥ime
(
n
, 
ˇŒback
, 
cb_¨g
) \

262 
	`BN_is_¥ime
(
n
, 
DSS_¥ime_checks
, 
ˇŒback
, 
NULL
, 
cb_¨g
)

	)

264 #i‚de‡
OPENSSL_NO_DH


269 
DH
 *
DSA_dup_DH
(c⁄° 
DSA
 *
r
);

272 
	#EVP_PKEY_CTX_£t_dß_∑ømgí_bôs
(
˘x
, 
nbôs
) \

273 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DSA
, 
EVP_PKEY_OP_PARAMGEN
, \

274 
EVP_PKEY_CTRL_DSA_PARAMGEN_BITS
, 
nbôs
, 
NULL
)

	)

276 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_BITS
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

277 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

278 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_MD
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

285 
ERR_lﬂd_DSA_°rögs
();

290 
	#DSA_F_D2I_DSA_SIG
 110

	)

291 
	#DSA_F_DO_DSA_PRINT
 104

	)

292 
	#DSA_F_DSAPARAMS_PRINT
 100

	)

293 
	#DSA_F_DSAPARAMS_PRINT_FP
 101

	)

294 
	#DSA_F_DSA_BUILTIN_PARAMGEN2
 126

	)

295 
	#DSA_F_DSA_DO_SIGN
 112

	)

296 
	#DSA_F_DSA_DO_VERIFY
 113

	)

297 
	#DSA_F_DSA_GENERATE_KEY
 124

	)

298 
	#DSA_F_DSA_GENERATE_PARAMETERS_EX
 123

	)

299 
	#DSA_F_DSA_NEW_METHOD
 103

	)

300 
	#DSA_F_DSA_PARAM_DECODE
 119

	)

301 
	#DSA_F_DSA_PRINT_FP
 105

	)

302 
	#DSA_F_DSA_PRIV_DECODE
 115

	)

303 
	#DSA_F_DSA_PRIV_ENCODE
 116

	)

304 
	#DSA_F_DSA_PUB_DECODE
 117

	)

305 
	#DSA_F_DSA_PUB_ENCODE
 118

	)

306 
	#DSA_F_DSA_SIGN
 106

	)

307 
	#DSA_F_DSA_SIGN_SETUP
 107

	)

308 
	#DSA_F_DSA_SIG_NEW
 109

	)

309 
	#DSA_F_DSA_SIG_PRINT
 125

	)

310 
	#DSA_F_DSA_VERIFY
 108

	)

311 
	#DSA_F_I2D_DSA_SIG
 111

	)

312 
	#DSA_F_OLD_DSA_PRIV_DECODE
 122

	)

313 
	#DSA_F_PKEY_DSA_CTRL
 120

	)

314 
	#DSA_F_PKEY_DSA_KEYGEN
 121

	)

315 
	#DSA_F_SIG_CB
 114

	)

316 
	#DSA_F_DSA_BUILTIN_KEYGEN
 200

	)

317 
	#DSA_F_DSA_BUILTIN_PARAMGEN
 201

	)

320 
	#DSA_R_BAD_Q_VALUE
 102

	)

321 
	#DSA_R_BN_DECODE_ERROR
 108

	)

322 
	#DSA_R_BN_ERROR
 109

	)

323 
	#DSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 100

	)

324 
	#DSA_R_DECODE_ERROR
 104

	)

325 
	#DSA_R_INVALID_DIGEST_TYPE
 106

	)

326 
	#DSA_R_INVALID_PARAMETERS
 112

	)

327 
	#DSA_R_MISSING_PARAMETERS
 101

	)

328 
	#DSA_R_MODULUS_TOO_LARGE
 103

	)

329 
	#DSA_R_NEED_NEW_SETUP_VALUES
 110

	)

330 
	#DSA_R_NON_FIPS_DSA_METHOD
 111

	)

331 
	#DSA_R_NO_PARAMETERS_SET
 107

	)

332 
	#DSA_R_PARAMETER_ENCODING_ERROR
 105

	)

333 
	#DSA_R_Q_NOT_PRIME
 113

	)

334 
	#DSA_R_KEY_SIZE_INVALID
 200

	)

335 
	#DSA_R_KEY_SIZE_TOO_SMALL
 201

	)

337 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dtls1.h

60 #i‚de‡
HEADER_DTLS1_H


61 
	#HEADER_DTLS1_H


	)

63 
	~<›ís¶/buf„r.h
>

64 
	~<›ís¶/pqueue.h
>

65 #ifde‡
OPENSSL_SYS_VMS


66 
	~<ªsour˚.h
>

67 
	~<sys/timeb.h
>

69 #ifde‡
OPENSSL_SYS_WIN32


71 
	~<wösock.h
>

72 #ñi‡
deföed
(
OPENSSL_SYS_NETWARE
Ë&& !deföed(
_WINSOCK2API_
)

73 
	~<sys/timevÆ.h
>

75 #i‡
deföed
(
OPENSSL_SYS_VXWORKS
)

76 
	~<sys/times.h
>

78 
	~<sys/time.h
>

82 #ifde‡ 
__˝lu•lus


86 
	#DTLS1_VERSION
 0xFEFF

	)

87 
	#DTLS1_2_VERSION
 0xFEFD

	)

88 
	#DTLS_MAX_VERSION
 
DTLS1_2_VERSION


	)

89 
	#DTLS1_VERSION_MAJOR
 0xFE

	)

91 
	#DTLS1_BAD_VER
 0x0100

	)

94 
	#DTLS_ANY_VERSION
 0x1FFFF

	)

98 
	#DTLS1_AD_MISSING_HANDSHAKE_MESSAGE
 110

	)

102 
	#DTLS1_COOKIE_LENGTH
 256

	)

104 
	#DTLS1_RT_HEADER_LENGTH
 13

	)

106 
	#DTLS1_HM_HEADER_LENGTH
 12

	)

108 
	#DTLS1_HM_BAD_FRAGMENT
 -2

	)

109 
	#DTLS1_HM_FRAGMENT_RETRY
 -3

	)

111 
	#DTLS1_CCS_HEADER_LENGTH
 1

	)

113 #ifde‡
DTLS1_AD_MISSING_HANDSHAKE_MESSAGE


114 
	#DTLS1_AL_HEADER_LENGTH
 7

	)

116 
	#DTLS1_AL_HEADER_LENGTH
 2

	)

119 #i‚de‡
OPENSSL_NO_SSL_INTERN


121 #i‚de‡
OPENSSL_NO_SCTP


122 
	#DTLS1_SCTP_AUTH_LABEL
 "EXPORTER_DTLS_OVER_SCTP"

	)

126 
	#DTLS1_MAX_MTU_OVERHEAD
 48

	)

128 
	sdés1_bôm≠_°
 {

129 
m≠
;

131 
max_£q_num
[8];

133 } 
	tDTLS1_BITMAP
;

135 
	sdés1_ªå™smô_°©e
 {

136 
EVP_CIPHER_CTX
 *
íc_wrôe_˘x
;

137 
EVP_MD_CTX
 *
wrôe_hash
;

138 #i‚de‡
OPENSSL_NO_COMP


139 
COMP_CTX
 *
com¥ess
;

141 *
com¥ess
;

143 
SSL_SESSION
 *
£ssi⁄
;

144 
ïoch
;

147 
	shm_hódî_°
 {

148 
ty≥
;

149 
msg_Àn
;

150 
£q
;

151 
‰ag_off
;

152 
‰ag_Àn
;

153 
is_ccs
;

154 
dés1_ªå™smô_°©e
 
ßved_ªå™smô_°©e
;

157 
	sccs_hódî_°
 {

158 
ty≥
;

159 
£q
;

162 
	sdés1_timeout_°
 {

164 
ªad_timeouts
;

166 
wrôe_timeouts
;

168 
num_Æîts
;

171 
	sªc‹d_pqueue_°
 {

172 
ïoch
;

173 
pqueue
 
q
;

174 } 
	tªc‹d_pqueue
;

176 
	shm_‰agmít_°
 {

177 
hm_hódî_°
 
msg_hódî
;

178 *
‰agmít
;

179 *
ªas£mbly
;

180 } 
	thm_‰agmít
;

182 
	sdés1_°©e_°
 {

183 
£nd_cookõ
;

184 
cookõ
[
DTLS1_COOKIE_LENGTH
];

185 
rcvd_cookõ
[
DTLS1_COOKIE_LENGTH
];

186 
cookõ_Àn
;

192 
r_ïoch
;

193 
w_ïoch
;

195 
DTLS1_BITMAP
 
bôm≠
;

197 
DTLS1_BITMAP
 
√xt_bôm≠
;

199 
h™dshake_wrôe_£q
;

200 
√xt_h™dshake_wrôe_£q
;

201 
h™dshake_ªad_£q
;

203 
œ°_wrôe_£quí˚
[8];

205 
ªc‹d_pqueue
 
u≈ro˚s£d_rcds
;

206 
ªc‹d_pqueue
 
¥o˚s£d_rcds
;

208 
pqueue
 
buf„ªd_mesßges
;

210 
pqueue
 
£¡_mesßges
;

216 
ªc‹d_pqueue
 
buf„ªd_≠p_d©a
;

218 
li°í
;

219 
lök_mtu
;

220 
mtu
;

221 
hm_hódî_°
 
w_msg_hdr
;

222 
hm_hódî_°
 
r_msg_hdr
;

223 
dés1_timeout_°
 
timeout
;

227 
timevÆ
 
√xt_timeout
;

229 
timeout_duøti⁄
;

234 
Æît_‰agmít
[
DTLS1_AL_HEADER_LENGTH
];

235 
Æît_‰agmít_Àn
;

236 
h™dshake_‰agmít
[
DTLS1_HM_HEADER_LENGTH
];

237 
h™dshake_‰agmít_Àn
;

238 
ªå™smôtög
;

243 
ch™ge_cùhî_•ec_ok
;

244 #i‚de‡
OPENSSL_NO_SCTP


246 
√xt_°©e
;

247 
shutdown_ª˚ived
;

249 } 
	tDTLS1_STATE
;

251 
	sdés1_ªc‹d_d©a_°
 {

252 *
∑ckë
;

253 
∑ckë_Àngth
;

254 
SSL3_BUFFER
 
rbuf
;

255 
SSL3_RECORD
 
ºec
;

256 #i‚de‡
OPENSSL_NO_SCTP


257 
bio_dgøm_s˘p_rcvöfo
 
ªc‹döfo
;

259 } 
	tDTLS1_RECORD_DATA
;

264 
	#DTLS1_TMO_READ_COUNT
 2

	)

265 
	#DTLS1_TMO_WRITE_COUNT
 2

	)

267 
	#DTLS1_TMO_ALERT_COUNT
 12

	)

269 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/e_os2.h

56 
	~<›ís¶/›ís¶c⁄f.h
>

58 #i‚de‡
HEADER_E_OS2_H


59 
	#HEADER_E_OS2_H


	)

61 #ifde‡ 
__˝lu•lus


71 
	#OPENSSL_SYS_UNIX


	)

74 #i‡
deföed
(
__MWERKS__
Ë&& deföed(
macötosh
Ë|| deföed(
OPENSSL_SYSNAME_MAC
)

75 #unde‡
OPENSSL_SYS_UNIX


76 
	#OPENSSL_SYS_MACINTOSH_CLASSIC


	)

80 #i‡
deföed
(
NETWARE
Ë|| deföed(
OPENSSL_SYSNAME_NETWARE
)

81 #unde‡
OPENSSL_SYS_UNIX


82 
	#OPENSSL_SYS_NETWARE


	)

91 #i‡
deföed
(
OPENSSL_SYSNAME_MSDOS
)

92 #unde‡
OPENSSL_SYS_UNIX


93 
	#OPENSSL_SYS_MSDOS


	)

100 #i‡
deföed
(
OPENSSL_SYSNAME_UWIN
)

101 #unde‡
OPENSSL_SYS_UNIX


102 
	#OPENSSL_SYS_WIN32_UWIN


	)

104 #i‡
deföed
(
__CYGWIN__
Ë|| deföed(
OPENSSL_SYSNAME_CYGWIN
)

105 #unde‡
OPENSSL_SYS_UNIX


106 
	#OPENSSL_SYS_WIN32_CYGWIN


	)

108 #i‡
deföed
(
_WIN32
Ë|| deföed(
OPENSSL_SYSNAME_WIN32
)

109 #unde‡
OPENSSL_SYS_UNIX


110 
	#OPENSSL_SYS_WIN32


	)

112 #i‡
deföed
(
_WIN64
Ë|| deföed(
OPENSSL_SYSNAME_WIN64
)

113 #unde‡
OPENSSL_SYS_UNIX


114 #i‡!
deföed
(
OPENSSL_SYS_WIN64
)

115 
	#OPENSSL_SYS_WIN64


	)

118 #i‡
deföed
(
OPENSSL_SYSNAME_WINNT
)

119 #unde‡
OPENSSL_SYS_UNIX


120 
	#OPENSSL_SYS_WINNT


	)

122 #i‡
deföed
(
OPENSSL_SYSNAME_WINCE
)

123 #unde‡
OPENSSL_SYS_UNIX


124 
	#OPENSSL_SYS_WINCE


	)

130 #i‡
deföed
(
OPENSSL_SYS_WIN32
Ë|| deföed(
OPENSSL_SYS_WIN64
Ë|| deföed(
OPENSSL_SYS_WINNT
Ë|| deföed(
OPENSSL_SYS_WINCE
)

131 #unde‡
OPENSSL_SYS_UNIX


132 
	#OPENSSL_SYS_WINDOWS


	)

133 #i‚de‡
OPENSSL_SYS_MSDOS


134 
	#OPENSSL_SYS_MSDOS


	)

143 #ifde‡
OPENSSL_SYS_WINDOWS


144 #i‚de‡
OPENSSL_OPT_WINDLL


145 #i‡
deföed
(
_WINDLL
)

147 
	#OPENSSL_OPT_WINDLL


	)

153 #i‡
deföed
(
__VMS
Ë|| deföed(
VMS
Ë|| deföed(
OPENSSL_SYSNAME_VMS
)

154 #unde‡
OPENSSL_SYS_UNIX


155 
	#OPENSSL_SYS_VMS


	)

156 #i‡
deföed
(
__DECC
)

157 
	#OPENSSL_SYS_VMS_DECC


	)

158 #ñi‡
deföed
(
__DECCXX
)

159 
	#OPENSSL_SYS_VMS_DECC


	)

160 
	#OPENSSL_SYS_VMS_DECCXX


	)

162 
	#OPENSSL_SYS_VMS_NODECC


	)

167 #i‡
deföed
(
__EMX__
Ë|| deföed(
__OS2__
)

168 #unde‡
OPENSSL_SYS_UNIX


169 
	#OPENSSL_SYS_OS2


	)

173 #ifde‡
OPENSSL_SYS_UNIX


174 #i‡
deföed
(
löux
Ë|| deföed(
__löux__
Ë|| deföed(
OPENSSL_SYSNAME_LINUX
)

175 
	#OPENSSL_SYS_LINUX


	)

177 #ifde‡
OPENSSL_SYSNAME_MPE


178 
	#OPENSSL_SYS_MPE


	)

180 #ifde‡
OPENSSL_SYSNAME_SNI


181 
	#OPENSSL_SYS_SNI


	)

183 #ifde‡
OPENSSL_SYSNAME_ULTRASPARC


184 
	#OPENSSL_SYS_ULTRASPARC


	)

186 #ifde‡
OPENSSL_SYSNAME_NEWS4


187 
	#OPENSSL_SYS_NEWS4


	)

189 #ifde‡
OPENSSL_SYSNAME_MACOSX


190 
	#OPENSSL_SYS_MACOSX


	)

192 #ifde‡
OPENSSL_SYSNAME_MACOSX_RHAPSODY


193 
	#OPENSSL_SYS_MACOSX_RHAPSODY


	)

194 
	#OPENSSL_SYS_MACOSX


	)

196 #ifde‡
OPENSSL_SYSNAME_SUNOS


197 
	#OPENSSL_SYS_SUNOS


	)

199 #i‡
deföed
(
_CRAY
Ë|| deföed(
OPENSSL_SYSNAME_CRAY
)

200 
	#OPENSSL_SYS_CRAY


	)

202 #i‡
deföed
(
_AIX
Ë|| deföed(
OPENSSL_SYSNAME_AIX
)

203 
	#OPENSSL_SYS_AIX


	)

208 #i‡
deföed
(
__VOS__
Ë|| deföed(
OPENSSL_SYSNAME_VOS
)

209 
	#OPENSSL_SYS_VOS


	)

210 #ifde‡
__HPPA__


211 
	#OPENSSL_SYS_VOS_HPPA


	)

213 #ifde‡
__IA32__


214 
	#OPENSSL_SYS_VOS_IA32


	)

219 #ifde‡
OPENSSL_SYSNAME_VXWORKS


220 
	#OPENSSL_SYS_VXWORKS


	)

224 #i‡
deföed
(
__BEOS__
)

225 
	#OPENSSL_SYS_BEOS


	)

226 
	~<sys/sockë.h
>

227 #i‡
deföed
(
BONE_VERSION
)

228 
	#OPENSSL_SYS_BEOS_BONE


	)

230 
	#OPENSSL_SYS_BEOS_R5


	)

239 #ifde‡
OPENSSL_SYS_MSDOS


240 
	#OPENSSL_UNISTD_IO
 <
io
.
h
>

	)

241 
	#OPENSSL_DECLARE_EXIT
 
	`exô
();

	)

243 
	#OPENSSL_UNISTD_IO
 
OPENSSL_UNISTD


	)

244 
	#OPENSSL_DECLARE_EXIT


	)

267 #i‡
deföed
(
OPENSSL_SYS_VMS_NODECC
)

268 
	#OPENSSL_EXPORT
 
globÆªf


	)

269 
	#OPENSSL_IMPORT
 
globÆªf


	)

270 
	#OPENSSL_GLOBAL
 
globÆdef


	)

271 #ñi‡
deföed
(
OPENSSL_SYS_WINDOWS
Ë&& deföed(
OPENSSL_OPT_WINDLL
)

272 
	#OPENSSL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

273 
	#OPENSSL_IMPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

274 
	#OPENSSL_GLOBAL


	)

276 
	#OPENSSL_EXPORT
 

	)

277 
	#OPENSSL_IMPORT
 

	)

278 
	#OPENSSL_GLOBAL


	)

280 
	#OPENSSL_EXTERN
 
OPENSSL_IMPORT


	)

293 #ifde‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


294 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
) \

295 
ty≥
 *
_shadow_
##
	`«me
() \

296 { 
ty≥
 
_hide_
##
«me
=
vÆue
;  &_hide_##«me; }

	)

297 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ëty≥ *
_shadow_
##
	`«me
()

	)

298 
	#OPENSSL_GLOBAL_REF
(
«me
Ë(*(
_shadow_
##
	`«me
()))

	)

300 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
Ë
OPENSSL_GLOBAL
Åy≥ 
_shadow_
##«me=vÆue;

	)

301 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ë
OPENSSL_EXPORT
Åy≥ 
_shadow_
##
	)
name

302 
	#OPENSSL_GLOBAL_REF
(
«me
Ë
_shadow_
##
	)
name

305 #i‡
deföed
(
OPENSSL_SYS_MACINTOSH_CLASSIC
Ë&& 
macötosh
==1 && !deföed(
MAC_OS_GUSI_SOURCE
)

306 
	#os¶_ssize_t
 

	)

309 #ifde‡
OPENSSL_SYS_MSDOS


310 
	#os¶_ssize_t
 

	)

313 #i‡
deföed
(
NeXT
Ë|| deföed(
OPENSSL_SYS_NEWS4
Ë|| deföed(
OPENSSL_SYS_SUNOS
)

314 
	#ssize_t
 

	)

317 #i‡
deföed
(
__u…rix
Ë&& !deföed(
ssize_t
)

318 
	#os¶_ssize_t
 

	)

321 #i‚de‡
os¶_ssize_t


322 
	#os¶_ssize_t
 
ssize_t


	)

325 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ebcdic.h

3 #i‚de‡
HEADER_EBCDIC_H


4 
	#HEADER_EBCDIC_H


	)

6 
	~<sys/ty≥s.h
>

8 #ifde‡ 
__˝lu•lus


13 
	#os_tﬂscii
 
_›ís¶_os_tﬂscii


	)

14 
	#os_t€bcdic
 
_›ís¶_os_t€bcdic


	)

15 
	#ebcdic2ascii
 
_›ís¶_ebcdic2ascii


	)

16 
	#ascii2ebcdic
 
_›ís¶_ascii2ebcdic


	)

18 c⁄° 
os_tﬂscii
[256];

19 c⁄° 
os_t€bcdic
[256];

20 *
ebcdic2ascii
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

21 *
ascii2ebcdic
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

23 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ec.h

76 #i‚de‡
HEADER_EC_H


77 
	#HEADER_EC_H


	)

79 
	~<›ís¶/›ís¶c⁄f.h
>

81 #ifde‡
OPENSSL_NO_EC


82 #îr‹ 
EC
 
is
 
dißbÀd
.

85 
	~<›ís¶/a¢1.h
>

86 
	~<›ís¶/symhacks.h
>

87 #i‚de‡
OPENSSL_NO_DEPRECATED


88 
	~<›ís¶/bn.h
>

91 #ifde‡ 
__˝lu•lus


93 #ñi‡
deföed
(
__SUNPRO_C
)

94 #i‡
__SUNPRO_C
 >= 0x520

95 #¥agm®
îr‹_mesßges
 (
off
,
E_ARRAY_OF_INCOMPLETE_NONAME
,
E_ARRAY_OF_INCOMPLETE
)

99 #i‚de‡
OPENSSL_ECC_MAX_FIELD_BITS


100 
	#OPENSSL_ECC_MAX_FIELD_BITS
 661

	)

108 
POINT_CONVERSION_COMPRESSED
 = 2,

110 
POINT_CONVERSION_UNCOMPRESSED
 = 4,

113 
POINT_CONVERSION_HYBRID
 = 6

114 } 
	tpoöt_c⁄vîsi⁄_f‹m_t
;

116 
ec_mëhod_°
 
	tEC_METHOD
;

118 
ec_group_°


127 
	tEC_GROUP
;

129 
ec_poöt_°
 
	tEC_POINT
;

139 c⁄° 
EC_METHOD
 *
EC_GFp_sim∂e_mëhod
();

144 c⁄° 
EC_METHOD
 *
EC_GFp_m⁄t_mëhod
();

149 c⁄° 
EC_METHOD
 *
EC_GFp_ni°_mëhod
();

151 #i‚de‡
OPENSSL_NO_EC_NISTP_64_GCC_128


155 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p224_mëhod
();

160 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p256_mëhod
();

165 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p521_mëhod
();

168 #i‚de‡
OPENSSL_NO_EC2M


176 c⁄° 
EC_METHOD
 *
EC_GF2m_sim∂e_mëhod
();

188 
EC_GROUP
 *
EC_GROUP_√w
(c⁄° 
EC_METHOD
 *
mëh
);

193 
EC_GROUP_‰ì
(
EC_GROUP
 *
group
);

198 
EC_GROUP_˛ór_‰ì
(
EC_GROUP
 *
group
);

205 
EC_GROUP_c›y
(
EC_GROUP
 *
d°
, c⁄° EC_GROUP *
§c
);

212 
EC_GROUP
 *
EC_GROUP_dup
(c⁄° EC_GROUP *
§c
);

218 c⁄° 
EC_METHOD
 *
EC_GROUP_mëhod_of
(c⁄° 
EC_GROUP
 *
group
);

224 
EC_METHOD_gë_fõld_ty≥
(c⁄° 
EC_METHOD
 *
mëh
);

234 
EC_GROUP_£t_gíî©‹
(
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
gíî©‹
,

235 c⁄° 
BIGNUM
 *
‹dî
, c⁄° BIGNUM *
coÁ˘‹
);

241 c⁄° 
EC_POINT
 *
EC_GROUP_gë0_gíî©‹
(c⁄° 
EC_GROUP
 *
group
);

247 
BN_MONT_CTX
 *
EC_GROUP_gë_m⁄t_d©a
(c⁄° 
EC_GROUP
 *
group
);

255 
EC_GROUP_gë_‹dî
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
‹dî
, 
BN_CTX
 *
˘x
);

263 
EC_GROUP_gë_coÁ˘‹
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
coÁ˘‹
,

264 
BN_CTX
 *
˘x
);

270 
EC_GROUP_£t_curve_«me
(
EC_GROUP
 *
group
, 
nid
);

276 
EC_GROUP_gë_curve_«me
(c⁄° 
EC_GROUP
 *
group
);

278 
EC_GROUP_£t_a¢1_Êag
(
EC_GROUP
 *
group
, 
Êag
);

279 
EC_GROUP_gë_a¢1_Êag
(c⁄° 
EC_GROUP
 *
group
);

281 
EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m
(
EC_GROUP
 *
group
,

282 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
);

283 
poöt_c⁄vîsi⁄_f‹m_t
 
EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m
(c⁄° 
EC_GROUP
 *);

285 *
EC_GROUP_gë0_£ed
(c⁄° 
EC_GROUP
 *
x
);

286 
size_t
 
EC_GROUP_gë_£ed_Àn
(c⁄° 
EC_GROUP
 *);

287 
size_t
 
EC_GROUP_£t_£ed
(
EC_GROUP
 *, c⁄° *, size_à
Àn
);

297 
EC_GROUP_£t_curve_GFp
(
EC_GROUP
 *
group
, c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
,

298 c⁄° 
BIGNUM
 *
b
, 
BN_CTX
 *
˘x
);

308 
EC_GROUP_gë_curve_GFp
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
p
, BIGNUM *
a
,

309 
BIGNUM
 *
b
, 
BN_CTX
 *
˘x
);

311 #i‚de‡
OPENSSL_NO_EC2M


320 
EC_GROUP_£t_curve_GF2m
(
EC_GROUP
 *
group
, c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
,

321 c⁄° 
BIGNUM
 *
b
, 
BN_CTX
 *
˘x
);

331 
EC_GROUP_gë_curve_GF2m
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
p
, BIGNUM *
a
,

332 
BIGNUM
 *
b
, 
BN_CTX
 *
˘x
);

338 
EC_GROUP_gë_degªe
(c⁄° 
EC_GROUP
 *
group
);

345 
EC_GROUP_check
(c⁄° 
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

352 
EC_GROUP_check_dis¸imö™t
(c⁄° 
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

360 
EC_GROUP_cmp
(c⁄° 
EC_GROUP
 *
a
, c⁄° EC_GROUP *
b
, 
BN_CTX
 *
˘x
);

375 
EC_GROUP
 *
EC_GROUP_√w_curve_GFp
(c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
,

376 c⁄° 
BIGNUM
 *
b
, 
BN_CTX
 *
˘x
);

377 #i‚de‡
OPENSSL_NO_EC2M


386 
EC_GROUP
 *
EC_GROUP_√w_curve_GF2m
(c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
,

387 c⁄° 
BIGNUM
 *
b
, 
BN_CTX
 *
˘x
);

394 
EC_GROUP
 *
EC_GROUP_√w_by_curve_«me
(
nid
);

401 
nid
;

402 c⁄° *
commít
;

403 } 
	tEC_buûtö_curve
;

411 
size_t
 
EC_gë_buûtö_curves
(
EC_buûtö_curve
 *
r
, size_à
nôems
);

413 c⁄° *
EC_curve_nid2ni°
(
nid
);

414 
EC_curve_ni°2nid
(c⁄° *
«me
);

424 
EC_POINT
 *
EC_POINT_√w
(c⁄° 
EC_GROUP
 *
group
);

429 
EC_POINT_‰ì
(
EC_POINT
 *
poöt
);

434 
EC_POINT_˛ór_‰ì
(
EC_POINT
 *
poöt
);

441 
EC_POINT_c›y
(
EC_POINT
 *
d°
, c⁄° EC_POINT *
§c
);

449 
EC_POINT
 *
EC_POINT_dup
(c⁄° EC_POINT *
§c
, c⁄° 
EC_GROUP
 *
group
);

455 c⁄° 
EC_METHOD
 *
EC_POINT_mëhod_of
(c⁄° 
EC_POINT
 *
poöt
);

462 
EC_POINT_£t_to_öföôy
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
poöt
);

473 
EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

474 
EC_POINT
 *
p
, c⁄° 
BIGNUM
 *
x
,

475 c⁄° 
BIGNUM
 *
y
, c⁄° BIGNUM *
z
,

476 
BN_CTX
 *
˘x
);

487 
EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

488 c⁄° 
EC_POINT
 *
p
, 
BIGNUM
 *
x
,

489 
BIGNUM
 *
y
, BIGNUM *
z
,

490 
BN_CTX
 *
˘x
);

500 
EC_POINT_£t_afföe_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

501 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
,

502 
BN_CTX
 *
˘x
);

512 
EC_POINT_gë_afföe_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

513 c⁄° 
EC_POINT
 *
p
, 
BIGNUM
 *
x
,

514 
BIGNUM
 *
y
, 
BN_CTX
 *
˘x
);

524 
EC_POINT_£t_com¥es£d_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

525 
EC_POINT
 *
p
, c⁄° 
BIGNUM
 *
x
,

526 
y_bô
, 
BN_CTX
 *
˘x
);

527 #i‚de‡
OPENSSL_NO_EC2M


536 
EC_POINT_£t_afföe_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

537 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
,

538 
BN_CTX
 *
˘x
);

548 
EC_POINT_gë_afföe_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *
group
,

549 c⁄° 
EC_POINT
 *
p
, 
BIGNUM
 *
x
,

550 
BIGNUM
 *
y
, 
BN_CTX
 *
˘x
);

560 
EC_POINT_£t_com¥es£d_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *
group
,

561 
EC_POINT
 *
p
, c⁄° 
BIGNUM
 *
x
,

562 
y_bô
, 
BN_CTX
 *
˘x
);

574 
size_t
 
EC_POINT_poöt2o˘
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
p
,

575 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
,

576 *
buf
, 
size_t
 
Àn
, 
BN_CTX
 *
˘x
);

586 
EC_POINT_o˘2poöt
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

587 c⁄° *
buf
, 
size_t
 
Àn
, 
BN_CTX
 *
˘x
);

590 
BIGNUM
 *
EC_POINT_poöt2bn
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *,

591 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
, 
BIGNUM
 *, 
BN_CTX
 *);

592 
EC_POINT
 *
EC_POINT_bn2poöt
(c⁄° 
EC_GROUP
 *, c⁄° 
BIGNUM
 *,

593 
EC_POINT
 *, 
BN_CTX
 *);

594 *
EC_POINT_poöt2hex
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *,

595 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
, 
BN_CTX
 *);

596 
EC_POINT
 *
EC_POINT_hex2poöt
(c⁄° 
EC_GROUP
 *, const *,

597 
EC_POINT
 *, 
BN_CTX
 *);

611 
EC_POINT_add
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° EC_POINT *
a
,

612 c⁄° 
EC_POINT
 *
b
, 
BN_CTX
 *
˘x
);

621 
EC_POINT_dbl
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° EC_POINT *
a
,

622 
BN_CTX
 *
˘x
);

630 
EC_POINT_övît
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
a
, 
BN_CTX
 *
˘x
);

637 
EC_POINT_is_©_öföôy
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
p
);

645 
EC_POINT_is_⁄_curve
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
poöt
,

646 
BN_CTX
 *
˘x
);

655 
EC_POINT_cmp
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
a
, c⁄° EC_POINT *
b
,

656 
BN_CTX
 *
˘x
);

658 
EC_POINT_make_afföe
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
poöt
, 
BN_CTX
 *
˘x
);

659 
EC_POINTs_make_afföe
(c⁄° 
EC_GROUP
 *
group
, 
size_t
 
num
,

660 
EC_POINT
 *
poöts
[], 
BN_CTX
 *
˘x
);

672 
EC_POINTs_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
n
,

673 
size_t
 
num
, c⁄° 
EC_POINT
 *
p
[], c⁄° 
BIGNUM
 *
m
[],

674 
BN_CTX
 *
˘x
);

685 
EC_POINT_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
n
,

686 c⁄° 
EC_POINT
 *
q
, c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

693 
EC_GROUP_¥ecompuã_mu…
(
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

699 
EC_GROUP_have_¥ecompuã_mu…
(c⁄° 
EC_GROUP
 *
group
);

709 
EC_GROUP_gë_basis_ty≥
(c⁄° 
EC_GROUP
 *);

710 #i‚de‡
OPENSSL_NO_EC2M


711 
EC_GROUP_gë_åöomül_basis
(c⁄° 
EC_GROUP
 *, *
k
);

712 
EC_GROUP_gë_≥¡™omül_basis
(c⁄° 
EC_GROUP
 *, *
k1
,

713 *
k2
, *
k3
);

716 
	#OPENSSL_EC_NAMED_CURVE
 0x001

	)

718 
e˝k_∑ømëîs_°
 
	tECPKPARAMETERS
;

720 
EC_GROUP
 *
d2i_ECPKP¨amëîs
(EC_GROUP **, c⁄° **
ö
, 
Àn
);

721 
i2d_ECPKP¨amëîs
(c⁄° 
EC_GROUP
 *, **
out
);

723 
	#d2i_ECPKP¨amëîs_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
EC_GROUP
,
NULL
,
d2i_ECPKP¨amëîs
,bp,x)

	)

724 
	#i2d_ECPKP¨amëîs_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
EC_GROUP
,
i2d_ECPKP¨amëîs
,bp,x)

	)

725 
	#d2i_ECPKP¨amëîs_Â
(
Â
,
x
Ë(
EC_GROUP
 *)
	`ASN1_d2i_Â
(
NULL
, \

726 (*(*)())
d2i_ECPKP¨amëîs
,(
Â
),(**)(
x
))

	)

727 
	#i2d_ECPKP¨amëîs_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_ECPKP¨amëîs
,(fp), \

728 (*)(
x
))

	)

730 #i‚de‡
OPENSSL_NO_BIO


731 
ECPKP¨amëîs_¥öt
(
BIO
 *
bp
, c⁄° 
EC_GROUP
 *
x
, 
off
);

733 #i‚de‡
OPENSSL_NO_FP_API


734 
ECPKP¨amëîs_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_GROUP
 *
x
, 
off
);

741 
ec_key_°
 
	tEC_KEY
;

744 
	#EC_PKEY_NO_PARAMETERS
 0x001

	)

745 
	#EC_PKEY_NO_PUBKEY
 0x002

	)

748 
	#EC_FLAG_NON_FIPS_ALLOW
 0x1

	)

749 
	#EC_FLAG_FIPS_CHECKED
 0x2

	)

754 
EC_KEY
 *
EC_KEY_√w
();

756 
EC_KEY_gë_Êags
(c⁄° 
EC_KEY
 *
key
);

758 
EC_KEY_£t_Êags
(
EC_KEY
 *
key
, 
Êags
);

760 
EC_KEY_˛ór_Êags
(
EC_KEY
 *
key
, 
Êags
);

767 
EC_KEY
 *
EC_KEY_√w_by_curve_«me
(
nid
);

772 
EC_KEY_‰ì
(
EC_KEY
 *
key
);

779 
EC_KEY
 *
EC_KEY_c›y
(EC_KEY *
d°
, c⁄° EC_KEY *
§c
);

785 
EC_KEY
 *
EC_KEY_dup
(c⁄° EC_KEY *
§c
);

791 
EC_KEY_up_ªf
(
EC_KEY
 *
key
);

797 c⁄° 
EC_GROUP
 *
EC_KEY_gë0_group
(c⁄° 
EC_KEY
 *
key
);

805 
EC_KEY_£t_group
(
EC_KEY
 *
key
, c⁄° 
EC_GROUP
 *
group
);

811 c⁄° 
BIGNUM
 *
EC_KEY_gë0_¥iv©e_key
(c⁄° 
EC_KEY
 *
key
);

819 
EC_KEY_£t_¥iv©e_key
(
EC_KEY
 *
key
, c⁄° 
BIGNUM
 *
¥v
);

825 c⁄° 
EC_POINT
 *
EC_KEY_gë0_public_key
(c⁄° 
EC_KEY
 *
key
);

833 
EC_KEY_£t_public_key
(
EC_KEY
 *
key
, c⁄° 
EC_POINT
 *
pub
);

835 
EC_KEY_gë_íc_Êags
(c⁄° 
EC_KEY
 *
key
);

836 
EC_KEY_£t_íc_Êags
(
EC_KEY
 *
eckey
, 
Êags
);

837 
poöt_c⁄vîsi⁄_f‹m_t
 
EC_KEY_gë_c⁄v_f‹m
(c⁄° 
EC_KEY
 *
key
);

838 
EC_KEY_£t_c⁄v_f‹m
(
EC_KEY
 *
eckey
, 
poöt_c⁄vîsi⁄_f‹m_t
 
cf‹m
);

840 *
EC_KEY_gë_key_mëhod_d©a
(
EC_KEY
 *
key
,

841 *(*
dup_func
) (*),

842 (*
‰ì_func
) (*),

843 (*
˛ór_‰ì_func
) (*));

852 *
EC_KEY_ö£π_key_mëhod_d©a
(
EC_KEY
 *
key
, *
d©a
,

853 *(*
dup_func
) (*),

854 (*
‰ì_func
) (*),

855 (*
˛ór_‰ì_func
) (*));

857 
EC_KEY_£t_a¢1_Êag
(
EC_KEY
 *
eckey
, 
a¢1_Êag
);

865 
EC_KEY_¥ecompuã_mu…
(
EC_KEY
 *
key
, 
BN_CTX
 *
˘x
);

871 
EC_KEY_gíî©e_key
(
EC_KEY
 *
key
);

877 
EC_KEY_check_key
(c⁄° 
EC_KEY
 *
key
);

886 
EC_KEY_£t_public_key_afföe_co‹dö©es
(
EC_KEY
 *
key
, 
BIGNUM
 *
x
,

887 
BIGNUM
 *
y
);

899 
EC_KEY
 *
d2i_ECPriv©eKey
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

907 
i2d_ECPriv©eKey
(
EC_KEY
 *
key
, **
out
);

920 
EC_KEY
 *
d2i_ECP¨amëîs
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

928 
i2d_ECP¨amëîs
(
EC_KEY
 *
key
, **
out
);

942 
EC_KEY
 *
o2i_ECPublicKey
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

950 
i2o_ECPublicKey
(
EC_KEY
 *
key
, **
out
);

952 #i‚de‡
OPENSSL_NO_BIO


958 
ECP¨amëîs_¥öt
(
BIO
 *
bp
, c⁄° 
EC_KEY
 *
key
);

966 
EC_KEY_¥öt
(
BIO
 *
bp
, c⁄° 
EC_KEY
 *
key
, 
off
);

969 #i‚de‡
OPENSSL_NO_FP_API


975 
ECP¨amëîs_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_KEY
 *
key
);

983 
EC_KEY_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_KEY
 *
key
, 
off
);

987 
	#ECP¨amëîs_dup
(
x
Ë
	`ASN1_dup_of
(
EC_KEY
,
i2d_ECP¨amëîs
,
d2i_ECP¨amëîs
,x)

	)

989 #i‚de‡
__˝lu•lus


990 #i‡
deföed
(
__SUNPRO_C
)

991 #i‡
__SUNPRO_C
 >= 0x520

992 #¥agm®
îr‹_mesßges
 (,
E_ARRAY_OF_INCOMPLETE_NONAME
,
E_ARRAY_OF_INCOMPLETE
)

997 
	#EVP_PKEY_CTX_£t_ec_∑ømgí_curve_nid
(
˘x
, 
nid
) \

998 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

999 
EVP_PKEY_OP_PARAMGEN
|
EVP_PKEY_OP_KEYGEN
, \

1000 
EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID
, 
nid
, 
NULL
)

	)

1002 
	#EVP_PKEY_CTX_£t_ec_∑øm_íc
(
˘x
, 
Êag
) \

1003 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1004 
EVP_PKEY_OP_PARAMGEN
|
EVP_PKEY_OP_KEYGEN
, \

1005 
EVP_PKEY_CTRL_EC_PARAM_ENC
, 
Êag
, 
NULL
)

	)

1007 
	#EVP_PKEY_CTX_£t_ecdh_coÁ˘‹_mode
(
˘x
, 
Êag
) \

1008 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1009 
EVP_PKEY_OP_DERIVE
, \

1010 
EVP_PKEY_CTRL_EC_ECDH_COFACTOR
, 
Êag
, 
NULL
)

	)

1012 
	#EVP_PKEY_CTX_gë_ecdh_coÁ˘‹_mode
(
˘x
) \

1013 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1014 
EVP_PKEY_OP_DERIVE
, \

1015 
EVP_PKEY_CTRL_EC_ECDH_COFACTOR
, -2, 
NULL
)

	)

1017 
	#EVP_PKEY_CTX_£t_ecdh_kdf_ty≥
(
˘x
, 
kdf
) \

1018 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1019 
EVP_PKEY_OP_DERIVE
, \

1020 
EVP_PKEY_CTRL_EC_KDF_TYPE
, 
kdf
, 
NULL
)

	)

1022 
	#EVP_PKEY_CTX_gë_ecdh_kdf_ty≥
(
˘x
) \

1023 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1024 
EVP_PKEY_OP_DERIVE
, \

1025 
EVP_PKEY_CTRL_EC_KDF_TYPE
, -2, 
NULL
)

	)

1027 
	#EVP_PKEY_CTX_£t_ecdh_kdf_md
(
˘x
, 
md
) \

1028 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1029 
EVP_PKEY_OP_DERIVE
, \

1030 
EVP_PKEY_CTRL_EC_KDF_MD
, 0, (*)
md
)

	)

1032 
	#EVP_PKEY_CTX_gë_ecdh_kdf_md
(
˘x
, 
pmd
) \

1033 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1034 
EVP_PKEY_OP_DERIVE
, \

1035 
EVP_PKEY_CTRL_GET_EC_KDF_MD
, 0, (*)
pmd
)

	)

1037 
	#EVP_PKEY_CTX_£t_ecdh_kdf_ouéí
(
˘x
, 
Àn
) \

1038 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1039 
EVP_PKEY_OP_DERIVE
, \

1040 
EVP_PKEY_CTRL_EC_KDF_OUTLEN
, 
Àn
, 
NULL
)

	)

1042 
	#EVP_PKEY_CTX_gë_ecdh_kdf_ouéí
(
˘x
, 
∂í
) \

1043 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1044 
EVP_PKEY_OP_DERIVE
, \

1045 
EVP_PKEY_CTRL_GET_EC_KDF_OUTLEN
, 0, (*)
∂í
)

	)

1047 
	#EVP_PKEY_CTX_£t0_ecdh_kdf_ukm
(
˘x
, 
p
, 
∂í
) \

1048 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1049 
EVP_PKEY_OP_DERIVE
, \

1050 
EVP_PKEY_CTRL_EC_KDF_UKM
, 
∂í
, (*)
p
)

	)

1052 
	#EVP_PKEY_CTX_gë0_ecdh_kdf_ukm
(
˘x
, 
p
) \

1053 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1054 
EVP_PKEY_OP_DERIVE
, \

1055 
EVP_PKEY_CTRL_GET_EC_KDF_UKM
, 0, (*)
p
)

	)

1057 
	#EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

1058 
	#EVP_PKEY_CTRL_EC_PARAM_ENC
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

1059 
	#EVP_PKEY_CTRL_EC_ECDH_COFACTOR
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

1060 
	#EVP_PKEY_CTRL_EC_KDF_TYPE
 (
EVP_PKEY_ALG_CTRL
 + 4)

	)

1061 
	#EVP_PKEY_CTRL_EC_KDF_MD
 (
EVP_PKEY_ALG_CTRL
 + 5)

	)

1062 
	#EVP_PKEY_CTRL_GET_EC_KDF_MD
 (
EVP_PKEY_ALG_CTRL
 + 6)

	)

1063 
	#EVP_PKEY_CTRL_EC_KDF_OUTLEN
 (
EVP_PKEY_ALG_CTRL
 + 7)

	)

1064 
	#EVP_PKEY_CTRL_GET_EC_KDF_OUTLEN
 (
EVP_PKEY_ALG_CTRL
 + 8)

	)

1065 
	#EVP_PKEY_CTRL_EC_KDF_UKM
 (
EVP_PKEY_ALG_CTRL
 + 9)

	)

1066 
	#EVP_PKEY_CTRL_GET_EC_KDF_UKM
 (
EVP_PKEY_ALG_CTRL
 + 10)

	)

1068 
	#EVP_PKEY_ECDH_KDF_NONE
 1

	)

1069 
	#EVP_PKEY_ECDH_KDF_X9_62
 2

	)

1076 
ERR_lﬂd_EC_°rögs
();

1081 
	#EC_F_BN_TO_FELEM
 224

	)

1082 
	#EC_F_COMPUTE_WNAF
 143

	)

1083 
	#EC_F_D2I_ECPARAMETERS
 144

	)

1084 
	#EC_F_D2I_ECPKPARAMETERS
 145

	)

1085 
	#EC_F_D2I_ECPRIVATEKEY
 146

	)

1086 
	#EC_F_DO_EC_KEY_PRINT
 221

	)

1087 
	#EC_F_ECDH_CMS_DECRYPT
 238

	)

1088 
	#EC_F_ECDH_CMS_SET_SHARED_INFO
 239

	)

1089 
	#EC_F_ECKEY_PARAM2TYPE
 223

	)

1090 
	#EC_F_ECKEY_PARAM_DECODE
 212

	)

1091 
	#EC_F_ECKEY_PRIV_DECODE
 213

	)

1092 
	#EC_F_ECKEY_PRIV_ENCODE
 214

	)

1093 
	#EC_F_ECKEY_PUB_DECODE
 215

	)

1094 
	#EC_F_ECKEY_PUB_ENCODE
 216

	)

1095 
	#EC_F_ECKEY_TYPE2PARAM
 220

	)

1096 
	#EC_F_ECPARAMETERS_PRINT
 147

	)

1097 
	#EC_F_ECPARAMETERS_PRINT_FP
 148

	)

1098 
	#EC_F_ECPKPARAMETERS_PRINT
 149

	)

1099 
	#EC_F_ECPKPARAMETERS_PRINT_FP
 150

	)

1100 
	#EC_F_ECP_NISTZ256_GET_AFFINE
 240

	)

1101 
	#EC_F_ECP_NISTZ256_MULT_PRECOMPUTE
 243

	)

1102 
	#EC_F_ECP_NISTZ256_POINTS_MUL
 241

	)

1103 
	#EC_F_ECP_NISTZ256_PRE_COMP_NEW
 244

	)

1104 
	#EC_F_ECP_NISTZ256_SET_WORDS
 245

	)

1105 
	#EC_F_ECP_NISTZ256_WINDOWED_MUL
 242

	)

1106 
	#EC_F_ECP_NIST_MOD_192
 203

	)

1107 
	#EC_F_ECP_NIST_MOD_224
 204

	)

1108 
	#EC_F_ECP_NIST_MOD_256
 205

	)

1109 
	#EC_F_ECP_NIST_MOD_521
 206

	)

1110 
	#EC_F_EC_ASN1_GROUP2CURVE
 153

	)

1111 
	#EC_F_EC_ASN1_GROUP2FIELDID
 154

	)

1112 
	#EC_F_EC_ASN1_GROUP2PARAMETERS
 155

	)

1113 
	#EC_F_EC_ASN1_GROUP2PKPARAMETERS
 156

	)

1114 
	#EC_F_EC_ASN1_PARAMETERS2GROUP
 157

	)

1115 
	#EC_F_EC_ASN1_PKPARAMETERS2GROUP
 158

	)

1116 
	#EC_F_EC_EX_DATA_SET_DATA
 211

	)

1117 
	#EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY
 208

	)

1118 
	#EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT
 159

	)

1119 
	#EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE
 195

	)

1120 
	#EC_F_EC_GF2M_SIMPLE_OCT2POINT
 160

	)

1121 
	#EC_F_EC_GF2M_SIMPLE_POINT2OCT
 161

	)

1122 
	#EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES
 162

	)

1123 
	#EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES
 163

	)

1124 
	#EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES
 164

	)

1125 
	#EC_F_EC_GFP_MONT_FIELD_DECODE
 133

	)

1126 
	#EC_F_EC_GFP_MONT_FIELD_ENCODE
 134

	)

1127 
	#EC_F_EC_GFP_MONT_FIELD_MUL
 131

	)

1128 
	#EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE
 209

	)

1129 
	#EC_F_EC_GFP_MONT_FIELD_SQR
 132

	)

1130 
	#EC_F_EC_GFP_MONT_GROUP_SET_CURVE
 189

	)

1131 
	#EC_F_EC_GFP_MONT_GROUP_SET_CURVE_GFP
 135

	)

1132 
	#EC_F_EC_GFP_NISTP224_GROUP_SET_CURVE
 225

	)

1133 
	#EC_F_EC_GFP_NISTP224_POINTS_MUL
 228

	)

1134 
	#EC_F_EC_GFP_NISTP224_POINT_GET_AFFINE_COORDINATES
 226

	)

1135 
	#EC_F_EC_GFP_NISTP256_GROUP_SET_CURVE
 230

	)

1136 
	#EC_F_EC_GFP_NISTP256_POINTS_MUL
 231

	)

1137 
	#EC_F_EC_GFP_NISTP256_POINT_GET_AFFINE_COORDINATES
 232

	)

1138 
	#EC_F_EC_GFP_NISTP521_GROUP_SET_CURVE
 233

	)

1139 
	#EC_F_EC_GFP_NISTP521_POINTS_MUL
 234

	)

1140 
	#EC_F_EC_GFP_NISTP521_POINT_GET_AFFINE_COORDINATES
 235

	)

1141 
	#EC_F_EC_GFP_NIST_FIELD_MUL
 200

	)

1142 
	#EC_F_EC_GFP_NIST_FIELD_SQR
 201

	)

1143 
	#EC_F_EC_GFP_NIST_GROUP_SET_CURVE
 202

	)

1144 
	#EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT
 165

	)

1145 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE
 166

	)

1146 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE_GFP
 100

	)

1147 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_GENERATOR
 101

	)

1148 
	#EC_F_EC_GFP_SIMPLE_MAKE_AFFINE
 102

	)

1149 
	#EC_F_EC_GFP_SIMPLE_OCT2POINT
 103

	)

1150 
	#EC_F_EC_GFP_SIMPLE_POINT2OCT
 104

	)

1151 
	#EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE
 137

	)

1152 
	#EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES
 167

	)

1153 
	#EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES_GFP
 105

	)

1154 
	#EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES
 168

	)

1155 
	#EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES_GFP
 128

	)

1156 
	#EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES
 169

	)

1157 
	#EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES_GFP
 129

	)

1158 
	#EC_F_EC_GROUP_CHECK
 170

	)

1159 
	#EC_F_EC_GROUP_CHECK_DISCRIMINANT
 171

	)

1160 
	#EC_F_EC_GROUP_COPY
 106

	)

1161 
	#EC_F_EC_GROUP_GET0_GENERATOR
 139

	)

1162 
	#EC_F_EC_GROUP_GET_COFACTOR
 140

	)

1163 
	#EC_F_EC_GROUP_GET_CURVE_GF2M
 172

	)

1164 
	#EC_F_EC_GROUP_GET_CURVE_GFP
 130

	)

1165 
	#EC_F_EC_GROUP_GET_DEGREE
 173

	)

1166 
	#EC_F_EC_GROUP_GET_ORDER
 141

	)

1167 
	#EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS
 193

	)

1168 
	#EC_F_EC_GROUP_GET_TRINOMIAL_BASIS
 194

	)

1169 
	#EC_F_EC_GROUP_NEW
 108

	)

1170 
	#EC_F_EC_GROUP_NEW_BY_CURVE_NAME
 174

	)

1171 
	#EC_F_EC_GROUP_NEW_FROM_DATA
 175

	)

1172 
	#EC_F_EC_GROUP_PRECOMPUTE_MULT
 142

	)

1173 
	#EC_F_EC_GROUP_SET_CURVE_GF2M
 176

	)

1174 
	#EC_F_EC_GROUP_SET_CURVE_GFP
 109

	)

1175 
	#EC_F_EC_GROUP_SET_EXTRA_DATA
 110

	)

1176 
	#EC_F_EC_GROUP_SET_GENERATOR
 111

	)

1177 
	#EC_F_EC_KEY_CHECK_KEY
 177

	)

1178 
	#EC_F_EC_KEY_COPY
 178

	)

1179 
	#EC_F_EC_KEY_GENERATE_KEY
 179

	)

1180 
	#EC_F_EC_KEY_NEW
 182

	)

1181 
	#EC_F_EC_KEY_PRINT
 180

	)

1182 
	#EC_F_EC_KEY_PRINT_FP
 181

	)

1183 
	#EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES
 229

	)

1184 
	#EC_F_EC_POINTS_MAKE_AFFINE
 136

	)

1185 
	#EC_F_EC_POINT_ADD
 112

	)

1186 
	#EC_F_EC_POINT_CMP
 113

	)

1187 
	#EC_F_EC_POINT_COPY
 114

	)

1188 
	#EC_F_EC_POINT_DBL
 115

	)

1189 
	#EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M
 183

	)

1190 
	#EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP
 116

	)

1191 
	#EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP
 117

	)

1192 
	#EC_F_EC_POINT_INVERT
 210

	)

1193 
	#EC_F_EC_POINT_IS_AT_INFINITY
 118

	)

1194 
	#EC_F_EC_POINT_IS_ON_CURVE
 119

	)

1195 
	#EC_F_EC_POINT_MAKE_AFFINE
 120

	)

1196 
	#EC_F_EC_POINT_MUL
 184

	)

1197 
	#EC_F_EC_POINT_NEW
 121

	)

1198 
	#EC_F_EC_POINT_OCT2POINT
 122

	)

1199 
	#EC_F_EC_POINT_POINT2OCT
 123

	)

1200 
	#EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M
 185

	)

1201 
	#EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP
 124

	)

1202 
	#EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M
 186

	)

1203 
	#EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP
 125

	)

1204 
	#EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP
 126

	)

1205 
	#EC_F_EC_POINT_SET_TO_INFINITY
 127

	)

1206 
	#EC_F_EC_PRE_COMP_DUP
 207

	)

1207 
	#EC_F_EC_PRE_COMP_NEW
 196

	)

1208 
	#EC_F_EC_WNAF_MUL
 187

	)

1209 
	#EC_F_EC_WNAF_PRECOMPUTE_MULT
 188

	)

1210 
	#EC_F_I2D_ECPARAMETERS
 190

	)

1211 
	#EC_F_I2D_ECPKPARAMETERS
 191

	)

1212 
	#EC_F_I2D_ECPRIVATEKEY
 192

	)

1213 
	#EC_F_I2O_ECPUBLICKEY
 151

	)

1214 
	#EC_F_NISTP224_PRE_COMP_NEW
 227

	)

1215 
	#EC_F_NISTP256_PRE_COMP_NEW
 236

	)

1216 
	#EC_F_NISTP521_PRE_COMP_NEW
 237

	)

1217 
	#EC_F_O2I_ECPUBLICKEY
 152

	)

1218 
	#EC_F_OLD_EC_PRIV_DECODE
 222

	)

1219 
	#EC_F_PKEY_EC_CTRL
 197

	)

1220 
	#EC_F_PKEY_EC_CTRL_STR
 198

	)

1221 
	#EC_F_PKEY_EC_DERIVE
 217

	)

1222 
	#EC_F_PKEY_EC_KEYGEN
 199

	)

1223 
	#EC_F_PKEY_EC_PARAMGEN
 219

	)

1224 
	#EC_F_PKEY_EC_SIGN
 218

	)

1227 
	#EC_R_ASN1_ERROR
 115

	)

1228 
	#EC_R_ASN1_UNKNOWN_FIELD
 116

	)

1229 
	#EC_R_BIGNUM_OUT_OF_RANGE
 144

	)

1230 
	#EC_R_BUFFER_TOO_SMALL
 100

	)

1231 
	#EC_R_COORDINATES_OUT_OF_RANGE
 146

	)

1232 
	#EC_R_D2I_ECPKPARAMETERS_FAILURE
 117

	)

1233 
	#EC_R_DECODE_ERROR
 142

	)

1234 
	#EC_R_DISCRIMINANT_IS_ZERO
 118

	)

1235 
	#EC_R_EC_GROUP_NEW_BY_NAME_FAILURE
 119

	)

1236 
	#EC_R_FIELD_TOO_LARGE
 143

	)

1237 
	#EC_R_GF2M_NOT_SUPPORTED
 147

	)

1238 
	#EC_R_GROUP2PKPARAMETERS_FAILURE
 120

	)

1239 
	#EC_R_I2D_ECPKPARAMETERS_FAILURE
 121

	)

1240 
	#EC_R_INCOMPATIBLE_OBJECTS
 101

	)

1241 
	#EC_R_INVALID_ARGUMENT
 112

	)

1242 
	#EC_R_INVALID_COMPRESSED_POINT
 110

	)

1243 
	#EC_R_INVALID_COMPRESSION_BIT
 109

	)

1244 
	#EC_R_INVALID_CURVE
 141

	)

1245 
	#EC_R_INVALID_DIGEST
 151

	)

1246 
	#EC_R_INVALID_DIGEST_TYPE
 138

	)

1247 
	#EC_R_INVALID_ENCODING
 102

	)

1248 
	#EC_R_INVALID_FIELD
 103

	)

1249 
	#EC_R_INVALID_FORM
 104

	)

1250 
	#EC_R_INVALID_GROUP_ORDER
 122

	)

1251 
	#EC_R_INVALID_PENTANOMIAL_BASIS
 132

	)

1252 
	#EC_R_INVALID_PRIVATE_KEY
 123

	)

1253 
	#EC_R_INVALID_TRINOMIAL_BASIS
 137

	)

1254 
	#EC_R_KDF_PARAMETER_ERROR
 148

	)

1255 
	#EC_R_KEYS_NOT_SET
 140

	)

1256 
	#EC_R_MISSING_PARAMETERS
 124

	)

1257 
	#EC_R_MISSING_PRIVATE_KEY
 125

	)

1258 
	#EC_R_NOT_A_NIST_PRIME
 135

	)

1259 
	#EC_R_NOT_A_SUPPORTED_NIST_PRIME
 136

	)

1260 
	#EC_R_NOT_IMPLEMENTED
 126

	)

1261 
	#EC_R_NOT_INITIALIZED
 111

	)

1262 
	#EC_R_NO_FIELD_MOD
 133

	)

1263 
	#EC_R_NO_PARAMETERS_SET
 139

	)

1264 
	#EC_R_PASSED_NULL_PARAMETER
 134

	)

1265 
	#EC_R_PEER_KEY_ERROR
 149

	)

1266 
	#EC_R_PKPARAMETERS2GROUP_FAILURE
 127

	)

1267 
	#EC_R_POINT_AT_INFINITY
 106

	)

1268 
	#EC_R_POINT_IS_NOT_ON_CURVE
 107

	)

1269 
	#EC_R_SHARED_INFO_ERROR
 150

	)

1270 
	#EC_R_SLOT_FULL
 108

	)

1271 
	#EC_R_UNDEFINED_GENERATOR
 113

	)

1272 
	#EC_R_UNDEFINED_ORDER
 128

	)

1273 
	#EC_R_UNKNOWN_GROUP
 129

	)

1274 
	#EC_R_UNKNOWN_ORDER
 114

	)

1275 
	#EC_R_UNSUPPORTED_FIELD
 131

	)

1276 
	#EC_R_WRONG_CURVE_PARAMETERS
 145

	)

1277 
	#EC_R_WRONG_ORDER
 130

	)

1279 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/err.h

112 #i‚de‡
HEADER_ERR_H


113 
	#HEADER_ERR_H


	)

115 
	~<›ís¶/e_os2.h
>

117 #i‚de‡
OPENSSL_NO_FP_API


118 
	~<°dio.h
>

119 
	~<°dlib.h
>

122 
	~<›ís¶/os¶_typ.h
>

123 #i‚de‡
OPENSSL_NO_BIO


124 
	~<›ís¶/bio.h
>

126 #i‚de‡
OPENSSL_NO_LHASH


127 
	~<›ís¶/lhash.h
>

130 #ifde‡ 
__˝lu•lus


134 #i‚de‡
OPENSSL_NO_ERR


135 
	#ERR_PUT_îr‹
(
a
,
b
,
c
,
d
,
e
Ë
	`ERR_put_îr‹
◊,b,c,d,e)

	)

137 
	#ERR_PUT_îr‹
(
a
,
b
,
c
,
d
,
e
Ë
	`ERR_put_îr‹
◊,b,c,
NULL
,0)

	)

140 
	~<î∫o.h
>

142 
	#ERR_TXT_MALLOCED
 0x01

	)

143 
	#ERR_TXT_STRING
 0x02

	)

145 
	#ERR_FLAG_MARK
 0x01

	)

147 
	#ERR_NUM_ERRORS
 16

	)

148 
	sîr_°©e_°
 {

149 
CRYPTO_THREADID
 
tid
;

150 
îr_Êags
[
ERR_NUM_ERRORS
];

151 
îr_buf„r
[
ERR_NUM_ERRORS
];

152 *
îr_d©a
[
ERR_NUM_ERRORS
];

153 
îr_d©a_Êags
[
ERR_NUM_ERRORS
];

154 c⁄° *
îr_fûe
[
ERR_NUM_ERRORS
];

155 
îr_löe
[
ERR_NUM_ERRORS
];

156 
t›
, 
bŸtom
;

157 } 
	tERR_STATE
;

160 
	#ERR_LIB_NONE
 1

	)

161 
	#ERR_LIB_SYS
 2

	)

162 
	#ERR_LIB_BN
 3

	)

163 
	#ERR_LIB_RSA
 4

	)

164 
	#ERR_LIB_DH
 5

	)

165 
	#ERR_LIB_EVP
 6

	)

166 
	#ERR_LIB_BUF
 7

	)

167 
	#ERR_LIB_OBJ
 8

	)

168 
	#ERR_LIB_PEM
 9

	)

169 
	#ERR_LIB_DSA
 10

	)

170 
	#ERR_LIB_X509
 11

	)

172 
	#ERR_LIB_ASN1
 13

	)

173 
	#ERR_LIB_CONF
 14

	)

174 
	#ERR_LIB_CRYPTO
 15

	)

175 
	#ERR_LIB_EC
 16

	)

176 
	#ERR_LIB_SSL
 20

	)

182 
	#ERR_LIB_BIO
 32

	)

183 
	#ERR_LIB_PKCS7
 33

	)

184 
	#ERR_LIB_X509V3
 34

	)

185 
	#ERR_LIB_PKCS12
 35

	)

186 
	#ERR_LIB_RAND
 36

	)

187 
	#ERR_LIB_DSO
 37

	)

188 
	#ERR_LIB_ENGINE
 38

	)

189 
	#ERR_LIB_OCSP
 39

	)

190 
	#ERR_LIB_UI
 40

	)

191 
	#ERR_LIB_COMP
 41

	)

192 
	#ERR_LIB_ECDSA
 42

	)

193 
	#ERR_LIB_ECDH
 43

	)

194 
	#ERR_LIB_STORE
 44

	)

195 
	#ERR_LIB_FIPS
 45

	)

196 
	#ERR_LIB_CMS
 46

	)

197 
	#ERR_LIB_TS
 47

	)

198 
	#ERR_LIB_HMAC
 48

	)

199 
	#ERR_LIB_JPAKE
 49

	)

201 
	#ERR_LIB_USER
 128

	)

203 
	#SYSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_SYS
,(f),‘),
__FILE__
,
__LINE__
)

	)

204 
	#BNîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BN
,(f),‘),
__FILE__
,
__LINE__
)

	)

205 
	#RSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_RSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

206 
	#DHîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DH
,(f),‘),
__FILE__
,
__LINE__
)

	)

207 
	#EVPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_EVP
,(f),‘),
__FILE__
,
__LINE__
)

	)

208 
	#BUFîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BUF
,(f),‘),
__FILE__
,
__LINE__
)

	)

209 
	#OBJîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_OBJ
,(f),‘),
__FILE__
,
__LINE__
)

	)

210 
	#PEMîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PEM
,(f),‘),
__FILE__
,
__LINE__
)

	)

211 
	#DSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

212 
	#X509îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_X509
,(f),‘),
__FILE__
,
__LINE__
)

	)

213 
	#ASN1îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ASN1
,(f),‘),
__FILE__
,
__LINE__
)

	)

214 
	#CONFîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CONF
,(f),‘),
__FILE__
,
__LINE__
)

	)

215 
	#CRYPTOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CRYPTO
,(f),‘),
__FILE__
,
__LINE__
)

	)

216 
	#ECîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_EC
,(f),‘),
__FILE__
,
__LINE__
)

	)

217 
	#SSLîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_SSL
,(f),‘),
__FILE__
,
__LINE__
)

	)

218 
	#BIOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BIO
,(f),‘),
__FILE__
,
__LINE__
)

	)

219 
	#PKCS7îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PKCS7
,(f),‘),
__FILE__
,
__LINE__
)

	)

220 
	#X509V3îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_X509V3
,(f),‘),
__FILE__
,
__LINE__
)

	)

221 
	#PKCS12îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PKCS12
,(f),‘),
__FILE__
,
__LINE__
)

	)

222 
	#RANDîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_RAND
,(f),‘),
__FILE__
,
__LINE__
)

	)

223 
	#DSOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DSO
,(f),‘),
__FILE__
,
__LINE__
)

	)

224 
	#ENGINEîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ENGINE
,(f),‘),
__FILE__
,
__LINE__
)

	)

225 
	#OCSPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_OCSP
,(f),‘),
__FILE__
,
__LINE__
)

	)

226 
	#UIîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_UI
,(f),‘),
__FILE__
,
__LINE__
)

	)

227 
	#COMPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_COMP
,(f),‘),
__FILE__
,
__LINE__
)

	)

228 
	#ECDSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ECDSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

229 
	#ECDHîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ECDH
,(f),‘),
__FILE__
,
__LINE__
)

	)

230 
	#STOREîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_STORE
,(f),‘),
__FILE__
,
__LINE__
)

	)

231 
	#FIPSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_FIPS
,(f),‘),
__FILE__
,
__LINE__
)

	)

232 
	#CMSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CMS
,(f),‘),
__FILE__
,
__LINE__
)

	)

233 
	#TSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_TS
,(f),‘),
__FILE__
,
__LINE__
)

	)

234 
	#HMACîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_HMAC
,(f),‘),
__FILE__
,
__LINE__
)

	)

235 
	#JPAKEîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_JPAKE
,(f),‘),
__FILE__
,
__LINE__
)

	)

241 
	#ERR_PACK
(
l
,
f
,
r
) ((((()l)&0xffL)*0x1000000)| \

242 (((()
f
)&0xfffL)*0x1000)| \

243 (((()
r
)&0xfffL)))

	)

244 
	#ERR_GET_LIB
(
l
Ë()((((Ó)>>24L)&0xffL)

	)

245 
	#ERR_GET_FUNC
(
l
Ë()((((Ó)>>12L)&0xfffL)

	)

246 
	#ERR_GET_REASON
(
l
Ë()(÷)&0xfffL)

	)

247 
	#ERR_FATAL_ERROR
(
l
Ë()(÷)&
ERR_R_FATAL
)

	)

250 
	#SYS_F_FOPEN
 1

	)

251 
	#SYS_F_CONNECT
 2

	)

252 
	#SYS_F_GETSERVBYNAME
 3

	)

253 
	#SYS_F_SOCKET
 4

	)

254 
	#SYS_F_IOCTLSOCKET
 5

	)

255 
	#SYS_F_BIND
 6

	)

256 
	#SYS_F_LISTEN
 7

	)

257 
	#SYS_F_ACCEPT
 8

	)

258 
	#SYS_F_WSASTARTUP
 9

	)

259 
	#SYS_F_OPENDIR
 10

	)

260 
	#SYS_F_FREAD
 11

	)

263 
	#ERR_R_SYS_LIB
 
ERR_LIB_SYS


	)

264 
	#ERR_R_BN_LIB
 
ERR_LIB_BN


	)

265 
	#ERR_R_RSA_LIB
 
ERR_LIB_RSA


	)

266 
	#ERR_R_DH_LIB
 
ERR_LIB_DH


	)

267 
	#ERR_R_EVP_LIB
 
ERR_LIB_EVP


	)

268 
	#ERR_R_BUF_LIB
 
ERR_LIB_BUF


	)

269 
	#ERR_R_OBJ_LIB
 
ERR_LIB_OBJ


	)

270 
	#ERR_R_PEM_LIB
 
ERR_LIB_PEM


	)

271 
	#ERR_R_DSA_LIB
 
ERR_LIB_DSA


	)

272 
	#ERR_R_X509_LIB
 
ERR_LIB_X509


	)

273 
	#ERR_R_ASN1_LIB
 
ERR_LIB_ASN1


	)

274 
	#ERR_R_CONF_LIB
 
ERR_LIB_CONF


	)

275 
	#ERR_R_CRYPTO_LIB
 
ERR_LIB_CRYPTO


	)

276 
	#ERR_R_EC_LIB
 
ERR_LIB_EC


	)

277 
	#ERR_R_SSL_LIB
 
ERR_LIB_SSL


	)

278 
	#ERR_R_BIO_LIB
 
ERR_LIB_BIO


	)

279 
	#ERR_R_PKCS7_LIB
 
ERR_LIB_PKCS7


	)

280 
	#ERR_R_X509V3_LIB
 
ERR_LIB_X509V3


	)

281 
	#ERR_R_PKCS12_LIB
 
ERR_LIB_PKCS12


	)

282 
	#ERR_R_RAND_LIB
 
ERR_LIB_RAND


	)

283 
	#ERR_R_DSO_LIB
 
ERR_LIB_DSO


	)

284 
	#ERR_R_ENGINE_LIB
 
ERR_LIB_ENGINE


	)

285 
	#ERR_R_OCSP_LIB
 
ERR_LIB_OCSP


	)

286 
	#ERR_R_UI_LIB
 
ERR_LIB_UI


	)

287 
	#ERR_R_COMP_LIB
 
ERR_LIB_COMP


	)

288 
	#ERR_R_ECDSA_LIB
 
ERR_LIB_ECDSA


	)

289 
	#ERR_R_ECDH_LIB
 
ERR_LIB_ECDH


	)

290 
	#ERR_R_STORE_LIB
 
ERR_LIB_STORE


	)

291 
	#ERR_R_TS_LIB
 
ERR_LIB_TS


	)

293 
	#ERR_R_NESTED_ASN1_ERROR
 58

	)

294 
	#ERR_R_BAD_ASN1_OBJECT_HEADER
 59

	)

295 
	#ERR_R_BAD_GET_ASN1_OBJECT_CALL
 60

	)

296 
	#ERR_R_EXPECTING_AN_ASN1_SEQUENCE
 61

	)

297 
	#ERR_R_ASN1_LENGTH_MISMATCH
 62

	)

298 
	#ERR_R_MISSING_ASN1_EOS
 63

	)

301 
	#ERR_R_FATAL
 64

	)

302 
	#ERR_R_MALLOC_FAILURE
 (1|
ERR_R_FATAL
)

	)

303 
	#ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED
 (2|
ERR_R_FATAL
)

	)

304 
	#ERR_R_PASSED_NULL_PARAMETER
 (3|
ERR_R_FATAL
)

	)

305 
	#ERR_R_INTERNAL_ERROR
 (4|
ERR_R_FATAL
)

	)

306 
	#ERR_R_DISABLED
 (5|
ERR_R_FATAL
)

	)

313 
	sERR_°rög_d©a_°
 {

314 
îr‹
;

315 c⁄° *
°rög
;

316 } 
	tERR_STRING_DATA
;

318 
ERR_put_îr‹
(
lib
, 
func
, 
ªas⁄
, c⁄° *
fûe
, 
löe
);

319 
ERR_£t_îr‹_d©a
(*
d©a
, 
Êags
);

321 
ERR_gë_îr‹
();

322 
ERR_gë_îr‹_löe
(c⁄° **
fûe
, *
löe
);

323 
ERR_gë_îr‹_löe_d©a
(c⁄° **
fûe
, *
löe
,

324 c⁄° **
d©a
, *
Êags
);

325 
ERR_≥ek_îr‹
();

326 
ERR_≥ek_îr‹_löe
(c⁄° **
fûe
, *
löe
);

327 
ERR_≥ek_îr‹_löe_d©a
(c⁄° **
fûe
, *
löe
,

328 c⁄° **
d©a
, *
Êags
);

329 
ERR_≥ek_œ°_îr‹
();

330 
ERR_≥ek_œ°_îr‹_löe
(c⁄° **
fûe
, *
löe
);

331 
ERR_≥ek_œ°_îr‹_löe_d©a
(c⁄° **
fûe
, *
löe
,

332 c⁄° **
d©a
, *
Êags
);

333 
ERR_˛ór_îr‹
();

334 *
ERR_îr‹_°rög
(
e
, *
buf
);

335 
ERR_îr‹_°rög_n
(
e
, *
buf
, 
size_t
 
Àn
);

336 c⁄° *
ERR_lib_îr‹_°rög
(
e
);

337 c⁄° *
ERR_func_îr‹_°rög
(
e
);

338 c⁄° *
ERR_ªas⁄_îr‹_°rög
(
e
);

339 
ERR_¥öt_îr‹s_cb
((*
cb
Ë(c⁄° *
°r
, 
size_t
 
Àn
, *
u
),

340 *
u
);

341 #i‚de‡
OPENSSL_NO_FP_API


342 
ERR_¥öt_îr‹s_Â
(
FILE
 *
Â
);

344 #i‚de‡
OPENSSL_NO_BIO


345 
ERR_¥öt_îr‹s
(
BIO
 *
bp
);

347 
ERR_add_îr‹_d©a
(
num
, ...);

348 
ERR_add_îr‹_vd©a
(
num
, 
va_li°
 
¨gs
);

349 
ERR_lﬂd_°rögs
(
lib
, 
ERR_STRING_DATA
 
°r
[]);

350 
ERR_u∆ﬂd_°rögs
(
lib
, 
ERR_STRING_DATA
 
°r
[]);

351 
ERR_lﬂd_ERR_°rögs
();

352 
ERR_lﬂd_¸y±o_°rögs
();

353 
ERR_‰ì_°rögs
();

355 
ERR_ªmove_thªad_°©e
(c⁄° 
CRYPTO_THREADID
 *
tid
);

356 #i‚de‡
OPENSSL_NO_DEPRECATED


357 
ERR_ªmove_°©e
(
pid
);

359 
ERR_STATE
 *
ERR_gë_°©e
();

361 #i‚de‡
OPENSSL_NO_LHASH


362 
LHASH_OF
(
ERR_STRING_DATA
Ë*
ERR_gë_°rög_èbÀ
();

363 
LHASH_OF
(
ERR_STATE
Ë*
ERR_gë_îr_°©e_èbÀ
();

364 
ERR_ªÀa£_îr_°©e_èbÀ
(
LHASH_OF
(
ERR_STATE
Ë**
hash
);

367 
ERR_gë_√xt_îr‹_libøry
();

369 
ERR_£t_m¨k
();

370 
ERR_p›_to_m¨k
();

378 c⁄° 
ERR_FNS
 *
ERR_gë_im∂emíèti⁄
();

383 
ERR_£t_im∂emíèti⁄
(c⁄° 
ERR_FNS
 *
‚s
);

385 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/evp.h

59 #i‚de‡
HEADER_ENVELOPE_H


60 
	#HEADER_ENVELOPE_H


	)

62 #ifde‡
OPENSSL_ALGORITHM_DEFINES


63 
	~<›ís¶/›ís¶c⁄f.h
>

65 
	#OPENSSL_ALGORITHM_DEFINES


	)

66 
	~<›ís¶/›ís¶c⁄f.h
>

67 #unde‡
OPENSSL_ALGORITHM_DEFINES


70 
	~<›ís¶/os¶_typ.h
>

72 
	~<›ís¶/symhacks.h
>

74 #i‚de‡
OPENSSL_NO_BIO


75 
	~<›ís¶/bio.h
>

85 
	#EVP_MAX_MD_SIZE
 64

	)

86 
	#EVP_MAX_KEY_LENGTH
 64

	)

87 
	#EVP_MAX_IV_LENGTH
 16

	)

88 
	#EVP_MAX_BLOCK_LENGTH
 32

	)

90 
	#PKCS5_SALT_LEN
 8

	)

92 
	#PKCS5_DEFAULT_ITER
 2048

	)

94 
	~<›ís¶/obje˘s.h
>

96 
	#EVP_PK_RSA
 0x0001

	)

97 
	#EVP_PK_DSA
 0x0002

	)

98 
	#EVP_PK_DH
 0x0004

	)

99 
	#EVP_PK_EC
 0x0008

	)

100 
	#EVP_PKT_SIGN
 0x0010

	)

101 
	#EVP_PKT_ENC
 0x0020

	)

102 
	#EVP_PKT_EXCH
 0x0040

	)

103 
	#EVP_PKS_RSA
 0x0100

	)

104 
	#EVP_PKS_DSA
 0x0200

	)

105 
	#EVP_PKS_EC
 0x0400

	)

107 
	#EVP_PKEY_NONE
 
NID_undef


	)

108 
	#EVP_PKEY_RSA
 
NID_rßEn¸y±i⁄


	)

109 
	#EVP_PKEY_RSA2
 
NID_rß


	)

110 
	#EVP_PKEY_DSA
 
NID_dß


	)

111 
	#EVP_PKEY_DSA1
 
NID_dß_2


	)

112 
	#EVP_PKEY_DSA2
 
NID_dßWôhSHA


	)

113 
	#EVP_PKEY_DSA3
 
NID_dßWôhSHA1


	)

114 
	#EVP_PKEY_DSA4
 
NID_dßWôhSHA1_2


	)

115 
	#EVP_PKEY_DH
 
NID_dhKeyAgªemít


	)

116 
	#EVP_PKEY_DHX
 
NID_dhpubli˙umbî


	)

117 
	#EVP_PKEY_EC
 
NID_X9_62_id_ecPublicKey


	)

118 
	#EVP_PKEY_HMAC
 
NID_hmac


	)

119 
	#EVP_PKEY_CMAC
 
NID_cmac


	)

121 #ifde‡ 
__˝lu•lus


125 #ifde‡
OPENSSL_FIPS


126 
	~<›ís¶/fùs.h
>

133 
	sevp_pkey_°
 {

134 
ty≥
;

135 
ßve_ty≥
;

136 
ª„ªn˚s
;

137 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
;

138 
ENGINE
 *
ígöe
;

140 *
±r
;

141 #i‚de‡
OPENSSL_NO_RSA


142 
rß_°
 *
rß
;

144 #i‚de‡
OPENSSL_NO_DSA


145 
dß_°
 *
dß
;

147 #i‚de‡
OPENSSL_NO_DH


148 
dh_°
 *
dh
;

150 #i‚de‡
OPENSSL_NO_EC


151 
ec_key_°
 *
ec
;

153 } 
pkey
;

154 
ßve_∑ømëîs
;

155 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

158 
	#EVP_PKEY_MO_SIGN
 0x0001

	)

159 
	#EVP_PKEY_MO_VERIFY
 0x0002

	)

160 
	#EVP_PKEY_MO_ENCRYPT
 0x0004

	)

161 
	#EVP_PKEY_MO_DECRYPT
 0x0008

	)

163 #i‚de‡
EVP_MD


164 
	sív_md_°
 {

165 
ty≥
;

166 
pkey_ty≥
;

167 
md_size
;

168 
Êags
;

169 (*
öô
Ë(
EVP_MD_CTX
 *
˘x
);

170 (*
upd©e
Ë(
EVP_MD_CTX
 *
˘x
, c⁄° *
d©a
, 
size_t
 
cou¡
);

171 (*
föÆ
Ë(
EVP_MD_CTX
 *
˘x
, *
md
);

172 (*
c›y
Ë(
EVP_MD_CTX
 *
to
, c⁄° EVP_MD_CTX *
‰om
);

173 (*
˛ónup
Ë(
EVP_MD_CTX
 *
˘x
);

175 (*
sign
Ë(
ty≥
, c⁄° *
m
, 
m_Àngth
,

176 *
sigªt
, *
sigÀn
, *
key
);

177 (*
vîify
Ë(
ty≥
, c⁄° *
m
, 
m_Àngth
,

178 c⁄° *
sigbuf
, 
sigÀn
,

179 *
key
);

180 
ªquúed_pkey_ty≥
[5];

181 
block_size
;

182 
˘x_size
;

184 (*
md_˘æ
Ë(
EVP_MD_CTX
 *
˘x
, 
cmd
, 
p1
, *
p2
);

187 
	tevp_sign_mëhod
(
	tty≥
, c⁄° *
	tm
,

188 
	tm_Àngth
, *
	tsigªt
,

189 *
	tsigÀn
, *
	tkey
);

190 
	tevp_vîify_mëhod
(
	tty≥
, c⁄° *
	tm
,

191 
	tm_Àngth
,

192 c⁄° *
	tsigbuf
,

193 
	tsigÀn
, *
	tkey
);

196 
	#EVP_MD_FLAG_ONESHOT
 0x0001

	)

204 
	#EVP_MD_FLAG_PKEY_DIGEST
 0x0002

	)

208 
	#EVP_MD_FLAG_PKEY_METHOD_SIGNATURE
 0x0004

	)

212 
	#EVP_MD_FLAG_DIGALGID_MASK
 0x0018

	)

216 
	#EVP_MD_FLAG_DIGALGID_NULL
 0x0000

	)

220 
	#EVP_MD_FLAG_DIGALGID_ABSENT
 0x0008

	)

224 
	#EVP_MD_FLAG_DIGALGID_CUSTOM
 0x0018

	)

227 
	#EVP_MD_FLAG_FIPS
 0x0400

	)

231 
	#EVP_MD_CTRL_DIGALGID
 0x1

	)

232 
	#EVP_MD_CTRL_MICALG
 0x2

	)

236 
	#EVP_MD_CTRL_ALG_CTRL
 0x1000

	)

238 
	#EVP_PKEY_NULL_mëhod
 
NULL
,NULL,{0,0,0,0}

	)

240 #i‚de‡
OPENSSL_NO_DSA


241 
	#EVP_PKEY_DSA_mëhod
 (
evp_sign_mëhod
 *)
DSA_sign
, \

242 (
evp_vîify_mëhod
 *)
DSA_vîify
, \

243 {
EVP_PKEY_DSA
,
EVP_PKEY_DSA2
,
EVP_PKEY_DSA3
, \

244 
EVP_PKEY_DSA4
,0}

	)

246 
	#EVP_PKEY_DSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

249 #i‚de‡
OPENSSL_NO_ECDSA


250 
	#EVP_PKEY_ECDSA_mëhod
 (
evp_sign_mëhod
 *)
ECDSA_sign
, \

251 (
evp_vîify_mëhod
 *)
ECDSA_vîify
, \

252 {
EVP_PKEY_EC
,0,0,0}

	)

254 
	#EVP_PKEY_ECDSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

257 #i‚de‡
OPENSSL_NO_RSA


258 
	#EVP_PKEY_RSA_mëhod
 (
evp_sign_mëhod
 *)
RSA_sign
, \

259 (
evp_vîify_mëhod
 *)
RSA_vîify
, \

260 {
EVP_PKEY_RSA
,
EVP_PKEY_RSA2
,0,0}

	)

261 
	#EVP_PKEY_RSA_ASN1_OCTET_STRING_mëhod
 \

262 (
evp_sign_mëhod
 *)
RSA_sign_ASN1_OCTET_STRING
, \

263 (
evp_vîify_mëhod
 *)
RSA_vîify_ASN1_OCTET_STRING
, \

264 {
EVP_PKEY_RSA
,
EVP_PKEY_RSA2
,0,0}

	)

266 
	#EVP_PKEY_RSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

267 
	#EVP_PKEY_RSA_ASN1_OCTET_STRING_mëhod
 
EVP_PKEY_NULL_mëhod


	)

272 
	sív_md_˘x_°
 {

273 c⁄° 
EVP_MD
 *
dige°
;

274 
ENGINE
 *
ígöe
;

276 
Êags
;

277 *
md_d©a
;

279 
EVP_PKEY_CTX
 *
p˘x
;

281 (*
upd©e
Ë(
EVP_MD_CTX
 *
˘x
, c⁄° *
d©a
, 
size_t
 
cou¡
);

286 
	#EVP_MD_CTX_FLAG_ONESHOT
 0x0001

	)

288 
	#EVP_MD_CTX_FLAG_CLEANED
 0x0002

	)

290 
	#EVP_MD_CTX_FLAG_REUSE
 0x0004

	)

292 
	#EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
 0x0008

	)

300 
	#EVP_MD_CTX_FLAG_PAD_MASK
 0xF0

	)

301 
	#EVP_MD_CTX_FLAG_PAD_PKCS1
 0x00

	)

302 
	#EVP_MD_CTX_FLAG_PAD_X931
 0x10

	)

303 
	#EVP_MD_CTX_FLAG_PAD_PSS
 0x20

	)

304 
	#M_EVP_MD_CTX_FLAG_PSS_SALT
(
˘x
) \

305 ((
˘x
->
Êags
>>16Ë&0xFFFFË

	)

306 
	#EVP_MD_CTX_FLAG_PSS_MDLEN
 0xFFFF

	)

307 
	#EVP_MD_CTX_FLAG_PSS_MREC
 0xFFFE

	)

309 
	#EVP_MD_CTX_FLAG_NO_INIT
 0x0100

	)

311 
	sevp_cùhî_°
 {

312 
nid
;

313 
block_size
;

315 
key_Àn
;

316 
iv_Àn
;

318 
Êags
;

320 (*
öô
Ë(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
key
,

321 c⁄° *
iv
, 
íc
);

323 (*
do_cùhî
Ë(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

324 c⁄° *
ö
, 
size_t
 
öl
);

326 (*
˛ónup
Ë(
EVP_CIPHER_CTX
 *);

328 
˘x_size
;

330 (*
£t_a¢1_∑ømëîs
Ë(
EVP_CIPHER_CTX
 *, 
ASN1_TYPE
 *);

332 (*
gë_a¢1_∑ømëîs
Ë(
EVP_CIPHER_CTX
 *, 
ASN1_TYPE
 *);

334 (*
˘æ
Ë(
EVP_CIPHER_CTX
 *, 
ty≥
, 
¨g
, *
±r
);

336 *
≠p_d©a
;

343 
	#EVP_CIPH_STREAM_CIPHER
 0x0

	)

344 
	#EVP_CIPH_ECB_MODE
 0x1

	)

345 
	#EVP_CIPH_CBC_MODE
 0x2

	)

346 
	#EVP_CIPH_CFB_MODE
 0x3

	)

347 
	#EVP_CIPH_OFB_MODE
 0x4

	)

348 
	#EVP_CIPH_CTR_MODE
 0x5

	)

349 
	#EVP_CIPH_GCM_MODE
 0x6

	)

350 
	#EVP_CIPH_CCM_MODE
 0x7

	)

351 
	#EVP_CIPH_XTS_MODE
 0x10001

	)

352 
	#EVP_CIPH_WRAP_MODE
 0x10002

	)

353 
	#EVP_CIPH_MODE
 0xF0007

	)

355 
	#EVP_CIPH_VARIABLE_LENGTH
 0x8

	)

357 
	#EVP_CIPH_CUSTOM_IV
 0x10

	)

359 
	#EVP_CIPH_ALWAYS_CALL_INIT
 0x20

	)

361 
	#EVP_CIPH_CTRL_INIT
 0x40

	)

363 
	#EVP_CIPH_CUSTOM_KEY_LENGTH
 0x80

	)

365 
	#EVP_CIPH_NO_PADDING
 0x100

	)

367 
	#EVP_CIPH_RAND_KEY
 0x200

	)

369 
	#EVP_CIPH_CUSTOM_COPY
 0x400

	)

371 
	#EVP_CIPH_FLAG_DEFAULT_ASN1
 0x1000

	)

373 
	#EVP_CIPH_FLAG_LENGTH_BITS
 0x2000

	)

375 
	#EVP_CIPH_FLAG_FIPS
 0x4000

	)

377 
	#EVP_CIPH_FLAG_NON_FIPS_ALLOW
 0x8000

	)

381 
	#EVP_CIPH_FLAG_CUSTOM_CIPHER
 0x100000

	)

382 
	#EVP_CIPH_FLAG_AEAD_CIPHER
 0x200000

	)

383 
	#EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK
 0x400000

	)

390 
	#EVP_CIPHER_CTX_FLAG_WRAP_ALLOW
 0x1

	)

394 
	#EVP_CTRL_INIT
 0x0

	)

395 
	#EVP_CTRL_SET_KEY_LENGTH
 0x1

	)

396 
	#EVP_CTRL_GET_RC2_KEY_BITS
 0x2

	)

397 
	#EVP_CTRL_SET_RC2_KEY_BITS
 0x3

	)

398 
	#EVP_CTRL_GET_RC5_ROUNDS
 0x4

	)

399 
	#EVP_CTRL_SET_RC5_ROUNDS
 0x5

	)

400 
	#EVP_CTRL_RAND_KEY
 0x6

	)

401 
	#EVP_CTRL_PBE_PRF_NID
 0x7

	)

402 
	#EVP_CTRL_COPY
 0x8

	)

403 
	#EVP_CTRL_GCM_SET_IVLEN
 0x9

	)

404 
	#EVP_CTRL_GCM_GET_TAG
 0x10

	)

405 
	#EVP_CTRL_GCM_SET_TAG
 0x11

	)

406 
	#EVP_CTRL_GCM_SET_IV_FIXED
 0x12

	)

407 
	#EVP_CTRL_GCM_IV_GEN
 0x13

	)

408 
	#EVP_CTRL_CCM_SET_IVLEN
 
EVP_CTRL_GCM_SET_IVLEN


	)

409 
	#EVP_CTRL_CCM_GET_TAG
 
EVP_CTRL_GCM_GET_TAG


	)

410 
	#EVP_CTRL_CCM_SET_TAG
 
EVP_CTRL_GCM_SET_TAG


	)

411 
	#EVP_CTRL_CCM_SET_L
 0x14

	)

412 
	#EVP_CTRL_CCM_SET_MSGLEN
 0x15

	)

418 
	#EVP_CTRL_AEAD_TLS1_AAD
 0x16

	)

420 
	#EVP_CTRL_AEAD_SET_MAC_KEY
 0x17

	)

422 
	#EVP_CTRL_GCM_SET_IV_INV
 0x18

	)

424 
	#EVP_CTRL_TLS1_1_MULTIBLOCK_AAD
 0x19

	)

425 
	#EVP_CTRL_TLS1_1_MULTIBLOCK_ENCRYPT
 0x1a

	)

426 
	#EVP_CTRL_TLS1_1_MULTIBLOCK_DECRYPT
 0x1b

	)

427 
	#EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE
 0x1c

	)

430 
	#EVP_AEAD_TLS1_AAD_LEN
 13

	)

433 *
out
;

434 c⁄° *
öp
;

435 
size_t
 
Àn
;

436 
öãæóve
;

437 } 
	tEVP_CTRL_TLS1_1_MULTIBLOCK_PARAM
;

441 
	#EVP_GCM_TLS_FIXED_IV_LEN
 4

	)

443 
	#EVP_GCM_TLS_EXPLICIT_IV_LEN
 8

	)

445 
	#EVP_GCM_TLS_TAG_LEN
 16

	)

447 
	sevp_cùhî_öfo_°
 {

448 c⁄° 
EVP_CIPHER
 *
cùhî
;

449 
iv
[
EVP_MAX_IV_LENGTH
];

450 } 
	tEVP_CIPHER_INFO
;

452 
	sevp_cùhî_˘x_°
 {

453 c⁄° 
EVP_CIPHER
 *
cùhî
;

454 
ENGINE
 *
ígöe
;

456 
í¸y±
;

457 
buf_Àn
;

458 
oiv
[
EVP_MAX_IV_LENGTH
];

459 
iv
[
EVP_MAX_IV_LENGTH
];

460 
buf
[
EVP_MAX_BLOCK_LENGTH
];

461 
num
;

462 *
≠p_d©a
;

463 
key_Àn
;

464 
Êags
;

465 *
cùhî_d©a
;

466 
föÆ_u£d
;

467 
block_mask
;

468 
föÆ
[
EVP_MAX_BLOCK_LENGTH
];

471 
	sevp_Encode_Ctx_°
 {

473 
num
;

479 
Àngth
;

481 
íc_d©a
[80];

483 
löe_num
;

484 
ex≥˘_∆
;

485 } 
	tEVP_ENCODE_CTX
;

488 (
EVP_PBE_KEYGEN
Ë(
	tEVP_CIPHER_CTX
 *
	t˘x
, c⁄° *
	t∑ss
,

489 
	t∑s¶í
, 
	tASN1_TYPE
 *
	t∑øm
,

490 c⁄° 
	tEVP_CIPHER
 *
	tcùhî
, c⁄° 
	tEVP_MD
 *
	tmd
,

491 
	tí_de
);

493 #i‚de‡
OPENSSL_NO_RSA


494 
	#EVP_PKEY_assign_RSA
(
pkey
,
rß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_RSA
,\

495 (*)(
rß
))

	)

498 #i‚de‡
OPENSSL_NO_DSA


499 
	#EVP_PKEY_assign_DSA
(
pkey
,
dß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DSA
,\

500 (*)(
dß
))

	)

503 #i‚de‡
OPENSSL_NO_DH


504 
	#EVP_PKEY_assign_DH
(
pkey
,
dh
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DH
,\

505 (*)(
dh
))

	)

508 #i‚de‡
OPENSSL_NO_EC


509 
	#EVP_PKEY_assign_EC_KEY
(
pkey
,
eckey
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_EC
,\

510 (*)(
eckey
))

	)

514 
	#EVP_gë_dige°bynid
(
a
Ë
	`EVP_gë_dige°by«me
(
	`OBJ_nid2¢
◊))

	)

515 
	#EVP_gë_dige°byobj
(
a
Ë
	`EVP_gë_dige°bynid
(
	`OBJ_obj2nid
◊))

	)

516 
	#EVP_gë_cùhîbynid
(
a
Ë
	`EVP_gë_cùhîby«me
(
	`OBJ_nid2¢
◊))

	)

517 
	#EVP_gë_cùhîbyobj
(
a
Ë
	`EVP_gë_cùhîbynid
(
	`OBJ_obj2nid
◊))

	)

519 
EVP_MD_ty≥
(c⁄° 
EVP_MD
 *
md
);

520 
	#EVP_MD_nid
(
e
Ë
	`EVP_MD_ty≥
”)

	)

521 
	#EVP_MD_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_MD_nid
”))

	)

522 
EVP_MD_pkey_ty≥
(c⁄° 
EVP_MD
 *
md
);

523 
EVP_MD_size
(c⁄° 
EVP_MD
 *
md
);

524 
EVP_MD_block_size
(c⁄° 
EVP_MD
 *
md
);

525 
EVP_MD_Êags
(c⁄° 
EVP_MD
 *
md
);

527 c⁄° 
EVP_MD
 *
EVP_MD_CTX_md
(c⁄° 
EVP_MD_CTX
 *
˘x
);

528 
	#EVP_MD_CTX_size
(
e
Ë
	`EVP_MD_size
(
	`EVP_MD_CTX_md
”))

	)

529 
	#EVP_MD_CTX_block_size
(
e
Ë
	`EVP_MD_block_size
(
	`EVP_MD_CTX_md
”))

	)

530 
	#EVP_MD_CTX_ty≥
(
e
Ë
	`EVP_MD_ty≥
(
	`EVP_MD_CTX_md
”))

	)

532 
EVP_CIPHER_nid
(c⁄° 
EVP_CIPHER
 *
cùhî
);

533 
	#EVP_CIPHER_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_CIPHER_nid
”))

	)

534 
EVP_CIPHER_block_size
(c⁄° 
EVP_CIPHER
 *
cùhî
);

535 
EVP_CIPHER_key_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

536 
EVP_CIPHER_iv_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

537 
EVP_CIPHER_Êags
(c⁄° 
EVP_CIPHER
 *
cùhî
);

538 
	#EVP_CIPHER_mode
(
e
Ë(
	`EVP_CIPHER_Êags
”Ë& 
EVP_CIPH_MODE
)

	)

540 c⁄° 
EVP_CIPHER
 *
EVP_CIPHER_CTX_cùhî
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

541 
EVP_CIPHER_CTX_nid
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

542 
EVP_CIPHER_CTX_block_size
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

543 
EVP_CIPHER_CTX_key_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

544 
EVP_CIPHER_CTX_iv_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

545 
EVP_CIPHER_CTX_c›y
(
EVP_CIPHER_CTX
 *
out
, c⁄° EVP_CIPHER_CTX *
ö
);

546 *
EVP_CIPHER_CTX_gë_≠p_d©a
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

547 
EVP_CIPHER_CTX_£t_≠p_d©a
(
EVP_CIPHER_CTX
 *
˘x
, *
d©a
);

548 
	#EVP_CIPHER_CTX_ty≥
(
c
Ë
	`EVP_CIPHER_ty≥
(
	`EVP_CIPHER_CTX_cùhî
(c))

	)

549 
EVP_CIPHER_CTX_Êags
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

550 
	#EVP_CIPHER_CTX_mode
(
e
Ë(
	`EVP_CIPHER_CTX_Êags
”Ë& 
EVP_CIPH_MODE
)

	)

552 
	#EVP_ENCODE_LENGTH
(
l
Ë((÷+2)/3*4)+÷/48+1)*2+80)

	)

553 
	#EVP_DECODE_LENGTH
(
l
Ë(÷+3)/4*3+80)

	)

555 
	#EVP_SignInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

556 
	#EVP_SignInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

557 
	#EVP_SignUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

558 
	#EVP_VîifyInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

559 
	#EVP_VîifyInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

560 
	#EVP_VîifyUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

561 
	#EVP_O≥nUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_De¸y±Upd©e
◊,b,c,d,e)

	)

562 
	#EVP_SólUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_En¸y±Upd©e
◊,b,c,d,e)

	)

563 
	#EVP_Dige°SignUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

564 
	#EVP_Dige°VîifyUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

566 #ifde‡
CONST_STRICT


567 
BIO_£t_md
(
BIO
 *, c⁄° 
EVP_MD
 *
md
);

569 
	#BIO_£t_md
(
b
,
md
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD
,0,(*)md)

	)

571 
	#BIO_gë_md
(
b
,
mdp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD
,0,(*)mdp)

	)

572 
	#BIO_gë_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD_CTX
,0,(*)md˝)

	)

573 
	#BIO_£t_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD_CTX
,0,(*)md˝)

	)

574 
	#BIO_gë_cùhî_°©us
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_STATUS
,0,
NULL
)

	)

575 
	#BIO_gë_cùhî_˘x
(
b
,
c_µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_CTX
,0,(*)c_µ)

	)

577 
EVP_Cùhî
(
EVP_CIPHER_CTX
 *
c
,

578 *
out
, c⁄° *
ö
, 
öl
);

580 
	#EVP_add_cùhî_Æüs
(
n
,
Æüs
) \

581 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

582 
	#EVP_add_dige°_Æüs
(
n
,
Æüs
) \

583 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

584 
	#EVP_dñëe_cùhî_Æüs
(
Æüs
) \

585 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
);

	)

586 
	#EVP_dñëe_dige°_Æüs
(
Æüs
) \

587 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
);

	)

589 
EVP_MD_CTX_öô
(
EVP_MD_CTX
 *
˘x
);

590 
EVP_MD_CTX_˛ónup
(
EVP_MD_CTX
 *
˘x
);

591 
EVP_MD_CTX
 *
EVP_MD_CTX_¸óã
();

592 
EVP_MD_CTX_de°roy
(
EVP_MD_CTX
 *
˘x
);

593 
EVP_MD_CTX_c›y_ex
(
EVP_MD_CTX
 *
out
, c⁄° EVP_MD_CTX *
ö
);

594 
EVP_MD_CTX_£t_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

595 
EVP_MD_CTX_˛ór_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

596 
EVP_MD_CTX_ã°_Êags
(c⁄° 
EVP_MD_CTX
 *
˘x
, 
Êags
);

597 
EVP_Dige°Inô_ex
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
im∂
);

598 
EVP_Dige°Upd©e
(
EVP_MD_CTX
 *
˘x
, c⁄° *
d
, 
size_t
 
˙t
);

599 
EVP_Dige°FöÆ_ex
(
EVP_MD_CTX
 *
˘x
, *
md
, *
s
);

600 
EVP_Dige°
(c⁄° *
d©a
, 
size_t
 
cou¡
,

601 *
md
, *
size
, c⁄° 
EVP_MD
 *
ty≥
,

602 
ENGINE
 *
im∂
);

604 
EVP_MD_CTX_c›y
(
EVP_MD_CTX
 *
out
, c⁄° EVP_MD_CTX *
ö
);

605 
EVP_Dige°Inô
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
);

606 
EVP_Dige°FöÆ
(
EVP_MD_CTX
 *
˘x
, *
md
, *
s
);

608 
EVP_ªad_pw_°rög
(*
buf
, 
Àngth
, c⁄° *
¥om±
, 
vîify
);

609 
EVP_ªad_pw_°rög_mö
(*
buf
, 
möÀn
, 
maxÀn
,

610 c⁄° *
¥om±
, 
vîify
);

611 
EVP_£t_pw_¥om±
(c⁄° *
¥om±
);

612 *
EVP_gë_pw_¥om±
();

614 
EVP_ByãsToKey
(c⁄° 
EVP_CIPHER
 *
ty≥
, c⁄° 
EVP_MD
 *
md
,

615 c⁄° *
ß…
, c⁄° *
d©a
,

616 
d©Æ
, 
cou¡
, *
key
,

617 *
iv
);

619 
EVP_CIPHER_CTX_£t_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

620 
EVP_CIPHER_CTX_˛ór_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

621 
EVP_CIPHER_CTX_ã°_Êags
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

623 
EVP_En¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
cùhî
,

624 c⁄° *
key
, c⁄° *
iv
);

625 
EVP_En¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
cùhî
,

626 
ENGINE
 *
im∂
, c⁄° *
key
,

627 c⁄° *
iv
);

628 
EVP_En¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
,

629 c⁄° *
ö
, 
öl
);

630 
EVP_En¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

631 
EVP_En¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

633 
EVP_De¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
cùhî
,

634 c⁄° *
key
, c⁄° *
iv
);

635 
EVP_De¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
cùhî
,

636 
ENGINE
 *
im∂
, c⁄° *
key
,

637 c⁄° *
iv
);

638 
EVP_De¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
,

639 c⁄° *
ö
, 
öl
);

640 
EVP_De¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

641 
EVP_De¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

643 
EVP_CùhîInô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
cùhî
,

644 c⁄° *
key
, c⁄° *
iv
,

645 
íc
);

646 
EVP_CùhîInô_ex
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
cùhî
,

647 
ENGINE
 *
im∂
, c⁄° *
key
,

648 c⁄° *
iv
, 
íc
);

649 
EVP_CùhîUpd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
,

650 c⁄° *
ö
, 
öl
);

651 
EVP_CùhîFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

652 
EVP_CùhîFöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

654 
EVP_SignFöÆ
(
EVP_MD_CTX
 *
˘x
, *
md
, *
s
,

655 
EVP_PKEY
 *
pkey
);

657 
EVP_VîifyFöÆ
(
EVP_MD_CTX
 *
˘x
, c⁄° *
sigbuf
,

658 
sigÀn
, 
EVP_PKEY
 *
pkey
);

660 
EVP_Dige°SignInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 **
p˘x
,

661 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
e
, 
EVP_PKEY
 *
pkey
);

662 
EVP_Dige°SignFöÆ
(
EVP_MD_CTX
 *
˘x
,

663 *
sigªt
, 
size_t
 *
sigÀn
);

665 
EVP_Dige°VîifyInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 **
p˘x
,

666 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
e
, 
EVP_PKEY
 *
pkey
);

667 
EVP_Dige°VîifyFöÆ
(
EVP_MD_CTX
 *
˘x
,

668 c⁄° *
sig
, 
size_t
 
sigÀn
);

670 
EVP_O≥nInô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
ty≥
,

671 c⁄° *
ek
, 
ekl
, c⁄° *
iv
,

672 
EVP_PKEY
 *
¥iv
);

673 
EVP_O≥nFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

675 
EVP_SólInô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
ty≥
,

676 **
ek
, *
ekl
, *
iv
,

677 
EVP_PKEY
 **
pubk
, 
≈ubk
);

678 
EVP_SólFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

680 
EVP_EncodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

681 
EVP_EncodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
, *
out
, *
oué
,

682 c⁄° *
ö
, 
öl
);

683 
EVP_EncodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
, *
out
, *
oué
);

684 
EVP_EncodeBlock
(*
t
, c⁄° *
f
, 
n
);

686 
EVP_DecodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

687 
EVP_DecodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
, *
out
, *
oué
,

688 c⁄° *
ö
, 
öl
);

689 
EVP_DecodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
, 

690 *
out
, *
oué
);

691 
EVP_DecodeBlock
(*
t
, c⁄° *
f
, 
n
);

693 
EVP_CIPHER_CTX_öô
(
EVP_CIPHER_CTX
 *
a
);

694 
EVP_CIPHER_CTX_˛ónup
(
EVP_CIPHER_CTX
 *
a
);

695 
EVP_CIPHER_CTX
 *
EVP_CIPHER_CTX_√w
();

696 
EVP_CIPHER_CTX_‰ì
(
EVP_CIPHER_CTX
 *
a
);

697 
EVP_CIPHER_CTX_£t_key_Àngth
(
EVP_CIPHER_CTX
 *
x
, 
keyÀn
);

698 
EVP_CIPHER_CTX_£t_∑ddög
(
EVP_CIPHER_CTX
 *
c
, 
∑d
);

699 
EVP_CIPHER_CTX_˘æ
(
EVP_CIPHER_CTX
 *
˘x
, 
ty≥
, 
¨g
, *
±r
);

700 
EVP_CIPHER_CTX_ønd_key
(
EVP_CIPHER_CTX
 *
˘x
, *
key
);

702 #i‚de‡
OPENSSL_NO_BIO


703 
BIO_METHOD
 *
BIO_f_md
();

704 
BIO_METHOD
 *
BIO_f_ba£64
();

705 
BIO_METHOD
 *
BIO_f_cùhî
();

706 
BIO_METHOD
 *
BIO_f_ªlübÀ
();

707 
BIO_£t_cùhî
(
BIO
 *
b
, c⁄° 
EVP_CIPHER
 *
c
, c⁄° *
k
,

708 c⁄° *
i
, 
íc
);

711 c⁄° 
EVP_MD
 *
EVP_md_nuŒ
();

712 #i‚de‡
OPENSSL_NO_MD2


713 c⁄° 
EVP_MD
 *
EVP_md2
();

715 #i‚de‡
OPENSSL_NO_MD4


716 c⁄° 
EVP_MD
 *
EVP_md4
();

718 #i‚de‡
OPENSSL_NO_MD5


719 c⁄° 
EVP_MD
 *
EVP_md5
();

721 #i‚de‡
OPENSSL_NO_SHA


722 c⁄° 
EVP_MD
 *
EVP_sha
();

723 c⁄° 
EVP_MD
 *
EVP_sha1
();

724 c⁄° 
EVP_MD
 *
EVP_dss
();

725 c⁄° 
EVP_MD
 *
EVP_dss1
();

726 c⁄° 
EVP_MD
 *
EVP_ecdß
();

728 #i‚de‡
OPENSSL_NO_SHA256


729 c⁄° 
EVP_MD
 *
EVP_sha224
();

730 c⁄° 
EVP_MD
 *
EVP_sha256
();

732 #i‚de‡
OPENSSL_NO_SHA512


733 c⁄° 
EVP_MD
 *
EVP_sha384
();

734 c⁄° 
EVP_MD
 *
EVP_sha512
();

736 #i‚de‡
OPENSSL_NO_MDC2


737 c⁄° 
EVP_MD
 *
EVP_mdc2
();

739 #i‚de‡
OPENSSL_NO_RIPEMD


740 c⁄° 
EVP_MD
 *
EVP_rùemd160
();

742 #i‚de‡
OPENSSL_NO_WHIRLPOOL


743 c⁄° 
EVP_MD
 *
EVP_whúÕoﬁ
();

745 c⁄° 
EVP_CIPHER
 *
EVP_íc_nuŒ
();

746 #i‚de‡
OPENSSL_NO_DES


747 c⁄° 
EVP_CIPHER
 *
EVP_des_ecb
();

748 c⁄° 
EVP_CIPHER
 *
EVP_des_ede
();

749 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3
();

750 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ecb
();

751 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ecb
();

752 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb64
();

753 
	#EVP_des_cfb
 
EVP_des_cfb64


	)

754 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb1
();

755 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb8
();

756 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb64
();

757 
	#EVP_des_ede_cfb
 
EVP_des_ede_cfb64


	)

759 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb1
();

760 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb8
();

762 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb64
();

763 
	#EVP_des_ede3_cfb
 
EVP_des_ede3_cfb64


	)

764 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb1
();

765 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb8
();

766 c⁄° 
EVP_CIPHER
 *
EVP_des_ofb
();

767 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ofb
();

768 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ofb
();

769 c⁄° 
EVP_CIPHER
 *
EVP_des_cbc
();

770 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cbc
();

771 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cbc
();

772 c⁄° 
EVP_CIPHER
 *
EVP_desx_cbc
();

773 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_wøp
();

780 #ifde‡
OPENSSL_OPENBSD_DEV_CRYPTO


781 c⁄° 
EVP_CIPHER
 *
EVP_dev_¸y±o_des_ede3_cbc
();

782 c⁄° 
EVP_CIPHER
 *
EVP_dev_¸y±o_rc4
();

783 c⁄° 
EVP_MD
 *
EVP_dev_¸y±o_md5
();

787 #i‚de‡
OPENSSL_NO_RC4


788 c⁄° 
EVP_CIPHER
 *
EVP_rc4
();

789 c⁄° 
EVP_CIPHER
 *
EVP_rc4_40
();

790 #i‚de‡
OPENSSL_NO_MD5


791 c⁄° 
EVP_CIPHER
 *
EVP_rc4_hmac_md5
();

794 #i‚de‡
OPENSSL_NO_IDEA


795 c⁄° 
EVP_CIPHER
 *
EVP_idó_ecb
();

796 c⁄° 
EVP_CIPHER
 *
EVP_idó_cfb64
();

797 
	#EVP_idó_cfb
 
EVP_idó_cfb64


	)

798 c⁄° 
EVP_CIPHER
 *
EVP_idó_ofb
();

799 c⁄° 
EVP_CIPHER
 *
EVP_idó_cbc
();

801 #i‚de‡
OPENSSL_NO_RC2


802 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ecb
();

803 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cbc
();

804 c⁄° 
EVP_CIPHER
 *
EVP_rc2_40_cbc
();

805 c⁄° 
EVP_CIPHER
 *
EVP_rc2_64_cbc
();

806 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cfb64
();

807 
	#EVP_rc2_cfb
 
EVP_rc2_cfb64


	)

808 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ofb
();

810 #i‚de‡
OPENSSL_NO_BF


811 c⁄° 
EVP_CIPHER
 *
EVP_bf_ecb
();

812 c⁄° 
EVP_CIPHER
 *
EVP_bf_cbc
();

813 c⁄° 
EVP_CIPHER
 *
EVP_bf_cfb64
();

814 
	#EVP_bf_cfb
 
EVP_bf_cfb64


	)

815 c⁄° 
EVP_CIPHER
 *
EVP_bf_ofb
();

817 #i‚de‡
OPENSSL_NO_CAST


818 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ecb
();

819 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cbc
();

820 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cfb64
();

821 
	#EVP_ˇ°5_cfb
 
EVP_ˇ°5_cfb64


	)

822 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ofb
();

824 #i‚de‡
OPENSSL_NO_RC5


825 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_cbc
();

826 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_ecb
();

827 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_cfb64
();

828 
	#EVP_rc5_32_12_16_cfb
 
EVP_rc5_32_12_16_cfb64


	)

829 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_ofb
();

831 #i‚de‡
OPENSSL_NO_AES


832 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ecb
();

833 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc
();

834 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb1
();

835 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb8
();

836 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb128
();

837 
	#EVP_´s_128_cfb
 
EVP_´s_128_cfb128


	)

838 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ofb
();

839 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_˘r
();

840 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ccm
();

841 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_gcm
();

842 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_xts
();

843 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_wøp
();

844 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ecb
();

845 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cbc
();

846 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb1
();

847 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb8
();

848 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb128
();

849 
	#EVP_´s_192_cfb
 
EVP_´s_192_cfb128


	)

850 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ofb
();

851 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_˘r
();

852 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ccm
();

853 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_gcm
();

854 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_wøp
();

855 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ecb
();

856 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc
();

857 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb1
();

858 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb8
();

859 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb128
();

860 
	#EVP_´s_256_cfb
 
EVP_´s_256_cfb128


	)

861 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ofb
();

862 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_˘r
();

863 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ccm
();

864 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_gcm
();

865 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_xts
();

866 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_wøp
();

867 #i‡!
deföed
(
OPENSSL_NO_SHA
Ë&& !deföed(
OPENSSL_NO_SHA1
)

868 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc_hmac_sha1
();

869 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc_hmac_sha1
();

871 #i‚de‡
OPENSSL_NO_SHA256


872 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc_hmac_sha256
();

873 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc_hmac_sha256
();

876 #i‚de‡
OPENSSL_NO_CAMELLIA


877 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ecb
();

878 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cbc
();

879 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb1
();

880 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb8
();

881 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb128
();

882 
	#EVP_ˇmñlü_128_cfb
 
EVP_ˇmñlü_128_cfb128


	)

883 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ofb
();

884 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ecb
();

885 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cbc
();

886 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb1
();

887 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb8
();

888 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb128
();

889 
	#EVP_ˇmñlü_192_cfb
 
EVP_ˇmñlü_192_cfb128


	)

890 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ofb
();

891 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ecb
();

892 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cbc
();

893 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb1
();

894 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb8
();

895 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb128
();

896 
	#EVP_ˇmñlü_256_cfb
 
EVP_ˇmñlü_256_cfb128


	)

897 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ofb
();

900 #i‚de‡
OPENSSL_NO_SEED


901 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ecb
();

902 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cbc
();

903 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cfb128
();

904 
	#EVP_£ed_cfb
 
EVP_£ed_cfb128


	)

905 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ofb
();

908 
OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
();

909 
OPENSSL_add_Æl_Æg‹ôhms_c⁄f
();

911 #ifde‡
OPENSSL_LOAD_CONF


912 
	#O≥nSSL_add_Æl_Æg‹ôhms
() \

913 
	`OPENSSL_add_Æl_Æg‹ôhms_c⁄f
()

	)

915 
	#O≥nSSL_add_Æl_Æg‹ôhms
() \

916 
	`OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
()

	)

919 
O≥nSSL_add_Æl_cùhîs
();

920 
O≥nSSL_add_Æl_dige°s
();

921 
	#SSLóy_add_Æl_Æg‹ôhms
(Ë
	`O≥nSSL_add_Æl_Æg‹ôhms
()

	)

922 
	#SSLóy_add_Æl_cùhîs
(Ë
	`O≥nSSL_add_Æl_cùhîs
()

	)

923 
	#SSLóy_add_Æl_dige°s
(Ë
	`O≥nSSL_add_Æl_dige°s
()

	)

925 
EVP_add_cùhî
(c⁄° 
EVP_CIPHER
 *
cùhî
);

926 
EVP_add_dige°
(c⁄° 
EVP_MD
 *
dige°
);

928 c⁄° 
EVP_CIPHER
 *
EVP_gë_cùhîby«me
(c⁄° *
«me
);

929 c⁄° 
EVP_MD
 *
EVP_gë_dige°by«me
(c⁄° *
«me
);

930 
EVP_˛ónup
();

932 
EVP_CIPHER_do_Æl
((*
‚
Ë(c⁄° 
EVP_CIPHER
 *
cùh
,

933 c⁄° *
‰om
, c⁄° *
to
, *
x
),

934 *
¨g
);

935 
EVP_CIPHER_do_Æl_s‹ãd
((*
‚
)

936 (c⁄° 
EVP_CIPHER
 *
cùh
, c⁄° *
‰om
,

937 c⁄° *
to
, *
x
), *
¨g
);

939 
EVP_MD_do_Æl
((*
‚
Ë(c⁄° 
EVP_MD
 *
cùh
,

940 c⁄° *
‰om
, c⁄° *
to
, *
x
),

941 *
¨g
);

942 
EVP_MD_do_Æl_s‹ãd
((*
‚
)

943 (c⁄° 
EVP_MD
 *
cùh
, c⁄° *
‰om
,

944 c⁄° *
to
, *
x
), *
¨g
);

946 
EVP_PKEY_de¸y±_ﬁd
(*
dec_key
,

947 c⁄° *
íc_key
, 
íc_key_Àn
,

948 
EVP_PKEY
 *
¥iv©e_key
);

949 
EVP_PKEY_í¸y±_ﬁd
(*
íc_key
,

950 c⁄° *
key
, 
key_Àn
,

951 
EVP_PKEY
 *
pub_key
);

952 
EVP_PKEY_ty≥
(
ty≥
);

953 
EVP_PKEY_id
(c⁄° 
EVP_PKEY
 *
pkey
);

954 
EVP_PKEY_ba£_id
(c⁄° 
EVP_PKEY
 *
pkey
);

955 
EVP_PKEY_bôs
(
EVP_PKEY
 *
pkey
);

956 
EVP_PKEY_size
(
EVP_PKEY
 *
pkey
);

957 
EVP_PKEY_£t_ty≥
(
EVP_PKEY
 *
pkey
, 
ty≥
);

958 
EVP_PKEY_£t_ty≥_°r
(
EVP_PKEY
 *
pkey
, c⁄° *
°r
, 
Àn
);

959 
EVP_PKEY_assign
(
EVP_PKEY
 *
pkey
, 
ty≥
, *
key
);

960 *
EVP_PKEY_gë0
(
EVP_PKEY
 *
pkey
);

962 #i‚de‡
OPENSSL_NO_RSA


963 
rß_°
;

964 
EVP_PKEY_£t1_RSA
(
EVP_PKEY
 *
pkey
, 
rß_°
 *
key
);

965 
rß_°
 *
EVP_PKEY_gë1_RSA
(
EVP_PKEY
 *
pkey
);

967 #i‚de‡
OPENSSL_NO_DSA


968 
dß_°
;

969 
EVP_PKEY_£t1_DSA
(
EVP_PKEY
 *
pkey
, 
dß_°
 *
key
);

970 
dß_°
 *
EVP_PKEY_gë1_DSA
(
EVP_PKEY
 *
pkey
);

972 #i‚de‡
OPENSSL_NO_DH


973 
dh_°
;

974 
EVP_PKEY_£t1_DH
(
EVP_PKEY
 *
pkey
, 
dh_°
 *
key
);

975 
dh_°
 *
EVP_PKEY_gë1_DH
(
EVP_PKEY
 *
pkey
);

977 #i‚de‡
OPENSSL_NO_EC


978 
ec_key_°
;

979 
EVP_PKEY_£t1_EC_KEY
(
EVP_PKEY
 *
pkey
, 
ec_key_°
 *
key
);

980 
ec_key_°
 *
EVP_PKEY_gë1_EC_KEY
(
EVP_PKEY
 *
pkey
);

983 
EVP_PKEY
 *
EVP_PKEY_√w
();

984 
EVP_PKEY_‰ì
(
EVP_PKEY
 *
pkey
);

986 
EVP_PKEY
 *
d2i_PublicKey
(
ty≥
, EVP_PKEY **
a
, c⁄° **
µ
,

987 
Àngth
);

988 
i2d_PublicKey
(
EVP_PKEY
 *
a
, **
µ
);

990 
EVP_PKEY
 *
d2i_Priv©eKey
(
ty≥
, EVP_PKEY **
a
, c⁄° **
µ
,

991 
Àngth
);

992 
EVP_PKEY
 *
d2i_AutoPriv©eKey
(EVP_PKEY **
a
, c⁄° **
µ
,

993 
Àngth
);

994 
i2d_Priv©eKey
(
EVP_PKEY
 *
a
, **
µ
);

996 
EVP_PKEY_c›y_∑ømëîs
(
EVP_PKEY
 *
to
, c⁄° EVP_PKEY *
‰om
);

997 
EVP_PKEY_missög_∑ømëîs
(c⁄° 
EVP_PKEY
 *
pkey
);

998 
EVP_PKEY_ßve_∑ømëîs
(
EVP_PKEY
 *
pkey
, 
mode
);

999 
EVP_PKEY_cmp_∑ømëîs
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

1001 
EVP_PKEY_cmp
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

1003 
EVP_PKEY_¥öt_public
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

1004 
ödít
, 
ASN1_PCTX
 *
p˘x
);

1005 
EVP_PKEY_¥öt_¥iv©e
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

1006 
ödít
, 
ASN1_PCTX
 *
p˘x
);

1007 
EVP_PKEY_¥öt_∑øms
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

1008 
ödít
, 
ASN1_PCTX
 *
p˘x
);

1010 
EVP_PKEY_gë_deÁu…_dige°_nid
(
EVP_PKEY
 *
pkey
, *
≤id
);

1012 
EVP_CIPHER_ty≥
(c⁄° 
EVP_CIPHER
 *
˘x
);

1015 
EVP_CIPHER_∑øm_to_a¢1
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

1016 
EVP_CIPHER_a¢1_to_∑øm
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

1019 
EVP_CIPHER_£t_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

1020 
EVP_CIPHER_gë_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

1023 
PKCS5_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

1024 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
,

1025 c⁄° 
EVP_MD
 *
md
, 
í_de
);

1026 
PKCS5_PBKDF2_HMAC_SHA1
(c⁄° *
∑ss
, 
∑s¶í
,

1027 c⁄° *
ß…
, 
ß…Àn
, 
ôî
,

1028 
keyÀn
, *
out
);

1029 
PKCS5_PBKDF2_HMAC
(c⁄° *
∑ss
, 
∑s¶í
,

1030 c⁄° *
ß…
, 
ß…Àn
, 
ôî
,

1031 c⁄° 
EVP_MD
 *
dige°
, 
keyÀn
, *
out
);

1032 
PKCS5_v2_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

1033 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
,

1034 c⁄° 
EVP_MD
 *
md
, 
í_de
);

1036 
PKCS5_PBE_add
();

1038 
EVP_PBE_CùhîInô
(
ASN1_OBJECT
 *
pbe_obj
, c⁄° *
∑ss
, 
∑s¶í
,

1039 
ASN1_TYPE
 *
∑øm
, 
EVP_CIPHER_CTX
 *
˘x
, 
í_de
);

1044 
	#EVP_PBE_TYPE_OUTER
 0x0

	)

1046 
	#EVP_PBE_TYPE_PRF
 0x1

	)

1048 
EVP_PBE_Æg_add_ty≥
(
pbe_ty≥
, 
pbe_nid
, 
cùhî_nid
,

1049 
md_nid
, 
EVP_PBE_KEYGEN
 *
keygí
);

1050 
EVP_PBE_Æg_add
(
nid
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

1051 
EVP_PBE_KEYGEN
 *
keygí
);

1052 
EVP_PBE_föd
(
ty≥
, 
pbe_nid
, *
p˙id
, *
pmnid
,

1053 
EVP_PBE_KEYGEN
 **
pkeygí
);

1054 
EVP_PBE_˛ónup
();

1056 
	#ASN1_PKEY_ALIAS
 0x1

	)

1057 
	#ASN1_PKEY_DYNAMIC
 0x2

	)

1058 
	#ASN1_PKEY_SIGPARAM_NULL
 0x4

	)

1060 
	#ASN1_PKEY_CTRL_PKCS7_SIGN
 0x1

	)

1061 
	#ASN1_PKEY_CTRL_PKCS7_ENCRYPT
 0x2

	)

1062 
	#ASN1_PKEY_CTRL_DEFAULT_MD_NID
 0x3

	)

1063 
	#ASN1_PKEY_CTRL_CMS_SIGN
 0x5

	)

1064 
	#ASN1_PKEY_CTRL_CMS_ENVELOPE
 0x7

	)

1065 
	#ASN1_PKEY_CTRL_CMS_RI_TYPE
 0x8

	)

1067 
EVP_PKEY_a¢1_gë_cou¡
();

1068 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_gë0
(
idx
);

1069 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_föd
(
ENGINE
 **
≥
, 
ty≥
);

1070 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_föd_°r
(
ENGINE
 **
≥
,

1071 c⁄° *
°r
, 
Àn
);

1072 
EVP_PKEY_a¢1_add0
(c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1073 
EVP_PKEY_a¢1_add_Æüs
(
to
, 
‰om
);

1074 
EVP_PKEY_a¢1_gë0_öfo
(*
µkey_id
, *
pkey_ba£_id
,

1075 *
µkey_Êags
, c⁄° **
pöfo
,

1076 c⁄° **
µem_°r
,

1077 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1079 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_gë0_a¢1
(
EVP_PKEY
 *
pkey
);

1080 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_√w
(
id
, 
Êags
,

1081 c⁄° *
≥m_°r
,

1082 c⁄° *
öfo
);

1083 
EVP_PKEY_a¢1_c›y
(
EVP_PKEY_ASN1_METHOD
 *
d°
,

1084 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
§c
);

1085 
EVP_PKEY_a¢1_‰ì
(
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1086 
EVP_PKEY_a¢1_£t_public
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1087 (*
pub_decode
Ë(
EVP_PKEY
 *
pk
,

1088 
X509_PUBKEY
 *
pub
),

1089 (*
pub_ícode
Ë(
X509_PUBKEY
 *
pub
,

1090 c⁄° 
EVP_PKEY
 *
pk
),

1091 (*
pub_cmp
Ë(c⁄° 
EVP_PKEY
 *
a
,

1092 c⁄° 
EVP_PKEY
 *
b
),

1093 (*
pub_¥öt
Ë(
BIO
 *
out
,

1094 c⁄° 
EVP_PKEY
 *
pkey
,

1095 
ödít
, 
ASN1_PCTX
 *
p˘x
),

1096 (*
pkey_size
Ë(c⁄° 
EVP_PKEY
 *
pk
),

1097 (*
pkey_bôs
Ë(c⁄° 
EVP_PKEY
 *
pk
));

1098 
EVP_PKEY_a¢1_£t_¥iv©e
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1099 (*
¥iv_decode
Ë(
EVP_PKEY
 *
pk
,

1100 
PKCS8_PRIV_KEY_INFO


1101 *
p8öf
),

1102 (*
¥iv_ícode
Ë(
PKCS8_PRIV_KEY_INFO
 *
p8
,

1103 c⁄° 
EVP_PKEY
 *
pk
),

1104 (*
¥iv_¥öt
Ë(
BIO
 *
out
,

1105 c⁄° 
EVP_PKEY
 *
pkey
,

1106 
ödít
,

1107 
ASN1_PCTX
 *
p˘x
));

1108 
EVP_PKEY_a¢1_£t_∑øm
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1109 (*
∑øm_decode
Ë(
EVP_PKEY
 *
pkey
,

1110 c⁄° **
pdî
,

1111 
dîÀn
),

1112 (*
∑øm_ícode
Ë(c⁄° 
EVP_PKEY
 *
pkey
,

1113 **
pdî
),

1114 (*
∑øm_missög
Ë(c⁄° 
EVP_PKEY
 *
pk
),

1115 (*
∑øm_c›y
Ë(
EVP_PKEY
 *
to
,

1116 c⁄° 
EVP_PKEY
 *
‰om
),

1117 (*
∑øm_cmp
Ë(c⁄° 
EVP_PKEY
 *
a
,

1118 c⁄° 
EVP_PKEY
 *
b
),

1119 (*
∑øm_¥öt
Ë(
BIO
 *
out
,

1120 c⁄° 
EVP_PKEY
 *
pkey
,

1121 
ödít
,

1122 
ASN1_PCTX
 *
p˘x
));

1124 
EVP_PKEY_a¢1_£t_‰ì
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1125 (*
pkey_‰ì
Ë(
EVP_PKEY
 *
pkey
));

1126 
EVP_PKEY_a¢1_£t_˘æ
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1127 (*
pkey_˘æ
Ë(
EVP_PKEY
 *
pkey
, 
›
,

1128 
¨g1
, *
¨g2
));

1129 
EVP_PKEY_a¢1_£t_ôem
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1130 (*
ôem_vîify
Ë(
EVP_MD_CTX
 *
˘x
,

1131 c⁄° 
ASN1_ITEM
 *
ô
,

1132 *
a¢
,

1133 
X509_ALGOR
 *
a
,

1134 
ASN1_BIT_STRING
 *
sig
,

1135 
EVP_PKEY
 *
pkey
),

1136 (*
ôem_sign
Ë(
EVP_MD_CTX
 *
˘x
,

1137 c⁄° 
ASN1_ITEM
 *
ô
,

1138 *
a¢
,

1139 
X509_ALGOR
 *
Æg1
,

1140 
X509_ALGOR
 *
Æg2
,

1141 
ASN1_BIT_STRING
 *
sig
));

1143 
	#EVP_PKEY_OP_UNDEFINED
 0

	)

1144 
	#EVP_PKEY_OP_PARAMGEN
 (1<<1)

	)

1145 
	#EVP_PKEY_OP_KEYGEN
 (1<<2)

	)

1146 
	#EVP_PKEY_OP_SIGN
 (1<<3)

	)

1147 
	#EVP_PKEY_OP_VERIFY
 (1<<4)

	)

1148 
	#EVP_PKEY_OP_VERIFYRECOVER
 (1<<5)

	)

1149 
	#EVP_PKEY_OP_SIGNCTX
 (1<<6)

	)

1150 
	#EVP_PKEY_OP_VERIFYCTX
 (1<<7)

	)

1151 
	#EVP_PKEY_OP_ENCRYPT
 (1<<8)

	)

1152 
	#EVP_PKEY_OP_DECRYPT
 (1<<9)

	)

1153 
	#EVP_PKEY_OP_DERIVE
 (1<<10)

	)

1155 
	#EVP_PKEY_OP_TYPE_SIG
 \

1156 (
EVP_PKEY_OP_SIGN
 | 
EVP_PKEY_OP_VERIFY
 | 
EVP_PKEY_OP_VERIFYRECOVER
 \

1157 | 
EVP_PKEY_OP_SIGNCTX
 | 
EVP_PKEY_OP_VERIFYCTX
)

	)

1159 
	#EVP_PKEY_OP_TYPE_CRYPT
 \

1160 (
EVP_PKEY_OP_ENCRYPT
 | 
EVP_PKEY_OP_DECRYPT
)

	)

1162 
	#EVP_PKEY_OP_TYPE_NOGEN
 \

1163 (
EVP_PKEY_OP_SIG
 | 
EVP_PKEY_OP_CRYPT
 | 
EVP_PKEY_OP_DERIVE
)

	)

1165 
	#EVP_PKEY_OP_TYPE_GEN
 \

1166 (
EVP_PKEY_OP_PARAMGEN
 | 
EVP_PKEY_OP_KEYGEN
)

	)

1168 
	#EVP_PKEY_CTX_£t_sig«tuª_md
(
˘x
, 
md
) \

1169 
	`EVP_PKEY_CTX_˘æ
(
˘x
, -1, 
EVP_PKEY_OP_TYPE_SIG
, \

1170 
EVP_PKEY_CTRL_MD
, 0, (*)
md
)

	)

1172 
	#EVP_PKEY_CTX_gë_sig«tuª_md
(
˘x
, 
pmd
) \

1173 
	`EVP_PKEY_CTX_˘æ
(
˘x
, -1, 
EVP_PKEY_OP_TYPE_SIG
, \

1174 
EVP_PKEY_CTRL_GET_MD
, 0, (*)
pmd
)

	)

1176 
	#EVP_PKEY_CTRL_MD
 1

	)

1177 
	#EVP_PKEY_CTRL_PEER_KEY
 2

	)

1179 
	#EVP_PKEY_CTRL_PKCS7_ENCRYPT
 3

	)

1180 
	#EVP_PKEY_CTRL_PKCS7_DECRYPT
 4

	)

1182 
	#EVP_PKEY_CTRL_PKCS7_SIGN
 5

	)

1184 
	#EVP_PKEY_CTRL_SET_MAC_KEY
 6

	)

1186 
	#EVP_PKEY_CTRL_DIGESTINIT
 7

	)

1189 
	#EVP_PKEY_CTRL_SET_IV
 8

	)

1191 
	#EVP_PKEY_CTRL_CMS_ENCRYPT
 9

	)

1192 
	#EVP_PKEY_CTRL_CMS_DECRYPT
 10

	)

1193 
	#EVP_PKEY_CTRL_CMS_SIGN
 11

	)

1195 
	#EVP_PKEY_CTRL_CIPHER
 12

	)

1197 
	#EVP_PKEY_CTRL_GET_MD
 13

	)

1199 
	#EVP_PKEY_ALG_CTRL
 0x1000

	)

1201 
	#EVP_PKEY_FLAG_AUTOARGLEN
 2

	)

1205 
	#EVP_PKEY_FLAG_SIGCTX_CUSTOM
 4

	)

1207 c⁄° 
EVP_PKEY_METHOD
 *
EVP_PKEY_mëh_föd
(
ty≥
);

1208 
EVP_PKEY_METHOD
 *
EVP_PKEY_mëh_√w
(
id
, 
Êags
);

1209 
EVP_PKEY_mëh_gë0_öfo
(*
µkey_id
, *
pÊags
,

1210 c⁄° 
EVP_PKEY_METHOD
 *
mëh
);

1211 
EVP_PKEY_mëh_c›y
(
EVP_PKEY_METHOD
 *
d°
, c⁄° EVP_PKEY_METHOD *
§c
);

1212 
EVP_PKEY_mëh_‰ì
(
EVP_PKEY_METHOD
 *
pmëh
);

1213 
EVP_PKEY_mëh_add0
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
);

1215 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_√w
(
EVP_PKEY
 *
pkey
, 
ENGINE
 *
e
);

1216 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_√w_id
(
id
, 
ENGINE
 *
e
);

1217 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_dup
(EVP_PKEY_CTX *
˘x
);

1218 
EVP_PKEY_CTX_‰ì
(
EVP_PKEY_CTX
 *
˘x
);

1220 
EVP_PKEY_CTX_˘æ
(
EVP_PKEY_CTX
 *
˘x
, 
keyty≥
, 
›ty≥
,

1221 
cmd
, 
p1
, *
p2
);

1222 
EVP_PKEY_CTX_˘æ_°r
(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
ty≥
,

1223 c⁄° *
vÆue
);

1225 
EVP_PKEY_CTX_gë_›î©i⁄
(
EVP_PKEY_CTX
 *
˘x
);

1226 
EVP_PKEY_CTX_£t0_keygí_öfo
(
EVP_PKEY_CTX
 *
˘x
, *
d©
, 
d©Àn
);

1228 
EVP_PKEY
 *
EVP_PKEY_√w_mac_key
(
ty≥
, 
ENGINE
 *
e
,

1229 c⁄° *
key
, 
keyÀn
);

1231 
EVP_PKEY_CTX_£t_d©a
(
EVP_PKEY_CTX
 *
˘x
, *
d©a
);

1232 *
EVP_PKEY_CTX_gë_d©a
(
EVP_PKEY_CTX
 *
˘x
);

1233 
EVP_PKEY
 *
EVP_PKEY_CTX_gë0_pkey
(
EVP_PKEY_CTX
 *
˘x
);

1235 
EVP_PKEY
 *
EVP_PKEY_CTX_gë0_≥îkey
(
EVP_PKEY_CTX
 *
˘x
);

1237 
EVP_PKEY_CTX_£t_≠p_d©a
(
EVP_PKEY_CTX
 *
˘x
, *
d©a
);

1238 *
EVP_PKEY_CTX_gë_≠p_d©a
(
EVP_PKEY_CTX
 *
˘x
);

1240 
EVP_PKEY_sign_öô
(
EVP_PKEY_CTX
 *
˘x
);

1241 
EVP_PKEY_sign
(
EVP_PKEY_CTX
 *
˘x
,

1242 *
sig
, 
size_t
 *
sigÀn
,

1243 c⁄° *
tbs
, 
size_t
 
tb¶í
);

1244 
EVP_PKEY_vîify_öô
(
EVP_PKEY_CTX
 *
˘x
);

1245 
EVP_PKEY_vîify
(
EVP_PKEY_CTX
 *
˘x
,

1246 c⁄° *
sig
, 
size_t
 
sigÀn
,

1247 c⁄° *
tbs
, 
size_t
 
tb¶í
);

1248 
EVP_PKEY_vîify_ªcovî_öô
(
EVP_PKEY_CTX
 *
˘x
);

1249 
EVP_PKEY_vîify_ªcovî
(
EVP_PKEY_CTX
 *
˘x
,

1250 *
rout
, 
size_t
 *
rouéí
,

1251 c⁄° *
sig
, 
size_t
 
sigÀn
);

1252 
EVP_PKEY_í¸y±_öô
(
EVP_PKEY_CTX
 *
˘x
);

1253 
EVP_PKEY_í¸y±
(
EVP_PKEY_CTX
 *
˘x
,

1254 *
out
, 
size_t
 *
ouéí
,

1255 c⁄° *
ö
, 
size_t
 
öÀn
);

1256 
EVP_PKEY_de¸y±_öô
(
EVP_PKEY_CTX
 *
˘x
);

1257 
EVP_PKEY_de¸y±
(
EVP_PKEY_CTX
 *
˘x
,

1258 *
out
, 
size_t
 *
ouéí
,

1259 c⁄° *
ö
, 
size_t
 
öÀn
);

1261 
EVP_PKEY_dîive_öô
(
EVP_PKEY_CTX
 *
˘x
);

1262 
EVP_PKEY_dîive_£t_≥î
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
≥î
);

1263 
EVP_PKEY_dîive
(
EVP_PKEY_CTX
 *
˘x
, *
key
, 
size_t
 *
keyÀn
);

1265 
	tEVP_PKEY_gí_cb
 (
	tEVP_PKEY_CTX
 *
	t˘x
);

1267 
EVP_PKEY_∑ømgí_öô
(
EVP_PKEY_CTX
 *
˘x
);

1268 
EVP_PKEY_∑ømgí
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 **
µkey
);

1269 
EVP_PKEY_keygí_öô
(
EVP_PKEY_CTX
 *
˘x
);

1270 
EVP_PKEY_keygí
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 **
µkey
);

1272 
EVP_PKEY_CTX_£t_cb
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY_gí_cb
 *
cb
);

1273 
EVP_PKEY_gí_cb
 *
EVP_PKEY_CTX_gë_cb
(
EVP_PKEY_CTX
 *
˘x
);

1275 
EVP_PKEY_CTX_gë_keygí_öfo
(
EVP_PKEY_CTX
 *
˘x
, 
idx
);

1277 
EVP_PKEY_mëh_£t_öô
(
EVP_PKEY_METHOD
 *
pmëh
,

1278 (*
öô
Ë(
EVP_PKEY_CTX
 *
˘x
));

1280 
EVP_PKEY_mëh_£t_c›y
(
EVP_PKEY_METHOD
 *
pmëh
,

1281 (*
c›y
Ë(
EVP_PKEY_CTX
 *
d°
,

1282 
EVP_PKEY_CTX
 *
§c
));

1284 
EVP_PKEY_mëh_£t_˛ónup
(
EVP_PKEY_METHOD
 *
pmëh
,

1285 (*
˛ónup
Ë(
EVP_PKEY_CTX
 *
˘x
));

1287 
EVP_PKEY_mëh_£t_∑ømgí
(
EVP_PKEY_METHOD
 *
pmëh
,

1288 (*
∑ømgí_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1289 (*
∑ømgí
Ë(
EVP_PKEY_CTX
 *
˘x
,

1290 
EVP_PKEY
 *
pkey
));

1292 
EVP_PKEY_mëh_£t_keygí
(
EVP_PKEY_METHOD
 *
pmëh
,

1293 (*
keygí_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1294 (*
keygí
Ë(
EVP_PKEY_CTX
 *
˘x
,

1295 
EVP_PKEY
 *
pkey
));

1297 
EVP_PKEY_mëh_£t_sign
(
EVP_PKEY_METHOD
 *
pmëh
,

1298 (*
sign_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1299 (*
sign
Ë(
EVP_PKEY_CTX
 *
˘x
,

1300 *
sig
, 
size_t
 *
sigÀn
,

1301 c⁄° *
tbs
,

1302 
size_t
 
tb¶í
));

1304 
EVP_PKEY_mëh_£t_vîify
(
EVP_PKEY_METHOD
 *
pmëh
,

1305 (*
vîify_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1306 (*
vîify
Ë(
EVP_PKEY_CTX
 *
˘x
,

1307 c⁄° *
sig
,

1308 
size_t
 
sigÀn
,

1309 c⁄° *
tbs
,

1310 
size_t
 
tb¶í
));

1312 
EVP_PKEY_mëh_£t_vîify_ªcovî
(
EVP_PKEY_METHOD
 *
pmëh
,

1313 (*
vîify_ªcovî_öô
Ë(
EVP_PKEY_CTX


1314 *
˘x
),

1315 (*
vîify_ªcovî
Ë(
EVP_PKEY_CTX


1316 *
˘x
,

1318 *
sig
,

1319 
size_t
 *
sigÀn
,

1321 *
tbs
,

1322 
size_t
 
tb¶í
));

1324 
EVP_PKEY_mëh_£t_sign˘x
(
EVP_PKEY_METHOD
 *
pmëh
,

1325 (*
sign˘x_öô
Ë(
EVP_PKEY_CTX
 *
˘x
,

1326 
EVP_MD_CTX
 *
m˘x
),

1327 (*
sign˘x
Ë(
EVP_PKEY_CTX
 *
˘x
,

1328 *
sig
,

1329 
size_t
 *
sigÀn
,

1330 
EVP_MD_CTX
 *
m˘x
));

1332 
EVP_PKEY_mëh_£t_vîify˘x
(
EVP_PKEY_METHOD
 *
pmëh
,

1333 (*
vîify˘x_öô
Ë(
EVP_PKEY_CTX
 *
˘x
,

1334 
EVP_MD_CTX
 *
m˘x
),

1335 (*
vîify˘x
Ë(
EVP_PKEY_CTX
 *
˘x
,

1336 c⁄° *
sig
,

1337 
sigÀn
,

1338 
EVP_MD_CTX
 *
m˘x
));

1340 
EVP_PKEY_mëh_£t_í¸y±
(
EVP_PKEY_METHOD
 *
pmëh
,

1341 (*
í¸y±_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1342 (*
í¸y±‚
Ë(
EVP_PKEY_CTX
 *
˘x
,

1343 *
out
,

1344 
size_t
 *
ouéí
,

1345 c⁄° *
ö
,

1346 
size_t
 
öÀn
));

1348 
EVP_PKEY_mëh_£t_de¸y±
(
EVP_PKEY_METHOD
 *
pmëh
,

1349 (*
de¸y±_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1350 (*
de¸y±
Ë(
EVP_PKEY_CTX
 *
˘x
,

1351 *
out
,

1352 
size_t
 *
ouéí
,

1353 c⁄° *
ö
,

1354 
size_t
 
öÀn
));

1356 
EVP_PKEY_mëh_£t_dîive
(
EVP_PKEY_METHOD
 *
pmëh
,

1357 (*
dîive_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1358 (*
dîive
Ë(
EVP_PKEY_CTX
 *
˘x
,

1359 *
key
,

1360 
size_t
 *
keyÀn
));

1362 
EVP_PKEY_mëh_£t_˘æ
(
EVP_PKEY_METHOD
 *
pmëh
,

1363 (*
˘æ
Ë(
EVP_PKEY_CTX
 *
˘x
, 
ty≥
, 
p1
,

1364 *
p2
),

1365 (*
˘æ_°r
Ë(
EVP_PKEY_CTX
 *
˘x
,

1366 c⁄° *
ty≥
,

1367 c⁄° *
vÆue
));

1369 
EVP_add_Æg_moduÀ
();

1376 
ERR_lﬂd_EVP_°rögs
();

1381 
	#EVP_F_AESNI_INIT_KEY
 165

	)

1382 
	#EVP_F_AESNI_XTS_CIPHER
 176

	)

1383 
	#EVP_F_AES_INIT_KEY
 133

	)

1384 
	#EVP_F_AES_T4_INIT_KEY
 178

	)

1385 
	#EVP_F_AES_XTS
 172

	)

1386 
	#EVP_F_AES_XTS_CIPHER
 175

	)

1387 
	#EVP_F_ALG_MODULE_INIT
 177

	)

1388 
	#EVP_F_CAMELLIA_INIT_KEY
 159

	)

1389 
	#EVP_F_CMAC_INIT
 173

	)

1390 
	#EVP_F_CMLL_T4_INIT_KEY
 179

	)

1391 
	#EVP_F_D2I_PKEY
 100

	)

1392 
	#EVP_F_DO_SIGVER_INIT
 161

	)

1393 
	#EVP_F_DSAPKEY2PKCS8
 134

	)

1394 
	#EVP_F_DSA_PKEY2PKCS8
 135

	)

1395 
	#EVP_F_ECDSA_PKEY2PKCS8
 129

	)

1396 
	#EVP_F_ECKEY_PKEY2PKCS8
 132

	)

1397 
	#EVP_F_EVP_CIPHERINIT_EX
 123

	)

1398 
	#EVP_F_EVP_CIPHER_CTX_COPY
 163

	)

1399 
	#EVP_F_EVP_CIPHER_CTX_CTRL
 124

	)

1400 
	#EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH
 122

	)

1401 
	#EVP_F_EVP_DECRYPTFINAL_EX
 101

	)

1402 
	#EVP_F_EVP_DIGESTINIT_EX
 128

	)

1403 
	#EVP_F_EVP_ENCRYPTFINAL_EX
 127

	)

1404 
	#EVP_F_EVP_MD_CTX_COPY_EX
 110

	)

1405 
	#EVP_F_EVP_MD_SIZE
 162

	)

1406 
	#EVP_F_EVP_OPENINIT
 102

	)

1407 
	#EVP_F_EVP_PBE_ALG_ADD
 115

	)

1408 
	#EVP_F_EVP_PBE_ALG_ADD_TYPE
 160

	)

1409 
	#EVP_F_EVP_PBE_CIPHERINIT
 116

	)

1410 
	#EVP_F_EVP_PKCS82PKEY
 111

	)

1411 
	#EVP_F_EVP_PKCS82PKEY_BROKEN
 136

	)

1412 
	#EVP_F_EVP_PKEY2PKCS8_BROKEN
 113

	)

1413 
	#EVP_F_EVP_PKEY_COPY_PARAMETERS
 103

	)

1414 
	#EVP_F_EVP_PKEY_CTX_CTRL
 137

	)

1415 
	#EVP_F_EVP_PKEY_CTX_CTRL_STR
 150

	)

1416 
	#EVP_F_EVP_PKEY_CTX_DUP
 156

	)

1417 
	#EVP_F_EVP_PKEY_DECRYPT
 104

	)

1418 
	#EVP_F_EVP_PKEY_DECRYPT_INIT
 138

	)

1419 
	#EVP_F_EVP_PKEY_DECRYPT_OLD
 151

	)

1420 
	#EVP_F_EVP_PKEY_DERIVE
 153

	)

1421 
	#EVP_F_EVP_PKEY_DERIVE_INIT
 154

	)

1422 
	#EVP_F_EVP_PKEY_DERIVE_SET_PEER
 155

	)

1423 
	#EVP_F_EVP_PKEY_ENCRYPT
 105

	)

1424 
	#EVP_F_EVP_PKEY_ENCRYPT_INIT
 139

	)

1425 
	#EVP_F_EVP_PKEY_ENCRYPT_OLD
 152

	)

1426 
	#EVP_F_EVP_PKEY_GET1_DH
 119

	)

1427 
	#EVP_F_EVP_PKEY_GET1_DSA
 120

	)

1428 
	#EVP_F_EVP_PKEY_GET1_ECDSA
 130

	)

1429 
	#EVP_F_EVP_PKEY_GET1_EC_KEY
 131

	)

1430 
	#EVP_F_EVP_PKEY_GET1_RSA
 121

	)

1431 
	#EVP_F_EVP_PKEY_KEYGEN
 146

	)

1432 
	#EVP_F_EVP_PKEY_KEYGEN_INIT
 147

	)

1433 
	#EVP_F_EVP_PKEY_NEW
 106

	)

1434 
	#EVP_F_EVP_PKEY_PARAMGEN
 148

	)

1435 
	#EVP_F_EVP_PKEY_PARAMGEN_INIT
 149

	)

1436 
	#EVP_F_EVP_PKEY_SIGN
 140

	)

1437 
	#EVP_F_EVP_PKEY_SIGN_INIT
 141

	)

1438 
	#EVP_F_EVP_PKEY_VERIFY
 142

	)

1439 
	#EVP_F_EVP_PKEY_VERIFY_INIT
 143

	)

1440 
	#EVP_F_EVP_PKEY_VERIFY_RECOVER
 144

	)

1441 
	#EVP_F_EVP_PKEY_VERIFY_RECOVER_INIT
 145

	)

1442 
	#EVP_F_EVP_RIJNDAEL
 126

	)

1443 
	#EVP_F_EVP_SIGNFINAL
 107

	)

1444 
	#EVP_F_EVP_VERIFYFINAL
 108

	)

1445 
	#EVP_F_FIPS_CIPHERINIT
 166

	)

1446 
	#EVP_F_FIPS_CIPHER_CTX_COPY
 170

	)

1447 
	#EVP_F_FIPS_CIPHER_CTX_CTRL
 167

	)

1448 
	#EVP_F_FIPS_CIPHER_CTX_SET_KEY_LENGTH
 171

	)

1449 
	#EVP_F_FIPS_DIGESTINIT
 168

	)

1450 
	#EVP_F_FIPS_MD_CTX_COPY
 169

	)

1451 
	#EVP_F_HMAC_INIT_EX
 174

	)

1452 
	#EVP_F_INT_CTX_NEW
 157

	)

1453 
	#EVP_F_PKCS5_PBE_KEYIVGEN
 117

	)

1454 
	#EVP_F_PKCS5_V2_PBE_KEYIVGEN
 118

	)

1455 
	#EVP_F_PKCS5_V2_PBKDF2_KEYIVGEN
 164

	)

1456 
	#EVP_F_PKCS8_SET_BROKEN
 112

	)

1457 
	#EVP_F_PKEY_SET_TYPE
 158

	)

1458 
	#EVP_F_RC2_MAGIC_TO_METH
 109

	)

1459 
	#EVP_F_RC5_CTRL
 125

	)

1462 
	#EVP_R_AES_IV_SETUP_FAILED
 162

	)

1463 
	#EVP_R_AES_KEY_SETUP_FAILED
 143

	)

1464 
	#EVP_R_ASN1_LIB
 140

	)

1465 
	#EVP_R_BAD_BLOCK_LENGTH
 136

	)

1466 
	#EVP_R_BAD_DECRYPT
 100

	)

1467 
	#EVP_R_BAD_KEY_LENGTH
 137

	)

1468 
	#EVP_R_BN_DECODE_ERROR
 112

	)

1469 
	#EVP_R_BN_PUBKEY_ERROR
 113

	)

1470 
	#EVP_R_BUFFER_TOO_SMALL
 155

	)

1471 
	#EVP_R_CAMELLIA_KEY_SETUP_FAILED
 157

	)

1472 
	#EVP_R_CIPHER_PARAMETER_ERROR
 122

	)

1473 
	#EVP_R_COMMAND_NOT_SUPPORTED
 147

	)

1474 
	#EVP_R_CTRL_NOT_IMPLEMENTED
 132

	)

1475 
	#EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED
 133

	)

1476 
	#EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH
 138

	)

1477 
	#EVP_R_DECODE_ERROR
 114

	)

1478 
	#EVP_R_DIFFERENT_KEY_TYPES
 101

	)

1479 
	#EVP_R_DIFFERENT_PARAMETERS
 153

	)

1480 
	#EVP_R_DISABLED_FOR_FIPS
 163

	)

1481 
	#EVP_R_ENCODE_ERROR
 115

	)

1482 
	#EVP_R_ERROR_LOADING_SECTION
 165

	)

1483 
	#EVP_R_ERROR_SETTING_FIPS_MODE
 166

	)

1484 
	#EVP_R_EVP_PBE_CIPHERINIT_ERROR
 119

	)

1485 
	#EVP_R_EXPECTING_AN_RSA_KEY
 127

	)

1486 
	#EVP_R_EXPECTING_A_DH_KEY
 128

	)

1487 
	#EVP_R_EXPECTING_A_DSA_KEY
 129

	)

1488 
	#EVP_R_EXPECTING_A_ECDSA_KEY
 141

	)

1489 
	#EVP_R_EXPECTING_A_EC_KEY
 142

	)

1490 
	#EVP_R_FIPS_MODE_NOT_SUPPORTED
 167

	)

1491 
	#EVP_R_INITIALIZATION_ERROR
 134

	)

1492 
	#EVP_R_INPUT_NOT_INITIALIZED
 111

	)

1493 
	#EVP_R_INVALID_DIGEST
 152

	)

1494 
	#EVP_R_INVALID_FIPS_MODE
 168

	)

1495 
	#EVP_R_INVALID_KEY_LENGTH
 130

	)

1496 
	#EVP_R_INVALID_OPERATION
 148

	)

1497 
	#EVP_R_IV_TOO_LARGE
 102

	)

1498 
	#EVP_R_KEYGEN_FAILURE
 120

	)

1499 
	#EVP_R_MESSAGE_DIGEST_IS_NULL
 159

	)

1500 
	#EVP_R_METHOD_NOT_SUPPORTED
 144

	)

1501 
	#EVP_R_MISSING_PARAMETERS
 103

	)

1502 
	#EVP_R_NO_CIPHER_SET
 131

	)

1503 
	#EVP_R_NO_DEFAULT_DIGEST
 158

	)

1504 
	#EVP_R_NO_DIGEST_SET
 139

	)

1505 
	#EVP_R_NO_DSA_PARAMETERS
 116

	)

1506 
	#EVP_R_NO_KEY_SET
 154

	)

1507 
	#EVP_R_NO_OPERATION_SET
 149

	)

1508 
	#EVP_R_NO_SIGN_FUNCTION_CONFIGURED
 104

	)

1509 
	#EVP_R_NO_VERIFY_FUNCTION_CONFIGURED
 105

	)

1510 
	#EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE
 150

	)

1511 
	#EVP_R_OPERATON_NOT_INITIALIZED
 151

	)

1512 
	#EVP_R_PKCS8_UNKNOWN_BROKEN_TYPE
 117

	)

1513 
	#EVP_R_PRIVATE_KEY_DECODE_ERROR
 145

	)

1514 
	#EVP_R_PRIVATE_KEY_ENCODE_ERROR
 146

	)

1515 
	#EVP_R_PUBLIC_KEY_NOT_RSA
 106

	)

1516 
	#EVP_R_TOO_LARGE
 164

	)

1517 
	#EVP_R_UNKNOWN_CIPHER
 160

	)

1518 
	#EVP_R_UNKNOWN_DIGEST
 161

	)

1519 
	#EVP_R_UNKNOWN_OPTION
 169

	)

1520 
	#EVP_R_UNKNOWN_PBE_ALGORITHM
 121

	)

1521 
	#EVP_R_UNSUPORTED_NUMBER_OF_ROUNDS
 135

	)

1522 
	#EVP_R_UNSUPPORTED_ALGORITHM
 156

	)

1523 
	#EVP_R_UNSUPPORTED_CIPHER
 107

	)

1524 
	#EVP_R_UNSUPPORTED_KEYLENGTH
 123

	)

1525 
	#EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION
 124

	)

1526 
	#EVP_R_UNSUPPORTED_KEY_SIZE
 108

	)

1527 
	#EVP_R_UNSUPPORTED_PRF
 125

	)

1528 
	#EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM
 118

	)

1529 
	#EVP_R_UNSUPPORTED_SALT_TYPE
 126

	)

1530 
	#EVP_R_WRAP_MODE_NOT_ALLOWED
 170

	)

1531 
	#EVP_R_WRONG_FINAL_BLOCK_LENGTH
 109

	)

1532 
	#EVP_R_WRONG_PUBLIC_KEY_TYPE
 110

	)

1534 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/hmac.h

58 #i‚de‡
HEADER_HMAC_H


59 
	#HEADER_HMAC_H


	)

61 
	~<›ís¶/›ís¶c⁄f.h
>

63 #ifde‡
OPENSSL_NO_HMAC


64 #îr‹ 
HMAC
 
is
 
dißbÀd
.

67 
	~<›ís¶/evp.h
>

69 
	#HMAC_MAX_MD_CBLOCK
 128

	)

71 #ifde‡ 
__˝lu•lus


75 
	shmac_˘x_°
 {

76 c⁄° 
EVP_MD
 *
md
;

77 
EVP_MD_CTX
 
md_˘x
;

78 
EVP_MD_CTX
 
i_˘x
;

79 
EVP_MD_CTX
 
o_˘x
;

80 
key_Àngth
;

81 
key
[
HMAC_MAX_MD_CBLOCK
];

82 } 
	tHMAC_CTX
;

84 
	#HMAC_size
(
e
Ë(
	`EVP_MD_size
(”)->
md
))

	)

86 
HMAC_CTX_öô
(
HMAC_CTX
 *
˘x
);

87 
HMAC_CTX_˛ónup
(
HMAC_CTX
 *
˘x
);

90 
	#HMAC_˛ónup
(
˘x
Ë
	`HMAC_CTX_˛ónup
(˘x)

	)

93 
HMAC_Inô
(
HMAC_CTX
 *
˘x
, c⁄° *
key
, 
Àn
, c⁄° 
EVP_MD
 *
md
);

94 
HMAC_Inô_ex
(
HMAC_CTX
 *
˘x
, c⁄° *
key
, 
Àn
,

95 c⁄° 
EVP_MD
 *
md
, 
ENGINE
 *
im∂
);

96 
HMAC_Upd©e
(
HMAC_CTX
 *
˘x
, c⁄° *
d©a
, 
size_t
 
Àn
);

97 
HMAC_FöÆ
(
HMAC_CTX
 *
˘x
, *
md
, *
Àn
);

98 *
HMAC
(c⁄° 
EVP_MD
 *
evp_md
, c⁄° *
key
, 
key_Àn
,

99 c⁄° *
d
, 
size_t
 
n
, *
md
,

100 *
md_Àn
);

101 
HMAC_CTX_c›y
(
HMAC_CTX
 *
d˘x
, HMAC_CTX *
s˘x
);

103 
HMAC_CTX_£t_Êags
(
HMAC_CTX
 *
˘x
, 
Êags
);

105 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/lhash.h

63 #i‚de‡
HEADER_LHASH_H


64 
	#HEADER_LHASH_H


	)

66 
	~<›ís¶/e_os2.h
>

67 #i‚de‡
OPENSSL_NO_FP_API


68 
	~<°dio.h
>

71 #i‚de‡
OPENSSL_NO_BIO


72 
	~<›ís¶/bio.h
>

75 #ifde‡ 
__˝lu•lus


79 
	slhash_node_°
 {

80 *
d©a
;

81 
lhash_node_°
 *
√xt
;

82 #i‚de‡
OPENSSL_NO_HASH_COMP


83 
hash
;

85 } 
	tLHASH_NODE
;

87 (*
LHASH_COMP_FN_TYPE
) (const *, const *);

88 (*
	tLHASH_HASH_FN_TYPE
) (const *);

89 (*
LHASH_DOALL_FN_TYPE
) (*);

90 (*
LHASH_DOALL_ARG_FN_TYPE
) (*, *);

102 
	#DECLARE_LHASH_HASH_FN
(
«me
, 
o_ty≥
) \

103 
«me
##
	`_LHASH_HASH
(c⁄° *);

	)

104 
	#IMPLEMENT_LHASH_HASH_FN
(
«me
, 
o_ty≥
) \

105 
«me
##
	`_LHASH_HASH
(c⁄° *
¨g
) { \

106 c⁄° 
o_ty≥
 *
a
 = 
¨g
; \

107  
«me
##
	`_hash
(
a
); }

	)

108 
	#LHASH_HASH_FN
(
«me
Ë«me##
_LHASH_HASH


	)

111 
	#DECLARE_LHASH_COMP_FN
(
«me
, 
o_ty≥
) \

112 
«me
##
	`_LHASH_COMP
(c⁄° *, c⁄° *);

	)

113 
	#IMPLEMENT_LHASH_COMP_FN
(
«me
, 
o_ty≥
) \

114 
«me
##
	`_LHASH_COMP
(c⁄° *
¨g1
, c⁄° *
¨g2
) { \

115 c⁄° 
o_ty≥
 *
a
 = 
¨g1
; \

116 c⁄° 
o_ty≥
 *
b
 = 
¨g2
; \

117  
«me
##
	`_cmp
(
a
,
b
); }

	)

118 
	#LHASH_COMP_FN
(
«me
Ë«me##
_LHASH_COMP


	)

121 
	#DECLARE_LHASH_DOALL_FN
(
«me
, 
o_ty≥
) \

122 
«me
##
	`_LHASH_DOALL
(*);

	)

123 
	#IMPLEMENT_LHASH_DOALL_FN
(
«me
, 
o_ty≥
) \

124 
«me
##
	`_LHASH_DOALL
(*
¨g
) { \

125 
o_ty≥
 *
a
 = 
¨g
; \

126 
«me
##
	`_dﬂŒ
(
a
); }

	)

127 
	#LHASH_DOALL_FN
(
«me
Ë«me##
_LHASH_DOALL


	)

130 
	#DECLARE_LHASH_DOALL_ARG_FN
(
«me
, 
o_ty≥
, 
a_ty≥
) \

131 
«me
##
	`_LHASH_DOALL_ARG
(*, *);

	)

132 
	#IMPLEMENT_LHASH_DOALL_ARG_FN
(
«me
, 
o_ty≥
, 
a_ty≥
) \

133 
«me
##
	`_LHASH_DOALL_ARG
(*
¨g1
, *
¨g2
) { \

134 
o_ty≥
 *
a
 = 
¨g1
; \

135 
a_ty≥
 *
b
 = 
¨g2
; \

136 
«me
##
	`_dﬂŒ_¨g
(
a
, 
b
); }

	)

137 
	#LHASH_DOALL_ARG_FN
(
«me
Ë«me##
_LHASH_DOALL_ARG


	)

139 
	slhash_°
 {

140 
LHASH_NODE
 **
b
;

141 
LHASH_COMP_FN_TYPE
 
comp
;

142 
LHASH_HASH_FN_TYPE
 
hash
;

143 
num_nodes
;

144 
num_Æloc_nodes
;

145 
p
;

146 
pmax
;

147 
up_lﬂd
;

148 
down_lﬂd
;

149 
num_ôems
;

150 
num_ex∑nds
;

151 
num_ex∑nd_ªÆlocs
;

152 
num_c⁄åa˘s
;

153 
num_c⁄åa˘_ªÆlocs
;

154 
num_hash_ˇŒs
;

155 
num_comp_ˇŒs
;

156 
num_ö£π
;

157 
num_ª∂a˚
;

158 
num_dñëe
;

159 
num_no_dñëe
;

160 
num_ªåõve
;

161 
num_ªåõve_miss
;

162 
num_hash_comps
;

163 
îr‹
;

164 } 
	t_LHASH
;

167 
	#LH_LOAD_MULT
 256

	)

173 
	#lh_îr‹
(
lh
Ë(÷h)->
îr‹
)

	)

175 
_LHASH
 *
lh_√w
(
LHASH_HASH_FN_TYPE
 
h
, 
LHASH_COMP_FN_TYPE
 
c
);

176 
lh_‰ì
(
_LHASH
 *
lh
);

177 *
lh_ö£π
(
_LHASH
 *
lh
, *
d©a
);

178 *
lh_dñëe
(
_LHASH
 *
lh
, c⁄° *
d©a
);

179 *
lh_ªåõve
(
_LHASH
 *
lh
, c⁄° *
d©a
);

180 
lh_dﬂŒ
(
_LHASH
 *
lh
, 
LHASH_DOALL_FN_TYPE
 
func
);

181 
lh_dﬂŒ_¨g
(
_LHASH
 *
lh
, 
LHASH_DOALL_ARG_FN_TYPE
 
func
, *
¨g
);

182 
lh_°rhash
(c⁄° *
c
);

183 
lh_num_ôems
(c⁄° 
_LHASH
 *
lh
);

185 #i‚de‡
OPENSSL_NO_FP_API


186 
lh_°©s
(c⁄° 
_LHASH
 *
lh
, 
FILE
 *
out
);

187 
lh_node_°©s
(c⁄° 
_LHASH
 *
lh
, 
FILE
 *
out
);

188 
lh_node_ußge_°©s
(c⁄° 
_LHASH
 *
lh
, 
FILE
 *
out
);

191 #i‚de‡
OPENSSL_NO_BIO


192 
lh_°©s_bio
(c⁄° 
_LHASH
 *
lh
, 
BIO
 *
out
);

193 
lh_node_°©s_bio
(c⁄° 
_LHASH
 *
lh
, 
BIO
 *
out
);

194 
lh_node_ußge_°©s_bio
(c⁄° 
_LHASH
 *
lh
, 
BIO
 *
out
);

199 
	#LHASH_OF
(
ty≥
Ë
lhash_°_
##
	)
type

201 
	#DECLARE_LHASH_OF
(
ty≥
Ë
	`LHASH_OF
—y≥Ë{ 
dummy
; }

	)

203 
	#CHECKED_LHASH_OF
(
ty≥
,
lh
) \

204 ((
_LHASH
 *)
	`CHECKED_PTR_OF
(
	`LHASH_OF
(
ty≥
),
lh
))

	)

207 
	#LHM_lh_√w
(
ty≥
, 
«me
) \

208 ((
	`LHASH_OF
(
ty≥
Ë*)
	`lh_√w
(
	`LHASH_HASH_FN
(
«me
), 
	`LHASH_COMP_FN
“ame)))

	)

209 
	#LHM_lh_îr‹
(
ty≥
, 
lh
) \

210 
	`lh_îr‹
(
	`CHECKED_LHASH_OF
(
ty≥
,
lh
))

	)

211 
	#LHM_lh_ö£π
(
ty≥
, 
lh
, 
ö°
) \

212 ((
ty≥
 *)
	`lh_ö£π
(
	`CHECKED_LHASH_OF
—y≥, 
lh
), \

213 
	`CHECKED_PTR_OF
(
ty≥
, 
ö°
)))

	)

214 
	#LHM_lh_ªåõve
(
ty≥
, 
lh
, 
ö°
) \

215 ((
ty≥
 *)
	`lh_ªåõve
(
	`CHECKED_LHASH_OF
—y≥, 
lh
), \

216 
	`CHECKED_PTR_OF
(
ty≥
, 
ö°
)))

	)

217 
	#LHM_lh_dñëe
(
ty≥
, 
lh
, 
ö°
) \

218 ((
ty≥
 *)
	`lh_dñëe
(
	`CHECKED_LHASH_OF
—y≥, 
lh
), \

219 
	`CHECKED_PTR_OF
(
ty≥
, 
ö°
)))

	)

220 
	#LHM_lh_dﬂŒ
(
ty≥
, 
lh
,
‚
Ë
	`lh_dﬂŒ
(
	`CHECKED_LHASH_OF
—y≥,Üh), fn)

	)

221 
	#LHM_lh_dﬂŒ_¨g
(
ty≥
, 
lh
, 
‚
, 
¨g_ty≥
, 
¨g
) \

222 
	`lh_dﬂŒ_¨g
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
‚
, 
	`CHECKED_PTR_OF
(
¨g_ty≥
, 
¨g
))

	)

223 
	#LHM_lh_num_ôems
(
ty≥
, 
lh
Ë
	`lh_num_ôems
(
	`CHECKED_LHASH_OF
—y≥,Üh))

	)

224 
	#LHM_lh_down_lﬂd
(
ty≥
, 
lh
Ë(
	`CHECKED_LHASH_OF
—y≥,Üh)->
down_lﬂd
)

	)

225 
	#LHM_lh_node_°©s_bio
(
ty≥
, 
lh
, 
out
) \

226 
	`lh_node_°©s_bio
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
out
)

	)

227 
	#LHM_lh_node_ußge_°©s_bio
(
ty≥
, 
lh
, 
out
) \

228 
	`lh_node_ußge_°©s_bio
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
out
)

	)

229 
	#LHM_lh_°©s_bio
(
ty≥
, 
lh
, 
out
) \

230 
	`lh_°©s_bio
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
out
)

	)

231 
	#LHM_lh_‰ì
(
ty≥
, 
lh
Ë
	`lh_‰ì
(
	`CHECKED_LHASH_OF
—y≥,Üh))

	)

233 
DECLARE_LHASH_OF
(
OPENSSL_STRING
);

234 
DECLARE_LHASH_OF
(
OPENSSL_CSTRING
);

236 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/obj_mac.h

65 
	#SN_undef
 "UNDEF"

	)

66 
	#LN_undef
 "undeföed"

	)

67 
	#NID_undef
 0

	)

68 
	#OBJ_undef
 0L

	)

70 
	#SN_ôu_t
 "ITU-T"

	)

71 
	#LN_ôu_t
 "ôu-t"

	)

72 
	#NID_ôu_t
 645

	)

73 
	#OBJ_ôu_t
 0L

	)

75 
	#NID_ccôt
 404

	)

76 
	#OBJ_ccôt
 
OBJ_ôu_t


	)

78 
	#SN_iso
 "ISO"

	)

79 
	#LN_iso
 "iso"

	)

80 
	#NID_iso
 181

	)

81 
	#OBJ_iso
 1L

	)

83 
	#SN_joöt_iso_ôu_t
 "JOINT-ISO-ITU-T"

	)

84 
	#LN_joöt_iso_ôu_t
 "joöt-iso-ôu-t"

	)

85 
	#NID_joöt_iso_ôu_t
 646

	)

86 
	#OBJ_joöt_iso_ôu_t
 2L

	)

88 
	#NID_joöt_iso_ccôt
 393

	)

89 
	#OBJ_joöt_iso_ccôt
 
OBJ_joöt_iso_ôu_t


	)

91 
	#SN_membî_body
 "membî-body"

	)

92 
	#LN_membî_body
 "ISO Membî Body"

	)

93 
	#NID_membî_body
 182

	)

94 
	#OBJ_membî_body
 
OBJ_iso
,2L

	)

96 
	#SN_idítifõd_‹g™iz©i⁄
 "idítifõd-‹g™iz©i⁄"

	)

97 
	#NID_idítifõd_‹g™iz©i⁄
 676

	)

98 
	#OBJ_idítifõd_‹g™iz©i⁄
 
OBJ_iso
,3L

	)

100 
	#SN_hmac_md5
 "HMAC-MD5"

	)

101 
	#LN_hmac_md5
 "hmac-md5"

	)

102 
	#NID_hmac_md5
 780

	)

103 
	#OBJ_hmac_md5
 
OBJ_idítifõd_‹g™iz©i⁄
,6L,1L,5L,5L,8L,1L,1L

	)

105 
	#SN_hmac_sha1
 "HMAC-SHA1"

	)

106 
	#LN_hmac_sha1
 "hmac-sha1"

	)

107 
	#NID_hmac_sha1
 781

	)

108 
	#OBJ_hmac_sha1
 
OBJ_idítifõd_‹g™iz©i⁄
,6L,1L,5L,5L,8L,1L,2L

	)

110 
	#SN_˚πicom_¨c
 "˚πicom-¨c"

	)

111 
	#NID_˚πicom_¨c
 677

	)

112 
	#OBJ_˚πicom_¨c
 
OBJ_idítifõd_‹g™iz©i⁄
,132L

	)

114 
	#SN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "öã∫©i⁄Æ-‹g™iz©i⁄s"

	)

115 
	#LN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "I¡î«ti⁄Æ Org™iz©i⁄s"

	)

116 
	#NID_öã∫©i⁄Æ_‹g™iz©i⁄s
 647

	)

117 
	#OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
 
OBJ_joöt_iso_ôu_t
,23L

	)

119 
	#SN_w≠
 "w≠"

	)

120 
	#NID_w≠
 678

	)

121 
	#OBJ_w≠
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,43L

	)

123 
	#SN_w≠_wsg
 "w≠-wsg"

	)

124 
	#NID_w≠_wsg
 679

	)

125 
	#OBJ_w≠_wsg
 
OBJ_w≠
,1L

	)

127 
	#SN_£À˘ed_©åibuã_ty≥s
 "£À˘ed-©åibuã-ty≥s"

	)

128 
	#LN_£À˘ed_©åibuã_ty≥s
 "Sñe˘ed Aâribuã Ty≥s"

	)

129 
	#NID_£À˘ed_©åibuã_ty≥s
 394

	)

130 
	#OBJ_£À˘ed_©åibuã_ty≥s
 
OBJ_joöt_iso_ôu_t
,5L,1L,5L

	)

132 
	#SN_˛óøn˚
 "˛óøn˚"

	)

133 
	#NID_˛óøn˚
 395

	)

134 
	#OBJ_˛óøn˚
 
OBJ_£À˘ed_©åibuã_ty≥s
,55L

	)

136 
	#SN_ISO_US
 "ISO-US"

	)

137 
	#LN_ISO_US
 "ISO US Membî Body"

	)

138 
	#NID_ISO_US
 183

	)

139 
	#OBJ_ISO_US
 
OBJ_membî_body
,840L

	)

141 
	#SN_X9_57
 "X9-57"

	)

142 
	#LN_X9_57
 "X9.57"

	)

143 
	#NID_X9_57
 184

	)

144 
	#OBJ_X9_57
 
OBJ_ISO_US
,10040L

	)

146 
	#SN_X9cm
 "X9cm"

	)

147 
	#LN_X9cm
 "X9.57 CM ?"

	)

148 
	#NID_X9cm
 185

	)

149 
	#OBJ_X9cm
 
OBJ_X9_57
,4L

	)

151 
	#SN_dß
 "DSA"

	)

152 
	#LN_dß
 "dßEn¸y±i⁄"

	)

153 
	#NID_dß
 116

	)

154 
	#OBJ_dß
 
OBJ_X9cm
,1L

	)

156 
	#SN_dßWôhSHA1
 "DSA-SHA1"

	)

157 
	#LN_dßWôhSHA1
 "dßWôhSHA1"

	)

158 
	#NID_dßWôhSHA1
 113

	)

159 
	#OBJ_dßWôhSHA1
 
OBJ_X9cm
,3L

	)

161 
	#SN_™si_X9_62
 "™si-X9-62"

	)

162 
	#LN_™si_X9_62
 "ANSI X9.62"

	)

163 
	#NID_™si_X9_62
 405

	)

164 
	#OBJ_™si_X9_62
 
OBJ_ISO_US
,10045L

	)

166 
	#OBJ_X9_62_id_fõldTy≥
 
OBJ_™si_X9_62
,1L

	)

168 
	#SN_X9_62_¥ime_fõld
 "¥ime-fõld"

	)

169 
	#NID_X9_62_¥ime_fõld
 406

	)

170 
	#OBJ_X9_62_¥ime_fõld
 
OBJ_X9_62_id_fõldTy≥
,1L

	)

172 
	#SN_X9_62_ch¨a˘îi°ic_two_fõld
 "ch¨a˘îi°ic-two-fõld"

	)

173 
	#NID_X9_62_ch¨a˘îi°ic_two_fõld
 407

	)

174 
	#OBJ_X9_62_ch¨a˘îi°ic_two_fõld
 
OBJ_X9_62_id_fõldTy≥
,2L

	)

176 
	#SN_X9_62_id_ch¨a˘îi°ic_two_basis
 "id-ch¨a˘îi°ic-two-basis"

	)

177 
	#NID_X9_62_id_ch¨a˘îi°ic_two_basis
 680

	)

178 
	#OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
 
OBJ_X9_62_ch¨a˘îi°ic_two_fõld
,3L

	)

180 
	#SN_X9_62_⁄Basis
 "⁄Basis"

	)

181 
	#NID_X9_62_⁄Basis
 681

	)

182 
	#OBJ_X9_62_⁄Basis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,1L

	)

184 
	#SN_X9_62_çBasis
 "çBasis"

	)

185 
	#NID_X9_62_çBasis
 682

	)

186 
	#OBJ_X9_62_çBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,2L

	)

188 
	#SN_X9_62_µBasis
 "µBasis"

	)

189 
	#NID_X9_62_µBasis
 683

	)

190 
	#OBJ_X9_62_µBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,3L

	)

192 
	#OBJ_X9_62_id_publicKeyTy≥
 
OBJ_™si_X9_62
,2L

	)

194 
	#SN_X9_62_id_ecPublicKey
 "id-ecPublicKey"

	)

195 
	#NID_X9_62_id_ecPublicKey
 408

	)

196 
	#OBJ_X9_62_id_ecPublicKey
 
OBJ_X9_62_id_publicKeyTy≥
,1L

	)

198 
	#OBJ_X9_62_ñlùticCurve
 
OBJ_™si_X9_62
,3L

	)

200 
	#OBJ_X9_62_c_TwoCurve
 
OBJ_X9_62_ñlùticCurve
,0L

	)

202 
	#SN_X9_62_c2≤b163v1
 "c2≤b163v1"

	)

203 
	#NID_X9_62_c2≤b163v1
 684

	)

204 
	#OBJ_X9_62_c2≤b163v1
 
OBJ_X9_62_c_TwoCurve
,1L

	)

206 
	#SN_X9_62_c2≤b163v2
 "c2≤b163v2"

	)

207 
	#NID_X9_62_c2≤b163v2
 685

	)

208 
	#OBJ_X9_62_c2≤b163v2
 
OBJ_X9_62_c_TwoCurve
,2L

	)

210 
	#SN_X9_62_c2≤b163v3
 "c2≤b163v3"

	)

211 
	#NID_X9_62_c2≤b163v3
 686

	)

212 
	#OBJ_X9_62_c2≤b163v3
 
OBJ_X9_62_c_TwoCurve
,3L

	)

214 
	#SN_X9_62_c2≤b176v1
 "c2≤b176v1"

	)

215 
	#NID_X9_62_c2≤b176v1
 687

	)

216 
	#OBJ_X9_62_c2≤b176v1
 
OBJ_X9_62_c_TwoCurve
,4L

	)

218 
	#SN_X9_62_c2äb191v1
 "c2äb191v1"

	)

219 
	#NID_X9_62_c2äb191v1
 688

	)

220 
	#OBJ_X9_62_c2äb191v1
 
OBJ_X9_62_c_TwoCurve
,5L

	)

222 
	#SN_X9_62_c2äb191v2
 "c2äb191v2"

	)

223 
	#NID_X9_62_c2äb191v2
 689

	)

224 
	#OBJ_X9_62_c2äb191v2
 
OBJ_X9_62_c_TwoCurve
,6L

	)

226 
	#SN_X9_62_c2äb191v3
 "c2äb191v3"

	)

227 
	#NID_X9_62_c2äb191v3
 690

	)

228 
	#OBJ_X9_62_c2äb191v3
 
OBJ_X9_62_c_TwoCurve
,7L

	)

230 
	#SN_X9_62_c2⁄b191v4
 "c2⁄b191v4"

	)

231 
	#NID_X9_62_c2⁄b191v4
 691

	)

232 
	#OBJ_X9_62_c2⁄b191v4
 
OBJ_X9_62_c_TwoCurve
,8L

	)

234 
	#SN_X9_62_c2⁄b191v5
 "c2⁄b191v5"

	)

235 
	#NID_X9_62_c2⁄b191v5
 692

	)

236 
	#OBJ_X9_62_c2⁄b191v5
 
OBJ_X9_62_c_TwoCurve
,9L

	)

238 
	#SN_X9_62_c2≤b208w1
 "c2≤b208w1"

	)

239 
	#NID_X9_62_c2≤b208w1
 693

	)

240 
	#OBJ_X9_62_c2≤b208w1
 
OBJ_X9_62_c_TwoCurve
,10L

	)

242 
	#SN_X9_62_c2äb239v1
 "c2äb239v1"

	)

243 
	#NID_X9_62_c2äb239v1
 694

	)

244 
	#OBJ_X9_62_c2äb239v1
 
OBJ_X9_62_c_TwoCurve
,11L

	)

246 
	#SN_X9_62_c2äb239v2
 "c2äb239v2"

	)

247 
	#NID_X9_62_c2äb239v2
 695

	)

248 
	#OBJ_X9_62_c2äb239v2
 
OBJ_X9_62_c_TwoCurve
,12L

	)

250 
	#SN_X9_62_c2äb239v3
 "c2äb239v3"

	)

251 
	#NID_X9_62_c2äb239v3
 696

	)

252 
	#OBJ_X9_62_c2äb239v3
 
OBJ_X9_62_c_TwoCurve
,13L

	)

254 
	#SN_X9_62_c2⁄b239v4
 "c2⁄b239v4"

	)

255 
	#NID_X9_62_c2⁄b239v4
 697

	)

256 
	#OBJ_X9_62_c2⁄b239v4
 
OBJ_X9_62_c_TwoCurve
,14L

	)

258 
	#SN_X9_62_c2⁄b239v5
 "c2⁄b239v5"

	)

259 
	#NID_X9_62_c2⁄b239v5
 698

	)

260 
	#OBJ_X9_62_c2⁄b239v5
 
OBJ_X9_62_c_TwoCurve
,15L

	)

262 
	#SN_X9_62_c2≤b272w1
 "c2≤b272w1"

	)

263 
	#NID_X9_62_c2≤b272w1
 699

	)

264 
	#OBJ_X9_62_c2≤b272w1
 
OBJ_X9_62_c_TwoCurve
,16L

	)

266 
	#SN_X9_62_c2≤b304w1
 "c2≤b304w1"

	)

267 
	#NID_X9_62_c2≤b304w1
 700

	)

268 
	#OBJ_X9_62_c2≤b304w1
 
OBJ_X9_62_c_TwoCurve
,17L

	)

270 
	#SN_X9_62_c2äb359v1
 "c2äb359v1"

	)

271 
	#NID_X9_62_c2äb359v1
 701

	)

272 
	#OBJ_X9_62_c2äb359v1
 
OBJ_X9_62_c_TwoCurve
,18L

	)

274 
	#SN_X9_62_c2≤b368w1
 "c2≤b368w1"

	)

275 
	#NID_X9_62_c2≤b368w1
 702

	)

276 
	#OBJ_X9_62_c2≤b368w1
 
OBJ_X9_62_c_TwoCurve
,19L

	)

278 
	#SN_X9_62_c2äb431r1
 "c2äb431r1"

	)

279 
	#NID_X9_62_c2äb431r1
 703

	)

280 
	#OBJ_X9_62_c2äb431r1
 
OBJ_X9_62_c_TwoCurve
,20L

	)

282 
	#OBJ_X9_62_¥imeCurve
 
OBJ_X9_62_ñlùticCurve
,1L

	)

284 
	#SN_X9_62_¥ime192v1
 "¥ime192v1"

	)

285 
	#NID_X9_62_¥ime192v1
 409

	)

286 
	#OBJ_X9_62_¥ime192v1
 
OBJ_X9_62_¥imeCurve
,1L

	)

288 
	#SN_X9_62_¥ime192v2
 "¥ime192v2"

	)

289 
	#NID_X9_62_¥ime192v2
 410

	)

290 
	#OBJ_X9_62_¥ime192v2
 
OBJ_X9_62_¥imeCurve
,2L

	)

292 
	#SN_X9_62_¥ime192v3
 "¥ime192v3"

	)

293 
	#NID_X9_62_¥ime192v3
 411

	)

294 
	#OBJ_X9_62_¥ime192v3
 
OBJ_X9_62_¥imeCurve
,3L

	)

296 
	#SN_X9_62_¥ime239v1
 "¥ime239v1"

	)

297 
	#NID_X9_62_¥ime239v1
 412

	)

298 
	#OBJ_X9_62_¥ime239v1
 
OBJ_X9_62_¥imeCurve
,4L

	)

300 
	#SN_X9_62_¥ime239v2
 "¥ime239v2"

	)

301 
	#NID_X9_62_¥ime239v2
 413

	)

302 
	#OBJ_X9_62_¥ime239v2
 
OBJ_X9_62_¥imeCurve
,5L

	)

304 
	#SN_X9_62_¥ime239v3
 "¥ime239v3"

	)

305 
	#NID_X9_62_¥ime239v3
 414

	)

306 
	#OBJ_X9_62_¥ime239v3
 
OBJ_X9_62_¥imeCurve
,6L

	)

308 
	#SN_X9_62_¥ime256v1
 "¥ime256v1"

	)

309 
	#NID_X9_62_¥ime256v1
 415

	)

310 
	#OBJ_X9_62_¥ime256v1
 
OBJ_X9_62_¥imeCurve
,7L

	)

312 
	#OBJ_X9_62_id_ecSigTy≥
 
OBJ_™si_X9_62
,4L

	)

314 
	#SN_ecdß_wôh_SHA1
 "ecdß-wôh-SHA1"

	)

315 
	#NID_ecdß_wôh_SHA1
 416

	)

316 
	#OBJ_ecdß_wôh_SHA1
 
OBJ_X9_62_id_ecSigTy≥
,1L

	)

318 
	#SN_ecdß_wôh_Recommíded
 "ecdß-wôh-Recommíded"

	)

319 
	#NID_ecdß_wôh_Recommíded
 791

	)

320 
	#OBJ_ecdß_wôh_Recommíded
 
OBJ_X9_62_id_ecSigTy≥
,2L

	)

322 
	#SN_ecdß_wôh_S≥cifõd
 "ecdß-wôh-S≥cifõd"

	)

323 
	#NID_ecdß_wôh_S≥cifõd
 792

	)

324 
	#OBJ_ecdß_wôh_S≥cifõd
 
OBJ_X9_62_id_ecSigTy≥
,3L

	)

326 
	#SN_ecdß_wôh_SHA224
 "ecdß-wôh-SHA224"

	)

327 
	#NID_ecdß_wôh_SHA224
 793

	)

328 
	#OBJ_ecdß_wôh_SHA224
 
OBJ_ecdß_wôh_S≥cifõd
,1L

	)

330 
	#SN_ecdß_wôh_SHA256
 "ecdß-wôh-SHA256"

	)

331 
	#NID_ecdß_wôh_SHA256
 794

	)

332 
	#OBJ_ecdß_wôh_SHA256
 
OBJ_ecdß_wôh_S≥cifõd
,2L

	)

334 
	#SN_ecdß_wôh_SHA384
 "ecdß-wôh-SHA384"

	)

335 
	#NID_ecdß_wôh_SHA384
 795

	)

336 
	#OBJ_ecdß_wôh_SHA384
 
OBJ_ecdß_wôh_S≥cifõd
,3L

	)

338 
	#SN_ecdß_wôh_SHA512
 "ecdß-wôh-SHA512"

	)

339 
	#NID_ecdß_wôh_SHA512
 796

	)

340 
	#OBJ_ecdß_wôh_SHA512
 
OBJ_ecdß_wôh_S≥cifõd
,4L

	)

342 
	#OBJ_£cg_ñlùticCurve
 
OBJ_˚πicom_¨c
,0L

	)

344 
	#SN_£˝112r1
 "£˝112r1"

	)

345 
	#NID_£˝112r1
 704

	)

346 
	#OBJ_£˝112r1
 
OBJ_£cg_ñlùticCurve
,6L

	)

348 
	#SN_£˝112r2
 "£˝112r2"

	)

349 
	#NID_£˝112r2
 705

	)

350 
	#OBJ_£˝112r2
 
OBJ_£cg_ñlùticCurve
,7L

	)

352 
	#SN_£˝128r1
 "£˝128r1"

	)

353 
	#NID_£˝128r1
 706

	)

354 
	#OBJ_£˝128r1
 
OBJ_£cg_ñlùticCurve
,28L

	)

356 
	#SN_£˝128r2
 "£˝128r2"

	)

357 
	#NID_£˝128r2
 707

	)

358 
	#OBJ_£˝128r2
 
OBJ_£cg_ñlùticCurve
,29L

	)

360 
	#SN_£˝160k1
 "£˝160k1"

	)

361 
	#NID_£˝160k1
 708

	)

362 
	#OBJ_£˝160k1
 
OBJ_£cg_ñlùticCurve
,9L

	)

364 
	#SN_£˝160r1
 "£˝160r1"

	)

365 
	#NID_£˝160r1
 709

	)

366 
	#OBJ_£˝160r1
 
OBJ_£cg_ñlùticCurve
,8L

	)

368 
	#SN_£˝160r2
 "£˝160r2"

	)

369 
	#NID_£˝160r2
 710

	)

370 
	#OBJ_£˝160r2
 
OBJ_£cg_ñlùticCurve
,30L

	)

372 
	#SN_£˝192k1
 "£˝192k1"

	)

373 
	#NID_£˝192k1
 711

	)

374 
	#OBJ_£˝192k1
 
OBJ_£cg_ñlùticCurve
,31L

	)

376 
	#SN_£˝224k1
 "£˝224k1"

	)

377 
	#NID_£˝224k1
 712

	)

378 
	#OBJ_£˝224k1
 
OBJ_£cg_ñlùticCurve
,32L

	)

380 
	#SN_£˝224r1
 "£˝224r1"

	)

381 
	#NID_£˝224r1
 713

	)

382 
	#OBJ_£˝224r1
 
OBJ_£cg_ñlùticCurve
,33L

	)

384 
	#SN_£˝256k1
 "£˝256k1"

	)

385 
	#NID_£˝256k1
 714

	)

386 
	#OBJ_£˝256k1
 
OBJ_£cg_ñlùticCurve
,10L

	)

388 
	#SN_£˝384r1
 "£˝384r1"

	)

389 
	#NID_£˝384r1
 715

	)

390 
	#OBJ_£˝384r1
 
OBJ_£cg_ñlùticCurve
,34L

	)

392 
	#SN_£˝521r1
 "£˝521r1"

	)

393 
	#NID_£˝521r1
 716

	)

394 
	#OBJ_£˝521r1
 
OBJ_£cg_ñlùticCurve
,35L

	)

396 
	#SN_£˘113r1
 "£˘113r1"

	)

397 
	#NID_£˘113r1
 717

	)

398 
	#OBJ_£˘113r1
 
OBJ_£cg_ñlùticCurve
,4L

	)

400 
	#SN_£˘113r2
 "£˘113r2"

	)

401 
	#NID_£˘113r2
 718

	)

402 
	#OBJ_£˘113r2
 
OBJ_£cg_ñlùticCurve
,5L

	)

404 
	#SN_£˘131r1
 "£˘131r1"

	)

405 
	#NID_£˘131r1
 719

	)

406 
	#OBJ_£˘131r1
 
OBJ_£cg_ñlùticCurve
,22L

	)

408 
	#SN_£˘131r2
 "£˘131r2"

	)

409 
	#NID_£˘131r2
 720

	)

410 
	#OBJ_£˘131r2
 
OBJ_£cg_ñlùticCurve
,23L

	)

412 
	#SN_£˘163k1
 "£˘163k1"

	)

413 
	#NID_£˘163k1
 721

	)

414 
	#OBJ_£˘163k1
 
OBJ_£cg_ñlùticCurve
,1L

	)

416 
	#SN_£˘163r1
 "£˘163r1"

	)

417 
	#NID_£˘163r1
 722

	)

418 
	#OBJ_£˘163r1
 
OBJ_£cg_ñlùticCurve
,2L

	)

420 
	#SN_£˘163r2
 "£˘163r2"

	)

421 
	#NID_£˘163r2
 723

	)

422 
	#OBJ_£˘163r2
 
OBJ_£cg_ñlùticCurve
,15L

	)

424 
	#SN_£˘193r1
 "£˘193r1"

	)

425 
	#NID_£˘193r1
 724

	)

426 
	#OBJ_£˘193r1
 
OBJ_£cg_ñlùticCurve
,24L

	)

428 
	#SN_£˘193r2
 "£˘193r2"

	)

429 
	#NID_£˘193r2
 725

	)

430 
	#OBJ_£˘193r2
 
OBJ_£cg_ñlùticCurve
,25L

	)

432 
	#SN_£˘233k1
 "£˘233k1"

	)

433 
	#NID_£˘233k1
 726

	)

434 
	#OBJ_£˘233k1
 
OBJ_£cg_ñlùticCurve
,26L

	)

436 
	#SN_£˘233r1
 "£˘233r1"

	)

437 
	#NID_£˘233r1
 727

	)

438 
	#OBJ_£˘233r1
 
OBJ_£cg_ñlùticCurve
,27L

	)

440 
	#SN_£˘239k1
 "£˘239k1"

	)

441 
	#NID_£˘239k1
 728

	)

442 
	#OBJ_£˘239k1
 
OBJ_£cg_ñlùticCurve
,3L

	)

444 
	#SN_£˘283k1
 "£˘283k1"

	)

445 
	#NID_£˘283k1
 729

	)

446 
	#OBJ_£˘283k1
 
OBJ_£cg_ñlùticCurve
,16L

	)

448 
	#SN_£˘283r1
 "£˘283r1"

	)

449 
	#NID_£˘283r1
 730

	)

450 
	#OBJ_£˘283r1
 
OBJ_£cg_ñlùticCurve
,17L

	)

452 
	#SN_£˘409k1
 "£˘409k1"

	)

453 
	#NID_£˘409k1
 731

	)

454 
	#OBJ_£˘409k1
 
OBJ_£cg_ñlùticCurve
,36L

	)

456 
	#SN_£˘409r1
 "£˘409r1"

	)

457 
	#NID_£˘409r1
 732

	)

458 
	#OBJ_£˘409r1
 
OBJ_£cg_ñlùticCurve
,37L

	)

460 
	#SN_£˘571k1
 "£˘571k1"

	)

461 
	#NID_£˘571k1
 733

	)

462 
	#OBJ_£˘571k1
 
OBJ_£cg_ñlùticCurve
,38L

	)

464 
	#SN_£˘571r1
 "£˘571r1"

	)

465 
	#NID_£˘571r1
 734

	)

466 
	#OBJ_£˘571r1
 
OBJ_£cg_ñlùticCurve
,39L

	)

468 
	#OBJ_w≠_wsg_idm_ecid
 
OBJ_w≠_wsg
,4L

	)

470 
	#SN_w≠_wsg_idm_ecid_wés1
 "w≠-wsg-idm-ecid-wés1"

	)

471 
	#NID_w≠_wsg_idm_ecid_wés1
 735

	)

472 
	#OBJ_w≠_wsg_idm_ecid_wés1
 
OBJ_w≠_wsg_idm_ecid
,1L

	)

474 
	#SN_w≠_wsg_idm_ecid_wés3
 "w≠-wsg-idm-ecid-wés3"

	)

475 
	#NID_w≠_wsg_idm_ecid_wés3
 736

	)

476 
	#OBJ_w≠_wsg_idm_ecid_wés3
 
OBJ_w≠_wsg_idm_ecid
,3L

	)

478 
	#SN_w≠_wsg_idm_ecid_wés4
 "w≠-wsg-idm-ecid-wés4"

	)

479 
	#NID_w≠_wsg_idm_ecid_wés4
 737

	)

480 
	#OBJ_w≠_wsg_idm_ecid_wés4
 
OBJ_w≠_wsg_idm_ecid
,4L

	)

482 
	#SN_w≠_wsg_idm_ecid_wés5
 "w≠-wsg-idm-ecid-wés5"

	)

483 
	#NID_w≠_wsg_idm_ecid_wés5
 738

	)

484 
	#OBJ_w≠_wsg_idm_ecid_wés5
 
OBJ_w≠_wsg_idm_ecid
,5L

	)

486 
	#SN_w≠_wsg_idm_ecid_wés6
 "w≠-wsg-idm-ecid-wés6"

	)

487 
	#NID_w≠_wsg_idm_ecid_wés6
 739

	)

488 
	#OBJ_w≠_wsg_idm_ecid_wés6
 
OBJ_w≠_wsg_idm_ecid
,6L

	)

490 
	#SN_w≠_wsg_idm_ecid_wés7
 "w≠-wsg-idm-ecid-wés7"

	)

491 
	#NID_w≠_wsg_idm_ecid_wés7
 740

	)

492 
	#OBJ_w≠_wsg_idm_ecid_wés7
 
OBJ_w≠_wsg_idm_ecid
,7L

	)

494 
	#SN_w≠_wsg_idm_ecid_wés8
 "w≠-wsg-idm-ecid-wés8"

	)

495 
	#NID_w≠_wsg_idm_ecid_wés8
 741

	)

496 
	#OBJ_w≠_wsg_idm_ecid_wés8
 
OBJ_w≠_wsg_idm_ecid
,8L

	)

498 
	#SN_w≠_wsg_idm_ecid_wés9
 "w≠-wsg-idm-ecid-wés9"

	)

499 
	#NID_w≠_wsg_idm_ecid_wés9
 742

	)

500 
	#OBJ_w≠_wsg_idm_ecid_wés9
 
OBJ_w≠_wsg_idm_ecid
,9L

	)

502 
	#SN_w≠_wsg_idm_ecid_wés10
 "w≠-wsg-idm-ecid-wés10"

	)

503 
	#NID_w≠_wsg_idm_ecid_wés10
 743

	)

504 
	#OBJ_w≠_wsg_idm_ecid_wés10
 
OBJ_w≠_wsg_idm_ecid
,10L

	)

506 
	#SN_w≠_wsg_idm_ecid_wés11
 "w≠-wsg-idm-ecid-wés11"

	)

507 
	#NID_w≠_wsg_idm_ecid_wés11
 744

	)

508 
	#OBJ_w≠_wsg_idm_ecid_wés11
 
OBJ_w≠_wsg_idm_ecid
,11L

	)

510 
	#SN_w≠_wsg_idm_ecid_wés12
 "w≠-wsg-idm-ecid-wés12"

	)

511 
	#NID_w≠_wsg_idm_ecid_wés12
 745

	)

512 
	#OBJ_w≠_wsg_idm_ecid_wés12
 
OBJ_w≠_wsg_idm_ecid
,12L

	)

514 
	#SN_ˇ°5_cbc
 "CAST5-CBC"

	)

515 
	#LN_ˇ°5_cbc
 "ˇ°5-cbc"

	)

516 
	#NID_ˇ°5_cbc
 108

	)

517 
	#OBJ_ˇ°5_cbc
 
OBJ_ISO_US
,113533L,7L,66L,10L

	)

519 
	#SN_ˇ°5_ecb
 "CAST5-ECB"

	)

520 
	#LN_ˇ°5_ecb
 "ˇ°5-ecb"

	)

521 
	#NID_ˇ°5_ecb
 109

	)

523 
	#SN_ˇ°5_cfb64
 "CAST5-CFB"

	)

524 
	#LN_ˇ°5_cfb64
 "ˇ°5-cfb"

	)

525 
	#NID_ˇ°5_cfb64
 110

	)

527 
	#SN_ˇ°5_ofb64
 "CAST5-OFB"

	)

528 
	#LN_ˇ°5_ofb64
 "ˇ°5-ofb"

	)

529 
	#NID_ˇ°5_ofb64
 111

	)

531 
	#LN_pbeWôhMD5AndCa°5_CBC
 "pbeWôhMD5AndCa°5CBC"

	)

532 
	#NID_pbeWôhMD5AndCa°5_CBC
 112

	)

533 
	#OBJ_pbeWôhMD5AndCa°5_CBC
 
OBJ_ISO_US
,113533L,7L,66L,12L

	)

535 
	#SN_id_Passw‹dBa£dMAC
 "id-Passw‹dBa£dMAC"

	)

536 
	#LN_id_Passw‹dBa£dMAC
 "∑ssw‹d ba£d MAC"

	)

537 
	#NID_id_Passw‹dBa£dMAC
 782

	)

538 
	#OBJ_id_Passw‹dBa£dMAC
 
OBJ_ISO_US
,113533L,7L,66L,13L

	)

540 
	#SN_id_DHBa£dMac
 "id-DHBa£dMac"

	)

541 
	#LN_id_DHBa£dMac
 "Diffõ-Hñlm™ ba£d MAC"

	)

542 
	#NID_id_DHBa£dMac
 783

	)

543 
	#OBJ_id_DHBa£dMac
 
OBJ_ISO_US
,113533L,7L,66L,30L

	)

545 
	#SN_rßdsi
 "rßdsi"

	)

546 
	#LN_rßdsi
 "RSA D©®Securôy, Inc."

	)

547 
	#NID_rßdsi
 1

	)

548 
	#OBJ_rßdsi
 
OBJ_ISO_US
,113549L

	)

550 
	#SN_pkcs
 "pkcs"

	)

551 
	#LN_pkcs
 "RSA D©®Securôy, Inc. PKCS"

	)

552 
	#NID_pkcs
 2

	)

553 
	#OBJ_pkcs
 
OBJ_rßdsi
,1L

	)

555 
	#SN_pkcs1
 "pkcs1"

	)

556 
	#NID_pkcs1
 186

	)

557 
	#OBJ_pkcs1
 
OBJ_pkcs
,1L

	)

559 
	#LN_rßEn¸y±i⁄
 "rßEn¸y±i⁄"

	)

560 
	#NID_rßEn¸y±i⁄
 6

	)

561 
	#OBJ_rßEn¸y±i⁄
 
OBJ_pkcs1
,1L

	)

563 
	#SN_md2WôhRSAEn¸y±i⁄
 "RSA-MD2"

	)

564 
	#LN_md2WôhRSAEn¸y±i⁄
 "md2WôhRSAEn¸y±i⁄"

	)

565 
	#NID_md2WôhRSAEn¸y±i⁄
 7

	)

566 
	#OBJ_md2WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,2L

	)

568 
	#SN_md4WôhRSAEn¸y±i⁄
 "RSA-MD4"

	)

569 
	#LN_md4WôhRSAEn¸y±i⁄
 "md4WôhRSAEn¸y±i⁄"

	)

570 
	#NID_md4WôhRSAEn¸y±i⁄
 396

	)

571 
	#OBJ_md4WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,3L

	)

573 
	#SN_md5WôhRSAEn¸y±i⁄
 "RSA-MD5"

	)

574 
	#LN_md5WôhRSAEn¸y±i⁄
 "md5WôhRSAEn¸y±i⁄"

	)

575 
	#NID_md5WôhRSAEn¸y±i⁄
 8

	)

576 
	#OBJ_md5WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,4L

	)

578 
	#SN_sha1WôhRSAEn¸y±i⁄
 "RSA-SHA1"

	)

579 
	#LN_sha1WôhRSAEn¸y±i⁄
 "sha1WôhRSAEn¸y±i⁄"

	)

580 
	#NID_sha1WôhRSAEn¸y±i⁄
 65

	)

581 
	#OBJ_sha1WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,5L

	)

583 
	#SN_rßesO´p
 "RSAES-OAEP"

	)

584 
	#LN_rßesO´p
 "rßesO´p"

	)

585 
	#NID_rßesO´p
 919

	)

586 
	#OBJ_rßesO´p
 
OBJ_pkcs1
,7L

	)

588 
	#SN_mgf1
 "MGF1"

	)

589 
	#LN_mgf1
 "mgf1"

	)

590 
	#NID_mgf1
 911

	)

591 
	#OBJ_mgf1
 
OBJ_pkcs1
,8L

	)

593 
	#SN_pS≥cifõd
 "PSPECIFIED"

	)

594 
	#LN_pS≥cifõd
 "pS≥cifõd"

	)

595 
	#NID_pS≥cifõd
 935

	)

596 
	#OBJ_pS≥cifõd
 
OBJ_pkcs1
,9L

	)

598 
	#SN_rßsßPss
 "RSASSA-PSS"

	)

599 
	#LN_rßsßPss
 "rßsßPss"

	)

600 
	#NID_rßsßPss
 912

	)

601 
	#OBJ_rßsßPss
 
OBJ_pkcs1
,10L

	)

603 
	#SN_sha256WôhRSAEn¸y±i⁄
 "RSA-SHA256"

	)

604 
	#LN_sha256WôhRSAEn¸y±i⁄
 "sha256WôhRSAEn¸y±i⁄"

	)

605 
	#NID_sha256WôhRSAEn¸y±i⁄
 668

	)

606 
	#OBJ_sha256WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,11L

	)

608 
	#SN_sha384WôhRSAEn¸y±i⁄
 "RSA-SHA384"

	)

609 
	#LN_sha384WôhRSAEn¸y±i⁄
 "sha384WôhRSAEn¸y±i⁄"

	)

610 
	#NID_sha384WôhRSAEn¸y±i⁄
 669

	)

611 
	#OBJ_sha384WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,12L

	)

613 
	#SN_sha512WôhRSAEn¸y±i⁄
 "RSA-SHA512"

	)

614 
	#LN_sha512WôhRSAEn¸y±i⁄
 "sha512WôhRSAEn¸y±i⁄"

	)

615 
	#NID_sha512WôhRSAEn¸y±i⁄
 670

	)

616 
	#OBJ_sha512WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,13L

	)

618 
	#SN_sha224WôhRSAEn¸y±i⁄
 "RSA-SHA224"

	)

619 
	#LN_sha224WôhRSAEn¸y±i⁄
 "sha224WôhRSAEn¸y±i⁄"

	)

620 
	#NID_sha224WôhRSAEn¸y±i⁄
 671

	)

621 
	#OBJ_sha224WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,14L

	)

623 
	#SN_pkcs3
 "pkcs3"

	)

624 
	#NID_pkcs3
 27

	)

625 
	#OBJ_pkcs3
 
OBJ_pkcs
,3L

	)

627 
	#LN_dhKeyAgªemít
 "dhKeyAgªemít"

	)

628 
	#NID_dhKeyAgªemít
 28

	)

629 
	#OBJ_dhKeyAgªemít
 
OBJ_pkcs3
,1L

	)

631 
	#SN_pkcs5
 "pkcs5"

	)

632 
	#NID_pkcs5
 187

	)

633 
	#OBJ_pkcs5
 
OBJ_pkcs
,5L

	)

635 
	#SN_pbeWôhMD2AndDES_CBC
 "PBE-MD2-DES"

	)

636 
	#LN_pbeWôhMD2AndDES_CBC
 "pbeWôhMD2AndDES-CBC"

	)

637 
	#NID_pbeWôhMD2AndDES_CBC
 9

	)

638 
	#OBJ_pbeWôhMD2AndDES_CBC
 
OBJ_pkcs5
,1L

	)

640 
	#SN_pbeWôhMD5AndDES_CBC
 "PBE-MD5-DES"

	)

641 
	#LN_pbeWôhMD5AndDES_CBC
 "pbeWôhMD5AndDES-CBC"

	)

642 
	#NID_pbeWôhMD5AndDES_CBC
 10

	)

643 
	#OBJ_pbeWôhMD5AndDES_CBC
 
OBJ_pkcs5
,3L

	)

645 
	#SN_pbeWôhMD2AndRC2_CBC
 "PBE-MD2-RC2-64"

	)

646 
	#LN_pbeWôhMD2AndRC2_CBC
 "pbeWôhMD2AndRC2-CBC"

	)

647 
	#NID_pbeWôhMD2AndRC2_CBC
 168

	)

648 
	#OBJ_pbeWôhMD2AndRC2_CBC
 
OBJ_pkcs5
,4L

	)

650 
	#SN_pbeWôhMD5AndRC2_CBC
 "PBE-MD5-RC2-64"

	)

651 
	#LN_pbeWôhMD5AndRC2_CBC
 "pbeWôhMD5AndRC2-CBC"

	)

652 
	#NID_pbeWôhMD5AndRC2_CBC
 169

	)

653 
	#OBJ_pbeWôhMD5AndRC2_CBC
 
OBJ_pkcs5
,6L

	)

655 
	#SN_pbeWôhSHA1AndDES_CBC
 "PBE-SHA1-DES"

	)

656 
	#LN_pbeWôhSHA1AndDES_CBC
 "pbeWôhSHA1AndDES-CBC"

	)

657 
	#NID_pbeWôhSHA1AndDES_CBC
 170

	)

658 
	#OBJ_pbeWôhSHA1AndDES_CBC
 
OBJ_pkcs5
,10L

	)

660 
	#SN_pbeWôhSHA1AndRC2_CBC
 "PBE-SHA1-RC2-64"

	)

661 
	#LN_pbeWôhSHA1AndRC2_CBC
 "pbeWôhSHA1AndRC2-CBC"

	)

662 
	#NID_pbeWôhSHA1AndRC2_CBC
 68

	)

663 
	#OBJ_pbeWôhSHA1AndRC2_CBC
 
OBJ_pkcs5
,11L

	)

665 
	#LN_id_pbkdf2
 "PBKDF2"

	)

666 
	#NID_id_pbkdf2
 69

	)

667 
	#OBJ_id_pbkdf2
 
OBJ_pkcs5
,12L

	)

669 
	#LN_pbes2
 "PBES2"

	)

670 
	#NID_pbes2
 161

	)

671 
	#OBJ_pbes2
 
OBJ_pkcs5
,13L

	)

673 
	#LN_pbmac1
 "PBMAC1"

	)

674 
	#NID_pbmac1
 162

	)

675 
	#OBJ_pbmac1
 
OBJ_pkcs5
,14L

	)

677 
	#SN_pkcs7
 "pkcs7"

	)

678 
	#NID_pkcs7
 20

	)

679 
	#OBJ_pkcs7
 
OBJ_pkcs
,7L

	)

681 
	#LN_pkcs7_d©a
 "pkcs7-d©a"

	)

682 
	#NID_pkcs7_d©a
 21

	)

683 
	#OBJ_pkcs7_d©a
 
OBJ_pkcs7
,1L

	)

685 
	#LN_pkcs7_sig√d
 "pkcs7-sig√dD©a"

	)

686 
	#NID_pkcs7_sig√d
 22

	)

687 
	#OBJ_pkcs7_sig√d
 
OBJ_pkcs7
,2L

	)

689 
	#LN_pkcs7_ívñ›ed
 "pkcs7-ívñ›edD©a"

	)

690 
	#NID_pkcs7_ívñ›ed
 23

	)

691 
	#OBJ_pkcs7_ívñ›ed
 
OBJ_pkcs7
,3L

	)

693 
	#LN_pkcs7_sig√dAndEnvñ›ed
 "pkcs7-sig√dAndEnvñ›edD©a"

	)

694 
	#NID_pkcs7_sig√dAndEnvñ›ed
 24

	)

695 
	#OBJ_pkcs7_sig√dAndEnvñ›ed
 
OBJ_pkcs7
,4L

	)

697 
	#LN_pkcs7_dige°
 "pkcs7-dige°D©a"

	)

698 
	#NID_pkcs7_dige°
 25

	)

699 
	#OBJ_pkcs7_dige°
 
OBJ_pkcs7
,5L

	)

701 
	#LN_pkcs7_í¸y±ed
 "pkcs7-í¸y±edD©a"

	)

702 
	#NID_pkcs7_í¸y±ed
 26

	)

703 
	#OBJ_pkcs7_í¸y±ed
 
OBJ_pkcs7
,6L

	)

705 
	#SN_pkcs9
 "pkcs9"

	)

706 
	#NID_pkcs9
 47

	)

707 
	#OBJ_pkcs9
 
OBJ_pkcs
,9L

	)

709 
	#LN_pkcs9_emaûAddªss
 "emaûAddªss"

	)

710 
	#NID_pkcs9_emaûAddªss
 48

	)

711 
	#OBJ_pkcs9_emaûAddªss
 
OBJ_pkcs9
,1L

	)

713 
	#LN_pkcs9_un°ru˘uªdName
 "un°ru˘uªdName"

	)

714 
	#NID_pkcs9_un°ru˘uªdName
 49

	)

715 
	#OBJ_pkcs9_un°ru˘uªdName
 
OBJ_pkcs9
,2L

	)

717 
	#LN_pkcs9_c⁄ã¡Ty≥
 "c⁄ã¡Ty≥"

	)

718 
	#NID_pkcs9_c⁄ã¡Ty≥
 50

	)

719 
	#OBJ_pkcs9_c⁄ã¡Ty≥
 
OBJ_pkcs9
,3L

	)

721 
	#LN_pkcs9_mesßgeDige°
 "mesßgeDige°"

	)

722 
	#NID_pkcs9_mesßgeDige°
 51

	)

723 
	#OBJ_pkcs9_mesßgeDige°
 
OBJ_pkcs9
,4L

	)

725 
	#LN_pkcs9_signögTime
 "signögTime"

	)

726 
	#NID_pkcs9_signögTime
 52

	)

727 
	#OBJ_pkcs9_signögTime
 
OBJ_pkcs9
,5L

	)

729 
	#LN_pkcs9_cou¡îsig«tuª
 "cou¡îsig«tuª"

	)

730 
	#NID_pkcs9_cou¡îsig«tuª
 53

	)

731 
	#OBJ_pkcs9_cou¡îsig«tuª
 
OBJ_pkcs9
,6L

	)

733 
	#LN_pkcs9_chÆÀngePassw‹d
 "chÆÀngePassw‹d"

	)

734 
	#NID_pkcs9_chÆÀngePassw‹d
 54

	)

735 
	#OBJ_pkcs9_chÆÀngePassw‹d
 
OBJ_pkcs9
,7L

	)

737 
	#LN_pkcs9_un°ru˘uªdAddªss
 "un°ru˘uªdAddªss"

	)

738 
	#NID_pkcs9_un°ru˘uªdAddªss
 55

	)

739 
	#OBJ_pkcs9_un°ru˘uªdAddªss
 
OBJ_pkcs9
,8L

	)

741 
	#LN_pkcs9_extCîtAâribuãs
 "exãndedCîtifiˇãAâribuãs"

	)

742 
	#NID_pkcs9_extCîtAâribuãs
 56

	)

743 
	#OBJ_pkcs9_extCîtAâribuãs
 
OBJ_pkcs9
,9L

	)

745 
	#SN_ext_ªq
 "extReq"

	)

746 
	#LN_ext_ªq
 "Exãnsi⁄ Reque°"

	)

747 
	#NID_ext_ªq
 172

	)

748 
	#OBJ_ext_ªq
 
OBJ_pkcs9
,14L

	)

750 
	#SN_SMIMEC≠abûôõs
 "SMIME-CAPS"

	)

751 
	#LN_SMIMEC≠abûôõs
 "S/MIME C≠abûôõs"

	)

752 
	#NID_SMIMEC≠abûôõs
 167

	)

753 
	#OBJ_SMIMEC≠abûôõs
 
OBJ_pkcs9
,15L

	)

755 
	#SN_SMIME
 "SMIME"

	)

756 
	#LN_SMIME
 "S/MIME"

	)

757 
	#NID_SMIME
 188

	)

758 
	#OBJ_SMIME
 
OBJ_pkcs9
,16L

	)

760 
	#SN_id_smime_mod
 "id-smime-mod"

	)

761 
	#NID_id_smime_mod
 189

	)

762 
	#OBJ_id_smime_mod
 
OBJ_SMIME
,0L

	)

764 
	#SN_id_smime_˘
 "id-smime-˘"

	)

765 
	#NID_id_smime_˘
 190

	)

766 
	#OBJ_id_smime_˘
 
OBJ_SMIME
,1L

	)

768 
	#SN_id_smime_Ø
 "id-smime-Ø"

	)

769 
	#NID_id_smime_Ø
 191

	)

770 
	#OBJ_id_smime_Ø
 
OBJ_SMIME
,2L

	)

772 
	#SN_id_smime_Æg
 "id-smime-Æg"

	)

773 
	#NID_id_smime_Æg
 192

	)

774 
	#OBJ_id_smime_Æg
 
OBJ_SMIME
,3L

	)

776 
	#SN_id_smime_cd
 "id-smime-cd"

	)

777 
	#NID_id_smime_cd
 193

	)

778 
	#OBJ_id_smime_cd
 
OBJ_SMIME
,4L

	)

780 
	#SN_id_smime_•q
 "id-smime-•q"

	)

781 
	#NID_id_smime_•q
 194

	)

782 
	#OBJ_id_smime_•q
 
OBJ_SMIME
,5L

	)

784 
	#SN_id_smime_˘i
 "id-smime-˘i"

	)

785 
	#NID_id_smime_˘i
 195

	)

786 
	#OBJ_id_smime_˘i
 
OBJ_SMIME
,6L

	)

788 
	#SN_id_smime_mod_cms
 "id-smime-mod-cms"

	)

789 
	#NID_id_smime_mod_cms
 196

	)

790 
	#OBJ_id_smime_mod_cms
 
OBJ_id_smime_mod
,1L

	)

792 
	#SN_id_smime_mod_ess
 "id-smime-mod-ess"

	)

793 
	#NID_id_smime_mod_ess
 197

	)

794 
	#OBJ_id_smime_mod_ess
 
OBJ_id_smime_mod
,2L

	)

796 
	#SN_id_smime_mod_oid
 "id-smime-mod-oid"

	)

797 
	#NID_id_smime_mod_oid
 198

	)

798 
	#OBJ_id_smime_mod_oid
 
OBJ_id_smime_mod
,3L

	)

800 
	#SN_id_smime_mod_msg_v3
 "id-smime-mod-msg-v3"

	)

801 
	#NID_id_smime_mod_msg_v3
 199

	)

802 
	#OBJ_id_smime_mod_msg_v3
 
OBJ_id_smime_mod
,4L

	)

804 
	#SN_id_smime_mod_ës_eSig«tuª_88
 "id-smime-mod-ës-eSig«tuª-88"

	)

805 
	#NID_id_smime_mod_ës_eSig«tuª_88
 200

	)

806 
	#OBJ_id_smime_mod_ës_eSig«tuª_88
 
OBJ_id_smime_mod
,5L

	)

808 
	#SN_id_smime_mod_ës_eSig«tuª_97
 "id-smime-mod-ës-eSig«tuª-97"

	)

809 
	#NID_id_smime_mod_ës_eSig«tuª_97
 201

	)

810 
	#OBJ_id_smime_mod_ës_eSig«tuª_97
 
OBJ_id_smime_mod
,6L

	)

812 
	#SN_id_smime_mod_ës_eSigPﬁicy_88
 "id-smime-mod-ës-eSigPﬁicy-88"

	)

813 
	#NID_id_smime_mod_ës_eSigPﬁicy_88
 202

	)

814 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_88
 
OBJ_id_smime_mod
,7L

	)

816 
	#SN_id_smime_mod_ës_eSigPﬁicy_97
 "id-smime-mod-ës-eSigPﬁicy-97"

	)

817 
	#NID_id_smime_mod_ës_eSigPﬁicy_97
 203

	)

818 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_97
 
OBJ_id_smime_mod
,8L

	)

820 
	#SN_id_smime_˘_ª˚ùt
 "id-smime-˘-ª˚ùt"

	)

821 
	#NID_id_smime_˘_ª˚ùt
 204

	)

822 
	#OBJ_id_smime_˘_ª˚ùt
 
OBJ_id_smime_˘
,1L

	)

824 
	#SN_id_smime_˘_authD©a
 "id-smime-˘-authD©a"

	)

825 
	#NID_id_smime_˘_authD©a
 205

	)

826 
	#OBJ_id_smime_˘_authD©a
 
OBJ_id_smime_˘
,2L

	)

828 
	#SN_id_smime_˘_publishCît
 "id-smime-˘-publishCît"

	)

829 
	#NID_id_smime_˘_publishCît
 206

	)

830 
	#OBJ_id_smime_˘_publishCît
 
OBJ_id_smime_˘
,3L

	)

832 
	#SN_id_smime_˘_TSTInfo
 "id-smime-˘-TSTInfo"

	)

833 
	#NID_id_smime_˘_TSTInfo
 207

	)

834 
	#OBJ_id_smime_˘_TSTInfo
 
OBJ_id_smime_˘
,4L

	)

836 
	#SN_id_smime_˘_TDTInfo
 "id-smime-˘-TDTInfo"

	)

837 
	#NID_id_smime_˘_TDTInfo
 208

	)

838 
	#OBJ_id_smime_˘_TDTInfo
 
OBJ_id_smime_˘
,5L

	)

840 
	#SN_id_smime_˘_c⁄ã¡Info
 "id-smime-˘-c⁄ã¡Info"

	)

841 
	#NID_id_smime_˘_c⁄ã¡Info
 209

	)

842 
	#OBJ_id_smime_˘_c⁄ã¡Info
 
OBJ_id_smime_˘
,6L

	)

844 
	#SN_id_smime_˘_DVCSReque°D©a
 "id-smime-˘-DVCSReque°D©a"

	)

845 
	#NID_id_smime_˘_DVCSReque°D©a
 210

	)

846 
	#OBJ_id_smime_˘_DVCSReque°D©a
 
OBJ_id_smime_˘
,7L

	)

848 
	#SN_id_smime_˘_DVCSRe•⁄£D©a
 "id-smime-˘-DVCSRe•⁄£D©a"

	)

849 
	#NID_id_smime_˘_DVCSRe•⁄£D©a
 211

	)

850 
	#OBJ_id_smime_˘_DVCSRe•⁄£D©a
 
OBJ_id_smime_˘
,8L

	)

852 
	#SN_id_smime_˘_com¥es£dD©a
 "id-smime-˘-com¥es£dD©a"

	)

853 
	#NID_id_smime_˘_com¥es£dD©a
 786

	)

854 
	#OBJ_id_smime_˘_com¥es£dD©a
 
OBJ_id_smime_˘
,9L

	)

856 
	#SN_id_˘_asciiTextWôhCRLF
 "id-˘-asciiTextWôhCRLF"

	)

857 
	#NID_id_˘_asciiTextWôhCRLF
 787

	)

858 
	#OBJ_id_˘_asciiTextWôhCRLF
 
OBJ_id_smime_˘
,27L

	)

860 
	#SN_id_smime_Ø_ª˚ùtReque°
 "id-smime-Ø-ª˚ùtReque°"

	)

861 
	#NID_id_smime_Ø_ª˚ùtReque°
 212

	)

862 
	#OBJ_id_smime_Ø_ª˚ùtReque°
 
OBJ_id_smime_Ø
,1L

	)

864 
	#SN_id_smime_Ø_£curôyLabñ
 "id-smime-Ø-£curôyLabñ"

	)

865 
	#NID_id_smime_Ø_£curôyLabñ
 213

	)

866 
	#OBJ_id_smime_Ø_£curôyLabñ
 
OBJ_id_smime_Ø
,2L

	)

868 
	#SN_id_smime_Ø_mlEx∑ndHi°‹y
 "id-smime-Ø-mlEx∑ndHi°‹y"

	)

869 
	#NID_id_smime_Ø_mlEx∑ndHi°‹y
 214

	)

870 
	#OBJ_id_smime_Ø_mlEx∑ndHi°‹y
 
OBJ_id_smime_Ø
,3L

	)

872 
	#SN_id_smime_Ø_c⁄ã¡Höt
 "id-smime-Ø-c⁄ã¡Höt"

	)

873 
	#NID_id_smime_Ø_c⁄ã¡Höt
 215

	)

874 
	#OBJ_id_smime_Ø_c⁄ã¡Höt
 
OBJ_id_smime_Ø
,4L

	)

876 
	#SN_id_smime_Ø_msgSigDige°
 "id-smime-Ø-msgSigDige°"

	)

877 
	#NID_id_smime_Ø_msgSigDige°
 216

	)

878 
	#OBJ_id_smime_Ø_msgSigDige°
 
OBJ_id_smime_Ø
,5L

	)

880 
	#SN_id_smime_Ø_íˇpC⁄ã¡Ty≥
 "id-smime-Ø-íˇpC⁄ã¡Ty≥"

	)

881 
	#NID_id_smime_Ø_íˇpC⁄ã¡Ty≥
 217

	)

882 
	#OBJ_id_smime_Ø_íˇpC⁄ã¡Ty≥
 
OBJ_id_smime_Ø
,6L

	)

884 
	#SN_id_smime_Ø_c⁄ã¡Idítifõr
 "id-smime-Ø-c⁄ã¡Idítifõr"

	)

885 
	#NID_id_smime_Ø_c⁄ã¡Idítifõr
 218

	)

886 
	#OBJ_id_smime_Ø_c⁄ã¡Idítifõr
 
OBJ_id_smime_Ø
,7L

	)

888 
	#SN_id_smime_Ø_macVÆue
 "id-smime-Ø-macVÆue"

	)

889 
	#NID_id_smime_Ø_macVÆue
 219

	)

890 
	#OBJ_id_smime_Ø_macVÆue
 
OBJ_id_smime_Ø
,8L

	)

892 
	#SN_id_smime_Ø_equivÆítLabñs
 "id-smime-Ø-equivÆítLabñs"

	)

893 
	#NID_id_smime_Ø_equivÆítLabñs
 220

	)

894 
	#OBJ_id_smime_Ø_equivÆítLabñs
 
OBJ_id_smime_Ø
,9L

	)

896 
	#SN_id_smime_Ø_c⁄ã¡Re„ªn˚
 "id-smime-Ø-c⁄ã¡Re„ªn˚"

	)

897 
	#NID_id_smime_Ø_c⁄ã¡Re„ªn˚
 221

	)

898 
	#OBJ_id_smime_Ø_c⁄ã¡Re„ªn˚
 
OBJ_id_smime_Ø
,10L

	)

900 
	#SN_id_smime_Ø_í¸ypKeyPªf
 "id-smime-Ø-í¸ypKeyPªf"

	)

901 
	#NID_id_smime_Ø_í¸ypKeyPªf
 222

	)

902 
	#OBJ_id_smime_Ø_í¸ypKeyPªf
 
OBJ_id_smime_Ø
,11L

	)

904 
	#SN_id_smime_Ø_signögCîtifiˇã
 "id-smime-Ø-signögCîtifiˇã"

	)

905 
	#NID_id_smime_Ø_signögCîtifiˇã
 223

	)

906 
	#OBJ_id_smime_Ø_signögCîtifiˇã
 
OBJ_id_smime_Ø
,12L

	)

908 
	#SN_id_smime_Ø_smimeEn¸y±Cîts
 "id-smime-Ø-smimeEn¸y±Cîts"

	)

909 
	#NID_id_smime_Ø_smimeEn¸y±Cîts
 224

	)

910 
	#OBJ_id_smime_Ø_smimeEn¸y±Cîts
 
OBJ_id_smime_Ø
,13L

	)

912 
	#SN_id_smime_Ø_timeSèmpTokí
 "id-smime-Ø-timeSèmpTokí"

	)

913 
	#NID_id_smime_Ø_timeSèmpTokí
 225

	)

914 
	#OBJ_id_smime_Ø_timeSèmpTokí
 
OBJ_id_smime_Ø
,14L

	)

916 
	#SN_id_smime_Ø_ës_sigPﬁicyId
 "id-smime-Ø-ës-sigPﬁicyId"

	)

917 
	#NID_id_smime_Ø_ës_sigPﬁicyId
 226

	)

918 
	#OBJ_id_smime_Ø_ës_sigPﬁicyId
 
OBJ_id_smime_Ø
,15L

	)

920 
	#SN_id_smime_Ø_ës_commômítTy≥
 "id-smime-Ø-ës-commômítTy≥"

	)

921 
	#NID_id_smime_Ø_ës_commômítTy≥
 227

	)

922 
	#OBJ_id_smime_Ø_ës_commômítTy≥
 
OBJ_id_smime_Ø
,16L

	)

924 
	#SN_id_smime_Ø_ës_sig√rLoˇti⁄
 "id-smime-Ø-ës-sig√rLoˇti⁄"

	)

925 
	#NID_id_smime_Ø_ës_sig√rLoˇti⁄
 228

	)

926 
	#OBJ_id_smime_Ø_ës_sig√rLoˇti⁄
 
OBJ_id_smime_Ø
,17L

	)

928 
	#SN_id_smime_Ø_ës_sig√rAâr
 "id-smime-Ø-ës-sig√rAâr"

	)

929 
	#NID_id_smime_Ø_ës_sig√rAâr
 229

	)

930 
	#OBJ_id_smime_Ø_ës_sig√rAâr
 
OBJ_id_smime_Ø
,18L

	)

932 
	#SN_id_smime_Ø_ës_ŸhîSigCît
 "id-smime-Ø-ës-ŸhîSigCît"

	)

933 
	#NID_id_smime_Ø_ës_ŸhîSigCît
 230

	)

934 
	#OBJ_id_smime_Ø_ës_ŸhîSigCît
 
OBJ_id_smime_Ø
,19L

	)

936 
	#SN_id_smime_Ø_ës_c⁄ã¡Time°amp
 "id-smime-Ø-ës-c⁄ã¡Time°amp"

	)

937 
	#NID_id_smime_Ø_ës_c⁄ã¡Time°amp
 231

	)

938 
	#OBJ_id_smime_Ø_ës_c⁄ã¡Time°amp
 
OBJ_id_smime_Ø
,20L

	)

940 
	#SN_id_smime_Ø_ës_CîtifiˇãRefs
 "id-smime-Ø-ës-CîtifiˇãRefs"

	)

941 
	#NID_id_smime_Ø_ës_CîtifiˇãRefs
 232

	)

942 
	#OBJ_id_smime_Ø_ës_CîtifiˇãRefs
 
OBJ_id_smime_Ø
,21L

	)

944 
	#SN_id_smime_Ø_ës_Revoˇti⁄Refs
 "id-smime-Ø-ës-Revoˇti⁄Refs"

	)

945 
	#NID_id_smime_Ø_ës_Revoˇti⁄Refs
 233

	)

946 
	#OBJ_id_smime_Ø_ës_Revoˇti⁄Refs
 
OBJ_id_smime_Ø
,22L

	)

948 
	#SN_id_smime_Ø_ës_˚πVÆues
 "id-smime-Ø-ës-˚πVÆues"

	)

949 
	#NID_id_smime_Ø_ës_˚πVÆues
 234

	)

950 
	#OBJ_id_smime_Ø_ës_˚πVÆues
 
OBJ_id_smime_Ø
,23L

	)

952 
	#SN_id_smime_Ø_ës_ªvoˇti⁄VÆues
 "id-smime-Ø-ës-ªvoˇti⁄VÆues"

	)

953 
	#NID_id_smime_Ø_ës_ªvoˇti⁄VÆues
 235

	)

954 
	#OBJ_id_smime_Ø_ës_ªvoˇti⁄VÆues
 
OBJ_id_smime_Ø
,24L

	)

956 
	#SN_id_smime_Ø_ës_escTimeSèmp
 "id-smime-Ø-ës-escTimeSèmp"

	)

957 
	#NID_id_smime_Ø_ës_escTimeSèmp
 236

	)

958 
	#OBJ_id_smime_Ø_ës_escTimeSèmp
 
OBJ_id_smime_Ø
,25L

	)

960 
	#SN_id_smime_Ø_ës_˚πCRLTime°amp
 "id-smime-Ø-ës-˚πCRLTime°amp"

	)

961 
	#NID_id_smime_Ø_ës_˚πCRLTime°amp
 237

	)

962 
	#OBJ_id_smime_Ø_ës_˚πCRLTime°amp
 
OBJ_id_smime_Ø
,26L

	)

964 
	#SN_id_smime_Ø_ës_¨chiveTimeSèmp
 "id-smime-Ø-ës-¨chiveTimeSèmp"

	)

965 
	#NID_id_smime_Ø_ës_¨chiveTimeSèmp
 238

	)

966 
	#OBJ_id_smime_Ø_ës_¨chiveTimeSèmp
 
OBJ_id_smime_Ø
,27L

	)

968 
	#SN_id_smime_Ø_sig«tuªTy≥
 "id-smime-Ø-sig«tuªTy≥"

	)

969 
	#NID_id_smime_Ø_sig«tuªTy≥
 239

	)

970 
	#OBJ_id_smime_Ø_sig«tuªTy≥
 
OBJ_id_smime_Ø
,28L

	)

972 
	#SN_id_smime_Ø_dvcs_dvc
 "id-smime-Ø-dvcs-dvc"

	)

973 
	#NID_id_smime_Ø_dvcs_dvc
 240

	)

974 
	#OBJ_id_smime_Ø_dvcs_dvc
 
OBJ_id_smime_Ø
,29L

	)

976 
	#SN_id_smime_Æg_ESDHwôh3DES
 "id-smime-Æg-ESDHwôh3DES"

	)

977 
	#NID_id_smime_Æg_ESDHwôh3DES
 241

	)

978 
	#OBJ_id_smime_Æg_ESDHwôh3DES
 
OBJ_id_smime_Æg
,1L

	)

980 
	#SN_id_smime_Æg_ESDHwôhRC2
 "id-smime-Æg-ESDHwôhRC2"

	)

981 
	#NID_id_smime_Æg_ESDHwôhRC2
 242

	)

982 
	#OBJ_id_smime_Æg_ESDHwôhRC2
 
OBJ_id_smime_Æg
,2L

	)

984 
	#SN_id_smime_Æg_3DESwøp
 "id-smime-Æg-3DESwøp"

	)

985 
	#NID_id_smime_Æg_3DESwøp
 243

	)

986 
	#OBJ_id_smime_Æg_3DESwøp
 
OBJ_id_smime_Æg
,3L

	)

988 
	#SN_id_smime_Æg_RC2wøp
 "id-smime-Æg-RC2wøp"

	)

989 
	#NID_id_smime_Æg_RC2wøp
 244

	)

990 
	#OBJ_id_smime_Æg_RC2wøp
 
OBJ_id_smime_Æg
,4L

	)

992 
	#SN_id_smime_Æg_ESDH
 "id-smime-Æg-ESDH"

	)

993 
	#NID_id_smime_Æg_ESDH
 245

	)

994 
	#OBJ_id_smime_Æg_ESDH
 
OBJ_id_smime_Æg
,5L

	)

996 
	#SN_id_smime_Æg_CMS3DESwøp
 "id-smime-Æg-CMS3DESwøp"

	)

997 
	#NID_id_smime_Æg_CMS3DESwøp
 246

	)

998 
	#OBJ_id_smime_Æg_CMS3DESwøp
 
OBJ_id_smime_Æg
,6L

	)

1000 
	#SN_id_smime_Æg_CMSRC2wøp
 "id-smime-Æg-CMSRC2wøp"

	)

1001 
	#NID_id_smime_Æg_CMSRC2wøp
 247

	)

1002 
	#OBJ_id_smime_Æg_CMSRC2wøp
 
OBJ_id_smime_Æg
,7L

	)

1004 
	#SN_id_Æg_PWRI_KEK
 "id-Æg-PWRI-KEK"

	)

1005 
	#NID_id_Æg_PWRI_KEK
 893

	)

1006 
	#OBJ_id_Æg_PWRI_KEK
 
OBJ_id_smime_Æg
,9L

	)

1008 
	#SN_id_smime_cd_ld≠
 "id-smime-cd-ld≠"

	)

1009 
	#NID_id_smime_cd_ld≠
 248

	)

1010 
	#OBJ_id_smime_cd_ld≠
 
OBJ_id_smime_cd
,1L

	)

1012 
	#SN_id_smime_•q_ës_sqt_uri
 "id-smime-•q-ës-sqt-uri"

	)

1013 
	#NID_id_smime_•q_ës_sqt_uri
 249

	)

1014 
	#OBJ_id_smime_•q_ës_sqt_uri
 
OBJ_id_smime_•q
,1L

	)

1016 
	#SN_id_smime_•q_ës_sqt_unŸi˚
 "id-smime-•q-ës-sqt-unŸi˚"

	)

1017 
	#NID_id_smime_•q_ës_sqt_unŸi˚
 250

	)

1018 
	#OBJ_id_smime_•q_ës_sqt_unŸi˚
 
OBJ_id_smime_•q
,2L

	)

1020 
	#SN_id_smime_˘i_ës_¥oofOfOrigö
 "id-smime-˘i-ës-¥oofOfOrigö"

	)

1021 
	#NID_id_smime_˘i_ës_¥oofOfOrigö
 251

	)

1022 
	#OBJ_id_smime_˘i_ës_¥oofOfOrigö
 
OBJ_id_smime_˘i
,1L

	)

1024 
	#SN_id_smime_˘i_ës_¥oofOfRe˚ùt
 "id-smime-˘i-ës-¥oofOfRe˚ùt"

	)

1025 
	#NID_id_smime_˘i_ës_¥oofOfRe˚ùt
 252

	)

1026 
	#OBJ_id_smime_˘i_ës_¥oofOfRe˚ùt
 
OBJ_id_smime_˘i
,2L

	)

1028 
	#SN_id_smime_˘i_ës_¥oofOfDñivîy
 "id-smime-˘i-ës-¥oofOfDñivîy"

	)

1029 
	#NID_id_smime_˘i_ës_¥oofOfDñivîy
 253

	)

1030 
	#OBJ_id_smime_˘i_ës_¥oofOfDñivîy
 
OBJ_id_smime_˘i
,3L

	)

1032 
	#SN_id_smime_˘i_ës_¥oofOfSídî
 "id-smime-˘i-ës-¥oofOfSídî"

	)

1033 
	#NID_id_smime_˘i_ës_¥oofOfSídî
 254

	)

1034 
	#OBJ_id_smime_˘i_ës_¥oofOfSídî
 
OBJ_id_smime_˘i
,4L

	)

1036 
	#SN_id_smime_˘i_ës_¥oofOfAµrovÆ
 "id-smime-˘i-ës-¥oofOfAµrovÆ"

	)

1037 
	#NID_id_smime_˘i_ës_¥oofOfAµrovÆ
 255

	)

1038 
	#OBJ_id_smime_˘i_ës_¥oofOfAµrovÆ
 
OBJ_id_smime_˘i
,5L

	)

1040 
	#SN_id_smime_˘i_ës_¥oofOfCª©i⁄
 "id-smime-˘i-ës-¥oofOfCª©i⁄"

	)

1041 
	#NID_id_smime_˘i_ës_¥oofOfCª©i⁄
 256

	)

1042 
	#OBJ_id_smime_˘i_ës_¥oofOfCª©i⁄
 
OBJ_id_smime_˘i
,6L

	)

1044 
	#LN_‰õndlyName
 "‰õndlyName"

	)

1045 
	#NID_‰õndlyName
 156

	)

1046 
	#OBJ_‰õndlyName
 
OBJ_pkcs9
,20L

	)

1048 
	#LN_loˇlKeyID
 "loˇlKeyID"

	)

1049 
	#NID_loˇlKeyID
 157

	)

1050 
	#OBJ_loˇlKeyID
 
OBJ_pkcs9
,21L

	)

1052 
	#SN_ms_c•_«me
 "CSPName"

	)

1053 
	#LN_ms_c•_«me
 "Mi¸oso· CSP Name"

	)

1054 
	#NID_ms_c•_«me
 417

	)

1055 
	#OBJ_ms_c•_«me
 1L,3L,6L,1L,4L,1L,311L,17L,1L

	)

1057 
	#SN_LoˇlKeySë
 "LoˇlKeySë"

	)

1058 
	#LN_LoˇlKeySë
 "Mi¸oso· Loˇ»Key së"

	)

1059 
	#NID_LoˇlKeySë
 856

	)

1060 
	#OBJ_LoˇlKeySë
 1L,3L,6L,1L,4L,1L,311L,17L,2L

	)

1062 
	#OBJ_˚πTy≥s
 
OBJ_pkcs9
,22L

	)

1064 
	#LN_x509Cîtifiˇã
 "x509Cîtifiˇã"

	)

1065 
	#NID_x509Cîtifiˇã
 158

	)

1066 
	#OBJ_x509Cîtifiˇã
 
OBJ_˚πTy≥s
,1L

	)

1068 
	#LN_sdsiCîtifiˇã
 "sdsiCîtifiˇã"

	)

1069 
	#NID_sdsiCîtifiˇã
 159

	)

1070 
	#OBJ_sdsiCîtifiˇã
 
OBJ_˚πTy≥s
,2L

	)

1072 
	#OBJ_¸lTy≥s
 
OBJ_pkcs9
,23L

	)

1074 
	#LN_x509Cæ
 "x509Cæ"

	)

1075 
	#NID_x509Cæ
 160

	)

1076 
	#OBJ_x509Cæ
 
OBJ_¸lTy≥s
,1L

	)

1078 
	#OBJ_pkcs12
 
OBJ_pkcs
,12L

	)

1080 
	#OBJ_pkcs12_pbeids
 
OBJ_pkcs12
,1L

	)

1082 
	#SN_pbe_WôhSHA1And128BôRC4
 "PBE-SHA1-RC4-128"

	)

1083 
	#LN_pbe_WôhSHA1And128BôRC4
 "pbeWôhSHA1And128BôRC4"

	)

1084 
	#NID_pbe_WôhSHA1And128BôRC4
 144

	)

1085 
	#OBJ_pbe_WôhSHA1And128BôRC4
 
OBJ_pkcs12_pbeids
,1L

	)

1087 
	#SN_pbe_WôhSHA1And40BôRC4
 "PBE-SHA1-RC4-40"

	)

1088 
	#LN_pbe_WôhSHA1And40BôRC4
 "pbeWôhSHA1And40BôRC4"

	)

1089 
	#NID_pbe_WôhSHA1And40BôRC4
 145

	)

1090 
	#OBJ_pbe_WôhSHA1And40BôRC4
 
OBJ_pkcs12_pbeids
,2L

	)

1092 
	#SN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "PBE-SHA1-3DES"

	)

1093 
	#LN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "pbeWôhSHA1And3-KeyTrùÀDES-CBC"

	)

1094 
	#NID_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 146

	)

1095 
	#OBJ_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,3L

	)

1097 
	#SN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "PBE-SHA1-2DES"

	)

1098 
	#LN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "pbeWôhSHA1And2-KeyTrùÀDES-CBC"

	)

1099 
	#NID_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 147

	)

1100 
	#OBJ_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,4L

	)

1102 
	#SN_pbe_WôhSHA1And128BôRC2_CBC
 "PBE-SHA1-RC2-128"

	)

1103 
	#LN_pbe_WôhSHA1And128BôRC2_CBC
 "pbeWôhSHA1And128BôRC2-CBC"

	)

1104 
	#NID_pbe_WôhSHA1And128BôRC2_CBC
 148

	)

1105 
	#OBJ_pbe_WôhSHA1And128BôRC2_CBC
 
OBJ_pkcs12_pbeids
,5L

	)

1107 
	#SN_pbe_WôhSHA1And40BôRC2_CBC
 "PBE-SHA1-RC2-40"

	)

1108 
	#LN_pbe_WôhSHA1And40BôRC2_CBC
 "pbeWôhSHA1And40BôRC2-CBC"

	)

1109 
	#NID_pbe_WôhSHA1And40BôRC2_CBC
 149

	)

1110 
	#OBJ_pbe_WôhSHA1And40BôRC2_CBC
 
OBJ_pkcs12_pbeids
,6L

	)

1112 
	#OBJ_pkcs12_Vîsi⁄1
 
OBJ_pkcs12
,10L

	)

1114 
	#OBJ_pkcs12_BagIds
 
OBJ_pkcs12_Vîsi⁄1
,1L

	)

1116 
	#LN_keyBag
 "keyBag"

	)

1117 
	#NID_keyBag
 150

	)

1118 
	#OBJ_keyBag
 
OBJ_pkcs12_BagIds
,1L

	)

1120 
	#LN_pkcs8ShroudedKeyBag
 "pkcs8ShroudedKeyBag"

	)

1121 
	#NID_pkcs8ShroudedKeyBag
 151

	)

1122 
	#OBJ_pkcs8ShroudedKeyBag
 
OBJ_pkcs12_BagIds
,2L

	)

1124 
	#LN_˚πBag
 "˚πBag"

	)

1125 
	#NID_˚πBag
 152

	)

1126 
	#OBJ_˚πBag
 
OBJ_pkcs12_BagIds
,3L

	)

1128 
	#LN_¸lBag
 "¸lBag"

	)

1129 
	#NID_¸lBag
 153

	)

1130 
	#OBJ_¸lBag
 
OBJ_pkcs12_BagIds
,4L

	)

1132 
	#LN_£¸ëBag
 "£¸ëBag"

	)

1133 
	#NID_£¸ëBag
 154

	)

1134 
	#OBJ_£¸ëBag
 
OBJ_pkcs12_BagIds
,5L

	)

1136 
	#LN_ß„C⁄ã¡sBag
 "ß„C⁄ã¡sBag"

	)

1137 
	#NID_ß„C⁄ã¡sBag
 155

	)

1138 
	#OBJ_ß„C⁄ã¡sBag
 
OBJ_pkcs12_BagIds
,6L

	)

1140 
	#SN_md2
 "MD2"

	)

1141 
	#LN_md2
 "md2"

	)

1142 
	#NID_md2
 3

	)

1143 
	#OBJ_md2
 
OBJ_rßdsi
,2L,2L

	)

1145 
	#SN_md4
 "MD4"

	)

1146 
	#LN_md4
 "md4"

	)

1147 
	#NID_md4
 257

	)

1148 
	#OBJ_md4
 
OBJ_rßdsi
,2L,4L

	)

1150 
	#SN_md5
 "MD5"

	)

1151 
	#LN_md5
 "md5"

	)

1152 
	#NID_md5
 4

	)

1153 
	#OBJ_md5
 
OBJ_rßdsi
,2L,5L

	)

1155 
	#SN_md5_sha1
 "MD5-SHA1"

	)

1156 
	#LN_md5_sha1
 "md5-sha1"

	)

1157 
	#NID_md5_sha1
 114

	)

1159 
	#LN_hmacWôhMD5
 "hmacWôhMD5"

	)

1160 
	#NID_hmacWôhMD5
 797

	)

1161 
	#OBJ_hmacWôhMD5
 
OBJ_rßdsi
,2L,6L

	)

1163 
	#LN_hmacWôhSHA1
 "hmacWôhSHA1"

	)

1164 
	#NID_hmacWôhSHA1
 163

	)

1165 
	#OBJ_hmacWôhSHA1
 
OBJ_rßdsi
,2L,7L

	)

1167 
	#LN_hmacWôhSHA224
 "hmacWôhSHA224"

	)

1168 
	#NID_hmacWôhSHA224
 798

	)

1169 
	#OBJ_hmacWôhSHA224
 
OBJ_rßdsi
,2L,8L

	)

1171 
	#LN_hmacWôhSHA256
 "hmacWôhSHA256"

	)

1172 
	#NID_hmacWôhSHA256
 799

	)

1173 
	#OBJ_hmacWôhSHA256
 
OBJ_rßdsi
,2L,9L

	)

1175 
	#LN_hmacWôhSHA384
 "hmacWôhSHA384"

	)

1176 
	#NID_hmacWôhSHA384
 800

	)

1177 
	#OBJ_hmacWôhSHA384
 
OBJ_rßdsi
,2L,10L

	)

1179 
	#LN_hmacWôhSHA512
 "hmacWôhSHA512"

	)

1180 
	#NID_hmacWôhSHA512
 801

	)

1181 
	#OBJ_hmacWôhSHA512
 
OBJ_rßdsi
,2L,11L

	)

1183 
	#SN_rc2_cbc
 "RC2-CBC"

	)

1184 
	#LN_rc2_cbc
 "rc2-cbc"

	)

1185 
	#NID_rc2_cbc
 37

	)

1186 
	#OBJ_rc2_cbc
 
OBJ_rßdsi
,3L,2L

	)

1188 
	#SN_rc2_ecb
 "RC2-ECB"

	)

1189 
	#LN_rc2_ecb
 "rc2-ecb"

	)

1190 
	#NID_rc2_ecb
 38

	)

1192 
	#SN_rc2_cfb64
 "RC2-CFB"

	)

1193 
	#LN_rc2_cfb64
 "rc2-cfb"

	)

1194 
	#NID_rc2_cfb64
 39

	)

1196 
	#SN_rc2_ofb64
 "RC2-OFB"

	)

1197 
	#LN_rc2_ofb64
 "rc2-ofb"

	)

1198 
	#NID_rc2_ofb64
 40

	)

1200 
	#SN_rc2_40_cbc
 "RC2-40-CBC"

	)

1201 
	#LN_rc2_40_cbc
 "rc2-40-cbc"

	)

1202 
	#NID_rc2_40_cbc
 98

	)

1204 
	#SN_rc2_64_cbc
 "RC2-64-CBC"

	)

1205 
	#LN_rc2_64_cbc
 "rc2-64-cbc"

	)

1206 
	#NID_rc2_64_cbc
 166

	)

1208 
	#SN_rc4
 "RC4"

	)

1209 
	#LN_rc4
 "rc4"

	)

1210 
	#NID_rc4
 5

	)

1211 
	#OBJ_rc4
 
OBJ_rßdsi
,3L,4L

	)

1213 
	#SN_rc4_40
 "RC4-40"

	)

1214 
	#LN_rc4_40
 "rc4-40"

	)

1215 
	#NID_rc4_40
 97

	)

1217 
	#SN_des_ede3_cbc
 "DES-EDE3-CBC"

	)

1218 
	#LN_des_ede3_cbc
 "des-ede3-cbc"

	)

1219 
	#NID_des_ede3_cbc
 44

	)

1220 
	#OBJ_des_ede3_cbc
 
OBJ_rßdsi
,3L,7L

	)

1222 
	#SN_rc5_cbc
 "RC5-CBC"

	)

1223 
	#LN_rc5_cbc
 "rc5-cbc"

	)

1224 
	#NID_rc5_cbc
 120

	)

1225 
	#OBJ_rc5_cbc
 
OBJ_rßdsi
,3L,8L

	)

1227 
	#SN_rc5_ecb
 "RC5-ECB"

	)

1228 
	#LN_rc5_ecb
 "rc5-ecb"

	)

1229 
	#NID_rc5_ecb
 121

	)

1231 
	#SN_rc5_cfb64
 "RC5-CFB"

	)

1232 
	#LN_rc5_cfb64
 "rc5-cfb"

	)

1233 
	#NID_rc5_cfb64
 122

	)

1235 
	#SN_rc5_ofb64
 "RC5-OFB"

	)

1236 
	#LN_rc5_ofb64
 "rc5-ofb"

	)

1237 
	#NID_rc5_ofb64
 123

	)

1239 
	#SN_ms_ext_ªq
 "msExtReq"

	)

1240 
	#LN_ms_ext_ªq
 "Mi¸oso· Exãnsi⁄ Reque°"

	)

1241 
	#NID_ms_ext_ªq
 171

	)

1242 
	#OBJ_ms_ext_ªq
 1L,3L,6L,1L,4L,1L,311L,2L,1L,14L

	)

1244 
	#SN_ms_code_öd
 "msCodeInd"

	)

1245 
	#LN_ms_code_öd
 "Mi¸oso· IndividuÆ CodêSignög"

	)

1246 
	#NID_ms_code_öd
 134

	)

1247 
	#OBJ_ms_code_öd
 1L,3L,6L,1L,4L,1L,311L,2L,1L,21L

	)

1249 
	#SN_ms_code_com
 "msCodeCom"

	)

1250 
	#LN_ms_code_com
 "Mi¸oso· Commîcü»CodêSignög"

	)

1251 
	#NID_ms_code_com
 135

	)

1252 
	#OBJ_ms_code_com
 1L,3L,6L,1L,4L,1L,311L,2L,1L,22L

	)

1254 
	#SN_ms_˘l_sign
 "msCTLSign"

	)

1255 
	#LN_ms_˘l_sign
 "Mi¸oso· Tru° Li° Signög"

	)

1256 
	#NID_ms_˘l_sign
 136

	)

1257 
	#OBJ_ms_˘l_sign
 1L,3L,6L,1L,4L,1L,311L,10L,3L,1L

	)

1259 
	#SN_ms_sgc
 "msSGC"

	)

1260 
	#LN_ms_sgc
 "Mi¸oso· Sîvî G©ed Cry±o"

	)

1261 
	#NID_ms_sgc
 137

	)

1262 
	#OBJ_ms_sgc
 1L,3L,6L,1L,4L,1L,311L,10L,3L,3L

	)

1264 
	#SN_ms_efs
 "msEFS"

	)

1265 
	#LN_ms_efs
 "Mi¸oso· En¸y±ed FûêSy°em"

	)

1266 
	#NID_ms_efs
 138

	)

1267 
	#OBJ_ms_efs
 1L,3L,6L,1L,4L,1L,311L,10L,3L,4L

	)

1269 
	#SN_ms_sm¨tˇrd_logö
 "msSm¨tˇrdLogö"

	)

1270 
	#LN_ms_sm¨tˇrd_logö
 "Mi¸oso· Sm¨tˇrdlogö"

	)

1271 
	#NID_ms_sm¨tˇrd_logö
 648

	)

1272 
	#OBJ_ms_sm¨tˇrd_logö
 1L,3L,6L,1L,4L,1L,311L,20L,2L,2L

	)

1274 
	#SN_ms_u≤
 "msUPN"

	)

1275 
	#LN_ms_u≤
 "Mi¸oso· Univîß»PröcùÆ Name"

	)

1276 
	#NID_ms_u≤
 649

	)

1277 
	#OBJ_ms_u≤
 1L,3L,6L,1L,4L,1L,311L,20L,2L,3L

	)

1279 
	#SN_idó_cbc
 "IDEA-CBC"

	)

1280 
	#LN_idó_cbc
 "idó-cbc"

	)

1281 
	#NID_idó_cbc
 34

	)

1282 
	#OBJ_idó_cbc
 1L,3L,6L,1L,4L,1L,188L,7L,1L,1L,2L

	)

1284 
	#SN_idó_ecb
 "IDEA-ECB"

	)

1285 
	#LN_idó_ecb
 "idó-ecb"

	)

1286 
	#NID_idó_ecb
 36

	)

1288 
	#SN_idó_cfb64
 "IDEA-CFB"

	)

1289 
	#LN_idó_cfb64
 "idó-cfb"

	)

1290 
	#NID_idó_cfb64
 35

	)

1292 
	#SN_idó_ofb64
 "IDEA-OFB"

	)

1293 
	#LN_idó_ofb64
 "idó-ofb"

	)

1294 
	#NID_idó_ofb64
 46

	)

1296 
	#SN_bf_cbc
 "BF-CBC"

	)

1297 
	#LN_bf_cbc
 "bf-cbc"

	)

1298 
	#NID_bf_cbc
 91

	)

1299 
	#OBJ_bf_cbc
 1L,3L,6L,1L,4L,1L,3029L,1L,2L

	)

1301 
	#SN_bf_ecb
 "BF-ECB"

	)

1302 
	#LN_bf_ecb
 "bf-ecb"

	)

1303 
	#NID_bf_ecb
 92

	)

1305 
	#SN_bf_cfb64
 "BF-CFB"

	)

1306 
	#LN_bf_cfb64
 "bf-cfb"

	)

1307 
	#NID_bf_cfb64
 93

	)

1309 
	#SN_bf_ofb64
 "BF-OFB"

	)

1310 
	#LN_bf_ofb64
 "bf-ofb"

	)

1311 
	#NID_bf_ofb64
 94

	)

1313 
	#SN_id_pkix
 "PKIX"

	)

1314 
	#NID_id_pkix
 127

	)

1315 
	#OBJ_id_pkix
 1L,3L,6L,1L,5L,5L,7L

	)

1317 
	#SN_id_pkix_mod
 "id-pkix-mod"

	)

1318 
	#NID_id_pkix_mod
 258

	)

1319 
	#OBJ_id_pkix_mod
 
OBJ_id_pkix
,0L

	)

1321 
	#SN_id_≥
 "id-≥"

	)

1322 
	#NID_id_≥
 175

	)

1323 
	#OBJ_id_≥
 
OBJ_id_pkix
,1L

	)

1325 
	#SN_id_qt
 "id-qt"

	)

1326 
	#NID_id_qt
 259

	)

1327 
	#OBJ_id_qt
 
OBJ_id_pkix
,2L

	)

1329 
	#SN_id_kp
 "id-kp"

	)

1330 
	#NID_id_kp
 128

	)

1331 
	#OBJ_id_kp
 
OBJ_id_pkix
,3L

	)

1333 
	#SN_id_ô
 "id-ô"

	)

1334 
	#NID_id_ô
 260

	)

1335 
	#OBJ_id_ô
 
OBJ_id_pkix
,4L

	)

1337 
	#SN_id_pkù
 "id-pkù"

	)

1338 
	#NID_id_pkù
 261

	)

1339 
	#OBJ_id_pkù
 
OBJ_id_pkix
,5L

	)

1341 
	#SN_id_Æg
 "id-Æg"

	)

1342 
	#NID_id_Æg
 262

	)

1343 
	#OBJ_id_Æg
 
OBJ_id_pkix
,6L

	)

1345 
	#SN_id_cmc
 "id-cmc"

	)

1346 
	#NID_id_cmc
 263

	)

1347 
	#OBJ_id_cmc
 
OBJ_id_pkix
,7L

	)

1349 
	#SN_id_⁄
 "id-⁄"

	)

1350 
	#NID_id_⁄
 264

	)

1351 
	#OBJ_id_⁄
 
OBJ_id_pkix
,8L

	)

1353 
	#SN_id_pda
 "id-pda"

	)

1354 
	#NID_id_pda
 265

	)

1355 
	#OBJ_id_pda
 
OBJ_id_pkix
,9L

	)

1357 
	#SN_id_aˇ
 "id-aˇ"

	)

1358 
	#NID_id_aˇ
 266

	)

1359 
	#OBJ_id_aˇ
 
OBJ_id_pkix
,10L

	)

1361 
	#SN_id_qcs
 "id-qcs"

	)

1362 
	#NID_id_qcs
 267

	)

1363 
	#OBJ_id_qcs
 
OBJ_id_pkix
,11L

	)

1365 
	#SN_id_c˘
 "id-c˘"

	)

1366 
	#NID_id_c˘
 268

	)

1367 
	#OBJ_id_c˘
 
OBJ_id_pkix
,12L

	)

1369 
	#SN_id_µl
 "id-µl"

	)

1370 
	#NID_id_µl
 662

	)

1371 
	#OBJ_id_µl
 
OBJ_id_pkix
,21L

	)

1373 
	#SN_id_ad
 "id-ad"

	)

1374 
	#NID_id_ad
 176

	)

1375 
	#OBJ_id_ad
 
OBJ_id_pkix
,48L

	)

1377 
	#SN_id_pkix1_ex∂icô_88
 "id-pkix1-ex∂icô-88"

	)

1378 
	#NID_id_pkix1_ex∂icô_88
 269

	)

1379 
	#OBJ_id_pkix1_ex∂icô_88
 
OBJ_id_pkix_mod
,1L

	)

1381 
	#SN_id_pkix1_im∂icô_88
 "id-pkix1-im∂icô-88"

	)

1382 
	#NID_id_pkix1_im∂icô_88
 270

	)

1383 
	#OBJ_id_pkix1_im∂icô_88
 
OBJ_id_pkix_mod
,2L

	)

1385 
	#SN_id_pkix1_ex∂icô_93
 "id-pkix1-ex∂icô-93"

	)

1386 
	#NID_id_pkix1_ex∂icô_93
 271

	)

1387 
	#OBJ_id_pkix1_ex∂icô_93
 
OBJ_id_pkix_mod
,3L

	)

1389 
	#SN_id_pkix1_im∂icô_93
 "id-pkix1-im∂icô-93"

	)

1390 
	#NID_id_pkix1_im∂icô_93
 272

	)

1391 
	#OBJ_id_pkix1_im∂icô_93
 
OBJ_id_pkix_mod
,4L

	)

1393 
	#SN_id_mod_¸mf
 "id-mod-¸mf"

	)

1394 
	#NID_id_mod_¸mf
 273

	)

1395 
	#OBJ_id_mod_¸mf
 
OBJ_id_pkix_mod
,5L

	)

1397 
	#SN_id_mod_cmc
 "id-mod-cmc"

	)

1398 
	#NID_id_mod_cmc
 274

	)

1399 
	#OBJ_id_mod_cmc
 
OBJ_id_pkix_mod
,6L

	)

1401 
	#SN_id_mod_kó_¥ofûe_88
 "id-mod-kó-¥ofûe-88"

	)

1402 
	#NID_id_mod_kó_¥ofûe_88
 275

	)

1403 
	#OBJ_id_mod_kó_¥ofûe_88
 
OBJ_id_pkix_mod
,7L

	)

1405 
	#SN_id_mod_kó_¥ofûe_93
 "id-mod-kó-¥ofûe-93"

	)

1406 
	#NID_id_mod_kó_¥ofûe_93
 276

	)

1407 
	#OBJ_id_mod_kó_¥ofûe_93
 
OBJ_id_pkix_mod
,8L

	)

1409 
	#SN_id_mod_cmp
 "id-mod-cmp"

	)

1410 
	#NID_id_mod_cmp
 277

	)

1411 
	#OBJ_id_mod_cmp
 
OBJ_id_pkix_mod
,9L

	)

1413 
	#SN_id_mod_quÆifõd_˚π_88
 "id-mod-quÆifõd-˚π-88"

	)

1414 
	#NID_id_mod_quÆifõd_˚π_88
 278

	)

1415 
	#OBJ_id_mod_quÆifõd_˚π_88
 
OBJ_id_pkix_mod
,10L

	)

1417 
	#SN_id_mod_quÆifõd_˚π_93
 "id-mod-quÆifõd-˚π-93"

	)

1418 
	#NID_id_mod_quÆifõd_˚π_93
 279

	)

1419 
	#OBJ_id_mod_quÆifõd_˚π_93
 
OBJ_id_pkix_mod
,11L

	)

1421 
	#SN_id_mod_©åibuã_˚π
 "id-mod-©åibuã-˚π"

	)

1422 
	#NID_id_mod_©åibuã_˚π
 280

	)

1423 
	#OBJ_id_mod_©åibuã_˚π
 
OBJ_id_pkix_mod
,12L

	)

1425 
	#SN_id_mod_time°amp_¥Ÿocﬁ
 "id-mod-time°amp-¥Ÿocﬁ"

	)

1426 
	#NID_id_mod_time°amp_¥Ÿocﬁ
 281

	)

1427 
	#OBJ_id_mod_time°amp_¥Ÿocﬁ
 
OBJ_id_pkix_mod
,13L

	)

1429 
	#SN_id_mod_oc•
 "id-mod-oc•"

	)

1430 
	#NID_id_mod_oc•
 282

	)

1431 
	#OBJ_id_mod_oc•
 
OBJ_id_pkix_mod
,14L

	)

1433 
	#SN_id_mod_dvcs
 "id-mod-dvcs"

	)

1434 
	#NID_id_mod_dvcs
 283

	)

1435 
	#OBJ_id_mod_dvcs
 
OBJ_id_pkix_mod
,15L

	)

1437 
	#SN_id_mod_cmp2000
 "id-mod-cmp2000"

	)

1438 
	#NID_id_mod_cmp2000
 284

	)

1439 
	#OBJ_id_mod_cmp2000
 
OBJ_id_pkix_mod
,16L

	)

1441 
	#SN_öfo_ac˚ss
 "auth‹ôyInfoAc˚ss"

	)

1442 
	#LN_öfo_ac˚ss
 "Auth‹ôy Inf‹m©i⁄ Ac˚ss"

	)

1443 
	#NID_öfo_ac˚ss
 177

	)

1444 
	#OBJ_öfo_ac˚ss
 
OBJ_id_≥
,1L

	)

1446 
	#SN_biomëricInfo
 "biomëricInfo"

	)

1447 
	#LN_biomëricInfo
 "Biomëri¯Info"

	)

1448 
	#NID_biomëricInfo
 285

	)

1449 
	#OBJ_biomëricInfo
 
OBJ_id_≥
,2L

	)

1451 
	#SN_qcSèãmíts
 "qcSèãmíts"

	)

1452 
	#NID_qcSèãmíts
 286

	)

1453 
	#OBJ_qcSèãmíts
 
OBJ_id_≥
,3L

	)

1455 
	#SN_ac_audôE¡ôy
 "ac-audôE¡ôy"

	)

1456 
	#NID_ac_audôE¡ôy
 287

	)

1457 
	#OBJ_ac_audôE¡ôy
 
OBJ_id_≥
,4L

	)

1459 
	#SN_ac_èrgëög
 "ac-èrgëög"

	)

1460 
	#NID_ac_èrgëög
 288

	)

1461 
	#OBJ_ac_èrgëög
 
OBJ_id_≥
,5L

	)

1463 
	#SN_ØC⁄åﬁs
 "ØC⁄åﬁs"

	)

1464 
	#NID_ØC⁄åﬁs
 289

	)

1465 
	#OBJ_ØC⁄åﬁs
 
OBJ_id_≥
,6L

	)

1467 
	#SN_sbgp_ùAddrBlock
 "sbgp-ùAddrBlock"

	)

1468 
	#NID_sbgp_ùAddrBlock
 290

	)

1469 
	#OBJ_sbgp_ùAddrBlock
 
OBJ_id_≥
,7L

	)

1471 
	#SN_sbgp_aut⁄omousSysNum
 "sbgp-aut⁄omousSysNum"

	)

1472 
	#NID_sbgp_aut⁄omousSysNum
 291

	)

1473 
	#OBJ_sbgp_aut⁄omousSysNum
 
OBJ_id_≥
,8L

	)

1475 
	#SN_sbgp_rouãrIdítifõr
 "sbgp-rouãrIdítifõr"

	)

1476 
	#NID_sbgp_rouãrIdítifõr
 292

	)

1477 
	#OBJ_sbgp_rouãrIdítifõr
 
OBJ_id_≥
,9L

	)

1479 
	#SN_ac_¥oxyög
 "ac-¥oxyög"

	)

1480 
	#NID_ac_¥oxyög
 397

	)

1481 
	#OBJ_ac_¥oxyög
 
OBJ_id_≥
,10L

	)

1483 
	#SN_söfo_ac˚ss
 "subje˘InfoAc˚ss"

	)

1484 
	#LN_söfo_ac˚ss
 "Subje˘ Inf‹m©i⁄ Ac˚ss"

	)

1485 
	#NID_söfo_ac˚ss
 398

	)

1486 
	#OBJ_söfo_ac˚ss
 
OBJ_id_≥
,11L

	)

1488 
	#SN_¥oxyCîtInfo
 "¥oxyCîtInfo"

	)

1489 
	#LN_¥oxyCîtInfo
 "Proxy Cîtifiˇã Inf‹m©i⁄"

	)

1490 
	#NID_¥oxyCîtInfo
 663

	)

1491 
	#OBJ_¥oxyCîtInfo
 
OBJ_id_≥
,14L

	)

1493 
	#SN_id_qt_˝s
 "id-qt-˝s"

	)

1494 
	#LN_id_qt_˝s
 "Pﬁicy QuÆifõ∏CPS"

	)

1495 
	#NID_id_qt_˝s
 164

	)

1496 
	#OBJ_id_qt_˝s
 
OBJ_id_qt
,1L

	)

1498 
	#SN_id_qt_unŸi˚
 "id-qt-unŸi˚"

	)

1499 
	#LN_id_qt_unŸi˚
 "Pﬁicy QuÆifõ∏U£∏NŸi˚"

	)

1500 
	#NID_id_qt_unŸi˚
 165

	)

1501 
	#OBJ_id_qt_unŸi˚
 
OBJ_id_qt
,2L

	)

1503 
	#SN_ãxtNŸi˚
 "ãxtNŸi˚"

	)

1504 
	#NID_ãxtNŸi˚
 293

	)

1505 
	#OBJ_ãxtNŸi˚
 
OBJ_id_qt
,3L

	)

1507 
	#SN_£rvî_auth
 "£rvîAuth"

	)

1508 
	#LN_£rvî_auth
 "TLS Web Sîvî Authítiˇti⁄"

	)

1509 
	#NID_£rvî_auth
 129

	)

1510 
	#OBJ_£rvî_auth
 
OBJ_id_kp
,1L

	)

1512 
	#SN_˛õ¡_auth
 "˛õ¡Auth"

	)

1513 
	#LN_˛õ¡_auth
 "TLS Web Clõ¡ Authítiˇti⁄"

	)

1514 
	#NID_˛õ¡_auth
 130

	)

1515 
	#OBJ_˛õ¡_auth
 
OBJ_id_kp
,2L

	)

1517 
	#SN_code_sign
 "codeSignög"

	)

1518 
	#LN_code_sign
 "CodêSignög"

	)

1519 
	#NID_code_sign
 131

	)

1520 
	#OBJ_code_sign
 
OBJ_id_kp
,3L

	)

1522 
	#SN_emaû_¥Ÿe˘
 "emaûPrŸe˘i⁄"

	)

1523 
	#LN_emaû_¥Ÿe˘
 "E-maû PrŸe˘i⁄"

	)

1524 
	#NID_emaû_¥Ÿe˘
 132

	)

1525 
	#OBJ_emaû_¥Ÿe˘
 
OBJ_id_kp
,4L

	)

1527 
	#SN_ù£cEndSy°em
 "ù£cEndSy°em"

	)

1528 
	#LN_ù£cEndSy°em
 "IPSe¯End Sy°em"

	)

1529 
	#NID_ù£cEndSy°em
 294

	)

1530 
	#OBJ_ù£cEndSy°em
 
OBJ_id_kp
,5L

	)

1532 
	#SN_ù£cTu¬ñ
 "ù£cTu¬ñ"

	)

1533 
	#LN_ù£cTu¬ñ
 "IPSe¯Tu¬ñ"

	)

1534 
	#NID_ù£cTu¬ñ
 295

	)

1535 
	#OBJ_ù£cTu¬ñ
 
OBJ_id_kp
,6L

	)

1537 
	#SN_ù£cU£r
 "ù£cU£r"

	)

1538 
	#LN_ù£cU£r
 "IPSe¯U£r"

	)

1539 
	#NID_ù£cU£r
 296

	)

1540 
	#OBJ_ù£cU£r
 
OBJ_id_kp
,7L

	)

1542 
	#SN_time_°amp
 "timeSèmpög"

	)

1543 
	#LN_time_°amp
 "TimêSèmpög"

	)

1544 
	#NID_time_°amp
 133

	)

1545 
	#OBJ_time_°amp
 
OBJ_id_kp
,8L

	)

1547 
	#SN_OCSP_sign
 "OCSPSignög"

	)

1548 
	#LN_OCSP_sign
 "OCSP Signög"

	)

1549 
	#NID_OCSP_sign
 180

	)

1550 
	#OBJ_OCSP_sign
 
OBJ_id_kp
,9L

	)

1552 
	#SN_dvcs
 "DVCS"

	)

1553 
	#LN_dvcs
 "dvcs"

	)

1554 
	#NID_dvcs
 297

	)

1555 
	#OBJ_dvcs
 
OBJ_id_kp
,10L

	)

1557 
	#SN_id_ô_ˇPrŸEncCît
 "id-ô-ˇPrŸEncCît"

	)

1558 
	#NID_id_ô_ˇPrŸEncCît
 298

	)

1559 
	#OBJ_id_ô_ˇPrŸEncCît
 
OBJ_id_ô
,1L

	)

1561 
	#SN_id_ô_signKeyPaúTy≥s
 "id-ô-signKeyPaúTy≥s"

	)

1562 
	#NID_id_ô_signKeyPaúTy≥s
 299

	)

1563 
	#OBJ_id_ô_signKeyPaúTy≥s
 
OBJ_id_ô
,2L

	)

1565 
	#SN_id_ô_ícKeyPaúTy≥s
 "id-ô-ícKeyPaúTy≥s"

	)

1566 
	#NID_id_ô_ícKeyPaúTy≥s
 300

	)

1567 
	#OBJ_id_ô_ícKeyPaúTy≥s
 
OBJ_id_ô
,3L

	)

1569 
	#SN_id_ô_¥e„ºedSymmAlg
 "id-ô-¥e„ºedSymmAlg"

	)

1570 
	#NID_id_ô_¥e„ºedSymmAlg
 301

	)

1571 
	#OBJ_id_ô_¥e„ºedSymmAlg
 
OBJ_id_ô
,4L

	)

1573 
	#SN_id_ô_ˇKeyUpd©eInfo
 "id-ô-ˇKeyUpd©eInfo"

	)

1574 
	#NID_id_ô_ˇKeyUpd©eInfo
 302

	)

1575 
	#OBJ_id_ô_ˇKeyUpd©eInfo
 
OBJ_id_ô
,5L

	)

1577 
	#SN_id_ô_cuºítCRL
 "id-ô-cuºítCRL"

	)

1578 
	#NID_id_ô_cuºítCRL
 303

	)

1579 
	#OBJ_id_ô_cuºítCRL
 
OBJ_id_ô
,6L

	)

1581 
	#SN_id_ô_unsuµ‹ãdOIDs
 "id-ô-unsuµ‹ãdOIDs"

	)

1582 
	#NID_id_ô_unsuµ‹ãdOIDs
 304

	)

1583 
	#OBJ_id_ô_unsuµ‹ãdOIDs
 
OBJ_id_ô
,7L

	)

1585 
	#SN_id_ô_subs¸ùti⁄Reque°
 "id-ô-subs¸ùti⁄Reque°"

	)

1586 
	#NID_id_ô_subs¸ùti⁄Reque°
 305

	)

1587 
	#OBJ_id_ô_subs¸ùti⁄Reque°
 
OBJ_id_ô
,8L

	)

1589 
	#SN_id_ô_subs¸ùti⁄Re•⁄£
 "id-ô-subs¸ùti⁄Re•⁄£"

	)

1590 
	#NID_id_ô_subs¸ùti⁄Re•⁄£
 306

	)

1591 
	#OBJ_id_ô_subs¸ùti⁄Re•⁄£
 
OBJ_id_ô
,9L

	)

1593 
	#SN_id_ô_keyPaúP¨amReq
 "id-ô-keyPaúP¨amReq"

	)

1594 
	#NID_id_ô_keyPaúP¨amReq
 307

	)

1595 
	#OBJ_id_ô_keyPaúP¨amReq
 
OBJ_id_ô
,10L

	)

1597 
	#SN_id_ô_keyPaúP¨amRï
 "id-ô-keyPaúP¨amRï"

	)

1598 
	#NID_id_ô_keyPaúP¨amRï
 308

	)

1599 
	#OBJ_id_ô_keyPaúP¨amRï
 
OBJ_id_ô
,11L

	)

1601 
	#SN_id_ô_ªvPas•hø£
 "id-ô-ªvPas•hø£"

	)

1602 
	#NID_id_ô_ªvPas•hø£
 309

	)

1603 
	#OBJ_id_ô_ªvPas•hø£
 
OBJ_id_ô
,12L

	)

1605 
	#SN_id_ô_im∂icôC⁄fúm
 "id-ô-im∂icôC⁄fúm"

	)

1606 
	#NID_id_ô_im∂icôC⁄fúm
 310

	)

1607 
	#OBJ_id_ô_im∂icôC⁄fúm
 
OBJ_id_ô
,13L

	)

1609 
	#SN_id_ô_c⁄fúmWaôTime
 "id-ô-c⁄fúmWaôTime"

	)

1610 
	#NID_id_ô_c⁄fúmWaôTime
 311

	)

1611 
	#OBJ_id_ô_c⁄fúmWaôTime
 
OBJ_id_ô
,14L

	)

1613 
	#SN_id_ô_‹igPKIMesßge
 "id-ô-‹igPKIMesßge"

	)

1614 
	#NID_id_ô_‹igPKIMesßge
 312

	)

1615 
	#OBJ_id_ô_‹igPKIMesßge
 
OBJ_id_ô
,15L

	)

1617 
	#SN_id_ô_suµL™gTags
 "id-ô-suµL™gTags"

	)

1618 
	#NID_id_ô_suµL™gTags
 784

	)

1619 
	#OBJ_id_ô_suµL™gTags
 
OBJ_id_ô
,16L

	)

1621 
	#SN_id_ªgCål
 "id-ªgCål"

	)

1622 
	#NID_id_ªgCål
 313

	)

1623 
	#OBJ_id_ªgCål
 
OBJ_id_pkù
,1L

	)

1625 
	#SN_id_ªgInfo
 "id-ªgInfo"

	)

1626 
	#NID_id_ªgInfo
 314

	)

1627 
	#OBJ_id_ªgInfo
 
OBJ_id_pkù
,2L

	)

1629 
	#SN_id_ªgCål_ªgTokí
 "id-ªgCål-ªgTokí"

	)

1630 
	#NID_id_ªgCål_ªgTokí
 315

	)

1631 
	#OBJ_id_ªgCål_ªgTokí
 
OBJ_id_ªgCål
,1L

	)

1633 
	#SN_id_ªgCål_authítiˇt‹
 "id-ªgCål-authítiˇt‹"

	)

1634 
	#NID_id_ªgCål_authítiˇt‹
 316

	)

1635 
	#OBJ_id_ªgCål_authítiˇt‹
 
OBJ_id_ªgCål
,2L

	)

1637 
	#SN_id_ªgCål_pkiPubliˇti⁄Info
 "id-ªgCål-pkiPubliˇti⁄Info"

	)

1638 
	#NID_id_ªgCål_pkiPubliˇti⁄Info
 317

	)

1639 
	#OBJ_id_ªgCål_pkiPubliˇti⁄Info
 
OBJ_id_ªgCål
,3L

	)

1641 
	#SN_id_ªgCål_pkiArchiveO±i⁄s
 "id-ªgCål-pkiArchiveO±i⁄s"

	)

1642 
	#NID_id_ªgCål_pkiArchiveO±i⁄s
 318

	)

1643 
	#OBJ_id_ªgCål_pkiArchiveO±i⁄s
 
OBJ_id_ªgCål
,4L

	)

1645 
	#SN_id_ªgCål_ﬁdCîtID
 "id-ªgCål-ﬁdCîtID"

	)

1646 
	#NID_id_ªgCål_ﬁdCîtID
 319

	)

1647 
	#OBJ_id_ªgCål_ﬁdCîtID
 
OBJ_id_ªgCål
,5L

	)

1649 
	#SN_id_ªgCål_¥ŸocﬁEn¸Key
 "id-ªgCål-¥ŸocﬁEn¸Key"

	)

1650 
	#NID_id_ªgCål_¥ŸocﬁEn¸Key
 320

	)

1651 
	#OBJ_id_ªgCål_¥ŸocﬁEn¸Key
 
OBJ_id_ªgCål
,6L

	)

1653 
	#SN_id_ªgInfo_utf8Paús
 "id-ªgInfo-utf8Paús"

	)

1654 
	#NID_id_ªgInfo_utf8Paús
 321

	)

1655 
	#OBJ_id_ªgInfo_utf8Paús
 
OBJ_id_ªgInfo
,1L

	)

1657 
	#SN_id_ªgInfo_˚πReq
 "id-ªgInfo-˚πReq"

	)

1658 
	#NID_id_ªgInfo_˚πReq
 322

	)

1659 
	#OBJ_id_ªgInfo_˚πReq
 
OBJ_id_ªgInfo
,2L

	)

1661 
	#SN_id_Æg_des40
 "id-Æg-des40"

	)

1662 
	#NID_id_Æg_des40
 323

	)

1663 
	#OBJ_id_Æg_des40
 
OBJ_id_Æg
,1L

	)

1665 
	#SN_id_Æg_noSig«tuª
 "id-Æg-noSig«tuª"

	)

1666 
	#NID_id_Æg_noSig«tuª
 324

	)

1667 
	#OBJ_id_Æg_noSig«tuª
 
OBJ_id_Æg
,2L

	)

1669 
	#SN_id_Æg_dh_sig_hmac_sha1
 "id-Æg-dh-sig-hmac-sha1"

	)

1670 
	#NID_id_Æg_dh_sig_hmac_sha1
 325

	)

1671 
	#OBJ_id_Æg_dh_sig_hmac_sha1
 
OBJ_id_Æg
,3L

	)

1673 
	#SN_id_Æg_dh_p›
 "id-Æg-dh-p›"

	)

1674 
	#NID_id_Æg_dh_p›
 326

	)

1675 
	#OBJ_id_Æg_dh_p›
 
OBJ_id_Æg
,4L

	)

1677 
	#SN_id_cmc_°©usInfo
 "id-cmc-°©usInfo"

	)

1678 
	#NID_id_cmc_°©usInfo
 327

	)

1679 
	#OBJ_id_cmc_°©usInfo
 
OBJ_id_cmc
,1L

	)

1681 
	#SN_id_cmc_idítifiˇti⁄
 "id-cmc-idítifiˇti⁄"

	)

1682 
	#NID_id_cmc_idítifiˇti⁄
 328

	)

1683 
	#OBJ_id_cmc_idítifiˇti⁄
 
OBJ_id_cmc
,2L

	)

1685 
	#SN_id_cmc_idítôyProof
 "id-cmc-idítôyProof"

	)

1686 
	#NID_id_cmc_idítôyProof
 329

	)

1687 
	#OBJ_id_cmc_idítôyProof
 
OBJ_id_cmc
,3L

	)

1689 
	#SN_id_cmc_d©aRëu∫
 "id-cmc-d©aRëu∫"

	)

1690 
	#NID_id_cmc_d©aRëu∫
 330

	)

1691 
	#OBJ_id_cmc_d©aRëu∫
 
OBJ_id_cmc
,4L

	)

1693 
	#SN_id_cmc_å™ß˘i⁄Id
 "id-cmc-å™ß˘i⁄Id"

	)

1694 
	#NID_id_cmc_å™ß˘i⁄Id
 331

	)

1695 
	#OBJ_id_cmc_å™ß˘i⁄Id
 
OBJ_id_cmc
,5L

	)

1697 
	#SN_id_cmc_£ndîN⁄˚
 "id-cmc-£ndîN⁄˚"

	)

1698 
	#NID_id_cmc_£ndîN⁄˚
 332

	)

1699 
	#OBJ_id_cmc_£ndîN⁄˚
 
OBJ_id_cmc
,6L

	)

1701 
	#SN_id_cmc_ªcùõ¡N⁄˚
 "id-cmc-ªcùõ¡N⁄˚"

	)

1702 
	#NID_id_cmc_ªcùõ¡N⁄˚
 333

	)

1703 
	#OBJ_id_cmc_ªcùõ¡N⁄˚
 
OBJ_id_cmc
,7L

	)

1705 
	#SN_id_cmc_addExãnsi⁄s
 "id-cmc-addExãnsi⁄s"

	)

1706 
	#NID_id_cmc_addExãnsi⁄s
 334

	)

1707 
	#OBJ_id_cmc_addExãnsi⁄s
 
OBJ_id_cmc
,8L

	)

1709 
	#SN_id_cmc_í¸y±edPOP
 "id-cmc-í¸y±edPOP"

	)

1710 
	#NID_id_cmc_í¸y±edPOP
 335

	)

1711 
	#OBJ_id_cmc_í¸y±edPOP
 
OBJ_id_cmc
,9L

	)

1713 
	#SN_id_cmc_de¸y±edPOP
 "id-cmc-de¸y±edPOP"

	)

1714 
	#NID_id_cmc_de¸y±edPOP
 336

	)

1715 
	#OBJ_id_cmc_de¸y±edPOP
 
OBJ_id_cmc
,10L

	)

1717 
	#SN_id_cmc_ÃaPOPWô√ss
 "id-cmc-ÃaPOPWô√ss"

	)

1718 
	#NID_id_cmc_ÃaPOPWô√ss
 337

	)

1719 
	#OBJ_id_cmc_ÃaPOPWô√ss
 
OBJ_id_cmc
,11L

	)

1721 
	#SN_id_cmc_gëCît
 "id-cmc-gëCît"

	)

1722 
	#NID_id_cmc_gëCît
 338

	)

1723 
	#OBJ_id_cmc_gëCît
 
OBJ_id_cmc
,15L

	)

1725 
	#SN_id_cmc_gëCRL
 "id-cmc-gëCRL"

	)

1726 
	#NID_id_cmc_gëCRL
 339

	)

1727 
	#OBJ_id_cmc_gëCRL
 
OBJ_id_cmc
,16L

	)

1729 
	#SN_id_cmc_ªvokeReque°
 "id-cmc-ªvokeReque°"

	)

1730 
	#NID_id_cmc_ªvokeReque°
 340

	)

1731 
	#OBJ_id_cmc_ªvokeReque°
 
OBJ_id_cmc
,17L

	)

1733 
	#SN_id_cmc_ªgInfo
 "id-cmc-ªgInfo"

	)

1734 
	#NID_id_cmc_ªgInfo
 341

	)

1735 
	#OBJ_id_cmc_ªgInfo
 
OBJ_id_cmc
,18L

	)

1737 
	#SN_id_cmc_ª•⁄£Info
 "id-cmc-ª•⁄£Info"

	)

1738 
	#NID_id_cmc_ª•⁄£Info
 342

	)

1739 
	#OBJ_id_cmc_ª•⁄£Info
 
OBJ_id_cmc
,19L

	)

1741 
	#SN_id_cmc_quîyPídög
 "id-cmc-quîyPídög"

	)

1742 
	#NID_id_cmc_quîyPídög
 343

	)

1743 
	#OBJ_id_cmc_quîyPídög
 
OBJ_id_cmc
,21L

	)

1745 
	#SN_id_cmc_p›LökR™dom
 "id-cmc-p›LökR™dom"

	)

1746 
	#NID_id_cmc_p›LökR™dom
 344

	)

1747 
	#OBJ_id_cmc_p›LökR™dom
 
OBJ_id_cmc
,22L

	)

1749 
	#SN_id_cmc_p›LökWô√ss
 "id-cmc-p›LökWô√ss"

	)

1750 
	#NID_id_cmc_p›LökWô√ss
 345

	)

1751 
	#OBJ_id_cmc_p›LökWô√ss
 
OBJ_id_cmc
,23L

	)

1753 
	#SN_id_cmc_c⁄fúmCîtAc˚±™˚
 "id-cmc-c⁄fúmCîtAc˚±™˚"

	)

1754 
	#NID_id_cmc_c⁄fúmCîtAc˚±™˚
 346

	)

1755 
	#OBJ_id_cmc_c⁄fúmCîtAc˚±™˚
 
OBJ_id_cmc
,24L

	)

1757 
	#SN_id_⁄_≥rs⁄ÆD©a
 "id-⁄-≥rs⁄ÆD©a"

	)

1758 
	#NID_id_⁄_≥rs⁄ÆD©a
 347

	)

1759 
	#OBJ_id_⁄_≥rs⁄ÆD©a
 
OBJ_id_⁄
,1L

	)

1761 
	#SN_id_⁄_≥rm™ítIdítifõr
 "id-⁄-≥rm™ítIdítifõr"

	)

1762 
	#LN_id_⁄_≥rm™ítIdítifõr
 "Pîm™íàIdítifõr"

	)

1763 
	#NID_id_⁄_≥rm™ítIdítifõr
 858

	)

1764 
	#OBJ_id_⁄_≥rm™ítIdítifõr
 
OBJ_id_⁄
,3L

	)

1766 
	#SN_id_pda_d©eOfBúth
 "id-pda-d©eOfBúth"

	)

1767 
	#NID_id_pda_d©eOfBúth
 348

	)

1768 
	#OBJ_id_pda_d©eOfBúth
 
OBJ_id_pda
,1L

	)

1770 
	#SN_id_pda_∂a˚OfBúth
 "id-pda-∂a˚OfBúth"

	)

1771 
	#NID_id_pda_∂a˚OfBúth
 349

	)

1772 
	#OBJ_id_pda_∂a˚OfBúth
 
OBJ_id_pda
,2L

	)

1774 
	#SN_id_pda_gídî
 "id-pda-gídî"

	)

1775 
	#NID_id_pda_gídî
 351

	)

1776 
	#OBJ_id_pda_gídî
 
OBJ_id_pda
,3L

	)

1778 
	#SN_id_pda_cou¡ryOfCôizíshù
 "id-pda-cou¡ryOfCôizíshù"

	)

1779 
	#NID_id_pda_cou¡ryOfCôizíshù
 352

	)

1780 
	#OBJ_id_pda_cou¡ryOfCôizíshù
 
OBJ_id_pda
,4L

	)

1782 
	#SN_id_pda_cou¡ryOfResidí˚
 "id-pda-cou¡ryOfResidí˚"

	)

1783 
	#NID_id_pda_cou¡ryOfResidí˚
 353

	)

1784 
	#OBJ_id_pda_cou¡ryOfResidí˚
 
OBJ_id_pda
,5L

	)

1786 
	#SN_id_aˇ_authítiˇti⁄Info
 "id-aˇ-authítiˇti⁄Info"

	)

1787 
	#NID_id_aˇ_authítiˇti⁄Info
 354

	)

1788 
	#OBJ_id_aˇ_authítiˇti⁄Info
 
OBJ_id_aˇ
,1L

	)

1790 
	#SN_id_aˇ_ac˚ssIdítôy
 "id-aˇ-ac˚ssIdítôy"

	)

1791 
	#NID_id_aˇ_ac˚ssIdítôy
 355

	)

1792 
	#OBJ_id_aˇ_ac˚ssIdítôy
 
OBJ_id_aˇ
,2L

	)

1794 
	#SN_id_aˇ_ch¨gögIdítôy
 "id-aˇ-ch¨gögIdítôy"

	)

1795 
	#NID_id_aˇ_ch¨gögIdítôy
 356

	)

1796 
	#OBJ_id_aˇ_ch¨gögIdítôy
 
OBJ_id_aˇ
,3L

	)

1798 
	#SN_id_aˇ_group
 "id-aˇ-group"

	)

1799 
	#NID_id_aˇ_group
 357

	)

1800 
	#OBJ_id_aˇ_group
 
OBJ_id_aˇ
,4L

	)

1802 
	#SN_id_aˇ_rﬁe
 "id-aˇ-rﬁe"

	)

1803 
	#NID_id_aˇ_rﬁe
 358

	)

1804 
	#OBJ_id_aˇ_rﬁe
 
OBJ_id_aˇ
,5L

	)

1806 
	#SN_id_aˇ_ícAârs
 "id-aˇ-ícAârs"

	)

1807 
	#NID_id_aˇ_ícAârs
 399

	)

1808 
	#OBJ_id_aˇ_ícAârs
 
OBJ_id_aˇ
,6L

	)

1810 
	#SN_id_qcs_pkixQCSy¡ax_v1
 "id-qcs-pkixQCSy¡ax-v1"

	)

1811 
	#NID_id_qcs_pkixQCSy¡ax_v1
 359

	)

1812 
	#OBJ_id_qcs_pkixQCSy¡ax_v1
 
OBJ_id_qcs
,1L

	)

1814 
	#SN_id_c˘_¸s
 "id-c˘-¸s"

	)

1815 
	#NID_id_c˘_¸s
 360

	)

1816 
	#OBJ_id_c˘_¸s
 
OBJ_id_c˘
,1L

	)

1818 
	#SN_id_c˘_PKID©a
 "id-c˘-PKID©a"

	)

1819 
	#NID_id_c˘_PKID©a
 361

	)

1820 
	#OBJ_id_c˘_PKID©a
 
OBJ_id_c˘
,2L

	)

1822 
	#SN_id_c˘_PKIRe•⁄£
 "id-c˘-PKIRe•⁄£"

	)

1823 
	#NID_id_c˘_PKIRe•⁄£
 362

	)

1824 
	#OBJ_id_c˘_PKIRe•⁄£
 
OBJ_id_c˘
,3L

	)

1826 
	#SN_id_µl_™yL™guage
 "id-µl-™yL™guage"

	)

1827 
	#LN_id_µl_™yL™guage
 "AnyÜ™guage"

	)

1828 
	#NID_id_µl_™yL™guage
 664

	)

1829 
	#OBJ_id_µl_™yL™guage
 
OBJ_id_µl
,0L

	)

1831 
	#SN_id_µl_öhîôAŒ
 "id-µl-öhîôAŒ"

	)

1832 
	#LN_id_µl_öhîôAŒ
 "InhîôáŒ"

	)

1833 
	#NID_id_µl_öhîôAŒ
 665

	)

1834 
	#OBJ_id_µl_öhîôAŒ
 
OBJ_id_µl
,1L

	)

1836 
	#SN_Indïídít
 "id-µl-ödïídít"

	)

1837 
	#LN_Indïídít
 "Indïídít"

	)

1838 
	#NID_Indïídít
 667

	)

1839 
	#OBJ_Indïídít
 
OBJ_id_µl
,2L

	)

1841 
	#SN_ad_OCSP
 "OCSP"

	)

1842 
	#LN_ad_OCSP
 "OCSP"

	)

1843 
	#NID_ad_OCSP
 178

	)

1844 
	#OBJ_ad_OCSP
 
OBJ_id_ad
,1L

	)

1846 
	#SN_ad_ˇ_issuîs
 "ˇIssuîs"

	)

1847 
	#LN_ad_ˇ_issuîs
 "CA Issuîs"

	)

1848 
	#NID_ad_ˇ_issuîs
 179

	)

1849 
	#OBJ_ad_ˇ_issuîs
 
OBJ_id_ad
,2L

	)

1851 
	#SN_ad_timeSèmpög
 "ad_time°ampög"

	)

1852 
	#LN_ad_timeSèmpög
 "AD TimêSèmpög"

	)

1853 
	#NID_ad_timeSèmpög
 363

	)

1854 
	#OBJ_ad_timeSèmpög
 
OBJ_id_ad
,3L

	)

1856 
	#SN_ad_dvcs
 "AD_DVCS"

	)

1857 
	#LN_ad_dvcs
 "ad dvcs"

	)

1858 
	#NID_ad_dvcs
 364

	)

1859 
	#OBJ_ad_dvcs
 
OBJ_id_ad
,4L

	)

1861 
	#SN_ˇRïosô‹y
 "ˇRïosô‹y"

	)

1862 
	#LN_ˇRïosô‹y
 "CA Rïosô‹y"

	)

1863 
	#NID_ˇRïosô‹y
 785

	)

1864 
	#OBJ_ˇRïosô‹y
 
OBJ_id_ad
,5L

	)

1866 
	#OBJ_id_pkix_OCSP
 
OBJ_ad_OCSP


	)

1868 
	#SN_id_pkix_OCSP_basic
 "basicOCSPRe•⁄£"

	)

1869 
	#LN_id_pkix_OCSP_basic
 "Basi¯OCSP Re•⁄£"

	)

1870 
	#NID_id_pkix_OCSP_basic
 365

	)

1871 
	#OBJ_id_pkix_OCSP_basic
 
OBJ_id_pkix_OCSP
,1L

	)

1873 
	#SN_id_pkix_OCSP_N⁄˚
 "N⁄˚"

	)

1874 
	#LN_id_pkix_OCSP_N⁄˚
 "OCSP N⁄˚"

	)

1875 
	#NID_id_pkix_OCSP_N⁄˚
 366

	)

1876 
	#OBJ_id_pkix_OCSP_N⁄˚
 
OBJ_id_pkix_OCSP
,2L

	)

1878 
	#SN_id_pkix_OCSP_CæID
 "CæID"

	)

1879 
	#LN_id_pkix_OCSP_CæID
 "OCSP CRL ID"

	)

1880 
	#NID_id_pkix_OCSP_CæID
 367

	)

1881 
	#OBJ_id_pkix_OCSP_CæID
 
OBJ_id_pkix_OCSP
,3L

	)

1883 
	#SN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "ac˚±abÀRe•⁄£s"

	)

1884 
	#LN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "Ac˚±abÀ OCSP Re•⁄£s"

	)

1885 
	#NID_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 368

	)

1886 
	#OBJ_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 
OBJ_id_pkix_OCSP
,4L

	)

1888 
	#SN_id_pkix_OCSP_noCheck
 "noCheck"

	)

1889 
	#LN_id_pkix_OCSP_noCheck
 "OCSP NÿCheck"

	)

1890 
	#NID_id_pkix_OCSP_noCheck
 369

	)

1891 
	#OBJ_id_pkix_OCSP_noCheck
 
OBJ_id_pkix_OCSP
,5L

	)

1893 
	#SN_id_pkix_OCSP_¨chiveCutoff
 "¨chiveCutoff"

	)

1894 
	#LN_id_pkix_OCSP_¨chiveCutoff
 "OCSP ArchivêCutoff"

	)

1895 
	#NID_id_pkix_OCSP_¨chiveCutoff
 370

	)

1896 
	#OBJ_id_pkix_OCSP_¨chiveCutoff
 
OBJ_id_pkix_OCSP
,6L

	)

1898 
	#SN_id_pkix_OCSP_£rvi˚Loˇt‹
 "£rvi˚Loˇt‹"

	)

1899 
	#LN_id_pkix_OCSP_£rvi˚Loˇt‹
 "OCSP Sîvi˚ Loˇt‹"

	)

1900 
	#NID_id_pkix_OCSP_£rvi˚Loˇt‹
 371

	)

1901 
	#OBJ_id_pkix_OCSP_£rvi˚Loˇt‹
 
OBJ_id_pkix_OCSP
,7L

	)

1903 
	#SN_id_pkix_OCSP_exãndedSètus
 "exãndedSètus"

	)

1904 
	#LN_id_pkix_OCSP_exãndedSètus
 "Exãnded OCSP Sètus"

	)

1905 
	#NID_id_pkix_OCSP_exãndedSètus
 372

	)

1906 
	#OBJ_id_pkix_OCSP_exãndedSètus
 
OBJ_id_pkix_OCSP
,8L

	)

1908 
	#SN_id_pkix_OCSP_vÆid
 "vÆid"

	)

1909 
	#NID_id_pkix_OCSP_vÆid
 373

	)

1910 
	#OBJ_id_pkix_OCSP_vÆid
 
OBJ_id_pkix_OCSP
,9L

	)

1912 
	#SN_id_pkix_OCSP_∑th
 "∑th"

	)

1913 
	#NID_id_pkix_OCSP_∑th
 374

	)

1914 
	#OBJ_id_pkix_OCSP_∑th
 
OBJ_id_pkix_OCSP
,10L

	)

1916 
	#SN_id_pkix_OCSP_åu°RoŸ
 "åu°RoŸ"

	)

1917 
	#LN_id_pkix_OCSP_åu°RoŸ
 "Tru° RoŸ"

	)

1918 
	#NID_id_pkix_OCSP_åu°RoŸ
 375

	)

1919 
	#OBJ_id_pkix_OCSP_åu°RoŸ
 
OBJ_id_pkix_OCSP
,11L

	)

1921 
	#SN_Æg‹ôhm
 "Æg‹ôhm"

	)

1922 
	#LN_Æg‹ôhm
 "Æg‹ôhm"

	)

1923 
	#NID_Æg‹ôhm
 376

	)

1924 
	#OBJ_Æg‹ôhm
 1L,3L,14L,3L,2L

	)

1926 
	#SN_md5WôhRSA
 "RSA-NP-MD5"

	)

1927 
	#LN_md5WôhRSA
 "md5WôhRSA"

	)

1928 
	#NID_md5WôhRSA
 104

	)

1929 
	#OBJ_md5WôhRSA
 
OBJ_Æg‹ôhm
,3L

	)

1931 
	#SN_des_ecb
 "DES-ECB"

	)

1932 
	#LN_des_ecb
 "des-ecb"

	)

1933 
	#NID_des_ecb
 29

	)

1934 
	#OBJ_des_ecb
 
OBJ_Æg‹ôhm
,6L

	)

1936 
	#SN_des_cbc
 "DES-CBC"

	)

1937 
	#LN_des_cbc
 "des-cbc"

	)

1938 
	#NID_des_cbc
 31

	)

1939 
	#OBJ_des_cbc
 
OBJ_Æg‹ôhm
,7L

	)

1941 
	#SN_des_ofb64
 "DES-OFB"

	)

1942 
	#LN_des_ofb64
 "des-ofb"

	)

1943 
	#NID_des_ofb64
 45

	)

1944 
	#OBJ_des_ofb64
 
OBJ_Æg‹ôhm
,8L

	)

1946 
	#SN_des_cfb64
 "DES-CFB"

	)

1947 
	#LN_des_cfb64
 "des-cfb"

	)

1948 
	#NID_des_cfb64
 30

	)

1949 
	#OBJ_des_cfb64
 
OBJ_Æg‹ôhm
,9L

	)

1951 
	#SN_rßSig«tuª
 "rßSig«tuª"

	)

1952 
	#NID_rßSig«tuª
 377

	)

1953 
	#OBJ_rßSig«tuª
 
OBJ_Æg‹ôhm
,11L

	)

1955 
	#SN_dß_2
 "DSA-ﬁd"

	)

1956 
	#LN_dß_2
 "dßEn¸y±i⁄-ﬁd"

	)

1957 
	#NID_dß_2
 67

	)

1958 
	#OBJ_dß_2
 
OBJ_Æg‹ôhm
,12L

	)

1960 
	#SN_dßWôhSHA
 "DSA-SHA"

	)

1961 
	#LN_dßWôhSHA
 "dßWôhSHA"

	)

1962 
	#NID_dßWôhSHA
 66

	)

1963 
	#OBJ_dßWôhSHA
 
OBJ_Æg‹ôhm
,13L

	)

1965 
	#SN_shaWôhRSAEn¸y±i⁄
 "RSA-SHA"

	)

1966 
	#LN_shaWôhRSAEn¸y±i⁄
 "shaWôhRSAEn¸y±i⁄"

	)

1967 
	#NID_shaWôhRSAEn¸y±i⁄
 42

	)

1968 
	#OBJ_shaWôhRSAEn¸y±i⁄
 
OBJ_Æg‹ôhm
,15L

	)

1970 
	#SN_des_ede_ecb
 "DES-EDE"

	)

1971 
	#LN_des_ede_ecb
 "des-ede"

	)

1972 
	#NID_des_ede_ecb
 32

	)

1973 
	#OBJ_des_ede_ecb
 
OBJ_Æg‹ôhm
,17L

	)

1975 
	#SN_des_ede3_ecb
 "DES-EDE3"

	)

1976 
	#LN_des_ede3_ecb
 "des-ede3"

	)

1977 
	#NID_des_ede3_ecb
 33

	)

1979 
	#SN_des_ede_cbc
 "DES-EDE-CBC"

	)

1980 
	#LN_des_ede_cbc
 "des-ede-cbc"

	)

1981 
	#NID_des_ede_cbc
 43

	)

1983 
	#SN_des_ede_cfb64
 "DES-EDE-CFB"

	)

1984 
	#LN_des_ede_cfb64
 "des-ede-cfb"

	)

1985 
	#NID_des_ede_cfb64
 60

	)

1987 
	#SN_des_ede3_cfb64
 "DES-EDE3-CFB"

	)

1988 
	#LN_des_ede3_cfb64
 "des-ede3-cfb"

	)

1989 
	#NID_des_ede3_cfb64
 61

	)

1991 
	#SN_des_ede_ofb64
 "DES-EDE-OFB"

	)

1992 
	#LN_des_ede_ofb64
 "des-ede-ofb"

	)

1993 
	#NID_des_ede_ofb64
 62

	)

1995 
	#SN_des_ede3_ofb64
 "DES-EDE3-OFB"

	)

1996 
	#LN_des_ede3_ofb64
 "des-ede3-ofb"

	)

1997 
	#NID_des_ede3_ofb64
 63

	)

1999 
	#SN_desx_cbc
 "DESX-CBC"

	)

2000 
	#LN_desx_cbc
 "desx-cbc"

	)

2001 
	#NID_desx_cbc
 80

	)

2003 
	#SN_sha
 "SHA"

	)

2004 
	#LN_sha
 "sha"

	)

2005 
	#NID_sha
 41

	)

2006 
	#OBJ_sha
 
OBJ_Æg‹ôhm
,18L

	)

2008 
	#SN_sha1
 "SHA1"

	)

2009 
	#LN_sha1
 "sha1"

	)

2010 
	#NID_sha1
 64

	)

2011 
	#OBJ_sha1
 
OBJ_Æg‹ôhm
,26L

	)

2013 
	#SN_dßWôhSHA1_2
 "DSA-SHA1-ﬁd"

	)

2014 
	#LN_dßWôhSHA1_2
 "dßWôhSHA1-ﬁd"

	)

2015 
	#NID_dßWôhSHA1_2
 70

	)

2016 
	#OBJ_dßWôhSHA1_2
 
OBJ_Æg‹ôhm
,27L

	)

2018 
	#SN_sha1WôhRSA
 "RSA-SHA1-2"

	)

2019 
	#LN_sha1WôhRSA
 "sha1WôhRSA"

	)

2020 
	#NID_sha1WôhRSA
 115

	)

2021 
	#OBJ_sha1WôhRSA
 
OBJ_Æg‹ôhm
,29L

	)

2023 
	#SN_rùemd160
 "RIPEMD160"

	)

2024 
	#LN_rùemd160
 "rùemd160"

	)

2025 
	#NID_rùemd160
 117

	)

2026 
	#OBJ_rùemd160
 1L,3L,36L,3L,2L,1L

	)

2028 
	#SN_rùemd160WôhRSA
 "RSA-RIPEMD160"

	)

2029 
	#LN_rùemd160WôhRSA
 "rùemd160WôhRSA"

	)

2030 
	#NID_rùemd160WôhRSA
 119

	)

2031 
	#OBJ_rùemd160WôhRSA
 1L,3L,36L,3L,3L,1L,2L

	)

2033 
	#SN_sx√t
 "SXNëID"

	)

2034 
	#LN_sx√t
 "Så⁄g Exå™ë ID"

	)

2035 
	#NID_sx√t
 143

	)

2036 
	#OBJ_sx√t
 1L,3L,101L,1L,4L,1L

	)

2038 
	#SN_X500
 "X500"

	)

2039 
	#LN_X500
 "dúe˘‹y sîvi˚†(X.500)"

	)

2040 
	#NID_X500
 11

	)

2041 
	#OBJ_X500
 2L,5L

	)

2043 
	#SN_X509
 "X509"

	)

2044 
	#NID_X509
 12

	)

2045 
	#OBJ_X509
 
OBJ_X500
,4L

	)

2047 
	#SN_comm⁄Name
 "CN"

	)

2048 
	#LN_comm⁄Name
 "comm⁄Name"

	)

2049 
	#NID_comm⁄Name
 13

	)

2050 
	#OBJ_comm⁄Name
 
OBJ_X509
,3L

	)

2052 
	#SN_su∫ame
 "SN"

	)

2053 
	#LN_su∫ame
 "su∫ame"

	)

2054 
	#NID_su∫ame
 100

	)

2055 
	#OBJ_su∫ame
 
OBJ_X509
,4L

	)

2057 
	#LN_£rülNumbî
 "£rülNumbî"

	)

2058 
	#NID_£rülNumbî
 105

	)

2059 
	#OBJ_£rülNumbî
 
OBJ_X509
,5L

	)

2061 
	#SN_cou¡ryName
 "C"

	)

2062 
	#LN_cou¡ryName
 "cou¡ryName"

	)

2063 
	#NID_cou¡ryName
 14

	)

2064 
	#OBJ_cou¡ryName
 
OBJ_X509
,6L

	)

2066 
	#SN_loˇlôyName
 "L"

	)

2067 
	#LN_loˇlôyName
 "loˇlôyName"

	)

2068 
	#NID_loˇlôyName
 15

	)

2069 
	#OBJ_loˇlôyName
 
OBJ_X509
,7L

	)

2071 
	#SN_°©eOrProvö˚Name
 "ST"

	)

2072 
	#LN_°©eOrProvö˚Name
 "°©eOrProvö˚Name"

	)

2073 
	#NID_°©eOrProvö˚Name
 16

	)

2074 
	#OBJ_°©eOrProvö˚Name
 
OBJ_X509
,8L

	)

2076 
	#SN_°ªëAddªss
 "°ªë"

	)

2077 
	#LN_°ªëAddªss
 "°ªëAddªss"

	)

2078 
	#NID_°ªëAddªss
 660

	)

2079 
	#OBJ_°ªëAddªss
 
OBJ_X509
,9L

	)

2081 
	#SN_‹g™iz©i⁄Name
 "O"

	)

2082 
	#LN_‹g™iz©i⁄Name
 "‹g™iz©i⁄Name"

	)

2083 
	#NID_‹g™iz©i⁄Name
 17

	)

2084 
	#OBJ_‹g™iz©i⁄Name
 
OBJ_X509
,10L

	)

2086 
	#SN_‹g™iz©i⁄ÆUnôName
 "OU"

	)

2087 
	#LN_‹g™iz©i⁄ÆUnôName
 "‹g™iz©i⁄ÆUnôName"

	)

2088 
	#NID_‹g™iz©i⁄ÆUnôName
 18

	)

2089 
	#OBJ_‹g™iz©i⁄ÆUnôName
 
OBJ_X509
,11L

	)

2091 
	#SN_tôÀ
 "tôÀ"

	)

2092 
	#LN_tôÀ
 "tôÀ"

	)

2093 
	#NID_tôÀ
 106

	)

2094 
	#OBJ_tôÀ
 
OBJ_X509
,12L

	)

2096 
	#LN_des¸ùti⁄
 "des¸ùti⁄"

	)

2097 
	#NID_des¸ùti⁄
 107

	)

2098 
	#OBJ_des¸ùti⁄
 
OBJ_X509
,13L

	)

2100 
	#LN_£¨chGuide
 "£¨chGuide"

	)

2101 
	#NID_£¨chGuide
 859

	)

2102 
	#OBJ_£¨chGuide
 
OBJ_X509
,14L

	)

2104 
	#LN_busöessC©eg‹y
 "busöessC©eg‹y"

	)

2105 
	#NID_busöessC©eg‹y
 860

	)

2106 
	#OBJ_busöessC©eg‹y
 
OBJ_X509
,15L

	)

2108 
	#LN_po°ÆAddªss
 "po°ÆAddªss"

	)

2109 
	#NID_po°ÆAddªss
 861

	)

2110 
	#OBJ_po°ÆAddªss
 
OBJ_X509
,16L

	)

2112 
	#LN_po°ÆCode
 "po°ÆCode"

	)

2113 
	#NID_po°ÆCode
 661

	)

2114 
	#OBJ_po°ÆCode
 
OBJ_X509
,17L

	)

2116 
	#LN_po°Offi˚Box
 "po°Offi˚Box"

	)

2117 
	#NID_po°Offi˚Box
 862

	)

2118 
	#OBJ_po°Offi˚Box
 
OBJ_X509
,18L

	)

2120 
	#LN_physiˇlDñivîyOffi˚Name
 "physiˇlDñivîyOffi˚Name"

	)

2121 
	#NID_physiˇlDñivîyOffi˚Name
 863

	)

2122 
	#OBJ_physiˇlDñivîyOffi˚Name
 
OBJ_X509
,19L

	)

2124 
	#LN_ãÀph⁄eNumbî
 "ãÀph⁄eNumbî"

	)

2125 
	#NID_ãÀph⁄eNumbî
 864

	)

2126 
	#OBJ_ãÀph⁄eNumbî
 
OBJ_X509
,20L

	)

2128 
	#LN_ãÀxNumbî
 "ãÀxNumbî"

	)

2129 
	#NID_ãÀxNumbî
 865

	)

2130 
	#OBJ_ãÀxNumbî
 
OBJ_X509
,21L

	)

2132 
	#LN_ãÀãxTîmöÆIdítifõr
 "ãÀãxTîmöÆIdítifõr"

	)

2133 
	#NID_ãÀãxTîmöÆIdítifõr
 866

	)

2134 
	#OBJ_ãÀãxTîmöÆIdítifõr
 
OBJ_X509
,22L

	)

2136 
	#LN_ÁcsimûeTñïh⁄eNumbî
 "ÁcsimûeTñïh⁄eNumbî"

	)

2137 
	#NID_ÁcsimûeTñïh⁄eNumbî
 867

	)

2138 
	#OBJ_ÁcsimûeTñïh⁄eNumbî
 
OBJ_X509
,23L

	)

2140 
	#LN_x121Addªss
 "x121Addªss"

	)

2141 
	#NID_x121Addªss
 868

	)

2142 
	#OBJ_x121Addªss
 
OBJ_X509
,24L

	)

2144 
	#LN_öã∫©i⁄ÆiSDNNumbî
 "öã∫©i⁄ÆiSDNNumbî"

	)

2145 
	#NID_öã∫©i⁄ÆiSDNNumbî
 869

	)

2146 
	#OBJ_öã∫©i⁄ÆiSDNNumbî
 
OBJ_X509
,25L

	)

2148 
	#LN_ªgi°îedAddªss
 "ªgi°îedAddªss"

	)

2149 
	#NID_ªgi°îedAddªss
 870

	)

2150 
	#OBJ_ªgi°îedAddªss
 
OBJ_X509
,26L

	)

2152 
	#LN_de°ö©i⁄Indiˇt‹
 "de°ö©i⁄Indiˇt‹"

	)

2153 
	#NID_de°ö©i⁄Indiˇt‹
 871

	)

2154 
	#OBJ_de°ö©i⁄Indiˇt‹
 
OBJ_X509
,27L

	)

2156 
	#LN_¥e„ºedDñivîyMëhod
 "¥e„ºedDñivîyMëhod"

	)

2157 
	#NID_¥e„ºedDñivîyMëhod
 872

	)

2158 
	#OBJ_¥e„ºedDñivîyMëhod
 
OBJ_X509
,28L

	)

2160 
	#LN_¥e£¡©i⁄Addªss
 "¥e£¡©i⁄Addªss"

	)

2161 
	#NID_¥e£¡©i⁄Addªss
 873

	)

2162 
	#OBJ_¥e£¡©i⁄Addªss
 
OBJ_X509
,29L

	)

2164 
	#LN_suµ‹ãdAµliˇti⁄C⁄ãxt
 "suµ‹ãdAµliˇti⁄C⁄ãxt"

	)

2165 
	#NID_suµ‹ãdAµliˇti⁄C⁄ãxt
 874

	)

2166 
	#OBJ_suµ‹ãdAµliˇti⁄C⁄ãxt
 
OBJ_X509
,30L

	)

2168 
	#SN_membî
 "membî"

	)

2169 
	#NID_membî
 875

	)

2170 
	#OBJ_membî
 
OBJ_X509
,31L

	)

2172 
	#SN_ow√r
 "ow√r"

	)

2173 
	#NID_ow√r
 876

	)

2174 
	#OBJ_ow√r
 
OBJ_X509
,32L

	)

2176 
	#LN_rﬁeOccu∑¡
 "rﬁeOccu∑¡"

	)

2177 
	#NID_rﬁeOccu∑¡
 877

	)

2178 
	#OBJ_rﬁeOccu∑¡
 
OBJ_X509
,33L

	)

2180 
	#SN_£eAlso
 "£eAlso"

	)

2181 
	#NID_£eAlso
 878

	)

2182 
	#OBJ_£eAlso
 
OBJ_X509
,34L

	)

2184 
	#LN_u£rPassw‹d
 "u£rPassw‹d"

	)

2185 
	#NID_u£rPassw‹d
 879

	)

2186 
	#OBJ_u£rPassw‹d
 
OBJ_X509
,35L

	)

2188 
	#LN_u£rCîtifiˇã
 "u£rCîtifiˇã"

	)

2189 
	#NID_u£rCîtifiˇã
 880

	)

2190 
	#OBJ_u£rCîtifiˇã
 
OBJ_X509
,36L

	)

2192 
	#LN_cACîtifiˇã
 "cACîtifiˇã"

	)

2193 
	#NID_cACîtifiˇã
 881

	)

2194 
	#OBJ_cACîtifiˇã
 
OBJ_X509
,37L

	)

2196 
	#LN_auth‹ôyRevoˇti⁄Li°
 "auth‹ôyRevoˇti⁄Li°"

	)

2197 
	#NID_auth‹ôyRevoˇti⁄Li°
 882

	)

2198 
	#OBJ_auth‹ôyRevoˇti⁄Li°
 
OBJ_X509
,38L

	)

2200 
	#LN_˚πifiˇãRevoˇti⁄Li°
 "˚πifiˇãRevoˇti⁄Li°"

	)

2201 
	#NID_˚πifiˇãRevoˇti⁄Li°
 883

	)

2202 
	#OBJ_˚πifiˇãRevoˇti⁄Li°
 
OBJ_X509
,39L

	)

2204 
	#LN_¸ossCîtifiˇãPaú
 "¸ossCîtifiˇãPaú"

	)

2205 
	#NID_¸ossCîtifiˇãPaú
 884

	)

2206 
	#OBJ_¸ossCîtifiˇãPaú
 
OBJ_X509
,40L

	)

2208 
	#SN_«me
 "«me"

	)

2209 
	#LN_«me
 "«me"

	)

2210 
	#NID_«me
 173

	)

2211 
	#OBJ_«me
 
OBJ_X509
,41L

	)

2213 
	#SN_givíName
 "GN"

	)

2214 
	#LN_givíName
 "givíName"

	)

2215 
	#NID_givíName
 99

	)

2216 
	#OBJ_givíName
 
OBJ_X509
,42L

	)

2218 
	#SN_öôüls
 "öôüls"

	)

2219 
	#LN_öôüls
 "öôüls"

	)

2220 
	#NID_öôüls
 101

	)

2221 
	#OBJ_öôüls
 
OBJ_X509
,43L

	)

2223 
	#LN_gíî©i⁄QuÆifõr
 "gíî©i⁄QuÆifõr"

	)

2224 
	#NID_gíî©i⁄QuÆifõr
 509

	)

2225 
	#OBJ_gíî©i⁄QuÆifõr
 
OBJ_X509
,44L

	)

2227 
	#LN_x500UniqueIdítifõr
 "x500UniqueIdítifõr"

	)

2228 
	#NID_x500UniqueIdítifõr
 503

	)

2229 
	#OBJ_x500UniqueIdítifõr
 
OBJ_X509
,45L

	)

2231 
	#SN_dnQuÆifõr
 "dnQuÆifõr"

	)

2232 
	#LN_dnQuÆifõr
 "dnQuÆifõr"

	)

2233 
	#NID_dnQuÆifõr
 174

	)

2234 
	#OBJ_dnQuÆifõr
 
OBJ_X509
,46L

	)

2236 
	#LN_íh™˚dSórchGuide
 "íh™˚dSórchGuide"

	)

2237 
	#NID_íh™˚dSórchGuide
 885

	)

2238 
	#OBJ_íh™˚dSórchGuide
 
OBJ_X509
,47L

	)

2240 
	#LN_¥ŸocﬁInf‹m©i⁄
 "¥ŸocﬁInf‹m©i⁄"

	)

2241 
	#NID_¥ŸocﬁInf‹m©i⁄
 886

	)

2242 
	#OBJ_¥ŸocﬁInf‹m©i⁄
 
OBJ_X509
,48L

	)

2244 
	#LN_di°öguishedName
 "di°öguishedName"

	)

2245 
	#NID_di°öguishedName
 887

	)

2246 
	#OBJ_di°öguishedName
 
OBJ_X509
,49L

	)

2248 
	#LN_uniqueMembî
 "uniqueMembî"

	)

2249 
	#NID_uniqueMembî
 888

	)

2250 
	#OBJ_uniqueMembî
 
OBJ_X509
,50L

	)

2252 
	#LN_hou£Idítifõr
 "hou£Idítifõr"

	)

2253 
	#NID_hou£Idítifõr
 889

	)

2254 
	#OBJ_hou£Idítifõr
 
OBJ_X509
,51L

	)

2256 
	#LN_suµ‹ãdAlg‹ôhms
 "suµ‹ãdAlg‹ôhms"

	)

2257 
	#NID_suµ‹ãdAlg‹ôhms
 890

	)

2258 
	#OBJ_suµ‹ãdAlg‹ôhms
 
OBJ_X509
,52L

	)

2260 
	#LN_dñèRevoˇti⁄Li°
 "dñèRevoˇti⁄Li°"

	)

2261 
	#NID_dñèRevoˇti⁄Li°
 891

	)

2262 
	#OBJ_dñèRevoˇti⁄Li°
 
OBJ_X509
,53L

	)

2264 
	#SN_dmdName
 "dmdName"

	)

2265 
	#NID_dmdName
 892

	)

2266 
	#OBJ_dmdName
 
OBJ_X509
,54L

	)

2268 
	#LN_p£ud⁄ym
 "p£ud⁄ym"

	)

2269 
	#NID_p£ud⁄ym
 510

	)

2270 
	#OBJ_p£ud⁄ym
 
OBJ_X509
,65L

	)

2272 
	#SN_rﬁe
 "rﬁe"

	)

2273 
	#LN_rﬁe
 "rﬁe"

	)

2274 
	#NID_rﬁe
 400

	)

2275 
	#OBJ_rﬁe
 
OBJ_X509
,72L

	)

2277 
	#SN_X500Æg‹ôhms
 "X500Æg‹ôhms"

	)

2278 
	#LN_X500Æg‹ôhms
 "dúe˘‹y sîvi˚†-álg‹ôhms"

	)

2279 
	#NID_X500Æg‹ôhms
 378

	)

2280 
	#OBJ_X500Æg‹ôhms
 
OBJ_X500
,8L

	)

2282 
	#SN_rß
 "RSA"

	)

2283 
	#LN_rß
 "rß"

	)

2284 
	#NID_rß
 19

	)

2285 
	#OBJ_rß
 
OBJ_X500Æg‹ôhms
,1L,1L

	)

2287 
	#SN_mdc2WôhRSA
 "RSA-MDC2"

	)

2288 
	#LN_mdc2WôhRSA
 "mdc2WôhRSA"

	)

2289 
	#NID_mdc2WôhRSA
 96

	)

2290 
	#OBJ_mdc2WôhRSA
 
OBJ_X500Æg‹ôhms
,3L,100L

	)

2292 
	#SN_mdc2
 "MDC2"

	)

2293 
	#LN_mdc2
 "mdc2"

	)

2294 
	#NID_mdc2
 95

	)

2295 
	#OBJ_mdc2
 
OBJ_X500Æg‹ôhms
,3L,101L

	)

2297 
	#SN_id_˚
 "id-˚"

	)

2298 
	#NID_id_˚
 81

	)

2299 
	#OBJ_id_˚
 
OBJ_X500
,29L

	)

2301 
	#SN_subje˘_dúe˘‹y_©åibuãs
 "subje˘Dúe˘‹yAâribuãs"

	)

2302 
	#LN_subje˘_dúe˘‹y_©åibuãs
 "X509v3 Subje˘ Dúe˘‹y Aâribuãs"

	)

2303 
	#NID_subje˘_dúe˘‹y_©åibuãs
 769

	)

2304 
	#OBJ_subje˘_dúe˘‹y_©åibuãs
 
OBJ_id_˚
,9L

	)

2306 
	#SN_subje˘_key_idítifõr
 "subje˘KeyIdítifõr"

	)

2307 
	#LN_subje˘_key_idítifõr
 "X509v3 Subje˘ Key Idítifõr"

	)

2308 
	#NID_subje˘_key_idítifõr
 82

	)

2309 
	#OBJ_subje˘_key_idítifõr
 
OBJ_id_˚
,14L

	)

2311 
	#SN_key_ußge
 "keyUßge"

	)

2312 
	#LN_key_ußge
 "X509v3 Key Ußge"

	)

2313 
	#NID_key_ußge
 83

	)

2314 
	#OBJ_key_ußge
 
OBJ_id_˚
,15L

	)

2316 
	#SN_¥iv©e_key_ußge_≥riod
 "¥iv©eKeyUßgePîiod"

	)

2317 
	#LN_¥iv©e_key_ußge_≥riod
 "X509v3 Priv©êKey UßgêPîiod"

	)

2318 
	#NID_¥iv©e_key_ußge_≥riod
 84

	)

2319 
	#OBJ_¥iv©e_key_ußge_≥riod
 
OBJ_id_˚
,16L

	)

2321 
	#SN_subje˘_Æt_«me
 "subje˘A…Name"

	)

2322 
	#LN_subje˘_Æt_«me
 "X509v3 Subje˘ A…î«tivêName"

	)

2323 
	#NID_subje˘_Æt_«me
 85

	)

2324 
	#OBJ_subje˘_Æt_«me
 
OBJ_id_˚
,17L

	)

2326 
	#SN_issuî_Æt_«me
 "issuîA…Name"

	)

2327 
	#LN_issuî_Æt_«me
 "X509v3 Issuî A…î«tivêName"

	)

2328 
	#NID_issuî_Æt_«me
 86

	)

2329 
	#OBJ_issuî_Æt_«me
 
OBJ_id_˚
,18L

	)

2331 
	#SN_basic_c⁄°øöts
 "basicC⁄°øöts"

	)

2332 
	#LN_basic_c⁄°øöts
 "X509v3 Basi¯C⁄°øöts"

	)

2333 
	#NID_basic_c⁄°øöts
 87

	)

2334 
	#OBJ_basic_c⁄°øöts
 
OBJ_id_˚
,19L

	)

2336 
	#SN_¸l_numbî
 "¸lNumbî"

	)

2337 
	#LN_¸l_numbî
 "X509v3 CRL Numbî"

	)

2338 
	#NID_¸l_numbî
 88

	)

2339 
	#OBJ_¸l_numbî
 
OBJ_id_˚
,20L

	)

2341 
	#SN_¸l_ªas⁄
 "CRLRós⁄"

	)

2342 
	#LN_¸l_ªas⁄
 "X509v3 CRL Rós⁄ Code"

	)

2343 
	#NID_¸l_ªas⁄
 141

	)

2344 
	#OBJ_¸l_ªas⁄
 
OBJ_id_˚
,21L

	)

2346 
	#SN_övÆidôy_d©e
 "övÆidôyD©e"

	)

2347 
	#LN_övÆidôy_d©e
 "InvÆidôy D©e"

	)

2348 
	#NID_övÆidôy_d©e
 142

	)

2349 
	#OBJ_övÆidôy_d©e
 
OBJ_id_˚
,24L

	)

2351 
	#SN_dñè_¸l
 "dñèCRL"

	)

2352 
	#LN_dñè_¸l
 "X509v3 Dñè CRL Indiˇt‹"

	)

2353 
	#NID_dñè_¸l
 140

	)

2354 
	#OBJ_dñè_¸l
 
OBJ_id_˚
,27L

	)

2356 
	#SN_issuög_di°ributi⁄_poöt
 "issuögDi°ributi⁄Poöt"

	)

2357 
	#LN_issuög_di°ributi⁄_poöt
 "X509v3 Issuög Di°rubuti⁄ Poöt"

	)

2358 
	#NID_issuög_di°ributi⁄_poöt
 770

	)

2359 
	#OBJ_issuög_di°ributi⁄_poöt
 
OBJ_id_˚
,28L

	)

2361 
	#SN_˚πifiˇã_issuî
 "˚πifiˇãIssuî"

	)

2362 
	#LN_˚πifiˇã_issuî
 "X509v3 Cîtifiˇã Issuî"

	)

2363 
	#NID_˚πifiˇã_issuî
 771

	)

2364 
	#OBJ_˚πifiˇã_issuî
 
OBJ_id_˚
,29L

	)

2366 
	#SN_«me_c⁄°øöts
 "«meC⁄°øöts"

	)

2367 
	#LN_«me_c⁄°øöts
 "X509v3 NamêC⁄°øöts"

	)

2368 
	#NID_«me_c⁄°øöts
 666

	)

2369 
	#OBJ_«me_c⁄°øöts
 
OBJ_id_˚
,30L

	)

2371 
	#SN_¸l_di°ributi⁄_poöts
 "¸lDi°ributi⁄Poöts"

	)

2372 
	#LN_¸l_di°ributi⁄_poöts
 "X509v3 CRL Di°ributi⁄ Poöts"

	)

2373 
	#NID_¸l_di°ributi⁄_poöts
 103

	)

2374 
	#OBJ_¸l_di°ributi⁄_poöts
 
OBJ_id_˚
,31L

	)

2376 
	#SN_˚πifiˇã_pﬁicõs
 "˚πifiˇãPﬁicõs"

	)

2377 
	#LN_˚πifiˇã_pﬁicõs
 "X509v3 Cîtifiˇã Pﬁicõs"

	)

2378 
	#NID_˚πifiˇã_pﬁicõs
 89

	)

2379 
	#OBJ_˚πifiˇã_pﬁicõs
 
OBJ_id_˚
,32L

	)

2381 
	#SN_™y_pﬁicy
 "™yPﬁicy"

	)

2382 
	#LN_™y_pﬁicy
 "X509v3 Any Pﬁicy"

	)

2383 
	#NID_™y_pﬁicy
 746

	)

2384 
	#OBJ_™y_pﬁicy
 
OBJ_˚πifiˇã_pﬁicõs
,0L

	)

2386 
	#SN_pﬁicy_m≠pögs
 "pﬁicyM≠pögs"

	)

2387 
	#LN_pﬁicy_m≠pögs
 "X509v3 Pﬁicy M≠pögs"

	)

2388 
	#NID_pﬁicy_m≠pögs
 747

	)

2389 
	#OBJ_pﬁicy_m≠pögs
 
OBJ_id_˚
,33L

	)

2391 
	#SN_auth‹ôy_key_idítifõr
 "auth‹ôyKeyIdítifõr"

	)

2392 
	#LN_auth‹ôy_key_idítifõr
 "X509v3 Auth‹ôy Key Idítifõr"

	)

2393 
	#NID_auth‹ôy_key_idítifõr
 90

	)

2394 
	#OBJ_auth‹ôy_key_idítifõr
 
OBJ_id_˚
,35L

	)

2396 
	#SN_pﬁicy_c⁄°øöts
 "pﬁicyC⁄°øöts"

	)

2397 
	#LN_pﬁicy_c⁄°øöts
 "X509v3 Pﬁicy C⁄°øöts"

	)

2398 
	#NID_pﬁicy_c⁄°øöts
 401

	)

2399 
	#OBJ_pﬁicy_c⁄°øöts
 
OBJ_id_˚
,36L

	)

2401 
	#SN_ext_key_ußge
 "exãndedKeyUßge"

	)

2402 
	#LN_ext_key_ußge
 "X509v3 Exãnded Key Ußge"

	)

2403 
	#NID_ext_key_ußge
 126

	)

2404 
	#OBJ_ext_key_ußge
 
OBJ_id_˚
,37L

	)

2406 
	#SN_‰eshe°_¸l
 "‰eshe°CRL"

	)

2407 
	#LN_‰eshe°_¸l
 "X509v3 Fªshe° CRL"

	)

2408 
	#NID_‰eshe°_¸l
 857

	)

2409 
	#OBJ_‰eshe°_¸l
 
OBJ_id_˚
,46L

	)

2411 
	#SN_öhibô_™y_pﬁicy
 "öhibôAnyPﬁicy"

	)

2412 
	#LN_öhibô_™y_pﬁicy
 "X509v3 Inhibô Any Pﬁicy"

	)

2413 
	#NID_öhibô_™y_pﬁicy
 748

	)

2414 
	#OBJ_öhibô_™y_pﬁicy
 
OBJ_id_˚
,54L

	)

2416 
	#SN_èrgë_öf‹m©i⁄
 "èrgëInf‹m©i⁄"

	)

2417 
	#LN_èrgë_öf‹m©i⁄
 "X509v3 AC T¨gëög"

	)

2418 
	#NID_èrgë_öf‹m©i⁄
 402

	)

2419 
	#OBJ_èrgë_öf‹m©i⁄
 
OBJ_id_˚
,55L

	)

2421 
	#SN_no_ªv_avaû
 "noRevAvaû"

	)

2422 
	#LN_no_ªv_avaû
 "X509v3 NÿRevoˇti⁄ AvaûabÀ"

	)

2423 
	#NID_no_ªv_avaû
 403

	)

2424 
	#OBJ_no_ªv_avaû
 
OBJ_id_˚
,56L

	)

2426 
	#SN_™yExãndedKeyUßge
 "™yExãndedKeyUßge"

	)

2427 
	#LN_™yExãndedKeyUßge
 "Any Exãnded Key Ußge"

	)

2428 
	#NID_™yExãndedKeyUßge
 910

	)

2429 
	#OBJ_™yExãndedKeyUßge
 
OBJ_ext_key_ußge
,0L

	)

2431 
	#SN_√tsˇ≥
 "Nësˇ≥"

	)

2432 
	#LN_√tsˇ≥
 "Nësˇ≥ Communiˇti⁄†C‹p."

	)

2433 
	#NID_√tsˇ≥
 57

	)

2434 
	#OBJ_√tsˇ≥
 2L,16L,840L,1L,113730L

	)

2436 
	#SN_√tsˇ≥_˚π_exãnsi⁄
 "nsCîtExt"

	)

2437 
	#LN_√tsˇ≥_˚π_exãnsi⁄
 "Nësˇ≥ Cîtifiˇã Exãnsi⁄"

	)

2438 
	#NID_√tsˇ≥_˚π_exãnsi⁄
 58

	)

2439 
	#OBJ_√tsˇ≥_˚π_exãnsi⁄
 
OBJ_√tsˇ≥
,1L

	)

2441 
	#SN_√tsˇ≥_d©a_ty≥
 "nsD©aTy≥"

	)

2442 
	#LN_√tsˇ≥_d©a_ty≥
 "Nësˇ≥ D©®Ty≥"

	)

2443 
	#NID_√tsˇ≥_d©a_ty≥
 59

	)

2444 
	#OBJ_√tsˇ≥_d©a_ty≥
 
OBJ_√tsˇ≥
,2L

	)

2446 
	#SN_√tsˇ≥_˚π_ty≥
 "nsCîtTy≥"

	)

2447 
	#LN_√tsˇ≥_˚π_ty≥
 "Nësˇ≥ CîàTy≥"

	)

2448 
	#NID_√tsˇ≥_˚π_ty≥
 71

	)

2449 
	#OBJ_√tsˇ≥_˚π_ty≥
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,1L

	)

2451 
	#SN_√tsˇ≥_ba£_uæ
 "nsBa£Uæ"

	)

2452 
	#LN_√tsˇ≥_ba£_uæ
 "Nësˇ≥ Ba£ Uæ"

	)

2453 
	#NID_√tsˇ≥_ba£_uæ
 72

	)

2454 
	#OBJ_√tsˇ≥_ba£_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,2L

	)

2456 
	#SN_√tsˇ≥_ªvoˇti⁄_uæ
 "nsRevoˇti⁄Uæ"

	)

2457 
	#LN_√tsˇ≥_ªvoˇti⁄_uæ
 "Nësˇ≥ Revoˇti⁄ Uæ"

	)

2458 
	#NID_√tsˇ≥_ªvoˇti⁄_uæ
 73

	)

2459 
	#OBJ_√tsˇ≥_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,3L

	)

2461 
	#SN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "nsCaRevoˇti⁄Uæ"

	)

2462 
	#LN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "Nësˇ≥ CA Revoˇti⁄ Uæ"

	)

2463 
	#NID_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 74

	)

2464 
	#OBJ_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,4L

	)

2466 
	#SN_√tsˇ≥_ª√wÆ_uæ
 "nsRíewÆUæ"

	)

2467 
	#LN_√tsˇ≥_ª√wÆ_uæ
 "Nësˇ≥ RíewÆ Uæ"

	)

2468 
	#NID_√tsˇ≥_ª√wÆ_uæ
 75

	)

2469 
	#OBJ_√tsˇ≥_ª√wÆ_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,7L

	)

2471 
	#SN_√tsˇ≥_ˇ_pﬁicy_uæ
 "nsCaPﬁicyUæ"

	)

2472 
	#LN_√tsˇ≥_ˇ_pﬁicy_uæ
 "Nësˇ≥ CA Pﬁicy Uæ"

	)

2473 
	#NID_√tsˇ≥_ˇ_pﬁicy_uæ
 76

	)

2474 
	#OBJ_√tsˇ≥_ˇ_pﬁicy_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,8L

	)

2476 
	#SN_√tsˇ≥_s¶_£rvî_«me
 "nsS¶SîvîName"

	)

2477 
	#LN_√tsˇ≥_s¶_£rvî_«me
 "Nësˇ≥ SSL Sîvî Name"

	)

2478 
	#NID_√tsˇ≥_s¶_£rvî_«me
 77

	)

2479 
	#OBJ_√tsˇ≥_s¶_£rvî_«me
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,12L

	)

2481 
	#SN_√tsˇ≥_commít
 "nsCommít"

	)

2482 
	#LN_√tsˇ≥_commít
 "Nësˇ≥ Commít"

	)

2483 
	#NID_√tsˇ≥_commít
 78

	)

2484 
	#OBJ_√tsˇ≥_commít
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,13L

	)

2486 
	#SN_√tsˇ≥_˚π_£quí˚
 "nsCîtSequí˚"

	)

2487 
	#LN_√tsˇ≥_˚π_£quí˚
 "Nësˇ≥ Cîtifiˇã Sequí˚"

	)

2488 
	#NID_√tsˇ≥_˚π_£quí˚
 79

	)

2489 
	#OBJ_√tsˇ≥_˚π_£quí˚
 
OBJ_√tsˇ≥_d©a_ty≥
,5L

	)

2491 
	#SN_ns_sgc
 "nsSGC"

	)

2492 
	#LN_ns_sgc
 "Nësˇ≥ Sîvî G©ed Cry±o"

	)

2493 
	#NID_ns_sgc
 139

	)

2494 
	#OBJ_ns_sgc
 
OBJ_√tsˇ≥
,4L,1L

	)

2496 
	#SN_‹g
 "ORG"

	)

2497 
	#LN_‹g
 "‹g"

	)

2498 
	#NID_‹g
 379

	)

2499 
	#OBJ_‹g
 
OBJ_iso
,3L

	)

2501 
	#SN_dod
 "DOD"

	)

2502 
	#LN_dod
 "dod"

	)

2503 
	#NID_dod
 380

	)

2504 
	#OBJ_dod
 
OBJ_‹g
,6L

	)

2506 
	#SN_ü«
 "IANA"

	)

2507 
	#LN_ü«
 "ü«"

	)

2508 
	#NID_ü«
 381

	)

2509 
	#OBJ_ü«
 
OBJ_dod
,1L

	)

2511 
	#OBJ_öã∫ë
 
OBJ_ü«


	)

2513 
	#SN_Dúe˘‹y
 "dúe˘‹y"

	)

2514 
	#LN_Dúe˘‹y
 "Dúe˘‹y"

	)

2515 
	#NID_Dúe˘‹y
 382

	)

2516 
	#OBJ_Dúe˘‹y
 
OBJ_öã∫ë
,1L

	)

2518 
	#SN_M™agemít
 "mgmt"

	)

2519 
	#LN_M™agemít
 "M™agemít"

	)

2520 
	#NID_M™agemít
 383

	)

2521 
	#OBJ_M™agemít
 
OBJ_öã∫ë
,2L

	)

2523 
	#SN_Ex≥rimíèl
 "ex≥rimíèl"

	)

2524 
	#LN_Ex≥rimíèl
 "Ex≥rimíèl"

	)

2525 
	#NID_Ex≥rimíèl
 384

	)

2526 
	#OBJ_Ex≥rimíèl
 
OBJ_öã∫ë
,3L

	)

2528 
	#SN_Priv©e
 "¥iv©e"

	)

2529 
	#LN_Priv©e
 "Priv©e"

	)

2530 
	#NID_Priv©e
 385

	)

2531 
	#OBJ_Priv©e
 
OBJ_öã∫ë
,4L

	)

2533 
	#SN_Securôy
 "£curôy"

	)

2534 
	#LN_Securôy
 "Securôy"

	)

2535 
	#NID_Securôy
 386

	)

2536 
	#OBJ_Securôy
 
OBJ_öã∫ë
,5L

	)

2538 
	#SN_SNMPv2
 "¢mpv2"

	)

2539 
	#LN_SNMPv2
 "SNMPv2"

	)

2540 
	#NID_SNMPv2
 387

	)

2541 
	#OBJ_SNMPv2
 
OBJ_öã∫ë
,6L

	)

2543 
	#LN_Maû
 "Maû"

	)

2544 
	#NID_Maû
 388

	)

2545 
	#OBJ_Maû
 
OBJ_öã∫ë
,7L

	)

2547 
	#SN_E¡î¥i£s
 "íãΩri£s"

	)

2548 
	#LN_E¡î¥i£s
 "E¡î¥i£s"

	)

2549 
	#NID_E¡î¥i£s
 389

	)

2550 
	#OBJ_E¡î¥i£s
 
OBJ_Priv©e
,1L

	)

2552 
	#SN_dcObje˘
 "dcobje˘"

	)

2553 
	#LN_dcObje˘
 "dcObje˘"

	)

2554 
	#NID_dcObje˘
 390

	)

2555 
	#OBJ_dcObje˘
 
OBJ_E¡î¥i£s
,1466L,344L

	)

2557 
	#SN_mime_mhs
 "mime-mhs"

	)

2558 
	#LN_mime_mhs
 "MIME MHS"

	)

2559 
	#NID_mime_mhs
 504

	)

2560 
	#OBJ_mime_mhs
 
OBJ_Maû
,1L

	)

2562 
	#SN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2563 
	#LN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2564 
	#NID_mime_mhs_hódögs
 505

	)

2565 
	#OBJ_mime_mhs_hódögs
 
OBJ_mime_mhs
,1L

	)

2567 
	#SN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2568 
	#LN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2569 
	#NID_mime_mhs_bodõs
 506

	)

2570 
	#OBJ_mime_mhs_bodõs
 
OBJ_mime_mhs
,2L

	)

2572 
	#SN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2573 
	#LN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2574 
	#NID_id_hex_∑πül_mesßge
 507

	)

2575 
	#OBJ_id_hex_∑πül_mesßge
 
OBJ_mime_mhs_hódögs
,1L

	)

2577 
	#SN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2578 
	#LN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2579 
	#NID_id_hex_mu…ù¨t_mesßge
 508

	)

2580 
	#OBJ_id_hex_mu…ù¨t_mesßge
 
OBJ_mime_mhs_hódögs
,2L

	)

2582 
	#SN_æe_com¥essi⁄
 "RLE"

	)

2583 
	#LN_æe_com¥essi⁄
 "ru¿Àngth com¥essi⁄"

	)

2584 
	#NID_æe_com¥essi⁄
 124

	)

2585 
	#OBJ_æe_com¥essi⁄
 1L,1L,1L,1L,666L,1L

	)

2587 
	#SN_zlib_com¥essi⁄
 "ZLIB"

	)

2588 
	#LN_zlib_com¥essi⁄
 "zlib com¥essi⁄"

	)

2589 
	#NID_zlib_com¥essi⁄
 125

	)

2590 
	#OBJ_zlib_com¥essi⁄
 
OBJ_id_smime_Æg
,8L

	)

2592 
	#OBJ_cs‹
 2L,16L,840L,1L,101L,3L

	)

2594 
	#OBJ_ni°Alg‹ôhms
 
OBJ_cs‹
,4L

	)

2596 
	#OBJ_´s
 
OBJ_ni°Alg‹ôhms
,1L

	)

2598 
	#SN_´s_128_ecb
 "AES-128-ECB"

	)

2599 
	#LN_´s_128_ecb
 "´s-128-ecb"

	)

2600 
	#NID_´s_128_ecb
 418

	)

2601 
	#OBJ_´s_128_ecb
 
OBJ_´s
,1L

	)

2603 
	#SN_´s_128_cbc
 "AES-128-CBC"

	)

2604 
	#LN_´s_128_cbc
 "´s-128-cbc"

	)

2605 
	#NID_´s_128_cbc
 419

	)

2606 
	#OBJ_´s_128_cbc
 
OBJ_´s
,2L

	)

2608 
	#SN_´s_128_ofb128
 "AES-128-OFB"

	)

2609 
	#LN_´s_128_ofb128
 "´s-128-ofb"

	)

2610 
	#NID_´s_128_ofb128
 420

	)

2611 
	#OBJ_´s_128_ofb128
 
OBJ_´s
,3L

	)

2613 
	#SN_´s_128_cfb128
 "AES-128-CFB"

	)

2614 
	#LN_´s_128_cfb128
 "´s-128-cfb"

	)

2615 
	#NID_´s_128_cfb128
 421

	)

2616 
	#OBJ_´s_128_cfb128
 
OBJ_´s
,4L

	)

2618 
	#SN_id_´s128_wøp
 "id-´s128-wøp"

	)

2619 
	#NID_id_´s128_wøp
 788

	)

2620 
	#OBJ_id_´s128_wøp
 
OBJ_´s
,5L

	)

2622 
	#SN_´s_128_gcm
 "id-´s128-GCM"

	)

2623 
	#LN_´s_128_gcm
 "´s-128-gcm"

	)

2624 
	#NID_´s_128_gcm
 895

	)

2625 
	#OBJ_´s_128_gcm
 
OBJ_´s
,6L

	)

2627 
	#SN_´s_128_ccm
 "id-´s128-CCM"

	)

2628 
	#LN_´s_128_ccm
 "´s-128-ccm"

	)

2629 
	#NID_´s_128_ccm
 896

	)

2630 
	#OBJ_´s_128_ccm
 
OBJ_´s
,7L

	)

2632 
	#SN_id_´s128_wøp_∑d
 "id-´s128-wøp-∑d"

	)

2633 
	#NID_id_´s128_wøp_∑d
 897

	)

2634 
	#OBJ_id_´s128_wøp_∑d
 
OBJ_´s
,8L

	)

2636 
	#SN_´s_192_ecb
 "AES-192-ECB"

	)

2637 
	#LN_´s_192_ecb
 "´s-192-ecb"

	)

2638 
	#NID_´s_192_ecb
 422

	)

2639 
	#OBJ_´s_192_ecb
 
OBJ_´s
,21L

	)

2641 
	#SN_´s_192_cbc
 "AES-192-CBC"

	)

2642 
	#LN_´s_192_cbc
 "´s-192-cbc"

	)

2643 
	#NID_´s_192_cbc
 423

	)

2644 
	#OBJ_´s_192_cbc
 
OBJ_´s
,22L

	)

2646 
	#SN_´s_192_ofb128
 "AES-192-OFB"

	)

2647 
	#LN_´s_192_ofb128
 "´s-192-ofb"

	)

2648 
	#NID_´s_192_ofb128
 424

	)

2649 
	#OBJ_´s_192_ofb128
 
OBJ_´s
,23L

	)

2651 
	#SN_´s_192_cfb128
 "AES-192-CFB"

	)

2652 
	#LN_´s_192_cfb128
 "´s-192-cfb"

	)

2653 
	#NID_´s_192_cfb128
 425

	)

2654 
	#OBJ_´s_192_cfb128
 
OBJ_´s
,24L

	)

2656 
	#SN_id_´s192_wøp
 "id-´s192-wøp"

	)

2657 
	#NID_id_´s192_wøp
 789

	)

2658 
	#OBJ_id_´s192_wøp
 
OBJ_´s
,25L

	)

2660 
	#SN_´s_192_gcm
 "id-´s192-GCM"

	)

2661 
	#LN_´s_192_gcm
 "´s-192-gcm"

	)

2662 
	#NID_´s_192_gcm
 898

	)

2663 
	#OBJ_´s_192_gcm
 
OBJ_´s
,26L

	)

2665 
	#SN_´s_192_ccm
 "id-´s192-CCM"

	)

2666 
	#LN_´s_192_ccm
 "´s-192-ccm"

	)

2667 
	#NID_´s_192_ccm
 899

	)

2668 
	#OBJ_´s_192_ccm
 
OBJ_´s
,27L

	)

2670 
	#SN_id_´s192_wøp_∑d
 "id-´s192-wøp-∑d"

	)

2671 
	#NID_id_´s192_wøp_∑d
 900

	)

2672 
	#OBJ_id_´s192_wøp_∑d
 
OBJ_´s
,28L

	)

2674 
	#SN_´s_256_ecb
 "AES-256-ECB"

	)

2675 
	#LN_´s_256_ecb
 "´s-256-ecb"

	)

2676 
	#NID_´s_256_ecb
 426

	)

2677 
	#OBJ_´s_256_ecb
 
OBJ_´s
,41L

	)

2679 
	#SN_´s_256_cbc
 "AES-256-CBC"

	)

2680 
	#LN_´s_256_cbc
 "´s-256-cbc"

	)

2681 
	#NID_´s_256_cbc
 427

	)

2682 
	#OBJ_´s_256_cbc
 
OBJ_´s
,42L

	)

2684 
	#SN_´s_256_ofb128
 "AES-256-OFB"

	)

2685 
	#LN_´s_256_ofb128
 "´s-256-ofb"

	)

2686 
	#NID_´s_256_ofb128
 428

	)

2687 
	#OBJ_´s_256_ofb128
 
OBJ_´s
,43L

	)

2689 
	#SN_´s_256_cfb128
 "AES-256-CFB"

	)

2690 
	#LN_´s_256_cfb128
 "´s-256-cfb"

	)

2691 
	#NID_´s_256_cfb128
 429

	)

2692 
	#OBJ_´s_256_cfb128
 
OBJ_´s
,44L

	)

2694 
	#SN_id_´s256_wøp
 "id-´s256-wøp"

	)

2695 
	#NID_id_´s256_wøp
 790

	)

2696 
	#OBJ_id_´s256_wøp
 
OBJ_´s
,45L

	)

2698 
	#SN_´s_256_gcm
 "id-´s256-GCM"

	)

2699 
	#LN_´s_256_gcm
 "´s-256-gcm"

	)

2700 
	#NID_´s_256_gcm
 901

	)

2701 
	#OBJ_´s_256_gcm
 
OBJ_´s
,46L

	)

2703 
	#SN_´s_256_ccm
 "id-´s256-CCM"

	)

2704 
	#LN_´s_256_ccm
 "´s-256-ccm"

	)

2705 
	#NID_´s_256_ccm
 902

	)

2706 
	#OBJ_´s_256_ccm
 
OBJ_´s
,47L

	)

2708 
	#SN_id_´s256_wøp_∑d
 "id-´s256-wøp-∑d"

	)

2709 
	#NID_id_´s256_wøp_∑d
 903

	)

2710 
	#OBJ_id_´s256_wøp_∑d
 
OBJ_´s
,48L

	)

2712 
	#SN_´s_128_cfb1
 "AES-128-CFB1"

	)

2713 
	#LN_´s_128_cfb1
 "´s-128-cfb1"

	)

2714 
	#NID_´s_128_cfb1
 650

	)

2716 
	#SN_´s_192_cfb1
 "AES-192-CFB1"

	)

2717 
	#LN_´s_192_cfb1
 "´s-192-cfb1"

	)

2718 
	#NID_´s_192_cfb1
 651

	)

2720 
	#SN_´s_256_cfb1
 "AES-256-CFB1"

	)

2721 
	#LN_´s_256_cfb1
 "´s-256-cfb1"

	)

2722 
	#NID_´s_256_cfb1
 652

	)

2724 
	#SN_´s_128_cfb8
 "AES-128-CFB8"

	)

2725 
	#LN_´s_128_cfb8
 "´s-128-cfb8"

	)

2726 
	#NID_´s_128_cfb8
 653

	)

2728 
	#SN_´s_192_cfb8
 "AES-192-CFB8"

	)

2729 
	#LN_´s_192_cfb8
 "´s-192-cfb8"

	)

2730 
	#NID_´s_192_cfb8
 654

	)

2732 
	#SN_´s_256_cfb8
 "AES-256-CFB8"

	)

2733 
	#LN_´s_256_cfb8
 "´s-256-cfb8"

	)

2734 
	#NID_´s_256_cfb8
 655

	)

2736 
	#SN_´s_128_˘r
 "AES-128-CTR"

	)

2737 
	#LN_´s_128_˘r
 "´s-128-˘r"

	)

2738 
	#NID_´s_128_˘r
 904

	)

2740 
	#SN_´s_192_˘r
 "AES-192-CTR"

	)

2741 
	#LN_´s_192_˘r
 "´s-192-˘r"

	)

2742 
	#NID_´s_192_˘r
 905

	)

2744 
	#SN_´s_256_˘r
 "AES-256-CTR"

	)

2745 
	#LN_´s_256_˘r
 "´s-256-˘r"

	)

2746 
	#NID_´s_256_˘r
 906

	)

2748 
	#SN_´s_128_xts
 "AES-128-XTS"

	)

2749 
	#LN_´s_128_xts
 "´s-128-xts"

	)

2750 
	#NID_´s_128_xts
 913

	)

2752 
	#SN_´s_256_xts
 "AES-256-XTS"

	)

2753 
	#LN_´s_256_xts
 "´s-256-xts"

	)

2754 
	#NID_´s_256_xts
 914

	)

2756 
	#SN_des_cfb1
 "DES-CFB1"

	)

2757 
	#LN_des_cfb1
 "des-cfb1"

	)

2758 
	#NID_des_cfb1
 656

	)

2760 
	#SN_des_cfb8
 "DES-CFB8"

	)

2761 
	#LN_des_cfb8
 "des-cfb8"

	)

2762 
	#NID_des_cfb8
 657

	)

2764 
	#SN_des_ede3_cfb1
 "DES-EDE3-CFB1"

	)

2765 
	#LN_des_ede3_cfb1
 "des-ede3-cfb1"

	)

2766 
	#NID_des_ede3_cfb1
 658

	)

2768 
	#SN_des_ede3_cfb8
 "DES-EDE3-CFB8"

	)

2769 
	#LN_des_ede3_cfb8
 "des-ede3-cfb8"

	)

2770 
	#NID_des_ede3_cfb8
 659

	)

2772 
	#OBJ_ni°_hashÆgs
 
OBJ_ni°Alg‹ôhms
,2L

	)

2774 
	#SN_sha256
 "SHA256"

	)

2775 
	#LN_sha256
 "sha256"

	)

2776 
	#NID_sha256
 672

	)

2777 
	#OBJ_sha256
 
OBJ_ni°_hashÆgs
,1L

	)

2779 
	#SN_sha384
 "SHA384"

	)

2780 
	#LN_sha384
 "sha384"

	)

2781 
	#NID_sha384
 673

	)

2782 
	#OBJ_sha384
 
OBJ_ni°_hashÆgs
,2L

	)

2784 
	#SN_sha512
 "SHA512"

	)

2785 
	#LN_sha512
 "sha512"

	)

2786 
	#NID_sha512
 674

	)

2787 
	#OBJ_sha512
 
OBJ_ni°_hashÆgs
,3L

	)

2789 
	#SN_sha224
 "SHA224"

	)

2790 
	#LN_sha224
 "sha224"

	)

2791 
	#NID_sha224
 675

	)

2792 
	#OBJ_sha224
 
OBJ_ni°_hashÆgs
,4L

	)

2794 
	#OBJ_dß_wôh_sha2
 
OBJ_ni°Alg‹ôhms
,3L

	)

2796 
	#SN_dß_wôh_SHA224
 "dß_wôh_SHA224"

	)

2797 
	#NID_dß_wôh_SHA224
 802

	)

2798 
	#OBJ_dß_wôh_SHA224
 
OBJ_dß_wôh_sha2
,1L

	)

2800 
	#SN_dß_wôh_SHA256
 "dß_wôh_SHA256"

	)

2801 
	#NID_dß_wôh_SHA256
 803

	)

2802 
	#OBJ_dß_wôh_SHA256
 
OBJ_dß_wôh_sha2
,2L

	)

2804 
	#SN_hﬁd_ö°ru˘i⁄_code
 "hﬁdIn°ru˘i⁄Code"

	)

2805 
	#LN_hﬁd_ö°ru˘i⁄_code
 "Hﬁd In°ru˘i⁄ Code"

	)

2806 
	#NID_hﬁd_ö°ru˘i⁄_code
 430

	)

2807 
	#OBJ_hﬁd_ö°ru˘i⁄_code
 
OBJ_id_˚
,23L

	)

2809 
	#OBJ_hﬁdIn°ru˘i⁄
 
OBJ_X9_57
,2L

	)

2811 
	#SN_hﬁd_ö°ru˘i⁄_n⁄e
 "hﬁdIn°ru˘i⁄N⁄e"

	)

2812 
	#LN_hﬁd_ö°ru˘i⁄_n⁄e
 "Hﬁd In°ru˘i⁄ N⁄e"

	)

2813 
	#NID_hﬁd_ö°ru˘i⁄_n⁄e
 431

	)

2814 
	#OBJ_hﬁd_ö°ru˘i⁄_n⁄e
 
OBJ_hﬁdIn°ru˘i⁄
,1L

	)

2816 
	#SN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "hﬁdIn°ru˘i⁄CÆlIssuî"

	)

2817 
	#LN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "Hﬁd In°ru˘i⁄ CÆ»Issuî"

	)

2818 
	#NID_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 432

	)

2819 
	#OBJ_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 
OBJ_hﬁdIn°ru˘i⁄
,2L

	)

2821 
	#SN_hﬁd_ö°ru˘i⁄_ªje˘
 "hﬁdIn°ru˘i⁄Reje˘"

	)

2822 
	#LN_hﬁd_ö°ru˘i⁄_ªje˘
 "Hﬁd In°ru˘i⁄ Reje˘"

	)

2823 
	#NID_hﬁd_ö°ru˘i⁄_ªje˘
 433

	)

2824 
	#OBJ_hﬁd_ö°ru˘i⁄_ªje˘
 
OBJ_hﬁdIn°ru˘i⁄
,3L

	)

2826 
	#SN_d©a
 "d©a"

	)

2827 
	#NID_d©a
 434

	)

2828 
	#OBJ_d©a
 
OBJ_ôu_t
,9L

	)

2830 
	#SN_pss
 "pss"

	)

2831 
	#NID_pss
 435

	)

2832 
	#OBJ_pss
 
OBJ_d©a
,2342L

	)

2834 
	#SN_u˛
 "u˛"

	)

2835 
	#NID_u˛
 436

	)

2836 
	#OBJ_u˛
 
OBJ_pss
,19200300L

	)

2838 
	#SN_pûŸ
 "pûŸ"

	)

2839 
	#NID_pûŸ
 437

	)

2840 
	#OBJ_pûŸ
 
OBJ_u˛
,100L

	)

2842 
	#LN_pûŸAâribuãTy≥
 "pûŸAâribuãTy≥"

	)

2843 
	#NID_pûŸAâribuãTy≥
 438

	)

2844 
	#OBJ_pûŸAâribuãTy≥
 
OBJ_pûŸ
,1L

	)

2846 
	#LN_pûŸAâribuãSy¡ax
 "pûŸAâribuãSy¡ax"

	)

2847 
	#NID_pûŸAâribuãSy¡ax
 439

	)

2848 
	#OBJ_pûŸAâribuãSy¡ax
 
OBJ_pûŸ
,3L

	)

2850 
	#LN_pûŸObje˘Cœss
 "pûŸObje˘Cœss"

	)

2851 
	#NID_pûŸObje˘Cœss
 440

	)

2852 
	#OBJ_pûŸObje˘Cœss
 
OBJ_pûŸ
,4L

	)

2854 
	#LN_pûŸGroups
 "pûŸGroups"

	)

2855 
	#NID_pûŸGroups
 441

	)

2856 
	#OBJ_pûŸGroups
 
OBJ_pûŸ
,10L

	)

2858 
	#LN_iA5SåögSy¡ax
 "iA5SåögSy¡ax"

	)

2859 
	#NID_iA5SåögSy¡ax
 442

	)

2860 
	#OBJ_iA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,4L

	)

2862 
	#LN_ˇ£Ign‹eIA5SåögSy¡ax
 "ˇ£Ign‹eIA5SåögSy¡ax"

	)

2863 
	#NID_ˇ£Ign‹eIA5SåögSy¡ax
 443

	)

2864 
	#OBJ_ˇ£Ign‹eIA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,5L

	)

2866 
	#LN_pûŸObje˘
 "pûŸObje˘"

	)

2867 
	#NID_pûŸObje˘
 444

	)

2868 
	#OBJ_pûŸObje˘
 
OBJ_pûŸObje˘Cœss
,3L

	)

2870 
	#LN_pûŸPîs⁄
 "pûŸPîs⁄"

	)

2871 
	#NID_pûŸPîs⁄
 445

	)

2872 
	#OBJ_pûŸPîs⁄
 
OBJ_pûŸObje˘Cœss
,4L

	)

2874 
	#SN_accou¡
 "accou¡"

	)

2875 
	#NID_accou¡
 446

	)

2876 
	#OBJ_accou¡
 
OBJ_pûŸObje˘Cœss
,5L

	)

2878 
	#SN_documít
 "documít"

	)

2879 
	#NID_documít
 447

	)

2880 
	#OBJ_documít
 
OBJ_pûŸObje˘Cœss
,6L

	)

2882 
	#SN_room
 "room"

	)

2883 
	#NID_room
 448

	)

2884 
	#OBJ_room
 
OBJ_pûŸObje˘Cœss
,7L

	)

2886 
	#LN_documítSîõs
 "documítSîõs"

	)

2887 
	#NID_documítSîõs
 449

	)

2888 
	#OBJ_documítSîõs
 
OBJ_pûŸObje˘Cœss
,9L

	)

2890 
	#SN_Domaö
 "domaö"

	)

2891 
	#LN_Domaö
 "Domaö"

	)

2892 
	#NID_Domaö
 392

	)

2893 
	#OBJ_Domaö
 
OBJ_pûŸObje˘Cœss
,13L

	)

2895 
	#LN_rFC822loˇlP¨t
 "rFC822loˇlP¨t"

	)

2896 
	#NID_rFC822loˇlP¨t
 450

	)

2897 
	#OBJ_rFC822loˇlP¨t
 
OBJ_pûŸObje˘Cœss
,14L

	)

2899 
	#LN_dNSDomaö
 "dNSDomaö"

	)

2900 
	#NID_dNSDomaö
 451

	)

2901 
	#OBJ_dNSDomaö
 
OBJ_pûŸObje˘Cœss
,15L

	)

2903 
	#LN_domaöRñ©edObje˘
 "domaöRñ©edObje˘"

	)

2904 
	#NID_domaöRñ©edObje˘
 452

	)

2905 
	#OBJ_domaöRñ©edObje˘
 
OBJ_pûŸObje˘Cœss
,17L

	)

2907 
	#LN_‰õndlyCou¡ry
 "‰õndlyCou¡ry"

	)

2908 
	#NID_‰õndlyCou¡ry
 453

	)

2909 
	#OBJ_‰õndlyCou¡ry
 
OBJ_pûŸObje˘Cœss
,18L

	)

2911 
	#LN_sim∂eSecurôyObje˘
 "sim∂eSecurôyObje˘"

	)

2912 
	#NID_sim∂eSecurôyObje˘
 454

	)

2913 
	#OBJ_sim∂eSecurôyObje˘
 
OBJ_pûŸObje˘Cœss
,19L

	)

2915 
	#LN_pûŸOrg™iz©i⁄
 "pûŸOrg™iz©i⁄"

	)

2916 
	#NID_pûŸOrg™iz©i⁄
 455

	)

2917 
	#OBJ_pûŸOrg™iz©i⁄
 
OBJ_pûŸObje˘Cœss
,20L

	)

2919 
	#LN_pûŸDSA
 "pûŸDSA"

	)

2920 
	#NID_pûŸDSA
 456

	)

2921 
	#OBJ_pûŸDSA
 
OBJ_pûŸObje˘Cœss
,21L

	)

2923 
	#LN_quÆôyLabñÀdD©a
 "quÆôyLabñÀdD©a"

	)

2924 
	#NID_quÆôyLabñÀdD©a
 457

	)

2925 
	#OBJ_quÆôyLabñÀdD©a
 
OBJ_pûŸObje˘Cœss
,22L

	)

2927 
	#SN_u£rId
 "UID"

	)

2928 
	#LN_u£rId
 "u£rId"

	)

2929 
	#NID_u£rId
 458

	)

2930 
	#OBJ_u£rId
 
OBJ_pûŸAâribuãTy≥
,1L

	)

2932 
	#LN_ãxtEncodedORAddªss
 "ãxtEncodedORAddªss"

	)

2933 
	#NID_ãxtEncodedORAddªss
 459

	)

2934 
	#OBJ_ãxtEncodedORAddªss
 
OBJ_pûŸAâribuãTy≥
,2L

	)

2936 
	#SN_rfc822Maûbox
 "maû"

	)

2937 
	#LN_rfc822Maûbox
 "rfc822Maûbox"

	)

2938 
	#NID_rfc822Maûbox
 460

	)

2939 
	#OBJ_rfc822Maûbox
 
OBJ_pûŸAâribuãTy≥
,3L

	)

2941 
	#SN_öfo
 "öfo"

	)

2942 
	#NID_öfo
 461

	)

2943 
	#OBJ_öfo
 
OBJ_pûŸAâribuãTy≥
,4L

	)

2945 
	#LN_ÁvourôeDrök
 "ÁvourôeDrök"

	)

2946 
	#NID_ÁvourôeDrök
 462

	)

2947 
	#OBJ_ÁvourôeDrök
 
OBJ_pûŸAâribuãTy≥
,5L

	)

2949 
	#LN_roomNumbî
 "roomNumbî"

	)

2950 
	#NID_roomNumbî
 463

	)

2951 
	#OBJ_roomNumbî
 
OBJ_pûŸAâribuãTy≥
,6L

	)

2953 
	#SN_phŸo
 "phŸo"

	)

2954 
	#NID_phŸo
 464

	)

2955 
	#OBJ_phŸo
 
OBJ_pûŸAâribuãTy≥
,7L

	)

2957 
	#LN_u£rCœss
 "u£rCœss"

	)

2958 
	#NID_u£rCœss
 465

	)

2959 
	#OBJ_u£rCœss
 
OBJ_pûŸAâribuãTy≥
,8L

	)

2961 
	#SN_ho°
 "ho°"

	)

2962 
	#NID_ho°
 466

	)

2963 
	#OBJ_ho°
 
OBJ_pûŸAâribuãTy≥
,9L

	)

2965 
	#SN_m™agî
 "m™agî"

	)

2966 
	#NID_m™agî
 467

	)

2967 
	#OBJ_m™agî
 
OBJ_pûŸAâribuãTy≥
,10L

	)

2969 
	#LN_documítIdítifõr
 "documítIdítifõr"

	)

2970 
	#NID_documítIdítifõr
 468

	)

2971 
	#OBJ_documítIdítifõr
 
OBJ_pûŸAâribuãTy≥
,11L

	)

2973 
	#LN_documítTôÀ
 "documítTôÀ"

	)

2974 
	#NID_documítTôÀ
 469

	)

2975 
	#OBJ_documítTôÀ
 
OBJ_pûŸAâribuãTy≥
,12L

	)

2977 
	#LN_documítVîsi⁄
 "documítVîsi⁄"

	)

2978 
	#NID_documítVîsi⁄
 470

	)

2979 
	#OBJ_documítVîsi⁄
 
OBJ_pûŸAâribuãTy≥
,13L

	)

2981 
	#LN_documítAuth‹
 "documítAuth‹"

	)

2982 
	#NID_documítAuth‹
 471

	)

2983 
	#OBJ_documítAuth‹
 
OBJ_pûŸAâribuãTy≥
,14L

	)

2985 
	#LN_documítLoˇti⁄
 "documítLoˇti⁄"

	)

2986 
	#NID_documítLoˇti⁄
 472

	)

2987 
	#OBJ_documítLoˇti⁄
 
OBJ_pûŸAâribuãTy≥
,15L

	)

2989 
	#LN_homeTñïh⁄eNumbî
 "homeTñïh⁄eNumbî"

	)

2990 
	#NID_homeTñïh⁄eNumbî
 473

	)

2991 
	#OBJ_homeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,20L

	)

2993 
	#SN_£¸ë¨y
 "£¸ë¨y"

	)

2994 
	#NID_£¸ë¨y
 474

	)

2995 
	#OBJ_£¸ë¨y
 
OBJ_pûŸAâribuãTy≥
,21L

	)

2997 
	#LN_ŸhîMaûbox
 "ŸhîMaûbox"

	)

2998 
	#NID_ŸhîMaûbox
 475

	)

2999 
	#OBJ_ŸhîMaûbox
 
OBJ_pûŸAâribuãTy≥
,22L

	)

3001 
	#LN_œ°ModifõdTime
 "œ°ModifõdTime"

	)

3002 
	#NID_œ°ModifõdTime
 476

	)

3003 
	#OBJ_œ°ModifõdTime
 
OBJ_pûŸAâribuãTy≥
,23L

	)

3005 
	#LN_œ°ModifõdBy
 "œ°ModifõdBy"

	)

3006 
	#NID_œ°ModifõdBy
 477

	)

3007 
	#OBJ_œ°ModifõdBy
 
OBJ_pûŸAâribuãTy≥
,24L

	)

3009 
	#SN_domaöComp⁄ít
 "DC"

	)

3010 
	#LN_domaöComp⁄ít
 "domaöComp⁄ít"

	)

3011 
	#NID_domaöComp⁄ít
 391

	)

3012 
	#OBJ_domaöComp⁄ít
 
OBJ_pûŸAâribuãTy≥
,25L

	)

3014 
	#LN_aRec‹d
 "aRec‹d"

	)

3015 
	#NID_aRec‹d
 478

	)

3016 
	#OBJ_aRec‹d
 
OBJ_pûŸAâribuãTy≥
,26L

	)

3018 
	#LN_pûŸAâribuãTy≥27
 "pûŸAâribuãTy≥27"

	)

3019 
	#NID_pûŸAâribuãTy≥27
 479

	)

3020 
	#OBJ_pûŸAâribuãTy≥27
 
OBJ_pûŸAâribuãTy≥
,27L

	)

3022 
	#LN_mXRec‹d
 "mXRec‹d"

	)

3023 
	#NID_mXRec‹d
 480

	)

3024 
	#OBJ_mXRec‹d
 
OBJ_pûŸAâribuãTy≥
,28L

	)

3026 
	#LN_nSRec‹d
 "nSRec‹d"

	)

3027 
	#NID_nSRec‹d
 481

	)

3028 
	#OBJ_nSRec‹d
 
OBJ_pûŸAâribuãTy≥
,29L

	)

3030 
	#LN_sOARec‹d
 "sOARec‹d"

	)

3031 
	#NID_sOARec‹d
 482

	)

3032 
	#OBJ_sOARec‹d
 
OBJ_pûŸAâribuãTy≥
,30L

	)

3034 
	#LN_cNAMERec‹d
 "cNAMERec‹d"

	)

3035 
	#NID_cNAMERec‹d
 483

	)

3036 
	#OBJ_cNAMERec‹d
 
OBJ_pûŸAâribuãTy≥
,31L

	)

3038 
	#LN_assocüãdDomaö
 "assocüãdDomaö"

	)

3039 
	#NID_assocüãdDomaö
 484

	)

3040 
	#OBJ_assocüãdDomaö
 
OBJ_pûŸAâribuãTy≥
,37L

	)

3042 
	#LN_assocüãdName
 "assocüãdName"

	)

3043 
	#NID_assocüãdName
 485

	)

3044 
	#OBJ_assocüãdName
 
OBJ_pûŸAâribuãTy≥
,38L

	)

3046 
	#LN_homePo°ÆAddªss
 "homePo°ÆAddªss"

	)

3047 
	#NID_homePo°ÆAddªss
 486

	)

3048 
	#OBJ_homePo°ÆAddªss
 
OBJ_pûŸAâribuãTy≥
,39L

	)

3050 
	#LN_≥rs⁄ÆTôÀ
 "≥rs⁄ÆTôÀ"

	)

3051 
	#NID_≥rs⁄ÆTôÀ
 487

	)

3052 
	#OBJ_≥rs⁄ÆTôÀ
 
OBJ_pûŸAâribuãTy≥
,40L

	)

3054 
	#LN_mobûeTñïh⁄eNumbî
 "mobûeTñïh⁄eNumbî"

	)

3055 
	#NID_mobûeTñïh⁄eNumbî
 488

	)

3056 
	#OBJ_mobûeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,41L

	)

3058 
	#LN_∑gîTñïh⁄eNumbî
 "∑gîTñïh⁄eNumbî"

	)

3059 
	#NID_∑gîTñïh⁄eNumbî
 489

	)

3060 
	#OBJ_∑gîTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,42L

	)

3062 
	#LN_‰õndlyCou¡ryName
 "‰õndlyCou¡ryName"

	)

3063 
	#NID_‰õndlyCou¡ryName
 490

	)

3064 
	#OBJ_‰õndlyCou¡ryName
 
OBJ_pûŸAâribuãTy≥
,43L

	)

3066 
	#LN_‹g™iz©i⁄ÆSètus
 "‹g™iz©i⁄ÆSètus"

	)

3067 
	#NID_‹g™iz©i⁄ÆSètus
 491

	)

3068 
	#OBJ_‹g™iz©i⁄ÆSètus
 
OBJ_pûŸAâribuãTy≥
,45L

	)

3070 
	#LN_j™ëMaûbox
 "j™ëMaûbox"

	)

3071 
	#NID_j™ëMaûbox
 492

	)

3072 
	#OBJ_j™ëMaûbox
 
OBJ_pûŸAâribuãTy≥
,46L

	)

3074 
	#LN_maûPª„ªn˚O±i⁄
 "maûPª„ªn˚O±i⁄"

	)

3075 
	#NID_maûPª„ªn˚O±i⁄
 493

	)

3076 
	#OBJ_maûPª„ªn˚O±i⁄
 
OBJ_pûŸAâribuãTy≥
,47L

	)

3078 
	#LN_buûdögName
 "buûdögName"

	)

3079 
	#NID_buûdögName
 494

	)

3080 
	#OBJ_buûdögName
 
OBJ_pûŸAâribuãTy≥
,48L

	)

3082 
	#LN_dSAQuÆôy
 "dSAQuÆôy"

	)

3083 
	#NID_dSAQuÆôy
 495

	)

3084 
	#OBJ_dSAQuÆôy
 
OBJ_pûŸAâribuãTy≥
,49L

	)

3086 
	#LN_sögÀLevñQuÆôy
 "sögÀLevñQuÆôy"

	)

3087 
	#NID_sögÀLevñQuÆôy
 496

	)

3088 
	#OBJ_sögÀLevñQuÆôy
 
OBJ_pûŸAâribuãTy≥
,50L

	)

3090 
	#LN_subåìMöimumQuÆôy
 "subåìMöimumQuÆôy"

	)

3091 
	#NID_subåìMöimumQuÆôy
 497

	)

3092 
	#OBJ_subåìMöimumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,51L

	)

3094 
	#LN_subåìMaximumQuÆôy
 "subåìMaximumQuÆôy"

	)

3095 
	#NID_subåìMaximumQuÆôy
 498

	)

3096 
	#OBJ_subåìMaximumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,52L

	)

3098 
	#LN_≥rs⁄ÆSig«tuª
 "≥rs⁄ÆSig«tuª"

	)

3099 
	#NID_≥rs⁄ÆSig«tuª
 499

	)

3100 
	#OBJ_≥rs⁄ÆSig«tuª
 
OBJ_pûŸAâribuãTy≥
,53L

	)

3102 
	#LN_dITRedúe˘
 "dITRedúe˘"

	)

3103 
	#NID_dITRedúe˘
 500

	)

3104 
	#OBJ_dITRedúe˘
 
OBJ_pûŸAâribuãTy≥
,54L

	)

3106 
	#SN_audio
 "audio"

	)

3107 
	#NID_audio
 501

	)

3108 
	#OBJ_audio
 
OBJ_pûŸAâribuãTy≥
,55L

	)

3110 
	#LN_documítPublishî
 "documítPublishî"

	)

3111 
	#NID_documítPublishî
 502

	)

3112 
	#OBJ_documítPublishî
 
OBJ_pûŸAâribuãTy≥
,56L

	)

3114 
	#SN_id_£t
 "id-£t"

	)

3115 
	#LN_id_£t
 "Secuª EÀ˘r⁄i¯Tønß˘i⁄s"

	)

3116 
	#NID_id_£t
 512

	)

3117 
	#OBJ_id_£t
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,42L

	)

3119 
	#SN_£t_˘y≥
 "£t-˘y≥"

	)

3120 
	#LN_£t_˘y≥
 "c⁄ã¡Åy≥s"

	)

3121 
	#NID_£t_˘y≥
 513

	)

3122 
	#OBJ_£t_˘y≥
 
OBJ_id_£t
,0L

	)

3124 
	#SN_£t_msgExt
 "£t-msgExt"

	)

3125 
	#LN_£t_msgExt
 "mesßgêexãnsi⁄s"

	)

3126 
	#NID_£t_msgExt
 514

	)

3127 
	#OBJ_£t_msgExt
 
OBJ_id_£t
,1L

	)

3129 
	#SN_£t_©å
 "£t-©å"

	)

3130 
	#NID_£t_©å
 515

	)

3131 
	#OBJ_£t_©å
 
OBJ_id_£t
,3L

	)

3133 
	#SN_£t_pﬁicy
 "£t-pﬁicy"

	)

3134 
	#NID_£t_pﬁicy
 516

	)

3135 
	#OBJ_£t_pﬁicy
 
OBJ_id_£t
,5L

	)

3137 
	#SN_£t_˚πExt
 "£t-˚πExt"

	)

3138 
	#LN_£t_˚πExt
 "˚πifiˇãÉxãnsi⁄s"

	)

3139 
	#NID_£t_˚πExt
 517

	)

3140 
	#OBJ_£t_˚πExt
 
OBJ_id_£t
,7L

	)

3142 
	#SN_£t_bønd
 "£t-bønd"

	)

3143 
	#NID_£t_bønd
 518

	)

3144 
	#OBJ_£t_bønd
 
OBJ_id_£t
,8L

	)

3146 
	#SN_£t˘_PAND©a
 "£t˘-PAND©a"

	)

3147 
	#NID_£t˘_PAND©a
 519

	)

3148 
	#OBJ_£t˘_PAND©a
 
OBJ_£t_˘y≥
,0L

	)

3150 
	#SN_£t˘_PANTokí
 "£t˘-PANTokí"

	)

3151 
	#NID_£t˘_PANTokí
 520

	)

3152 
	#OBJ_£t˘_PANTokí
 
OBJ_£t_˘y≥
,1L

	)

3154 
	#SN_£t˘_PANO∆y
 "£t˘-PANO∆y"

	)

3155 
	#NID_£t˘_PANO∆y
 521

	)

3156 
	#OBJ_£t˘_PANO∆y
 
OBJ_£t_˘y≥
,2L

	)

3158 
	#SN_£t˘_OID©a
 "£t˘-OID©a"

	)

3159 
	#NID_£t˘_OID©a
 522

	)

3160 
	#OBJ_£t˘_OID©a
 
OBJ_£t_˘y≥
,3L

	)

3162 
	#SN_£t˘_PI
 "£t˘-PI"

	)

3163 
	#NID_£t˘_PI
 523

	)

3164 
	#OBJ_£t˘_PI
 
OBJ_£t_˘y≥
,4L

	)

3166 
	#SN_£t˘_PID©a
 "£t˘-PID©a"

	)

3167 
	#NID_£t˘_PID©a
 524

	)

3168 
	#OBJ_£t˘_PID©a
 
OBJ_£t_˘y≥
,5L

	)

3170 
	#SN_£t˘_PID©aUnsig√d
 "£t˘-PID©aUnsig√d"

	)

3171 
	#NID_£t˘_PID©aUnsig√d
 525

	)

3172 
	#OBJ_£t˘_PID©aUnsig√d
 
OBJ_£t_˘y≥
,6L

	)

3174 
	#SN_£t˘_HODI≈ut
 "£t˘-HODI≈ut"

	)

3175 
	#NID_£t˘_HODI≈ut
 526

	)

3176 
	#OBJ_£t˘_HODI≈ut
 
OBJ_£t_˘y≥
,7L

	)

3178 
	#SN_£t˘_AuthResBaggage
 "£t˘-AuthResBaggage"

	)

3179 
	#NID_£t˘_AuthResBaggage
 527

	)

3180 
	#OBJ_£t˘_AuthResBaggage
 
OBJ_£t_˘y≥
,8L

	)

3182 
	#SN_£t˘_AuthRevReqBaggage
 "£t˘-AuthRevReqBaggage"

	)

3183 
	#NID_£t˘_AuthRevReqBaggage
 528

	)

3184 
	#OBJ_£t˘_AuthRevReqBaggage
 
OBJ_£t_˘y≥
,9L

	)

3186 
	#SN_£t˘_AuthRevResBaggage
 "£t˘-AuthRevResBaggage"

	)

3187 
	#NID_£t˘_AuthRevResBaggage
 529

	)

3188 
	#OBJ_£t˘_AuthRevResBaggage
 
OBJ_£t_˘y≥
,10L

	)

3190 
	#SN_£t˘_C≠TokíSeq
 "£t˘-C≠TokíSeq"

	)

3191 
	#NID_£t˘_C≠TokíSeq
 530

	)

3192 
	#OBJ_£t˘_C≠TokíSeq
 
OBJ_£t_˘y≥
,11L

	)

3194 
	#SN_£t˘_PInôResD©a
 "£t˘-PInôResD©a"

	)

3195 
	#NID_£t˘_PInôResD©a
 531

	)

3196 
	#OBJ_£t˘_PInôResD©a
 
OBJ_£t_˘y≥
,12L

	)

3198 
	#SN_£t˘_PI_TBS
 "£t˘-PI-TBS"

	)

3199 
	#NID_£t˘_PI_TBS
 532

	)

3200 
	#OBJ_£t˘_PI_TBS
 
OBJ_£t_˘y≥
,13L

	)

3202 
	#SN_£t˘_PResD©a
 "£t˘-PResD©a"

	)

3203 
	#NID_£t˘_PResD©a
 533

	)

3204 
	#OBJ_£t˘_PResD©a
 
OBJ_£t_˘y≥
,14L

	)

3206 
	#SN_£t˘_AuthReqTBS
 "£t˘-AuthReqTBS"

	)

3207 
	#NID_£t˘_AuthReqTBS
 534

	)

3208 
	#OBJ_£t˘_AuthReqTBS
 
OBJ_£t_˘y≥
,16L

	)

3210 
	#SN_£t˘_AuthResTBS
 "£t˘-AuthResTBS"

	)

3211 
	#NID_£t˘_AuthResTBS
 535

	)

3212 
	#OBJ_£t˘_AuthResTBS
 
OBJ_£t_˘y≥
,17L

	)

3214 
	#SN_£t˘_AuthResTBSX
 "£t˘-AuthResTBSX"

	)

3215 
	#NID_£t˘_AuthResTBSX
 536

	)

3216 
	#OBJ_£t˘_AuthResTBSX
 
OBJ_£t_˘y≥
,18L

	)

3218 
	#SN_£t˘_AuthTokíTBS
 "£t˘-AuthTokíTBS"

	)

3219 
	#NID_£t˘_AuthTokíTBS
 537

	)

3220 
	#OBJ_£t˘_AuthTokíTBS
 
OBJ_£t_˘y≥
,19L

	)

3222 
	#SN_£t˘_C≠TokíD©a
 "£t˘-C≠TokíD©a"

	)

3223 
	#NID_£t˘_C≠TokíD©a
 538

	)

3224 
	#OBJ_£t˘_C≠TokíD©a
 
OBJ_£t_˘y≥
,20L

	)

3226 
	#SN_£t˘_C≠TokíTBS
 "£t˘-C≠TokíTBS"

	)

3227 
	#NID_£t˘_C≠TokíTBS
 539

	)

3228 
	#OBJ_£t˘_C≠TokíTBS
 
OBJ_£t_˘y≥
,21L

	)

3230 
	#SN_£t˘_AcqC¨dCodeMsg
 "£t˘-AcqC¨dCodeMsg"

	)

3231 
	#NID_£t˘_AcqC¨dCodeMsg
 540

	)

3232 
	#OBJ_£t˘_AcqC¨dCodeMsg
 
OBJ_£t_˘y≥
,22L

	)

3234 
	#SN_£t˘_AuthRevReqTBS
 "£t˘-AuthRevReqTBS"

	)

3235 
	#NID_£t˘_AuthRevReqTBS
 541

	)

3236 
	#OBJ_£t˘_AuthRevReqTBS
 
OBJ_£t_˘y≥
,23L

	)

3238 
	#SN_£t˘_AuthRevResD©a
 "£t˘-AuthRevResD©a"

	)

3239 
	#NID_£t˘_AuthRevResD©a
 542

	)

3240 
	#OBJ_£t˘_AuthRevResD©a
 
OBJ_£t_˘y≥
,24L

	)

3242 
	#SN_£t˘_AuthRevResTBS
 "£t˘-AuthRevResTBS"

	)

3243 
	#NID_£t˘_AuthRevResTBS
 543

	)

3244 
	#OBJ_£t˘_AuthRevResTBS
 
OBJ_£t_˘y≥
,25L

	)

3246 
	#SN_£t˘_C≠ReqTBS
 "£t˘-C≠ReqTBS"

	)

3247 
	#NID_£t˘_C≠ReqTBS
 544

	)

3248 
	#OBJ_£t˘_C≠ReqTBS
 
OBJ_£t_˘y≥
,26L

	)

3250 
	#SN_£t˘_C≠ReqTBSX
 "£t˘-C≠ReqTBSX"

	)

3251 
	#NID_£t˘_C≠ReqTBSX
 545

	)

3252 
	#OBJ_£t˘_C≠ReqTBSX
 
OBJ_£t_˘y≥
,27L

	)

3254 
	#SN_£t˘_C≠ResD©a
 "£t˘-C≠ResD©a"

	)

3255 
	#NID_£t˘_C≠ResD©a
 546

	)

3256 
	#OBJ_£t˘_C≠ResD©a
 
OBJ_£t_˘y≥
,28L

	)

3258 
	#SN_£t˘_C≠RevReqTBS
 "£t˘-C≠RevReqTBS"

	)

3259 
	#NID_£t˘_C≠RevReqTBS
 547

	)

3260 
	#OBJ_£t˘_C≠RevReqTBS
 
OBJ_£t_˘y≥
,29L

	)

3262 
	#SN_£t˘_C≠RevReqTBSX
 "£t˘-C≠RevReqTBSX"

	)

3263 
	#NID_£t˘_C≠RevReqTBSX
 548

	)

3264 
	#OBJ_£t˘_C≠RevReqTBSX
 
OBJ_£t_˘y≥
,30L

	)

3266 
	#SN_£t˘_C≠RevResD©a
 "£t˘-C≠RevResD©a"

	)

3267 
	#NID_£t˘_C≠RevResD©a
 549

	)

3268 
	#OBJ_£t˘_C≠RevResD©a
 
OBJ_£t_˘y≥
,31L

	)

3270 
	#SN_£t˘_CªdReqTBS
 "£t˘-CªdReqTBS"

	)

3271 
	#NID_£t˘_CªdReqTBS
 550

	)

3272 
	#OBJ_£t˘_CªdReqTBS
 
OBJ_£t_˘y≥
,32L

	)

3274 
	#SN_£t˘_CªdReqTBSX
 "£t˘-CªdReqTBSX"

	)

3275 
	#NID_£t˘_CªdReqTBSX
 551

	)

3276 
	#OBJ_£t˘_CªdReqTBSX
 
OBJ_£t_˘y≥
,33L

	)

3278 
	#SN_£t˘_CªdResD©a
 "£t˘-CªdResD©a"

	)

3279 
	#NID_£t˘_CªdResD©a
 552

	)

3280 
	#OBJ_£t˘_CªdResD©a
 
OBJ_£t_˘y≥
,34L

	)

3282 
	#SN_£t˘_CªdRevReqTBS
 "£t˘-CªdRevReqTBS"

	)

3283 
	#NID_£t˘_CªdRevReqTBS
 553

	)

3284 
	#OBJ_£t˘_CªdRevReqTBS
 
OBJ_£t_˘y≥
,35L

	)

3286 
	#SN_£t˘_CªdRevReqTBSX
 "£t˘-CªdRevReqTBSX"

	)

3287 
	#NID_£t˘_CªdRevReqTBSX
 554

	)

3288 
	#OBJ_£t˘_CªdRevReqTBSX
 
OBJ_£t_˘y≥
,36L

	)

3290 
	#SN_£t˘_CªdRevResD©a
 "£t˘-CªdRevResD©a"

	)

3291 
	#NID_£t˘_CªdRevResD©a
 555

	)

3292 
	#OBJ_£t˘_CªdRevResD©a
 
OBJ_£t_˘y≥
,37L

	)

3294 
	#SN_£t˘_PCîtReqD©a
 "£t˘-PCîtReqD©a"

	)

3295 
	#NID_£t˘_PCîtReqD©a
 556

	)

3296 
	#OBJ_£t˘_PCîtReqD©a
 
OBJ_£t_˘y≥
,38L

	)

3298 
	#SN_£t˘_PCîtResTBS
 "£t˘-PCîtResTBS"

	)

3299 
	#NID_£t˘_PCîtResTBS
 557

	)

3300 
	#OBJ_£t˘_PCîtResTBS
 
OBJ_£t_˘y≥
,39L

	)

3302 
	#SN_£t˘_B©chAdmöReqD©a
 "£t˘-B©chAdmöReqD©a"

	)

3303 
	#NID_£t˘_B©chAdmöReqD©a
 558

	)

3304 
	#OBJ_£t˘_B©chAdmöReqD©a
 
OBJ_£t_˘y≥
,40L

	)

3306 
	#SN_£t˘_B©chAdmöResD©a
 "£t˘-B©chAdmöResD©a"

	)

3307 
	#NID_£t˘_B©chAdmöResD©a
 559

	)

3308 
	#OBJ_£t˘_B©chAdmöResD©a
 
OBJ_£t_˘y≥
,41L

	)

3310 
	#SN_£t˘_C¨dCInôResTBS
 "£t˘-C¨dCInôResTBS"

	)

3311 
	#NID_£t˘_C¨dCInôResTBS
 560

	)

3312 
	#OBJ_£t˘_C¨dCInôResTBS
 
OBJ_£t_˘y≥
,42L

	)

3314 
	#SN_£t˘_MeAqCInôResTBS
 "£t˘-MeAqCInôResTBS"

	)

3315 
	#NID_£t˘_MeAqCInôResTBS
 561

	)

3316 
	#OBJ_£t˘_MeAqCInôResTBS
 
OBJ_£t_˘y≥
,43L

	)

3318 
	#SN_£t˘_RegF‹mResTBS
 "£t˘-RegF‹mResTBS"

	)

3319 
	#NID_£t˘_RegF‹mResTBS
 562

	)

3320 
	#OBJ_£t˘_RegF‹mResTBS
 
OBJ_£t_˘y≥
,44L

	)

3322 
	#SN_£t˘_CîtReqD©a
 "£t˘-CîtReqD©a"

	)

3323 
	#NID_£t˘_CîtReqD©a
 563

	)

3324 
	#OBJ_£t˘_CîtReqD©a
 
OBJ_£t_˘y≥
,45L

	)

3326 
	#SN_£t˘_CîtReqTBS
 "£t˘-CîtReqTBS"

	)

3327 
	#NID_£t˘_CîtReqTBS
 564

	)

3328 
	#OBJ_£t˘_CîtReqTBS
 
OBJ_£t_˘y≥
,46L

	)

3330 
	#SN_£t˘_CîtResD©a
 "£t˘-CîtResD©a"

	)

3331 
	#NID_£t˘_CîtResD©a
 565

	)

3332 
	#OBJ_£t˘_CîtResD©a
 
OBJ_£t_˘y≥
,47L

	)

3334 
	#SN_£t˘_CîtInqReqTBS
 "£t˘-CîtInqReqTBS"

	)

3335 
	#NID_£t˘_CîtInqReqTBS
 566

	)

3336 
	#OBJ_£t˘_CîtInqReqTBS
 
OBJ_£t_˘y≥
,48L

	)

3338 
	#SN_£t˘_Eº‹TBS
 "£t˘-Eº‹TBS"

	)

3339 
	#NID_£t˘_Eº‹TBS
 567

	)

3340 
	#OBJ_£t˘_Eº‹TBS
 
OBJ_£t_˘y≥
,49L

	)

3342 
	#SN_£t˘_PIDuÆSig√dTBE
 "£t˘-PIDuÆSig√dTBE"

	)

3343 
	#NID_£t˘_PIDuÆSig√dTBE
 568

	)

3344 
	#OBJ_£t˘_PIDuÆSig√dTBE
 
OBJ_£t_˘y≥
,50L

	)

3346 
	#SN_£t˘_PIUnsig√dTBE
 "£t˘-PIUnsig√dTBE"

	)

3347 
	#NID_£t˘_PIUnsig√dTBE
 569

	)

3348 
	#OBJ_£t˘_PIUnsig√dTBE
 
OBJ_£t_˘y≥
,51L

	)

3350 
	#SN_£t˘_AuthReqTBE
 "£t˘-AuthReqTBE"

	)

3351 
	#NID_£t˘_AuthReqTBE
 570

	)

3352 
	#OBJ_£t˘_AuthReqTBE
 
OBJ_£t_˘y≥
,52L

	)

3354 
	#SN_£t˘_AuthResTBE
 "£t˘-AuthResTBE"

	)

3355 
	#NID_£t˘_AuthResTBE
 571

	)

3356 
	#OBJ_£t˘_AuthResTBE
 
OBJ_£t_˘y≥
,53L

	)

3358 
	#SN_£t˘_AuthResTBEX
 "£t˘-AuthResTBEX"

	)

3359 
	#NID_£t˘_AuthResTBEX
 572

	)

3360 
	#OBJ_£t˘_AuthResTBEX
 
OBJ_£t_˘y≥
,54L

	)

3362 
	#SN_£t˘_AuthTokíTBE
 "£t˘-AuthTokíTBE"

	)

3363 
	#NID_£t˘_AuthTokíTBE
 573

	)

3364 
	#OBJ_£t˘_AuthTokíTBE
 
OBJ_£t_˘y≥
,55L

	)

3366 
	#SN_£t˘_C≠TokíTBE
 "£t˘-C≠TokíTBE"

	)

3367 
	#NID_£t˘_C≠TokíTBE
 574

	)

3368 
	#OBJ_£t˘_C≠TokíTBE
 
OBJ_£t_˘y≥
,56L

	)

3370 
	#SN_£t˘_C≠TokíTBEX
 "£t˘-C≠TokíTBEX"

	)

3371 
	#NID_£t˘_C≠TokíTBEX
 575

	)

3372 
	#OBJ_£t˘_C≠TokíTBEX
 
OBJ_£t_˘y≥
,57L

	)

3374 
	#SN_£t˘_AcqC¨dCodeMsgTBE
 "£t˘-AcqC¨dCodeMsgTBE"

	)

3375 
	#NID_£t˘_AcqC¨dCodeMsgTBE
 576

	)

3376 
	#OBJ_£t˘_AcqC¨dCodeMsgTBE
 
OBJ_£t_˘y≥
,58L

	)

3378 
	#SN_£t˘_AuthRevReqTBE
 "£t˘-AuthRevReqTBE"

	)

3379 
	#NID_£t˘_AuthRevReqTBE
 577

	)

3380 
	#OBJ_£t˘_AuthRevReqTBE
 
OBJ_£t_˘y≥
,59L

	)

3382 
	#SN_£t˘_AuthRevResTBE
 "£t˘-AuthRevResTBE"

	)

3383 
	#NID_£t˘_AuthRevResTBE
 578

	)

3384 
	#OBJ_£t˘_AuthRevResTBE
 
OBJ_£t_˘y≥
,60L

	)

3386 
	#SN_£t˘_AuthRevResTBEB
 "£t˘-AuthRevResTBEB"

	)

3387 
	#NID_£t˘_AuthRevResTBEB
 579

	)

3388 
	#OBJ_£t˘_AuthRevResTBEB
 
OBJ_£t_˘y≥
,61L

	)

3390 
	#SN_£t˘_C≠ReqTBE
 "£t˘-C≠ReqTBE"

	)

3391 
	#NID_£t˘_C≠ReqTBE
 580

	)

3392 
	#OBJ_£t˘_C≠ReqTBE
 
OBJ_£t_˘y≥
,62L

	)

3394 
	#SN_£t˘_C≠ReqTBEX
 "£t˘-C≠ReqTBEX"

	)

3395 
	#NID_£t˘_C≠ReqTBEX
 581

	)

3396 
	#OBJ_£t˘_C≠ReqTBEX
 
OBJ_£t_˘y≥
,63L

	)

3398 
	#SN_£t˘_C≠ResTBE
 "£t˘-C≠ResTBE"

	)

3399 
	#NID_£t˘_C≠ResTBE
 582

	)

3400 
	#OBJ_£t˘_C≠ResTBE
 
OBJ_£t_˘y≥
,64L

	)

3402 
	#SN_£t˘_C≠RevReqTBE
 "£t˘-C≠RevReqTBE"

	)

3403 
	#NID_£t˘_C≠RevReqTBE
 583

	)

3404 
	#OBJ_£t˘_C≠RevReqTBE
 
OBJ_£t_˘y≥
,65L

	)

3406 
	#SN_£t˘_C≠RevReqTBEX
 "£t˘-C≠RevReqTBEX"

	)

3407 
	#NID_£t˘_C≠RevReqTBEX
 584

	)

3408 
	#OBJ_£t˘_C≠RevReqTBEX
 
OBJ_£t_˘y≥
,66L

	)

3410 
	#SN_£t˘_C≠RevResTBE
 "£t˘-C≠RevResTBE"

	)

3411 
	#NID_£t˘_C≠RevResTBE
 585

	)

3412 
	#OBJ_£t˘_C≠RevResTBE
 
OBJ_£t_˘y≥
,67L

	)

3414 
	#SN_£t˘_CªdReqTBE
 "£t˘-CªdReqTBE"

	)

3415 
	#NID_£t˘_CªdReqTBE
 586

	)

3416 
	#OBJ_£t˘_CªdReqTBE
 
OBJ_£t_˘y≥
,68L

	)

3418 
	#SN_£t˘_CªdReqTBEX
 "£t˘-CªdReqTBEX"

	)

3419 
	#NID_£t˘_CªdReqTBEX
 587

	)

3420 
	#OBJ_£t˘_CªdReqTBEX
 
OBJ_£t_˘y≥
,69L

	)

3422 
	#SN_£t˘_CªdResTBE
 "£t˘-CªdResTBE"

	)

3423 
	#NID_£t˘_CªdResTBE
 588

	)

3424 
	#OBJ_£t˘_CªdResTBE
 
OBJ_£t_˘y≥
,70L

	)

3426 
	#SN_£t˘_CªdRevReqTBE
 "£t˘-CªdRevReqTBE"

	)

3427 
	#NID_£t˘_CªdRevReqTBE
 589

	)

3428 
	#OBJ_£t˘_CªdRevReqTBE
 
OBJ_£t_˘y≥
,71L

	)

3430 
	#SN_£t˘_CªdRevReqTBEX
 "£t˘-CªdRevReqTBEX"

	)

3431 
	#NID_£t˘_CªdRevReqTBEX
 590

	)

3432 
	#OBJ_£t˘_CªdRevReqTBEX
 
OBJ_£t_˘y≥
,72L

	)

3434 
	#SN_£t˘_CªdRevResTBE
 "£t˘-CªdRevResTBE"

	)

3435 
	#NID_£t˘_CªdRevResTBE
 591

	)

3436 
	#OBJ_£t˘_CªdRevResTBE
 
OBJ_£t_˘y≥
,73L

	)

3438 
	#SN_£t˘_B©chAdmöReqTBE
 "£t˘-B©chAdmöReqTBE"

	)

3439 
	#NID_£t˘_B©chAdmöReqTBE
 592

	)

3440 
	#OBJ_£t˘_B©chAdmöReqTBE
 
OBJ_£t_˘y≥
,74L

	)

3442 
	#SN_£t˘_B©chAdmöResTBE
 "£t˘-B©chAdmöResTBE"

	)

3443 
	#NID_£t˘_B©chAdmöResTBE
 593

	)

3444 
	#OBJ_£t˘_B©chAdmöResTBE
 
OBJ_£t_˘y≥
,75L

	)

3446 
	#SN_£t˘_RegF‹mReqTBE
 "£t˘-RegF‹mReqTBE"

	)

3447 
	#NID_£t˘_RegF‹mReqTBE
 594

	)

3448 
	#OBJ_£t˘_RegF‹mReqTBE
 
OBJ_£t_˘y≥
,76L

	)

3450 
	#SN_£t˘_CîtReqTBE
 "£t˘-CîtReqTBE"

	)

3451 
	#NID_£t˘_CîtReqTBE
 595

	)

3452 
	#OBJ_£t˘_CîtReqTBE
 
OBJ_£t_˘y≥
,77L

	)

3454 
	#SN_£t˘_CîtReqTBEX
 "£t˘-CîtReqTBEX"

	)

3455 
	#NID_£t˘_CîtReqTBEX
 596

	)

3456 
	#OBJ_£t˘_CîtReqTBEX
 
OBJ_£t_˘y≥
,78L

	)

3458 
	#SN_£t˘_CîtResTBE
 "£t˘-CîtResTBE"

	)

3459 
	#NID_£t˘_CîtResTBE
 597

	)

3460 
	#OBJ_£t˘_CîtResTBE
 
OBJ_£t_˘y≥
,79L

	)

3462 
	#SN_£t˘_CRLNŸifiˇti⁄TBS
 "£t˘-CRLNŸifiˇti⁄TBS"

	)

3463 
	#NID_£t˘_CRLNŸifiˇti⁄TBS
 598

	)

3464 
	#OBJ_£t˘_CRLNŸifiˇti⁄TBS
 
OBJ_£t_˘y≥
,80L

	)

3466 
	#SN_£t˘_CRLNŸifiˇti⁄ResTBS
 "£t˘-CRLNŸifiˇti⁄ResTBS"

	)

3467 
	#NID_£t˘_CRLNŸifiˇti⁄ResTBS
 599

	)

3468 
	#OBJ_£t˘_CRLNŸifiˇti⁄ResTBS
 
OBJ_£t_˘y≥
,81L

	)

3470 
	#SN_£t˘_BCIDi°ributi⁄TBS
 "£t˘-BCIDi°ributi⁄TBS"

	)

3471 
	#NID_£t˘_BCIDi°ributi⁄TBS
 600

	)

3472 
	#OBJ_£t˘_BCIDi°ributi⁄TBS
 
OBJ_£t_˘y≥
,82L

	)

3474 
	#SN_£ãxt_gíCry±
 "£ãxt-gíCry±"

	)

3475 
	#LN_£ãxt_gíCry±
 "gíîi¯¸y±ogøm"

	)

3476 
	#NID_£ãxt_gíCry±
 601

	)

3477 
	#OBJ_£ãxt_gíCry±
 
OBJ_£t_msgExt
,1L

	)

3479 
	#SN_£ãxt_miAuth
 "£ãxt-miAuth"

	)

3480 
	#LN_£ãxt_miAuth
 "mîch™àöôüãdáuth"

	)

3481 
	#NID_£ãxt_miAuth
 602

	)

3482 
	#OBJ_£ãxt_miAuth
 
OBJ_£t_msgExt
,3L

	)

3484 
	#SN_£ãxt_pöSecuª
 "£ãxt-pöSecuª"

	)

3485 
	#NID_£ãxt_pöSecuª
 603

	)

3486 
	#OBJ_£ãxt_pöSecuª
 
OBJ_£t_msgExt
,4L

	)

3488 
	#SN_£ãxt_pöAny
 "£ãxt-pöAny"

	)

3489 
	#NID_£ãxt_pöAny
 604

	)

3490 
	#OBJ_£ãxt_pöAny
 
OBJ_£t_msgExt
,5L

	)

3492 
	#SN_£ãxt_åack2
 "£ãxt-åack2"

	)

3493 
	#NID_£ãxt_åack2
 605

	)

3494 
	#OBJ_£ãxt_åack2
 
OBJ_£t_msgExt
,7L

	)

3496 
	#SN_£ãxt_cv
 "£ãxt-cv"

	)

3497 
	#LN_£ãxt_cv
 "addôi⁄Æ vîifiˇti⁄"

	)

3498 
	#NID_£ãxt_cv
 606

	)

3499 
	#OBJ_£ãxt_cv
 
OBJ_£t_msgExt
,8L

	)

3501 
	#SN_£t_pﬁicy_roŸ
 "£t-pﬁicy-roŸ"

	)

3502 
	#NID_£t_pﬁicy_roŸ
 607

	)

3503 
	#OBJ_£t_pﬁicy_roŸ
 
OBJ_£t_pﬁicy
,0L

	)

3505 
	#SN_£tCext_hashedRoŸ
 "£tCext-hashedRoŸ"

	)

3506 
	#NID_£tCext_hashedRoŸ
 608

	)

3507 
	#OBJ_£tCext_hashedRoŸ
 
OBJ_£t_˚πExt
,0L

	)

3509 
	#SN_£tCext_˚πTy≥
 "£tCext-˚πTy≥"

	)

3510 
	#NID_£tCext_˚πTy≥
 609

	)

3511 
	#OBJ_£tCext_˚πTy≥
 
OBJ_£t_˚πExt
,1L

	)

3513 
	#SN_£tCext_mîchD©a
 "£tCext-mîchD©a"

	)

3514 
	#NID_£tCext_mîchD©a
 610

	)

3515 
	#OBJ_£tCext_mîchD©a
 
OBJ_£t_˚πExt
,2L

	)

3517 
	#SN_£tCext_cCîtRequúed
 "£tCext-cCîtRequúed"

	)

3518 
	#NID_£tCext_cCîtRequúed
 611

	)

3519 
	#OBJ_£tCext_cCîtRequúed
 
OBJ_£t_˚πExt
,3L

	)

3521 
	#SN_£tCext_tu¬ñög
 "£tCext-tu¬ñög"

	)

3522 
	#NID_£tCext_tu¬ñög
 612

	)

3523 
	#OBJ_£tCext_tu¬ñög
 
OBJ_£t_˚πExt
,4L

	)

3525 
	#SN_£tCext_£tExt
 "£tCext-£tExt"

	)

3526 
	#NID_£tCext_£tExt
 613

	)

3527 
	#OBJ_£tCext_£tExt
 
OBJ_£t_˚πExt
,5L

	)

3529 
	#SN_£tCext_£tQuÆf
 "£tCext-£tQuÆf"

	)

3530 
	#NID_£tCext_£tQuÆf
 614

	)

3531 
	#OBJ_£tCext_£tQuÆf
 
OBJ_£t_˚πExt
,6L

	)

3533 
	#SN_£tCext_PGWYˇ∑bûôõs
 "£tCext-PGWYˇ∑bûôõs"

	)

3534 
	#NID_£tCext_PGWYˇ∑bûôõs
 615

	)

3535 
	#OBJ_£tCext_PGWYˇ∑bûôõs
 
OBJ_£t_˚πExt
,7L

	)

3537 
	#SN_£tCext_TokíIdítifõr
 "£tCext-TokíIdítifõr"

	)

3538 
	#NID_£tCext_TokíIdítifõr
 616

	)

3539 
	#OBJ_£tCext_TokíIdítifõr
 
OBJ_£t_˚πExt
,8L

	)

3541 
	#SN_£tCext_Tøck2D©a
 "£tCext-Tøck2D©a"

	)

3542 
	#NID_£tCext_Tøck2D©a
 617

	)

3543 
	#OBJ_£tCext_Tøck2D©a
 
OBJ_£t_˚πExt
,9L

	)

3545 
	#SN_£tCext_TokíTy≥
 "£tCext-TokíTy≥"

	)

3546 
	#NID_£tCext_TokíTy≥
 618

	)

3547 
	#OBJ_£tCext_TokíTy≥
 
OBJ_£t_˚πExt
,10L

	)

3549 
	#SN_£tCext_IssuîC≠abûôõs
 "£tCext-IssuîC≠abûôõs"

	)

3550 
	#NID_£tCext_IssuîC≠abûôõs
 619

	)

3551 
	#OBJ_£tCext_IssuîC≠abûôõs
 
OBJ_£t_˚πExt
,11L

	)

3553 
	#SN_£tAâr_Cît
 "£tAâr-Cît"

	)

3554 
	#NID_£tAâr_Cît
 620

	)

3555 
	#OBJ_£tAâr_Cît
 
OBJ_£t_©å
,0L

	)

3557 
	#SN_£tAâr_PGWYˇp
 "£tAâr-PGWYˇp"

	)

3558 
	#LN_£tAâr_PGWYˇp
 "∑ymíàg©eway c≠abûôõs"

	)

3559 
	#NID_£tAâr_PGWYˇp
 621

	)

3560 
	#OBJ_£tAâr_PGWYˇp
 
OBJ_£t_©å
,1L

	)

3562 
	#SN_£tAâr_TokíTy≥
 "£tAâr-TokíTy≥"

	)

3563 
	#NID_£tAâr_TokíTy≥
 622

	)

3564 
	#OBJ_£tAâr_TokíTy≥
 
OBJ_£t_©å
,2L

	)

3566 
	#SN_£tAâr_IssC≠
 "£tAâr-IssC≠"

	)

3567 
	#LN_£tAâr_IssC≠
 "issuî c≠abûôõs"

	)

3568 
	#NID_£tAâr_IssC≠
 623

	)

3569 
	#OBJ_£tAâr_IssC≠
 
OBJ_£t_©å
,3L

	)

3571 
	#SN_£t_roŸKeyThumb
 "£t-roŸKeyThumb"

	)

3572 
	#NID_£t_roŸKeyThumb
 624

	)

3573 
	#OBJ_£t_roŸKeyThumb
 
OBJ_£tAâr_Cît
,0L

	)

3575 
	#SN_£t_addPﬁicy
 "£t-addPﬁicy"

	)

3576 
	#NID_£t_addPﬁicy
 625

	)

3577 
	#OBJ_£t_addPﬁicy
 
OBJ_£tAâr_Cît
,1L

	)

3579 
	#SN_£tAâr_Tokí_EMV
 "£tAâr-Tokí-EMV"

	)

3580 
	#NID_£tAâr_Tokí_EMV
 626

	)

3581 
	#OBJ_£tAâr_Tokí_EMV
 
OBJ_£tAâr_TokíTy≥
,1L

	)

3583 
	#SN_£tAâr_Tokí_B0Prime
 "£tAâr-Tokí-B0Prime"

	)

3584 
	#NID_£tAâr_Tokí_B0Prime
 627

	)

3585 
	#OBJ_£tAâr_Tokí_B0Prime
 
OBJ_£tAâr_TokíTy≥
,2L

	)

3587 
	#SN_£tAâr_IssC≠_CVM
 "£tAâr-IssC≠-CVM"

	)

3588 
	#NID_£tAâr_IssC≠_CVM
 628

	)

3589 
	#OBJ_£tAâr_IssC≠_CVM
 
OBJ_£tAâr_IssC≠
,3L

	)

3591 
	#SN_£tAâr_IssC≠_T2
 "£tAâr-IssC≠-T2"

	)

3592 
	#NID_£tAâr_IssC≠_T2
 629

	)

3593 
	#OBJ_£tAâr_IssC≠_T2
 
OBJ_£tAâr_IssC≠
,4L

	)

3595 
	#SN_£tAâr_IssC≠_Sig
 "£tAâr-IssC≠-Sig"

	)

3596 
	#NID_£tAâr_IssC≠_Sig
 630

	)

3597 
	#OBJ_£tAâr_IssC≠_Sig
 
OBJ_£tAâr_IssC≠
,5L

	)

3599 
	#SN_£tAâr_GíCry±grm
 "£tAâr-GíCry±grm"

	)

3600 
	#LN_£tAâr_GíCry±grm
 "gíî©ê¸y±ogøm"

	)

3601 
	#NID_£tAâr_GíCry±grm
 631

	)

3602 
	#OBJ_£tAâr_GíCry±grm
 
OBJ_£tAâr_IssC≠_CVM
,1L

	)

3604 
	#SN_£tAâr_T2Enc
 "£tAâr-T2Enc"

	)

3605 
	#LN_£tAâr_T2Enc
 "í¸y±edÅøck 2"

	)

3606 
	#NID_£tAâr_T2Enc
 632

	)

3607 
	#OBJ_£tAâr_T2Enc
 
OBJ_£tAâr_IssC≠_T2
,1L

	)

3609 
	#SN_£tAâr_T2˛óπxt
 "£tAâr-T2˛óπxt"

	)

3610 
	#LN_£tAâr_T2˛óπxt
 "˛óπexàåack 2"

	)

3611 
	#NID_£tAâr_T2˛óπxt
 633

	)

3612 
	#OBJ_£tAâr_T2˛óπxt
 
OBJ_£tAâr_IssC≠_T2
,2L

	)

3614 
	#SN_£tAâr_TokICCsig
 "£tAâr-TokICCsig"

	)

3615 
	#LN_£tAâr_TokICCsig
 "ICC o∏tokí sig«tuª"

	)

3616 
	#NID_£tAâr_TokICCsig
 634

	)

3617 
	#OBJ_£tAâr_TokICCsig
 
OBJ_£tAâr_IssC≠_Sig
,1L

	)

3619 
	#SN_£tAâr_SecDevSig
 "£tAâr-SecDevSig"

	)

3620 
	#LN_£tAâr_SecDevSig
 "£cuª devi˚ sig«tuª"

	)

3621 
	#NID_£tAâr_SecDevSig
 635

	)

3622 
	#OBJ_£tAâr_SecDevSig
 
OBJ_£tAâr_IssC≠_Sig
,2L

	)

3624 
	#SN_£t_bønd_IATA_ATA
 "£t-bønd-IATA-ATA"

	)

3625 
	#NID_£t_bønd_IATA_ATA
 636

	)

3626 
	#OBJ_£t_bønd_IATA_ATA
 
OBJ_£t_bønd
,1L

	)

3628 
	#SN_£t_bønd_Döîs
 "£t-bønd-Döîs"

	)

3629 
	#NID_£t_bønd_Döîs
 637

	)

3630 
	#OBJ_£t_bønd_Döîs
 
OBJ_£t_bønd
,30L

	)

3632 
	#SN_£t_bønd_AmîiˇnEx¥ess
 "£t-bønd-AmîiˇnEx¥ess"

	)

3633 
	#NID_£t_bønd_AmîiˇnEx¥ess
 638

	)

3634 
	#OBJ_£t_bønd_AmîiˇnEx¥ess
 
OBJ_£t_bønd
,34L

	)

3636 
	#SN_£t_bønd_JCB
 "£t-bønd-JCB"

	)

3637 
	#NID_£t_bønd_JCB
 639

	)

3638 
	#OBJ_£t_bønd_JCB
 
OBJ_£t_bønd
,35L

	)

3640 
	#SN_£t_bønd_Viß
 "£t-bønd-Viß"

	)

3641 
	#NID_£t_bønd_Viß
 640

	)

3642 
	#OBJ_£t_bønd_Viß
 
OBJ_£t_bønd
,4L

	)

3644 
	#SN_£t_bønd_Ma°îC¨d
 "£t-bønd-Ma°îC¨d"

	)

3645 
	#NID_£t_bønd_Ma°îC¨d
 641

	)

3646 
	#OBJ_£t_bønd_Ma°îC¨d
 
OBJ_£t_bønd
,5L

	)

3648 
	#SN_£t_bønd_Novus
 "£t-bønd-Novus"

	)

3649 
	#NID_£t_bønd_Novus
 642

	)

3650 
	#OBJ_£t_bønd_Novus
 
OBJ_£t_bønd
,6011L

	)

3652 
	#SN_des_cdmf
 "DES-CDMF"

	)

3653 
	#LN_des_cdmf
 "des-cdmf"

	)

3654 
	#NID_des_cdmf
 643

	)

3655 
	#OBJ_des_cdmf
 
OBJ_rßdsi
,3L,10L

	)

3657 
	#SN_rßOAEPEn¸y±i⁄SET
 "rßOAEPEn¸y±i⁄SET"

	)

3658 
	#NID_rßOAEPEn¸y±i⁄SET
 644

	)

3659 
	#OBJ_rßOAEPEn¸y±i⁄SET
 
OBJ_rßdsi
,1L,1L,6L

	)

3661 
	#SN_ù£c3
 "OakÀy-EC2N-3"

	)

3662 
	#LN_ù£c3
 "ù£c3"

	)

3663 
	#NID_ù£c3
 749

	)

3665 
	#SN_ù£c4
 "OakÀy-EC2N-4"

	)

3666 
	#LN_ù£c4
 "ù£c4"

	)

3667 
	#NID_ù£c4
 750

	)

3669 
	#SN_whúÕoﬁ
 "whúÕoﬁ"

	)

3670 
	#NID_whúÕoﬁ
 804

	)

3671 
	#OBJ_whúÕoﬁ
 
OBJ_iso
,0L,10118L,3L,0L,55L

	)

3673 
	#SN_¸y±›ro
 "¸y±›ro"

	)

3674 
	#NID_¸y±›ro
 805

	)

3675 
	#OBJ_¸y±›ro
 
OBJ_membî_body
,643L,2L,2L

	)

3677 
	#SN_¸y±ocom
 "¸y±ocom"

	)

3678 
	#NID_¸y±ocom
 806

	)

3679 
	#OBJ_¸y±ocom
 
OBJ_membî_body
,643L,2L,9L

	)

3681 
	#SN_id_Go°R3411_94_wôh_Go°R3410_2001
 "id-Go°R3411-94-wôh-Go°R3410-2001"

	)

3682 
	#LN_id_Go°R3411_94_wôh_Go°R3410_2001
 "GOST R 34.11-94 wôh GOST R 34.10-2001"

	)

3683 
	#NID_id_Go°R3411_94_wôh_Go°R3410_2001
 807

	)

3684 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_2001
 
OBJ_¸y±›ro
,3L

	)

3686 
	#SN_id_Go°R3411_94_wôh_Go°R3410_94
 "id-Go°R3411-94-wôh-Go°R3410-94"

	)

3687 
	#LN_id_Go°R3411_94_wôh_Go°R3410_94
 "GOST R 34.11-94 wôh GOST R 34.10-94"

	)

3688 
	#NID_id_Go°R3411_94_wôh_Go°R3410_94
 808

	)

3689 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_94
 
OBJ_¸y±›ro
,4L

	)

3691 
	#SN_id_Go°R3411_94
 "md_go°94"

	)

3692 
	#LN_id_Go°R3411_94
 "GOST R 34.11-94"

	)

3693 
	#NID_id_Go°R3411_94
 809

	)

3694 
	#OBJ_id_Go°R3411_94
 
OBJ_¸y±›ro
,9L

	)

3696 
	#SN_id_HMACGo°R3411_94
 "id-HMACGo°R3411-94"

	)

3697 
	#LN_id_HMACGo°R3411_94
 "HMAC GOST 34.11-94"

	)

3698 
	#NID_id_HMACGo°R3411_94
 810

	)

3699 
	#OBJ_id_HMACGo°R3411_94
 
OBJ_¸y±›ro
,10L

	)

3701 
	#SN_id_Go°R3410_2001
 "go°2001"

	)

3702 
	#LN_id_Go°R3410_2001
 "GOST R 34.10-2001"

	)

3703 
	#NID_id_Go°R3410_2001
 811

	)

3704 
	#OBJ_id_Go°R3410_2001
 
OBJ_¸y±›ro
,19L

	)

3706 
	#SN_id_Go°R3410_94
 "go°94"

	)

3707 
	#LN_id_Go°R3410_94
 "GOST R 34.10-94"

	)

3708 
	#NID_id_Go°R3410_94
 812

	)

3709 
	#OBJ_id_Go°R3410_94
 
OBJ_¸y±›ro
,20L

	)

3711 
	#SN_id_Go°28147_89
 "go°89"

	)

3712 
	#LN_id_Go°28147_89
 "GOST 28147-89"

	)

3713 
	#NID_id_Go°28147_89
 813

	)

3714 
	#OBJ_id_Go°28147_89
 
OBJ_¸y±›ro
,21L

	)

3716 
	#SN_go°89_˙t
 "go°89-˙t"

	)

3717 
	#NID_go°89_˙t
 814

	)

3719 
	#SN_id_Go°28147_89_MAC
 "go°-mac"

	)

3720 
	#LN_id_Go°28147_89_MAC
 "GOST 28147-89 MAC"

	)

3721 
	#NID_id_Go°28147_89_MAC
 815

	)

3722 
	#OBJ_id_Go°28147_89_MAC
 
OBJ_¸y±›ro
,22L

	)

3724 
	#SN_id_Go°R3411_94_¥f
 "¥f-go°r3411-94"

	)

3725 
	#LN_id_Go°R3411_94_¥f
 "GOST R 34.11-94 PRF"

	)

3726 
	#NID_id_Go°R3411_94_¥f
 816

	)

3727 
	#OBJ_id_Go°R3411_94_¥f
 
OBJ_¸y±›ro
,23L

	)

3729 
	#SN_id_Go°R3410_2001DH
 "id-Go°R3410-2001DH"

	)

3730 
	#LN_id_Go°R3410_2001DH
 "GOST R 34.10-2001 DH"

	)

3731 
	#NID_id_Go°R3410_2001DH
 817

	)

3732 
	#OBJ_id_Go°R3410_2001DH
 
OBJ_¸y±›ro
,98L

	)

3734 
	#SN_id_Go°R3410_94DH
 "id-Go°R3410-94DH"

	)

3735 
	#LN_id_Go°R3410_94DH
 "GOST R 34.10-94 DH"

	)

3736 
	#NID_id_Go°R3410_94DH
 818

	)

3737 
	#OBJ_id_Go°R3410_94DH
 
OBJ_¸y±›ro
,99L

	)

3739 
	#SN_id_Go°28147_89_Cry±oPro_KeyMeshög
 "id-Go°28147-89-Cry±oPro-KeyMeshög"

	)

3740 
	#NID_id_Go°28147_89_Cry±oPro_KeyMeshög
 819

	)

3741 
	#OBJ_id_Go°28147_89_Cry±oPro_KeyMeshög
 
OBJ_¸y±›ro
,14L,1L

	)

3743 
	#SN_id_Go°28147_89_N⁄e_KeyMeshög
 "id-Go°28147-89-N⁄e-KeyMeshög"

	)

3744 
	#NID_id_Go°28147_89_N⁄e_KeyMeshög
 820

	)

3745 
	#OBJ_id_Go°28147_89_N⁄e_KeyMeshög
 
OBJ_¸y±›ro
,14L,0L

	)

3747 
	#SN_id_Go°R3411_94_Te°P¨amSë
 "id-Go°R3411-94-Te°P¨amSë"

	)

3748 
	#NID_id_Go°R3411_94_Te°P¨amSë
 821

	)

3749 
	#OBJ_id_Go°R3411_94_Te°P¨amSë
 
OBJ_¸y±›ro
,30L,0L

	)

3751 
	#SN_id_Go°R3411_94_Cry±oProP¨amSë
 "id-Go°R3411-94-Cry±oProP¨amSë"

	)

3752 
	#NID_id_Go°R3411_94_Cry±oProP¨amSë
 822

	)

3753 
	#OBJ_id_Go°R3411_94_Cry±oProP¨amSë
 
OBJ_¸y±›ro
,30L,1L

	)

3755 
	#SN_id_Go°28147_89_Te°P¨amSë
 "id-Go°28147-89-Te°P¨amSë"

	)

3756 
	#NID_id_Go°28147_89_Te°P¨amSë
 823

	)

3757 
	#OBJ_id_Go°28147_89_Te°P¨amSë
 
OBJ_¸y±›ro
,31L,0L

	)

3759 
	#SN_id_Go°28147_89_Cry±oPro_A_P¨amSë
 "id-Go°28147-89-Cry±oPro-A-P¨amSë"

	)

3760 
	#NID_id_Go°28147_89_Cry±oPro_A_P¨amSë
 824

	)

3761 
	#OBJ_id_Go°28147_89_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,31L,1L

	)

3763 
	#SN_id_Go°28147_89_Cry±oPro_B_P¨amSë
 "id-Go°28147-89-Cry±oPro-B-P¨amSë"

	)

3764 
	#NID_id_Go°28147_89_Cry±oPro_B_P¨amSë
 825

	)

3765 
	#OBJ_id_Go°28147_89_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,31L,2L

	)

3767 
	#SN_id_Go°28147_89_Cry±oPro_C_P¨amSë
 "id-Go°28147-89-Cry±oPro-C-P¨amSë"

	)

3768 
	#NID_id_Go°28147_89_Cry±oPro_C_P¨amSë
 826

	)

3769 
	#OBJ_id_Go°28147_89_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,31L,3L

	)

3771 
	#SN_id_Go°28147_89_Cry±oPro_D_P¨amSë
 "id-Go°28147-89-Cry±oPro-D-P¨amSë"

	)

3772 
	#NID_id_Go°28147_89_Cry±oPro_D_P¨amSë
 827

	)

3773 
	#OBJ_id_Go°28147_89_Cry±oPro_D_P¨amSë
 
OBJ_¸y±›ro
,31L,4L

	)

3775 
	#SN_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 "id-Go°28147-89-Cry±oPro-Osˇr-1-1-P¨amSë"

	)

3776 
	#NID_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 828

	)

3777 
	#OBJ_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 
OBJ_¸y±›ro
,31L,5L

	)

3779 
	#SN_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 "id-Go°28147-89-Cry±oPro-Osˇr-1-0-P¨amSë"

	)

3780 
	#NID_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 829

	)

3781 
	#OBJ_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 
OBJ_¸y±›ro
,31L,6L

	)

3783 
	#SN_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 "id-Go°28147-89-Cry±oPro-RIC-1-P¨amSë"

	)

3784 
	#NID_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 830

	)

3785 
	#OBJ_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 
OBJ_¸y±›ro
,31L,7L

	)

3787 
	#SN_id_Go°R3410_94_Te°P¨amSë
 "id-Go°R3410-94-Te°P¨amSë"

	)

3788 
	#NID_id_Go°R3410_94_Te°P¨amSë
 831

	)

3789 
	#OBJ_id_Go°R3410_94_Te°P¨amSë
 
OBJ_¸y±›ro
,32L,0L

	)

3791 
	#SN_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 "id-Go°R3410-94-Cry±oPro-A-P¨amSë"

	)

3792 
	#NID_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 832

	)

3793 
	#OBJ_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,32L,2L

	)

3795 
	#SN_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 "id-Go°R3410-94-Cry±oPro-B-P¨amSë"

	)

3796 
	#NID_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 833

	)

3797 
	#OBJ_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,32L,3L

	)

3799 
	#SN_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 "id-Go°R3410-94-Cry±oPro-C-P¨amSë"

	)

3800 
	#NID_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 834

	)

3801 
	#OBJ_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,32L,4L

	)

3803 
	#SN_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 "id-Go°R3410-94-Cry±oPro-D-P¨amSë"

	)

3804 
	#NID_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 835

	)

3805 
	#OBJ_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 
OBJ_¸y±›ro
,32L,5L

	)

3807 
	#SN_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchA-P¨amSë"

	)

3808 
	#NID_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 836

	)

3809 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 
OBJ_¸y±›ro
,33L,1L

	)

3811 
	#SN_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchB-P¨amSë"

	)

3812 
	#NID_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 837

	)

3813 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 
OBJ_¸y±›ro
,33L,2L

	)

3815 
	#SN_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchC-P¨amSë"

	)

3816 
	#NID_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 838

	)

3817 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 
OBJ_¸y±›ro
,33L,3L

	)

3819 
	#SN_id_Go°R3410_2001_Te°P¨amSë
 "id-Go°R3410-2001-Te°P¨amSë"

	)

3820 
	#NID_id_Go°R3410_2001_Te°P¨amSë
 839

	)

3821 
	#OBJ_id_Go°R3410_2001_Te°P¨amSë
 
OBJ_¸y±›ro
,35L,0L

	)

3823 
	#SN_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-A-P¨amSë"

	)

3824 
	#NID_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 840

	)

3825 
	#OBJ_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,35L,1L

	)

3827 
	#SN_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-B-P¨amSë"

	)

3828 
	#NID_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 841

	)

3829 
	#OBJ_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,35L,2L

	)

3831 
	#SN_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-C-P¨amSë"

	)

3832 
	#NID_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 842

	)

3833 
	#OBJ_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,35L,3L

	)

3835 
	#SN_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-XchA-P¨amSë"

	)

3836 
	#NID_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 843

	)

3837 
	#OBJ_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 
OBJ_¸y±›ro
,36L,0L

	)

3839 
	#SN_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-XchB-P¨amSë"

	)

3840 
	#NID_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 844

	)

3841 
	#OBJ_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 
OBJ_¸y±›ro
,36L,1L

	)

3843 
	#SN_id_Go°R3410_94_a
 "id-Go°R3410-94-a"

	)

3844 
	#NID_id_Go°R3410_94_a
 845

	)

3845 
	#OBJ_id_Go°R3410_94_a
 
OBJ_id_Go°R3410_94
,1L

	)

3847 
	#SN_id_Go°R3410_94_aBis
 "id-Go°R3410-94-aBis"

	)

3848 
	#NID_id_Go°R3410_94_aBis
 846

	)

3849 
	#OBJ_id_Go°R3410_94_aBis
 
OBJ_id_Go°R3410_94
,2L

	)

3851 
	#SN_id_Go°R3410_94_b
 "id-Go°R3410-94-b"

	)

3852 
	#NID_id_Go°R3410_94_b
 847

	)

3853 
	#OBJ_id_Go°R3410_94_b
 
OBJ_id_Go°R3410_94
,3L

	)

3855 
	#SN_id_Go°R3410_94_bBis
 "id-Go°R3410-94-bBis"

	)

3856 
	#NID_id_Go°R3410_94_bBis
 848

	)

3857 
	#OBJ_id_Go°R3410_94_bBis
 
OBJ_id_Go°R3410_94
,4L

	)

3859 
	#SN_id_Go°28147_89_cc
 "id-Go°28147-89-cc"

	)

3860 
	#LN_id_Go°28147_89_cc
 "GOST 28147-89 Cry±ocom P¨amSë"

	)

3861 
	#NID_id_Go°28147_89_cc
 849

	)

3862 
	#OBJ_id_Go°28147_89_cc
 
OBJ_¸y±ocom
,1L,6L,1L

	)

3864 
	#SN_id_Go°R3410_94_cc
 "go°94cc"

	)

3865 
	#LN_id_Go°R3410_94_cc
 "GOST 34.10-94 Cry±ocom"

	)

3866 
	#NID_id_Go°R3410_94_cc
 850

	)

3867 
	#OBJ_id_Go°R3410_94_cc
 
OBJ_¸y±ocom
,1L,5L,3L

	)

3869 
	#SN_id_Go°R3410_2001_cc
 "go°2001cc"

	)

3870 
	#LN_id_Go°R3410_2001_cc
 "GOST 34.10-2001 Cry±ocom"

	)

3871 
	#NID_id_Go°R3410_2001_cc
 851

	)

3872 
	#OBJ_id_Go°R3410_2001_cc
 
OBJ_¸y±ocom
,1L,5L,4L

	)

3874 
	#SN_id_Go°R3411_94_wôh_Go°R3410_94_cc
 "id-Go°R3411-94-wôh-Go°R3410-94-cc"

	)

3875 
	#LN_id_Go°R3411_94_wôh_Go°R3410_94_cc
 "GOST R 34.11-94 wôh GOST R 34.10-94 Cry±ocom"

	)

3876 
	#NID_id_Go°R3411_94_wôh_Go°R3410_94_cc
 852

	)

3877 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_94_cc
 
OBJ_¸y±ocom
,1L,3L,3L

	)

3879 
	#SN_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 "id-Go°R3411-94-wôh-Go°R3410-2001-cc"

	)

3880 
	#LN_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 "GOST R 34.11-94 wôh GOST R 34.10-2001 Cry±ocom"

	)

3881 
	#NID_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 853

	)

3882 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 
OBJ_¸y±ocom
,1L,3L,4L

	)

3884 
	#SN_id_Go°R3410_2001_P¨amSë_cc
 "id-Go°R3410-2001-P¨amSë-cc"

	)

3885 
	#LN_id_Go°R3410_2001_P¨amSë_cc
 "GOST R 3410-2001 P¨amëî Së Cry±ocom"

	)

3886 
	#NID_id_Go°R3410_2001_P¨amSë_cc
 854

	)

3887 
	#OBJ_id_Go°R3410_2001_P¨amSë_cc
 
OBJ_¸y±ocom
,1L,8L,1L

	)

3889 
	#SN_ˇmñlü_128_cbc
 "CAMELLIA-128-CBC"

	)

3890 
	#LN_ˇmñlü_128_cbc
 "ˇmñlü-128-cbc"

	)

3891 
	#NID_ˇmñlü_128_cbc
 751

	)

3892 
	#OBJ_ˇmñlü_128_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,2L

	)

3894 
	#SN_ˇmñlü_192_cbc
 "CAMELLIA-192-CBC"

	)

3895 
	#LN_ˇmñlü_192_cbc
 "ˇmñlü-192-cbc"

	)

3896 
	#NID_ˇmñlü_192_cbc
 752

	)

3897 
	#OBJ_ˇmñlü_192_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,3L

	)

3899 
	#SN_ˇmñlü_256_cbc
 "CAMELLIA-256-CBC"

	)

3900 
	#LN_ˇmñlü_256_cbc
 "ˇmñlü-256-cbc"

	)

3901 
	#NID_ˇmñlü_256_cbc
 753

	)

3902 
	#OBJ_ˇmñlü_256_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,4L

	)

3904 
	#SN_id_ˇmñlü128_wøp
 "id-ˇmñlü128-wøp"

	)

3905 
	#NID_id_ˇmñlü128_wøp
 907

	)

3906 
	#OBJ_id_ˇmñlü128_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,2L

	)

3908 
	#SN_id_ˇmñlü192_wøp
 "id-ˇmñlü192-wøp"

	)

3909 
	#NID_id_ˇmñlü192_wøp
 908

	)

3910 
	#OBJ_id_ˇmñlü192_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,3L

	)

3912 
	#SN_id_ˇmñlü256_wøp
 "id-ˇmñlü256-wøp"

	)

3913 
	#NID_id_ˇmñlü256_wøp
 909

	)

3914 
	#OBJ_id_ˇmñlü256_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,4L

	)

3916 
	#OBJ_¡t_ds
 0L,3L,4401L,5L

	)

3918 
	#OBJ_ˇmñlü
 
OBJ_¡t_ds
,3L,1L,9L

	)

3920 
	#SN_ˇmñlü_128_ecb
 "CAMELLIA-128-ECB"

	)

3921 
	#LN_ˇmñlü_128_ecb
 "ˇmñlü-128-ecb"

	)

3922 
	#NID_ˇmñlü_128_ecb
 754

	)

3923 
	#OBJ_ˇmñlü_128_ecb
 
OBJ_ˇmñlü
,1L

	)

3925 
	#SN_ˇmñlü_128_ofb128
 "CAMELLIA-128-OFB"

	)

3926 
	#LN_ˇmñlü_128_ofb128
 "ˇmñlü-128-ofb"

	)

3927 
	#NID_ˇmñlü_128_ofb128
 766

	)

3928 
	#OBJ_ˇmñlü_128_ofb128
 
OBJ_ˇmñlü
,3L

	)

3930 
	#SN_ˇmñlü_128_cfb128
 "CAMELLIA-128-CFB"

	)

3931 
	#LN_ˇmñlü_128_cfb128
 "ˇmñlü-128-cfb"

	)

3932 
	#NID_ˇmñlü_128_cfb128
 757

	)

3933 
	#OBJ_ˇmñlü_128_cfb128
 
OBJ_ˇmñlü
,4L

	)

3935 
	#SN_ˇmñlü_192_ecb
 "CAMELLIA-192-ECB"

	)

3936 
	#LN_ˇmñlü_192_ecb
 "ˇmñlü-192-ecb"

	)

3937 
	#NID_ˇmñlü_192_ecb
 755

	)

3938 
	#OBJ_ˇmñlü_192_ecb
 
OBJ_ˇmñlü
,21L

	)

3940 
	#SN_ˇmñlü_192_ofb128
 "CAMELLIA-192-OFB"

	)

3941 
	#LN_ˇmñlü_192_ofb128
 "ˇmñlü-192-ofb"

	)

3942 
	#NID_ˇmñlü_192_ofb128
 767

	)

3943 
	#OBJ_ˇmñlü_192_ofb128
 
OBJ_ˇmñlü
,23L

	)

3945 
	#SN_ˇmñlü_192_cfb128
 "CAMELLIA-192-CFB"

	)

3946 
	#LN_ˇmñlü_192_cfb128
 "ˇmñlü-192-cfb"

	)

3947 
	#NID_ˇmñlü_192_cfb128
 758

	)

3948 
	#OBJ_ˇmñlü_192_cfb128
 
OBJ_ˇmñlü
,24L

	)

3950 
	#SN_ˇmñlü_256_ecb
 "CAMELLIA-256-ECB"

	)

3951 
	#LN_ˇmñlü_256_ecb
 "ˇmñlü-256-ecb"

	)

3952 
	#NID_ˇmñlü_256_ecb
 756

	)

3953 
	#OBJ_ˇmñlü_256_ecb
 
OBJ_ˇmñlü
,41L

	)

3955 
	#SN_ˇmñlü_256_ofb128
 "CAMELLIA-256-OFB"

	)

3956 
	#LN_ˇmñlü_256_ofb128
 "ˇmñlü-256-ofb"

	)

3957 
	#NID_ˇmñlü_256_ofb128
 768

	)

3958 
	#OBJ_ˇmñlü_256_ofb128
 
OBJ_ˇmñlü
,43L

	)

3960 
	#SN_ˇmñlü_256_cfb128
 "CAMELLIA-256-CFB"

	)

3961 
	#LN_ˇmñlü_256_cfb128
 "ˇmñlü-256-cfb"

	)

3962 
	#NID_ˇmñlü_256_cfb128
 759

	)

3963 
	#OBJ_ˇmñlü_256_cfb128
 
OBJ_ˇmñlü
,44L

	)

3965 
	#SN_ˇmñlü_128_cfb1
 "CAMELLIA-128-CFB1"

	)

3966 
	#LN_ˇmñlü_128_cfb1
 "ˇmñlü-128-cfb1"

	)

3967 
	#NID_ˇmñlü_128_cfb1
 760

	)

3969 
	#SN_ˇmñlü_192_cfb1
 "CAMELLIA-192-CFB1"

	)

3970 
	#LN_ˇmñlü_192_cfb1
 "ˇmñlü-192-cfb1"

	)

3971 
	#NID_ˇmñlü_192_cfb1
 761

	)

3973 
	#SN_ˇmñlü_256_cfb1
 "CAMELLIA-256-CFB1"

	)

3974 
	#LN_ˇmñlü_256_cfb1
 "ˇmñlü-256-cfb1"

	)

3975 
	#NID_ˇmñlü_256_cfb1
 762

	)

3977 
	#SN_ˇmñlü_128_cfb8
 "CAMELLIA-128-CFB8"

	)

3978 
	#LN_ˇmñlü_128_cfb8
 "ˇmñlü-128-cfb8"

	)

3979 
	#NID_ˇmñlü_128_cfb8
 763

	)

3981 
	#SN_ˇmñlü_192_cfb8
 "CAMELLIA-192-CFB8"

	)

3982 
	#LN_ˇmñlü_192_cfb8
 "ˇmñlü-192-cfb8"

	)

3983 
	#NID_ˇmñlü_192_cfb8
 764

	)

3985 
	#SN_ˇmñlü_256_cfb8
 "CAMELLIA-256-CFB8"

	)

3986 
	#LN_ˇmñlü_256_cfb8
 "ˇmñlü-256-cfb8"

	)

3987 
	#NID_ˇmñlü_256_cfb8
 765

	)

3989 
	#SN_kiß
 "KISA"

	)

3990 
	#LN_kiß
 "kiß"

	)

3991 
	#NID_kiß
 773

	)

3992 
	#OBJ_kiß
 
OBJ_membî_body
,410L,200004L

	)

3994 
	#SN_£ed_ecb
 "SEED-ECB"

	)

3995 
	#LN_£ed_ecb
 "£ed-ecb"

	)

3996 
	#NID_£ed_ecb
 776

	)

3997 
	#OBJ_£ed_ecb
 
OBJ_kiß
,1L,3L

	)

3999 
	#SN_£ed_cbc
 "SEED-CBC"

	)

4000 
	#LN_£ed_cbc
 "£ed-cbc"

	)

4001 
	#NID_£ed_cbc
 777

	)

4002 
	#OBJ_£ed_cbc
 
OBJ_kiß
,1L,4L

	)

4004 
	#SN_£ed_cfb128
 "SEED-CFB"

	)

4005 
	#LN_£ed_cfb128
 "£ed-cfb"

	)

4006 
	#NID_£ed_cfb128
 779

	)

4007 
	#OBJ_£ed_cfb128
 
OBJ_kiß
,1L,5L

	)

4009 
	#SN_£ed_ofb128
 "SEED-OFB"

	)

4010 
	#LN_£ed_ofb128
 "£ed-ofb"

	)

4011 
	#NID_£ed_ofb128
 778

	)

4012 
	#OBJ_£ed_ofb128
 
OBJ_kiß
,1L,6L

	)

4014 
	#SN_hmac
 "HMAC"

	)

4015 
	#LN_hmac
 "hmac"

	)

4016 
	#NID_hmac
 855

	)

4018 
	#SN_cmac
 "CMAC"

	)

4019 
	#LN_cmac
 "cmac"

	)

4020 
	#NID_cmac
 894

	)

4022 
	#SN_rc4_hmac_md5
 "RC4-HMAC-MD5"

	)

4023 
	#LN_rc4_hmac_md5
 "rc4-hmac-md5"

	)

4024 
	#NID_rc4_hmac_md5
 915

	)

4026 
	#SN_´s_128_cbc_hmac_sha1
 "AES-128-CBC-HMAC-SHA1"

	)

4027 
	#LN_´s_128_cbc_hmac_sha1
 "´s-128-cbc-hmac-sha1"

	)

4028 
	#NID_´s_128_cbc_hmac_sha1
 916

	)

4030 
	#SN_´s_192_cbc_hmac_sha1
 "AES-192-CBC-HMAC-SHA1"

	)

4031 
	#LN_´s_192_cbc_hmac_sha1
 "´s-192-cbc-hmac-sha1"

	)

4032 
	#NID_´s_192_cbc_hmac_sha1
 917

	)

4034 
	#SN_´s_256_cbc_hmac_sha1
 "AES-256-CBC-HMAC-SHA1"

	)

4035 
	#LN_´s_256_cbc_hmac_sha1
 "´s-256-cbc-hmac-sha1"

	)

4036 
	#NID_´s_256_cbc_hmac_sha1
 918

	)

4038 
	#SN_´s_128_cbc_hmac_sha256
 "AES-128-CBC-HMAC-SHA256"

	)

4039 
	#LN_´s_128_cbc_hmac_sha256
 "´s-128-cbc-hmac-sha256"

	)

4040 
	#NID_´s_128_cbc_hmac_sha256
 948

	)

4042 
	#SN_´s_192_cbc_hmac_sha256
 "AES-192-CBC-HMAC-SHA256"

	)

4043 
	#LN_´s_192_cbc_hmac_sha256
 "´s-192-cbc-hmac-sha256"

	)

4044 
	#NID_´s_192_cbc_hmac_sha256
 949

	)

4046 
	#SN_´s_256_cbc_hmac_sha256
 "AES-256-CBC-HMAC-SHA256"

	)

4047 
	#LN_´s_256_cbc_hmac_sha256
 "´s-256-cbc-hmac-sha256"

	)

4048 
	#NID_´s_256_cbc_hmac_sha256
 950

	)

4050 
	#SN_dhpubli˙umbî
 "dhpubli˙umbî"

	)

4051 
	#LN_dhpubli˙umbî
 "X9.42 DH"

	)

4052 
	#NID_dhpubli˙umbî
 920

	)

4053 
	#OBJ_dhpubli˙umbî
 
OBJ_ISO_US
,10046L,2L,1L

	)

4055 
	#SN_bøöpoﬁP160r1
 "bøöpoﬁP160r1"

	)

4056 
	#NID_bøöpoﬁP160r1
 921

	)

4057 
	#OBJ_bøöpoﬁP160r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,1L

	)

4059 
	#SN_bøöpoﬁP160t1
 "bøöpoﬁP160t1"

	)

4060 
	#NID_bøöpoﬁP160t1
 922

	)

4061 
	#OBJ_bøöpoﬁP160t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,2L

	)

4063 
	#SN_bøöpoﬁP192r1
 "bøöpoﬁP192r1"

	)

4064 
	#NID_bøöpoﬁP192r1
 923

	)

4065 
	#OBJ_bøöpoﬁP192r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,3L

	)

4067 
	#SN_bøöpoﬁP192t1
 "bøöpoﬁP192t1"

	)

4068 
	#NID_bøöpoﬁP192t1
 924

	)

4069 
	#OBJ_bøöpoﬁP192t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,4L

	)

4071 
	#SN_bøöpoﬁP224r1
 "bøöpoﬁP224r1"

	)

4072 
	#NID_bøöpoﬁP224r1
 925

	)

4073 
	#OBJ_bøöpoﬁP224r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,5L

	)

4075 
	#SN_bøöpoﬁP224t1
 "bøöpoﬁP224t1"

	)

4076 
	#NID_bøöpoﬁP224t1
 926

	)

4077 
	#OBJ_bøöpoﬁP224t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,6L

	)

4079 
	#SN_bøöpoﬁP256r1
 "bøöpoﬁP256r1"

	)

4080 
	#NID_bøöpoﬁP256r1
 927

	)

4081 
	#OBJ_bøöpoﬁP256r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,7L

	)

4083 
	#SN_bøöpoﬁP256t1
 "bøöpoﬁP256t1"

	)

4084 
	#NID_bøöpoﬁP256t1
 928

	)

4085 
	#OBJ_bøöpoﬁP256t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,8L

	)

4087 
	#SN_bøöpoﬁP320r1
 "bøöpoﬁP320r1"

	)

4088 
	#NID_bøöpoﬁP320r1
 929

	)

4089 
	#OBJ_bøöpoﬁP320r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,9L

	)

4091 
	#SN_bøöpoﬁP320t1
 "bøöpoﬁP320t1"

	)

4092 
	#NID_bøöpoﬁP320t1
 930

	)

4093 
	#OBJ_bøöpoﬁP320t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,10L

	)

4095 
	#SN_bøöpoﬁP384r1
 "bøöpoﬁP384r1"

	)

4096 
	#NID_bøöpoﬁP384r1
 931

	)

4097 
	#OBJ_bøöpoﬁP384r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,11L

	)

4099 
	#SN_bøöpoﬁP384t1
 "bøöpoﬁP384t1"

	)

4100 
	#NID_bøöpoﬁP384t1
 932

	)

4101 
	#OBJ_bøöpoﬁP384t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,12L

	)

4103 
	#SN_bøöpoﬁP512r1
 "bøöpoﬁP512r1"

	)

4104 
	#NID_bøöpoﬁP512r1
 933

	)

4105 
	#OBJ_bøöpoﬁP512r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,13L

	)

4107 
	#SN_bøöpoﬁP512t1
 "bøöpoﬁP512t1"

	)

4108 
	#NID_bøöpoﬁP512t1
 934

	)

4109 
	#OBJ_bøöpoﬁP512t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,14L

	)

4111 
	#OBJ_x9_63_scheme
 1L,3L,133L,16L,840L,63L,0L

	)

4113 
	#OBJ_£cg_scheme
 
OBJ_˚πicom_¨c
,1L

	)

4115 
	#SN_dhSögÀPass_°dDH_sha1kdf_scheme
 "dhSögÀPass-°dDH-sha1kdf-scheme"

	)

4116 
	#NID_dhSögÀPass_°dDH_sha1kdf_scheme
 936

	)

4117 
	#OBJ_dhSögÀPass_°dDH_sha1kdf_scheme
 
OBJ_x9_63_scheme
,2L

	)

4119 
	#SN_dhSögÀPass_°dDH_sha224kdf_scheme
 "dhSögÀPass-°dDH-sha224kdf-scheme"

	)

4120 
	#NID_dhSögÀPass_°dDH_sha224kdf_scheme
 937

	)

4121 
	#OBJ_dhSögÀPass_°dDH_sha224kdf_scheme
 
OBJ_£cg_scheme
,11L,0L

	)

4123 
	#SN_dhSögÀPass_°dDH_sha256kdf_scheme
 "dhSögÀPass-°dDH-sha256kdf-scheme"

	)

4124 
	#NID_dhSögÀPass_°dDH_sha256kdf_scheme
 938

	)

4125 
	#OBJ_dhSögÀPass_°dDH_sha256kdf_scheme
 
OBJ_£cg_scheme
,11L,1L

	)

4127 
	#SN_dhSögÀPass_°dDH_sha384kdf_scheme
 "dhSögÀPass-°dDH-sha384kdf-scheme"

	)

4128 
	#NID_dhSögÀPass_°dDH_sha384kdf_scheme
 939

	)

4129 
	#OBJ_dhSögÀPass_°dDH_sha384kdf_scheme
 
OBJ_£cg_scheme
,11L,2L

	)

4131 
	#SN_dhSögÀPass_°dDH_sha512kdf_scheme
 "dhSögÀPass-°dDH-sha512kdf-scheme"

	)

4132 
	#NID_dhSögÀPass_°dDH_sha512kdf_scheme
 940

	)

4133 
	#OBJ_dhSögÀPass_°dDH_sha512kdf_scheme
 
OBJ_£cg_scheme
,11L,3L

	)

4135 
	#SN_dhSögÀPass_coÁ˘‹DH_sha1kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha1kdf-scheme"

	)

4136 
	#NID_dhSögÀPass_coÁ˘‹DH_sha1kdf_scheme
 941

	)

4137 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha1kdf_scheme
 
OBJ_x9_63_scheme
,3L

	)

4139 
	#SN_dhSögÀPass_coÁ˘‹DH_sha224kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha224kdf-scheme"

	)

4140 
	#NID_dhSögÀPass_coÁ˘‹DH_sha224kdf_scheme
 942

	)

4141 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha224kdf_scheme
 
OBJ_£cg_scheme
,14L,0L

	)

4143 
	#SN_dhSögÀPass_coÁ˘‹DH_sha256kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha256kdf-scheme"

	)

4144 
	#NID_dhSögÀPass_coÁ˘‹DH_sha256kdf_scheme
 943

	)

4145 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha256kdf_scheme
 
OBJ_£cg_scheme
,14L,1L

	)

4147 
	#SN_dhSögÀPass_coÁ˘‹DH_sha384kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha384kdf-scheme"

	)

4148 
	#NID_dhSögÀPass_coÁ˘‹DH_sha384kdf_scheme
 944

	)

4149 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha384kdf_scheme
 
OBJ_£cg_scheme
,14L,2L

	)

4151 
	#SN_dhSögÀPass_coÁ˘‹DH_sha512kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha512kdf-scheme"

	)

4152 
	#NID_dhSögÀPass_coÁ˘‹DH_sha512kdf_scheme
 945

	)

4153 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha512kdf_scheme
 
OBJ_£cg_scheme
,14L,3L

	)

4155 
	#SN_dh_°d_kdf
 "dh-°d-kdf"

	)

4156 
	#NID_dh_°d_kdf
 946

	)

4158 
	#SN_dh_coÁ˘‹_kdf
 "dh-coÁ˘‹-kdf"

	)

4159 
	#NID_dh_coÁ˘‹_kdf
 947

	)

4161 
	#SN_˘_¥e˚π_s˘s
 "˘_¥e˚π_s˘s"

	)

4162 
	#LN_˘_¥e˚π_s˘s
 "CT Pª˚πifiˇã SCTs"

	)

4163 
	#NID_˘_¥e˚π_s˘s
 951

	)

4164 
	#OBJ_˘_¥e˚π_s˘s
 1L,3L,6L,1L,4L,1L,11129L,2L,4L,2L

	)

4166 
	#SN_˘_¥e˚π_pois⁄
 "˘_¥e˚π_pois⁄"

	)

4167 
	#LN_˘_¥e˚π_pois⁄
 "CT Pª˚πifiˇã Pois⁄"

	)

4168 
	#NID_˘_¥e˚π_pois⁄
 952

	)

4169 
	#OBJ_˘_¥e˚π_pois⁄
 1L,3L,6L,1L,4L,1L,11129L,2L,4L,3L

	)

4171 
	#SN_˘_¥e˚π_sig√r
 "˘_¥e˚π_sig√r"

	)

4172 
	#LN_˘_¥e˚π_sig√r
 "CT Pª˚πifiˇã Sig√r"

	)

4173 
	#NID_˘_¥e˚π_sig√r
 953

	)

4174 
	#OBJ_˘_¥e˚π_sig√r
 1L,3L,6L,1L,4L,1L,11129L,2L,4L,4L

	)

4176 
	#SN_˘_˚π_s˘s
 "˘_˚π_s˘s"

	)

4177 
	#LN_˘_˚π_s˘s
 "CT Cîtifiˇã SCTs"

	)

4178 
	#NID_˘_˚π_s˘s
 954

	)

4179 
	#OBJ_˘_˚π_s˘s
 1L,3L,6L,1L,4L,1L,11129L,2L,4L,5L

	)

4181 
	#SN_jurisdi˘i⁄LoˇlôyName
 "jurisdi˘i⁄L"

	)

4182 
	#LN_jurisdi˘i⁄LoˇlôyName
 "jurisdi˘i⁄LoˇlôyName"

	)

4183 
	#NID_jurisdi˘i⁄LoˇlôyName
 955

	)

4184 
	#OBJ_jurisdi˘i⁄LoˇlôyName
 1L,3L,6L,1L,4L,1L,311L,60L,2L,1L,1L

	)

4186 
	#SN_jurisdi˘i⁄SèãOrProvö˚Name
 "jurisdi˘i⁄ST"

	)

4187 
	#LN_jurisdi˘i⁄SèãOrProvö˚Name
 "jurisdi˘i⁄SèãOrProvö˚Name"

	)

4188 
	#NID_jurisdi˘i⁄SèãOrProvö˚Name
 956

	)

4189 
	#OBJ_jurisdi˘i⁄SèãOrProvö˚Name
 1L,3L,6L,1L,4L,1L,311L,60L,2L,1L,2L

	)

4191 
	#SN_jurisdi˘i⁄Cou¡ryName
 "jurisdi˘i⁄C"

	)

4192 
	#LN_jurisdi˘i⁄Cou¡ryName
 "jurisdi˘i⁄Cou¡ryName"

	)

4193 
	#NID_jurisdi˘i⁄Cou¡ryName
 957

	)

4194 
	#OBJ_jurisdi˘i⁄Cou¡ryName
 1L,3L,6L,1L,4L,1L,311L,60L,2L,1L,3L

	)

	@/usr/include/openssl/objects.h

59 #i‚de‡
HEADER_OBJECTS_H


60 
	#HEADER_OBJECTS_H


	)

62 
	#USE_OBJ_MAC


	)

64 #ifde‡
USE_OBJ_MAC


65 
	~<›ís¶/obj_mac.h
>

67 
	#SN_undef
 "UNDEF"

	)

68 
	#LN_undef
 "undeföed"

	)

69 
	#NID_undef
 0

	)

70 
	#OBJ_undef
 0L

	)

72 
	#SN_Alg‹ôhm
 "Alg‹ôhm"

	)

73 
	#LN_Æg‹ôhm
 "Æg‹ôhm"

	)

74 
	#NID_Æg‹ôhm
 38

	)

75 
	#OBJ_Æg‹ôhm
 1L,3L,14L,3L,2L

	)

77 
	#LN_rßdsi
 "rßdsi"

	)

78 
	#NID_rßdsi
 1

	)

79 
	#OBJ_rßdsi
 1L,2L,840L,113549L

	)

81 
	#LN_pkcs
 "pkcs"

	)

82 
	#NID_pkcs
 2

	)

83 
	#OBJ_pkcs
 
OBJ_rßdsi
,1L

	)

85 
	#SN_md2
 "MD2"

	)

86 
	#LN_md2
 "md2"

	)

87 
	#NID_md2
 3

	)

88 
	#OBJ_md2
 
OBJ_rßdsi
,2L,2L

	)

90 
	#SN_md5
 "MD5"

	)

91 
	#LN_md5
 "md5"

	)

92 
	#NID_md5
 4

	)

93 
	#OBJ_md5
 
OBJ_rßdsi
,2L,5L

	)

95 
	#SN_rc4
 "RC4"

	)

96 
	#LN_rc4
 "rc4"

	)

97 
	#NID_rc4
 5

	)

98 
	#OBJ_rc4
 
OBJ_rßdsi
,3L,4L

	)

100 
	#LN_rßEn¸y±i⁄
 "rßEn¸y±i⁄"

	)

101 
	#NID_rßEn¸y±i⁄
 6

	)

102 
	#OBJ_rßEn¸y±i⁄
 
OBJ_pkcs
,1L,1L

	)

104 
	#SN_md2WôhRSAEn¸y±i⁄
 "RSA-MD2"

	)

105 
	#LN_md2WôhRSAEn¸y±i⁄
 "md2WôhRSAEn¸y±i⁄"

	)

106 
	#NID_md2WôhRSAEn¸y±i⁄
 7

	)

107 
	#OBJ_md2WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,2L

	)

109 
	#SN_md5WôhRSAEn¸y±i⁄
 "RSA-MD5"

	)

110 
	#LN_md5WôhRSAEn¸y±i⁄
 "md5WôhRSAEn¸y±i⁄"

	)

111 
	#NID_md5WôhRSAEn¸y±i⁄
 8

	)

112 
	#OBJ_md5WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,4L

	)

114 
	#SN_pbeWôhMD2AndDES_CBC
 "PBE-MD2-DES"

	)

115 
	#LN_pbeWôhMD2AndDES_CBC
 "pbeWôhMD2AndDES-CBC"

	)

116 
	#NID_pbeWôhMD2AndDES_CBC
 9

	)

117 
	#OBJ_pbeWôhMD2AndDES_CBC
 
OBJ_pkcs
,5L,1L

	)

119 
	#SN_pbeWôhMD5AndDES_CBC
 "PBE-MD5-DES"

	)

120 
	#LN_pbeWôhMD5AndDES_CBC
 "pbeWôhMD5AndDES-CBC"

	)

121 
	#NID_pbeWôhMD5AndDES_CBC
 10

	)

122 
	#OBJ_pbeWôhMD5AndDES_CBC
 
OBJ_pkcs
,5L,3L

	)

124 
	#LN_X500
 "X500"

	)

125 
	#NID_X500
 11

	)

126 
	#OBJ_X500
 2L,5L

	)

128 
	#LN_X509
 "X509"

	)

129 
	#NID_X509
 12

	)

130 
	#OBJ_X509
 
OBJ_X500
,4L

	)

132 
	#SN_comm⁄Name
 "CN"

	)

133 
	#LN_comm⁄Name
 "comm⁄Name"

	)

134 
	#NID_comm⁄Name
 13

	)

135 
	#OBJ_comm⁄Name
 
OBJ_X509
,3L

	)

137 
	#SN_cou¡ryName
 "C"

	)

138 
	#LN_cou¡ryName
 "cou¡ryName"

	)

139 
	#NID_cou¡ryName
 14

	)

140 
	#OBJ_cou¡ryName
 
OBJ_X509
,6L

	)

142 
	#SN_loˇlôyName
 "L"

	)

143 
	#LN_loˇlôyName
 "loˇlôyName"

	)

144 
	#NID_loˇlôyName
 15

	)

145 
	#OBJ_loˇlôyName
 
OBJ_X509
,7L

	)

150 
	#SN_°©eOrProvö˚Name
 "ST"

	)

151 
	#LN_°©eOrProvö˚Name
 "°©eOrProvö˚Name"

	)

152 
	#NID_°©eOrProvö˚Name
 16

	)

153 
	#OBJ_°©eOrProvö˚Name
 
OBJ_X509
,8L

	)

155 
	#SN_‹g™iz©i⁄Name
 "O"

	)

156 
	#LN_‹g™iz©i⁄Name
 "‹g™iz©i⁄Name"

	)

157 
	#NID_‹g™iz©i⁄Name
 17

	)

158 
	#OBJ_‹g™iz©i⁄Name
 
OBJ_X509
,10L

	)

160 
	#SN_‹g™iz©i⁄ÆUnôName
 "OU"

	)

161 
	#LN_‹g™iz©i⁄ÆUnôName
 "‹g™iz©i⁄ÆUnôName"

	)

162 
	#NID_‹g™iz©i⁄ÆUnôName
 18

	)

163 
	#OBJ_‹g™iz©i⁄ÆUnôName
 
OBJ_X509
,11L

	)

165 
	#SN_rß
 "RSA"

	)

166 
	#LN_rß
 "rß"

	)

167 
	#NID_rß
 19

	)

168 
	#OBJ_rß
 
OBJ_X500
,8L,1L,1L

	)

170 
	#LN_pkcs7
 "pkcs7"

	)

171 
	#NID_pkcs7
 20

	)

172 
	#OBJ_pkcs7
 
OBJ_pkcs
,7L

	)

174 
	#LN_pkcs7_d©a
 "pkcs7-d©a"

	)

175 
	#NID_pkcs7_d©a
 21

	)

176 
	#OBJ_pkcs7_d©a
 
OBJ_pkcs7
,1L

	)

178 
	#LN_pkcs7_sig√d
 "pkcs7-sig√dD©a"

	)

179 
	#NID_pkcs7_sig√d
 22

	)

180 
	#OBJ_pkcs7_sig√d
 
OBJ_pkcs7
,2L

	)

182 
	#LN_pkcs7_ívñ›ed
 "pkcs7-ívñ›edD©a"

	)

183 
	#NID_pkcs7_ívñ›ed
 23

	)

184 
	#OBJ_pkcs7_ívñ›ed
 
OBJ_pkcs7
,3L

	)

186 
	#LN_pkcs7_sig√dAndEnvñ›ed
 "pkcs7-sig√dAndEnvñ›edD©a"

	)

187 
	#NID_pkcs7_sig√dAndEnvñ›ed
 24

	)

188 
	#OBJ_pkcs7_sig√dAndEnvñ›ed
 
OBJ_pkcs7
,4L

	)

190 
	#LN_pkcs7_dige°
 "pkcs7-dige°D©a"

	)

191 
	#NID_pkcs7_dige°
 25

	)

192 
	#OBJ_pkcs7_dige°
 
OBJ_pkcs7
,5L

	)

194 
	#LN_pkcs7_í¸y±ed
 "pkcs7-í¸y±edD©a"

	)

195 
	#NID_pkcs7_í¸y±ed
 26

	)

196 
	#OBJ_pkcs7_í¸y±ed
 
OBJ_pkcs7
,6L

	)

198 
	#LN_pkcs3
 "pkcs3"

	)

199 
	#NID_pkcs3
 27

	)

200 
	#OBJ_pkcs3
 
OBJ_pkcs
,3L

	)

202 
	#LN_dhKeyAgªemít
 "dhKeyAgªemít"

	)

203 
	#NID_dhKeyAgªemít
 28

	)

204 
	#OBJ_dhKeyAgªemít
 
OBJ_pkcs3
,1L

	)

206 
	#SN_des_ecb
 "DES-ECB"

	)

207 
	#LN_des_ecb
 "des-ecb"

	)

208 
	#NID_des_ecb
 29

	)

209 
	#OBJ_des_ecb
 
OBJ_Æg‹ôhm
,6L

	)

211 
	#SN_des_cfb64
 "DES-CFB"

	)

212 
	#LN_des_cfb64
 "des-cfb"

	)

213 
	#NID_des_cfb64
 30

	)

215 
	#OBJ_des_cfb64
 
OBJ_Æg‹ôhm
,9L

	)

217 
	#SN_des_cbc
 "DES-CBC"

	)

218 
	#LN_des_cbc
 "des-cbc"

	)

219 
	#NID_des_cbc
 31

	)

221 
	#OBJ_des_cbc
 
OBJ_Æg‹ôhm
,7L

	)

223 
	#SN_des_ede
 "DES-EDE"

	)

224 
	#LN_des_ede
 "des-ede"

	)

225 
	#NID_des_ede
 32

	)

227 
	#OBJ_des_ede
 
OBJ_Æg‹ôhm
,17L

	)

229 
	#SN_des_ede3
 "DES-EDE3"

	)

230 
	#LN_des_ede3
 "des-ede3"

	)

231 
	#NID_des_ede3
 33

	)

233 
	#SN_idó_cbc
 "IDEA-CBC"

	)

234 
	#LN_idó_cbc
 "idó-cbc"

	)

235 
	#NID_idó_cbc
 34

	)

236 
	#OBJ_idó_cbc
 1L,3L,6L,1L,4L,1L,188L,7L,1L,1L,2L

	)

238 
	#SN_idó_cfb64
 "IDEA-CFB"

	)

239 
	#LN_idó_cfb64
 "idó-cfb"

	)

240 
	#NID_idó_cfb64
 35

	)

242 
	#SN_idó_ecb
 "IDEA-ECB"

	)

243 
	#LN_idó_ecb
 "idó-ecb"

	)

244 
	#NID_idó_ecb
 36

	)

246 
	#SN_rc2_cbc
 "RC2-CBC"

	)

247 
	#LN_rc2_cbc
 "rc2-cbc"

	)

248 
	#NID_rc2_cbc
 37

	)

249 
	#OBJ_rc2_cbc
 
OBJ_rßdsi
,3L,2L

	)

251 
	#SN_rc2_ecb
 "RC2-ECB"

	)

252 
	#LN_rc2_ecb
 "rc2-ecb"

	)

253 
	#NID_rc2_ecb
 38

	)

255 
	#SN_rc2_cfb64
 "RC2-CFB"

	)

256 
	#LN_rc2_cfb64
 "rc2-cfb"

	)

257 
	#NID_rc2_cfb64
 39

	)

259 
	#SN_rc2_ofb64
 "RC2-OFB"

	)

260 
	#LN_rc2_ofb64
 "rc2-ofb"

	)

261 
	#NID_rc2_ofb64
 40

	)

263 
	#SN_sha
 "SHA"

	)

264 
	#LN_sha
 "sha"

	)

265 
	#NID_sha
 41

	)

266 
	#OBJ_sha
 
OBJ_Æg‹ôhm
,18L

	)

268 
	#SN_shaWôhRSAEn¸y±i⁄
 "RSA-SHA"

	)

269 
	#LN_shaWôhRSAEn¸y±i⁄
 "shaWôhRSAEn¸y±i⁄"

	)

270 
	#NID_shaWôhRSAEn¸y±i⁄
 42

	)

271 
	#OBJ_shaWôhRSAEn¸y±i⁄
 
OBJ_Æg‹ôhm
,15L

	)

273 
	#SN_des_ede_cbc
 "DES-EDE-CBC"

	)

274 
	#LN_des_ede_cbc
 "des-ede-cbc"

	)

275 
	#NID_des_ede_cbc
 43

	)

277 
	#SN_des_ede3_cbc
 "DES-EDE3-CBC"

	)

278 
	#LN_des_ede3_cbc
 "des-ede3-cbc"

	)

279 
	#NID_des_ede3_cbc
 44

	)

280 
	#OBJ_des_ede3_cbc
 
OBJ_rßdsi
,3L,7L

	)

282 
	#SN_des_ofb64
 "DES-OFB"

	)

283 
	#LN_des_ofb64
 "des-ofb"

	)

284 
	#NID_des_ofb64
 45

	)

285 
	#OBJ_des_ofb64
 
OBJ_Æg‹ôhm
,8L

	)

287 
	#SN_idó_ofb64
 "IDEA-OFB"

	)

288 
	#LN_idó_ofb64
 "idó-ofb"

	)

289 
	#NID_idó_ofb64
 46

	)

291 
	#LN_pkcs9
 "pkcs9"

	)

292 
	#NID_pkcs9
 47

	)

293 
	#OBJ_pkcs9
 
OBJ_pkcs
,9L

	)

295 
	#SN_pkcs9_emaûAddªss
 "Emaû"

	)

296 
	#LN_pkcs9_emaûAddªss
 "emaûAddªss"

	)

297 
	#NID_pkcs9_emaûAddªss
 48

	)

298 
	#OBJ_pkcs9_emaûAddªss
 
OBJ_pkcs9
,1L

	)

300 
	#LN_pkcs9_un°ru˘uªdName
 "un°ru˘uªdName"

	)

301 
	#NID_pkcs9_un°ru˘uªdName
 49

	)

302 
	#OBJ_pkcs9_un°ru˘uªdName
 
OBJ_pkcs9
,2L

	)

304 
	#LN_pkcs9_c⁄ã¡Ty≥
 "c⁄ã¡Ty≥"

	)

305 
	#NID_pkcs9_c⁄ã¡Ty≥
 50

	)

306 
	#OBJ_pkcs9_c⁄ã¡Ty≥
 
OBJ_pkcs9
,3L

	)

308 
	#LN_pkcs9_mesßgeDige°
 "mesßgeDige°"

	)

309 
	#NID_pkcs9_mesßgeDige°
 51

	)

310 
	#OBJ_pkcs9_mesßgeDige°
 
OBJ_pkcs9
,4L

	)

312 
	#LN_pkcs9_signögTime
 "signögTime"

	)

313 
	#NID_pkcs9_signögTime
 52

	)

314 
	#OBJ_pkcs9_signögTime
 
OBJ_pkcs9
,5L

	)

316 
	#LN_pkcs9_cou¡îsig«tuª
 "cou¡îsig«tuª"

	)

317 
	#NID_pkcs9_cou¡îsig«tuª
 53

	)

318 
	#OBJ_pkcs9_cou¡îsig«tuª
 
OBJ_pkcs9
,6L

	)

320 
	#LN_pkcs9_chÆÀngePassw‹d
 "chÆÀngePassw‹d"

	)

321 
	#NID_pkcs9_chÆÀngePassw‹d
 54

	)

322 
	#OBJ_pkcs9_chÆÀngePassw‹d
 
OBJ_pkcs9
,7L

	)

324 
	#LN_pkcs9_un°ru˘uªdAddªss
 "un°ru˘uªdAddªss"

	)

325 
	#NID_pkcs9_un°ru˘uªdAddªss
 55

	)

326 
	#OBJ_pkcs9_un°ru˘uªdAddªss
 
OBJ_pkcs9
,8L

	)

328 
	#LN_pkcs9_extCîtAâribuãs
 "exãndedCîtifiˇãAâribuãs"

	)

329 
	#NID_pkcs9_extCîtAâribuãs
 56

	)

330 
	#OBJ_pkcs9_extCîtAâribuãs
 
OBJ_pkcs9
,9L

	)

332 
	#SN_√tsˇ≥
 "Nësˇ≥"

	)

333 
	#LN_√tsˇ≥
 "Nësˇ≥ Communiˇti⁄†C‹p."

	)

334 
	#NID_√tsˇ≥
 57

	)

335 
	#OBJ_√tsˇ≥
 2L,16L,840L,1L,113730L

	)

337 
	#SN_√tsˇ≥_˚π_exãnsi⁄
 "nsCîtExt"

	)

338 
	#LN_√tsˇ≥_˚π_exãnsi⁄
 "Nësˇ≥ Cîtifiˇã Exãnsi⁄"

	)

339 
	#NID_√tsˇ≥_˚π_exãnsi⁄
 58

	)

340 
	#OBJ_√tsˇ≥_˚π_exãnsi⁄
 
OBJ_√tsˇ≥
,1L

	)

342 
	#SN_√tsˇ≥_d©a_ty≥
 "nsD©aTy≥"

	)

343 
	#LN_√tsˇ≥_d©a_ty≥
 "Nësˇ≥ D©®Ty≥"

	)

344 
	#NID_√tsˇ≥_d©a_ty≥
 59

	)

345 
	#OBJ_√tsˇ≥_d©a_ty≥
 
OBJ_√tsˇ≥
,2L

	)

347 
	#SN_des_ede_cfb64
 "DES-EDE-CFB"

	)

348 
	#LN_des_ede_cfb64
 "des-ede-cfb"

	)

349 
	#NID_des_ede_cfb64
 60

	)

351 
	#SN_des_ede3_cfb64
 "DES-EDE3-CFB"

	)

352 
	#LN_des_ede3_cfb64
 "des-ede3-cfb"

	)

353 
	#NID_des_ede3_cfb64
 61

	)

355 
	#SN_des_ede_ofb64
 "DES-EDE-OFB"

	)

356 
	#LN_des_ede_ofb64
 "des-ede-ofb"

	)

357 
	#NID_des_ede_ofb64
 62

	)

359 
	#SN_des_ede3_ofb64
 "DES-EDE3-OFB"

	)

360 
	#LN_des_ede3_ofb64
 "des-ede3-ofb"

	)

361 
	#NID_des_ede3_ofb64
 63

	)

364 
	#SN_sha1
 "SHA1"

	)

365 
	#LN_sha1
 "sha1"

	)

366 
	#NID_sha1
 64

	)

367 
	#OBJ_sha1
 
OBJ_Æg‹ôhm
,26L

	)

371 
	#SN_sha1WôhRSAEn¸y±i⁄
 "RSA-SHA1"

	)

372 
	#LN_sha1WôhRSAEn¸y±i⁄
 "sha1WôhRSAEn¸y±i⁄"

	)

373 
	#NID_sha1WôhRSAEn¸y±i⁄
 65

	)

374 
	#OBJ_sha1WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,5L

	)

376 
	#SN_dßWôhSHA
 "DSA-SHA"

	)

377 
	#LN_dßWôhSHA
 "dßWôhSHA"

	)

378 
	#NID_dßWôhSHA
 66

	)

379 
	#OBJ_dßWôhSHA
 
OBJ_Æg‹ôhm
,13L

	)

381 
	#SN_dß_2
 "DSA-ﬁd"

	)

382 
	#LN_dß_2
 "dßEn¸y±i⁄-ﬁd"

	)

383 
	#NID_dß_2
 67

	)

384 
	#OBJ_dß_2
 
OBJ_Æg‹ôhm
,12L

	)

387 
	#SN_pbeWôhSHA1AndRC2_CBC
 "PBE-SHA1-RC2-64"

	)

388 
	#LN_pbeWôhSHA1AndRC2_CBC
 "pbeWôhSHA1AndRC2-CBC"

	)

389 
	#NID_pbeWôhSHA1AndRC2_CBC
 68

	)

390 
	#OBJ_pbeWôhSHA1AndRC2_CBC
 
OBJ_pkcs
,5L,11L

	)

397 
	#LN_id_pbkdf2
 "PBKDF2"

	)

398 
	#NID_id_pbkdf2
 69

	)

399 
	#OBJ_id_pbkdf2
 
OBJ_pkcs
,5L,12L

	)

401 
	#SN_dßWôhSHA1_2
 "DSA-SHA1-ﬁd"

	)

402 
	#LN_dßWôhSHA1_2
 "dßWôhSHA1-ﬁd"

	)

403 
	#NID_dßWôhSHA1_2
 70

	)

405 
	#OBJ_dßWôhSHA1_2
 
OBJ_Æg‹ôhm
,27L

	)

407 
	#SN_√tsˇ≥_˚π_ty≥
 "nsCîtTy≥"

	)

408 
	#LN_√tsˇ≥_˚π_ty≥
 "Nësˇ≥ CîàTy≥"

	)

409 
	#NID_√tsˇ≥_˚π_ty≥
 71

	)

410 
	#OBJ_√tsˇ≥_˚π_ty≥
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,1L

	)

412 
	#SN_√tsˇ≥_ba£_uæ
 "nsBa£Uæ"

	)

413 
	#LN_√tsˇ≥_ba£_uæ
 "Nësˇ≥ Ba£ Uæ"

	)

414 
	#NID_√tsˇ≥_ba£_uæ
 72

	)

415 
	#OBJ_√tsˇ≥_ba£_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,2L

	)

417 
	#SN_√tsˇ≥_ªvoˇti⁄_uæ
 "nsRevoˇti⁄Uæ"

	)

418 
	#LN_√tsˇ≥_ªvoˇti⁄_uæ
 "Nësˇ≥ Revoˇti⁄ Uæ"

	)

419 
	#NID_√tsˇ≥_ªvoˇti⁄_uæ
 73

	)

420 
	#OBJ_√tsˇ≥_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,3L

	)

422 
	#SN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "nsCaRevoˇti⁄Uæ"

	)

423 
	#LN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "Nësˇ≥ CA Revoˇti⁄ Uæ"

	)

424 
	#NID_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 74

	)

425 
	#OBJ_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,4L

	)

427 
	#SN_√tsˇ≥_ª√wÆ_uæ
 "nsRíewÆUæ"

	)

428 
	#LN_√tsˇ≥_ª√wÆ_uæ
 "Nësˇ≥ RíewÆ Uæ"

	)

429 
	#NID_√tsˇ≥_ª√wÆ_uæ
 75

	)

430 
	#OBJ_√tsˇ≥_ª√wÆ_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,7L

	)

432 
	#SN_√tsˇ≥_ˇ_pﬁicy_uæ
 "nsCaPﬁicyUæ"

	)

433 
	#LN_√tsˇ≥_ˇ_pﬁicy_uæ
 "Nësˇ≥ CA Pﬁicy Uæ"

	)

434 
	#NID_√tsˇ≥_ˇ_pﬁicy_uæ
 76

	)

435 
	#OBJ_√tsˇ≥_ˇ_pﬁicy_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,8L

	)

437 
	#SN_√tsˇ≥_s¶_£rvî_«me
 "nsS¶SîvîName"

	)

438 
	#LN_√tsˇ≥_s¶_£rvî_«me
 "Nësˇ≥ SSL Sîvî Name"

	)

439 
	#NID_√tsˇ≥_s¶_£rvî_«me
 77

	)

440 
	#OBJ_√tsˇ≥_s¶_£rvî_«me
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,12L

	)

442 
	#SN_√tsˇ≥_commít
 "nsCommít"

	)

443 
	#LN_√tsˇ≥_commít
 "Nësˇ≥ Commít"

	)

444 
	#NID_√tsˇ≥_commít
 78

	)

445 
	#OBJ_√tsˇ≥_commít
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,13L

	)

447 
	#SN_√tsˇ≥_˚π_£quí˚
 "nsCîtSequí˚"

	)

448 
	#LN_√tsˇ≥_˚π_£quí˚
 "Nësˇ≥ Cîtifiˇã Sequí˚"

	)

449 
	#NID_√tsˇ≥_˚π_£quí˚
 79

	)

450 
	#OBJ_√tsˇ≥_˚π_£quí˚
 
OBJ_√tsˇ≥_d©a_ty≥
,5L

	)

452 
	#SN_desx_cbc
 "DESX-CBC"

	)

453 
	#LN_desx_cbc
 "desx-cbc"

	)

454 
	#NID_desx_cbc
 80

	)

456 
	#SN_id_˚
 "id-˚"

	)

457 
	#NID_id_˚
 81

	)

458 
	#OBJ_id_˚
 2L,5L,29L

	)

460 
	#SN_subje˘_key_idítifõr
 "subje˘KeyIdítifõr"

	)

461 
	#LN_subje˘_key_idítifõr
 "X509v3 Subje˘ Key Idítifõr"

	)

462 
	#NID_subje˘_key_idítifõr
 82

	)

463 
	#OBJ_subje˘_key_idítifõr
 
OBJ_id_˚
,14L

	)

465 
	#SN_key_ußge
 "keyUßge"

	)

466 
	#LN_key_ußge
 "X509v3 Key Ußge"

	)

467 
	#NID_key_ußge
 83

	)

468 
	#OBJ_key_ußge
 
OBJ_id_˚
,15L

	)

470 
	#SN_¥iv©e_key_ußge_≥riod
 "¥iv©eKeyUßgePîiod"

	)

471 
	#LN_¥iv©e_key_ußge_≥riod
 "X509v3 Priv©êKey UßgêPîiod"

	)

472 
	#NID_¥iv©e_key_ußge_≥riod
 84

	)

473 
	#OBJ_¥iv©e_key_ußge_≥riod
 
OBJ_id_˚
,16L

	)

475 
	#SN_subje˘_Æt_«me
 "subje˘A…Name"

	)

476 
	#LN_subje˘_Æt_«me
 "X509v3 Subje˘ A…î«tivêName"

	)

477 
	#NID_subje˘_Æt_«me
 85

	)

478 
	#OBJ_subje˘_Æt_«me
 
OBJ_id_˚
,17L

	)

480 
	#SN_issuî_Æt_«me
 "issuîA…Name"

	)

481 
	#LN_issuî_Æt_«me
 "X509v3 Issuî A…î«tivêName"

	)

482 
	#NID_issuî_Æt_«me
 86

	)

483 
	#OBJ_issuî_Æt_«me
 
OBJ_id_˚
,18L

	)

485 
	#SN_basic_c⁄°øöts
 "basicC⁄°øöts"

	)

486 
	#LN_basic_c⁄°øöts
 "X509v3 Basi¯C⁄°øöts"

	)

487 
	#NID_basic_c⁄°øöts
 87

	)

488 
	#OBJ_basic_c⁄°øöts
 
OBJ_id_˚
,19L

	)

490 
	#SN_¸l_numbî
 "¸lNumbî"

	)

491 
	#LN_¸l_numbî
 "X509v3 CRL Numbî"

	)

492 
	#NID_¸l_numbî
 88

	)

493 
	#OBJ_¸l_numbî
 
OBJ_id_˚
,20L

	)

495 
	#SN_˚πifiˇã_pﬁicõs
 "˚πifiˇãPﬁicõs"

	)

496 
	#LN_˚πifiˇã_pﬁicõs
 "X509v3 Cîtifiˇã Pﬁicõs"

	)

497 
	#NID_˚πifiˇã_pﬁicõs
 89

	)

498 
	#OBJ_˚πifiˇã_pﬁicõs
 
OBJ_id_˚
,32L

	)

500 
	#SN_auth‹ôy_key_idítifõr
 "auth‹ôyKeyIdítifõr"

	)

501 
	#LN_auth‹ôy_key_idítifõr
 "X509v3 Auth‹ôy Key Idítifõr"

	)

502 
	#NID_auth‹ôy_key_idítifõr
 90

	)

503 
	#OBJ_auth‹ôy_key_idítifõr
 
OBJ_id_˚
,35L

	)

505 
	#SN_bf_cbc
 "BF-CBC"

	)

506 
	#LN_bf_cbc
 "bf-cbc"

	)

507 
	#NID_bf_cbc
 91

	)

508 
	#OBJ_bf_cbc
 1L,3L,6L,1L,4L,1L,3029L,1L,2L

	)

510 
	#SN_bf_ecb
 "BF-ECB"

	)

511 
	#LN_bf_ecb
 "bf-ecb"

	)

512 
	#NID_bf_ecb
 92

	)

514 
	#SN_bf_cfb64
 "BF-CFB"

	)

515 
	#LN_bf_cfb64
 "bf-cfb"

	)

516 
	#NID_bf_cfb64
 93

	)

518 
	#SN_bf_ofb64
 "BF-OFB"

	)

519 
	#LN_bf_ofb64
 "bf-ofb"

	)

520 
	#NID_bf_ofb64
 94

	)

522 
	#SN_mdc2
 "MDC2"

	)

523 
	#LN_mdc2
 "mdc2"

	)

524 
	#NID_mdc2
 95

	)

525 
	#OBJ_mdc2
 2L,5L,8L,3L,101L

	)

528 
	#SN_mdc2WôhRSA
 "RSA-MDC2"

	)

529 
	#LN_mdc2WôhRSA
 "mdc2wôhRSA"

	)

530 
	#NID_mdc2WôhRSA
 96

	)

531 
	#OBJ_mdc2WôhRSA
 2L,5L,8L,3L,100L

	)

533 
	#SN_rc4_40
 "RC4-40"

	)

534 
	#LN_rc4_40
 "rc4-40"

	)

535 
	#NID_rc4_40
 97

	)

537 
	#SN_rc2_40_cbc
 "RC2-40-CBC"

	)

538 
	#LN_rc2_40_cbc
 "rc2-40-cbc"

	)

539 
	#NID_rc2_40_cbc
 98

	)

541 
	#SN_givíName
 "G"

	)

542 
	#LN_givíName
 "givíName"

	)

543 
	#NID_givíName
 99

	)

544 
	#OBJ_givíName
 
OBJ_X509
,42L

	)

546 
	#SN_su∫ame
 "S"

	)

547 
	#LN_su∫ame
 "su∫ame"

	)

548 
	#NID_su∫ame
 100

	)

549 
	#OBJ_su∫ame
 
OBJ_X509
,4L

	)

551 
	#SN_öôüls
 "I"

	)

552 
	#LN_öôüls
 "öôüls"

	)

553 
	#NID_öôüls
 101

	)

554 
	#OBJ_öôüls
 
OBJ_X509
,43L

	)

556 
	#SN_uniqueIdítifõr
 "UID"

	)

557 
	#LN_uniqueIdítifõr
 "uniqueIdítifõr"

	)

558 
	#NID_uniqueIdítifõr
 102

	)

559 
	#OBJ_uniqueIdítifõr
 
OBJ_X509
,45L

	)

561 
	#SN_¸l_di°ributi⁄_poöts
 "¸lDi°ributi⁄Poöts"

	)

562 
	#LN_¸l_di°ributi⁄_poöts
 "X509v3 CRL Di°ributi⁄ Poöts"

	)

563 
	#NID_¸l_di°ributi⁄_poöts
 103

	)

564 
	#OBJ_¸l_di°ributi⁄_poöts
 
OBJ_id_˚
,31L

	)

566 
	#SN_md5WôhRSA
 "RSA-NP-MD5"

	)

567 
	#LN_md5WôhRSA
 "md5WôhRSA"

	)

568 
	#NID_md5WôhRSA
 104

	)

569 
	#OBJ_md5WôhRSA
 
OBJ_Æg‹ôhm
,3L

	)

571 
	#SN_£rülNumbî
 "SN"

	)

572 
	#LN_£rülNumbî
 "£rülNumbî"

	)

573 
	#NID_£rülNumbî
 105

	)

574 
	#OBJ_£rülNumbî
 
OBJ_X509
,5L

	)

576 
	#SN_tôÀ
 "T"

	)

577 
	#LN_tôÀ
 "tôÀ"

	)

578 
	#NID_tôÀ
 106

	)

579 
	#OBJ_tôÀ
 
OBJ_X509
,12L

	)

581 
	#SN_des¸ùti⁄
 "D"

	)

582 
	#LN_des¸ùti⁄
 "des¸ùti⁄"

	)

583 
	#NID_des¸ùti⁄
 107

	)

584 
	#OBJ_des¸ùti⁄
 
OBJ_X509
,13L

	)

587 
	#SN_ˇ°5_cbc
 "CAST5-CBC"

	)

588 
	#LN_ˇ°5_cbc
 "ˇ°5-cbc"

	)

589 
	#NID_ˇ°5_cbc
 108

	)

590 
	#OBJ_ˇ°5_cbc
 1L,2L,840L,113533L,7L,66L,10L

	)

592 
	#SN_ˇ°5_ecb
 "CAST5-ECB"

	)

593 
	#LN_ˇ°5_ecb
 "ˇ°5-ecb"

	)

594 
	#NID_ˇ°5_ecb
 109

	)

596 
	#SN_ˇ°5_cfb64
 "CAST5-CFB"

	)

597 
	#LN_ˇ°5_cfb64
 "ˇ°5-cfb"

	)

598 
	#NID_ˇ°5_cfb64
 110

	)

600 
	#SN_ˇ°5_ofb64
 "CAST5-OFB"

	)

601 
	#LN_ˇ°5_ofb64
 "ˇ°5-ofb"

	)

602 
	#NID_ˇ°5_ofb64
 111

	)

604 
	#LN_pbeWôhMD5AndCa°5_CBC
 "pbeWôhMD5AndCa°5CBC"

	)

605 
	#NID_pbeWôhMD5AndCa°5_CBC
 112

	)

606 
	#OBJ_pbeWôhMD5AndCa°5_CBC
 1L,2L,840L,113533L,7L,66L,12L

	)

613 
	#SN_dßWôhSHA1
 "DSA-SHA1"

	)

614 
	#LN_dßWôhSHA1
 "dßWôhSHA1"

	)

615 
	#NID_dßWôhSHA1
 113

	)

616 
	#OBJ_dßWôhSHA1
 1L,2L,840L,10040L,4L,3L

	)

618 
	#NID_md5_sha1
 114

	)

619 
	#SN_md5_sha1
 "MD5-SHA1"

	)

620 
	#LN_md5_sha1
 "md5-sha1"

	)

622 
	#SN_sha1WôhRSA
 "RSA-SHA1-2"

	)

623 
	#LN_sha1WôhRSA
 "sha1WôhRSA"

	)

624 
	#NID_sha1WôhRSA
 115

	)

625 
	#OBJ_sha1WôhRSA
 
OBJ_Æg‹ôhm
,29L

	)

627 
	#SN_dß
 "DSA"

	)

628 
	#LN_dß
 "dßEn¸y±i⁄"

	)

629 
	#NID_dß
 116

	)

630 
	#OBJ_dß
 1L,2L,840L,10040L,4L,1L

	)

632 
	#SN_rùemd160
 "RIPEMD160"

	)

633 
	#LN_rùemd160
 "rùemd160"

	)

634 
	#NID_rùemd160
 117

	)

635 
	#OBJ_rùemd160
 1L,3L,36L,3L,2L,1L

	)

641 
	#SN_rùemd160WôhRSA
 "RSA-RIPEMD160"

	)

642 
	#LN_rùemd160WôhRSA
 "rùemd160WôhRSA"

	)

643 
	#NID_rùemd160WôhRSA
 119

	)

644 
	#OBJ_rùemd160WôhRSA
 1L,3L,36L,3L,3L,1L,2L

	)

655 
	#SN_rc5_cbc
 "RC5-CBC"

	)

656 
	#LN_rc5_cbc
 "rc5-cbc"

	)

657 
	#NID_rc5_cbc
 120

	)

658 
	#OBJ_rc5_cbc
 
OBJ_rßdsi
,3L,8L

	)

660 
	#SN_rc5_ecb
 "RC5-ECB"

	)

661 
	#LN_rc5_ecb
 "rc5-ecb"

	)

662 
	#NID_rc5_ecb
 121

	)

664 
	#SN_rc5_cfb64
 "RC5-CFB"

	)

665 
	#LN_rc5_cfb64
 "rc5-cfb"

	)

666 
	#NID_rc5_cfb64
 122

	)

668 
	#SN_rc5_ofb64
 "RC5-OFB"

	)

669 
	#LN_rc5_ofb64
 "rc5-ofb"

	)

670 
	#NID_rc5_ofb64
 123

	)

672 
	#SN_æe_com¥essi⁄
 "RLE"

	)

673 
	#LN_æe_com¥essi⁄
 "ru¿Àngth com¥essi⁄"

	)

674 
	#NID_æe_com¥essi⁄
 124

	)

675 
	#OBJ_æe_com¥essi⁄
 1L,1L,1L,1L,666L,1L

	)

677 
	#SN_zlib_com¥essi⁄
 "ZLIB"

	)

678 
	#LN_zlib_com¥essi⁄
 "zlib com¥essi⁄"

	)

679 
	#NID_zlib_com¥essi⁄
 125

	)

680 
	#OBJ_zlib_com¥essi⁄
 1L,1L,1L,1L,666L,2L

	)

682 
	#SN_ext_key_ußge
 "exãndedKeyUßge"

	)

683 
	#LN_ext_key_ußge
 "X509v3 Exãnded Key Ußge"

	)

684 
	#NID_ext_key_ußge
 126

	)

685 
	#OBJ_ext_key_ußge
 
OBJ_id_˚
,37

	)

687 
	#SN_id_pkix
 "PKIX"

	)

688 
	#NID_id_pkix
 127

	)

689 
	#OBJ_id_pkix
 1L,3L,6L,1L,5L,5L,7L

	)

691 
	#SN_id_kp
 "id-kp"

	)

692 
	#NID_id_kp
 128

	)

693 
	#OBJ_id_kp
 
OBJ_id_pkix
,3L

	)

697 
	#SN_£rvî_auth
 "£rvîAuth"

	)

698 
	#LN_£rvî_auth
 "TLS Web Sîvî Authítiˇti⁄"

	)

699 
	#NID_£rvî_auth
 129

	)

700 
	#OBJ_£rvî_auth
 
OBJ_id_kp
,1L

	)

702 
	#SN_˛õ¡_auth
 "˛õ¡Auth"

	)

703 
	#LN_˛õ¡_auth
 "TLS Web Clõ¡ Authítiˇti⁄"

	)

704 
	#NID_˛õ¡_auth
 130

	)

705 
	#OBJ_˛õ¡_auth
 
OBJ_id_kp
,2L

	)

707 
	#SN_code_sign
 "codeSignög"

	)

708 
	#LN_code_sign
 "CodêSignög"

	)

709 
	#NID_code_sign
 131

	)

710 
	#OBJ_code_sign
 
OBJ_id_kp
,3L

	)

712 
	#SN_emaû_¥Ÿe˘
 "emaûPrŸe˘i⁄"

	)

713 
	#LN_emaû_¥Ÿe˘
 "E-maû PrŸe˘i⁄"

	)

714 
	#NID_emaû_¥Ÿe˘
 132

	)

715 
	#OBJ_emaû_¥Ÿe˘
 
OBJ_id_kp
,4L

	)

717 
	#SN_time_°amp
 "timeSèmpög"

	)

718 
	#LN_time_°amp
 "TimêSèmpög"

	)

719 
	#NID_time_°amp
 133

	)

720 
	#OBJ_time_°amp
 
OBJ_id_kp
,8L

	)

724 
	#SN_ms_code_öd
 "msCodeInd"

	)

725 
	#LN_ms_code_öd
 "Mi¸oso· IndividuÆ CodêSignög"

	)

726 
	#NID_ms_code_öd
 134

	)

727 
	#OBJ_ms_code_öd
 1L,3L,6L,1L,4L,1L,311L,2L,1L,21L

	)

729 
	#SN_ms_code_com
 "msCodeCom"

	)

730 
	#LN_ms_code_com
 "Mi¸oso· Commîcü»CodêSignög"

	)

731 
	#NID_ms_code_com
 135

	)

732 
	#OBJ_ms_code_com
 1L,3L,6L,1L,4L,1L,311L,2L,1L,22L

	)

734 
	#SN_ms_˘l_sign
 "msCTLSign"

	)

735 
	#LN_ms_˘l_sign
 "Mi¸oso· Tru° Li° Signög"

	)

736 
	#NID_ms_˘l_sign
 136

	)

737 
	#OBJ_ms_˘l_sign
 1L,3L,6L,1L,4L,1L,311L,10L,3L,1L

	)

739 
	#SN_ms_sgc
 "msSGC"

	)

740 
	#LN_ms_sgc
 "Mi¸oso· Sîvî G©ed Cry±o"

	)

741 
	#NID_ms_sgc
 137

	)

742 
	#OBJ_ms_sgc
 1L,3L,6L,1L,4L,1L,311L,10L,3L,3L

	)

744 
	#SN_ms_efs
 "msEFS"

	)

745 
	#LN_ms_efs
 "Mi¸oso· En¸y±ed FûêSy°em"

	)

746 
	#NID_ms_efs
 138

	)

747 
	#OBJ_ms_efs
 1L,3L,6L,1L,4L,1L,311L,10L,3L,4L

	)

751 
	#SN_ns_sgc
 "nsSGC"

	)

752 
	#LN_ns_sgc
 "Nësˇ≥ Sîvî G©ed Cry±o"

	)

753 
	#NID_ns_sgc
 139

	)

754 
	#OBJ_ns_sgc
 
OBJ_√tsˇ≥
,4L,1L

	)

756 
	#SN_dñè_¸l
 "dñèCRL"

	)

757 
	#LN_dñè_¸l
 "X509v3 Dñè CRL Indiˇt‹"

	)

758 
	#NID_dñè_¸l
 140

	)

759 
	#OBJ_dñè_¸l
 
OBJ_id_˚
,27L

	)

761 
	#SN_¸l_ªas⁄
 "CRLRós⁄"

	)

762 
	#LN_¸l_ªas⁄
 "CRL Rós⁄ Code"

	)

763 
	#NID_¸l_ªas⁄
 141

	)

764 
	#OBJ_¸l_ªas⁄
 
OBJ_id_˚
,21L

	)

766 
	#SN_övÆidôy_d©e
 "övÆidôyD©e"

	)

767 
	#LN_övÆidôy_d©e
 "InvÆidôy D©e"

	)

768 
	#NID_övÆidôy_d©e
 142

	)

769 
	#OBJ_övÆidôy_d©e
 
OBJ_id_˚
,24L

	)

771 
	#SN_sx√t
 "SXNëID"

	)

772 
	#LN_sx√t
 "Så⁄g Exå™ë ID"

	)

773 
	#NID_sx√t
 143

	)

774 
	#OBJ_sx√t
 1L,3L,101L,1L,4L,1L

	)

778 
	#OBJ_pkcs12
 
OBJ_pkcs
,12L

	)

779 
	#OBJ_pkcs12_pbeids
 
OBJ_pkcs12
, 1

	)

781 
	#SN_pbe_WôhSHA1And128BôRC4
 "PBE-SHA1-RC4-128"

	)

782 
	#LN_pbe_WôhSHA1And128BôRC4
 "pbeWôhSHA1And128BôRC4"

	)

783 
	#NID_pbe_WôhSHA1And128BôRC4
 144

	)

784 
	#OBJ_pbe_WôhSHA1And128BôRC4
 
OBJ_pkcs12_pbeids
, 1L

	)

786 
	#SN_pbe_WôhSHA1And40BôRC4
 "PBE-SHA1-RC4-40"

	)

787 
	#LN_pbe_WôhSHA1And40BôRC4
 "pbeWôhSHA1And40BôRC4"

	)

788 
	#NID_pbe_WôhSHA1And40BôRC4
 145

	)

789 
	#OBJ_pbe_WôhSHA1And40BôRC4
 
OBJ_pkcs12_pbeids
, 2L

	)

791 
	#SN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "PBE-SHA1-3DES"

	)

792 
	#LN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "pbeWôhSHA1And3-KeyTrùÀDES-CBC"

	)

793 
	#NID_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 146

	)

794 
	#OBJ_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
, 3L

	)

796 
	#SN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "PBE-SHA1-2DES"

	)

797 
	#LN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "pbeWôhSHA1And2-KeyTrùÀDES-CBC"

	)

798 
	#NID_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 147

	)

799 
	#OBJ_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
, 4L

	)

801 
	#SN_pbe_WôhSHA1And128BôRC2_CBC
 "PBE-SHA1-RC2-128"

	)

802 
	#LN_pbe_WôhSHA1And128BôRC2_CBC
 "pbeWôhSHA1And128BôRC2-CBC"

	)

803 
	#NID_pbe_WôhSHA1And128BôRC2_CBC
 148

	)

804 
	#OBJ_pbe_WôhSHA1And128BôRC2_CBC
 
OBJ_pkcs12_pbeids
, 5L

	)

806 
	#SN_pbe_WôhSHA1And40BôRC2_CBC
 "PBE-SHA1-RC2-40"

	)

807 
	#LN_pbe_WôhSHA1And40BôRC2_CBC
 "pbeWôhSHA1And40BôRC2-CBC"

	)

808 
	#NID_pbe_WôhSHA1And40BôRC2_CBC
 149

	)

809 
	#OBJ_pbe_WôhSHA1And40BôRC2_CBC
 
OBJ_pkcs12_pbeids
, 6L

	)

811 
	#OBJ_pkcs12_Vîsi⁄1
 
OBJ_pkcs12
, 10L

	)

813 
	#OBJ_pkcs12_BagIds
 
OBJ_pkcs12_Vîsi⁄1
, 1L

	)

815 
	#LN_keyBag
 "keyBag"

	)

816 
	#NID_keyBag
 150

	)

817 
	#OBJ_keyBag
 
OBJ_pkcs12_BagIds
, 1L

	)

819 
	#LN_pkcs8ShroudedKeyBag
 "pkcs8ShroudedKeyBag"

	)

820 
	#NID_pkcs8ShroudedKeyBag
 151

	)

821 
	#OBJ_pkcs8ShroudedKeyBag
 
OBJ_pkcs12_BagIds
, 2L

	)

823 
	#LN_˚πBag
 "˚πBag"

	)

824 
	#NID_˚πBag
 152

	)

825 
	#OBJ_˚πBag
 
OBJ_pkcs12_BagIds
, 3L

	)

827 
	#LN_¸lBag
 "¸lBag"

	)

828 
	#NID_¸lBag
 153

	)

829 
	#OBJ_¸lBag
 
OBJ_pkcs12_BagIds
, 4L

	)

831 
	#LN_£¸ëBag
 "£¸ëBag"

	)

832 
	#NID_£¸ëBag
 154

	)

833 
	#OBJ_£¸ëBag
 
OBJ_pkcs12_BagIds
, 5L

	)

835 
	#LN_ß„C⁄ã¡sBag
 "ß„C⁄ã¡sBag"

	)

836 
	#NID_ß„C⁄ã¡sBag
 155

	)

837 
	#OBJ_ß„C⁄ã¡sBag
 
OBJ_pkcs12_BagIds
, 6L

	)

839 
	#LN_‰õndlyName
 "‰õndlyName"

	)

840 
	#NID_‰õndlyName
 156

	)

841 
	#OBJ_‰õndlyName
 
OBJ_pkcs9
, 20L

	)

843 
	#LN_loˇlKeyID
 "loˇlKeyID"

	)

844 
	#NID_loˇlKeyID
 157

	)

845 
	#OBJ_loˇlKeyID
 
OBJ_pkcs9
, 21L

	)

847 
	#OBJ_˚πTy≥s
 
OBJ_pkcs9
, 22L

	)

849 
	#LN_x509Cîtifiˇã
 "x509Cîtifiˇã"

	)

850 
	#NID_x509Cîtifiˇã
 158

	)

851 
	#OBJ_x509Cîtifiˇã
 
OBJ_˚πTy≥s
, 1L

	)

853 
	#LN_sdsiCîtifiˇã
 "sdsiCîtifiˇã"

	)

854 
	#NID_sdsiCîtifiˇã
 159

	)

855 
	#OBJ_sdsiCîtifiˇã
 
OBJ_˚πTy≥s
, 2L

	)

857 
	#OBJ_¸lTy≥s
 
OBJ_pkcs9
, 23L

	)

859 
	#LN_x509Cæ
 "x509Cæ"

	)

860 
	#NID_x509Cæ
 160

	)

861 
	#OBJ_x509Cæ
 
OBJ_¸lTy≥s
, 1L

	)

865 
	#LN_pbes2
 "PBES2"

	)

866 
	#NID_pbes2
 161

	)

867 
	#OBJ_pbes2
 
OBJ_pkcs
,5L,13L

	)

869 
	#LN_pbmac1
 "PBMAC1"

	)

870 
	#NID_pbmac1
 162

	)

871 
	#OBJ_pbmac1
 
OBJ_pkcs
,5L,14L

	)

873 
	#LN_hmacWôhSHA1
 "hmacWôhSHA1"

	)

874 
	#NID_hmacWôhSHA1
 163

	)

875 
	#OBJ_hmacWôhSHA1
 
OBJ_rßdsi
,2L,7L

	)

879 
	#LN_id_qt_˝s
 "Pﬁicy QuÆifõ∏CPS"

	)

880 
	#SN_id_qt_˝s
 "id-qt-˝s"

	)

881 
	#NID_id_qt_˝s
 164

	)

882 
	#OBJ_id_qt_˝s
 
OBJ_id_pkix
,2L,1L

	)

884 
	#LN_id_qt_unŸi˚
 "Pﬁicy QuÆifõ∏U£∏NŸi˚"

	)

885 
	#SN_id_qt_unŸi˚
 "id-qt-unŸi˚"

	)

886 
	#NID_id_qt_unŸi˚
 165

	)

887 
	#OBJ_id_qt_unŸi˚
 
OBJ_id_pkix
,2L,2L

	)

889 
	#SN_rc2_64_cbc
 "RC2-64-CBC"

	)

890 
	#LN_rc2_64_cbc
 "rc2-64-cbc"

	)

891 
	#NID_rc2_64_cbc
 166

	)

893 
	#SN_SMIMEC≠abûôõs
 "SMIME-CAPS"

	)

894 
	#LN_SMIMEC≠abûôõs
 "S/MIME C≠abûôõs"

	)

895 
	#NID_SMIMEC≠abûôõs
 167

	)

896 
	#OBJ_SMIMEC≠abûôõs
 
OBJ_pkcs9
,15L

	)

898 
	#SN_pbeWôhMD2AndRC2_CBC
 "PBE-MD2-RC2-64"

	)

899 
	#LN_pbeWôhMD2AndRC2_CBC
 "pbeWôhMD2AndRC2-CBC"

	)

900 
	#NID_pbeWôhMD2AndRC2_CBC
 168

	)

901 
	#OBJ_pbeWôhMD2AndRC2_CBC
 
OBJ_pkcs
,5L,4L

	)

903 
	#SN_pbeWôhMD5AndRC2_CBC
 "PBE-MD5-RC2-64"

	)

904 
	#LN_pbeWôhMD5AndRC2_CBC
 "pbeWôhMD5AndRC2-CBC"

	)

905 
	#NID_pbeWôhMD5AndRC2_CBC
 169

	)

906 
	#OBJ_pbeWôhMD5AndRC2_CBC
 
OBJ_pkcs
,5L,6L

	)

908 
	#SN_pbeWôhSHA1AndDES_CBC
 "PBE-SHA1-DES"

	)

909 
	#LN_pbeWôhSHA1AndDES_CBC
 "pbeWôhSHA1AndDES-CBC"

	)

910 
	#NID_pbeWôhSHA1AndDES_CBC
 170

	)

911 
	#OBJ_pbeWôhSHA1AndDES_CBC
 
OBJ_pkcs
,5L,10L

	)

915 
	#LN_ms_ext_ªq
 "Mi¸oso· Exãnsi⁄ Reque°"

	)

916 
	#SN_ms_ext_ªq
 "msExtReq"

	)

917 
	#NID_ms_ext_ªq
 171

	)

918 
	#OBJ_ms_ext_ªq
 1L,3L,6L,1L,4L,1L,311L,2L,1L,14L

	)

920 
	#LN_ext_ªq
 "Exãnsi⁄ Reque°"

	)

921 
	#SN_ext_ªq
 "extReq"

	)

922 
	#NID_ext_ªq
 172

	)

923 
	#OBJ_ext_ªq
 
OBJ_pkcs9
,14L

	)

925 
	#SN_«me
 "«me"

	)

926 
	#LN_«me
 "«me"

	)

927 
	#NID_«me
 173

	)

928 
	#OBJ_«me
 
OBJ_X509
,41L

	)

930 
	#SN_dnQuÆifõr
 "dnQuÆifõr"

	)

931 
	#LN_dnQuÆifõr
 "dnQuÆifõr"

	)

932 
	#NID_dnQuÆifõr
 174

	)

933 
	#OBJ_dnQuÆifõr
 
OBJ_X509
,46L

	)

935 
	#SN_id_≥
 "id-≥"

	)

936 
	#NID_id_≥
 175

	)

937 
	#OBJ_id_≥
 
OBJ_id_pkix
,1L

	)

939 
	#SN_id_ad
 "id-ad"

	)

940 
	#NID_id_ad
 176

	)

941 
	#OBJ_id_ad
 
OBJ_id_pkix
,48L

	)

943 
	#SN_öfo_ac˚ss
 "auth‹ôyInfoAc˚ss"

	)

944 
	#LN_öfo_ac˚ss
 "Auth‹ôy Inf‹m©i⁄ Ac˚ss"

	)

945 
	#NID_öfo_ac˚ss
 177

	)

946 
	#OBJ_öfo_ac˚ss
 
OBJ_id_≥
,1L

	)

948 
	#SN_ad_OCSP
 "OCSP"

	)

949 
	#LN_ad_OCSP
 "OCSP"

	)

950 
	#NID_ad_OCSP
 178

	)

951 
	#OBJ_ad_OCSP
 
OBJ_id_ad
,1L

	)

953 
	#SN_ad_ˇ_issuîs
 "ˇIssuîs"

	)

954 
	#LN_ad_ˇ_issuîs
 "CA Issuîs"

	)

955 
	#NID_ad_ˇ_issuîs
 179

	)

956 
	#OBJ_ad_ˇ_issuîs
 
OBJ_id_ad
,2L

	)

958 
	#SN_OCSP_sign
 "OCSPSignög"

	)

959 
	#LN_OCSP_sign
 "OCSP Signög"

	)

960 
	#NID_OCSP_sign
 180

	)

961 
	#OBJ_OCSP_sign
 
OBJ_id_kp
,9L

	)

964 
	~<›ís¶/bio.h
>

965 
	~<›ís¶/a¢1.h
>

967 
	#OBJ_NAME_TYPE_UNDEF
 0x00

	)

968 
	#OBJ_NAME_TYPE_MD_METH
 0x01

	)

969 
	#OBJ_NAME_TYPE_CIPHER_METH
 0x02

	)

970 
	#OBJ_NAME_TYPE_PKEY_METH
 0x03

	)

971 
	#OBJ_NAME_TYPE_COMP_METH
 0x04

	)

972 
	#OBJ_NAME_TYPE_NUM
 0x05

	)

974 
	#OBJ_NAME_ALIAS
 0x8000

	)

976 
	#OBJ_BSEARCH_VALUE_ON_NOMATCH
 0x01

	)

977 
	#OBJ_BSEARCH_FIRST_VALUE_ON_MATCH
 0x02

	)

980 #ifde‡ 
__˝lu•lus


984 
	sobj_«me_°
 {

985 
ty≥
;

986 
Æüs
;

987 c⁄° *
«me
;

988 c⁄° *
d©a
;

989 } 
	tOBJ_NAME
;

991 
	#OBJ_¸óã_™d_add_obje˘
(
a
,
b
,
c
Ë
	`OBJ_¸óã
◊,b,c)

	)

993 
OBJ_NAME_öô
();

994 
OBJ_NAME_√w_ödex
((*
hash_func
) (const *),

995 (*
cmp_func
) (const *, const *),

996 (*
‰ì_func
) (const *, , const *));

997 c⁄° *
OBJ_NAME_gë
(c⁄° *
«me
, 
ty≥
);

998 
OBJ_NAME_add
(c⁄° *
«me
, 
ty≥
, c⁄° *
d©a
);

999 
OBJ_NAME_ªmove
(c⁄° *
«me
, 
ty≥
);

1000 
OBJ_NAME_˛ónup
(
ty≥
);

1001 
OBJ_NAME_do_Æl
(
ty≥
, (*
‚
Ë(c⁄° 
OBJ_NAME
 *, *
¨g
),

1002 *
¨g
);

1003 
OBJ_NAME_do_Æl_s‹ãd
(
ty≥
,

1004 (*
‚
Ë(c⁄° 
OBJ_NAME
 *, *
¨g
),

1005 *
¨g
);

1007 
ASN1_OBJECT
 *
OBJ_dup
(c⁄° ASN1_OBJECT *
o
);

1008 
ASN1_OBJECT
 *
OBJ_nid2obj
(
n
);

1009 c⁄° *
OBJ_nid2 
(
n
);

1010 c⁄° *
OBJ_nid2¢
(
n
);

1011 
OBJ_obj2nid
(c⁄° 
ASN1_OBJECT
 *
o
);

1012 
ASN1_OBJECT
 *
OBJ_txt2obj
(c⁄° *
s
, 
no_«me
);

1013 
OBJ_obj2txt
(*
buf
, 
buf_Àn
, c⁄° 
ASN1_OBJECT
 *
a
, 
no_«me
);

1014 
OBJ_txt2nid
(c⁄° *
s
);

1015 
OBJ_ 2nid
(c⁄° *
s
);

1016 
OBJ_¢2nid
(c⁄° *
s
);

1017 
OBJ_cmp
(c⁄° 
ASN1_OBJECT
 *
a
, c⁄° ASN1_OBJECT *
b
);

1018 c⁄° *
OBJ_b£¨ch_
(c⁄° *
key
, c⁄° *
ba£
, 
num
, 
size
,

1019 (*
cmp
) (const *, const *));

1020 c⁄° *
OBJ_b£¨ch_ex_
(c⁄° *
key
, c⁄° *
ba£
, 
num
,

1021 
size
,

1022 (*
cmp
) (const *, const *),

1023 
Êags
);

1025 
	#_DECLARE_OBJ_BSEARCH_CMP_FN
(
sc›e
, 
ty≥1
, 
ty≥2
, 
nm
) \

1026 
nm
##
	`_cmp_BSEARCH_CMP_FN
(const *, const *); \

1027 
nm
##
	`_cmp
(
ty≥1
 c⁄° *, 
ty≥2
 const *); \

1028 
sc›e
 
ty≥2
 * 
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
)

	)

1030 
	#DECLARE_OBJ_BSEARCH_CMP_FN
(
ty≥1
, 
ty≥2
, 
cmp
) \

1031 
	`_DECLARE_OBJ_BSEARCH_CMP_FN
(, 
ty≥1
, 
ty≥2
, 
cmp
)

	)

1032 
	#DECLARE_OBJ_BSEARCH_GLOBAL_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

1033 
ty≥2
 * 
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
)

	)

1062 
	#IMPLEMENT_OBJ_BSEARCH_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

1063 
nm
##
	`_cmp_BSEARCH_CMP_FN
(c⁄° *
a_
, c⁄° *
b_
) \

1065 
ty≥1
 c⁄° *
a
 = 
a_
; \

1066 
ty≥2
 c⁄° *
b
 = 
b_
; \

1067  
nm
##
	`_cmp
(
a
,
b
); \

1069 
ty≥2
 *
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
) \

1071  (
ty≥2
 *)
	`OBJ_b£¨ch_
(
key
, 
ba£
, 
num
, (type2), \

1072 
nm
##
_cmp_BSEARCH_CMP_FN
); \

1074 
	`dummy_¥ŸŸy≥
()

	)

1076 
	#IMPLEMENT_OBJ_BSEARCH_GLOBAL_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

1077 
nm
##
	`_cmp_BSEARCH_CMP_FN
(c⁄° *
a_
, c⁄° *
b_
) \

1079 
ty≥1
 c⁄° *
a
 = 
a_
; \

1080 
ty≥2
 c⁄° *
b
 = 
b_
; \

1081  
nm
##
	`_cmp
(
a
,
b
); \

1083 
ty≥2
 *
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
) \

1085  (
ty≥2
 *)
	`OBJ_b£¨ch_
(
key
, 
ba£
, 
num
, (type2), \

1086 
nm
##
_cmp_BSEARCH_CMP_FN
); \

1088 
	`dummy_¥ŸŸy≥
()

	)

1090 
	#OBJ_b£¨ch
(
ty≥1
,
key
,
ty≥2
,
ba£
,
num
,
cmp
) \

1091 ((
ty≥2
 *)
	`OBJ_b£¨ch_
(
	`CHECKED_PTR_OF
(
ty≥1
,
key
),CHECKED_PTR_OF—y≥2,
ba£
), \

1092 
num
,(
ty≥2
), \

1093 (()
	`CHECKED_PTR_OF
(
ty≥1
,
cmp
##
_ty≥_1
), \

1094 ()
	`CHECKED_PTR_OF
(
ty≥2
,
cmp
##
_ty≥_2
), \

1095 
cmp
##
_BSEARCH_CMP_FN
)))

	)

1097 
	#OBJ_b£¨ch_ex
(
ty≥1
,
key
,
ty≥2
,
ba£
,
num
,
cmp
,
Êags
) \

1098 ((
ty≥2
 *)
	`OBJ_b£¨ch_ex_
(
	`CHECKED_PTR_OF
(
ty≥1
,
key
),CHECKED_PTR_OF—y≥2,
ba£
), \

1099 
num
,(
ty≥2
), \

1100 (()
	`CHECKED_PTR_OF
(
ty≥1
,
cmp
##
_ty≥_1
), \

1101 ()
ty≥_2
=
	`CHECKED_PTR_OF
(
ty≥2
,
cmp
##
_ty≥_2
), \

1102 
cmp
##
_BSEARCH_CMP_FN
)),
Êags
)

	)

1104 
OBJ_√w_nid
(
num
);

1105 
OBJ_add_obje˘
(c⁄° 
ASN1_OBJECT
 *
obj
);

1106 
OBJ_¸óã
(c⁄° *
oid
, c⁄° *
¢
, c⁄° *
 
);

1107 
OBJ_˛ónup
();

1108 
OBJ_¸óã_obje˘s
(
BIO
 *
ö
);

1110 
OBJ_föd_sigid_Ægs
(
signid
, *
pdig_nid
, *
µkey_nid
);

1111 
OBJ_föd_sigid_by_Ægs
(*
psignid
, 
dig_nid
, 
pkey_nid
);

1112 
OBJ_add_sigid
(
signid
, 
dig_id
, 
pkey_id
);

1113 
OBJ_sigid_‰ì
();

1115 
obj_˛ónup_de„r
;

1116 
check_de„r
(
nid
);

1123 
ERR_lﬂd_OBJ_°rögs
();

1128 
	#OBJ_F_OBJ_ADD_OBJECT
 105

	)

1129 
	#OBJ_F_OBJ_CREATE
 100

	)

1130 
	#OBJ_F_OBJ_DUP
 101

	)

1131 
	#OBJ_F_OBJ_NAME_NEW_INDEX
 106

	)

1132 
	#OBJ_F_OBJ_NID2LN
 102

	)

1133 
	#OBJ_F_OBJ_NID2OBJ
 103

	)

1134 
	#OBJ_F_OBJ_NID2SN
 104

	)

1137 
	#OBJ_R_MALLOC_FAILURE
 100

	)

1138 
	#OBJ_R_UNKNOWN_NID
 101

	)

1140 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/opensslconf.h

13 #ifde‡ 
__˝lu•lus


17 #ifde‡
OPENSSL_ALGORITHM_DEFINES


18 #îr‹ 
OPENSSL_ALGORITHM_DEFINES
 
no
 
l⁄gî
 
suµ‹ãd


25 #i‚de‡
OPENSSL_NO_ASAN


26 
	#OPENSSL_NO_ASAN


	)

28 #i‚de‡
OPENSSL_NO_CRYPTO_MDEBUG


29 
	#OPENSSL_NO_CRYPTO_MDEBUG


	)

31 #i‚de‡
OPENSSL_NO_CRYPTO_MDEBUG_BACKTRACE


32 
	#OPENSSL_NO_CRYPTO_MDEBUG_BACKTRACE


	)

34 #i‚de‡
OPENSSL_NO_EC_NISTP_64_GCC_128


35 
	#OPENSSL_NO_EC_NISTP_64_GCC_128


	)

37 #i‚de‡
OPENSSL_NO_EGD


38 
	#OPENSSL_NO_EGD


	)

40 #i‚de‡
OPENSSL_NO_FUZZ_AFL


41 
	#OPENSSL_NO_FUZZ_AFL


	)

43 #i‚de‡
OPENSSL_NO_FUZZ_LIBFUZZER


44 
	#OPENSSL_NO_FUZZ_LIBFUZZER


	)

46 #i‚de‡
OPENSSL_NO_HEARTBEATS


47 
	#OPENSSL_NO_HEARTBEATS


	)

49 #i‚de‡
OPENSSL_NO_MD2


50 
	#OPENSSL_NO_MD2


	)

52 #i‚de‡
OPENSSL_NO_RC5


53 
	#OPENSSL_NO_RC5


	)

55 #i‚de‡
OPENSSL_NO_SCTP


56 
	#OPENSSL_NO_SCTP


	)

58 #i‚de‡
OPENSSL_NO_SSL_TRACE


59 
	#OPENSSL_NO_SSL_TRACE


	)

61 #i‚de‡
OPENSSL_NO_SSL3


62 
	#OPENSSL_NO_SSL3


	)

64 #i‚de‡
OPENSSL_NO_SSL3_METHOD


65 
	#OPENSSL_NO_SSL3_METHOD


	)

67 #i‚de‡
OPENSSL_NO_UBSAN


68 
	#OPENSSL_NO_UBSAN


	)

70 #i‚de‡
OPENSSL_NO_UNIT_TEST


71 
	#OPENSSL_NO_UNIT_TEST


	)

73 #i‚de‡
OPENSSL_NO_WEAK_SSL_CIPHERS


74 
	#OPENSSL_NO_WEAK_SSL_CIPHERS


	)

76 #i‚de‡
OPENSSL_THREADS


77 
	#OPENSSL_THREADS


	)

85 
	#NON_EMPTY_TRANSLATION_UNIT
 *
dummy
 = &dummy;

	)

93 #i‡
deföed
(
OPENSSL_NO_DEPRECATED
)

94 
	#DECLARE_DEPRECATED
(
f
)

	)

95 #ñi‡
__GNUC__
 > 3 || (__GNUC__ =3 && 
__GNUC_MINOR__
 > 0)

96 
	#DECLARE_DEPRECATED
(
f
Ë‡
	`__©åibuã__
 ((
dïªˇãd
));

	)

98 
	#DECLARE_DEPRECATED
(
f
Ëf;

	)

101 #i‚de‡
OPENSSL_FILE


102 #ifde‡
OPENSSL_NO_FILENAMES


103 
	#OPENSSL_FILE
 ""

	)

104 
	#OPENSSL_LINE
 0

	)

106 
	#OPENSSL_FILE
 
__FILE__


	)

107 
	#OPENSSL_LINE
 
__LINE__


	)

111 #i‚de‡
OPENSSL_MIN_API


112 
	#OPENSSL_MIN_API
 0

	)

115 #i‡!
deföed
(
OPENSSL_API_COMPAT
Ë|| OPENSSL_API_COMPAT < 
OPENSSL_MIN_API


116 #unde‡
OPENSSL_API_COMPAT


117 
	#OPENSSL_API_COMPAT
 
OPENSSL_MIN_API


	)

120 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

121 
	#DEPRECATEDIN_1_1_0
(
f
Ë
	`DECLARE_DEPRECATED
(f)

	)

123 
	#DEPRECATEDIN_1_1_0
(
f
)

	)

126 #i‡
OPENSSL_API_COMPAT
 < 0x10000000L

127 
	#DEPRECATEDIN_1_0_0
(
f
Ë
	`DECLARE_DEPRECATED
(f)

	)

129 
	#DEPRECATEDIN_1_0_0
(
f
)

	)

132 #i‡
OPENSSL_API_COMPAT
 < 0x00908000L

133 
	#DEPRECATEDIN_0_9_8
(
f
Ë
	`DECLARE_DEPRECATED
(f)

	)

135 
	#DEPRECATEDIN_0_9_8
(
f
)

	)

138 
	#OPENSSL_CPUID_OBJ


	)

141 #unde‡
I386_ONLY


143 #unde‡
OPENSSL_UNISTD


144 
	#OPENSSL_UNISTD
 <
uni°d
.
h
>

	)

146 #unde‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


151 #i‡!
deföed
(
OPENSSL_SYS_UEFI
)

152 #unde‡
BN_LLONG


154 
	#SIXTY_FOUR_BIT_LONG


	)

155 #unde‡
SIXTY_FOUR_BIT


156 #unde‡
THIRTY_TWO_BIT


159 
	#RC4_INT
 

	)

161 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/opensslv.h

1 #i‚de‡
HEADER_OPENSSLV_H


2 
	#HEADER_OPENSSLV_H


	)

4 #ifde‡ 
__˝lu•lus


33 
	#OPENSSL_VERSION_NUMBER
 0x1000207fL

	)

34 #ifde‡
OPENSSL_FIPS


35 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 1.0.2g-fù† 1 M¨ 2016"

	)

37 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 1.0.2g 1 M¨ 2016"

	)

39 
	#OPENSSL_VERSION_PTEXT
 "Ö¨ào‡" 
OPENSSL_VERSION_TEXT


	)

90 
	#SHLIB_VERSION_HISTORY
 ""

	)

91 
	#SHLIB_VERSION_NUMBER
 "1.0.0"

	)

94 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ossl_typ.h

55 #i‚de‡
HEADER_OPENSSL_TYPES_H


56 
	#HEADER_OPENSSL_TYPES_H


	)

58 #ifde‡ 
__˝lu•lus


62 
	~<›ís¶/e_os2.h
>

64 #ifde‡
NO_ASN1_TYPEDEFS


65 
	#ASN1_INTEGER
 
ASN1_STRING


	)

66 
	#ASN1_ENUMERATED
 
ASN1_STRING


	)

67 
	#ASN1_BIT_STRING
 
ASN1_STRING


	)

68 
	#ASN1_OCTET_STRING
 
ASN1_STRING


	)

69 
	#ASN1_PRINTABLESTRING
 
ASN1_STRING


	)

70 
	#ASN1_T61STRING
 
ASN1_STRING


	)

71 
	#ASN1_IA5STRING
 
ASN1_STRING


	)

72 
	#ASN1_UTCTIME
 
ASN1_STRING


	)

73 
	#ASN1_GENERALIZEDTIME
 
ASN1_STRING


	)

74 
	#ASN1_TIME
 
ASN1_STRING


	)

75 
	#ASN1_GENERALSTRING
 
ASN1_STRING


	)

76 
	#ASN1_UNIVERSALSTRING
 
ASN1_STRING


	)

77 
	#ASN1_BMPSTRING
 
ASN1_STRING


	)

78 
	#ASN1_VISIBLESTRING
 
ASN1_STRING


	)

79 
	#ASN1_UTF8STRING
 
ASN1_STRING


	)

80 
	#ASN1_BOOLEAN
 

	)

81 
	#ASN1_NULL
 

	)

83 
a¢1_°rög_°
 
	tASN1_INTEGER
;

84 
a¢1_°rög_°
 
	tASN1_ENUMERATED
;

85 
a¢1_°rög_°
 
	tASN1_BIT_STRING
;

86 
a¢1_°rög_°
 
	tASN1_OCTET_STRING
;

87 
a¢1_°rög_°
 
	tASN1_PRINTABLESTRING
;

88 
a¢1_°rög_°
 
	tASN1_T61STRING
;

89 
a¢1_°rög_°
 
	tASN1_IA5STRING
;

90 
a¢1_°rög_°
 
	tASN1_GENERALSTRING
;

91 
a¢1_°rög_°
 
	tASN1_UNIVERSALSTRING
;

92 
a¢1_°rög_°
 
	tASN1_BMPSTRING
;

93 
a¢1_°rög_°
 
	tASN1_UTCTIME
;

94 
a¢1_°rög_°
 
	tASN1_TIME
;

95 
a¢1_°rög_°
 
	tASN1_GENERALIZEDTIME
;

96 
a¢1_°rög_°
 
	tASN1_VISIBLESTRING
;

97 
a¢1_°rög_°
 
	tASN1_UTF8STRING
;

98 
a¢1_°rög_°
 
	tASN1_STRING
;

99 
	tASN1_BOOLEAN
;

100 
	tASN1_NULL
;

103 
a¢1_obje˘_°
 
	tASN1_OBJECT
;

105 
ASN1_ITEM_°
 
	tASN1_ITEM
;

106 
a¢1_p˘x_°
 
	tASN1_PCTX
;

108 #ifde‡
OPENSSL_SYS_WIN32


109 #unde‡
X509_NAME


110 #unde‡
X509_EXTENSIONS


111 #unde‡
X509_CERT_PAIR


112 #unde‡
PKCS7_ISSUER_AND_SERIAL


113 #unde‡
OCSP_REQUEST


114 #unde‡
OCSP_RESPONSE


117 #ifde‡
BIGNUM


118 #unde‡
BIGNUM


120 
bignum_°
 
	tBIGNUM
;

121 
bignum_˘x
 
	tBN_CTX
;

122 
bn_blödög_°
 
	tBN_BLINDING
;

123 
bn_m⁄t_˘x_°
 
	tBN_MONT_CTX
;

124 
bn_ª˝_˘x_°
 
	tBN_RECP_CTX
;

125 
bn_gícb_°
 
	tBN_GENCB
;

127 
buf_mem_°
 
	tBUF_MEM
;

129 
evp_cùhî_°
 
	tEVP_CIPHER
;

130 
evp_cùhî_˘x_°
 
	tEVP_CIPHER_CTX
;

131 
ív_md_°
 
	tEVP_MD
;

132 
ív_md_˘x_°
 
	tEVP_MD_CTX
;

133 
evp_pkey_°
 
	tEVP_PKEY
;

135 
evp_pkey_a¢1_mëhod_°
 
	tEVP_PKEY_ASN1_METHOD
;

137 
evp_pkey_mëhod_°
 
	tEVP_PKEY_METHOD
;

138 
evp_pkey_˘x_°
 
	tEVP_PKEY_CTX
;

140 
dh_°
 
	tDH
;

141 
dh_mëhod
 
	tDH_METHOD
;

143 
dß_°
 
	tDSA
;

144 
dß_mëhod
 
	tDSA_METHOD
;

146 
rß_°
 
	tRSA
;

147 
rß_mëh_°
 
	tRSA_METHOD
;

149 
ønd_mëh_°
 
	tRAND_METHOD
;

151 
ecdh_mëhod
 
	tECDH_METHOD
;

152 
ecdß_mëhod
 
	tECDSA_METHOD
;

154 
x509_°
 
	tX509
;

155 
X509_Æg‹_°
 
	tX509_ALGOR
;

156 
X509_¸l_°
 
	tX509_CRL
;

157 
x509_¸l_mëhod_°
 
	tX509_CRL_METHOD
;

158 
x509_ªvoked_°
 
	tX509_REVOKED
;

159 
X509_«me_°
 
	tX509_NAME
;

160 
X509_pubkey_°
 
	tX509_PUBKEY
;

161 
x509_°‹e_°
 
	tX509_STORE
;

162 
x509_°‹e_˘x_°
 
	tX509_STORE_CTX
;

164 
pkcs8_¥iv_key_öfo_°
 
	tPKCS8_PRIV_KEY_INFO
;

166 
v3_ext_˘x
 
	tX509V3_CTX
;

167 
c⁄f_°
 
	tCONF
;

169 
°‹e_°
 
	tSTORE
;

170 
°‹e_mëhod_°
 
	tSTORE_METHOD
;

172 
ui_°
 
	tUI
;

173 
ui_mëhod_°
 
	tUI_METHOD
;

175 
°_ERR_FNS
 
	tERR_FNS
;

177 
ígöe_°
 
	tENGINE
;

178 
s¶_°
 
	tSSL
;

179 
s¶_˘x_°
 
	tSSL_CTX
;

181 
X509_POLICY_NODE_°
 
	tX509_POLICY_NODE
;

182 
X509_POLICY_LEVEL_°
 
	tX509_POLICY_LEVEL
;

183 
X509_POLICY_TREE_°
 
	tX509_POLICY_TREE
;

184 
X509_POLICY_CACHE_°
 
	tX509_POLICY_CACHE
;

186 
AUTHORITY_KEYID_°
 
	tAUTHORITY_KEYID
;

187 
DIST_POINT_°
 
	tDIST_POINT
;

188 
ISSUING_DIST_POINT_°
 
	tISSUING_DIST_POINT
;

189 
NAME_CONSTRAINTS_°
 
	tNAME_CONSTRAINTS
;

192 
	#DECLARE_PKCS12_STACK_OF
(
ty≥
)

	)

193 
	#IMPLEMENT_PKCS12_STACK_OF
(
ty≥
)

	)

195 
¸y±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

197 
	tCRYPTO_EX_√w
 (*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

198 
	tidx
, 
	t¨gl
, *
	t¨gp
);

199 
	tCRYPTO_EX_‰ì
 (*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

200 
	tidx
, 
	t¨gl
, *
	t¨gp
);

201 
	tCRYPTO_EX_dup
 (
	tCRYPTO_EX_DATA
 *
	tto
, CRYPTO_EX_DATA *
	t‰om
,

202 *
	t‰om_d
, 
	tidx
, 
	t¨gl
, *
	t¨gp
);

204 
oc•_ªq_˘x_°
 
	tOCSP_REQ_CTX
;

205 
oc•_ª•⁄£_°
 
	tOCSP_RESPONSE
;

206 
oc•_ª•⁄dî_id_°
 
	tOCSP_RESPID
;

208 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/pem.h

59 #i‚de‡
HEADER_PEM_H


60 
	#HEADER_PEM_H


	)

62 
	~<›ís¶/e_os2.h
>

63 #i‚de‡
OPENSSL_NO_BIO


64 
	~<›ís¶/bio.h
>

66 #i‚de‡
OPENSSL_NO_STACK


67 
	~<›ís¶/°ack.h
>

69 
	~<›ís¶/evp.h
>

70 
	~<›ís¶/x509.h
>

71 
	~<›ís¶/≥m2.h
>

73 #ifde‡ 
__˝lu•lus


77 
	#PEM_BUFSIZE
 1024

	)

79 
	#PEM_OBJ_UNDEF
 0

	)

80 
	#PEM_OBJ_X509
 1

	)

81 
	#PEM_OBJ_X509_REQ
 2

	)

82 
	#PEM_OBJ_CRL
 3

	)

83 
	#PEM_OBJ_SSL_SESSION
 4

	)

84 
	#PEM_OBJ_PRIV_KEY
 10

	)

85 
	#PEM_OBJ_PRIV_RSA
 11

	)

86 
	#PEM_OBJ_PRIV_DSA
 12

	)

87 
	#PEM_OBJ_PRIV_DH
 13

	)

88 
	#PEM_OBJ_PUB_RSA
 14

	)

89 
	#PEM_OBJ_PUB_DSA
 15

	)

90 
	#PEM_OBJ_PUB_DH
 16

	)

91 
	#PEM_OBJ_DHPARAMS
 17

	)

92 
	#PEM_OBJ_DSAPARAMS
 18

	)

93 
	#PEM_OBJ_PRIV_RSA_PUBLIC
 19

	)

94 
	#PEM_OBJ_PRIV_ECDSA
 20

	)

95 
	#PEM_OBJ_PUB_ECDSA
 21

	)

96 
	#PEM_OBJ_ECPARAMETERS
 22

	)

98 
	#PEM_ERROR
 30

	)

99 
	#PEM_DEK_DES_CBC
 40

	)

100 
	#PEM_DEK_IDEA_CBC
 45

	)

101 
	#PEM_DEK_DES_EDE
 50

	)

102 
	#PEM_DEK_DES_ECB
 60

	)

103 
	#PEM_DEK_RSA
 70

	)

104 
	#PEM_DEK_RSA_MD2
 80

	)

105 
	#PEM_DEK_RSA_MD5
 90

	)

107 
	#PEM_MD_MD2
 
NID_md2


	)

108 
	#PEM_MD_MD5
 
NID_md5


	)

109 
	#PEM_MD_SHA
 
NID_sha


	)

110 
	#PEM_MD_MD2_RSA
 
NID_md2WôhRSAEn¸y±i⁄


	)

111 
	#PEM_MD_MD5_RSA
 
NID_md5WôhRSAEn¸y±i⁄


	)

112 
	#PEM_MD_SHA_RSA
 
NID_sha1WôhRSAEn¸y±i⁄


	)

114 
	#PEM_STRING_X509_OLD
 "X509 CERTIFICATE"

	)

115 
	#PEM_STRING_X509
 "CERTIFICATE"

	)

116 
	#PEM_STRING_X509_PAIR
 "CERTIFICATE PAIR"

	)

117 
	#PEM_STRING_X509_TRUSTED
 "TRUSTED CERTIFICATE"

	)

118 
	#PEM_STRING_X509_REQ_OLD
 "NEW CERTIFICATE REQUEST"

	)

119 
	#PEM_STRING_X509_REQ
 "CERTIFICATE REQUEST"

	)

120 
	#PEM_STRING_X509_CRL
 "X509 CRL"

	)

121 
	#PEM_STRING_EVP_PKEY
 "ANY PRIVATE KEY"

	)

122 
	#PEM_STRING_PUBLIC
 "PUBLIC KEY"

	)

123 
	#PEM_STRING_RSA
 "RSA PRIVATE KEY"

	)

124 
	#PEM_STRING_RSA_PUBLIC
 "RSA PUBLIC KEY"

	)

125 
	#PEM_STRING_DSA
 "DSA PRIVATE KEY"

	)

126 
	#PEM_STRING_DSA_PUBLIC
 "DSA PUBLIC KEY"

	)

127 
	#PEM_STRING_PKCS7
 "PKCS7"

	)

128 
	#PEM_STRING_PKCS7_SIGNED
 "PKCS #7 SIGNED DATA"

	)

129 
	#PEM_STRING_PKCS8
 "ENCRYPTED PRIVATE KEY"

	)

130 
	#PEM_STRING_PKCS8INF
 "PRIVATE KEY"

	)

131 
	#PEM_STRING_DHPARAMS
 "DH PARAMETERS"

	)

132 
	#PEM_STRING_DHXPARAMS
 "X9.42 DH PARAMETERS"

	)

133 
	#PEM_STRING_SSL_SESSION
 "SSL SESSION PARAMETERS"

	)

134 
	#PEM_STRING_DSAPARAMS
 "DSA PARAMETERS"

	)

135 
	#PEM_STRING_ECDSA_PUBLIC
 "ECDSA PUBLIC KEY"

	)

136 
	#PEM_STRING_ECPARAMETERS
 "EC PARAMETERS"

	)

137 
	#PEM_STRING_ECPRIVATEKEY
 "EC PRIVATE KEY"

	)

138 
	#PEM_STRING_PARAMETERS
 "PARAMETERS"

	)

139 
	#PEM_STRING_CMS
 "CMS"

	)

145 
	sPEM_Encode_Sól_°
 {

146 
EVP_ENCODE_CTX
 
ícode
;

147 
EVP_MD_CTX
 
md
;

148 
EVP_CIPHER_CTX
 
cùhî
;

149 } 
	tPEM_ENCODE_SEAL_CTX
;

152 
	#PEM_TYPE_ENCRYPTED
 10

	)

153 
	#PEM_TYPE_MIC_ONLY
 20

	)

154 
	#PEM_TYPE_MIC_CLEAR
 30

	)

155 
	#PEM_TYPE_CLEAR
 40

	)

157 
	s≥m_ªcù_°
 {

158 *
«me
;

159 
X509_NAME
 *
dn
;

160 
cùhî
;

161 
key_íc
;

163 } 
	tPEM_USER
;

165 
	s≥m_˘x_°
 {

166 
ty≥
;

168 
vîsi⁄
;

169 
mode
;

170 } 
¥oc_ty≥
;

172 *
domaö
;

175 
cùhî
;

179 } 
DEK_öfo
;

181 
PEM_USER
 *
‹igö©‹
;

183 
num_ªcùõ¡
;

184 
PEM_USER
 **
ªcùõ¡
;

188 
EVP_MD
 *
md
;

190 
md_íc
;

191 
md_Àn
;

192 *
md_d©a
;

194 
EVP_CIPHER
 *
dec
;

195 
key_Àn
;

196 *
key
;

201 
d©a_íc
;

202 
d©a_Àn
;

203 *
d©a
;

204 } 
	tPEM_CTX
;

212 #ifde‡
OPENSSL_NO_FP_API


214 
	#IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

215 
	#IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

216 
	#IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

217 
	#IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

218 
	#IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

221 
	#IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

222 
ty≥
 *
PEM_ªad_
##
	`«me
(
FILE
 *
Â
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
)\

224  
	`PEM_ASN1_ªad
((
d2i_of_void
 *)
d2i_
##
a¢1
, 
°r
,
Â
,(**)
x
,
cb
,
u
); \

225 }

	)

227 
	#IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

228 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
) \

230  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
NULL
,NULL,0,NULL,NULL); \

231 }

	)

233 
	#IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

234 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, c⁄° 
ty≥
 *
x
) \

236  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,(*)
x
,
NULL
,NULL,0,NULL,NULL); \

237 }

	)

239 
	#IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

240 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

241 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, \

242 *
u
) \

244  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

245 }

	)

247 
	#IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

248 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

249 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, \

250 *
u
) \

252  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

253 }

	)

257 
	#IMPLEMENT_PEM_ªad_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

258 
ty≥
 *
PEM_ªad_bio_
##
	`«me
(
BIO
 *
bp
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
)\

260  
	`PEM_ASN1_ªad_bio
((
d2i_of_void
 *)
d2i_
##
a¢1
, 
°r
,
bp
,(**)
x
,
cb
,
u
); \

261 }

	)

263 
	#IMPLEMENT_PEM_wrôe_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

264 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
) \

266  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,
x
,
NULL
,NULL,0,NULL,NULL); \

267 }

	)

269 
	#IMPLEMENT_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

270 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, c⁄° 
ty≥
 *
x
) \

272  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,(*)
x
,
NULL
,NULL,0,NULL,NULL); \

273 }

	)

275 
	#IMPLEMENT_PEM_wrôe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

276 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

277 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
) \

279  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

280 }

	)

282 
	#IMPLEMENT_PEM_wrôe_cb_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

283 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

284 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
) \

286  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,(*)
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

287 }

	)

289 
	#IMPLEMENT_PEM_wrôe
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

290 
	`IMPLEMENT_PEM_wrôe_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

291 
	`IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

293 
	#IMPLEMENT_PEM_wrôe_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

294 
	`IMPLEMENT_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

295 
	`IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

297 
	#IMPLEMENT_PEM_wrôe_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

298 
	`IMPLEMENT_PEM_wrôe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

299 
	`IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

301 
	#IMPLEMENT_PEM_wrôe_cb_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

302 
	`IMPLEMENT_PEM_wrôe_cb_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

303 
	`IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

305 
	#IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

306 
	`IMPLEMENT_PEM_ªad_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

307 
	`IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

309 
	#IMPLEMENT_PEM_rw
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

310 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

311 
	`IMPLEMENT_PEM_wrôe
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

313 
	#IMPLEMENT_PEM_rw_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

314 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

315 
	`IMPLEMENT_PEM_wrôe_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

317 
	#IMPLEMENT_PEM_rw_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

318 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

319 
	`IMPLEMENT_PEM_wrôe_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

323 #i‡
deföed
(
OPENSSL_NO_FP_API
)

325 
	#DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
Ë

	)

326 
	#DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
Ë

	)

327 
	#DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
Ë

	)

330 
	#DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
) \

331 
ty≥
 *
PEM_ªad_
##
	`«me
(
FILE
 *
Â
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

333 
	#DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
) \

334 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
);

	)

336 
	#DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
) \

337 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, c⁄° 
ty≥
 *
x
);

	)

339 
	#DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
) \

340 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

341 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

345 #i‚de‡
OPENSSL_NO_BIO


346 
	#DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
) \

347 
ty≥
 *
PEM_ªad_bio_
##
	`«me
(
BIO
 *
bp
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

349 
	#DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
) \

350 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
);

	)

352 
	#DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
) \

353 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, c⁄° 
ty≥
 *
x
);

	)

355 
	#DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
) \

356 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

357 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

361 
	#DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
Ë

	)

362 
	#DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
Ë

	)

363 
	#DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
Ë

	)

364 
	#DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
Ë

	)

366 
	#DECLARE_PEM_wrôe
(
«me
, 
ty≥
) \

367 
	`DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
) \

368 
	`DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
)

	)

369 
	#DECLARE_PEM_wrôe_c⁄°
(
«me
, 
ty≥
) \

370 
	`DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
) \

371 
	`DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
)

	)

372 
	#DECLARE_PEM_wrôe_cb
(
«me
, 
ty≥
) \

373 
	`DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
) \

374 
	`DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
)

	)

375 
	#DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

376 
	`DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
) \

377 
	`DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
)

	)

378 
	#DECLARE_PEM_rw
(
«me
, 
ty≥
) \

379 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

380 
	`DECLARE_PEM_wrôe
(
«me
, 
ty≥
)

	)

381 
	#DECLARE_PEM_rw_c⁄°
(
«me
, 
ty≥
) \

382 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

383 
	`DECLARE_PEM_wrôe_c⁄°
(
«me
, 
ty≥
)

	)

384 
	#DECLARE_PEM_rw_cb
(
«me
, 
ty≥
) \

385 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

386 
	`DECLARE_PEM_wrôe_cb
(
«me
, 
ty≥
)

	)

389 
	t≥m_∑ssw‹d_cb
 (*
	tbuf
, 
	tsize
, 
	trwÊag
, *
	tu£rd©a
);

392 
	t≥m_∑ssw‹d_cb
 (*
	tbuf
, 
	tsize
, 
	trwÊag
);

395 
PEM_gë_EVP_CIPHER_INFO
(*
hódî
, 
EVP_CIPHER_INFO
 *
cùhî
);

396 
PEM_do_hódî
(
EVP_CIPHER_INFO
 *
cùhî
, *
d©a
, *
Àn
,

397 
≥m_∑ssw‹d_cb
 *
ˇŒback
, *
u
);

399 #i‚de‡
OPENSSL_NO_BIO


400 
PEM_ªad_bio
(
BIO
 *
bp
, **
«me
, **
hódî
,

401 **
d©a
, *
Àn
);

402 
PEM_wrôe_bio
(
BIO
 *
bp
, c⁄° *
«me
, c⁄° *
hdr
,

403 c⁄° *
d©a
, 
Àn
);

404 
PEM_byãs_ªad_bio
(**
pd©a
, *
∂í
, **
≤m
,

405 c⁄° *
«me
, 
BIO
 *
bp
, 
≥m_∑ssw‹d_cb
 *
cb
,

406 *
u
);

407 *
PEM_ASN1_ªad_bio
(
d2i_of_void
 *
d2i
, c⁄° *
«me
, 
BIO
 *
bp
, **
x
,

408 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

409 
PEM_ASN1_wrôe_bio
(
i2d_of_void
 *
i2d
, c⁄° *
«me
, 
BIO
 *
bp
, *
x
,

410 c⁄° 
EVP_CIPHER
 *
íc
, *
k°r
, 
kÀn
,

411 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

413 
STACK_OF
(
X509_INFO
Ë*
PEM_X509_INFO_ªad_bio
(
BIO
 *
bp
, STACK_OF(X509_INFOË*
sk
,

414 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

415 
PEM_X509_INFO_wrôe_bio
(
BIO
 *
bp
, 
X509_INFO
 *
xi
, 
EVP_CIPHER
 *
íc
,

416 *
k°r
, 
kÀn
,

417 
≥m_∑ssw‹d_cb
 *
cd
, *
u
);

420 
PEM_ªad
(
FILE
 *
Â
, **
«me
, **
hódî
,

421 **
d©a
, *
Àn
);

422 
PEM_wrôe
(
FILE
 *
Â
, c⁄° *
«me
, c⁄° *
hdr
,

423 c⁄° *
d©a
, 
Àn
);

424 *
PEM_ASN1_ªad
(
d2i_of_void
 *
d2i
, c⁄° *
«me
, 
FILE
 *
Â
, **
x
,

425 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

426 
PEM_ASN1_wrôe
(
i2d_of_void
 *
i2d
, c⁄° *
«me
, 
FILE
 *
Â
,

427 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, *
k°r
,

428 
kÀn
, 
≥m_∑ssw‹d_cb
 *
ˇŒback
, *
u
);

429 
STACK_OF
(
X509_INFO
Ë*
PEM_X509_INFO_ªad
(
FILE
 *
Â
, STACK_OF(X509_INFOË*
sk
,

430 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

432 
PEM_SólInô
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, 
EVP_CIPHER
 *
ty≥
,

433 
EVP_MD
 *
md_ty≥
, **
ek
, *
ekl
,

434 *
iv
, 
EVP_PKEY
 **
pubk
, 
≈ubk
);

435 
PEM_SólUpd©e
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, *
out
, *
oué
,

436 *
ö
, 
öl
);

437 
PEM_SólFöÆ
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, *
sig
, *
sigl
,

438 *
out
, *
oué
, 
EVP_PKEY
 *
¥iv
);

440 
PEM_SignInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_MD
 *
ty≥
);

441 
PEM_SignUpd©e
(
EVP_MD_CTX
 *
˘x
, *
d
, 
˙t
);

442 
PEM_SignFöÆ
(
EVP_MD_CTX
 *
˘x
, *
sigªt
,

443 *
sigÀn
, 
EVP_PKEY
 *
pkey
);

445 
PEM_def_ˇŒback
(*
buf
, 
num
, 
w
, *
key
);

446 
PEM_¥oc_ty≥
(*
buf
, 
ty≥
);

447 
PEM_dek_öfo
(*
buf
, c⁄° *
ty≥
, 
Àn
, *
°r
);

449 
	~<›ís¶/symhacks.h
>

451 
DECLARE_PEM_rw
(
X509
, X509)

452 
DECLARE_PEM_rw
(
X509_AUX
, 
X509
)

453 
DECLARE_PEM_rw
(
X509_CERT_PAIR
, X509_CERT_PAIR)

454 
DECLARE_PEM_rw
(
X509_REQ
, X509_REQ)

455 
DECLARE_PEM_wrôe
(
X509_REQ_NEW
, 
X509_REQ
)

456 
DECLARE_PEM_rw
(
X509_CRL
, X509_CRL)

457 
DECLARE_PEM_rw
(
PKCS7
, PKCS7)

458 
DECLARE_PEM_rw
(
NETSCAPE_CERT_SEQUENCE
, NETSCAPE_CERT_SEQUENCE)

459 
DECLARE_PEM_rw
(
PKCS8
, 
X509_SIG
)

460 
DECLARE_PEM_rw
(
PKCS8_PRIV_KEY_INFO
, PKCS8_PRIV_KEY_INFO)

461 #i‚de‡
OPENSSL_NO_RSA


462 
DECLARE_PEM_rw_cb
(
RSAPriv©eKey
, 
RSA
)

463 
DECLARE_PEM_rw_c⁄°
(
RSAPublicKey
, 
RSA
)

464 
DECLARE_PEM_rw
(
RSA_PUBKEY
, 
RSA
)

466 #i‚de‡
OPENSSL_NO_DSA


467 
DECLARE_PEM_rw_cb
(
DSAPriv©eKey
, 
DSA
)

468 
DECLARE_PEM_rw
(
DSA_PUBKEY
, 
DSA
)

469 
DECLARE_PEM_rw_c⁄°
(
DSA∑øms
, 
DSA
)

471 #i‚de‡
OPENSSL_NO_EC


472 
DECLARE_PEM_rw_c⁄°
(
ECPKP¨amëîs
, 
EC_GROUP
)

473 
DECLARE_PEM_rw_cb
(
ECPriv©eKey
, 
EC_KEY
)

474 
DECLARE_PEM_rw
(
EC_PUBKEY
, 
EC_KEY
)

476 #i‚de‡
OPENSSL_NO_DH


477 
DECLARE_PEM_rw_c⁄°
(
DH∑øms
, 
DH
)

478 
DECLARE_PEM_wrôe_c⁄°
(
DHx∑øms
, 
DH
)

480 
DECLARE_PEM_rw_cb
(
Priv©eKey
, 
EVP_PKEY
)

481 
DECLARE_PEM_rw
(
PUBKEY
, 
EVP_PKEY
)

483 
PEM_wrôe_bio_PKCS8Priv©eKey_nid
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, 
nid
,

484 *
k°r
, 
kÀn
,

485 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

486 
PEM_wrôe_bio_PKCS8Priv©eKey
(
BIO
 *, 
EVP_PKEY
 *, c⁄° 
EVP_CIPHER
 *,

487 *, , 
≥m_∑ssw‹d_cb
 *, *);

488 
i2d_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

489 *
k°r
, 
kÀn
,

490 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

491 
i2d_PKCS8Priv©eKey_nid_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, 
nid
,

492 *
k°r
, 
kÀn
,

493 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

494 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
x
, 
≥m_∑ssw‹d_cb
 *
cb
,

495 *
u
);

497 
i2d_PKCS8Priv©eKey_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

498 *
k°r
, 
kÀn
,

499 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

500 
i2d_PKCS8Priv©eKey_nid_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, 
nid
,

501 *
k°r
, 
kÀn
,

502 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

503 
PEM_wrôe_PKCS8Priv©eKey_nid
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, 
nid
,

504 *
k°r
, 
kÀn
,

505 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

507 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_Â
(
FILE
 *
Â
, EVP_PKEY **
x
, 
≥m_∑ssw‹d_cb
 *
cb
,

508 *
u
);

510 
PEM_wrôe_PKCS8Priv©eKey
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

511 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cd
,

512 *
u
);

514 
EVP_PKEY
 *
PEM_ªad_bio_P¨amëîs
(
BIO
 *
bp
, EVP_PKEY **
x
);

515 
PEM_wrôe_bio_P¨amëîs
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
);

517 
EVP_PKEY
 *
b2i_Priv©eKey
(c⁄° **
ö
, 
Àngth
);

518 
EVP_PKEY
 *
b2i_PublicKey
(c⁄° **
ö
, 
Àngth
);

519 
EVP_PKEY
 *
b2i_Priv©eKey_bio
(
BIO
 *
ö
);

520 
EVP_PKEY
 *
b2i_PublicKey_bio
(
BIO
 *
ö
);

521 
i2b_Priv©eKey_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
);

522 
i2b_PublicKey_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
);

523 #i‚de‡
OPENSSL_NO_RC4


524 
EVP_PKEY
 *
b2i_PVK_bio
(
BIO
 *
ö
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

525 
i2b_PVK_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
, 
í˛evñ
,

526 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

534 
ERR_lﬂd_PEM_°rögs
();

539 
	#PEM_F_B2I_DSS
 127

	)

540 
	#PEM_F_B2I_PVK_BIO
 128

	)

541 
	#PEM_F_B2I_RSA
 129

	)

542 
	#PEM_F_CHECK_BITLEN_DSA
 130

	)

543 
	#PEM_F_CHECK_BITLEN_RSA
 131

	)

544 
	#PEM_F_D2I_PKCS8PRIVATEKEY_BIO
 120

	)

545 
	#PEM_F_D2I_PKCS8PRIVATEKEY_FP
 121

	)

546 
	#PEM_F_DO_B2I
 132

	)

547 
	#PEM_F_DO_B2I_BIO
 133

	)

548 
	#PEM_F_DO_BLOB_HEADER
 134

	)

549 
	#PEM_F_DO_PK8PKEY
 126

	)

550 
	#PEM_F_DO_PK8PKEY_FP
 125

	)

551 
	#PEM_F_DO_PVK_BODY
 135

	)

552 
	#PEM_F_DO_PVK_HEADER
 136

	)

553 
	#PEM_F_I2B_PVK
 137

	)

554 
	#PEM_F_I2B_PVK_BIO
 138

	)

555 
	#PEM_F_LOAD_IV
 101

	)

556 
	#PEM_F_PEM_ASN1_READ
 102

	)

557 
	#PEM_F_PEM_ASN1_READ_BIO
 103

	)

558 
	#PEM_F_PEM_ASN1_WRITE
 104

	)

559 
	#PEM_F_PEM_ASN1_WRITE_BIO
 105

	)

560 
	#PEM_F_PEM_DEF_CALLBACK
 100

	)

561 
	#PEM_F_PEM_DO_HEADER
 106

	)

562 
	#PEM_F_PEM_F_PEM_WRITE_PKCS8PRIVATEKEY
 118

	)

563 
	#PEM_F_PEM_GET_EVP_CIPHER_INFO
 107

	)

564 
	#PEM_F_PEM_PK8PKEY
 119

	)

565 
	#PEM_F_PEM_READ
 108

	)

566 
	#PEM_F_PEM_READ_BIO
 109

	)

567 
	#PEM_F_PEM_READ_BIO_DHPARAMS
 141

	)

568 
	#PEM_F_PEM_READ_BIO_PARAMETERS
 140

	)

569 
	#PEM_F_PEM_READ_BIO_PRIVATEKEY
 123

	)

570 
	#PEM_F_PEM_READ_DHPARAMS
 142

	)

571 
	#PEM_F_PEM_READ_PRIVATEKEY
 124

	)

572 
	#PEM_F_PEM_SEALFINAL
 110

	)

573 
	#PEM_F_PEM_SEALINIT
 111

	)

574 
	#PEM_F_PEM_SIGNFINAL
 112

	)

575 
	#PEM_F_PEM_WRITE
 113

	)

576 
	#PEM_F_PEM_WRITE_BIO
 114

	)

577 
	#PEM_F_PEM_WRITE_PRIVATEKEY
 139

	)

578 
	#PEM_F_PEM_X509_INFO_READ
 115

	)

579 
	#PEM_F_PEM_X509_INFO_READ_BIO
 116

	)

580 
	#PEM_F_PEM_X509_INFO_WRITE_BIO
 117

	)

583 
	#PEM_R_BAD_BASE64_DECODE
 100

	)

584 
	#PEM_R_BAD_DECRYPT
 101

	)

585 
	#PEM_R_BAD_END_LINE
 102

	)

586 
	#PEM_R_BAD_IV_CHARS
 103

	)

587 
	#PEM_R_BAD_MAGIC_NUMBER
 116

	)

588 
	#PEM_R_BAD_PASSWORD_READ
 104

	)

589 
	#PEM_R_BAD_VERSION_NUMBER
 117

	)

590 
	#PEM_R_BIO_WRITE_FAILURE
 118

	)

591 
	#PEM_R_CIPHER_IS_NULL
 127

	)

592 
	#PEM_R_ERROR_CONVERTING_PRIVATE_KEY
 115

	)

593 
	#PEM_R_EXPECTING_PRIVATE_KEY_BLOB
 119

	)

594 
	#PEM_R_EXPECTING_PUBLIC_KEY_BLOB
 120

	)

595 
	#PEM_R_INCONSISTENT_HEADER
 121

	)

596 
	#PEM_R_KEYBLOB_HEADER_PARSE_ERROR
 122

	)

597 
	#PEM_R_KEYBLOB_TOO_SHORT
 123

	)

598 
	#PEM_R_NOT_DEK_INFO
 105

	)

599 
	#PEM_R_NOT_ENCRYPTED
 106

	)

600 
	#PEM_R_NOT_PROC_TYPE
 107

	)

601 
	#PEM_R_NO_START_LINE
 108

	)

602 
	#PEM_R_PROBLEMS_GETTING_PASSWORD
 109

	)

603 
	#PEM_R_PUBLIC_KEY_NO_RSA
 110

	)

604 
	#PEM_R_PVK_DATA_TOO_SHORT
 124

	)

605 
	#PEM_R_PVK_TOO_SHORT
 125

	)

606 
	#PEM_R_READ_KEY
 111

	)

607 
	#PEM_R_SHORT_HEADER
 112

	)

608 
	#PEM_R_UNSUPPORTED_CIPHER
 113

	)

609 
	#PEM_R_UNSUPPORTED_ENCRYPTION
 114

	)

610 
	#PEM_R_UNSUPPORTED_KEY_COMPONENTS
 126

	)

612 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/pem2.h

60 #ifde‡
__˝lu•lus


64 #i‚de‡
HEADER_PEM_H


65 
ERR_lﬂd_PEM_°rögs
();

68 #ifde‡
__˝lu•lus


	@/usr/include/openssl/pkcs7.h

59 #i‚de‡
HEADER_PKCS7_H


60 
	#HEADER_PKCS7_H


	)

62 
	~<›ís¶/a¢1.h
>

63 
	~<›ís¶/bio.h
>

64 
	~<›ís¶/e_os2.h
>

66 
	~<›ís¶/symhacks.h
>

67 
	~<›ís¶/os¶_typ.h
>

69 #ifde‡ 
__˝lu•lus


73 #ifde‡
OPENSSL_SYS_WIN32


75 #unde‡
PKCS7_ISSUER_AND_SERIAL


76 #unde‡
PKCS7_SIGNER_INFO


86 
	spkcs7_issuî_™d_£rül_°
 {

87 
X509_NAME
 *
issuî
;

88 
ASN1_INTEGER
 *
£rül
;

89 } 
	tPKCS7_ISSUER_AND_SERIAL
;

91 
	spkcs7_sig√r_öfo_°
 {

92 
ASN1_INTEGER
 *
vîsi⁄
;

93 
PKCS7_ISSUER_AND_SERIAL
 *
issuî_™d_£rül
;

94 
X509_ALGOR
 *
dige°_Æg
;

95 
STACK_OF
(
X509_ATTRIBUTE
Ë*
auth_©å
;

96 
X509_ALGOR
 *
dige°_íc_Æg
;

97 
ASN1_OCTET_STRING
 *
íc_dige°
;

98 
STACK_OF
(
X509_ATTRIBUTE
Ë*
u«uth_©å
;

100 
EVP_PKEY
 *
pkey
;

101 } 
	tPKCS7_SIGNER_INFO
;

103 
DECLARE_STACK_OF
(
PKCS7_SIGNER_INFO
)

104 
DECLARE_ASN1_SET_OF
(
PKCS7_SIGNER_INFO
)

106 
	spkcs7_ªcù_öfo_°
 {

107 
ASN1_INTEGER
 *
vîsi⁄
;

108 
PKCS7_ISSUER_AND_SERIAL
 *
issuî_™d_£rül
;

109 
X509_ALGOR
 *
key_íc_Æg‹
;

110 
ASN1_OCTET_STRING
 *
íc_key
;

111 
X509
 *
˚π
;

112 } 
	tPKCS7_RECIP_INFO
;

114 
DECLARE_STACK_OF
(
PKCS7_RECIP_INFO
)

115 
DECLARE_ASN1_SET_OF
(
PKCS7_RECIP_INFO
)

117 
	spkcs7_sig√d_°
 {

118 
ASN1_INTEGER
 *
vîsi⁄
;

119 
STACK_OF
(
X509_ALGOR
Ë*
md_Ægs
;

120 
STACK_OF
(
X509
Ë*
˚π
;

121 
STACK_OF
(
X509_CRL
Ë*
¸l
;

122 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
sig√r_öfo
;

123 
pkcs7_°
 *
c⁄ã¡s
;

124 } 
	tPKCS7_SIGNED
;

130 
	spkcs7_íc_c⁄ã¡_°
 {

131 
ASN1_OBJECT
 *
c⁄ã¡_ty≥
;

132 
X509_ALGOR
 *
Æg‹ôhm
;

133 
ASN1_OCTET_STRING
 *
íc_d©a
;

134 c⁄° 
EVP_CIPHER
 *
cùhî
;

135 } 
	tPKCS7_ENC_CONTENT
;

137 
	spkcs7_ívñ›ed_°
 {

138 
ASN1_INTEGER
 *
vîsi⁄
;

139 
STACK_OF
(
PKCS7_RECIP_INFO
Ë*
ªcùõ¡öfo
;

140 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

141 } 
	tPKCS7_ENVELOPE
;

143 
	spkcs7_sig√d™dívñ›ed_°
 {

144 
ASN1_INTEGER
 *
vîsi⁄
;

145 
STACK_OF
(
X509_ALGOR
Ë*
md_Ægs
;

146 
STACK_OF
(
X509
Ë*
˚π
;

147 
STACK_OF
(
X509_CRL
Ë*
¸l
;

148 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
sig√r_öfo
;

149 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

150 
STACK_OF
(
PKCS7_RECIP_INFO
Ë*
ªcùõ¡öfo
;

151 } 
	tPKCS7_SIGN_ENVELOPE
;

153 
	spkcs7_dige°_°
 {

154 
ASN1_INTEGER
 *
vîsi⁄
;

155 
X509_ALGOR
 *
md
;

156 
pkcs7_°
 *
c⁄ã¡s
;

157 
ASN1_OCTET_STRING
 *
dige°
;

158 } 
	tPKCS7_DIGEST
;

160 
	spkcs7_í¸y±ed_°
 {

161 
ASN1_INTEGER
 *
vîsi⁄
;

162 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

163 } 
	tPKCS7_ENCRYPT
;

165 
	spkcs7_°
 {

170 *
a¢1
;

171 
Àngth
;

172 
	#PKCS7_S_HEADER
 0

	)

173 
	#PKCS7_S_BODY
 1

	)

174 
	#PKCS7_S_TAIL
 2

	)

175 
°©e
;

176 
dëached
;

177 
ASN1_OBJECT
 *
ty≥
;

184 *
±r
;

186 
ASN1_OCTET_STRING
 *
d©a
;

188 
PKCS7_SIGNED
 *
sign
;

190 
PKCS7_ENVELOPE
 *
ívñ›ed
;

192 
PKCS7_SIGN_ENVELOPE
 *
sig√d_™d_ívñ›ed
;

194 
PKCS7_DIGEST
 *
dige°
;

196 
PKCS7_ENCRYPT
 *
í¸y±ed
;

198 
ASN1_TYPE
 *
Ÿhî
;

199 } 
d
;

200 } 
	tPKCS7
;

202 
DECLARE_STACK_OF
(
PKCS7
)

203 
DECLARE_ASN1_SET_OF
(
PKCS7
)

204 
DECLARE_PKCS12_STACK_OF
(
PKCS7
)

206 
	#PKCS7_OP_SET_DETACHED_SIGNATURE
 1

	)

207 
	#PKCS7_OP_GET_DETACHED_SIGNATURE
 2

	)

209 
	#PKCS7_gë_sig√d_©åibuãs
(
si
Ë((si)->
auth_©å
)

	)

210 
	#PKCS7_gë_©åibuãs
(
si
Ë((si)->
u«uth_©å
)

	)

212 
	#PKCS7_ty≥_is_sig√d
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_sig√d
)

	)

213 
	#PKCS7_ty≥_is_í¸y±ed
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_í¸y±ed
)

	)

214 
	#PKCS7_ty≥_is_ívñ›ed
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_ívñ›ed
)

	)

215 
	#PKCS7_ty≥_is_sig√dAndEnvñ›ed
(
a
) \

216 (
	`OBJ_obj2nid
((
a
)->
ty≥
Ë=
NID_pkcs7_sig√dAndEnvñ›ed
)

	)

217 
	#PKCS7_ty≥_is_d©a
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_d©a
)

	)

218 
	#PKCS7_ty≥_is_dige°
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_dige°
)

	)

220 
	#PKCS7_£t_dëached
(
p
,
v
) \

221 
	`PKCS7_˘æ
(
p
,
PKCS7_OP_SET_DETACHED_SIGNATURE
,
v
,
NULL
)

	)

222 
	#PKCS7_gë_dëached
(
p
) \

223 
	`PKCS7_˘æ
(
p
,
PKCS7_OP_GET_DETACHED_SIGNATURE
,0,
NULL
)

	)

225 
	#PKCS7_is_dëached
(
p7
Ë(
	`PKCS7_ty≥_is_sig√d
’7Ë&& 
	`PKCS7_gë_dëached
’7))

	)

229 
	#PKCS7_TEXT
 0x1

	)

230 
	#PKCS7_NOCERTS
 0x2

	)

231 
	#PKCS7_NOSIGS
 0x4

	)

232 
	#PKCS7_NOCHAIN
 0x8

	)

233 
	#PKCS7_NOINTERN
 0x10

	)

234 
	#PKCS7_NOVERIFY
 0x20

	)

235 
	#PKCS7_DETACHED
 0x40

	)

236 
	#PKCS7_BINARY
 0x80

	)

237 
	#PKCS7_NOATTR
 0x100

	)

238 
	#PKCS7_NOSMIMECAP
 0x200

	)

239 
	#PKCS7_NOOLDMIMETYPE
 0x400

	)

240 
	#PKCS7_CRLFEOL
 0x800

	)

241 
	#PKCS7_STREAM
 0x1000

	)

242 
	#PKCS7_NOCRL
 0x2000

	)

243 
	#PKCS7_PARTIAL
 0x4000

	)

244 
	#PKCS7_REUSE_DIGEST
 0x8000

	)

248 
	#SMIME_TEXT
 
PKCS7_TEXT


	)

249 
	#SMIME_NOCERTS
 
PKCS7_NOCERTS


	)

250 
	#SMIME_NOSIGS
 
PKCS7_NOSIGS


	)

251 
	#SMIME_NOCHAIN
 
PKCS7_NOCHAIN


	)

252 
	#SMIME_NOINTERN
 
PKCS7_NOINTERN


	)

253 
	#SMIME_NOVERIFY
 
PKCS7_NOVERIFY


	)

254 
	#SMIME_DETACHED
 
PKCS7_DETACHED


	)

255 
	#SMIME_BINARY
 
PKCS7_BINARY


	)

256 
	#SMIME_NOATTR
 
PKCS7_NOATTR


	)

258 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ISSUER_AND_SERIAL
)

260 
PKCS7_ISSUER_AND_SERIAL_dige°
(
PKCS7_ISSUER_AND_SERIAL
 *
d©a
,

261 c⁄° 
EVP_MD
 *
ty≥
, *
md
,

262 *
Àn
);

263 #i‚de‡
OPENSSL_NO_FP_API


264 
PKCS7
 *
d2i_PKCS7_Â
(
FILE
 *
Â
, PKCS7 **
p7
);

265 
i2d_PKCS7_Â
(
FILE
 *
Â
, 
PKCS7
 *
p7
);

267 
PKCS7
 *
PKCS7_dup
(PKCS7 *
p7
);

268 
PKCS7
 *
d2i_PKCS7_bio
(
BIO
 *
bp
, PKCS7 **
p7
);

269 
i2d_PKCS7_bio
(
BIO
 *
bp
, 
PKCS7
 *
p7
);

270 
i2d_PKCS7_bio_°ªam
(
BIO
 *
out
, 
PKCS7
 *
p7
, BIO *
ö
, 
Êags
);

271 
PEM_wrôe_bio_PKCS7_°ªam
(
BIO
 *
out
, 
PKCS7
 *
p7
, BIO *
ö
, 
Êags
);

273 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNER_INFO
)

274 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_RECIP_INFO
)

275 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNED
)

276 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENC_CONTENT
)

277 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENVELOPE
)

278 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGN_ENVELOPE
)

279 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_DIGEST
)

280 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENCRYPT
)

281 
DECLARE_ASN1_FUNCTIONS
(
PKCS7
)

283 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_SIGN
)

284 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_VERIFY
)

286 
DECLARE_ASN1_NDEF_FUNCTION
(
PKCS7
)

287 
DECLARE_ASN1_PRINT_FUNCTION
(
PKCS7
)

289 
PKCS7_˘æ
(
PKCS7
 *
p7
, 
cmd
, 
œrg
, *
∑rg
);

291 
PKCS7_£t_ty≥
(
PKCS7
 *
p7
, 
ty≥
);

292 
PKCS7_£t0_ty≥_Ÿhî
(
PKCS7
 *
p7
, 
ty≥
, 
ASN1_TYPE
 *
Ÿhî
);

293 
PKCS7_£t_c⁄ã¡
(
PKCS7
 *
p7
, PKCS7 *
p7_d©a
);

294 
PKCS7_SIGNER_INFO_£t
(
PKCS7_SIGNER_INFO
 *
p7i
, 
X509
 *
x509
, 
EVP_PKEY
 *
pkey
,

295 c⁄° 
EVP_MD
 *
dg°
);

296 
PKCS7_SIGNER_INFO_sign
(
PKCS7_SIGNER_INFO
 *
si
);

297 
PKCS7_add_sig√r
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
p7i
);

298 
PKCS7_add_˚πifiˇã
(
PKCS7
 *
p7
, 
X509
 *
x509
);

299 
PKCS7_add_¸l
(
PKCS7
 *
p7
, 
X509_CRL
 *
x509
);

300 
PKCS7_c⁄ã¡_√w
(
PKCS7
 *
p7
, 
nid
);

301 
PKCS7_d©aVîify
(
X509_STORE
 *
˚π_°‹e
, 
X509_STORE_CTX
 *
˘x
,

302 
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

303 
PKCS7_sig«tuªVîify
(
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
,

304 
X509
 *
x509
);

306 
BIO
 *
PKCS7_d©aInô
(
PKCS7
 *
p7
, BIO *
bio
);

307 
PKCS7_d©aFöÆ
(
PKCS7
 *
p7
, 
BIO
 *
bio
);

308 
BIO
 *
PKCS7_d©aDecode
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, BIO *
ö_bio
, 
X509
 *
p˚π
);

310 
PKCS7_SIGNER_INFO
 *
PKCS7_add_sig«tuª
(
PKCS7
 *
p7
, 
X509
 *
x509
,

311 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
dg°
);

312 
X509
 *
PKCS7_˚π_‰om_sig√r_öfo
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

313 
PKCS7_£t_dige°
(
PKCS7
 *
p7
, c⁄° 
EVP_MD
 *
md
);

314 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
PKCS7_gë_sig√r_öfo
(
PKCS7
 *
p7
);

316 
PKCS7_RECIP_INFO
 *
PKCS7_add_ªcùõ¡
(
PKCS7
 *
p7
, 
X509
 *
x509
);

317 
PKCS7_SIGNER_INFO_gë0_Ægs
(
PKCS7_SIGNER_INFO
 *
si
, 
EVP_PKEY
 **
pk
,

318 
X509_ALGOR
 **
pdig
, X509_ALGOR **
psig
);

319 
PKCS7_RECIP_INFO_gë0_Æg
(
PKCS7_RECIP_INFO
 *
ri
, 
X509_ALGOR
 **
≥nc
);

320 
PKCS7_add_ªcùõ¡_öfo
(
PKCS7
 *
p7
, 
PKCS7_RECIP_INFO
 *
ri
);

321 
PKCS7_RECIP_INFO_£t
(
PKCS7_RECIP_INFO
 *
p7i
, 
X509
 *
x509
);

322 
PKCS7_£t_cùhî
(
PKCS7
 *
p7
, c⁄° 
EVP_CIPHER
 *
cùhî
);

323 
PKCS7_°ªam
(***
bound¨y
, 
PKCS7
 *
p7
);

325 
PKCS7_ISSUER_AND_SERIAL
 *
PKCS7_gë_issuî_™d_£rül
(
PKCS7
 *
p7
, 
idx
);

326 
ASN1_OCTET_STRING
 *
PKCS7_dige°_‰om_©åibuãs
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

327 
PKCS7_add_sig√d_©åibuã
(
PKCS7_SIGNER_INFO
 *
p7si
, 
nid
, 
ty≥
,

328 *
d©a
);

329 
PKCS7_add_©åibuã
(
PKCS7_SIGNER_INFO
 *
p7si
, 
nid
, 
©πy≥
,

330 *
vÆue
);

331 
ASN1_TYPE
 *
PKCS7_gë_©åibuã
(
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

332 
ASN1_TYPE
 *
PKCS7_gë_sig√d_©åibuã
(
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

333 
PKCS7_£t_sig√d_©åibuãs
(
PKCS7_SIGNER_INFO
 *
p7si
,

334 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

335 
PKCS7_£t_©åibuãs
(
PKCS7_SIGNER_INFO
 *
p7si
,

336 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

338 
PKCS7
 *
PKCS7_sign
(
X509
 *
sign˚π
, 
EVP_PKEY
 *
pkey
, 
STACK_OF
(X509Ë*
˚πs
,

339 
BIO
 *
d©a
, 
Êags
);

341 
PKCS7_SIGNER_INFO
 *
PKCS7_sign_add_sig√r
(
PKCS7
 *
p7
,

342 
X509
 *
sign˚π
, 
EVP_PKEY
 *
pkey
,

343 c⁄° 
EVP_MD
 *
md
, 
Êags
);

345 
PKCS7_föÆ
(
PKCS7
 *
p7
, 
BIO
 *
d©a
, 
Êags
);

346 
PKCS7_vîify
(
PKCS7
 *
p7
, 
STACK_OF
(
X509
Ë*
˚πs
, 
X509_STORE
 *
°‹e
,

347 
BIO
 *
öd©a
, BIO *
out
, 
Êags
);

348 
STACK_OF
(
X509
Ë*
PKCS7_gë0_sig√rs
(
PKCS7
 *
p7
, STACK_OF(X509Ë*
˚πs
,

349 
Êags
);

350 
PKCS7
 *
PKCS7_í¸y±
(
STACK_OF
(
X509
Ë*
˚πs
, 
BIO
 *
ö
, c⁄° 
EVP_CIPHER
 *
cùhî
,

351 
Êags
);

352 
PKCS7_de¸y±
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, 
X509
 *
˚π
, 
BIO
 *
d©a
,

353 
Êags
);

355 
PKCS7_add_©åib_smimeˇp
(
PKCS7_SIGNER_INFO
 *
si
,

356 
STACK_OF
(
X509_ALGOR
Ë*
ˇp
);

357 
STACK_OF
(
X509_ALGOR
Ë*
PKCS7_gë_smimeˇp
(
PKCS7_SIGNER_INFO
 *
si
);

358 
PKCS7_sim∂e_smimeˇp
(
STACK_OF
(
X509_ALGOR
Ë*
sk
, 
nid
, 
¨g
);

360 
PKCS7_add_©åib_c⁄ã¡_ty≥
(
PKCS7_SIGNER_INFO
 *
si
, 
ASN1_OBJECT
 *
coid
);

361 
PKCS7_add0_©åib_signög_time
(
PKCS7_SIGNER_INFO
 *
si
, 
ASN1_TIME
 *
t
);

362 
PKCS7_add1_©åib_dige°
(
PKCS7_SIGNER_INFO
 *
si
,

363 c⁄° *
md
, 
mdÀn
);

365 
SMIME_wrôe_PKCS7
(
BIO
 *
bio
, 
PKCS7
 *
p7
, BIO *
d©a
, 
Êags
);

366 
PKCS7
 *
SMIME_ªad_PKCS7
(
BIO
 *
bio
, BIO **
bc⁄t
);

368 
BIO
 *
BIO_√w_PKCS7
(BIO *
out
, 
PKCS7
 *
p7
);

375 
ERR_lﬂd_PKCS7_°rögs
();

380 
	#PKCS7_F_B64_READ_PKCS7
 120

	)

381 
	#PKCS7_F_B64_WRITE_PKCS7
 121

	)

382 
	#PKCS7_F_DO_PKCS7_SIGNED_ATTRIB
 136

	)

383 
	#PKCS7_F_I2D_PKCS7_BIO_STREAM
 140

	)

384 
	#PKCS7_F_PKCS7_ADD0_ATTRIB_SIGNING_TIME
 135

	)

385 
	#PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP
 118

	)

386 
	#PKCS7_F_PKCS7_ADD_CERTIFICATE
 100

	)

387 
	#PKCS7_F_PKCS7_ADD_CRL
 101

	)

388 
	#PKCS7_F_PKCS7_ADD_RECIPIENT_INFO
 102

	)

389 
	#PKCS7_F_PKCS7_ADD_SIGNATURE
 131

	)

390 
	#PKCS7_F_PKCS7_ADD_SIGNER
 103

	)

391 
	#PKCS7_F_PKCS7_BIO_ADD_DIGEST
 125

	)

392 
	#PKCS7_F_PKCS7_COPY_EXISTING_DIGEST
 138

	)

393 
	#PKCS7_F_PKCS7_CTRL
 104

	)

394 
	#PKCS7_F_PKCS7_DATADECODE
 112

	)

395 
	#PKCS7_F_PKCS7_DATAFINAL
 128

	)

396 
	#PKCS7_F_PKCS7_DATAINIT
 105

	)

397 
	#PKCS7_F_PKCS7_DATASIGN
 106

	)

398 
	#PKCS7_F_PKCS7_DATAVERIFY
 107

	)

399 
	#PKCS7_F_PKCS7_DECRYPT
 114

	)

400 
	#PKCS7_F_PKCS7_DECRYPT_RINFO
 133

	)

401 
	#PKCS7_F_PKCS7_ENCODE_RINFO
 132

	)

402 
	#PKCS7_F_PKCS7_ENCRYPT
 115

	)

403 
	#PKCS7_F_PKCS7_FINAL
 134

	)

404 
	#PKCS7_F_PKCS7_FIND_DIGEST
 127

	)

405 
	#PKCS7_F_PKCS7_GET0_SIGNERS
 124

	)

406 
	#PKCS7_F_PKCS7_RECIP_INFO_SET
 130

	)

407 
	#PKCS7_F_PKCS7_SET_CIPHER
 108

	)

408 
	#PKCS7_F_PKCS7_SET_CONTENT
 109

	)

409 
	#PKCS7_F_PKCS7_SET_DIGEST
 126

	)

410 
	#PKCS7_F_PKCS7_SET_TYPE
 110

	)

411 
	#PKCS7_F_PKCS7_SIGN
 116

	)

412 
	#PKCS7_F_PKCS7_SIGNATUREVERIFY
 113

	)

413 
	#PKCS7_F_PKCS7_SIGNER_INFO_SET
 129

	)

414 
	#PKCS7_F_PKCS7_SIGNER_INFO_SIGN
 139

	)

415 
	#PKCS7_F_PKCS7_SIGN_ADD_SIGNER
 137

	)

416 
	#PKCS7_F_PKCS7_SIMPLE_SMIMECAP
 119

	)

417 
	#PKCS7_F_PKCS7_VERIFY
 117

	)

418 
	#PKCS7_F_SMIME_READ_PKCS7
 122

	)

419 
	#PKCS7_F_SMIME_TEXT
 123

	)

422 
	#PKCS7_R_CERTIFICATE_VERIFY_ERROR
 117

	)

423 
	#PKCS7_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 144

	)

424 
	#PKCS7_R_CIPHER_NOT_INITIALIZED
 116

	)

425 
	#PKCS7_R_CONTENT_AND_DATA_PRESENT
 118

	)

426 
	#PKCS7_R_CTRL_ERROR
 152

	)

427 
	#PKCS7_R_DECODE_ERROR
 130

	)

428 
	#PKCS7_R_DECRYPTED_KEY_IS_WRONG_LENGTH
 100

	)

429 
	#PKCS7_R_DECRYPT_ERROR
 119

	)

430 
	#PKCS7_R_DIGEST_FAILURE
 101

	)

431 
	#PKCS7_R_ENCRYPTION_CTRL_FAILURE
 149

	)

432 
	#PKCS7_R_ENCRYPTION_NOT_SUPPORTED_FOR_THIS_KEY_TYPE
 150

	)

433 
	#PKCS7_R_ERROR_ADDING_RECIPIENT
 120

	)

434 
	#PKCS7_R_ERROR_SETTING_CIPHER
 121

	)

435 
	#PKCS7_R_INVALID_MIME_TYPE
 131

	)

436 
	#PKCS7_R_INVALID_NULL_POINTER
 143

	)

437 
	#PKCS7_R_INVALID_SIGNED_DATA_TYPE
 155

	)

438 
	#PKCS7_R_MIME_NO_CONTENT_TYPE
 132

	)

439 
	#PKCS7_R_MIME_PARSE_ERROR
 133

	)

440 
	#PKCS7_R_MIME_SIG_PARSE_ERROR
 134

	)

441 
	#PKCS7_R_MISSING_CERIPEND_INFO
 103

	)

442 
	#PKCS7_R_NO_CONTENT
 122

	)

443 
	#PKCS7_R_NO_CONTENT_TYPE
 135

	)

444 
	#PKCS7_R_NO_DEFAULT_DIGEST
 151

	)

445 
	#PKCS7_R_NO_MATCHING_DIGEST_TYPE_FOUND
 154

	)

446 
	#PKCS7_R_NO_MULTIPART_BODY_FAILURE
 136

	)

447 
	#PKCS7_R_NO_MULTIPART_BOUNDARY
 137

	)

448 
	#PKCS7_R_NO_RECIPIENT_MATCHES_CERTIFICATE
 115

	)

449 
	#PKCS7_R_NO_RECIPIENT_MATCHES_KEY
 146

	)

450 
	#PKCS7_R_NO_SIGNATURES_ON_DATA
 123

	)

451 
	#PKCS7_R_NO_SIGNERS
 142

	)

452 
	#PKCS7_R_NO_SIG_CONTENT_TYPE
 138

	)

453 
	#PKCS7_R_OPERATION_NOT_SUPPORTED_ON_THIS_TYPE
 104

	)

454 
	#PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR
 124

	)

455 
	#PKCS7_R_PKCS7_ADD_SIGNER_ERROR
 153

	)

456 
	#PKCS7_R_PKCS7_DATAFINAL
 126

	)

457 
	#PKCS7_R_PKCS7_DATAFINAL_ERROR
 125

	)

458 
	#PKCS7_R_PKCS7_DATASIGN
 145

	)

459 
	#PKCS7_R_PKCS7_PARSE_ERROR
 139

	)

460 
	#PKCS7_R_PKCS7_SIG_PARSE_ERROR
 140

	)

461 
	#PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE
 127

	)

462 
	#PKCS7_R_SIGNATURE_FAILURE
 105

	)

463 
	#PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND
 128

	)

464 
	#PKCS7_R_SIGNING_CTRL_FAILURE
 147

	)

465 
	#PKCS7_R_SIGNING_NOT_SUPPORTED_FOR_THIS_KEY_TYPE
 148

	)

466 
	#PKCS7_R_SIG_INVALID_MIME_TYPE
 141

	)

467 
	#PKCS7_R_SMIME_TEXT_ERROR
 129

	)

468 
	#PKCS7_R_UNABLE_TO_FIND_CERTIFICATE
 106

	)

469 
	#PKCS7_R_UNABLE_TO_FIND_MEM_BIO
 107

	)

470 
	#PKCS7_R_UNABLE_TO_FIND_MESSAGE_DIGEST
 108

	)

471 
	#PKCS7_R_UNKNOWN_DIGEST_TYPE
 109

	)

472 
	#PKCS7_R_UNKNOWN_OPERATION
 110

	)

473 
	#PKCS7_R_UNSUPPORTED_CIPHER_TYPE
 111

	)

474 
	#PKCS7_R_UNSUPPORTED_CONTENT_TYPE
 112

	)

475 
	#PKCS7_R_WRONG_CONTENT_TYPE
 113

	)

476 
	#PKCS7_R_WRONG_PKCS7_TYPE
 114

	)

478 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/rand.h

59 #i‚de‡
HEADER_RAND_H


60 
	#HEADER_RAND_H


	)

62 
	~<°dlib.h
>

63 
	~<›ís¶/os¶_typ.h
>

64 
	~<›ís¶/e_os2.h
>

66 #i‡
deföed
(
OPENSSL_SYS_WINDOWS
)

67 
	~<wödows.h
>

70 #ifde‡ 
__˝lu•lus


74 #i‡
deföed
(
OPENSSL_FIPS
)

75 
	#FIPS_RAND_SIZE_T
 
size_t


	)

81 
	sønd_mëh_°
 {

82 (*
£ed
Ë(c⁄° *
buf
, 
num
);

83 (*
byãs
Ë(*
buf
, 
num
);

84 (*
˛ónup
) ();

85 (*
add
Ë(c⁄° *
buf
, 
num
, 
íå›y
);

86 (*
p£ud‹™d
Ë(*
buf
, 
num
);

87 (*
°©us
) ();

90 #ifde‡
BN_DEBUG


91 
ønd_¥edi˘abÀ
;

94 
RAND_£t_ønd_mëhod
(c⁄° 
RAND_METHOD
 *
mëh
);

95 c⁄° 
RAND_METHOD
 *
RAND_gë_ønd_mëhod
();

96 #i‚de‡
OPENSSL_NO_ENGINE


97 
RAND_£t_ønd_ígöe
(
ENGINE
 *
ígöe
);

99 
RAND_METHOD
 *
RAND_SSLóy
();

100 
RAND_˛ónup
();

101 
RAND_byãs
(*
buf
, 
num
);

102 
RAND_p£udo_byãs
(*
buf
, 
num
);

103 
RAND_£ed
(c⁄° *
buf
, 
num
);

104 
RAND_add
(c⁄° *
buf
, 
num
, 
íå›y
);

105 
RAND_lﬂd_fûe
(c⁄° *
fûe
, 
max_byãs
);

106 
RAND_wrôe_fûe
(c⁄° *
fûe
);

107 c⁄° *
RAND_fûe_«me
(*
fûe
, 
size_t
 
num
);

108 
RAND_°©us
();

109 
RAND_quîy_egd_byãs
(c⁄° *
∑th
, *
buf
, 
byãs
);

110 
RAND_egd
(c⁄° *
∑th
);

111 
RAND_egd_byãs
(c⁄° *
∑th
, 
byãs
);

112 
RAND_pﬁl
();

114 #i‡
deföed
(
OPENSSL_SYS_WINDOWS
Ë|| deföed(
OPENSSL_SYS_WIN32
)

116 
RAND_s¸ìn
();

117 
RAND_evít
(
UINT
, 
WPARAM
, 
LPARAM
);

121 #ifde‡
OPENSSL_FIPS


122 
RAND_£t_fùs_drbg_ty≥
(
ty≥
, 
Êags
);

123 
RAND_öô_fùs
();

131 
ERR_lﬂd_RAND_°rögs
();

136 
	#RAND_F_RAND_GET_RAND_METHOD
 101

	)

137 
	#RAND_F_RAND_INIT_FIPS
 102

	)

138 
	#RAND_F_SSLEAY_RAND_BYTES
 100

	)

141 
	#RAND_R_DUAL_EC_DRBG_DISABLED
 104

	)

142 
	#RAND_R_ERROR_INITIALISING_DRBG
 102

	)

143 
	#RAND_R_ERROR_INSTANTIATING_DRBG
 103

	)

144 
	#RAND_R_NO_FIPS_RANDOM_METHOD_SET
 101

	)

145 
	#RAND_R_PRNG_NOT_SEEDED
 100

	)

147 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/rsa.h

59 #i‚de‡
HEADER_RSA_H


60 
	#HEADER_RSA_H


	)

62 
	~<›ís¶/a¢1.h
>

64 #i‚de‡
OPENSSL_NO_BIO


65 
	~<›ís¶/bio.h
>

67 
	~<›ís¶/¸y±o.h
>

68 
	~<›ís¶/os¶_typ.h
>

69 #i‚de‡
OPENSSL_NO_DEPRECATED


70 
	~<›ís¶/bn.h
>

73 #ifde‡
OPENSSL_NO_RSA


74 #îr‹ 
RSA
 
is
 
dißbÀd
.

77 #ifde‡ 
__˝lu•lus


85 
	srß_mëh_°
 {

86 c⁄° *
«me
;

87 (*
rß_pub_íc
Ë(
Êí
, c⁄° *
‰om
,

88 *
to
, 
RSA
 *
rß
, 
∑ddög
);

89 (*
rß_pub_dec
Ë(
Êí
, c⁄° *
‰om
,

90 *
to
, 
RSA
 *
rß
, 
∑ddög
);

91 (*
rß_¥iv_íc
Ë(
Êí
, c⁄° *
‰om
,

92 *
to
, 
RSA
 *
rß
, 
∑ddög
);

93 (*
rß_¥iv_dec
Ë(
Êí
, c⁄° *
‰om
,

94 *
to
, 
RSA
 *
rß
, 
∑ddög
);

96 (*
rß_mod_exp
Ë(
BIGNUM
 *
r0
, c⁄° BIGNUM *
I
, 
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

98 (*
bn_mod_exp
Ë(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

99 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

101 (*
öô
Ë(
RSA
 *
rß
);

103 (*
föish
Ë(
RSA
 *
rß
);

105 
Êags
;

107 *
≠p_d©a
;

116 (*
rß_sign
Ë(
ty≥
,

117 c⁄° *
m
, 
m_Àngth
,

118 *
sigªt
, *
sigÀn
,

119 c⁄° 
RSA
 *
rß
);

120 (*
rß_vîify
Ë(
dty≥
, c⁄° *
m
,

121 
m_Àngth
, c⁄° *
sigbuf
,

122 
sigÀn
, c⁄° 
RSA
 *
rß
);

129 (*
rß_keygí
Ë(
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

132 
	srß_°
 {

137 
∑d
;

138 
vîsi⁄
;

139 c⁄° 
RSA_METHOD
 *
mëh
;

141 
ENGINE
 *
ígöe
;

142 
BIGNUM
 *
n
;

143 
BIGNUM
 *
e
;

144 
BIGNUM
 *
d
;

145 
BIGNUM
 *
p
;

146 
BIGNUM
 *
q
;

147 
BIGNUM
 *
dmp1
;

148 
BIGNUM
 *
dmq1
;

149 
BIGNUM
 *
iqmp
;

151 
CRYPTO_EX_DATA
 
ex_d©a
;

152 
ª„ªn˚s
;

153 
Êags
;

155 
BN_MONT_CTX
 *
_mëhod_mod_n
;

156 
BN_MONT_CTX
 *
_mëhod_mod_p
;

157 
BN_MONT_CTX
 *
_mëhod_mod_q
;

162 *
bignum_d©a
;

163 
BN_BLINDING
 *
blödög
;

164 
BN_BLINDING
 *
mt_blödög
;

167 #i‚de‡
OPENSSL_RSA_MAX_MODULUS_BITS


168 
	#OPENSSL_RSA_MAX_MODULUS_BITS
 16384

	)

171 
	#OPENSSL_RSA_FIPS_MIN_MODULUS_BITS
 1024

	)

173 #i‚de‡
OPENSSL_RSA_SMALL_MODULUS_BITS


174 
	#OPENSSL_RSA_SMALL_MODULUS_BITS
 3072

	)

176 #i‚de‡
OPENSSL_RSA_MAX_PUBEXP_BITS


179 
	#OPENSSL_RSA_MAX_PUBEXP_BITS
 64

	)

182 
	#RSA_3
 0x3L

	)

183 
	#RSA_F4
 0x10001L

	)

185 
	#RSA_METHOD_FLAG_NO_CHECK
 0x0001

	)

188 
	#RSA_FLAG_CACHE_PUBLIC
 0x0002

	)

189 
	#RSA_FLAG_CACHE_PRIVATE
 0x0004

	)

190 
	#RSA_FLAG_BLINDING
 0x0008

	)

191 
	#RSA_FLAG_THREAD_SAFE
 0x0010

	)

198 
	#RSA_FLAG_EXT_PKEY
 0x0020

	)

204 
	#RSA_FLAG_SIGN_VER
 0x0040

	)

212 
	#RSA_FLAG_NO_BLINDING
 0x0080

	)

224 
	#RSA_FLAG_NO_CONSTTIME
 0x0100

	)

225 #ifde‡
OPENSSL_USE_DEPRECATED


235 
	#RSA_FLAG_NO_EXP_CONSTTIME
 
RSA_FLAG_NO_CONSTTIME


	)

238 
	#EVP_PKEY_CTX_£t_rß_∑ddög
(
˘x
, 
∑d
) \

239 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, -1, 
EVP_PKEY_CTRL_RSA_PADDING
, \

240 
∑d
, 
NULL
)

	)

242 
	#EVP_PKEY_CTX_gë_rß_∑ddög
(
˘x
, 
µad
) \

243 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, -1, \

244 
EVP_PKEY_CTRL_GET_RSA_PADDING
, 0, 
µad
)

	)

246 
	#EVP_PKEY_CTX_£t_rß_pss_ß…Àn
(
˘x
, 
Àn
) \

247 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, \

248 (
EVP_PKEY_OP_SIGN
|
EVP_PKEY_OP_VERIFY
), \

249 
EVP_PKEY_CTRL_RSA_PSS_SALTLEN
, \

250 
Àn
, 
NULL
)

	)

252 
	#EVP_PKEY_CTX_gë_rß_pss_ß…Àn
(
˘x
, 
∂í
) \

253 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, \

254 (
EVP_PKEY_OP_SIGN
|
EVP_PKEY_OP_VERIFY
), \

255 
EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN
, \

256 0, 
∂í
)

	)

258 
	#EVP_PKEY_CTX_£t_rß_keygí_bôs
(
˘x
, 
bôs
) \

259 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_KEYGEN
, \

260 
EVP_PKEY_CTRL_RSA_KEYGEN_BITS
, 
bôs
, 
NULL
)

	)

262 
	#EVP_PKEY_CTX_£t_rß_keygí_pubexp
(
˘x
, 
pubexp
) \

263 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_KEYGEN
, \

264 
EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP
, 0, 
pubexp
)

	)

266 
	#EVP_PKEY_CTX_£t_rß_mgf1_md
(
˘x
, 
md
) \

267 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, \

268 
EVP_PKEY_OP_TYPE_SIG
 | 
EVP_PKEY_OP_TYPE_CRYPT
, \

269 
EVP_PKEY_CTRL_RSA_MGF1_MD
, 0, (*)
md
)

	)

271 
	#EVP_PKEY_CTX_£t_rß_ﬂï_md
(
˘x
, 
md
) \

272 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_CRYPT
, \

273 
EVP_PKEY_CTRL_RSA_OAEP_MD
, 0, (*)
md
)

	)

275 
	#EVP_PKEY_CTX_gë_rß_mgf1_md
(
˘x
, 
pmd
) \

276 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, \

277 
EVP_PKEY_OP_TYPE_SIG
 | 
EVP_PKEY_OP_TYPE_CRYPT
, \

278 
EVP_PKEY_CTRL_GET_RSA_MGF1_MD
, 0, (*)
pmd
)

	)

280 
	#EVP_PKEY_CTX_gë_rß_ﬂï_md
(
˘x
, 
pmd
) \

281 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_CRYPT
, \

282 
EVP_PKEY_CTRL_GET_RSA_OAEP_MD
, 0, (*)
pmd
)

	)

284 
	#EVP_PKEY_CTX_£t0_rß_ﬂï_œbñ
(
˘x
, 
l
, 
Œí
) \

285 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_CRYPT
, \

286 
EVP_PKEY_CTRL_RSA_OAEP_LABEL
, 
Œí
, (*)
l
)

	)

288 
	#EVP_PKEY_CTX_gë0_rß_ﬂï_œbñ
(
˘x
, 
l
) \

289 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_CRYPT
, \

290 
EVP_PKEY_CTRL_GET_RSA_OAEP_LABEL
, 0, (*)
l
)

	)

292 
	#EVP_PKEY_CTRL_RSA_PADDING
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

293 
	#EVP_PKEY_CTRL_RSA_PSS_SALTLEN
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

295 
	#EVP_PKEY_CTRL_RSA_KEYGEN_BITS
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

296 
	#EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP
 (
EVP_PKEY_ALG_CTRL
 + 4)

	)

297 
	#EVP_PKEY_CTRL_RSA_MGF1_MD
 (
EVP_PKEY_ALG_CTRL
 + 5)

	)

299 
	#EVP_PKEY_CTRL_GET_RSA_PADDING
 (
EVP_PKEY_ALG_CTRL
 + 6)

	)

300 
	#EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN
 (
EVP_PKEY_ALG_CTRL
 + 7)

	)

301 
	#EVP_PKEY_CTRL_GET_RSA_MGF1_MD
 (
EVP_PKEY_ALG_CTRL
 + 8)

	)

303 
	#EVP_PKEY_CTRL_RSA_OAEP_MD
 (
EVP_PKEY_ALG_CTRL
 + 9)

	)

304 
	#EVP_PKEY_CTRL_RSA_OAEP_LABEL
 (
EVP_PKEY_ALG_CTRL
 + 10)

	)

306 
	#EVP_PKEY_CTRL_GET_RSA_OAEP_MD
 (
EVP_PKEY_ALG_CTRL
 + 11)

	)

307 
	#EVP_PKEY_CTRL_GET_RSA_OAEP_LABEL
 (
EVP_PKEY_ALG_CTRL
 + 12)

	)

309 
	#RSA_PKCS1_PADDING
 1

	)

310 
	#RSA_SSLV23_PADDING
 2

	)

311 
	#RSA_NO_PADDING
 3

	)

312 
	#RSA_PKCS1_OAEP_PADDING
 4

	)

313 
	#RSA_X931_PADDING
 5

	)

315 
	#RSA_PKCS1_PSS_PADDING
 6

	)

317 
	#RSA_PKCS1_PADDING_SIZE
 11

	)

319 
	#RSA_£t_≠p_d©a
(
s
,
¨g
Ë
	`RSA_£t_ex_d©a
(s,0,¨g)

	)

320 
	#RSA_gë_≠p_d©a
(
s
Ë
	`RSA_gë_ex_d©a
(s,0)

	)

322 
RSA
 *
RSA_√w
();

323 
RSA
 *
RSA_√w_mëhod
(
ENGINE
 *
ígöe
);

324 
RSA_size
(c⁄° 
RSA
 *
rß
);

327 #i‚de‡
OPENSSL_NO_DEPRECATED


328 
RSA
 *
RSA_gíî©e_key
(
bôs
, 
e
, 

329 (*
ˇŒback
Ë(, , *), *
cb_¨g
);

333 
RSA_gíî©e_key_ex
(
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

334 
RSA_X931_dîive_ex
(
RSA
 *
rß
, 
BIGNUM
 *
p1
, BIGNUM *
p2
, BIGNUM *
q1
,

335 
BIGNUM
 *
q2
, c⁄° BIGNUM *
Xp1
, c⁄° BIGNUM *
Xp2
,

336 c⁄° 
BIGNUM
 *
Xp
, c⁄° BIGNUM *
Xq1
,

337 c⁄° 
BIGNUM
 *
Xq2
, c⁄° BIGNUM *
Xq
,

338 c⁄° 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

339 
RSA_X931_gíî©e_key_ex
(
RSA
 *
rß
, 
bôs
, c⁄° 
BIGNUM
 *
e
,

340 
BN_GENCB
 *
cb
);

342 
RSA_check_key
(c⁄° 
RSA
 *);

344 
RSA_public_í¸y±
(
Êí
, c⁄° *
‰om
,

345 *
to
, 
RSA
 *
rß
, 
∑ddög
);

346 
RSA_¥iv©e_í¸y±
(
Êí
, c⁄° *
‰om
,

347 *
to
, 
RSA
 *
rß
, 
∑ddög
);

348 
RSA_public_de¸y±
(
Êí
, c⁄° *
‰om
,

349 *
to
, 
RSA
 *
rß
, 
∑ddög
);

350 
RSA_¥iv©e_de¸y±
(
Êí
, c⁄° *
‰om
,

351 *
to
, 
RSA
 *
rß
, 
∑ddög
);

352 
RSA_‰ì
(
RSA
 *
r
);

354 
RSA_up_ªf
(
RSA
 *
r
);

356 
RSA_Êags
(c⁄° 
RSA
 *
r
);

358 
RSA_£t_deÁu…_mëhod
(c⁄° 
RSA_METHOD
 *
mëh
);

359 c⁄° 
RSA_METHOD
 *
RSA_gë_deÁu…_mëhod
();

360 c⁄° 
RSA_METHOD
 *
RSA_gë_mëhod
(c⁄° 
RSA
 *
rß
);

361 
RSA_£t_mëhod
(
RSA
 *
rß
, c⁄° 
RSA_METHOD
 *
mëh
);

364 
RSA_mem‹y_lock
(
RSA
 *
r
);

367 c⁄° 
RSA_METHOD
 *
RSA_PKCS1_SSLóy
();

369 c⁄° 
RSA_METHOD
 *
RSA_nuŒ_mëhod
();

371 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
RSA
, 
RSAPublicKey
)

372 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
RSA
, 
RSAPriv©eKey
)

374 
	srß_pss_∑øms_°
 {

375 
X509_ALGOR
 *
hashAlg‹ôhm
;

376 
X509_ALGOR
 *
maskGíAlg‹ôhm
;

377 
ASN1_INTEGER
 *
ß…Lígth
;

378 
ASN1_INTEGER
 *
åaûîFõld
;

379 } 
	tRSA_PSS_PARAMS
;

381 
DECLARE_ASN1_FUNCTIONS
(
RSA_PSS_PARAMS
)

383 
	srß_ﬂï_∑øms_°
 {

384 
X509_ALGOR
 *
hashFunc
;

385 
X509_ALGOR
 *
maskGíFunc
;

386 
X509_ALGOR
 *
pSour˚Func
;

387 } 
	tRSA_OAEP_PARAMS
;

389 
DECLARE_ASN1_FUNCTIONS
(
RSA_OAEP_PARAMS
)

391 #i‚de‡
OPENSSL_NO_FP_API


392 
RSA_¥öt_Â
(
FILE
 *
Â
, c⁄° 
RSA
 *
r
, 
off£t
);

395 #i‚de‡
OPENSSL_NO_BIO


396 
RSA_¥öt
(
BIO
 *
bp
, c⁄° 
RSA
 *
r
, 
off£t
);

399 #i‚de‡
OPENSSL_NO_RC4


400 
i2d_RSA_NET
(c⁄° 
RSA
 *
a
, **
µ
,

401 (*
cb
Ë(*
buf
, 
Àn
, c⁄° *
¥om±
,

402 
vîify
), 
sgckey
);

403 
RSA
 *
d2i_RSA_NET
(RSA **
a
, c⁄° **
µ
, 
Àngth
,

404 (*
cb
Ë(*
buf
, 
Àn
, c⁄° *
¥om±
,

405 
vîify
), 
sgckey
);

407 
i2d_Nësˇ≥_RSA
(c⁄° 
RSA
 *
a
, **
µ
,

408 (*
cb
Ë(*
buf
, 
Àn
, c⁄° *
¥om±
,

409 
vîify
));

410 
RSA
 *
d2i_Nësˇ≥_RSA
(RSA **
a
, c⁄° **
µ
, 
Àngth
,

411 (*
cb
Ë(*
buf
, 
Àn
, c⁄° *
¥om±
,

412 
vîify
));

419 
RSA_sign
(
ty≥
, c⁄° *
m
, 
m_Àngth
,

420 *
sigªt
, *
sigÀn
, 
RSA
 *
rß
);

421 
RSA_vîify
(
ty≥
, c⁄° *
m
, 
m_Àngth
,

422 c⁄° *
sigbuf
, 
sigÀn
, 
RSA
 *
rß
);

428 
RSA_sign_ASN1_OCTET_STRING
(
ty≥
,

429 c⁄° *
m
, 
m_Àngth
,

430 *
sigªt
, *
sigÀn
,

431 
RSA
 *
rß
);

432 
RSA_vîify_ASN1_OCTET_STRING
(
ty≥
, c⁄° *
m
,

433 
m_Àngth
, *
sigbuf
,

434 
sigÀn
, 
RSA
 *
rß
);

436 
RSA_blödög_⁄
(
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

437 
RSA_blödög_off
(
RSA
 *
rß
);

438 
BN_BLINDING
 *
RSA_£tup_blödög
(
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

440 
RSA_∑ddög_add_PKCS1_ty≥_1
(*
to
, 
éí
,

441 c⁄° *
f
, 
Ê
);

442 
RSA_∑ddög_check_PKCS1_ty≥_1
(*
to
, 
éí
,

443 c⁄° *
f
, 
Ê
,

444 
rß_Àn
);

445 
RSA_∑ddög_add_PKCS1_ty≥_2
(*
to
, 
éí
,

446 c⁄° *
f
, 
Ê
);

447 
RSA_∑ddög_check_PKCS1_ty≥_2
(*
to
, 
éí
,

448 c⁄° *
f
, 
Ê
,

449 
rß_Àn
);

450 
PKCS1_MGF1
(*
mask
, 
Àn
, c⁄° *
£ed
,

451 
£edÀn
, c⁄° 
EVP_MD
 *
dg°
);

452 
RSA_∑ddög_add_PKCS1_OAEP
(*
to
, 
éí
,

453 c⁄° *
f
, 
Ê
,

454 c⁄° *
p
, 
∂
);

455 
RSA_∑ddög_check_PKCS1_OAEP
(*
to
, 
éí
,

456 c⁄° *
f
, 
Ê
, 
rß_Àn
,

457 c⁄° *
p
, 
∂
);

458 
RSA_∑ddög_add_PKCS1_OAEP_mgf1
(*
to
, 
éí
,

459 c⁄° *
‰om
, 
Êí
,

460 c⁄° *
∑øm
, 
∂í
,

461 c⁄° 
EVP_MD
 *
md
, c⁄° EVP_MD *
mgf1md
);

462 
RSA_∑ddög_check_PKCS1_OAEP_mgf1
(*
to
, 
éí
,

463 c⁄° *
‰om
, 
Êí
,

464 
num
, c⁄° *
∑øm
,

465 
∂í
, c⁄° 
EVP_MD
 *
md
,

466 c⁄° 
EVP_MD
 *
mgf1md
);

467 
RSA_∑ddög_add_SSLv23
(*
to
, 
éí
,

468 c⁄° *
f
, 
Ê
);

469 
RSA_∑ddög_check_SSLv23
(*
to
, 
éí
,

470 c⁄° *
f
, 
Ê
, 
rß_Àn
);

471 
RSA_∑ddög_add_n⁄e
(*
to
, 
éí
, c⁄° *
f
,

472 
Ê
);

473 
RSA_∑ddög_check_n⁄e
(*
to
, 
éí
,

474 c⁄° *
f
, 
Ê
, 
rß_Àn
);

475 
RSA_∑ddög_add_X931
(*
to
, 
éí
, c⁄° *
f
,

476 
Ê
);

477 
RSA_∑ddög_check_X931
(*
to
, 
éí
,

478 c⁄° *
f
, 
Ê
, 
rß_Àn
);

479 
RSA_X931_hash_id
(
nid
);

481 
RSA_vîify_PKCS1_PSS
(
RSA
 *
rß
, c⁄° *
mHash
,

482 c⁄° 
EVP_MD
 *
Hash
, c⁄° *
EM
,

483 
sLí
);

484 
RSA_∑ddög_add_PKCS1_PSS
(
RSA
 *
rß
, *
EM
,

485 c⁄° *
mHash
, c⁄° 
EVP_MD
 *
Hash
,

486 
sLí
);

488 
RSA_vîify_PKCS1_PSS_mgf1
(
RSA
 *
rß
, c⁄° *
mHash
,

489 c⁄° 
EVP_MD
 *
Hash
, c⁄° EVP_MD *
mgf1Hash
,

490 c⁄° *
EM
, 
sLí
);

492 
RSA_∑ddög_add_PKCS1_PSS_mgf1
(
RSA
 *
rß
, *
EM
,

493 c⁄° *
mHash
,

494 c⁄° 
EVP_MD
 *
Hash
, c⁄° EVP_MD *
mgf1Hash
,

495 
sLí
);

497 
RSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

498 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

499 
RSA_£t_ex_d©a
(
RSA
 *
r
, 
idx
, *
¨g
);

500 *
RSA_gë_ex_d©a
(c⁄° 
RSA
 *
r
, 
idx
);

502 
RSA
 *
RSAPublicKey_dup
(RSA *
rß
);

503 
RSA
 *
RSAPriv©eKey_dup
(RSA *
rß
);

512 
	#RSA_FLAG_FIPS_METHOD
 0x0400

	)

520 
	#RSA_FLAG_NON_FIPS_ALLOW
 0x0400

	)

525 
	#RSA_FLAG_CHECKED
 0x0800

	)

532 
ERR_lﬂd_RSA_°rögs
();

537 
	#RSA_F_CHECK_PADDING_MD
 140

	)

538 
	#RSA_F_DO_RSA_PRINT
 146

	)

539 
	#RSA_F_INT_RSA_VERIFY
 145

	)

540 
	#RSA_F_MEMORY_LOCK
 100

	)

541 
	#RSA_F_OLD_RSA_PRIV_DECODE
 147

	)

542 
	#RSA_F_PKEY_RSA_CTRL
 143

	)

543 
	#RSA_F_PKEY_RSA_CTRL_STR
 144

	)

544 
	#RSA_F_PKEY_RSA_SIGN
 142

	)

545 
	#RSA_F_PKEY_RSA_VERIFY
 154

	)

546 
	#RSA_F_PKEY_RSA_VERIFYRECOVER
 141

	)

547 
	#RSA_F_RSA_ALGOR_TO_MD
 157

	)

548 
	#RSA_F_RSA_BUILTIN_KEYGEN
 129

	)

549 
	#RSA_F_RSA_CHECK_KEY
 123

	)

550 
	#RSA_F_RSA_CMS_DECRYPT
 158

	)

551 
	#RSA_F_RSA_EAY_PRIVATE_DECRYPT
 101

	)

552 
	#RSA_F_RSA_EAY_PRIVATE_ENCRYPT
 102

	)

553 
	#RSA_F_RSA_EAY_PUBLIC_DECRYPT
 103

	)

554 
	#RSA_F_RSA_EAY_PUBLIC_ENCRYPT
 104

	)

555 
	#RSA_F_RSA_GENERATE_KEY
 105

	)

556 
	#RSA_F_RSA_GENERATE_KEY_EX
 155

	)

557 
	#RSA_F_RSA_ITEM_VERIFY
 156

	)

558 
	#RSA_F_RSA_MEMORY_LOCK
 130

	)

559 
	#RSA_F_RSA_MGF1_TO_MD
 159

	)

560 
	#RSA_F_RSA_NEW_METHOD
 106

	)

561 
	#RSA_F_RSA_NULL
 124

	)

562 
	#RSA_F_RSA_NULL_MOD_EXP
 131

	)

563 
	#RSA_F_RSA_NULL_PRIVATE_DECRYPT
 132

	)

564 
	#RSA_F_RSA_NULL_PRIVATE_ENCRYPT
 133

	)

565 
	#RSA_F_RSA_NULL_PUBLIC_DECRYPT
 134

	)

566 
	#RSA_F_RSA_NULL_PUBLIC_ENCRYPT
 135

	)

567 
	#RSA_F_RSA_PADDING_ADD_NONE
 107

	)

568 
	#RSA_F_RSA_PADDING_ADD_PKCS1_OAEP
 121

	)

569 
	#RSA_F_RSA_PADDING_ADD_PKCS1_OAEP_MGF1
 160

	)

570 
	#RSA_F_RSA_PADDING_ADD_PKCS1_PSS
 125

	)

571 
	#RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1
 148

	)

572 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1
 108

	)

573 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2
 109

	)

574 
	#RSA_F_RSA_PADDING_ADD_SSLV23
 110

	)

575 
	#RSA_F_RSA_PADDING_ADD_X931
 127

	)

576 
	#RSA_F_RSA_PADDING_CHECK_NONE
 111

	)

577 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP
 122

	)

578 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP_MGF1
 161

	)

579 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1
 112

	)

580 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2
 113

	)

581 
	#RSA_F_RSA_PADDING_CHECK_SSLV23
 114

	)

582 
	#RSA_F_RSA_PADDING_CHECK_X931
 128

	)

583 
	#RSA_F_RSA_PRINT
 115

	)

584 
	#RSA_F_RSA_PRINT_FP
 116

	)

585 
	#RSA_F_RSA_PRIVATE_DECRYPT
 150

	)

586 
	#RSA_F_RSA_PRIVATE_ENCRYPT
 151

	)

587 
	#RSA_F_RSA_PRIV_DECODE
 137

	)

588 
	#RSA_F_RSA_PRIV_ENCODE
 138

	)

589 
	#RSA_F_RSA_PSS_TO_CTX
 162

	)

590 
	#RSA_F_RSA_PUBLIC_DECRYPT
 152

	)

591 
	#RSA_F_RSA_PUBLIC_ENCRYPT
 153

	)

592 
	#RSA_F_RSA_PUB_DECODE
 139

	)

593 
	#RSA_F_RSA_SETUP_BLINDING
 136

	)

594 
	#RSA_F_RSA_SIGN
 117

	)

595 
	#RSA_F_RSA_SIGN_ASN1_OCTET_STRING
 118

	)

596 
	#RSA_F_RSA_VERIFY
 119

	)

597 
	#RSA_F_RSA_VERIFY_ASN1_OCTET_STRING
 120

	)

598 
	#RSA_F_RSA_VERIFY_PKCS1_PSS
 126

	)

599 
	#RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1
 149

	)

600 
	#RSA_F_RSA_SET_DEFAULT_METHOD
 200

	)

601 
	#RSA_F_RSA_SET_METHOD
 201

	)

604 
	#RSA_R_ALGORITHM_MISMATCH
 100

	)

605 
	#RSA_R_BAD_E_VALUE
 101

	)

606 
	#RSA_R_BAD_FIXED_HEADER_DECRYPT
 102

	)

607 
	#RSA_R_BAD_PAD_BYTE_COUNT
 103

	)

608 
	#RSA_R_BAD_SIGNATURE
 104

	)

609 
	#RSA_R_BLOCK_TYPE_IS_NOT_01
 106

	)

610 
	#RSA_R_BLOCK_TYPE_IS_NOT_02
 107

	)

611 
	#RSA_R_DATA_GREATER_THAN_MOD_LEN
 108

	)

612 
	#RSA_R_DATA_TOO_LARGE
 109

	)

613 
	#RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 110

	)

614 
	#RSA_R_DATA_TOO_LARGE_FOR_MODULUS
 132

	)

615 
	#RSA_R_DATA_TOO_SMALL
 111

	)

616 
	#RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE
 122

	)

617 
	#RSA_R_DIGEST_DOES_NOT_MATCH
 166

	)

618 
	#RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY
 112

	)

619 
	#RSA_R_DMP1_NOT_CONGRUENT_TO_D
 124

	)

620 
	#RSA_R_DMQ1_NOT_CONGRUENT_TO_D
 125

	)

621 
	#RSA_R_D_E_NOT_CONGRUENT_TO_1
 123

	)

622 
	#RSA_R_FIRST_OCTET_INVALID
 133

	)

623 
	#RSA_R_ILLEGAL_OR_UNSUPPORTED_PADDING_MODE
 144

	)

624 
	#RSA_R_INVALID_DIGEST
 160

	)

625 
	#RSA_R_INVALID_DIGEST_LENGTH
 143

	)

626 
	#RSA_R_INVALID_HEADER
 137

	)

627 
	#RSA_R_INVALID_KEYBITS
 145

	)

628 
	#RSA_R_INVALID_LABEL
 161

	)

629 
	#RSA_R_INVALID_MESSAGE_LENGTH
 131

	)

630 
	#RSA_R_INVALID_MGF1_MD
 156

	)

631 
	#RSA_R_INVALID_OAEP_PARAMETERS
 162

	)

632 
	#RSA_R_INVALID_PADDING
 138

	)

633 
	#RSA_R_INVALID_PADDING_MODE
 141

	)

634 
	#RSA_R_INVALID_PSS_PARAMETERS
 149

	)

635 
	#RSA_R_INVALID_PSS_SALTLEN
 146

	)

636 
	#RSA_R_INVALID_SALT_LENGTH
 150

	)

637 
	#RSA_R_INVALID_TRAILER
 139

	)

638 
	#RSA_R_INVALID_X931_DIGEST
 142

	)

639 
	#RSA_R_IQMP_NOT_INVERSE_OF_Q
 126

	)

640 
	#RSA_R_KEY_SIZE_TOO_SMALL
 120

	)

641 
	#RSA_R_LAST_OCTET_INVALID
 134

	)

642 
	#RSA_R_MODULUS_TOO_LARGE
 105

	)

643 
	#RSA_R_NON_FIPS_RSA_METHOD
 157

	)

644 
	#RSA_R_NO_PUBLIC_EXPONENT
 140

	)

645 
	#RSA_R_NULL_BEFORE_BLOCK_MISSING
 113

	)

646 
	#RSA_R_N_DOES_NOT_EQUAL_P_Q
 127

	)

647 
	#RSA_R_OAEP_DECODING_ERROR
 121

	)

648 
	#RSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE
 158

	)

649 
	#RSA_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE
 148

	)

650 
	#RSA_R_PADDING_CHECK_FAILED
 114

	)

651 
	#RSA_R_PKCS_DECODING_ERROR
 159

	)

652 
	#RSA_R_P_NOT_PRIME
 128

	)

653 
	#RSA_R_Q_NOT_PRIME
 129

	)

654 
	#RSA_R_RSA_OPERATIONS_NOT_SUPPORTED
 130

	)

655 
	#RSA_R_SLEN_CHECK_FAILED
 136

	)

656 
	#RSA_R_SLEN_RECOVERY_FAILED
 135

	)

657 
	#RSA_R_SSLV3_ROLLBACK_ATTACK
 115

	)

658 
	#RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 116

	)

659 
	#RSA_R_UNKNOWN_ALGORITHM_TYPE
 117

	)

660 
	#RSA_R_UNKNOWN_DIGEST
 163

	)

661 
	#RSA_R_UNKNOWN_MASK_DIGEST
 151

	)

662 
	#RSA_R_UNKNOWN_PADDING_TYPE
 118

	)

663 
	#RSA_R_UNKNOWN_PSS_DIGEST
 152

	)

664 
	#RSA_R_UNSUPPORTED_ENCRYPTION_TYPE
 164

	)

665 
	#RSA_R_UNSUPPORTED_LABEL_SOURCE
 165

	)

666 
	#RSA_R_UNSUPPORTED_MASK_ALGORITHM
 153

	)

667 
	#RSA_R_UNSUPPORTED_MASK_PARAMETER
 154

	)

668 
	#RSA_R_UNSUPPORTED_SIGNATURE_TYPE
 155

	)

669 
	#RSA_R_VALUE_MISSING
 147

	)

670 
	#RSA_R_WRONG_SIGNATURE_LENGTH
 119

	)

671 
	#RSA_R_NON_FIPS_METHOD
 200

	)

673 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/safestack.h

55 #i‚de‡
HEADER_SAFESTACK_H


56 
	#HEADER_SAFESTACK_H


	)

58 
	~<›ís¶/°ack.h
>

60 #ifde‡
__˝lu•lus


64 #i‚de‡
CHECKED_PTR_OF


65 
	#CHECKED_PTR_OF
(
ty≥
, 
p
) \

66 ((*Ë(1 ? 
p
 : (
ty≥
*)0))

	)

75 
	#CHECKED_STACK_OF
(
ty≥
, 
p
) \

76 ((
_STACK
*Ë(1 ? 
p
 : (
	`STACK_OF
(
ty≥
)*)0))

	)

78 
	#CHECKED_SK_COPY_FUNC
(
ty≥
, 
p
) \

79 ((*(*)(*)Ë((1 ? 
p
 : (
ty≥
 *(*)(c⁄°Åy≥ *))0)))

	)

81 
	#CHECKED_SK_FREE_FUNC
(
ty≥
, 
p
) \

82 (((*)(*)Ë((1 ? 
p
 : ((*)(
ty≥
 *))0)))

	)

84 
	#CHECKED_SK_CMP_FUNC
(
ty≥
, 
p
) \

86 ((1 ? 
p
 : ((*)(c⁄° 
ty≥
 * c⁄° *, c⁄°Åy≥ * c⁄° *))0)))

	)

88 
	#STACK_OF
(
ty≥
Ë
°ack_°_
##
	)
type

89 
	#PREDECLARE_STACK_OF
(
ty≥
Ë
	`STACK_OF
—y≥);

	)

91 
	#DECLARE_STACK_OF
(
ty≥
) \

92 
	`STACK_OF
(
ty≥
) \

94 
_STACK
 
°ack
; \

95 };

	)

96 
	#DECLARE_SPECIAL_STACK_OF
(
ty≥
, 
ty≥2
) \

97 
	`STACK_OF
(
ty≥
) \

99 
_STACK
 
°ack
; \

100 };

	)

103 
	#IMPLEMENT_STACK_OF
(
ty≥
)

	)

119 *
	tOPENSSL_STRING
;

121 c⁄° *
	tOPENSSL_CSTRING
;

131 
DECLARE_SPECIAL_STACK_OF
(
OPENSSL_STRING
, )

137 *
	tOPENSSL_BLOCK
;

138 
DECLARE_SPECIAL_STACK_OF
(
OPENSSL_BLOCK
, )

144 
	#SKM_sk_√w
(
ty≥
, 
cmp
) \

145 ((
	`STACK_OF
(
ty≥
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
—y≥, 
cmp
)))

	)

146 
	#SKM_sk_√w_nuŒ
(
ty≥
) \

147 ((
	`STACK_OF
(
ty≥
Ë*)
	`sk_√w_nuŒ
())

	)

148 
	#SKM_sk_‰ì
(
ty≥
, 
°
) \

149 
	`sk_‰ì
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

150 
	#SKM_sk_num
(
ty≥
, 
°
) \

151 
	`sk_num
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

152 
	#SKM_sk_vÆue
(
ty≥
, 
°
,
i
) \

153 ((
ty≥
 *)
	`sk_vÆue
(
	`CHECKED_STACK_OF
—y≥, 
°
), 
i
))

	)

154 
	#SKM_sk_£t
(
ty≥
, 
°
,
i
,
vÆ
) \

155 
	`sk_£t
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
i
, 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

156 
	#SKM_sk_zîo
(
ty≥
, 
°
) \

157 
	`sk_zîo
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

158 
	#SKM_sk_push
(
ty≥
, 
°
, 
vÆ
) \

159 
	`sk_push
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

160 
	#SKM_sk_unshi·
(
ty≥
, 
°
, 
vÆ
) \

161 
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

162 
	#SKM_sk_föd
(
ty≥
, 
°
, 
vÆ
) \

163 
	`sk_föd
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

164 
	#SKM_sk_föd_ex
(
ty≥
, 
°
, 
vÆ
) \

165 
	`sk_föd_ex
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), \

166 
	`CHECKED_PTR_OF
(
ty≥
, 
vÆ
))

	)

167 
	#SKM_sk_dñëe
(
ty≥
, 
°
, 
i
) \

168 (
ty≥
 *)
	`sk_dñëe
(
	`CHECKED_STACK_OF
—y≥, 
°
), 
i
)

	)

169 
	#SKM_sk_dñëe_±r
(
ty≥
, 
°
, 
±r
) \

170 (
ty≥
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
—y≥, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
±r
))

	)

171 
	#SKM_sk_ö£π
(
ty≥
, 
°
,
vÆ
, 
i
) \

172 
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
), 
i
)

	)

173 
	#SKM_sk_£t_cmp_func
(
ty≥
, 
°
, 
cmp
) \

174 (((*)(c⁄° 
ty≥
 * const *,constÅype * const *)) \

175 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_SK_CMP_FUNC
—y≥, 
cmp
)))

	)

176 
	#SKM_sk_dup
(
ty≥
, 
°
) \

177 (
	`STACK_OF
(
ty≥
Ë*)
	`sk_dup
(
	`CHECKED_STACK_OF
—y≥, 
°
))

	)

178 
	#SKM_sk_p›_‰ì
(
ty≥
, 
°
, 
‰ì_func
) \

179 
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_SK_FREE_FUNC
—y≥, 
‰ì_func
))

	)

180 
	#SKM_sk_dìp_c›y
(
ty≥
, 
°
, 
c›y_func
, 
‰ì_func
) \

181 (
	`STACK_OF
(
ty≥
Ë*)
	`sk_dìp_c›y
(
	`CHECKED_STACK_OF
—y≥, 
°
), 
	`CHECKED_SK_COPY_FUNC
—y≥, 
c›y_func
), 
	`CHECKED_SK_FREE_FUNC
—y≥, 
‰ì_func
))

	)

182 
	#SKM_sk_shi·
(
ty≥
, 
°
) \

183 (
ty≥
 *)
	`sk_shi·
(
	`CHECKED_STACK_OF
—y≥, 
°
))

	)

184 
	#SKM_sk_p›
(
ty≥
, 
°
) \

185 (
ty≥
 *)
	`sk_p›
(
	`CHECKED_STACK_OF
—y≥, 
°
))

	)

186 
	#SKM_sk_s‹t
(
ty≥
, 
°
) \

187 
	`sk_s‹t
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

188 
	#SKM_sk_is_s‹ãd
(
ty≥
, 
°
) \

189 
	`sk_is_s‹ãd
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

190 
	#SKM_ASN1_SET_OF_d2i
(
ty≥
, 
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

191 (
	`STACK_OF
(
ty≥
Ë*)
	`d2i_ASN1_SET
( \

192 (
	`STACK_OF
(
OPENSSL_BLOCK
Ë**)
	`CHECKED_PTR_OF
(STACK_OF(
ty≥
)*, 
°
), \

193 
µ
, 
Àngth
, \

194 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i_func
), \

195 
	`CHECKED_SK_FREE_FUNC
(
ty≥
, 
‰ì_func
), \

196 
ex_èg
, 
ex_˛ass
)

	)

197 
	#SKM_ASN1_SET_OF_i2d
(
ty≥
, 
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

198 
	`i2d_ASN1_SET
((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
µ
, \

199 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_func
), \

200 
ex_èg
, 
ex_˛ass
, 
is_£t
)

	)

201 
	#SKM_ASN1_£q_∑ck
(
ty≥
, 
°
, 
i2d_func
, 
buf
, 
Àn
) \

202 
	`ASN1_£q_∑ck
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), \

203 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_func
), 
buf
, 
Àn
)

	)

204 
	#SKM_ASN1_£q_u≈ack
(
ty≥
, 
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

205 (
	`STACK_OF
(
ty≥
Ë*)
	`ASN1_£q_u≈ack
(
buf
, 
Àn
, 
	`CHECKED_D2I_OF
—y≥, 
d2i_func
), 
	`CHECKED_SK_FREE_FUNC
—y≥, 
‰ì_func
))

	)

206 
	#SKM_PKCS12_de¸y±_d2i
(
ty≥
, 
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

207 (
	`STACK_OF
(
ty≥
Ë*)
	`PKCS12_de¸y±_d2i
(
Æg‹
, \

208 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i_func
), \

209 
	`CHECKED_SK_FREE_FUNC
(
ty≥
, 
‰ì_func
), \

210 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
)

	)

214 
	#sk_ACCESS_DESCRIPTION_√w
(
cmp
Ë
	`SKM_sk_√w
(
ACCESS_DESCRIPTION
, (cmp))

	)

215 
	#sk_ACCESS_DESCRIPTION_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ACCESS_DESCRIPTION
)

	)

216 
	#sk_ACCESS_DESCRIPTION_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ACCESS_DESCRIPTION
, (°))

	)

217 
	#sk_ACCESS_DESCRIPTION_num
(
°
Ë
	`SKM_sk_num
(
ACCESS_DESCRIPTION
, (°))

	)

218 
	#sk_ACCESS_DESCRIPTION_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ACCESS_DESCRIPTION
, (°), (i))

	)

219 
	#sk_ACCESS_DESCRIPTION_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ACCESS_DESCRIPTION
, (°), (i), (vÆ))

	)

220 
	#sk_ACCESS_DESCRIPTION_zîo
(
°
Ë
	`SKM_sk_zîo
(
ACCESS_DESCRIPTION
, (°))

	)

221 
	#sk_ACCESS_DESCRIPTION_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

222 
	#sk_ACCESS_DESCRIPTION_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

223 
	#sk_ACCESS_DESCRIPTION_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

224 
	#sk_ACCESS_DESCRIPTION_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

225 
	#sk_ACCESS_DESCRIPTION_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ACCESS_DESCRIPTION
, (°), (i))

	)

226 
	#sk_ACCESS_DESCRIPTION_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ACCESS_DESCRIPTION
, (°), (±r))

	)

227 
	#sk_ACCESS_DESCRIPTION_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ACCESS_DESCRIPTION
, (°), (vÆ), (i))

	)

228 
	#sk_ACCESS_DESCRIPTION_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ACCESS_DESCRIPTION
, (°), (cmp))

	)

229 
	#sk_ACCESS_DESCRIPTION_dup
(
°
Ë
	`SKM_sk_dup
(
ACCESS_DESCRIPTION
, st)

	)

230 
	#sk_ACCESS_DESCRIPTION_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ACCESS_DESCRIPTION
, (°), (‰ì_func))

	)

231 
	#sk_ACCESS_DESCRIPTION_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
ACCESS_DESCRIPTION
, (°), (c›y_func), (‰ì_func))

	)

232 
	#sk_ACCESS_DESCRIPTION_shi·
(
°
Ë
	`SKM_sk_shi·
(
ACCESS_DESCRIPTION
, (°))

	)

233 
	#sk_ACCESS_DESCRIPTION_p›
(
°
Ë
	`SKM_sk_p›
(
ACCESS_DESCRIPTION
, (°))

	)

234 
	#sk_ACCESS_DESCRIPTION_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ACCESS_DESCRIPTION
, (°))

	)

235 
	#sk_ACCESS_DESCRIPTION_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ACCESS_DESCRIPTION
, (°))

	)

236 
	#sk_ASIdOrR™ge_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASIdOrR™ge
, (cmp))

	)

237 
	#sk_ASIdOrR™ge_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASIdOrR™ge
)

	)

238 
	#sk_ASIdOrR™ge_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASIdOrR™ge
, (°))

	)

239 
	#sk_ASIdOrR™ge_num
(
°
Ë
	`SKM_sk_num
(
ASIdOrR™ge
, (°))

	)

240 
	#sk_ASIdOrR™ge_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASIdOrR™ge
, (°), (i))

	)

241 
	#sk_ASIdOrR™ge_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASIdOrR™ge
, (°), (i), (vÆ))

	)

242 
	#sk_ASIdOrR™ge_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASIdOrR™ge
, (°))

	)

243 
	#sk_ASIdOrR™ge_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASIdOrR™ge
, (°), (vÆ))

	)

244 
	#sk_ASIdOrR™ge_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASIdOrR™ge
, (°), (vÆ))

	)

245 
	#sk_ASIdOrR™ge_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASIdOrR™ge
, (°), (vÆ))

	)

246 
	#sk_ASIdOrR™ge_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASIdOrR™ge
, (°), (vÆ))

	)

247 
	#sk_ASIdOrR™ge_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASIdOrR™ge
, (°), (i))

	)

248 
	#sk_ASIdOrR™ge_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASIdOrR™ge
, (°), (±r))

	)

249 
	#sk_ASIdOrR™ge_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASIdOrR™ge
, (°), (vÆ), (i))

	)

250 
	#sk_ASIdOrR™ge_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASIdOrR™ge
, (°), (cmp))

	)

251 
	#sk_ASIdOrR™ge_dup
(
°
Ë
	`SKM_sk_dup
(
ASIdOrR™ge
, st)

	)

252 
	#sk_ASIdOrR™ge_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASIdOrR™ge
, (°), (‰ì_func))

	)

253 
	#sk_ASIdOrR™ge_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
ASIdOrR™ge
, (°), (c›y_func), (‰ì_func))

	)

254 
	#sk_ASIdOrR™ge_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASIdOrR™ge
, (°))

	)

255 
	#sk_ASIdOrR™ge_p›
(
°
Ë
	`SKM_sk_p›
(
ASIdOrR™ge
, (°))

	)

256 
	#sk_ASIdOrR™ge_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASIdOrR™ge
, (°))

	)

257 
	#sk_ASIdOrR™ge_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASIdOrR™ge
, (°))

	)

258 
	#sk_ASN1_GENERALSTRING_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_GENERALSTRING
, (cmp))

	)

259 
	#sk_ASN1_GENERALSTRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_GENERALSTRING
)

	)

260 
	#sk_ASN1_GENERALSTRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_GENERALSTRING
, (°))

	)

261 
	#sk_ASN1_GENERALSTRING_num
(
°
Ë
	`SKM_sk_num
(
ASN1_GENERALSTRING
, (°))

	)

262 
	#sk_ASN1_GENERALSTRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_GENERALSTRING
, (°), (i))

	)

263 
	#sk_ASN1_GENERALSTRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_GENERALSTRING
, (°), (i), (vÆ))

	)

264 
	#sk_ASN1_GENERALSTRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_GENERALSTRING
, (°))

	)

265 
	#sk_ASN1_GENERALSTRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

266 
	#sk_ASN1_GENERALSTRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

267 
	#sk_ASN1_GENERALSTRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

268 
	#sk_ASN1_GENERALSTRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

269 
	#sk_ASN1_GENERALSTRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_GENERALSTRING
, (°), (i))

	)

270 
	#sk_ASN1_GENERALSTRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_GENERALSTRING
, (°), (±r))

	)

271 
	#sk_ASN1_GENERALSTRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_GENERALSTRING
, (°), (vÆ), (i))

	)

272 
	#sk_ASN1_GENERALSTRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_GENERALSTRING
, (°), (cmp))

	)

273 
	#sk_ASN1_GENERALSTRING_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_GENERALSTRING
, st)

	)

274 
	#sk_ASN1_GENERALSTRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_GENERALSTRING
, (°), (‰ì_func))

	)

275 
	#sk_ASN1_GENERALSTRING_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
ASN1_GENERALSTRING
, (°), (c›y_func), (‰ì_func))

	)

276 
	#sk_ASN1_GENERALSTRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_GENERALSTRING
, (°))

	)

277 
	#sk_ASN1_GENERALSTRING_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_GENERALSTRING
, (°))

	)

278 
	#sk_ASN1_GENERALSTRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_GENERALSTRING
, (°))

	)

279 
	#sk_ASN1_GENERALSTRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_GENERALSTRING
, (°))

	)

280 
	#sk_ASN1_INTEGER_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_INTEGER
, (cmp))

	)

281 
	#sk_ASN1_INTEGER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_INTEGER
)

	)

282 
	#sk_ASN1_INTEGER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_INTEGER
, (°))

	)

283 
	#sk_ASN1_INTEGER_num
(
°
Ë
	`SKM_sk_num
(
ASN1_INTEGER
, (°))

	)

284 
	#sk_ASN1_INTEGER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_INTEGER
, (°), (i))

	)

285 
	#sk_ASN1_INTEGER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_INTEGER
, (°), (i), (vÆ))

	)

286 
	#sk_ASN1_INTEGER_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_INTEGER
, (°))

	)

287 
	#sk_ASN1_INTEGER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_INTEGER
, (°), (vÆ))

	)

288 
	#sk_ASN1_INTEGER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_INTEGER
, (°), (vÆ))

	)

289 
	#sk_ASN1_INTEGER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_INTEGER
, (°), (vÆ))

	)

290 
	#sk_ASN1_INTEGER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_INTEGER
, (°), (vÆ))

	)

291 
	#sk_ASN1_INTEGER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_INTEGER
, (°), (i))

	)

292 
	#sk_ASN1_INTEGER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_INTEGER
, (°), (±r))

	)

293 
	#sk_ASN1_INTEGER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_INTEGER
, (°), (vÆ), (i))

	)

294 
	#sk_ASN1_INTEGER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_INTEGER
, (°), (cmp))

	)

295 
	#sk_ASN1_INTEGER_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_INTEGER
, st)

	)

296 
	#sk_ASN1_INTEGER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_INTEGER
, (°), (‰ì_func))

	)

297 
	#sk_ASN1_INTEGER_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
ASN1_INTEGER
, (°), (c›y_func), (‰ì_func))

	)

298 
	#sk_ASN1_INTEGER_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_INTEGER
, (°))

	)

299 
	#sk_ASN1_INTEGER_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_INTEGER
, (°))

	)

300 
	#sk_ASN1_INTEGER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_INTEGER
, (°))

	)

301 
	#sk_ASN1_INTEGER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_INTEGER
, (°))

	)

302 
	#sk_ASN1_OBJECT_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_OBJECT
, (cmp))

	)

303 
	#sk_ASN1_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_OBJECT
)

	)

304 
	#sk_ASN1_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_OBJECT
, (°))

	)

305 
	#sk_ASN1_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
ASN1_OBJECT
, (°))

	)

306 
	#sk_ASN1_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_OBJECT
, (°), (i))

	)

307 
	#sk_ASN1_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_OBJECT
, (°), (i), (vÆ))

	)

308 
	#sk_ASN1_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_OBJECT
, (°))

	)

309 
	#sk_ASN1_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_OBJECT
, (°), (vÆ))

	)

310 
	#sk_ASN1_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_OBJECT
, (°), (vÆ))

	)

311 
	#sk_ASN1_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_OBJECT
, (°), (vÆ))

	)

312 
	#sk_ASN1_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_OBJECT
, (°), (vÆ))

	)

313 
	#sk_ASN1_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_OBJECT
, (°), (i))

	)

314 
	#sk_ASN1_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_OBJECT
, (°), (±r))

	)

315 
	#sk_ASN1_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_OBJECT
, (°), (vÆ), (i))

	)

316 
	#sk_ASN1_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_OBJECT
, (°), (cmp))

	)

317 
	#sk_ASN1_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_OBJECT
, st)

	)

318 
	#sk_ASN1_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_OBJECT
, (°), (‰ì_func))

	)

319 
	#sk_ASN1_OBJECT_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
ASN1_OBJECT
, (°), (c›y_func), (‰ì_func))

	)

320 
	#sk_ASN1_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_OBJECT
, (°))

	)

321 
	#sk_ASN1_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_OBJECT
, (°))

	)

322 
	#sk_ASN1_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_OBJECT
, (°))

	)

323 
	#sk_ASN1_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_OBJECT
, (°))

	)

324 
	#sk_ASN1_STRING_TABLE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_STRING_TABLE
, (cmp))

	)

325 
	#sk_ASN1_STRING_TABLE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_STRING_TABLE
)

	)

326 
	#sk_ASN1_STRING_TABLE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_STRING_TABLE
, (°))

	)

327 
	#sk_ASN1_STRING_TABLE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_STRING_TABLE
, (°))

	)

328 
	#sk_ASN1_STRING_TABLE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_STRING_TABLE
, (°), (i))

	)

329 
	#sk_ASN1_STRING_TABLE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_STRING_TABLE
, (°), (i), (vÆ))

	)

330 
	#sk_ASN1_STRING_TABLE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_STRING_TABLE
, (°))

	)

331 
	#sk_ASN1_STRING_TABLE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

332 
	#sk_ASN1_STRING_TABLE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

333 
	#sk_ASN1_STRING_TABLE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

334 
	#sk_ASN1_STRING_TABLE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

335 
	#sk_ASN1_STRING_TABLE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_STRING_TABLE
, (°), (i))

	)

336 
	#sk_ASN1_STRING_TABLE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_STRING_TABLE
, (°), (±r))

	)

337 
	#sk_ASN1_STRING_TABLE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_STRING_TABLE
, (°), (vÆ), (i))

	)

338 
	#sk_ASN1_STRING_TABLE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_STRING_TABLE
, (°), (cmp))

	)

339 
	#sk_ASN1_STRING_TABLE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_STRING_TABLE
, st)

	)

340 
	#sk_ASN1_STRING_TABLE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_STRING_TABLE
, (°), (‰ì_func))

	)

341 
	#sk_ASN1_STRING_TABLE_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
ASN1_STRING_TABLE
, (°), (c›y_func), (‰ì_func))

	)

342 
	#sk_ASN1_STRING_TABLE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_STRING_TABLE
, (°))

	)

343 
	#sk_ASN1_STRING_TABLE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_STRING_TABLE
, (°))

	)

344 
	#sk_ASN1_STRING_TABLE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_STRING_TABLE
, (°))

	)

345 
	#sk_ASN1_STRING_TABLE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_STRING_TABLE
, (°))

	)

346 
	#sk_ASN1_TYPE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_TYPE
, (cmp))

	)

347 
	#sk_ASN1_TYPE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_TYPE
)

	)

348 
	#sk_ASN1_TYPE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_TYPE
, (°))

	)

349 
	#sk_ASN1_TYPE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_TYPE
, (°))

	)

350 
	#sk_ASN1_TYPE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_TYPE
, (°), (i))

	)

351 
	#sk_ASN1_TYPE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_TYPE
, (°), (i), (vÆ))

	)

352 
	#sk_ASN1_TYPE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_TYPE
, (°))

	)

353 
	#sk_ASN1_TYPE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_TYPE
, (°), (vÆ))

	)

354 
	#sk_ASN1_TYPE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_TYPE
, (°), (vÆ))

	)

355 
	#sk_ASN1_TYPE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_TYPE
, (°), (vÆ))

	)

356 
	#sk_ASN1_TYPE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_TYPE
, (°), (vÆ))

	)

357 
	#sk_ASN1_TYPE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_TYPE
, (°), (i))

	)

358 
	#sk_ASN1_TYPE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_TYPE
, (°), (±r))

	)

359 
	#sk_ASN1_TYPE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_TYPE
, (°), (vÆ), (i))

	)

360 
	#sk_ASN1_TYPE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_TYPE
, (°), (cmp))

	)

361 
	#sk_ASN1_TYPE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_TYPE
, st)

	)

362 
	#sk_ASN1_TYPE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_TYPE
, (°), (‰ì_func))

	)

363 
	#sk_ASN1_TYPE_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
ASN1_TYPE
, (°), (c›y_func), (‰ì_func))

	)

364 
	#sk_ASN1_TYPE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_TYPE
, (°))

	)

365 
	#sk_ASN1_TYPE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_TYPE
, (°))

	)

366 
	#sk_ASN1_TYPE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_TYPE
, (°))

	)

367 
	#sk_ASN1_TYPE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_TYPE
, (°))

	)

368 
	#sk_ASN1_UTF8STRING_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_UTF8STRING
, (cmp))

	)

369 
	#sk_ASN1_UTF8STRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_UTF8STRING
)

	)

370 
	#sk_ASN1_UTF8STRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_UTF8STRING
, (°))

	)

371 
	#sk_ASN1_UTF8STRING_num
(
°
Ë
	`SKM_sk_num
(
ASN1_UTF8STRING
, (°))

	)

372 
	#sk_ASN1_UTF8STRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_UTF8STRING
, (°), (i))

	)

373 
	#sk_ASN1_UTF8STRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_UTF8STRING
, (°), (i), (vÆ))

	)

374 
	#sk_ASN1_UTF8STRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_UTF8STRING
, (°))

	)

375 
	#sk_ASN1_UTF8STRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

376 
	#sk_ASN1_UTF8STRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

377 
	#sk_ASN1_UTF8STRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

378 
	#sk_ASN1_UTF8STRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

379 
	#sk_ASN1_UTF8STRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_UTF8STRING
, (°), (i))

	)

380 
	#sk_ASN1_UTF8STRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_UTF8STRING
, (°), (±r))

	)

381 
	#sk_ASN1_UTF8STRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_UTF8STRING
, (°), (vÆ), (i))

	)

382 
	#sk_ASN1_UTF8STRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_UTF8STRING
, (°), (cmp))

	)

383 
	#sk_ASN1_UTF8STRING_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_UTF8STRING
, st)

	)

384 
	#sk_ASN1_UTF8STRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_UTF8STRING
, (°), (‰ì_func))

	)

385 
	#sk_ASN1_UTF8STRING_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
ASN1_UTF8STRING
, (°), (c›y_func), (‰ì_func))

	)

386 
	#sk_ASN1_UTF8STRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_UTF8STRING
, (°))

	)

387 
	#sk_ASN1_UTF8STRING_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_UTF8STRING
, (°))

	)

388 
	#sk_ASN1_UTF8STRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_UTF8STRING
, (°))

	)

389 
	#sk_ASN1_UTF8STRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_UTF8STRING
, (°))

	)

390 
	#sk_ASN1_VALUE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_VALUE
, (cmp))

	)

391 
	#sk_ASN1_VALUE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_VALUE
)

	)

392 
	#sk_ASN1_VALUE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_VALUE
, (°))

	)

393 
	#sk_ASN1_VALUE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_VALUE
, (°))

	)

394 
	#sk_ASN1_VALUE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_VALUE
, (°), (i))

	)

395 
	#sk_ASN1_VALUE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_VALUE
, (°), (i), (vÆ))

	)

396 
	#sk_ASN1_VALUE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_VALUE
, (°))

	)

397 
	#sk_ASN1_VALUE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_VALUE
, (°), (vÆ))

	)

398 
	#sk_ASN1_VALUE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_VALUE
, (°), (vÆ))

	)

399 
	#sk_ASN1_VALUE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_VALUE
, (°), (vÆ))

	)

400 
	#sk_ASN1_VALUE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_VALUE
, (°), (vÆ))

	)

401 
	#sk_ASN1_VALUE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_VALUE
, (°), (i))

	)

402 
	#sk_ASN1_VALUE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_VALUE
, (°), (±r))

	)

403 
	#sk_ASN1_VALUE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_VALUE
, (°), (vÆ), (i))

	)

404 
	#sk_ASN1_VALUE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_VALUE
, (°), (cmp))

	)

405 
	#sk_ASN1_VALUE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_VALUE
, st)

	)

406 
	#sk_ASN1_VALUE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_VALUE
, (°), (‰ì_func))

	)

407 
	#sk_ASN1_VALUE_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
ASN1_VALUE
, (°), (c›y_func), (‰ì_func))

	)

408 
	#sk_ASN1_VALUE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_VALUE
, (°))

	)

409 
	#sk_ASN1_VALUE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_VALUE
, (°))

	)

410 
	#sk_ASN1_VALUE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_VALUE
, (°))

	)

411 
	#sk_ASN1_VALUE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_VALUE
, (°))

	)

412 
	#sk_BIO_√w
(
cmp
Ë
	`SKM_sk_√w
(
BIO
, (cmp))

	)

413 
	#sk_BIO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
BIO
)

	)

414 
	#sk_BIO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
BIO
, (°))

	)

415 
	#sk_BIO_num
(
°
Ë
	`SKM_sk_num
(
BIO
, (°))

	)

416 
	#sk_BIO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
BIO
, (°), (i))

	)

417 
	#sk_BIO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
BIO
, (°), (i), (vÆ))

	)

418 
	#sk_BIO_zîo
(
°
Ë
	`SKM_sk_zîo
(
BIO
, (°))

	)

419 
	#sk_BIO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
BIO
, (°), (vÆ))

	)

420 
	#sk_BIO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
BIO
, (°), (vÆ))

	)

421 
	#sk_BIO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
BIO
, (°), (vÆ))

	)

422 
	#sk_BIO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
BIO
, (°), (vÆ))

	)

423 
	#sk_BIO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
BIO
, (°), (i))

	)

424 
	#sk_BIO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
BIO
, (°), (±r))

	)

425 
	#sk_BIO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
BIO
, (°), (vÆ), (i))

	)

426 
	#sk_BIO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
BIO
, (°), (cmp))

	)

427 
	#sk_BIO_dup
(
°
Ë
	`SKM_sk_dup
(
BIO
, st)

	)

428 
	#sk_BIO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
BIO
, (°), (‰ì_func))

	)

429 
	#sk_BIO_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
BIO
, (°), (c›y_func), (‰ì_func))

	)

430 
	#sk_BIO_shi·
(
°
Ë
	`SKM_sk_shi·
(
BIO
, (°))

	)

431 
	#sk_BIO_p›
(
°
Ë
	`SKM_sk_p›
(
BIO
, (°))

	)

432 
	#sk_BIO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
BIO
, (°))

	)

433 
	#sk_BIO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
BIO
, (°))

	)

434 
	#sk_BY_DIR_ENTRY_√w
(
cmp
Ë
	`SKM_sk_√w
(
BY_DIR_ENTRY
, (cmp))

	)

435 
	#sk_BY_DIR_ENTRY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
BY_DIR_ENTRY
)

	)

436 
	#sk_BY_DIR_ENTRY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
BY_DIR_ENTRY
, (°))

	)

437 
	#sk_BY_DIR_ENTRY_num
(
°
Ë
	`SKM_sk_num
(
BY_DIR_ENTRY
, (°))

	)

438 
	#sk_BY_DIR_ENTRY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
BY_DIR_ENTRY
, (°), (i))

	)

439 
	#sk_BY_DIR_ENTRY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
BY_DIR_ENTRY
, (°), (i), (vÆ))

	)

440 
	#sk_BY_DIR_ENTRY_zîo
(
°
Ë
	`SKM_sk_zîo
(
BY_DIR_ENTRY
, (°))

	)

441 
	#sk_BY_DIR_ENTRY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

442 
	#sk_BY_DIR_ENTRY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

443 
	#sk_BY_DIR_ENTRY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

444 
	#sk_BY_DIR_ENTRY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

445 
	#sk_BY_DIR_ENTRY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
BY_DIR_ENTRY
, (°), (i))

	)

446 
	#sk_BY_DIR_ENTRY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
BY_DIR_ENTRY
, (°), (±r))

	)

447 
	#sk_BY_DIR_ENTRY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
BY_DIR_ENTRY
, (°), (vÆ), (i))

	)

448 
	#sk_BY_DIR_ENTRY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
BY_DIR_ENTRY
, (°), (cmp))

	)

449 
	#sk_BY_DIR_ENTRY_dup
(
°
Ë
	`SKM_sk_dup
(
BY_DIR_ENTRY
, st)

	)

450 
	#sk_BY_DIR_ENTRY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
BY_DIR_ENTRY
, (°), (‰ì_func))

	)

451 
	#sk_BY_DIR_ENTRY_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
BY_DIR_ENTRY
, (°), (c›y_func), (‰ì_func))

	)

452 
	#sk_BY_DIR_ENTRY_shi·
(
°
Ë
	`SKM_sk_shi·
(
BY_DIR_ENTRY
, (°))

	)

453 
	#sk_BY_DIR_ENTRY_p›
(
°
Ë
	`SKM_sk_p›
(
BY_DIR_ENTRY
, (°))

	)

454 
	#sk_BY_DIR_ENTRY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
BY_DIR_ENTRY
, (°))

	)

455 
	#sk_BY_DIR_ENTRY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
BY_DIR_ENTRY
, (°))

	)

456 
	#sk_BY_DIR_HASH_√w
(
cmp
Ë
	`SKM_sk_√w
(
BY_DIR_HASH
, (cmp))

	)

457 
	#sk_BY_DIR_HASH_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
BY_DIR_HASH
)

	)

458 
	#sk_BY_DIR_HASH_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
BY_DIR_HASH
, (°))

	)

459 
	#sk_BY_DIR_HASH_num
(
°
Ë
	`SKM_sk_num
(
BY_DIR_HASH
, (°))

	)

460 
	#sk_BY_DIR_HASH_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
BY_DIR_HASH
, (°), (i))

	)

461 
	#sk_BY_DIR_HASH_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
BY_DIR_HASH
, (°), (i), (vÆ))

	)

462 
	#sk_BY_DIR_HASH_zîo
(
°
Ë
	`SKM_sk_zîo
(
BY_DIR_HASH
, (°))

	)

463 
	#sk_BY_DIR_HASH_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
BY_DIR_HASH
, (°), (vÆ))

	)

464 
	#sk_BY_DIR_HASH_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
BY_DIR_HASH
, (°), (vÆ))

	)

465 
	#sk_BY_DIR_HASH_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
BY_DIR_HASH
, (°), (vÆ))

	)

466 
	#sk_BY_DIR_HASH_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
BY_DIR_HASH
, (°), (vÆ))

	)

467 
	#sk_BY_DIR_HASH_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
BY_DIR_HASH
, (°), (i))

	)

468 
	#sk_BY_DIR_HASH_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
BY_DIR_HASH
, (°), (±r))

	)

469 
	#sk_BY_DIR_HASH_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
BY_DIR_HASH
, (°), (vÆ), (i))

	)

470 
	#sk_BY_DIR_HASH_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
BY_DIR_HASH
, (°), (cmp))

	)

471 
	#sk_BY_DIR_HASH_dup
(
°
Ë
	`SKM_sk_dup
(
BY_DIR_HASH
, st)

	)

472 
	#sk_BY_DIR_HASH_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
BY_DIR_HASH
, (°), (‰ì_func))

	)

473 
	#sk_BY_DIR_HASH_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
BY_DIR_HASH
, (°), (c›y_func), (‰ì_func))

	)

474 
	#sk_BY_DIR_HASH_shi·
(
°
Ë
	`SKM_sk_shi·
(
BY_DIR_HASH
, (°))

	)

475 
	#sk_BY_DIR_HASH_p›
(
°
Ë
	`SKM_sk_p›
(
BY_DIR_HASH
, (°))

	)

476 
	#sk_BY_DIR_HASH_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
BY_DIR_HASH
, (°))

	)

477 
	#sk_BY_DIR_HASH_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
BY_DIR_HASH
, (°))

	)

478 
	#sk_CMS_CîtifiˇãChoi˚s_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_CîtifiˇãChoi˚s
, (cmp))

	)

479 
	#sk_CMS_CîtifiˇãChoi˚s_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_CîtifiˇãChoi˚s
)

	)

480 
	#sk_CMS_CîtifiˇãChoi˚s_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

481 
	#sk_CMS_CîtifiˇãChoi˚s_num
(
°
Ë
	`SKM_sk_num
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

482 
	#sk_CMS_CîtifiˇãChoi˚s_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_CîtifiˇãChoi˚s
, (°), (i))

	)

483 
	#sk_CMS_CîtifiˇãChoi˚s_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_CîtifiˇãChoi˚s
, (°), (i), (vÆ))

	)

484 
	#sk_CMS_CîtifiˇãChoi˚s_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

485 
	#sk_CMS_CîtifiˇãChoi˚s_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

486 
	#sk_CMS_CîtifiˇãChoi˚s_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

487 
	#sk_CMS_CîtifiˇãChoi˚s_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

488 
	#sk_CMS_CîtifiˇãChoi˚s_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

489 
	#sk_CMS_CîtifiˇãChoi˚s_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_CîtifiˇãChoi˚s
, (°), (i))

	)

490 
	#sk_CMS_CîtifiˇãChoi˚s_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_CîtifiˇãChoi˚s
, (°), (±r))

	)

491 
	#sk_CMS_CîtifiˇãChoi˚s_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ), (i))

	)

492 
	#sk_CMS_CîtifiˇãChoi˚s_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_CîtifiˇãChoi˚s
, (°), (cmp))

	)

493 
	#sk_CMS_CîtifiˇãChoi˚s_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_CîtifiˇãChoi˚s
, st)

	)

494 
	#sk_CMS_CîtifiˇãChoi˚s_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_CîtifiˇãChoi˚s
, (°), (‰ì_func))

	)

495 
	#sk_CMS_CîtifiˇãChoi˚s_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
CMS_CîtifiˇãChoi˚s
, (°), (c›y_func), (‰ì_func))

	)

496 
	#sk_CMS_CîtifiˇãChoi˚s_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

497 
	#sk_CMS_CîtifiˇãChoi˚s_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

498 
	#sk_CMS_CîtifiˇãChoi˚s_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

499 
	#sk_CMS_CîtifiˇãChoi˚s_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

500 
	#sk_CMS_Recùõ¡En¸y±edKey_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_Recùõ¡En¸y±edKey
, (cmp))

	)

501 
	#sk_CMS_Recùõ¡En¸y±edKey_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Recùõ¡En¸y±edKey
)

	)

502 
	#sk_CMS_Recùõ¡En¸y±edKey_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Recùõ¡En¸y±edKey
, (°))

	)

503 
	#sk_CMS_Recùõ¡En¸y±edKey_num
(
°
Ë
	`SKM_sk_num
(
CMS_Recùõ¡En¸y±edKey
, (°))

	)

504 
	#sk_CMS_Recùõ¡En¸y±edKey_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Recùõ¡En¸y±edKey
, (°), (i))

	)

505 
	#sk_CMS_Recùõ¡En¸y±edKey_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Recùõ¡En¸y±edKey
, (°), (i), (vÆ))

	)

506 
	#sk_CMS_Recùõ¡En¸y±edKey_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Recùõ¡En¸y±edKey
, (°))

	)

507 
	#sk_CMS_Recùõ¡En¸y±edKey_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Recùõ¡En¸y±edKey
, (°), (vÆ))

	)

508 
	#sk_CMS_Recùõ¡En¸y±edKey_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Recùõ¡En¸y±edKey
, (°), (vÆ))

	)

509 
	#sk_CMS_Recùõ¡En¸y±edKey_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Recùõ¡En¸y±edKey
, (°), (vÆ))

	)

510 
	#sk_CMS_Recùõ¡En¸y±edKey_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Recùõ¡En¸y±edKey
, (°), (vÆ))

	)

511 
	#sk_CMS_Recùõ¡En¸y±edKey_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Recùõ¡En¸y±edKey
, (°), (i))

	)

512 
	#sk_CMS_Recùõ¡En¸y±edKey_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Recùõ¡En¸y±edKey
, (°), (±r))

	)

513 
	#sk_CMS_Recùõ¡En¸y±edKey_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Recùõ¡En¸y±edKey
, (°), (vÆ), (i))

	)

514 
	#sk_CMS_Recùõ¡En¸y±edKey_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Recùõ¡En¸y±edKey
, (°), (cmp))

	)

515 
	#sk_CMS_Recùõ¡En¸y±edKey_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Recùõ¡En¸y±edKey
, st)

	)

516 
	#sk_CMS_Recùõ¡En¸y±edKey_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Recùõ¡En¸y±edKey
, (°), (‰ì_func))

	)

517 
	#sk_CMS_Recùõ¡En¸y±edKey_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
CMS_Recùõ¡En¸y±edKey
, (°), (c›y_func), (‰ì_func))

	)

518 
	#sk_CMS_Recùõ¡En¸y±edKey_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Recùõ¡En¸y±edKey
, (°))

	)

519 
	#sk_CMS_Recùõ¡En¸y±edKey_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Recùõ¡En¸y±edKey
, (°))

	)

520 
	#sk_CMS_Recùõ¡En¸y±edKey_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Recùõ¡En¸y±edKey
, (°))

	)

521 
	#sk_CMS_Recùõ¡En¸y±edKey_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Recùõ¡En¸y±edKey
, (°))

	)

522 
	#sk_CMS_Recùõ¡Info_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_Recùõ¡Info
, (cmp))

	)

523 
	#sk_CMS_Recùõ¡Info_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Recùõ¡Info
)

	)

524 
	#sk_CMS_Recùõ¡Info_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Recùõ¡Info
, (°))

	)

525 
	#sk_CMS_Recùõ¡Info_num
(
°
Ë
	`SKM_sk_num
(
CMS_Recùõ¡Info
, (°))

	)

526 
	#sk_CMS_Recùõ¡Info_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Recùõ¡Info
, (°), (i))

	)

527 
	#sk_CMS_Recùõ¡Info_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Recùõ¡Info
, (°), (i), (vÆ))

	)

528 
	#sk_CMS_Recùõ¡Info_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Recùõ¡Info
, (°))

	)

529 
	#sk_CMS_Recùõ¡Info_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

530 
	#sk_CMS_Recùõ¡Info_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

531 
	#sk_CMS_Recùõ¡Info_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

532 
	#sk_CMS_Recùõ¡Info_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

533 
	#sk_CMS_Recùõ¡Info_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Recùõ¡Info
, (°), (i))

	)

534 
	#sk_CMS_Recùõ¡Info_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Recùõ¡Info
, (°), (±r))

	)

535 
	#sk_CMS_Recùõ¡Info_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Recùõ¡Info
, (°), (vÆ), (i))

	)

536 
	#sk_CMS_Recùõ¡Info_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Recùõ¡Info
, (°), (cmp))

	)

537 
	#sk_CMS_Recùõ¡Info_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Recùõ¡Info
, st)

	)

538 
	#sk_CMS_Recùõ¡Info_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Recùõ¡Info
, (°), (‰ì_func))

	)

539 
	#sk_CMS_Recùõ¡Info_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
CMS_Recùõ¡Info
, (°), (c›y_func), (‰ì_func))

	)

540 
	#sk_CMS_Recùõ¡Info_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Recùõ¡Info
, (°))

	)

541 
	#sk_CMS_Recùõ¡Info_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Recùõ¡Info
, (°))

	)

542 
	#sk_CMS_Recùõ¡Info_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Recùõ¡Info
, (°))

	)

543 
	#sk_CMS_Recùõ¡Info_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Recùõ¡Info
, (°))

	)

544 
	#sk_CMS_Revoˇti⁄InfoChoi˚_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_Revoˇti⁄InfoChoi˚
, (cmp))

	)

545 
	#sk_CMS_Revoˇti⁄InfoChoi˚_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Revoˇti⁄InfoChoi˚
)

	)

546 
	#sk_CMS_Revoˇti⁄InfoChoi˚_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

547 
	#sk_CMS_Revoˇti⁄InfoChoi˚_num
(
°
Ë
	`SKM_sk_num
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

548 
	#sk_CMS_Revoˇti⁄InfoChoi˚_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i))

	)

549 
	#sk_CMS_Revoˇti⁄InfoChoi˚_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i), (vÆ))

	)

550 
	#sk_CMS_Revoˇti⁄InfoChoi˚_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

551 
	#sk_CMS_Revoˇti⁄InfoChoi˚_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

552 
	#sk_CMS_Revoˇti⁄InfoChoi˚_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

553 
	#sk_CMS_Revoˇti⁄InfoChoi˚_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

554 
	#sk_CMS_Revoˇti⁄InfoChoi˚_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

555 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i))

	)

556 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (±r))

	)

557 
	#sk_CMS_Revoˇti⁄InfoChoi˚_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ), (i))

	)

558 
	#sk_CMS_Revoˇti⁄InfoChoi˚_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (cmp))

	)

559 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Revoˇti⁄InfoChoi˚
, st)

	)

560 
	#sk_CMS_Revoˇti⁄InfoChoi˚_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (‰ì_func))

	)

561 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (c›y_func), (‰ì_func))

	)

562 
	#sk_CMS_Revoˇti⁄InfoChoi˚_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

563 
	#sk_CMS_Revoˇti⁄InfoChoi˚_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

564 
	#sk_CMS_Revoˇti⁄InfoChoi˚_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

565 
	#sk_CMS_Revoˇti⁄InfoChoi˚_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

566 
	#sk_CMS_Sig√rInfo_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_Sig√rInfo
, (cmp))

	)

567 
	#sk_CMS_Sig√rInfo_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Sig√rInfo
)

	)

568 
	#sk_CMS_Sig√rInfo_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Sig√rInfo
, (°))

	)

569 
	#sk_CMS_Sig√rInfo_num
(
°
Ë
	`SKM_sk_num
(
CMS_Sig√rInfo
, (°))

	)

570 
	#sk_CMS_Sig√rInfo_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Sig√rInfo
, (°), (i))

	)

571 
	#sk_CMS_Sig√rInfo_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Sig√rInfo
, (°), (i), (vÆ))

	)

572 
	#sk_CMS_Sig√rInfo_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Sig√rInfo
, (°))

	)

573 
	#sk_CMS_Sig√rInfo_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

574 
	#sk_CMS_Sig√rInfo_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

575 
	#sk_CMS_Sig√rInfo_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

576 
	#sk_CMS_Sig√rInfo_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

577 
	#sk_CMS_Sig√rInfo_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Sig√rInfo
, (°), (i))

	)

578 
	#sk_CMS_Sig√rInfo_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Sig√rInfo
, (°), (±r))

	)

579 
	#sk_CMS_Sig√rInfo_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Sig√rInfo
, (°), (vÆ), (i))

	)

580 
	#sk_CMS_Sig√rInfo_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Sig√rInfo
, (°), (cmp))

	)

581 
	#sk_CMS_Sig√rInfo_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Sig√rInfo
, st)

	)

582 
	#sk_CMS_Sig√rInfo_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Sig√rInfo
, (°), (‰ì_func))

	)

583 
	#sk_CMS_Sig√rInfo_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
CMS_Sig√rInfo
, (°), (c›y_func), (‰ì_func))

	)

584 
	#sk_CMS_Sig√rInfo_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Sig√rInfo
, (°))

	)

585 
	#sk_CMS_Sig√rInfo_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Sig√rInfo
, (°))

	)

586 
	#sk_CMS_Sig√rInfo_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Sig√rInfo
, (°))

	)

587 
	#sk_CMS_Sig√rInfo_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Sig√rInfo
, (°))

	)

588 
	#sk_CONF_IMODULE_√w
(
cmp
Ë
	`SKM_sk_√w
(
CONF_IMODULE
, (cmp))

	)

589 
	#sk_CONF_IMODULE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_IMODULE
)

	)

590 
	#sk_CONF_IMODULE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_IMODULE
, (°))

	)

591 
	#sk_CONF_IMODULE_num
(
°
Ë
	`SKM_sk_num
(
CONF_IMODULE
, (°))

	)

592 
	#sk_CONF_IMODULE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_IMODULE
, (°), (i))

	)

593 
	#sk_CONF_IMODULE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_IMODULE
, (°), (i), (vÆ))

	)

594 
	#sk_CONF_IMODULE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_IMODULE
, (°))

	)

595 
	#sk_CONF_IMODULE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_IMODULE
, (°), (vÆ))

	)

596 
	#sk_CONF_IMODULE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_IMODULE
, (°), (vÆ))

	)

597 
	#sk_CONF_IMODULE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_IMODULE
, (°), (vÆ))

	)

598 
	#sk_CONF_IMODULE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_IMODULE
, (°), (vÆ))

	)

599 
	#sk_CONF_IMODULE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_IMODULE
, (°), (i))

	)

600 
	#sk_CONF_IMODULE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_IMODULE
, (°), (±r))

	)

601 
	#sk_CONF_IMODULE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_IMODULE
, (°), (vÆ), (i))

	)

602 
	#sk_CONF_IMODULE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_IMODULE
, (°), (cmp))

	)

603 
	#sk_CONF_IMODULE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_IMODULE
, st)

	)

604 
	#sk_CONF_IMODULE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_IMODULE
, (°), (‰ì_func))

	)

605 
	#sk_CONF_IMODULE_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
CONF_IMODULE
, (°), (c›y_func), (‰ì_func))

	)

606 
	#sk_CONF_IMODULE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_IMODULE
, (°))

	)

607 
	#sk_CONF_IMODULE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_IMODULE
, (°))

	)

608 
	#sk_CONF_IMODULE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_IMODULE
, (°))

	)

609 
	#sk_CONF_IMODULE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_IMODULE
, (°))

	)

610 
	#sk_CONF_MODULE_√w
(
cmp
Ë
	`SKM_sk_√w
(
CONF_MODULE
, (cmp))

	)

611 
	#sk_CONF_MODULE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_MODULE
)

	)

612 
	#sk_CONF_MODULE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_MODULE
, (°))

	)

613 
	#sk_CONF_MODULE_num
(
°
Ë
	`SKM_sk_num
(
CONF_MODULE
, (°))

	)

614 
	#sk_CONF_MODULE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_MODULE
, (°), (i))

	)

615 
	#sk_CONF_MODULE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_MODULE
, (°), (i), (vÆ))

	)

616 
	#sk_CONF_MODULE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_MODULE
, (°))

	)

617 
	#sk_CONF_MODULE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_MODULE
, (°), (vÆ))

	)

618 
	#sk_CONF_MODULE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_MODULE
, (°), (vÆ))

	)

619 
	#sk_CONF_MODULE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_MODULE
, (°), (vÆ))

	)

620 
	#sk_CONF_MODULE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_MODULE
, (°), (vÆ))

	)

621 
	#sk_CONF_MODULE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_MODULE
, (°), (i))

	)

622 
	#sk_CONF_MODULE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_MODULE
, (°), (±r))

	)

623 
	#sk_CONF_MODULE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_MODULE
, (°), (vÆ), (i))

	)

624 
	#sk_CONF_MODULE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_MODULE
, (°), (cmp))

	)

625 
	#sk_CONF_MODULE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_MODULE
, st)

	)

626 
	#sk_CONF_MODULE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_MODULE
, (°), (‰ì_func))

	)

627 
	#sk_CONF_MODULE_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
CONF_MODULE
, (°), (c›y_func), (‰ì_func))

	)

628 
	#sk_CONF_MODULE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_MODULE
, (°))

	)

629 
	#sk_CONF_MODULE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_MODULE
, (°))

	)

630 
	#sk_CONF_MODULE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_MODULE
, (°))

	)

631 
	#sk_CONF_MODULE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_MODULE
, (°))

	)

632 
	#sk_CONF_VALUE_√w
(
cmp
Ë
	`SKM_sk_√w
(
CONF_VALUE
, (cmp))

	)

633 
	#sk_CONF_VALUE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_VALUE
)

	)

634 
	#sk_CONF_VALUE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_VALUE
, (°))

	)

635 
	#sk_CONF_VALUE_num
(
°
Ë
	`SKM_sk_num
(
CONF_VALUE
, (°))

	)

636 
	#sk_CONF_VALUE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_VALUE
, (°), (i))

	)

637 
	#sk_CONF_VALUE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_VALUE
, (°), (i), (vÆ))

	)

638 
	#sk_CONF_VALUE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_VALUE
, (°))

	)

639 
	#sk_CONF_VALUE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_VALUE
, (°), (vÆ))

	)

640 
	#sk_CONF_VALUE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_VALUE
, (°), (vÆ))

	)

641 
	#sk_CONF_VALUE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_VALUE
, (°), (vÆ))

	)

642 
	#sk_CONF_VALUE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_VALUE
, (°), (vÆ))

	)

643 
	#sk_CONF_VALUE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_VALUE
, (°), (i))

	)

644 
	#sk_CONF_VALUE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_VALUE
, (°), (±r))

	)

645 
	#sk_CONF_VALUE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_VALUE
, (°), (vÆ), (i))

	)

646 
	#sk_CONF_VALUE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_VALUE
, (°), (cmp))

	)

647 
	#sk_CONF_VALUE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_VALUE
, st)

	)

648 
	#sk_CONF_VALUE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_VALUE
, (°), (‰ì_func))

	)

649 
	#sk_CONF_VALUE_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
CONF_VALUE
, (°), (c›y_func), (‰ì_func))

	)

650 
	#sk_CONF_VALUE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_VALUE
, (°))

	)

651 
	#sk_CONF_VALUE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_VALUE
, (°))

	)

652 
	#sk_CONF_VALUE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_VALUE
, (°))

	)

653 
	#sk_CONF_VALUE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_VALUE
, (°))

	)

654 
	#sk_CRYPTO_EX_DATA_FUNCS_√w
(
cmp
Ë
	`SKM_sk_√w
(
CRYPTO_EX_DATA_FUNCS
, (cmp))

	)

655 
	#sk_CRYPTO_EX_DATA_FUNCS_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CRYPTO_EX_DATA_FUNCS
)

	)

656 
	#sk_CRYPTO_EX_DATA_FUNCS_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

657 
	#sk_CRYPTO_EX_DATA_FUNCS_num
(
°
Ë
	`SKM_sk_num
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

658 
	#sk_CRYPTO_EX_DATA_FUNCS_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CRYPTO_EX_DATA_FUNCS
, (°), (i))

	)

659 
	#sk_CRYPTO_EX_DATA_FUNCS_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CRYPTO_EX_DATA_FUNCS
, (°), (i), (vÆ))

	)

660 
	#sk_CRYPTO_EX_DATA_FUNCS_zîo
(
°
Ë
	`SKM_sk_zîo
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

661 
	#sk_CRYPTO_EX_DATA_FUNCS_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

662 
	#sk_CRYPTO_EX_DATA_FUNCS_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

663 
	#sk_CRYPTO_EX_DATA_FUNCS_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

664 
	#sk_CRYPTO_EX_DATA_FUNCS_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

665 
	#sk_CRYPTO_EX_DATA_FUNCS_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CRYPTO_EX_DATA_FUNCS
, (°), (i))

	)

666 
	#sk_CRYPTO_EX_DATA_FUNCS_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CRYPTO_EX_DATA_FUNCS
, (°), (±r))

	)

667 
	#sk_CRYPTO_EX_DATA_FUNCS_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ), (i))

	)

668 
	#sk_CRYPTO_EX_DATA_FUNCS_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CRYPTO_EX_DATA_FUNCS
, (°), (cmp))

	)

669 
	#sk_CRYPTO_EX_DATA_FUNCS_dup
(
°
Ë
	`SKM_sk_dup
(
CRYPTO_EX_DATA_FUNCS
, st)

	)

670 
	#sk_CRYPTO_EX_DATA_FUNCS_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CRYPTO_EX_DATA_FUNCS
, (°), (‰ì_func))

	)

671 
	#sk_CRYPTO_EX_DATA_FUNCS_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
CRYPTO_EX_DATA_FUNCS
, (°), (c›y_func), (‰ì_func))

	)

672 
	#sk_CRYPTO_EX_DATA_FUNCS_shi·
(
°
Ë
	`SKM_sk_shi·
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

673 
	#sk_CRYPTO_EX_DATA_FUNCS_p›
(
°
Ë
	`SKM_sk_p›
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

674 
	#sk_CRYPTO_EX_DATA_FUNCS_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

675 
	#sk_CRYPTO_EX_DATA_FUNCS_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

676 
	#sk_CRYPTO_dy∆ock_√w
(
cmp
Ë
	`SKM_sk_√w
(
CRYPTO_dy∆ock
, (cmp))

	)

677 
	#sk_CRYPTO_dy∆ock_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CRYPTO_dy∆ock
)

	)

678 
	#sk_CRYPTO_dy∆ock_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CRYPTO_dy∆ock
, (°))

	)

679 
	#sk_CRYPTO_dy∆ock_num
(
°
Ë
	`SKM_sk_num
(
CRYPTO_dy∆ock
, (°))

	)

680 
	#sk_CRYPTO_dy∆ock_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CRYPTO_dy∆ock
, (°), (i))

	)

681 
	#sk_CRYPTO_dy∆ock_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CRYPTO_dy∆ock
, (°), (i), (vÆ))

	)

682 
	#sk_CRYPTO_dy∆ock_zîo
(
°
Ë
	`SKM_sk_zîo
(
CRYPTO_dy∆ock
, (°))

	)

683 
	#sk_CRYPTO_dy∆ock_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

684 
	#sk_CRYPTO_dy∆ock_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

685 
	#sk_CRYPTO_dy∆ock_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

686 
	#sk_CRYPTO_dy∆ock_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

687 
	#sk_CRYPTO_dy∆ock_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CRYPTO_dy∆ock
, (°), (i))

	)

688 
	#sk_CRYPTO_dy∆ock_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CRYPTO_dy∆ock
, (°), (±r))

	)

689 
	#sk_CRYPTO_dy∆ock_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CRYPTO_dy∆ock
, (°), (vÆ), (i))

	)

690 
	#sk_CRYPTO_dy∆ock_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CRYPTO_dy∆ock
, (°), (cmp))

	)

691 
	#sk_CRYPTO_dy∆ock_dup
(
°
Ë
	`SKM_sk_dup
(
CRYPTO_dy∆ock
, st)

	)

692 
	#sk_CRYPTO_dy∆ock_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CRYPTO_dy∆ock
, (°), (‰ì_func))

	)

693 
	#sk_CRYPTO_dy∆ock_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
CRYPTO_dy∆ock
, (°), (c›y_func), (‰ì_func))

	)

694 
	#sk_CRYPTO_dy∆ock_shi·
(
°
Ë
	`SKM_sk_shi·
(
CRYPTO_dy∆ock
, (°))

	)

695 
	#sk_CRYPTO_dy∆ock_p›
(
°
Ë
	`SKM_sk_p›
(
CRYPTO_dy∆ock
, (°))

	)

696 
	#sk_CRYPTO_dy∆ock_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CRYPTO_dy∆ock
, (°))

	)

697 
	#sk_CRYPTO_dy∆ock_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CRYPTO_dy∆ock
, (°))

	)

698 
	#sk_DIST_POINT_√w
(
cmp
Ë
	`SKM_sk_√w
(
DIST_POINT
, (cmp))

	)

699 
	#sk_DIST_POINT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
DIST_POINT
)

	)

700 
	#sk_DIST_POINT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
DIST_POINT
, (°))

	)

701 
	#sk_DIST_POINT_num
(
°
Ë
	`SKM_sk_num
(
DIST_POINT
, (°))

	)

702 
	#sk_DIST_POINT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
DIST_POINT
, (°), (i))

	)

703 
	#sk_DIST_POINT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
DIST_POINT
, (°), (i), (vÆ))

	)

704 
	#sk_DIST_POINT_zîo
(
°
Ë
	`SKM_sk_zîo
(
DIST_POINT
, (°))

	)

705 
	#sk_DIST_POINT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
DIST_POINT
, (°), (vÆ))

	)

706 
	#sk_DIST_POINT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
DIST_POINT
, (°), (vÆ))

	)

707 
	#sk_DIST_POINT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
DIST_POINT
, (°), (vÆ))

	)

708 
	#sk_DIST_POINT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
DIST_POINT
, (°), (vÆ))

	)

709 
	#sk_DIST_POINT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
DIST_POINT
, (°), (i))

	)

710 
	#sk_DIST_POINT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
DIST_POINT
, (°), (±r))

	)

711 
	#sk_DIST_POINT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
DIST_POINT
, (°), (vÆ), (i))

	)

712 
	#sk_DIST_POINT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
DIST_POINT
, (°), (cmp))

	)

713 
	#sk_DIST_POINT_dup
(
°
Ë
	`SKM_sk_dup
(
DIST_POINT
, st)

	)

714 
	#sk_DIST_POINT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
DIST_POINT
, (°), (‰ì_func))

	)

715 
	#sk_DIST_POINT_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
DIST_POINT
, (°), (c›y_func), (‰ì_func))

	)

716 
	#sk_DIST_POINT_shi·
(
°
Ë
	`SKM_sk_shi·
(
DIST_POINT
, (°))

	)

717 
	#sk_DIST_POINT_p›
(
°
Ë
	`SKM_sk_p›
(
DIST_POINT
, (°))

	)

718 
	#sk_DIST_POINT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
DIST_POINT
, (°))

	)

719 
	#sk_DIST_POINT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
DIST_POINT
, (°))

	)

720 
	#sk_ENGINE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ENGINE
, (cmp))

	)

721 
	#sk_ENGINE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ENGINE
)

	)

722 
	#sk_ENGINE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ENGINE
, (°))

	)

723 
	#sk_ENGINE_num
(
°
Ë
	`SKM_sk_num
(
ENGINE
, (°))

	)

724 
	#sk_ENGINE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ENGINE
, (°), (i))

	)

725 
	#sk_ENGINE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ENGINE
, (°), (i), (vÆ))

	)

726 
	#sk_ENGINE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ENGINE
, (°))

	)

727 
	#sk_ENGINE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ENGINE
, (°), (vÆ))

	)

728 
	#sk_ENGINE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ENGINE
, (°), (vÆ))

	)

729 
	#sk_ENGINE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ENGINE
, (°), (vÆ))

	)

730 
	#sk_ENGINE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ENGINE
, (°), (vÆ))

	)

731 
	#sk_ENGINE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ENGINE
, (°), (i))

	)

732 
	#sk_ENGINE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ENGINE
, (°), (±r))

	)

733 
	#sk_ENGINE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ENGINE
, (°), (vÆ), (i))

	)

734 
	#sk_ENGINE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ENGINE
, (°), (cmp))

	)

735 
	#sk_ENGINE_dup
(
°
Ë
	`SKM_sk_dup
(
ENGINE
, st)

	)

736 
	#sk_ENGINE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ENGINE
, (°), (‰ì_func))

	)

737 
	#sk_ENGINE_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
ENGINE
, (°), (c›y_func), (‰ì_func))

	)

738 
	#sk_ENGINE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ENGINE
, (°))

	)

739 
	#sk_ENGINE_p›
(
°
Ë
	`SKM_sk_p›
(
ENGINE
, (°))

	)

740 
	#sk_ENGINE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ENGINE
, (°))

	)

741 
	#sk_ENGINE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ENGINE
, (°))

	)

742 
	#sk_ENGINE_CLEANUP_ITEM_√w
(
cmp
Ë
	`SKM_sk_√w
(
ENGINE_CLEANUP_ITEM
, (cmp))

	)

743 
	#sk_ENGINE_CLEANUP_ITEM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ENGINE_CLEANUP_ITEM
)

	)

744 
	#sk_ENGINE_CLEANUP_ITEM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ENGINE_CLEANUP_ITEM
, (°))

	)

745 
	#sk_ENGINE_CLEANUP_ITEM_num
(
°
Ë
	`SKM_sk_num
(
ENGINE_CLEANUP_ITEM
, (°))

	)

746 
	#sk_ENGINE_CLEANUP_ITEM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ENGINE_CLEANUP_ITEM
, (°), (i))

	)

747 
	#sk_ENGINE_CLEANUP_ITEM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ENGINE_CLEANUP_ITEM
, (°), (i), (vÆ))

	)

748 
	#sk_ENGINE_CLEANUP_ITEM_zîo
(
°
Ë
	`SKM_sk_zîo
(
ENGINE_CLEANUP_ITEM
, (°))

	)

749 
	#sk_ENGINE_CLEANUP_ITEM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

750 
	#sk_ENGINE_CLEANUP_ITEM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

751 
	#sk_ENGINE_CLEANUP_ITEM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

752 
	#sk_ENGINE_CLEANUP_ITEM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

753 
	#sk_ENGINE_CLEANUP_ITEM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ENGINE_CLEANUP_ITEM
, (°), (i))

	)

754 
	#sk_ENGINE_CLEANUP_ITEM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ENGINE_CLEANUP_ITEM
, (°), (±r))

	)

755 
	#sk_ENGINE_CLEANUP_ITEM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ), (i))

	)

756 
	#sk_ENGINE_CLEANUP_ITEM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ENGINE_CLEANUP_ITEM
, (°), (cmp))

	)

757 
	#sk_ENGINE_CLEANUP_ITEM_dup
(
°
Ë
	`SKM_sk_dup
(
ENGINE_CLEANUP_ITEM
, st)

	)

758 
	#sk_ENGINE_CLEANUP_ITEM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ENGINE_CLEANUP_ITEM
, (°), (‰ì_func))

	)

759 
	#sk_ENGINE_CLEANUP_ITEM_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
ENGINE_CLEANUP_ITEM
, (°), (c›y_func), (‰ì_func))

	)

760 
	#sk_ENGINE_CLEANUP_ITEM_shi·
(
°
Ë
	`SKM_sk_shi·
(
ENGINE_CLEANUP_ITEM
, (°))

	)

761 
	#sk_ENGINE_CLEANUP_ITEM_p›
(
°
Ë
	`SKM_sk_p›
(
ENGINE_CLEANUP_ITEM
, (°))

	)

762 
	#sk_ENGINE_CLEANUP_ITEM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ENGINE_CLEANUP_ITEM
, (°))

	)

763 
	#sk_ENGINE_CLEANUP_ITEM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ENGINE_CLEANUP_ITEM
, (°))

	)

764 
	#sk_ESS_CERT_ID_√w
(
cmp
Ë
	`SKM_sk_√w
(
ESS_CERT_ID
, (cmp))

	)

765 
	#sk_ESS_CERT_ID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ESS_CERT_ID
)

	)

766 
	#sk_ESS_CERT_ID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ESS_CERT_ID
, (°))

	)

767 
	#sk_ESS_CERT_ID_num
(
°
Ë
	`SKM_sk_num
(
ESS_CERT_ID
, (°))

	)

768 
	#sk_ESS_CERT_ID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ESS_CERT_ID
, (°), (i))

	)

769 
	#sk_ESS_CERT_ID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ESS_CERT_ID
, (°), (i), (vÆ))

	)

770 
	#sk_ESS_CERT_ID_zîo
(
°
Ë
	`SKM_sk_zîo
(
ESS_CERT_ID
, (°))

	)

771 
	#sk_ESS_CERT_ID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ESS_CERT_ID
, (°), (vÆ))

	)

772 
	#sk_ESS_CERT_ID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ESS_CERT_ID
, (°), (vÆ))

	)

773 
	#sk_ESS_CERT_ID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ESS_CERT_ID
, (°), (vÆ))

	)

774 
	#sk_ESS_CERT_ID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ESS_CERT_ID
, (°), (vÆ))

	)

775 
	#sk_ESS_CERT_ID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ESS_CERT_ID
, (°), (i))

	)

776 
	#sk_ESS_CERT_ID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ESS_CERT_ID
, (°), (±r))

	)

777 
	#sk_ESS_CERT_ID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ESS_CERT_ID
, (°), (vÆ), (i))

	)

778 
	#sk_ESS_CERT_ID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ESS_CERT_ID
, (°), (cmp))

	)

779 
	#sk_ESS_CERT_ID_dup
(
°
Ë
	`SKM_sk_dup
(
ESS_CERT_ID
, st)

	)

780 
	#sk_ESS_CERT_ID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ESS_CERT_ID
, (°), (‰ì_func))

	)

781 
	#sk_ESS_CERT_ID_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
ESS_CERT_ID
, (°), (c›y_func), (‰ì_func))

	)

782 
	#sk_ESS_CERT_ID_shi·
(
°
Ë
	`SKM_sk_shi·
(
ESS_CERT_ID
, (°))

	)

783 
	#sk_ESS_CERT_ID_p›
(
°
Ë
	`SKM_sk_p›
(
ESS_CERT_ID
, (°))

	)

784 
	#sk_ESS_CERT_ID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ESS_CERT_ID
, (°))

	)

785 
	#sk_ESS_CERT_ID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ESS_CERT_ID
, (°))

	)

786 
	#sk_EVP_MD_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_MD
, (cmp))

	)

787 
	#sk_EVP_MD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_MD
)

	)

788 
	#sk_EVP_MD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_MD
, (°))

	)

789 
	#sk_EVP_MD_num
(
°
Ë
	`SKM_sk_num
(
EVP_MD
, (°))

	)

790 
	#sk_EVP_MD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_MD
, (°), (i))

	)

791 
	#sk_EVP_MD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_MD
, (°), (i), (vÆ))

	)

792 
	#sk_EVP_MD_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_MD
, (°))

	)

793 
	#sk_EVP_MD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_MD
, (°), (vÆ))

	)

794 
	#sk_EVP_MD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_MD
, (°), (vÆ))

	)

795 
	#sk_EVP_MD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_MD
, (°), (vÆ))

	)

796 
	#sk_EVP_MD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_MD
, (°), (vÆ))

	)

797 
	#sk_EVP_MD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_MD
, (°), (i))

	)

798 
	#sk_EVP_MD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_MD
, (°), (±r))

	)

799 
	#sk_EVP_MD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_MD
, (°), (vÆ), (i))

	)

800 
	#sk_EVP_MD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_MD
, (°), (cmp))

	)

801 
	#sk_EVP_MD_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_MD
, st)

	)

802 
	#sk_EVP_MD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_MD
, (°), (‰ì_func))

	)

803 
	#sk_EVP_MD_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
EVP_MD
, (°), (c›y_func), (‰ì_func))

	)

804 
	#sk_EVP_MD_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_MD
, (°))

	)

805 
	#sk_EVP_MD_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_MD
, (°))

	)

806 
	#sk_EVP_MD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_MD
, (°))

	)

807 
	#sk_EVP_MD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_MD
, (°))

	)

808 
	#sk_EVP_PBE_CTL_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_PBE_CTL
, (cmp))

	)

809 
	#sk_EVP_PBE_CTL_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_PBE_CTL
)

	)

810 
	#sk_EVP_PBE_CTL_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_PBE_CTL
, (°))

	)

811 
	#sk_EVP_PBE_CTL_num
(
°
Ë
	`SKM_sk_num
(
EVP_PBE_CTL
, (°))

	)

812 
	#sk_EVP_PBE_CTL_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_PBE_CTL
, (°), (i))

	)

813 
	#sk_EVP_PBE_CTL_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_PBE_CTL
, (°), (i), (vÆ))

	)

814 
	#sk_EVP_PBE_CTL_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_PBE_CTL
, (°))

	)

815 
	#sk_EVP_PBE_CTL_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_PBE_CTL
, (°), (vÆ))

	)

816 
	#sk_EVP_PBE_CTL_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_PBE_CTL
, (°), (vÆ))

	)

817 
	#sk_EVP_PBE_CTL_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_PBE_CTL
, (°), (vÆ))

	)

818 
	#sk_EVP_PBE_CTL_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_PBE_CTL
, (°), (vÆ))

	)

819 
	#sk_EVP_PBE_CTL_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_PBE_CTL
, (°), (i))

	)

820 
	#sk_EVP_PBE_CTL_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_PBE_CTL
, (°), (±r))

	)

821 
	#sk_EVP_PBE_CTL_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_PBE_CTL
, (°), (vÆ), (i))

	)

822 
	#sk_EVP_PBE_CTL_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_PBE_CTL
, (°), (cmp))

	)

823 
	#sk_EVP_PBE_CTL_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_PBE_CTL
, st)

	)

824 
	#sk_EVP_PBE_CTL_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_PBE_CTL
, (°), (‰ì_func))

	)

825 
	#sk_EVP_PBE_CTL_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
EVP_PBE_CTL
, (°), (c›y_func), (‰ì_func))

	)

826 
	#sk_EVP_PBE_CTL_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_PBE_CTL
, (°))

	)

827 
	#sk_EVP_PBE_CTL_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_PBE_CTL
, (°))

	)

828 
	#sk_EVP_PBE_CTL_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_PBE_CTL
, (°))

	)

829 
	#sk_EVP_PBE_CTL_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_PBE_CTL
, (°))

	)

830 
	#sk_EVP_PKEY_ASN1_METHOD_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_PKEY_ASN1_METHOD
, (cmp))

	)

831 
	#sk_EVP_PKEY_ASN1_METHOD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_PKEY_ASN1_METHOD
)

	)

832 
	#sk_EVP_PKEY_ASN1_METHOD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

833 
	#sk_EVP_PKEY_ASN1_METHOD_num
(
°
Ë
	`SKM_sk_num
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

834 
	#sk_EVP_PKEY_ASN1_METHOD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_PKEY_ASN1_METHOD
, (°), (i))

	)

835 
	#sk_EVP_PKEY_ASN1_METHOD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_PKEY_ASN1_METHOD
, (°), (i), (vÆ))

	)

836 
	#sk_EVP_PKEY_ASN1_METHOD_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

837 
	#sk_EVP_PKEY_ASN1_METHOD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

838 
	#sk_EVP_PKEY_ASN1_METHOD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

839 
	#sk_EVP_PKEY_ASN1_METHOD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

840 
	#sk_EVP_PKEY_ASN1_METHOD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

841 
	#sk_EVP_PKEY_ASN1_METHOD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_PKEY_ASN1_METHOD
, (°), (i))

	)

842 
	#sk_EVP_PKEY_ASN1_METHOD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_PKEY_ASN1_METHOD
, (°), (±r))

	)

843 
	#sk_EVP_PKEY_ASN1_METHOD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ), (i))

	)

844 
	#sk_EVP_PKEY_ASN1_METHOD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_PKEY_ASN1_METHOD
, (°), (cmp))

	)

845 
	#sk_EVP_PKEY_ASN1_METHOD_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_PKEY_ASN1_METHOD
, st)

	)

846 
	#sk_EVP_PKEY_ASN1_METHOD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_PKEY_ASN1_METHOD
, (°), (‰ì_func))

	)

847 
	#sk_EVP_PKEY_ASN1_METHOD_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
EVP_PKEY_ASN1_METHOD
, (°), (c›y_func), (‰ì_func))

	)

848 
	#sk_EVP_PKEY_ASN1_METHOD_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

849 
	#sk_EVP_PKEY_ASN1_METHOD_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

850 
	#sk_EVP_PKEY_ASN1_METHOD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

851 
	#sk_EVP_PKEY_ASN1_METHOD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

852 
	#sk_EVP_PKEY_METHOD_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_PKEY_METHOD
, (cmp))

	)

853 
	#sk_EVP_PKEY_METHOD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_PKEY_METHOD
)

	)

854 
	#sk_EVP_PKEY_METHOD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_PKEY_METHOD
, (°))

	)

855 
	#sk_EVP_PKEY_METHOD_num
(
°
Ë
	`SKM_sk_num
(
EVP_PKEY_METHOD
, (°))

	)

856 
	#sk_EVP_PKEY_METHOD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_PKEY_METHOD
, (°), (i))

	)

857 
	#sk_EVP_PKEY_METHOD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_PKEY_METHOD
, (°), (i), (vÆ))

	)

858 
	#sk_EVP_PKEY_METHOD_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_PKEY_METHOD
, (°))

	)

859 
	#sk_EVP_PKEY_METHOD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

860 
	#sk_EVP_PKEY_METHOD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

861 
	#sk_EVP_PKEY_METHOD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

862 
	#sk_EVP_PKEY_METHOD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

863 
	#sk_EVP_PKEY_METHOD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_PKEY_METHOD
, (°), (i))

	)

864 
	#sk_EVP_PKEY_METHOD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_PKEY_METHOD
, (°), (±r))

	)

865 
	#sk_EVP_PKEY_METHOD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_PKEY_METHOD
, (°), (vÆ), (i))

	)

866 
	#sk_EVP_PKEY_METHOD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_PKEY_METHOD
, (°), (cmp))

	)

867 
	#sk_EVP_PKEY_METHOD_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_PKEY_METHOD
, st)

	)

868 
	#sk_EVP_PKEY_METHOD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_PKEY_METHOD
, (°), (‰ì_func))

	)

869 
	#sk_EVP_PKEY_METHOD_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
EVP_PKEY_METHOD
, (°), (c›y_func), (‰ì_func))

	)

870 
	#sk_EVP_PKEY_METHOD_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_PKEY_METHOD
, (°))

	)

871 
	#sk_EVP_PKEY_METHOD_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_PKEY_METHOD
, (°))

	)

872 
	#sk_EVP_PKEY_METHOD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_PKEY_METHOD
, (°))

	)

873 
	#sk_EVP_PKEY_METHOD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_PKEY_METHOD
, (°))

	)

874 
	#sk_GENERAL_NAME_√w
(
cmp
Ë
	`SKM_sk_√w
(
GENERAL_NAME
, (cmp))

	)

875 
	#sk_GENERAL_NAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_NAME
)

	)

876 
	#sk_GENERAL_NAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_NAME
, (°))

	)

877 
	#sk_GENERAL_NAME_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_NAME
, (°))

	)

878 
	#sk_GENERAL_NAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_NAME
, (°), (i))

	)

879 
	#sk_GENERAL_NAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_NAME
, (°), (i), (vÆ))

	)

880 
	#sk_GENERAL_NAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_NAME
, (°))

	)

881 
	#sk_GENERAL_NAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_NAME
, (°), (vÆ))

	)

882 
	#sk_GENERAL_NAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_NAME
, (°), (vÆ))

	)

883 
	#sk_GENERAL_NAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_NAME
, (°), (vÆ))

	)

884 
	#sk_GENERAL_NAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_NAME
, (°), (vÆ))

	)

885 
	#sk_GENERAL_NAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_NAME
, (°), (i))

	)

886 
	#sk_GENERAL_NAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_NAME
, (°), (±r))

	)

887 
	#sk_GENERAL_NAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_NAME
, (°), (vÆ), (i))

	)

888 
	#sk_GENERAL_NAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_NAME
, (°), (cmp))

	)

889 
	#sk_GENERAL_NAME_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_NAME
, st)

	)

890 
	#sk_GENERAL_NAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_NAME
, (°), (‰ì_func))

	)

891 
	#sk_GENERAL_NAME_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
GENERAL_NAME
, (°), (c›y_func), (‰ì_func))

	)

892 
	#sk_GENERAL_NAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_NAME
, (°))

	)

893 
	#sk_GENERAL_NAME_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_NAME
, (°))

	)

894 
	#sk_GENERAL_NAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_NAME
, (°))

	)

895 
	#sk_GENERAL_NAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_NAME
, (°))

	)

896 
	#sk_GENERAL_NAMES_√w
(
cmp
Ë
	`SKM_sk_√w
(
GENERAL_NAMES
, (cmp))

	)

897 
	#sk_GENERAL_NAMES_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_NAMES
)

	)

898 
	#sk_GENERAL_NAMES_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_NAMES
, (°))

	)

899 
	#sk_GENERAL_NAMES_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_NAMES
, (°))

	)

900 
	#sk_GENERAL_NAMES_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_NAMES
, (°), (i))

	)

901 
	#sk_GENERAL_NAMES_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_NAMES
, (°), (i), (vÆ))

	)

902 
	#sk_GENERAL_NAMES_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_NAMES
, (°))

	)

903 
	#sk_GENERAL_NAMES_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_NAMES
, (°), (vÆ))

	)

904 
	#sk_GENERAL_NAMES_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_NAMES
, (°), (vÆ))

	)

905 
	#sk_GENERAL_NAMES_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_NAMES
, (°), (vÆ))

	)

906 
	#sk_GENERAL_NAMES_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_NAMES
, (°), (vÆ))

	)

907 
	#sk_GENERAL_NAMES_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_NAMES
, (°), (i))

	)

908 
	#sk_GENERAL_NAMES_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_NAMES
, (°), (±r))

	)

909 
	#sk_GENERAL_NAMES_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_NAMES
, (°), (vÆ), (i))

	)

910 
	#sk_GENERAL_NAMES_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_NAMES
, (°), (cmp))

	)

911 
	#sk_GENERAL_NAMES_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_NAMES
, st)

	)

912 
	#sk_GENERAL_NAMES_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_NAMES
, (°), (‰ì_func))

	)

913 
	#sk_GENERAL_NAMES_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
GENERAL_NAMES
, (°), (c›y_func), (‰ì_func))

	)

914 
	#sk_GENERAL_NAMES_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_NAMES
, (°))

	)

915 
	#sk_GENERAL_NAMES_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_NAMES
, (°))

	)

916 
	#sk_GENERAL_NAMES_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_NAMES
, (°))

	)

917 
	#sk_GENERAL_NAMES_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_NAMES
, (°))

	)

918 
	#sk_GENERAL_SUBTREE_√w
(
cmp
Ë
	`SKM_sk_√w
(
GENERAL_SUBTREE
, (cmp))

	)

919 
	#sk_GENERAL_SUBTREE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_SUBTREE
)

	)

920 
	#sk_GENERAL_SUBTREE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_SUBTREE
, (°))

	)

921 
	#sk_GENERAL_SUBTREE_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_SUBTREE
, (°))

	)

922 
	#sk_GENERAL_SUBTREE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_SUBTREE
, (°), (i))

	)

923 
	#sk_GENERAL_SUBTREE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_SUBTREE
, (°), (i), (vÆ))

	)

924 
	#sk_GENERAL_SUBTREE_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_SUBTREE
, (°))

	)

925 
	#sk_GENERAL_SUBTREE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

926 
	#sk_GENERAL_SUBTREE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

927 
	#sk_GENERAL_SUBTREE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

928 
	#sk_GENERAL_SUBTREE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

929 
	#sk_GENERAL_SUBTREE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_SUBTREE
, (°), (i))

	)

930 
	#sk_GENERAL_SUBTREE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_SUBTREE
, (°), (±r))

	)

931 
	#sk_GENERAL_SUBTREE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_SUBTREE
, (°), (vÆ), (i))

	)

932 
	#sk_GENERAL_SUBTREE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_SUBTREE
, (°), (cmp))

	)

933 
	#sk_GENERAL_SUBTREE_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_SUBTREE
, st)

	)

934 
	#sk_GENERAL_SUBTREE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_SUBTREE
, (°), (‰ì_func))

	)

935 
	#sk_GENERAL_SUBTREE_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
GENERAL_SUBTREE
, (°), (c›y_func), (‰ì_func))

	)

936 
	#sk_GENERAL_SUBTREE_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_SUBTREE
, (°))

	)

937 
	#sk_GENERAL_SUBTREE_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_SUBTREE
, (°))

	)

938 
	#sk_GENERAL_SUBTREE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_SUBTREE
, (°))

	)

939 
	#sk_GENERAL_SUBTREE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_SUBTREE
, (°))

	)

940 
	#sk_IPAddªssFamûy_√w
(
cmp
Ë
	`SKM_sk_√w
(
IPAddªssFamûy
, (cmp))

	)

941 
	#sk_IPAddªssFamûy_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
IPAddªssFamûy
)

	)

942 
	#sk_IPAddªssFamûy_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
IPAddªssFamûy
, (°))

	)

943 
	#sk_IPAddªssFamûy_num
(
°
Ë
	`SKM_sk_num
(
IPAddªssFamûy
, (°))

	)

944 
	#sk_IPAddªssFamûy_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
IPAddªssFamûy
, (°), (i))

	)

945 
	#sk_IPAddªssFamûy_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
IPAddªssFamûy
, (°), (i), (vÆ))

	)

946 
	#sk_IPAddªssFamûy_zîo
(
°
Ë
	`SKM_sk_zîo
(
IPAddªssFamûy
, (°))

	)

947 
	#sk_IPAddªssFamûy_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
IPAddªssFamûy
, (°), (vÆ))

	)

948 
	#sk_IPAddªssFamûy_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
IPAddªssFamûy
, (°), (vÆ))

	)

949 
	#sk_IPAddªssFamûy_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
IPAddªssFamûy
, (°), (vÆ))

	)

950 
	#sk_IPAddªssFamûy_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
IPAddªssFamûy
, (°), (vÆ))

	)

951 
	#sk_IPAddªssFamûy_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
IPAddªssFamûy
, (°), (i))

	)

952 
	#sk_IPAddªssFamûy_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
IPAddªssFamûy
, (°), (±r))

	)

953 
	#sk_IPAddªssFamûy_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
IPAddªssFamûy
, (°), (vÆ), (i))

	)

954 
	#sk_IPAddªssFamûy_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
IPAddªssFamûy
, (°), (cmp))

	)

955 
	#sk_IPAddªssFamûy_dup
(
°
Ë
	`SKM_sk_dup
(
IPAddªssFamûy
, st)

	)

956 
	#sk_IPAddªssFamûy_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
IPAddªssFamûy
, (°), (‰ì_func))

	)

957 
	#sk_IPAddªssFamûy_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
IPAddªssFamûy
, (°), (c›y_func), (‰ì_func))

	)

958 
	#sk_IPAddªssFamûy_shi·
(
°
Ë
	`SKM_sk_shi·
(
IPAddªssFamûy
, (°))

	)

959 
	#sk_IPAddªssFamûy_p›
(
°
Ë
	`SKM_sk_p›
(
IPAddªssFamûy
, (°))

	)

960 
	#sk_IPAddªssFamûy_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
IPAddªssFamûy
, (°))

	)

961 
	#sk_IPAddªssFamûy_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
IPAddªssFamûy
, (°))

	)

962 
	#sk_IPAddªssOrR™ge_√w
(
cmp
Ë
	`SKM_sk_√w
(
IPAddªssOrR™ge
, (cmp))

	)

963 
	#sk_IPAddªssOrR™ge_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
IPAddªssOrR™ge
)

	)

964 
	#sk_IPAddªssOrR™ge_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
IPAddªssOrR™ge
, (°))

	)

965 
	#sk_IPAddªssOrR™ge_num
(
°
Ë
	`SKM_sk_num
(
IPAddªssOrR™ge
, (°))

	)

966 
	#sk_IPAddªssOrR™ge_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
IPAddªssOrR™ge
, (°), (i))

	)

967 
	#sk_IPAddªssOrR™ge_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
IPAddªssOrR™ge
, (°), (i), (vÆ))

	)

968 
	#sk_IPAddªssOrR™ge_zîo
(
°
Ë
	`SKM_sk_zîo
(
IPAddªssOrR™ge
, (°))

	)

969 
	#sk_IPAddªssOrR™ge_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

970 
	#sk_IPAddªssOrR™ge_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

971 
	#sk_IPAddªssOrR™ge_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

972 
	#sk_IPAddªssOrR™ge_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

973 
	#sk_IPAddªssOrR™ge_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
IPAddªssOrR™ge
, (°), (i))

	)

974 
	#sk_IPAddªssOrR™ge_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
IPAddªssOrR™ge
, (°), (±r))

	)

975 
	#sk_IPAddªssOrR™ge_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
IPAddªssOrR™ge
, (°), (vÆ), (i))

	)

976 
	#sk_IPAddªssOrR™ge_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
IPAddªssOrR™ge
, (°), (cmp))

	)

977 
	#sk_IPAddªssOrR™ge_dup
(
°
Ë
	`SKM_sk_dup
(
IPAddªssOrR™ge
, st)

	)

978 
	#sk_IPAddªssOrR™ge_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
IPAddªssOrR™ge
, (°), (‰ì_func))

	)

979 
	#sk_IPAddªssOrR™ge_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
IPAddªssOrR™ge
, (°), (c›y_func), (‰ì_func))

	)

980 
	#sk_IPAddªssOrR™ge_shi·
(
°
Ë
	`SKM_sk_shi·
(
IPAddªssOrR™ge
, (°))

	)

981 
	#sk_IPAddªssOrR™ge_p›
(
°
Ë
	`SKM_sk_p›
(
IPAddªssOrR™ge
, (°))

	)

982 
	#sk_IPAddªssOrR™ge_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
IPAddªssOrR™ge
, (°))

	)

983 
	#sk_IPAddªssOrR™ge_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
IPAddªssOrR™ge
, (°))

	)

984 
	#sk_KRB5_APREQBODY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_APREQBODY
, (cmp))

	)

985 
	#sk_KRB5_APREQBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_APREQBODY
)

	)

986 
	#sk_KRB5_APREQBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_APREQBODY
, (°))

	)

987 
	#sk_KRB5_APREQBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_APREQBODY
, (°))

	)

988 
	#sk_KRB5_APREQBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_APREQBODY
, (°), (i))

	)

989 
	#sk_KRB5_APREQBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_APREQBODY
, (°), (i), (vÆ))

	)

990 
	#sk_KRB5_APREQBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_APREQBODY
, (°))

	)

991 
	#sk_KRB5_APREQBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_APREQBODY
, (°), (vÆ))

	)

992 
	#sk_KRB5_APREQBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_APREQBODY
, (°), (vÆ))

	)

993 
	#sk_KRB5_APREQBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_APREQBODY
, (°), (vÆ))

	)

994 
	#sk_KRB5_APREQBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_APREQBODY
, (°), (vÆ))

	)

995 
	#sk_KRB5_APREQBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_APREQBODY
, (°), (i))

	)

996 
	#sk_KRB5_APREQBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_APREQBODY
, (°), (±r))

	)

997 
	#sk_KRB5_APREQBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_APREQBODY
, (°), (vÆ), (i))

	)

998 
	#sk_KRB5_APREQBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_APREQBODY
, (°), (cmp))

	)

999 
	#sk_KRB5_APREQBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_APREQBODY
, st)

	)

1000 
	#sk_KRB5_APREQBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_APREQBODY
, (°), (‰ì_func))

	)

1001 
	#sk_KRB5_APREQBODY_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
KRB5_APREQBODY
, (°), (c›y_func), (‰ì_func))

	)

1002 
	#sk_KRB5_APREQBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_APREQBODY
, (°))

	)

1003 
	#sk_KRB5_APREQBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_APREQBODY
, (°))

	)

1004 
	#sk_KRB5_APREQBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_APREQBODY
, (°))

	)

1005 
	#sk_KRB5_APREQBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_APREQBODY
, (°))

	)

1006 
	#sk_KRB5_AUTHDATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_AUTHDATA
, (cmp))

	)

1007 
	#sk_KRB5_AUTHDATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_AUTHDATA
)

	)

1008 
	#sk_KRB5_AUTHDATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_AUTHDATA
, (°))

	)

1009 
	#sk_KRB5_AUTHDATA_num
(
°
Ë
	`SKM_sk_num
(
KRB5_AUTHDATA
, (°))

	)

1010 
	#sk_KRB5_AUTHDATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_AUTHDATA
, (°), (i))

	)

1011 
	#sk_KRB5_AUTHDATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_AUTHDATA
, (°), (i), (vÆ))

	)

1012 
	#sk_KRB5_AUTHDATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_AUTHDATA
, (°))

	)

1013 
	#sk_KRB5_AUTHDATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

1014 
	#sk_KRB5_AUTHDATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

1015 
	#sk_KRB5_AUTHDATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

1016 
	#sk_KRB5_AUTHDATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

1017 
	#sk_KRB5_AUTHDATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_AUTHDATA
, (°), (i))

	)

1018 
	#sk_KRB5_AUTHDATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_AUTHDATA
, (°), (±r))

	)

1019 
	#sk_KRB5_AUTHDATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_AUTHDATA
, (°), (vÆ), (i))

	)

1020 
	#sk_KRB5_AUTHDATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_AUTHDATA
, (°), (cmp))

	)

1021 
	#sk_KRB5_AUTHDATA_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_AUTHDATA
, st)

	)

1022 
	#sk_KRB5_AUTHDATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_AUTHDATA
, (°), (‰ì_func))

	)

1023 
	#sk_KRB5_AUTHDATA_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
KRB5_AUTHDATA
, (°), (c›y_func), (‰ì_func))

	)

1024 
	#sk_KRB5_AUTHDATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_AUTHDATA
, (°))

	)

1025 
	#sk_KRB5_AUTHDATA_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_AUTHDATA
, (°))

	)

1026 
	#sk_KRB5_AUTHDATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_AUTHDATA
, (°))

	)

1027 
	#sk_KRB5_AUTHDATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_AUTHDATA
, (°))

	)

1028 
	#sk_KRB5_AUTHENTBODY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_AUTHENTBODY
, (cmp))

	)

1029 
	#sk_KRB5_AUTHENTBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_AUTHENTBODY
)

	)

1030 
	#sk_KRB5_AUTHENTBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_AUTHENTBODY
, (°))

	)

1031 
	#sk_KRB5_AUTHENTBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_AUTHENTBODY
, (°))

	)

1032 
	#sk_KRB5_AUTHENTBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_AUTHENTBODY
, (°), (i))

	)

1033 
	#sk_KRB5_AUTHENTBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_AUTHENTBODY
, (°), (i), (vÆ))

	)

1034 
	#sk_KRB5_AUTHENTBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_AUTHENTBODY
, (°))

	)

1035 
	#sk_KRB5_AUTHENTBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1036 
	#sk_KRB5_AUTHENTBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1037 
	#sk_KRB5_AUTHENTBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1038 
	#sk_KRB5_AUTHENTBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1039 
	#sk_KRB5_AUTHENTBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_AUTHENTBODY
, (°), (i))

	)

1040 
	#sk_KRB5_AUTHENTBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_AUTHENTBODY
, (°), (±r))

	)

1041 
	#sk_KRB5_AUTHENTBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_AUTHENTBODY
, (°), (vÆ), (i))

	)

1042 
	#sk_KRB5_AUTHENTBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_AUTHENTBODY
, (°), (cmp))

	)

1043 
	#sk_KRB5_AUTHENTBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_AUTHENTBODY
, st)

	)

1044 
	#sk_KRB5_AUTHENTBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_AUTHENTBODY
, (°), (‰ì_func))

	)

1045 
	#sk_KRB5_AUTHENTBODY_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
KRB5_AUTHENTBODY
, (°), (c›y_func), (‰ì_func))

	)

1046 
	#sk_KRB5_AUTHENTBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_AUTHENTBODY
, (°))

	)

1047 
	#sk_KRB5_AUTHENTBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_AUTHENTBODY
, (°))

	)

1048 
	#sk_KRB5_AUTHENTBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_AUTHENTBODY
, (°))

	)

1049 
	#sk_KRB5_AUTHENTBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_AUTHENTBODY
, (°))

	)

1050 
	#sk_KRB5_CHECKSUM_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_CHECKSUM
, (cmp))

	)

1051 
	#sk_KRB5_CHECKSUM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_CHECKSUM
)

	)

1052 
	#sk_KRB5_CHECKSUM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_CHECKSUM
, (°))

	)

1053 
	#sk_KRB5_CHECKSUM_num
(
°
Ë
	`SKM_sk_num
(
KRB5_CHECKSUM
, (°))

	)

1054 
	#sk_KRB5_CHECKSUM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_CHECKSUM
, (°), (i))

	)

1055 
	#sk_KRB5_CHECKSUM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_CHECKSUM
, (°), (i), (vÆ))

	)

1056 
	#sk_KRB5_CHECKSUM_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_CHECKSUM
, (°))

	)

1057 
	#sk_KRB5_CHECKSUM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1058 
	#sk_KRB5_CHECKSUM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1059 
	#sk_KRB5_CHECKSUM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1060 
	#sk_KRB5_CHECKSUM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1061 
	#sk_KRB5_CHECKSUM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_CHECKSUM
, (°), (i))

	)

1062 
	#sk_KRB5_CHECKSUM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_CHECKSUM
, (°), (±r))

	)

1063 
	#sk_KRB5_CHECKSUM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_CHECKSUM
, (°), (vÆ), (i))

	)

1064 
	#sk_KRB5_CHECKSUM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_CHECKSUM
, (°), (cmp))

	)

1065 
	#sk_KRB5_CHECKSUM_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_CHECKSUM
, st)

	)

1066 
	#sk_KRB5_CHECKSUM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_CHECKSUM
, (°), (‰ì_func))

	)

1067 
	#sk_KRB5_CHECKSUM_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
KRB5_CHECKSUM
, (°), (c›y_func), (‰ì_func))

	)

1068 
	#sk_KRB5_CHECKSUM_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_CHECKSUM
, (°))

	)

1069 
	#sk_KRB5_CHECKSUM_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_CHECKSUM
, (°))

	)

1070 
	#sk_KRB5_CHECKSUM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_CHECKSUM
, (°))

	)

1071 
	#sk_KRB5_CHECKSUM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_CHECKSUM
, (°))

	)

1072 
	#sk_KRB5_ENCDATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_ENCDATA
, (cmp))

	)

1073 
	#sk_KRB5_ENCDATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_ENCDATA
)

	)

1074 
	#sk_KRB5_ENCDATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_ENCDATA
, (°))

	)

1075 
	#sk_KRB5_ENCDATA_num
(
°
Ë
	`SKM_sk_num
(
KRB5_ENCDATA
, (°))

	)

1076 
	#sk_KRB5_ENCDATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_ENCDATA
, (°), (i))

	)

1077 
	#sk_KRB5_ENCDATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_ENCDATA
, (°), (i), (vÆ))

	)

1078 
	#sk_KRB5_ENCDATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_ENCDATA
, (°))

	)

1079 
	#sk_KRB5_ENCDATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1080 
	#sk_KRB5_ENCDATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1081 
	#sk_KRB5_ENCDATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1082 
	#sk_KRB5_ENCDATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1083 
	#sk_KRB5_ENCDATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_ENCDATA
, (°), (i))

	)

1084 
	#sk_KRB5_ENCDATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_ENCDATA
, (°), (±r))

	)

1085 
	#sk_KRB5_ENCDATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_ENCDATA
, (°), (vÆ), (i))

	)

1086 
	#sk_KRB5_ENCDATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_ENCDATA
, (°), (cmp))

	)

1087 
	#sk_KRB5_ENCDATA_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_ENCDATA
, st)

	)

1088 
	#sk_KRB5_ENCDATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_ENCDATA
, (°), (‰ì_func))

	)

1089 
	#sk_KRB5_ENCDATA_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
KRB5_ENCDATA
, (°), (c›y_func), (‰ì_func))

	)

1090 
	#sk_KRB5_ENCDATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_ENCDATA
, (°))

	)

1091 
	#sk_KRB5_ENCDATA_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_ENCDATA
, (°))

	)

1092 
	#sk_KRB5_ENCDATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_ENCDATA
, (°))

	)

1093 
	#sk_KRB5_ENCDATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_ENCDATA
, (°))

	)

1094 
	#sk_KRB5_ENCKEY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_ENCKEY
, (cmp))

	)

1095 
	#sk_KRB5_ENCKEY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_ENCKEY
)

	)

1096 
	#sk_KRB5_ENCKEY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_ENCKEY
, (°))

	)

1097 
	#sk_KRB5_ENCKEY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_ENCKEY
, (°))

	)

1098 
	#sk_KRB5_ENCKEY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_ENCKEY
, (°), (i))

	)

1099 
	#sk_KRB5_ENCKEY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_ENCKEY
, (°), (i), (vÆ))

	)

1100 
	#sk_KRB5_ENCKEY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_ENCKEY
, (°))

	)

1101 
	#sk_KRB5_ENCKEY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1102 
	#sk_KRB5_ENCKEY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1103 
	#sk_KRB5_ENCKEY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1104 
	#sk_KRB5_ENCKEY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1105 
	#sk_KRB5_ENCKEY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_ENCKEY
, (°), (i))

	)

1106 
	#sk_KRB5_ENCKEY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_ENCKEY
, (°), (±r))

	)

1107 
	#sk_KRB5_ENCKEY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_ENCKEY
, (°), (vÆ), (i))

	)

1108 
	#sk_KRB5_ENCKEY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_ENCKEY
, (°), (cmp))

	)

1109 
	#sk_KRB5_ENCKEY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_ENCKEY
, st)

	)

1110 
	#sk_KRB5_ENCKEY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_ENCKEY
, (°), (‰ì_func))

	)

1111 
	#sk_KRB5_ENCKEY_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
KRB5_ENCKEY
, (°), (c›y_func), (‰ì_func))

	)

1112 
	#sk_KRB5_ENCKEY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_ENCKEY
, (°))

	)

1113 
	#sk_KRB5_ENCKEY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_ENCKEY
, (°))

	)

1114 
	#sk_KRB5_ENCKEY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_ENCKEY
, (°))

	)

1115 
	#sk_KRB5_ENCKEY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_ENCKEY
, (°))

	)

1116 
	#sk_KRB5_PRINCNAME_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_PRINCNAME
, (cmp))

	)

1117 
	#sk_KRB5_PRINCNAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_PRINCNAME
)

	)

1118 
	#sk_KRB5_PRINCNAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_PRINCNAME
, (°))

	)

1119 
	#sk_KRB5_PRINCNAME_num
(
°
Ë
	`SKM_sk_num
(
KRB5_PRINCNAME
, (°))

	)

1120 
	#sk_KRB5_PRINCNAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_PRINCNAME
, (°), (i))

	)

1121 
	#sk_KRB5_PRINCNAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_PRINCNAME
, (°), (i), (vÆ))

	)

1122 
	#sk_KRB5_PRINCNAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_PRINCNAME
, (°))

	)

1123 
	#sk_KRB5_PRINCNAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1124 
	#sk_KRB5_PRINCNAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1125 
	#sk_KRB5_PRINCNAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1126 
	#sk_KRB5_PRINCNAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1127 
	#sk_KRB5_PRINCNAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_PRINCNAME
, (°), (i))

	)

1128 
	#sk_KRB5_PRINCNAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_PRINCNAME
, (°), (±r))

	)

1129 
	#sk_KRB5_PRINCNAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_PRINCNAME
, (°), (vÆ), (i))

	)

1130 
	#sk_KRB5_PRINCNAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_PRINCNAME
, (°), (cmp))

	)

1131 
	#sk_KRB5_PRINCNAME_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_PRINCNAME
, st)

	)

1132 
	#sk_KRB5_PRINCNAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_PRINCNAME
, (°), (‰ì_func))

	)

1133 
	#sk_KRB5_PRINCNAME_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
KRB5_PRINCNAME
, (°), (c›y_func), (‰ì_func))

	)

1134 
	#sk_KRB5_PRINCNAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_PRINCNAME
, (°))

	)

1135 
	#sk_KRB5_PRINCNAME_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_PRINCNAME
, (°))

	)

1136 
	#sk_KRB5_PRINCNAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_PRINCNAME
, (°))

	)

1137 
	#sk_KRB5_PRINCNAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_PRINCNAME
, (°))

	)

1138 
	#sk_KRB5_TKTBODY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_TKTBODY
, (cmp))

	)

1139 
	#sk_KRB5_TKTBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_TKTBODY
)

	)

1140 
	#sk_KRB5_TKTBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_TKTBODY
, (°))

	)

1141 
	#sk_KRB5_TKTBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_TKTBODY
, (°))

	)

1142 
	#sk_KRB5_TKTBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_TKTBODY
, (°), (i))

	)

1143 
	#sk_KRB5_TKTBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_TKTBODY
, (°), (i), (vÆ))

	)

1144 
	#sk_KRB5_TKTBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_TKTBODY
, (°))

	)

1145 
	#sk_KRB5_TKTBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1146 
	#sk_KRB5_TKTBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1147 
	#sk_KRB5_TKTBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1148 
	#sk_KRB5_TKTBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1149 
	#sk_KRB5_TKTBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_TKTBODY
, (°), (i))

	)

1150 
	#sk_KRB5_TKTBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_TKTBODY
, (°), (±r))

	)

1151 
	#sk_KRB5_TKTBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_TKTBODY
, (°), (vÆ), (i))

	)

1152 
	#sk_KRB5_TKTBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_TKTBODY
, (°), (cmp))

	)

1153 
	#sk_KRB5_TKTBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_TKTBODY
, st)

	)

1154 
	#sk_KRB5_TKTBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_TKTBODY
, (°), (‰ì_func))

	)

1155 
	#sk_KRB5_TKTBODY_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
KRB5_TKTBODY
, (°), (c›y_func), (‰ì_func))

	)

1156 
	#sk_KRB5_TKTBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_TKTBODY
, (°))

	)

1157 
	#sk_KRB5_TKTBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_TKTBODY
, (°))

	)

1158 
	#sk_KRB5_TKTBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_TKTBODY
, (°))

	)

1159 
	#sk_KRB5_TKTBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_TKTBODY
, (°))

	)

1160 
	#sk_MEM_OBJECT_DATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
MEM_OBJECT_DATA
, (cmp))

	)

1161 
	#sk_MEM_OBJECT_DATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MEM_OBJECT_DATA
)

	)

1162 
	#sk_MEM_OBJECT_DATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MEM_OBJECT_DATA
, (°))

	)

1163 
	#sk_MEM_OBJECT_DATA_num
(
°
Ë
	`SKM_sk_num
(
MEM_OBJECT_DATA
, (°))

	)

1164 
	#sk_MEM_OBJECT_DATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MEM_OBJECT_DATA
, (°), (i))

	)

1165 
	#sk_MEM_OBJECT_DATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MEM_OBJECT_DATA
, (°), (i), (vÆ))

	)

1166 
	#sk_MEM_OBJECT_DATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
MEM_OBJECT_DATA
, (°))

	)

1167 
	#sk_MEM_OBJECT_DATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1168 
	#sk_MEM_OBJECT_DATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1169 
	#sk_MEM_OBJECT_DATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1170 
	#sk_MEM_OBJECT_DATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1171 
	#sk_MEM_OBJECT_DATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MEM_OBJECT_DATA
, (°), (i))

	)

1172 
	#sk_MEM_OBJECT_DATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MEM_OBJECT_DATA
, (°), (±r))

	)

1173 
	#sk_MEM_OBJECT_DATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MEM_OBJECT_DATA
, (°), (vÆ), (i))

	)

1174 
	#sk_MEM_OBJECT_DATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MEM_OBJECT_DATA
, (°), (cmp))

	)

1175 
	#sk_MEM_OBJECT_DATA_dup
(
°
Ë
	`SKM_sk_dup
(
MEM_OBJECT_DATA
, st)

	)

1176 
	#sk_MEM_OBJECT_DATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MEM_OBJECT_DATA
, (°), (‰ì_func))

	)

1177 
	#sk_MEM_OBJECT_DATA_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
MEM_OBJECT_DATA
, (°), (c›y_func), (‰ì_func))

	)

1178 
	#sk_MEM_OBJECT_DATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
MEM_OBJECT_DATA
, (°))

	)

1179 
	#sk_MEM_OBJECT_DATA_p›
(
°
Ë
	`SKM_sk_p›
(
MEM_OBJECT_DATA
, (°))

	)

1180 
	#sk_MEM_OBJECT_DATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MEM_OBJECT_DATA
, (°))

	)

1181 
	#sk_MEM_OBJECT_DATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MEM_OBJECT_DATA
, (°))

	)

1182 
	#sk_MIME_HEADER_√w
(
cmp
Ë
	`SKM_sk_√w
(
MIME_HEADER
, (cmp))

	)

1183 
	#sk_MIME_HEADER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MIME_HEADER
)

	)

1184 
	#sk_MIME_HEADER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MIME_HEADER
, (°))

	)

1185 
	#sk_MIME_HEADER_num
(
°
Ë
	`SKM_sk_num
(
MIME_HEADER
, (°))

	)

1186 
	#sk_MIME_HEADER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MIME_HEADER
, (°), (i))

	)

1187 
	#sk_MIME_HEADER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MIME_HEADER
, (°), (i), (vÆ))

	)

1188 
	#sk_MIME_HEADER_zîo
(
°
Ë
	`SKM_sk_zîo
(
MIME_HEADER
, (°))

	)

1189 
	#sk_MIME_HEADER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MIME_HEADER
, (°), (vÆ))

	)

1190 
	#sk_MIME_HEADER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MIME_HEADER
, (°), (vÆ))

	)

1191 
	#sk_MIME_HEADER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MIME_HEADER
, (°), (vÆ))

	)

1192 
	#sk_MIME_HEADER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MIME_HEADER
, (°), (vÆ))

	)

1193 
	#sk_MIME_HEADER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MIME_HEADER
, (°), (i))

	)

1194 
	#sk_MIME_HEADER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MIME_HEADER
, (°), (±r))

	)

1195 
	#sk_MIME_HEADER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MIME_HEADER
, (°), (vÆ), (i))

	)

1196 
	#sk_MIME_HEADER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MIME_HEADER
, (°), (cmp))

	)

1197 
	#sk_MIME_HEADER_dup
(
°
Ë
	`SKM_sk_dup
(
MIME_HEADER
, st)

	)

1198 
	#sk_MIME_HEADER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MIME_HEADER
, (°), (‰ì_func))

	)

1199 
	#sk_MIME_HEADER_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
MIME_HEADER
, (°), (c›y_func), (‰ì_func))

	)

1200 
	#sk_MIME_HEADER_shi·
(
°
Ë
	`SKM_sk_shi·
(
MIME_HEADER
, (°))

	)

1201 
	#sk_MIME_HEADER_p›
(
°
Ë
	`SKM_sk_p›
(
MIME_HEADER
, (°))

	)

1202 
	#sk_MIME_HEADER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MIME_HEADER
, (°))

	)

1203 
	#sk_MIME_HEADER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MIME_HEADER
, (°))

	)

1204 
	#sk_MIME_PARAM_√w
(
cmp
Ë
	`SKM_sk_√w
(
MIME_PARAM
, (cmp))

	)

1205 
	#sk_MIME_PARAM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MIME_PARAM
)

	)

1206 
	#sk_MIME_PARAM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MIME_PARAM
, (°))

	)

1207 
	#sk_MIME_PARAM_num
(
°
Ë
	`SKM_sk_num
(
MIME_PARAM
, (°))

	)

1208 
	#sk_MIME_PARAM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MIME_PARAM
, (°), (i))

	)

1209 
	#sk_MIME_PARAM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MIME_PARAM
, (°), (i), (vÆ))

	)

1210 
	#sk_MIME_PARAM_zîo
(
°
Ë
	`SKM_sk_zîo
(
MIME_PARAM
, (°))

	)

1211 
	#sk_MIME_PARAM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MIME_PARAM
, (°), (vÆ))

	)

1212 
	#sk_MIME_PARAM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MIME_PARAM
, (°), (vÆ))

	)

1213 
	#sk_MIME_PARAM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MIME_PARAM
, (°), (vÆ))

	)

1214 
	#sk_MIME_PARAM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MIME_PARAM
, (°), (vÆ))

	)

1215 
	#sk_MIME_PARAM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MIME_PARAM
, (°), (i))

	)

1216 
	#sk_MIME_PARAM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MIME_PARAM
, (°), (±r))

	)

1217 
	#sk_MIME_PARAM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MIME_PARAM
, (°), (vÆ), (i))

	)

1218 
	#sk_MIME_PARAM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MIME_PARAM
, (°), (cmp))

	)

1219 
	#sk_MIME_PARAM_dup
(
°
Ë
	`SKM_sk_dup
(
MIME_PARAM
, st)

	)

1220 
	#sk_MIME_PARAM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MIME_PARAM
, (°), (‰ì_func))

	)

1221 
	#sk_MIME_PARAM_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
MIME_PARAM
, (°), (c›y_func), (‰ì_func))

	)

1222 
	#sk_MIME_PARAM_shi·
(
°
Ë
	`SKM_sk_shi·
(
MIME_PARAM
, (°))

	)

1223 
	#sk_MIME_PARAM_p›
(
°
Ë
	`SKM_sk_p›
(
MIME_PARAM
, (°))

	)

1224 
	#sk_MIME_PARAM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MIME_PARAM
, (°))

	)

1225 
	#sk_MIME_PARAM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MIME_PARAM
, (°))

	)

1226 
	#sk_NAME_FUNCS_√w
(
cmp
Ë
	`SKM_sk_√w
(
NAME_FUNCS
, (cmp))

	)

1227 
	#sk_NAME_FUNCS_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
NAME_FUNCS
)

	)

1228 
	#sk_NAME_FUNCS_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
NAME_FUNCS
, (°))

	)

1229 
	#sk_NAME_FUNCS_num
(
°
Ë
	`SKM_sk_num
(
NAME_FUNCS
, (°))

	)

1230 
	#sk_NAME_FUNCS_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
NAME_FUNCS
, (°), (i))

	)

1231 
	#sk_NAME_FUNCS_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
NAME_FUNCS
, (°), (i), (vÆ))

	)

1232 
	#sk_NAME_FUNCS_zîo
(
°
Ë
	`SKM_sk_zîo
(
NAME_FUNCS
, (°))

	)

1233 
	#sk_NAME_FUNCS_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
NAME_FUNCS
, (°), (vÆ))

	)

1234 
	#sk_NAME_FUNCS_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
NAME_FUNCS
, (°), (vÆ))

	)

1235 
	#sk_NAME_FUNCS_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
NAME_FUNCS
, (°), (vÆ))

	)

1236 
	#sk_NAME_FUNCS_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
NAME_FUNCS
, (°), (vÆ))

	)

1237 
	#sk_NAME_FUNCS_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
NAME_FUNCS
, (°), (i))

	)

1238 
	#sk_NAME_FUNCS_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
NAME_FUNCS
, (°), (±r))

	)

1239 
	#sk_NAME_FUNCS_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
NAME_FUNCS
, (°), (vÆ), (i))

	)

1240 
	#sk_NAME_FUNCS_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
NAME_FUNCS
, (°), (cmp))

	)

1241 
	#sk_NAME_FUNCS_dup
(
°
Ë
	`SKM_sk_dup
(
NAME_FUNCS
, st)

	)

1242 
	#sk_NAME_FUNCS_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
NAME_FUNCS
, (°), (‰ì_func))

	)

1243 
	#sk_NAME_FUNCS_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
NAME_FUNCS
, (°), (c›y_func), (‰ì_func))

	)

1244 
	#sk_NAME_FUNCS_shi·
(
°
Ë
	`SKM_sk_shi·
(
NAME_FUNCS
, (°))

	)

1245 
	#sk_NAME_FUNCS_p›
(
°
Ë
	`SKM_sk_p›
(
NAME_FUNCS
, (°))

	)

1246 
	#sk_NAME_FUNCS_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
NAME_FUNCS
, (°))

	)

1247 
	#sk_NAME_FUNCS_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
NAME_FUNCS
, (°))

	)

1248 
	#sk_OCSP_CERTID_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_CERTID
, (cmp))

	)

1249 
	#sk_OCSP_CERTID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_CERTID
)

	)

1250 
	#sk_OCSP_CERTID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_CERTID
, (°))

	)

1251 
	#sk_OCSP_CERTID_num
(
°
Ë
	`SKM_sk_num
(
OCSP_CERTID
, (°))

	)

1252 
	#sk_OCSP_CERTID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_CERTID
, (°), (i))

	)

1253 
	#sk_OCSP_CERTID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_CERTID
, (°), (i), (vÆ))

	)

1254 
	#sk_OCSP_CERTID_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_CERTID
, (°))

	)

1255 
	#sk_OCSP_CERTID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_CERTID
, (°), (vÆ))

	)

1256 
	#sk_OCSP_CERTID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_CERTID
, (°), (vÆ))

	)

1257 
	#sk_OCSP_CERTID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_CERTID
, (°), (vÆ))

	)

1258 
	#sk_OCSP_CERTID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_CERTID
, (°), (vÆ))

	)

1259 
	#sk_OCSP_CERTID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_CERTID
, (°), (i))

	)

1260 
	#sk_OCSP_CERTID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_CERTID
, (°), (±r))

	)

1261 
	#sk_OCSP_CERTID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_CERTID
, (°), (vÆ), (i))

	)

1262 
	#sk_OCSP_CERTID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_CERTID
, (°), (cmp))

	)

1263 
	#sk_OCSP_CERTID_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_CERTID
, st)

	)

1264 
	#sk_OCSP_CERTID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_CERTID
, (°), (‰ì_func))

	)

1265 
	#sk_OCSP_CERTID_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
OCSP_CERTID
, (°), (c›y_func), (‰ì_func))

	)

1266 
	#sk_OCSP_CERTID_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_CERTID
, (°))

	)

1267 
	#sk_OCSP_CERTID_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_CERTID
, (°))

	)

1268 
	#sk_OCSP_CERTID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_CERTID
, (°))

	)

1269 
	#sk_OCSP_CERTID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_CERTID
, (°))

	)

1270 
	#sk_OCSP_ONEREQ_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_ONEREQ
, (cmp))

	)

1271 
	#sk_OCSP_ONEREQ_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_ONEREQ
)

	)

1272 
	#sk_OCSP_ONEREQ_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_ONEREQ
, (°))

	)

1273 
	#sk_OCSP_ONEREQ_num
(
°
Ë
	`SKM_sk_num
(
OCSP_ONEREQ
, (°))

	)

1274 
	#sk_OCSP_ONEREQ_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_ONEREQ
, (°), (i))

	)

1275 
	#sk_OCSP_ONEREQ_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_ONEREQ
, (°), (i), (vÆ))

	)

1276 
	#sk_OCSP_ONEREQ_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_ONEREQ
, (°))

	)

1277 
	#sk_OCSP_ONEREQ_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1278 
	#sk_OCSP_ONEREQ_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1279 
	#sk_OCSP_ONEREQ_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1280 
	#sk_OCSP_ONEREQ_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1281 
	#sk_OCSP_ONEREQ_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_ONEREQ
, (°), (i))

	)

1282 
	#sk_OCSP_ONEREQ_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_ONEREQ
, (°), (±r))

	)

1283 
	#sk_OCSP_ONEREQ_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_ONEREQ
, (°), (vÆ), (i))

	)

1284 
	#sk_OCSP_ONEREQ_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_ONEREQ
, (°), (cmp))

	)

1285 
	#sk_OCSP_ONEREQ_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_ONEREQ
, st)

	)

1286 
	#sk_OCSP_ONEREQ_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_ONEREQ
, (°), (‰ì_func))

	)

1287 
	#sk_OCSP_ONEREQ_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
OCSP_ONEREQ
, (°), (c›y_func), (‰ì_func))

	)

1288 
	#sk_OCSP_ONEREQ_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_ONEREQ
, (°))

	)

1289 
	#sk_OCSP_ONEREQ_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_ONEREQ
, (°))

	)

1290 
	#sk_OCSP_ONEREQ_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_ONEREQ
, (°))

	)

1291 
	#sk_OCSP_ONEREQ_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_ONEREQ
, (°))

	)

1292 
	#sk_OCSP_RESPID_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_RESPID
, (cmp))

	)

1293 
	#sk_OCSP_RESPID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_RESPID
)

	)

1294 
	#sk_OCSP_RESPID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_RESPID
, (°))

	)

1295 
	#sk_OCSP_RESPID_num
(
°
Ë
	`SKM_sk_num
(
OCSP_RESPID
, (°))

	)

1296 
	#sk_OCSP_RESPID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_RESPID
, (°), (i))

	)

1297 
	#sk_OCSP_RESPID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_RESPID
, (°), (i), (vÆ))

	)

1298 
	#sk_OCSP_RESPID_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_RESPID
, (°))

	)

1299 
	#sk_OCSP_RESPID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_RESPID
, (°), (vÆ))

	)

1300 
	#sk_OCSP_RESPID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_RESPID
, (°), (vÆ))

	)

1301 
	#sk_OCSP_RESPID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_RESPID
, (°), (vÆ))

	)

1302 
	#sk_OCSP_RESPID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_RESPID
, (°), (vÆ))

	)

1303 
	#sk_OCSP_RESPID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_RESPID
, (°), (i))

	)

1304 
	#sk_OCSP_RESPID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_RESPID
, (°), (±r))

	)

1305 
	#sk_OCSP_RESPID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_RESPID
, (°), (vÆ), (i))

	)

1306 
	#sk_OCSP_RESPID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_RESPID
, (°), (cmp))

	)

1307 
	#sk_OCSP_RESPID_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_RESPID
, st)

	)

1308 
	#sk_OCSP_RESPID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_RESPID
, (°), (‰ì_func))

	)

1309 
	#sk_OCSP_RESPID_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
OCSP_RESPID
, (°), (c›y_func), (‰ì_func))

	)

1310 
	#sk_OCSP_RESPID_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_RESPID
, (°))

	)

1311 
	#sk_OCSP_RESPID_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_RESPID
, (°))

	)

1312 
	#sk_OCSP_RESPID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_RESPID
, (°))

	)

1313 
	#sk_OCSP_RESPID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_RESPID
, (°))

	)

1314 
	#sk_OCSP_SINGLERESP_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_SINGLERESP
, (cmp))

	)

1315 
	#sk_OCSP_SINGLERESP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_SINGLERESP
)

	)

1316 
	#sk_OCSP_SINGLERESP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_SINGLERESP
, (°))

	)

1317 
	#sk_OCSP_SINGLERESP_num
(
°
Ë
	`SKM_sk_num
(
OCSP_SINGLERESP
, (°))

	)

1318 
	#sk_OCSP_SINGLERESP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_SINGLERESP
, (°), (i))

	)

1319 
	#sk_OCSP_SINGLERESP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_SINGLERESP
, (°), (i), (vÆ))

	)

1320 
	#sk_OCSP_SINGLERESP_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_SINGLERESP
, (°))

	)

1321 
	#sk_OCSP_SINGLERESP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1322 
	#sk_OCSP_SINGLERESP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1323 
	#sk_OCSP_SINGLERESP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1324 
	#sk_OCSP_SINGLERESP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1325 
	#sk_OCSP_SINGLERESP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_SINGLERESP
, (°), (i))

	)

1326 
	#sk_OCSP_SINGLERESP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_SINGLERESP
, (°), (±r))

	)

1327 
	#sk_OCSP_SINGLERESP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_SINGLERESP
, (°), (vÆ), (i))

	)

1328 
	#sk_OCSP_SINGLERESP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_SINGLERESP
, (°), (cmp))

	)

1329 
	#sk_OCSP_SINGLERESP_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_SINGLERESP
, st)

	)

1330 
	#sk_OCSP_SINGLERESP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_SINGLERESP
, (°), (‰ì_func))

	)

1331 
	#sk_OCSP_SINGLERESP_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
OCSP_SINGLERESP
, (°), (c›y_func), (‰ì_func))

	)

1332 
	#sk_OCSP_SINGLERESP_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_SINGLERESP
, (°))

	)

1333 
	#sk_OCSP_SINGLERESP_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_SINGLERESP
, (°))

	)

1334 
	#sk_OCSP_SINGLERESP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_SINGLERESP
, (°))

	)

1335 
	#sk_OCSP_SINGLERESP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_SINGLERESP
, (°))

	)

1336 
	#sk_PKCS12_SAFEBAG_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS12_SAFEBAG
, (cmp))

	)

1337 
	#sk_PKCS12_SAFEBAG_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS12_SAFEBAG
)

	)

1338 
	#sk_PKCS12_SAFEBAG_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS12_SAFEBAG
, (°))

	)

1339 
	#sk_PKCS12_SAFEBAG_num
(
°
Ë
	`SKM_sk_num
(
PKCS12_SAFEBAG
, (°))

	)

1340 
	#sk_PKCS12_SAFEBAG_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS12_SAFEBAG
, (°), (i))

	)

1341 
	#sk_PKCS12_SAFEBAG_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS12_SAFEBAG
, (°), (i), (vÆ))

	)

1342 
	#sk_PKCS12_SAFEBAG_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS12_SAFEBAG
, (°))

	)

1343 
	#sk_PKCS12_SAFEBAG_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1344 
	#sk_PKCS12_SAFEBAG_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1345 
	#sk_PKCS12_SAFEBAG_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1346 
	#sk_PKCS12_SAFEBAG_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1347 
	#sk_PKCS12_SAFEBAG_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS12_SAFEBAG
, (°), (i))

	)

1348 
	#sk_PKCS12_SAFEBAG_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS12_SAFEBAG
, (°), (±r))

	)

1349 
	#sk_PKCS12_SAFEBAG_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS12_SAFEBAG
, (°), (vÆ), (i))

	)

1350 
	#sk_PKCS12_SAFEBAG_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS12_SAFEBAG
, (°), (cmp))

	)

1351 
	#sk_PKCS12_SAFEBAG_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS12_SAFEBAG
, st)

	)

1352 
	#sk_PKCS12_SAFEBAG_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS12_SAFEBAG
, (°), (‰ì_func))

	)

1353 
	#sk_PKCS12_SAFEBAG_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
PKCS12_SAFEBAG
, (°), (c›y_func), (‰ì_func))

	)

1354 
	#sk_PKCS12_SAFEBAG_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS12_SAFEBAG
, (°))

	)

1355 
	#sk_PKCS12_SAFEBAG_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS12_SAFEBAG
, (°))

	)

1356 
	#sk_PKCS12_SAFEBAG_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS12_SAFEBAG
, (°))

	)

1357 
	#sk_PKCS12_SAFEBAG_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS12_SAFEBAG
, (°))

	)

1358 
	#sk_PKCS7_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS7
, (cmp))

	)

1359 
	#sk_PKCS7_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7
)

	)

1360 
	#sk_PKCS7_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7
, (°))

	)

1361 
	#sk_PKCS7_num
(
°
Ë
	`SKM_sk_num
(
PKCS7
, (°))

	)

1362 
	#sk_PKCS7_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7
, (°), (i))

	)

1363 
	#sk_PKCS7_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7
, (°), (i), (vÆ))

	)

1364 
	#sk_PKCS7_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7
, (°))

	)

1365 
	#sk_PKCS7_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7
, (°), (vÆ))

	)

1366 
	#sk_PKCS7_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7
, (°), (vÆ))

	)

1367 
	#sk_PKCS7_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7
, (°), (vÆ))

	)

1368 
	#sk_PKCS7_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7
, (°), (vÆ))

	)

1369 
	#sk_PKCS7_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7
, (°), (i))

	)

1370 
	#sk_PKCS7_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7
, (°), (±r))

	)

1371 
	#sk_PKCS7_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7
, (°), (vÆ), (i))

	)

1372 
	#sk_PKCS7_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7
, (°), (cmp))

	)

1373 
	#sk_PKCS7_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7
, st)

	)

1374 
	#sk_PKCS7_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7
, (°), (‰ì_func))

	)

1375 
	#sk_PKCS7_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
PKCS7
, (°), (c›y_func), (‰ì_func))

	)

1376 
	#sk_PKCS7_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7
, (°))

	)

1377 
	#sk_PKCS7_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7
, (°))

	)

1378 
	#sk_PKCS7_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7
, (°))

	)

1379 
	#sk_PKCS7_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7
, (°))

	)

1380 
	#sk_PKCS7_RECIP_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS7_RECIP_INFO
, (cmp))

	)

1381 
	#sk_PKCS7_RECIP_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7_RECIP_INFO
)

	)

1382 
	#sk_PKCS7_RECIP_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7_RECIP_INFO
, (°))

	)

1383 
	#sk_PKCS7_RECIP_INFO_num
(
°
Ë
	`SKM_sk_num
(
PKCS7_RECIP_INFO
, (°))

	)

1384 
	#sk_PKCS7_RECIP_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7_RECIP_INFO
, (°), (i))

	)

1385 
	#sk_PKCS7_RECIP_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7_RECIP_INFO
, (°), (i), (vÆ))

	)

1386 
	#sk_PKCS7_RECIP_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7_RECIP_INFO
, (°))

	)

1387 
	#sk_PKCS7_RECIP_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1388 
	#sk_PKCS7_RECIP_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1389 
	#sk_PKCS7_RECIP_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1390 
	#sk_PKCS7_RECIP_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1391 
	#sk_PKCS7_RECIP_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7_RECIP_INFO
, (°), (i))

	)

1392 
	#sk_PKCS7_RECIP_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7_RECIP_INFO
, (°), (±r))

	)

1393 
	#sk_PKCS7_RECIP_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7_RECIP_INFO
, (°), (vÆ), (i))

	)

1394 
	#sk_PKCS7_RECIP_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7_RECIP_INFO
, (°), (cmp))

	)

1395 
	#sk_PKCS7_RECIP_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7_RECIP_INFO
, st)

	)

1396 
	#sk_PKCS7_RECIP_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7_RECIP_INFO
, (°), (‰ì_func))

	)

1397 
	#sk_PKCS7_RECIP_INFO_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
PKCS7_RECIP_INFO
, (°), (c›y_func), (‰ì_func))

	)

1398 
	#sk_PKCS7_RECIP_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7_RECIP_INFO
, (°))

	)

1399 
	#sk_PKCS7_RECIP_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7_RECIP_INFO
, (°))

	)

1400 
	#sk_PKCS7_RECIP_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7_RECIP_INFO
, (°))

	)

1401 
	#sk_PKCS7_RECIP_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7_RECIP_INFO
, (°))

	)

1402 
	#sk_PKCS7_SIGNER_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS7_SIGNER_INFO
, (cmp))

	)

1403 
	#sk_PKCS7_SIGNER_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7_SIGNER_INFO
)

	)

1404 
	#sk_PKCS7_SIGNER_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7_SIGNER_INFO
, (°))

	)

1405 
	#sk_PKCS7_SIGNER_INFO_num
(
°
Ë
	`SKM_sk_num
(
PKCS7_SIGNER_INFO
, (°))

	)

1406 
	#sk_PKCS7_SIGNER_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7_SIGNER_INFO
, (°), (i))

	)

1407 
	#sk_PKCS7_SIGNER_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7_SIGNER_INFO
, (°), (i), (vÆ))

	)

1408 
	#sk_PKCS7_SIGNER_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7_SIGNER_INFO
, (°))

	)

1409 
	#sk_PKCS7_SIGNER_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1410 
	#sk_PKCS7_SIGNER_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1411 
	#sk_PKCS7_SIGNER_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1412 
	#sk_PKCS7_SIGNER_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1413 
	#sk_PKCS7_SIGNER_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7_SIGNER_INFO
, (°), (i))

	)

1414 
	#sk_PKCS7_SIGNER_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7_SIGNER_INFO
, (°), (±r))

	)

1415 
	#sk_PKCS7_SIGNER_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7_SIGNER_INFO
, (°), (vÆ), (i))

	)

1416 
	#sk_PKCS7_SIGNER_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7_SIGNER_INFO
, (°), (cmp))

	)

1417 
	#sk_PKCS7_SIGNER_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7_SIGNER_INFO
, st)

	)

1418 
	#sk_PKCS7_SIGNER_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7_SIGNER_INFO
, (°), (‰ì_func))

	)

1419 
	#sk_PKCS7_SIGNER_INFO_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
PKCS7_SIGNER_INFO
, (°), (c›y_func), (‰ì_func))

	)

1420 
	#sk_PKCS7_SIGNER_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7_SIGNER_INFO
, (°))

	)

1421 
	#sk_PKCS7_SIGNER_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7_SIGNER_INFO
, (°))

	)

1422 
	#sk_PKCS7_SIGNER_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7_SIGNER_INFO
, (°))

	)

1423 
	#sk_PKCS7_SIGNER_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7_SIGNER_INFO
, (°))

	)

1424 
	#sk_POLICYINFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
POLICYINFO
, (cmp))

	)

1425 
	#sk_POLICYINFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICYINFO
)

	)

1426 
	#sk_POLICYINFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICYINFO
, (°))

	)

1427 
	#sk_POLICYINFO_num
(
°
Ë
	`SKM_sk_num
(
POLICYINFO
, (°))

	)

1428 
	#sk_POLICYINFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICYINFO
, (°), (i))

	)

1429 
	#sk_POLICYINFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICYINFO
, (°), (i), (vÆ))

	)

1430 
	#sk_POLICYINFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICYINFO
, (°))

	)

1431 
	#sk_POLICYINFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICYINFO
, (°), (vÆ))

	)

1432 
	#sk_POLICYINFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICYINFO
, (°), (vÆ))

	)

1433 
	#sk_POLICYINFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICYINFO
, (°), (vÆ))

	)

1434 
	#sk_POLICYINFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICYINFO
, (°), (vÆ))

	)

1435 
	#sk_POLICYINFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICYINFO
, (°), (i))

	)

1436 
	#sk_POLICYINFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICYINFO
, (°), (±r))

	)

1437 
	#sk_POLICYINFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICYINFO
, (°), (vÆ), (i))

	)

1438 
	#sk_POLICYINFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICYINFO
, (°), (cmp))

	)

1439 
	#sk_POLICYINFO_dup
(
°
Ë
	`SKM_sk_dup
(
POLICYINFO
, st)

	)

1440 
	#sk_POLICYINFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICYINFO
, (°), (‰ì_func))

	)

1441 
	#sk_POLICYINFO_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
POLICYINFO
, (°), (c›y_func), (‰ì_func))

	)

1442 
	#sk_POLICYINFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICYINFO
, (°))

	)

1443 
	#sk_POLICYINFO_p›
(
°
Ë
	`SKM_sk_p›
(
POLICYINFO
, (°))

	)

1444 
	#sk_POLICYINFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICYINFO
, (°))

	)

1445 
	#sk_POLICYINFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICYINFO
, (°))

	)

1446 
	#sk_POLICYQUALINFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
POLICYQUALINFO
, (cmp))

	)

1447 
	#sk_POLICYQUALINFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICYQUALINFO
)

	)

1448 
	#sk_POLICYQUALINFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICYQUALINFO
, (°))

	)

1449 
	#sk_POLICYQUALINFO_num
(
°
Ë
	`SKM_sk_num
(
POLICYQUALINFO
, (°))

	)

1450 
	#sk_POLICYQUALINFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICYQUALINFO
, (°), (i))

	)

1451 
	#sk_POLICYQUALINFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICYQUALINFO
, (°), (i), (vÆ))

	)

1452 
	#sk_POLICYQUALINFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICYQUALINFO
, (°))

	)

1453 
	#sk_POLICYQUALINFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICYQUALINFO
, (°), (vÆ))

	)

1454 
	#sk_POLICYQUALINFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICYQUALINFO
, (°), (vÆ))

	)

1455 
	#sk_POLICYQUALINFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICYQUALINFO
, (°), (vÆ))

	)

1456 
	#sk_POLICYQUALINFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICYQUALINFO
, (°), (vÆ))

	)

1457 
	#sk_POLICYQUALINFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICYQUALINFO
, (°), (i))

	)

1458 
	#sk_POLICYQUALINFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICYQUALINFO
, (°), (±r))

	)

1459 
	#sk_POLICYQUALINFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICYQUALINFO
, (°), (vÆ), (i))

	)

1460 
	#sk_POLICYQUALINFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICYQUALINFO
, (°), (cmp))

	)

1461 
	#sk_POLICYQUALINFO_dup
(
°
Ë
	`SKM_sk_dup
(
POLICYQUALINFO
, st)

	)

1462 
	#sk_POLICYQUALINFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICYQUALINFO
, (°), (‰ì_func))

	)

1463 
	#sk_POLICYQUALINFO_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
POLICYQUALINFO
, (°), (c›y_func), (‰ì_func))

	)

1464 
	#sk_POLICYQUALINFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICYQUALINFO
, (°))

	)

1465 
	#sk_POLICYQUALINFO_p›
(
°
Ë
	`SKM_sk_p›
(
POLICYQUALINFO
, (°))

	)

1466 
	#sk_POLICYQUALINFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICYQUALINFO
, (°))

	)

1467 
	#sk_POLICYQUALINFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICYQUALINFO
, (°))

	)

1468 
	#sk_POLICY_MAPPING_√w
(
cmp
Ë
	`SKM_sk_√w
(
POLICY_MAPPING
, (cmp))

	)

1469 
	#sk_POLICY_MAPPING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICY_MAPPING
)

	)

1470 
	#sk_POLICY_MAPPING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICY_MAPPING
, (°))

	)

1471 
	#sk_POLICY_MAPPING_num
(
°
Ë
	`SKM_sk_num
(
POLICY_MAPPING
, (°))

	)

1472 
	#sk_POLICY_MAPPING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICY_MAPPING
, (°), (i))

	)

1473 
	#sk_POLICY_MAPPING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICY_MAPPING
, (°), (i), (vÆ))

	)

1474 
	#sk_POLICY_MAPPING_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICY_MAPPING
, (°))

	)

1475 
	#sk_POLICY_MAPPING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICY_MAPPING
, (°), (vÆ))

	)

1476 
	#sk_POLICY_MAPPING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICY_MAPPING
, (°), (vÆ))

	)

1477 
	#sk_POLICY_MAPPING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICY_MAPPING
, (°), (vÆ))

	)

1478 
	#sk_POLICY_MAPPING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICY_MAPPING
, (°), (vÆ))

	)

1479 
	#sk_POLICY_MAPPING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICY_MAPPING
, (°), (i))

	)

1480 
	#sk_POLICY_MAPPING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICY_MAPPING
, (°), (±r))

	)

1481 
	#sk_POLICY_MAPPING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICY_MAPPING
, (°), (vÆ), (i))

	)

1482 
	#sk_POLICY_MAPPING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICY_MAPPING
, (°), (cmp))

	)

1483 
	#sk_POLICY_MAPPING_dup
(
°
Ë
	`SKM_sk_dup
(
POLICY_MAPPING
, st)

	)

1484 
	#sk_POLICY_MAPPING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICY_MAPPING
, (°), (‰ì_func))

	)

1485 
	#sk_POLICY_MAPPING_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
POLICY_MAPPING
, (°), (c›y_func), (‰ì_func))

	)

1486 
	#sk_POLICY_MAPPING_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICY_MAPPING
, (°))

	)

1487 
	#sk_POLICY_MAPPING_p›
(
°
Ë
	`SKM_sk_p›
(
POLICY_MAPPING
, (°))

	)

1488 
	#sk_POLICY_MAPPING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICY_MAPPING
, (°))

	)

1489 
	#sk_POLICY_MAPPING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICY_MAPPING
, (°))

	)

1490 
	#sk_SCT_√w
(
cmp
Ë
	`SKM_sk_√w
(
SCT
, (cmp))

	)

1491 
	#sk_SCT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SCT
)

	)

1492 
	#sk_SCT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SCT
, (°))

	)

1493 
	#sk_SCT_num
(
°
Ë
	`SKM_sk_num
(
SCT
, (°))

	)

1494 
	#sk_SCT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SCT
, (°), (i))

	)

1495 
	#sk_SCT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SCT
, (°), (i), (vÆ))

	)

1496 
	#sk_SCT_zîo
(
°
Ë
	`SKM_sk_zîo
(
SCT
, (°))

	)

1497 
	#sk_SCT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SCT
, (°), (vÆ))

	)

1498 
	#sk_SCT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SCT
, (°), (vÆ))

	)

1499 
	#sk_SCT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SCT
, (°), (vÆ))

	)

1500 
	#sk_SCT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SCT
, (°), (vÆ))

	)

1501 
	#sk_SCT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SCT
, (°), (i))

	)

1502 
	#sk_SCT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SCT
, (°), (±r))

	)

1503 
	#sk_SCT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SCT
, (°), (vÆ), (i))

	)

1504 
	#sk_SCT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SCT
, (°), (cmp))

	)

1505 
	#sk_SCT_dup
(
°
Ë
	`SKM_sk_dup
(
SCT
, st)

	)

1506 
	#sk_SCT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SCT
, (°), (‰ì_func))

	)

1507 
	#sk_SCT_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
SCT
, (°), (c›y_func), (‰ì_func))

	)

1508 
	#sk_SCT_shi·
(
°
Ë
	`SKM_sk_shi·
(
SCT
, (°))

	)

1509 
	#sk_SCT_p›
(
°
Ë
	`SKM_sk_p›
(
SCT
, (°))

	)

1510 
	#sk_SCT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SCT
, (°))

	)

1511 
	#sk_SCT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SCT
, (°))

	)

1512 
	#sk_SRP_gN_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRP_gN
, (cmp))

	)

1513 
	#sk_SRP_gN_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRP_gN
)

	)

1514 
	#sk_SRP_gN_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRP_gN
, (°))

	)

1515 
	#sk_SRP_gN_num
(
°
Ë
	`SKM_sk_num
(
SRP_gN
, (°))

	)

1516 
	#sk_SRP_gN_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRP_gN
, (°), (i))

	)

1517 
	#sk_SRP_gN_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRP_gN
, (°), (i), (vÆ))

	)

1518 
	#sk_SRP_gN_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRP_gN
, (°))

	)

1519 
	#sk_SRP_gN_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRP_gN
, (°), (vÆ))

	)

1520 
	#sk_SRP_gN_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRP_gN
, (°), (vÆ))

	)

1521 
	#sk_SRP_gN_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRP_gN
, (°), (vÆ))

	)

1522 
	#sk_SRP_gN_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRP_gN
, (°), (vÆ))

	)

1523 
	#sk_SRP_gN_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRP_gN
, (°), (i))

	)

1524 
	#sk_SRP_gN_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRP_gN
, (°), (±r))

	)

1525 
	#sk_SRP_gN_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRP_gN
, (°), (vÆ), (i))

	)

1526 
	#sk_SRP_gN_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRP_gN
, (°), (cmp))

	)

1527 
	#sk_SRP_gN_dup
(
°
Ë
	`SKM_sk_dup
(
SRP_gN
, st)

	)

1528 
	#sk_SRP_gN_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRP_gN
, (°), (‰ì_func))

	)

1529 
	#sk_SRP_gN_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
SRP_gN
, (°), (c›y_func), (‰ì_func))

	)

1530 
	#sk_SRP_gN_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRP_gN
, (°))

	)

1531 
	#sk_SRP_gN_p›
(
°
Ë
	`SKM_sk_p›
(
SRP_gN
, (°))

	)

1532 
	#sk_SRP_gN_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRP_gN
, (°))

	)

1533 
	#sk_SRP_gN_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRP_gN
, (°))

	)

1534 
	#sk_SRP_gN_ˇche_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRP_gN_ˇche
, (cmp))

	)

1535 
	#sk_SRP_gN_ˇche_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRP_gN_ˇche
)

	)

1536 
	#sk_SRP_gN_ˇche_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRP_gN_ˇche
, (°))

	)

1537 
	#sk_SRP_gN_ˇche_num
(
°
Ë
	`SKM_sk_num
(
SRP_gN_ˇche
, (°))

	)

1538 
	#sk_SRP_gN_ˇche_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRP_gN_ˇche
, (°), (i))

	)

1539 
	#sk_SRP_gN_ˇche_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRP_gN_ˇche
, (°), (i), (vÆ))

	)

1540 
	#sk_SRP_gN_ˇche_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRP_gN_ˇche
, (°))

	)

1541 
	#sk_SRP_gN_ˇche_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1542 
	#sk_SRP_gN_ˇche_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1543 
	#sk_SRP_gN_ˇche_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1544 
	#sk_SRP_gN_ˇche_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1545 
	#sk_SRP_gN_ˇche_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRP_gN_ˇche
, (°), (i))

	)

1546 
	#sk_SRP_gN_ˇche_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRP_gN_ˇche
, (°), (±r))

	)

1547 
	#sk_SRP_gN_ˇche_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRP_gN_ˇche
, (°), (vÆ), (i))

	)

1548 
	#sk_SRP_gN_ˇche_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRP_gN_ˇche
, (°), (cmp))

	)

1549 
	#sk_SRP_gN_ˇche_dup
(
°
Ë
	`SKM_sk_dup
(
SRP_gN_ˇche
, st)

	)

1550 
	#sk_SRP_gN_ˇche_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRP_gN_ˇche
, (°), (‰ì_func))

	)

1551 
	#sk_SRP_gN_ˇche_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
SRP_gN_ˇche
, (°), (c›y_func), (‰ì_func))

	)

1552 
	#sk_SRP_gN_ˇche_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRP_gN_ˇche
, (°))

	)

1553 
	#sk_SRP_gN_ˇche_p›
(
°
Ë
	`SKM_sk_p›
(
SRP_gN_ˇche
, (°))

	)

1554 
	#sk_SRP_gN_ˇche_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRP_gN_ˇche
, (°))

	)

1555 
	#sk_SRP_gN_ˇche_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRP_gN_ˇche
, (°))

	)

1556 
	#sk_SRP_u£r_pwd_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRP_u£r_pwd
, (cmp))

	)

1557 
	#sk_SRP_u£r_pwd_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRP_u£r_pwd
)

	)

1558 
	#sk_SRP_u£r_pwd_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRP_u£r_pwd
, (°))

	)

1559 
	#sk_SRP_u£r_pwd_num
(
°
Ë
	`SKM_sk_num
(
SRP_u£r_pwd
, (°))

	)

1560 
	#sk_SRP_u£r_pwd_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRP_u£r_pwd
, (°), (i))

	)

1561 
	#sk_SRP_u£r_pwd_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRP_u£r_pwd
, (°), (i), (vÆ))

	)

1562 
	#sk_SRP_u£r_pwd_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRP_u£r_pwd
, (°))

	)

1563 
	#sk_SRP_u£r_pwd_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1564 
	#sk_SRP_u£r_pwd_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1565 
	#sk_SRP_u£r_pwd_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1566 
	#sk_SRP_u£r_pwd_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1567 
	#sk_SRP_u£r_pwd_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRP_u£r_pwd
, (°), (i))

	)

1568 
	#sk_SRP_u£r_pwd_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRP_u£r_pwd
, (°), (±r))

	)

1569 
	#sk_SRP_u£r_pwd_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRP_u£r_pwd
, (°), (vÆ), (i))

	)

1570 
	#sk_SRP_u£r_pwd_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRP_u£r_pwd
, (°), (cmp))

	)

1571 
	#sk_SRP_u£r_pwd_dup
(
°
Ë
	`SKM_sk_dup
(
SRP_u£r_pwd
, st)

	)

1572 
	#sk_SRP_u£r_pwd_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRP_u£r_pwd
, (°), (‰ì_func))

	)

1573 
	#sk_SRP_u£r_pwd_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
SRP_u£r_pwd
, (°), (c›y_func), (‰ì_func))

	)

1574 
	#sk_SRP_u£r_pwd_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRP_u£r_pwd
, (°))

	)

1575 
	#sk_SRP_u£r_pwd_p›
(
°
Ë
	`SKM_sk_p›
(
SRP_u£r_pwd
, (°))

	)

1576 
	#sk_SRP_u£r_pwd_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRP_u£r_pwd
, (°))

	)

1577 
	#sk_SRP_u£r_pwd_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRP_u£r_pwd
, (°))

	)

1578 
	#sk_SRTP_PROTECTION_PROFILE_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRTP_PROTECTION_PROFILE
, (cmp))

	)

1579 
	#sk_SRTP_PROTECTION_PROFILE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRTP_PROTECTION_PROFILE
)

	)

1580 
	#sk_SRTP_PROTECTION_PROFILE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1581 
	#sk_SRTP_PROTECTION_PROFILE_num
(
°
Ë
	`SKM_sk_num
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1582 
	#sk_SRTP_PROTECTION_PROFILE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRTP_PROTECTION_PROFILE
, (°), (i))

	)

1583 
	#sk_SRTP_PROTECTION_PROFILE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRTP_PROTECTION_PROFILE
, (°), (i), (vÆ))

	)

1584 
	#sk_SRTP_PROTECTION_PROFILE_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1585 
	#sk_SRTP_PROTECTION_PROFILE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1586 
	#sk_SRTP_PROTECTION_PROFILE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1587 
	#sk_SRTP_PROTECTION_PROFILE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1588 
	#sk_SRTP_PROTECTION_PROFILE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1589 
	#sk_SRTP_PROTECTION_PROFILE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRTP_PROTECTION_PROFILE
, (°), (i))

	)

1590 
	#sk_SRTP_PROTECTION_PROFILE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRTP_PROTECTION_PROFILE
, (°), (±r))

	)

1591 
	#sk_SRTP_PROTECTION_PROFILE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ), (i))

	)

1592 
	#sk_SRTP_PROTECTION_PROFILE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRTP_PROTECTION_PROFILE
, (°), (cmp))

	)

1593 
	#sk_SRTP_PROTECTION_PROFILE_dup
(
°
Ë
	`SKM_sk_dup
(
SRTP_PROTECTION_PROFILE
, st)

	)

1594 
	#sk_SRTP_PROTECTION_PROFILE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRTP_PROTECTION_PROFILE
, (°), (‰ì_func))

	)

1595 
	#sk_SRTP_PROTECTION_PROFILE_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
SRTP_PROTECTION_PROFILE
, (°), (c›y_func), (‰ì_func))

	)

1596 
	#sk_SRTP_PROTECTION_PROFILE_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1597 
	#sk_SRTP_PROTECTION_PROFILE_p›
(
°
Ë
	`SKM_sk_p›
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1598 
	#sk_SRTP_PROTECTION_PROFILE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1599 
	#sk_SRTP_PROTECTION_PROFILE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1600 
	#sk_SSL_CIPHER_√w
(
cmp
Ë
	`SKM_sk_√w
(
SSL_CIPHER
, (cmp))

	)

1601 
	#sk_SSL_CIPHER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SSL_CIPHER
)

	)

1602 
	#sk_SSL_CIPHER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SSL_CIPHER
, (°))

	)

1603 
	#sk_SSL_CIPHER_num
(
°
Ë
	`SKM_sk_num
(
SSL_CIPHER
, (°))

	)

1604 
	#sk_SSL_CIPHER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SSL_CIPHER
, (°), (i))

	)

1605 
	#sk_SSL_CIPHER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SSL_CIPHER
, (°), (i), (vÆ))

	)

1606 
	#sk_SSL_CIPHER_zîo
(
°
Ë
	`SKM_sk_zîo
(
SSL_CIPHER
, (°))

	)

1607 
	#sk_SSL_CIPHER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SSL_CIPHER
, (°), (vÆ))

	)

1608 
	#sk_SSL_CIPHER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SSL_CIPHER
, (°), (vÆ))

	)

1609 
	#sk_SSL_CIPHER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SSL_CIPHER
, (°), (vÆ))

	)

1610 
	#sk_SSL_CIPHER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SSL_CIPHER
, (°), (vÆ))

	)

1611 
	#sk_SSL_CIPHER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SSL_CIPHER
, (°), (i))

	)

1612 
	#sk_SSL_CIPHER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SSL_CIPHER
, (°), (±r))

	)

1613 
	#sk_SSL_CIPHER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SSL_CIPHER
, (°), (vÆ), (i))

	)

1614 
	#sk_SSL_CIPHER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SSL_CIPHER
, (°), (cmp))

	)

1615 
	#sk_SSL_CIPHER_dup
(
°
Ë
	`SKM_sk_dup
(
SSL_CIPHER
, st)

	)

1616 
	#sk_SSL_CIPHER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SSL_CIPHER
, (°), (‰ì_func))

	)

1617 
	#sk_SSL_CIPHER_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
SSL_CIPHER
, (°), (c›y_func), (‰ì_func))

	)

1618 
	#sk_SSL_CIPHER_shi·
(
°
Ë
	`SKM_sk_shi·
(
SSL_CIPHER
, (°))

	)

1619 
	#sk_SSL_CIPHER_p›
(
°
Ë
	`SKM_sk_p›
(
SSL_CIPHER
, (°))

	)

1620 
	#sk_SSL_CIPHER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SSL_CIPHER
, (°))

	)

1621 
	#sk_SSL_CIPHER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SSL_CIPHER
, (°))

	)

1622 
	#sk_SSL_COMP_√w
(
cmp
Ë
	`SKM_sk_√w
(
SSL_COMP
, (cmp))

	)

1623 
	#sk_SSL_COMP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SSL_COMP
)

	)

1624 
	#sk_SSL_COMP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SSL_COMP
, (°))

	)

1625 
	#sk_SSL_COMP_num
(
°
Ë
	`SKM_sk_num
(
SSL_COMP
, (°))

	)

1626 
	#sk_SSL_COMP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SSL_COMP
, (°), (i))

	)

1627 
	#sk_SSL_COMP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SSL_COMP
, (°), (i), (vÆ))

	)

1628 
	#sk_SSL_COMP_zîo
(
°
Ë
	`SKM_sk_zîo
(
SSL_COMP
, (°))

	)

1629 
	#sk_SSL_COMP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SSL_COMP
, (°), (vÆ))

	)

1630 
	#sk_SSL_COMP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SSL_COMP
, (°), (vÆ))

	)

1631 
	#sk_SSL_COMP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SSL_COMP
, (°), (vÆ))

	)

1632 
	#sk_SSL_COMP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SSL_COMP
, (°), (vÆ))

	)

1633 
	#sk_SSL_COMP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SSL_COMP
, (°), (i))

	)

1634 
	#sk_SSL_COMP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SSL_COMP
, (°), (±r))

	)

1635 
	#sk_SSL_COMP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SSL_COMP
, (°), (vÆ), (i))

	)

1636 
	#sk_SSL_COMP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SSL_COMP
, (°), (cmp))

	)

1637 
	#sk_SSL_COMP_dup
(
°
Ë
	`SKM_sk_dup
(
SSL_COMP
, st)

	)

1638 
	#sk_SSL_COMP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SSL_COMP
, (°), (‰ì_func))

	)

1639 
	#sk_SSL_COMP_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
SSL_COMP
, (°), (c›y_func), (‰ì_func))

	)

1640 
	#sk_SSL_COMP_shi·
(
°
Ë
	`SKM_sk_shi·
(
SSL_COMP
, (°))

	)

1641 
	#sk_SSL_COMP_p›
(
°
Ë
	`SKM_sk_p›
(
SSL_COMP
, (°))

	)

1642 
	#sk_SSL_COMP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SSL_COMP
, (°))

	)

1643 
	#sk_SSL_COMP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SSL_COMP
, (°))

	)

1644 
	#sk_STACK_OF_X509_NAME_ENTRY_√w
(
cmp
Ë
	`SKM_sk_√w
(
STACK_OF_X509_NAME_ENTRY
, (cmp))

	)

1645 
	#sk_STACK_OF_X509_NAME_ENTRY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
STACK_OF_X509_NAME_ENTRY
)

	)

1646 
	#sk_STACK_OF_X509_NAME_ENTRY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1647 
	#sk_STACK_OF_X509_NAME_ENTRY_num
(
°
Ë
	`SKM_sk_num
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1648 
	#sk_STACK_OF_X509_NAME_ENTRY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
STACK_OF_X509_NAME_ENTRY
, (°), (i))

	)

1649 
	#sk_STACK_OF_X509_NAME_ENTRY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
STACK_OF_X509_NAME_ENTRY
, (°), (i), (vÆ))

	)

1650 
	#sk_STACK_OF_X509_NAME_ENTRY_zîo
(
°
Ë
	`SKM_sk_zîo
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1651 
	#sk_STACK_OF_X509_NAME_ENTRY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1652 
	#sk_STACK_OF_X509_NAME_ENTRY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1653 
	#sk_STACK_OF_X509_NAME_ENTRY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1654 
	#sk_STACK_OF_X509_NAME_ENTRY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1655 
	#sk_STACK_OF_X509_NAME_ENTRY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
STACK_OF_X509_NAME_ENTRY
, (°), (i))

	)

1656 
	#sk_STACK_OF_X509_NAME_ENTRY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
STACK_OF_X509_NAME_ENTRY
, (°), (±r))

	)

1657 
	#sk_STACK_OF_X509_NAME_ENTRY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ), (i))

	)

1658 
	#sk_STACK_OF_X509_NAME_ENTRY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
STACK_OF_X509_NAME_ENTRY
, (°), (cmp))

	)

1659 
	#sk_STACK_OF_X509_NAME_ENTRY_dup
(
°
Ë
	`SKM_sk_dup
(
STACK_OF_X509_NAME_ENTRY
, st)

	)

1660 
	#sk_STACK_OF_X509_NAME_ENTRY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
STACK_OF_X509_NAME_ENTRY
, (°), (‰ì_func))

	)

1661 
	#sk_STACK_OF_X509_NAME_ENTRY_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
STACK_OF_X509_NAME_ENTRY
, (°), (c›y_func), (‰ì_func))

	)

1662 
	#sk_STACK_OF_X509_NAME_ENTRY_shi·
(
°
Ë
	`SKM_sk_shi·
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1663 
	#sk_STACK_OF_X509_NAME_ENTRY_p›
(
°
Ë
	`SKM_sk_p›
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1664 
	#sk_STACK_OF_X509_NAME_ENTRY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1665 
	#sk_STACK_OF_X509_NAME_ENTRY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1666 
	#sk_STORE_ATTR_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
STORE_ATTR_INFO
, (cmp))

	)

1667 
	#sk_STORE_ATTR_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
STORE_ATTR_INFO
)

	)

1668 
	#sk_STORE_ATTR_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
STORE_ATTR_INFO
, (°))

	)

1669 
	#sk_STORE_ATTR_INFO_num
(
°
Ë
	`SKM_sk_num
(
STORE_ATTR_INFO
, (°))

	)

1670 
	#sk_STORE_ATTR_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
STORE_ATTR_INFO
, (°), (i))

	)

1671 
	#sk_STORE_ATTR_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
STORE_ATTR_INFO
, (°), (i), (vÆ))

	)

1672 
	#sk_STORE_ATTR_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
STORE_ATTR_INFO
, (°))

	)

1673 
	#sk_STORE_ATTR_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1674 
	#sk_STORE_ATTR_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1675 
	#sk_STORE_ATTR_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1676 
	#sk_STORE_ATTR_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1677 
	#sk_STORE_ATTR_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
STORE_ATTR_INFO
, (°), (i))

	)

1678 
	#sk_STORE_ATTR_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
STORE_ATTR_INFO
, (°), (±r))

	)

1679 
	#sk_STORE_ATTR_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
STORE_ATTR_INFO
, (°), (vÆ), (i))

	)

1680 
	#sk_STORE_ATTR_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
STORE_ATTR_INFO
, (°), (cmp))

	)

1681 
	#sk_STORE_ATTR_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
STORE_ATTR_INFO
, st)

	)

1682 
	#sk_STORE_ATTR_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
STORE_ATTR_INFO
, (°), (‰ì_func))

	)

1683 
	#sk_STORE_ATTR_INFO_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
STORE_ATTR_INFO
, (°), (c›y_func), (‰ì_func))

	)

1684 
	#sk_STORE_ATTR_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
STORE_ATTR_INFO
, (°))

	)

1685 
	#sk_STORE_ATTR_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
STORE_ATTR_INFO
, (°))

	)

1686 
	#sk_STORE_ATTR_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
STORE_ATTR_INFO
, (°))

	)

1687 
	#sk_STORE_ATTR_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
STORE_ATTR_INFO
, (°))

	)

1688 
	#sk_STORE_OBJECT_√w
(
cmp
Ë
	`SKM_sk_√w
(
STORE_OBJECT
, (cmp))

	)

1689 
	#sk_STORE_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
STORE_OBJECT
)

	)

1690 
	#sk_STORE_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
STORE_OBJECT
, (°))

	)

1691 
	#sk_STORE_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
STORE_OBJECT
, (°))

	)

1692 
	#sk_STORE_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
STORE_OBJECT
, (°), (i))

	)

1693 
	#sk_STORE_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
STORE_OBJECT
, (°), (i), (vÆ))

	)

1694 
	#sk_STORE_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
STORE_OBJECT
, (°))

	)

1695 
	#sk_STORE_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
STORE_OBJECT
, (°), (vÆ))

	)

1696 
	#sk_STORE_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
STORE_OBJECT
, (°), (vÆ))

	)

1697 
	#sk_STORE_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
STORE_OBJECT
, (°), (vÆ))

	)

1698 
	#sk_STORE_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
STORE_OBJECT
, (°), (vÆ))

	)

1699 
	#sk_STORE_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
STORE_OBJECT
, (°), (i))

	)

1700 
	#sk_STORE_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
STORE_OBJECT
, (°), (±r))

	)

1701 
	#sk_STORE_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
STORE_OBJECT
, (°), (vÆ), (i))

	)

1702 
	#sk_STORE_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
STORE_OBJECT
, (°), (cmp))

	)

1703 
	#sk_STORE_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
STORE_OBJECT
, st)

	)

1704 
	#sk_STORE_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
STORE_OBJECT
, (°), (‰ì_func))

	)

1705 
	#sk_STORE_OBJECT_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
STORE_OBJECT
, (°), (c›y_func), (‰ì_func))

	)

1706 
	#sk_STORE_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
STORE_OBJECT
, (°))

	)

1707 
	#sk_STORE_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
STORE_OBJECT
, (°))

	)

1708 
	#sk_STORE_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
STORE_OBJECT
, (°))

	)

1709 
	#sk_STORE_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
STORE_OBJECT
, (°))

	)

1710 
	#sk_SXNETID_√w
(
cmp
Ë
	`SKM_sk_√w
(
SXNETID
, (cmp))

	)

1711 
	#sk_SXNETID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SXNETID
)

	)

1712 
	#sk_SXNETID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SXNETID
, (°))

	)

1713 
	#sk_SXNETID_num
(
°
Ë
	`SKM_sk_num
(
SXNETID
, (°))

	)

1714 
	#sk_SXNETID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SXNETID
, (°), (i))

	)

1715 
	#sk_SXNETID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SXNETID
, (°), (i), (vÆ))

	)

1716 
	#sk_SXNETID_zîo
(
°
Ë
	`SKM_sk_zîo
(
SXNETID
, (°))

	)

1717 
	#sk_SXNETID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SXNETID
, (°), (vÆ))

	)

1718 
	#sk_SXNETID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SXNETID
, (°), (vÆ))

	)

1719 
	#sk_SXNETID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SXNETID
, (°), (vÆ))

	)

1720 
	#sk_SXNETID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SXNETID
, (°), (vÆ))

	)

1721 
	#sk_SXNETID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SXNETID
, (°), (i))

	)

1722 
	#sk_SXNETID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SXNETID
, (°), (±r))

	)

1723 
	#sk_SXNETID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SXNETID
, (°), (vÆ), (i))

	)

1724 
	#sk_SXNETID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SXNETID
, (°), (cmp))

	)

1725 
	#sk_SXNETID_dup
(
°
Ë
	`SKM_sk_dup
(
SXNETID
, st)

	)

1726 
	#sk_SXNETID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SXNETID
, (°), (‰ì_func))

	)

1727 
	#sk_SXNETID_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
SXNETID
, (°), (c›y_func), (‰ì_func))

	)

1728 
	#sk_SXNETID_shi·
(
°
Ë
	`SKM_sk_shi·
(
SXNETID
, (°))

	)

1729 
	#sk_SXNETID_p›
(
°
Ë
	`SKM_sk_p›
(
SXNETID
, (°))

	)

1730 
	#sk_SXNETID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SXNETID
, (°))

	)

1731 
	#sk_SXNETID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SXNETID
, (°))

	)

1732 
	#sk_UI_STRING_√w
(
cmp
Ë
	`SKM_sk_√w
(
UI_STRING
, (cmp))

	)

1733 
	#sk_UI_STRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
UI_STRING
)

	)

1734 
	#sk_UI_STRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
UI_STRING
, (°))

	)

1735 
	#sk_UI_STRING_num
(
°
Ë
	`SKM_sk_num
(
UI_STRING
, (°))

	)

1736 
	#sk_UI_STRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
UI_STRING
, (°), (i))

	)

1737 
	#sk_UI_STRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
UI_STRING
, (°), (i), (vÆ))

	)

1738 
	#sk_UI_STRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
UI_STRING
, (°))

	)

1739 
	#sk_UI_STRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
UI_STRING
, (°), (vÆ))

	)

1740 
	#sk_UI_STRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
UI_STRING
, (°), (vÆ))

	)

1741 
	#sk_UI_STRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
UI_STRING
, (°), (vÆ))

	)

1742 
	#sk_UI_STRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
UI_STRING
, (°), (vÆ))

	)

1743 
	#sk_UI_STRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
UI_STRING
, (°), (i))

	)

1744 
	#sk_UI_STRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
UI_STRING
, (°), (±r))

	)

1745 
	#sk_UI_STRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
UI_STRING
, (°), (vÆ), (i))

	)

1746 
	#sk_UI_STRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
UI_STRING
, (°), (cmp))

	)

1747 
	#sk_UI_STRING_dup
(
°
Ë
	`SKM_sk_dup
(
UI_STRING
, st)

	)

1748 
	#sk_UI_STRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
UI_STRING
, (°), (‰ì_func))

	)

1749 
	#sk_UI_STRING_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
UI_STRING
, (°), (c›y_func), (‰ì_func))

	)

1750 
	#sk_UI_STRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
UI_STRING
, (°))

	)

1751 
	#sk_UI_STRING_p›
(
°
Ë
	`SKM_sk_p›
(
UI_STRING
, (°))

	)

1752 
	#sk_UI_STRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
UI_STRING
, (°))

	)

1753 
	#sk_UI_STRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
UI_STRING
, (°))

	)

1754 
	#sk_X509_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509
, (cmp))

	)

1755 
	#sk_X509_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509
)

	)

1756 
	#sk_X509_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509
, (°))

	)

1757 
	#sk_X509_num
(
°
Ë
	`SKM_sk_num
(
X509
, (°))

	)

1758 
	#sk_X509_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509
, (°), (i))

	)

1759 
	#sk_X509_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509
, (°), (i), (vÆ))

	)

1760 
	#sk_X509_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509
, (°))

	)

1761 
	#sk_X509_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509
, (°), (vÆ))

	)

1762 
	#sk_X509_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509
, (°), (vÆ))

	)

1763 
	#sk_X509_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509
, (°), (vÆ))

	)

1764 
	#sk_X509_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509
, (°), (vÆ))

	)

1765 
	#sk_X509_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509
, (°), (i))

	)

1766 
	#sk_X509_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509
, (°), (±r))

	)

1767 
	#sk_X509_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509
, (°), (vÆ), (i))

	)

1768 
	#sk_X509_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509
, (°), (cmp))

	)

1769 
	#sk_X509_dup
(
°
Ë
	`SKM_sk_dup
(
X509
, st)

	)

1770 
	#sk_X509_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509
, (°), (‰ì_func))

	)

1771 
	#sk_X509_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509
, (°), (c›y_func), (‰ì_func))

	)

1772 
	#sk_X509_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509
, (°))

	)

1773 
	#sk_X509_p›
(
°
Ë
	`SKM_sk_p›
(
X509
, (°))

	)

1774 
	#sk_X509_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509
, (°))

	)

1775 
	#sk_X509_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509
, (°))

	)

1776 
	#sk_X509V3_EXT_METHOD_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509V3_EXT_METHOD
, (cmp))

	)

1777 
	#sk_X509V3_EXT_METHOD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509V3_EXT_METHOD
)

	)

1778 
	#sk_X509V3_EXT_METHOD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509V3_EXT_METHOD
, (°))

	)

1779 
	#sk_X509V3_EXT_METHOD_num
(
°
Ë
	`SKM_sk_num
(
X509V3_EXT_METHOD
, (°))

	)

1780 
	#sk_X509V3_EXT_METHOD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509V3_EXT_METHOD
, (°), (i))

	)

1781 
	#sk_X509V3_EXT_METHOD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509V3_EXT_METHOD
, (°), (i), (vÆ))

	)

1782 
	#sk_X509V3_EXT_METHOD_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509V3_EXT_METHOD
, (°))

	)

1783 
	#sk_X509V3_EXT_METHOD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1784 
	#sk_X509V3_EXT_METHOD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1785 
	#sk_X509V3_EXT_METHOD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1786 
	#sk_X509V3_EXT_METHOD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1787 
	#sk_X509V3_EXT_METHOD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509V3_EXT_METHOD
, (°), (i))

	)

1788 
	#sk_X509V3_EXT_METHOD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509V3_EXT_METHOD
, (°), (±r))

	)

1789 
	#sk_X509V3_EXT_METHOD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509V3_EXT_METHOD
, (°), (vÆ), (i))

	)

1790 
	#sk_X509V3_EXT_METHOD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509V3_EXT_METHOD
, (°), (cmp))

	)

1791 
	#sk_X509V3_EXT_METHOD_dup
(
°
Ë
	`SKM_sk_dup
(
X509V3_EXT_METHOD
, st)

	)

1792 
	#sk_X509V3_EXT_METHOD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509V3_EXT_METHOD
, (°), (‰ì_func))

	)

1793 
	#sk_X509V3_EXT_METHOD_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509V3_EXT_METHOD
, (°), (c›y_func), (‰ì_func))

	)

1794 
	#sk_X509V3_EXT_METHOD_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509V3_EXT_METHOD
, (°))

	)

1795 
	#sk_X509V3_EXT_METHOD_p›
(
°
Ë
	`SKM_sk_p›
(
X509V3_EXT_METHOD
, (°))

	)

1796 
	#sk_X509V3_EXT_METHOD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509V3_EXT_METHOD
, (°))

	)

1797 
	#sk_X509V3_EXT_METHOD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509V3_EXT_METHOD
, (°))

	)

1798 
	#sk_X509_ALGOR_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_ALGOR
, (cmp))

	)

1799 
	#sk_X509_ALGOR_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_ALGOR
)

	)

1800 
	#sk_X509_ALGOR_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_ALGOR
, (°))

	)

1801 
	#sk_X509_ALGOR_num
(
°
Ë
	`SKM_sk_num
(
X509_ALGOR
, (°))

	)

1802 
	#sk_X509_ALGOR_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_ALGOR
, (°), (i))

	)

1803 
	#sk_X509_ALGOR_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_ALGOR
, (°), (i), (vÆ))

	)

1804 
	#sk_X509_ALGOR_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_ALGOR
, (°))

	)

1805 
	#sk_X509_ALGOR_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_ALGOR
, (°), (vÆ))

	)

1806 
	#sk_X509_ALGOR_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_ALGOR
, (°), (vÆ))

	)

1807 
	#sk_X509_ALGOR_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_ALGOR
, (°), (vÆ))

	)

1808 
	#sk_X509_ALGOR_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_ALGOR
, (°), (vÆ))

	)

1809 
	#sk_X509_ALGOR_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_ALGOR
, (°), (i))

	)

1810 
	#sk_X509_ALGOR_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_ALGOR
, (°), (±r))

	)

1811 
	#sk_X509_ALGOR_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_ALGOR
, (°), (vÆ), (i))

	)

1812 
	#sk_X509_ALGOR_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_ALGOR
, (°), (cmp))

	)

1813 
	#sk_X509_ALGOR_dup
(
°
Ë
	`SKM_sk_dup
(
X509_ALGOR
, st)

	)

1814 
	#sk_X509_ALGOR_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_ALGOR
, (°), (‰ì_func))

	)

1815 
	#sk_X509_ALGOR_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509_ALGOR
, (°), (c›y_func), (‰ì_func))

	)

1816 
	#sk_X509_ALGOR_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_ALGOR
, (°))

	)

1817 
	#sk_X509_ALGOR_p›
(
°
Ë
	`SKM_sk_p›
(
X509_ALGOR
, (°))

	)

1818 
	#sk_X509_ALGOR_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_ALGOR
, (°))

	)

1819 
	#sk_X509_ALGOR_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_ALGOR
, (°))

	)

1820 
	#sk_X509_ATTRIBUTE_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_ATTRIBUTE
, (cmp))

	)

1821 
	#sk_X509_ATTRIBUTE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_ATTRIBUTE
)

	)

1822 
	#sk_X509_ATTRIBUTE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_ATTRIBUTE
, (°))

	)

1823 
	#sk_X509_ATTRIBUTE_num
(
°
Ë
	`SKM_sk_num
(
X509_ATTRIBUTE
, (°))

	)

1824 
	#sk_X509_ATTRIBUTE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_ATTRIBUTE
, (°), (i))

	)

1825 
	#sk_X509_ATTRIBUTE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_ATTRIBUTE
, (°), (i), (vÆ))

	)

1826 
	#sk_X509_ATTRIBUTE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_ATTRIBUTE
, (°))

	)

1827 
	#sk_X509_ATTRIBUTE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1828 
	#sk_X509_ATTRIBUTE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1829 
	#sk_X509_ATTRIBUTE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1830 
	#sk_X509_ATTRIBUTE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1831 
	#sk_X509_ATTRIBUTE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_ATTRIBUTE
, (°), (i))

	)

1832 
	#sk_X509_ATTRIBUTE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_ATTRIBUTE
, (°), (±r))

	)

1833 
	#sk_X509_ATTRIBUTE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_ATTRIBUTE
, (°), (vÆ), (i))

	)

1834 
	#sk_X509_ATTRIBUTE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_ATTRIBUTE
, (°), (cmp))

	)

1835 
	#sk_X509_ATTRIBUTE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_ATTRIBUTE
, st)

	)

1836 
	#sk_X509_ATTRIBUTE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_ATTRIBUTE
, (°), (‰ì_func))

	)

1837 
	#sk_X509_ATTRIBUTE_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509_ATTRIBUTE
, (°), (c›y_func), (‰ì_func))

	)

1838 
	#sk_X509_ATTRIBUTE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_ATTRIBUTE
, (°))

	)

1839 
	#sk_X509_ATTRIBUTE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_ATTRIBUTE
, (°))

	)

1840 
	#sk_X509_ATTRIBUTE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_ATTRIBUTE
, (°))

	)

1841 
	#sk_X509_ATTRIBUTE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_ATTRIBUTE
, (°))

	)

1842 
	#sk_X509_CRL_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_CRL
, (cmp))

	)

1843 
	#sk_X509_CRL_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_CRL
)

	)

1844 
	#sk_X509_CRL_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_CRL
, (°))

	)

1845 
	#sk_X509_CRL_num
(
°
Ë
	`SKM_sk_num
(
X509_CRL
, (°))

	)

1846 
	#sk_X509_CRL_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_CRL
, (°), (i))

	)

1847 
	#sk_X509_CRL_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_CRL
, (°), (i), (vÆ))

	)

1848 
	#sk_X509_CRL_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_CRL
, (°))

	)

1849 
	#sk_X509_CRL_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_CRL
, (°), (vÆ))

	)

1850 
	#sk_X509_CRL_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_CRL
, (°), (vÆ))

	)

1851 
	#sk_X509_CRL_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_CRL
, (°), (vÆ))

	)

1852 
	#sk_X509_CRL_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_CRL
, (°), (vÆ))

	)

1853 
	#sk_X509_CRL_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_CRL
, (°), (i))

	)

1854 
	#sk_X509_CRL_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_CRL
, (°), (±r))

	)

1855 
	#sk_X509_CRL_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_CRL
, (°), (vÆ), (i))

	)

1856 
	#sk_X509_CRL_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_CRL
, (°), (cmp))

	)

1857 
	#sk_X509_CRL_dup
(
°
Ë
	`SKM_sk_dup
(
X509_CRL
, st)

	)

1858 
	#sk_X509_CRL_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_CRL
, (°), (‰ì_func))

	)

1859 
	#sk_X509_CRL_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509_CRL
, (°), (c›y_func), (‰ì_func))

	)

1860 
	#sk_X509_CRL_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_CRL
, (°))

	)

1861 
	#sk_X509_CRL_p›
(
°
Ë
	`SKM_sk_p›
(
X509_CRL
, (°))

	)

1862 
	#sk_X509_CRL_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_CRL
, (°))

	)

1863 
	#sk_X509_CRL_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_CRL
, (°))

	)

1864 
	#sk_X509_EXTENSION_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_EXTENSION
, (cmp))

	)

1865 
	#sk_X509_EXTENSION_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_EXTENSION
)

	)

1866 
	#sk_X509_EXTENSION_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_EXTENSION
, (°))

	)

1867 
	#sk_X509_EXTENSION_num
(
°
Ë
	`SKM_sk_num
(
X509_EXTENSION
, (°))

	)

1868 
	#sk_X509_EXTENSION_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_EXTENSION
, (°), (i))

	)

1869 
	#sk_X509_EXTENSION_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_EXTENSION
, (°), (i), (vÆ))

	)

1870 
	#sk_X509_EXTENSION_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_EXTENSION
, (°))

	)

1871 
	#sk_X509_EXTENSION_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_EXTENSION
, (°), (vÆ))

	)

1872 
	#sk_X509_EXTENSION_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_EXTENSION
, (°), (vÆ))

	)

1873 
	#sk_X509_EXTENSION_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_EXTENSION
, (°), (vÆ))

	)

1874 
	#sk_X509_EXTENSION_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_EXTENSION
, (°), (vÆ))

	)

1875 
	#sk_X509_EXTENSION_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_EXTENSION
, (°), (i))

	)

1876 
	#sk_X509_EXTENSION_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_EXTENSION
, (°), (±r))

	)

1877 
	#sk_X509_EXTENSION_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_EXTENSION
, (°), (vÆ), (i))

	)

1878 
	#sk_X509_EXTENSION_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_EXTENSION
, (°), (cmp))

	)

1879 
	#sk_X509_EXTENSION_dup
(
°
Ë
	`SKM_sk_dup
(
X509_EXTENSION
, st)

	)

1880 
	#sk_X509_EXTENSION_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_EXTENSION
, (°), (‰ì_func))

	)

1881 
	#sk_X509_EXTENSION_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509_EXTENSION
, (°), (c›y_func), (‰ì_func))

	)

1882 
	#sk_X509_EXTENSION_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_EXTENSION
, (°))

	)

1883 
	#sk_X509_EXTENSION_p›
(
°
Ë
	`SKM_sk_p›
(
X509_EXTENSION
, (°))

	)

1884 
	#sk_X509_EXTENSION_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_EXTENSION
, (°))

	)

1885 
	#sk_X509_EXTENSION_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_EXTENSION
, (°))

	)

1886 
	#sk_X509_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_INFO
, (cmp))

	)

1887 
	#sk_X509_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_INFO
)

	)

1888 
	#sk_X509_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_INFO
, (°))

	)

1889 
	#sk_X509_INFO_num
(
°
Ë
	`SKM_sk_num
(
X509_INFO
, (°))

	)

1890 
	#sk_X509_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_INFO
, (°), (i))

	)

1891 
	#sk_X509_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_INFO
, (°), (i), (vÆ))

	)

1892 
	#sk_X509_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_INFO
, (°))

	)

1893 
	#sk_X509_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_INFO
, (°), (vÆ))

	)

1894 
	#sk_X509_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_INFO
, (°), (vÆ))

	)

1895 
	#sk_X509_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_INFO
, (°), (vÆ))

	)

1896 
	#sk_X509_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_INFO
, (°), (vÆ))

	)

1897 
	#sk_X509_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_INFO
, (°), (i))

	)

1898 
	#sk_X509_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_INFO
, (°), (±r))

	)

1899 
	#sk_X509_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_INFO
, (°), (vÆ), (i))

	)

1900 
	#sk_X509_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_INFO
, (°), (cmp))

	)

1901 
	#sk_X509_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
X509_INFO
, st)

	)

1902 
	#sk_X509_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_INFO
, (°), (‰ì_func))

	)

1903 
	#sk_X509_INFO_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509_INFO
, (°), (c›y_func), (‰ì_func))

	)

1904 
	#sk_X509_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_INFO
, (°))

	)

1905 
	#sk_X509_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
X509_INFO
, (°))

	)

1906 
	#sk_X509_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_INFO
, (°))

	)

1907 
	#sk_X509_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_INFO
, (°))

	)

1908 
	#sk_X509_LOOKUP_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_LOOKUP
, (cmp))

	)

1909 
	#sk_X509_LOOKUP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_LOOKUP
)

	)

1910 
	#sk_X509_LOOKUP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_LOOKUP
, (°))

	)

1911 
	#sk_X509_LOOKUP_num
(
°
Ë
	`SKM_sk_num
(
X509_LOOKUP
, (°))

	)

1912 
	#sk_X509_LOOKUP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_LOOKUP
, (°), (i))

	)

1913 
	#sk_X509_LOOKUP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_LOOKUP
, (°), (i), (vÆ))

	)

1914 
	#sk_X509_LOOKUP_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_LOOKUP
, (°))

	)

1915 
	#sk_X509_LOOKUP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_LOOKUP
, (°), (vÆ))

	)

1916 
	#sk_X509_LOOKUP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_LOOKUP
, (°), (vÆ))

	)

1917 
	#sk_X509_LOOKUP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_LOOKUP
, (°), (vÆ))

	)

1918 
	#sk_X509_LOOKUP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_LOOKUP
, (°), (vÆ))

	)

1919 
	#sk_X509_LOOKUP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_LOOKUP
, (°), (i))

	)

1920 
	#sk_X509_LOOKUP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_LOOKUP
, (°), (±r))

	)

1921 
	#sk_X509_LOOKUP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_LOOKUP
, (°), (vÆ), (i))

	)

1922 
	#sk_X509_LOOKUP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_LOOKUP
, (°), (cmp))

	)

1923 
	#sk_X509_LOOKUP_dup
(
°
Ë
	`SKM_sk_dup
(
X509_LOOKUP
, st)

	)

1924 
	#sk_X509_LOOKUP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_LOOKUP
, (°), (‰ì_func))

	)

1925 
	#sk_X509_LOOKUP_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509_LOOKUP
, (°), (c›y_func), (‰ì_func))

	)

1926 
	#sk_X509_LOOKUP_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_LOOKUP
, (°))

	)

1927 
	#sk_X509_LOOKUP_p›
(
°
Ë
	`SKM_sk_p›
(
X509_LOOKUP
, (°))

	)

1928 
	#sk_X509_LOOKUP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_LOOKUP
, (°))

	)

1929 
	#sk_X509_LOOKUP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_LOOKUP
, (°))

	)

1930 
	#sk_X509_NAME_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_NAME
, (cmp))

	)

1931 
	#sk_X509_NAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_NAME
)

	)

1932 
	#sk_X509_NAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_NAME
, (°))

	)

1933 
	#sk_X509_NAME_num
(
°
Ë
	`SKM_sk_num
(
X509_NAME
, (°))

	)

1934 
	#sk_X509_NAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_NAME
, (°), (i))

	)

1935 
	#sk_X509_NAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_NAME
, (°), (i), (vÆ))

	)

1936 
	#sk_X509_NAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_NAME
, (°))

	)

1937 
	#sk_X509_NAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_NAME
, (°), (vÆ))

	)

1938 
	#sk_X509_NAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_NAME
, (°), (vÆ))

	)

1939 
	#sk_X509_NAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_NAME
, (°), (vÆ))

	)

1940 
	#sk_X509_NAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_NAME
, (°), (vÆ))

	)

1941 
	#sk_X509_NAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_NAME
, (°), (i))

	)

1942 
	#sk_X509_NAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_NAME
, (°), (±r))

	)

1943 
	#sk_X509_NAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_NAME
, (°), (vÆ), (i))

	)

1944 
	#sk_X509_NAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_NAME
, (°), (cmp))

	)

1945 
	#sk_X509_NAME_dup
(
°
Ë
	`SKM_sk_dup
(
X509_NAME
, st)

	)

1946 
	#sk_X509_NAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_NAME
, (°), (‰ì_func))

	)

1947 
	#sk_X509_NAME_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509_NAME
, (°), (c›y_func), (‰ì_func))

	)

1948 
	#sk_X509_NAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_NAME
, (°))

	)

1949 
	#sk_X509_NAME_p›
(
°
Ë
	`SKM_sk_p›
(
X509_NAME
, (°))

	)

1950 
	#sk_X509_NAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_NAME
, (°))

	)

1951 
	#sk_X509_NAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_NAME
, (°))

	)

1952 
	#sk_X509_NAME_ENTRY_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_NAME_ENTRY
, (cmp))

	)

1953 
	#sk_X509_NAME_ENTRY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_NAME_ENTRY
)

	)

1954 
	#sk_X509_NAME_ENTRY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_NAME_ENTRY
, (°))

	)

1955 
	#sk_X509_NAME_ENTRY_num
(
°
Ë
	`SKM_sk_num
(
X509_NAME_ENTRY
, (°))

	)

1956 
	#sk_X509_NAME_ENTRY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_NAME_ENTRY
, (°), (i))

	)

1957 
	#sk_X509_NAME_ENTRY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_NAME_ENTRY
, (°), (i), (vÆ))

	)

1958 
	#sk_X509_NAME_ENTRY_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_NAME_ENTRY
, (°))

	)

1959 
	#sk_X509_NAME_ENTRY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1960 
	#sk_X509_NAME_ENTRY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1961 
	#sk_X509_NAME_ENTRY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1962 
	#sk_X509_NAME_ENTRY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1963 
	#sk_X509_NAME_ENTRY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_NAME_ENTRY
, (°), (i))

	)

1964 
	#sk_X509_NAME_ENTRY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_NAME_ENTRY
, (°), (±r))

	)

1965 
	#sk_X509_NAME_ENTRY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_NAME_ENTRY
, (°), (vÆ), (i))

	)

1966 
	#sk_X509_NAME_ENTRY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_NAME_ENTRY
, (°), (cmp))

	)

1967 
	#sk_X509_NAME_ENTRY_dup
(
°
Ë
	`SKM_sk_dup
(
X509_NAME_ENTRY
, st)

	)

1968 
	#sk_X509_NAME_ENTRY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_NAME_ENTRY
, (°), (‰ì_func))

	)

1969 
	#sk_X509_NAME_ENTRY_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509_NAME_ENTRY
, (°), (c›y_func), (‰ì_func))

	)

1970 
	#sk_X509_NAME_ENTRY_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_NAME_ENTRY
, (°))

	)

1971 
	#sk_X509_NAME_ENTRY_p›
(
°
Ë
	`SKM_sk_p›
(
X509_NAME_ENTRY
, (°))

	)

1972 
	#sk_X509_NAME_ENTRY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_NAME_ENTRY
, (°))

	)

1973 
	#sk_X509_NAME_ENTRY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_NAME_ENTRY
, (°))

	)

1974 
	#sk_X509_OBJECT_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_OBJECT
, (cmp))

	)

1975 
	#sk_X509_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_OBJECT
)

	)

1976 
	#sk_X509_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_OBJECT
, (°))

	)

1977 
	#sk_X509_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
X509_OBJECT
, (°))

	)

1978 
	#sk_X509_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_OBJECT
, (°), (i))

	)

1979 
	#sk_X509_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_OBJECT
, (°), (i), (vÆ))

	)

1980 
	#sk_X509_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_OBJECT
, (°))

	)

1981 
	#sk_X509_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_OBJECT
, (°), (vÆ))

	)

1982 
	#sk_X509_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_OBJECT
, (°), (vÆ))

	)

1983 
	#sk_X509_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_OBJECT
, (°), (vÆ))

	)

1984 
	#sk_X509_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_OBJECT
, (°), (vÆ))

	)

1985 
	#sk_X509_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_OBJECT
, (°), (i))

	)

1986 
	#sk_X509_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_OBJECT
, (°), (±r))

	)

1987 
	#sk_X509_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_OBJECT
, (°), (vÆ), (i))

	)

1988 
	#sk_X509_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_OBJECT
, (°), (cmp))

	)

1989 
	#sk_X509_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
X509_OBJECT
, st)

	)

1990 
	#sk_X509_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_OBJECT
, (°), (‰ì_func))

	)

1991 
	#sk_X509_OBJECT_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509_OBJECT
, (°), (c›y_func), (‰ì_func))

	)

1992 
	#sk_X509_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_OBJECT
, (°))

	)

1993 
	#sk_X509_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
X509_OBJECT
, (°))

	)

1994 
	#sk_X509_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_OBJECT
, (°))

	)

1995 
	#sk_X509_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_OBJECT
, (°))

	)

1996 
	#sk_X509_POLICY_DATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_POLICY_DATA
, (cmp))

	)

1997 
	#sk_X509_POLICY_DATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_POLICY_DATA
)

	)

1998 
	#sk_X509_POLICY_DATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_POLICY_DATA
, (°))

	)

1999 
	#sk_X509_POLICY_DATA_num
(
°
Ë
	`SKM_sk_num
(
X509_POLICY_DATA
, (°))

	)

2000 
	#sk_X509_POLICY_DATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_POLICY_DATA
, (°), (i))

	)

2001 
	#sk_X509_POLICY_DATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_POLICY_DATA
, (°), (i), (vÆ))

	)

2002 
	#sk_X509_POLICY_DATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_POLICY_DATA
, (°))

	)

2003 
	#sk_X509_POLICY_DATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_POLICY_DATA
, (°), (vÆ))

	)

2004 
	#sk_X509_POLICY_DATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_POLICY_DATA
, (°), (vÆ))

	)

2005 
	#sk_X509_POLICY_DATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_POLICY_DATA
, (°), (vÆ))

	)

2006 
	#sk_X509_POLICY_DATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_POLICY_DATA
, (°), (vÆ))

	)

2007 
	#sk_X509_POLICY_DATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_POLICY_DATA
, (°), (i))

	)

2008 
	#sk_X509_POLICY_DATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_POLICY_DATA
, (°), (±r))

	)

2009 
	#sk_X509_POLICY_DATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_POLICY_DATA
, (°), (vÆ), (i))

	)

2010 
	#sk_X509_POLICY_DATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_POLICY_DATA
, (°), (cmp))

	)

2011 
	#sk_X509_POLICY_DATA_dup
(
°
Ë
	`SKM_sk_dup
(
X509_POLICY_DATA
, st)

	)

2012 
	#sk_X509_POLICY_DATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_POLICY_DATA
, (°), (‰ì_func))

	)

2013 
	#sk_X509_POLICY_DATA_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509_POLICY_DATA
, (°), (c›y_func), (‰ì_func))

	)

2014 
	#sk_X509_POLICY_DATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_POLICY_DATA
, (°))

	)

2015 
	#sk_X509_POLICY_DATA_p›
(
°
Ë
	`SKM_sk_p›
(
X509_POLICY_DATA
, (°))

	)

2016 
	#sk_X509_POLICY_DATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_POLICY_DATA
, (°))

	)

2017 
	#sk_X509_POLICY_DATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_POLICY_DATA
, (°))

	)

2018 
	#sk_X509_POLICY_NODE_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_POLICY_NODE
, (cmp))

	)

2019 
	#sk_X509_POLICY_NODE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_POLICY_NODE
)

	)

2020 
	#sk_X509_POLICY_NODE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_POLICY_NODE
, (°))

	)

2021 
	#sk_X509_POLICY_NODE_num
(
°
Ë
	`SKM_sk_num
(
X509_POLICY_NODE
, (°))

	)

2022 
	#sk_X509_POLICY_NODE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_POLICY_NODE
, (°), (i))

	)

2023 
	#sk_X509_POLICY_NODE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_POLICY_NODE
, (°), (i), (vÆ))

	)

2024 
	#sk_X509_POLICY_NODE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_POLICY_NODE
, (°))

	)

2025 
	#sk_X509_POLICY_NODE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_POLICY_NODE
, (°), (vÆ))

	)

2026 
	#sk_X509_POLICY_NODE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_POLICY_NODE
, (°), (vÆ))

	)

2027 
	#sk_X509_POLICY_NODE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_POLICY_NODE
, (°), (vÆ))

	)

2028 
	#sk_X509_POLICY_NODE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_POLICY_NODE
, (°), (vÆ))

	)

2029 
	#sk_X509_POLICY_NODE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_POLICY_NODE
, (°), (i))

	)

2030 
	#sk_X509_POLICY_NODE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_POLICY_NODE
, (°), (±r))

	)

2031 
	#sk_X509_POLICY_NODE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_POLICY_NODE
, (°), (vÆ), (i))

	)

2032 
	#sk_X509_POLICY_NODE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_POLICY_NODE
, (°), (cmp))

	)

2033 
	#sk_X509_POLICY_NODE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_POLICY_NODE
, st)

	)

2034 
	#sk_X509_POLICY_NODE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_POLICY_NODE
, (°), (‰ì_func))

	)

2035 
	#sk_X509_POLICY_NODE_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509_POLICY_NODE
, (°), (c›y_func), (‰ì_func))

	)

2036 
	#sk_X509_POLICY_NODE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_POLICY_NODE
, (°))

	)

2037 
	#sk_X509_POLICY_NODE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_POLICY_NODE
, (°))

	)

2038 
	#sk_X509_POLICY_NODE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_POLICY_NODE
, (°))

	)

2039 
	#sk_X509_POLICY_NODE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_POLICY_NODE
, (°))

	)

2040 
	#sk_X509_PURPOSE_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_PURPOSE
, (cmp))

	)

2041 
	#sk_X509_PURPOSE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_PURPOSE
)

	)

2042 
	#sk_X509_PURPOSE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_PURPOSE
, (°))

	)

2043 
	#sk_X509_PURPOSE_num
(
°
Ë
	`SKM_sk_num
(
X509_PURPOSE
, (°))

	)

2044 
	#sk_X509_PURPOSE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_PURPOSE
, (°), (i))

	)

2045 
	#sk_X509_PURPOSE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_PURPOSE
, (°), (i), (vÆ))

	)

2046 
	#sk_X509_PURPOSE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_PURPOSE
, (°))

	)

2047 
	#sk_X509_PURPOSE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_PURPOSE
, (°), (vÆ))

	)

2048 
	#sk_X509_PURPOSE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_PURPOSE
, (°), (vÆ))

	)

2049 
	#sk_X509_PURPOSE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_PURPOSE
, (°), (vÆ))

	)

2050 
	#sk_X509_PURPOSE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_PURPOSE
, (°), (vÆ))

	)

2051 
	#sk_X509_PURPOSE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_PURPOSE
, (°), (i))

	)

2052 
	#sk_X509_PURPOSE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_PURPOSE
, (°), (±r))

	)

2053 
	#sk_X509_PURPOSE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_PURPOSE
, (°), (vÆ), (i))

	)

2054 
	#sk_X509_PURPOSE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_PURPOSE
, (°), (cmp))

	)

2055 
	#sk_X509_PURPOSE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_PURPOSE
, st)

	)

2056 
	#sk_X509_PURPOSE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_PURPOSE
, (°), (‰ì_func))

	)

2057 
	#sk_X509_PURPOSE_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509_PURPOSE
, (°), (c›y_func), (‰ì_func))

	)

2058 
	#sk_X509_PURPOSE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_PURPOSE
, (°))

	)

2059 
	#sk_X509_PURPOSE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_PURPOSE
, (°))

	)

2060 
	#sk_X509_PURPOSE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_PURPOSE
, (°))

	)

2061 
	#sk_X509_PURPOSE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_PURPOSE
, (°))

	)

2062 
	#sk_X509_REVOKED_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_REVOKED
, (cmp))

	)

2063 
	#sk_X509_REVOKED_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_REVOKED
)

	)

2064 
	#sk_X509_REVOKED_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_REVOKED
, (°))

	)

2065 
	#sk_X509_REVOKED_num
(
°
Ë
	`SKM_sk_num
(
X509_REVOKED
, (°))

	)

2066 
	#sk_X509_REVOKED_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_REVOKED
, (°), (i))

	)

2067 
	#sk_X509_REVOKED_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_REVOKED
, (°), (i), (vÆ))

	)

2068 
	#sk_X509_REVOKED_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_REVOKED
, (°))

	)

2069 
	#sk_X509_REVOKED_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_REVOKED
, (°), (vÆ))

	)

2070 
	#sk_X509_REVOKED_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_REVOKED
, (°), (vÆ))

	)

2071 
	#sk_X509_REVOKED_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_REVOKED
, (°), (vÆ))

	)

2072 
	#sk_X509_REVOKED_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_REVOKED
, (°), (vÆ))

	)

2073 
	#sk_X509_REVOKED_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_REVOKED
, (°), (i))

	)

2074 
	#sk_X509_REVOKED_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_REVOKED
, (°), (±r))

	)

2075 
	#sk_X509_REVOKED_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_REVOKED
, (°), (vÆ), (i))

	)

2076 
	#sk_X509_REVOKED_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_REVOKED
, (°), (cmp))

	)

2077 
	#sk_X509_REVOKED_dup
(
°
Ë
	`SKM_sk_dup
(
X509_REVOKED
, st)

	)

2078 
	#sk_X509_REVOKED_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_REVOKED
, (°), (‰ì_func))

	)

2079 
	#sk_X509_REVOKED_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509_REVOKED
, (°), (c›y_func), (‰ì_func))

	)

2080 
	#sk_X509_REVOKED_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_REVOKED
, (°))

	)

2081 
	#sk_X509_REVOKED_p›
(
°
Ë
	`SKM_sk_p›
(
X509_REVOKED
, (°))

	)

2082 
	#sk_X509_REVOKED_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_REVOKED
, (°))

	)

2083 
	#sk_X509_REVOKED_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_REVOKED
, (°))

	)

2084 
	#sk_X509_TRUST_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_TRUST
, (cmp))

	)

2085 
	#sk_X509_TRUST_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_TRUST
)

	)

2086 
	#sk_X509_TRUST_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_TRUST
, (°))

	)

2087 
	#sk_X509_TRUST_num
(
°
Ë
	`SKM_sk_num
(
X509_TRUST
, (°))

	)

2088 
	#sk_X509_TRUST_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_TRUST
, (°), (i))

	)

2089 
	#sk_X509_TRUST_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_TRUST
, (°), (i), (vÆ))

	)

2090 
	#sk_X509_TRUST_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_TRUST
, (°))

	)

2091 
	#sk_X509_TRUST_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_TRUST
, (°), (vÆ))

	)

2092 
	#sk_X509_TRUST_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_TRUST
, (°), (vÆ))

	)

2093 
	#sk_X509_TRUST_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_TRUST
, (°), (vÆ))

	)

2094 
	#sk_X509_TRUST_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_TRUST
, (°), (vÆ))

	)

2095 
	#sk_X509_TRUST_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_TRUST
, (°), (i))

	)

2096 
	#sk_X509_TRUST_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_TRUST
, (°), (±r))

	)

2097 
	#sk_X509_TRUST_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_TRUST
, (°), (vÆ), (i))

	)

2098 
	#sk_X509_TRUST_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_TRUST
, (°), (cmp))

	)

2099 
	#sk_X509_TRUST_dup
(
°
Ë
	`SKM_sk_dup
(
X509_TRUST
, st)

	)

2100 
	#sk_X509_TRUST_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_TRUST
, (°), (‰ì_func))

	)

2101 
	#sk_X509_TRUST_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509_TRUST
, (°), (c›y_func), (‰ì_func))

	)

2102 
	#sk_X509_TRUST_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_TRUST
, (°))

	)

2103 
	#sk_X509_TRUST_p›
(
°
Ë
	`SKM_sk_p›
(
X509_TRUST
, (°))

	)

2104 
	#sk_X509_TRUST_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_TRUST
, (°))

	)

2105 
	#sk_X509_TRUST_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_TRUST
, (°))

	)

2106 
	#sk_X509_VERIFY_PARAM_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_VERIFY_PARAM
, (cmp))

	)

2107 
	#sk_X509_VERIFY_PARAM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_VERIFY_PARAM
)

	)

2108 
	#sk_X509_VERIFY_PARAM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_VERIFY_PARAM
, (°))

	)

2109 
	#sk_X509_VERIFY_PARAM_num
(
°
Ë
	`SKM_sk_num
(
X509_VERIFY_PARAM
, (°))

	)

2110 
	#sk_X509_VERIFY_PARAM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_VERIFY_PARAM
, (°), (i))

	)

2111 
	#sk_X509_VERIFY_PARAM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_VERIFY_PARAM
, (°), (i), (vÆ))

	)

2112 
	#sk_X509_VERIFY_PARAM_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_VERIFY_PARAM
, (°))

	)

2113 
	#sk_X509_VERIFY_PARAM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2114 
	#sk_X509_VERIFY_PARAM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2115 
	#sk_X509_VERIFY_PARAM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2116 
	#sk_X509_VERIFY_PARAM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2117 
	#sk_X509_VERIFY_PARAM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_VERIFY_PARAM
, (°), (i))

	)

2118 
	#sk_X509_VERIFY_PARAM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_VERIFY_PARAM
, (°), (±r))

	)

2119 
	#sk_X509_VERIFY_PARAM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_VERIFY_PARAM
, (°), (vÆ), (i))

	)

2120 
	#sk_X509_VERIFY_PARAM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_VERIFY_PARAM
, (°), (cmp))

	)

2121 
	#sk_X509_VERIFY_PARAM_dup
(
°
Ë
	`SKM_sk_dup
(
X509_VERIFY_PARAM
, st)

	)

2122 
	#sk_X509_VERIFY_PARAM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_VERIFY_PARAM
, (°), (‰ì_func))

	)

2123 
	#sk_X509_VERIFY_PARAM_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
X509_VERIFY_PARAM
, (°), (c›y_func), (‰ì_func))

	)

2124 
	#sk_X509_VERIFY_PARAM_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_VERIFY_PARAM
, (°))

	)

2125 
	#sk_X509_VERIFY_PARAM_p›
(
°
Ë
	`SKM_sk_p›
(
X509_VERIFY_PARAM
, (°))

	)

2126 
	#sk_X509_VERIFY_PARAM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_VERIFY_PARAM
, (°))

	)

2127 
	#sk_X509_VERIFY_PARAM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_VERIFY_PARAM
, (°))

	)

2128 
	#sk_nid_åùÀ_√w
(
cmp
Ë
	`SKM_sk_√w
(
nid_åùÀ
, (cmp))

	)

2129 
	#sk_nid_åùÀ_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
nid_åùÀ
)

	)

2130 
	#sk_nid_åùÀ_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
nid_åùÀ
, (°))

	)

2131 
	#sk_nid_åùÀ_num
(
°
Ë
	`SKM_sk_num
(
nid_åùÀ
, (°))

	)

2132 
	#sk_nid_åùÀ_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
nid_åùÀ
, (°), (i))

	)

2133 
	#sk_nid_åùÀ_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
nid_åùÀ
, (°), (i), (vÆ))

	)

2134 
	#sk_nid_åùÀ_zîo
(
°
Ë
	`SKM_sk_zîo
(
nid_åùÀ
, (°))

	)

2135 
	#sk_nid_åùÀ_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
nid_åùÀ
, (°), (vÆ))

	)

2136 
	#sk_nid_åùÀ_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
nid_åùÀ
, (°), (vÆ))

	)

2137 
	#sk_nid_åùÀ_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
nid_åùÀ
, (°), (vÆ))

	)

2138 
	#sk_nid_åùÀ_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
nid_åùÀ
, (°), (vÆ))

	)

2139 
	#sk_nid_åùÀ_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
nid_åùÀ
, (°), (i))

	)

2140 
	#sk_nid_åùÀ_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
nid_åùÀ
, (°), (±r))

	)

2141 
	#sk_nid_åùÀ_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
nid_åùÀ
, (°), (vÆ), (i))

	)

2142 
	#sk_nid_åùÀ_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
nid_åùÀ
, (°), (cmp))

	)

2143 
	#sk_nid_åùÀ_dup
(
°
Ë
	`SKM_sk_dup
(
nid_åùÀ
, st)

	)

2144 
	#sk_nid_åùÀ_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
nid_åùÀ
, (°), (‰ì_func))

	)

2145 
	#sk_nid_åùÀ_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(
nid_åùÀ
, (°), (c›y_func), (‰ì_func))

	)

2146 
	#sk_nid_åùÀ_shi·
(
°
Ë
	`SKM_sk_shi·
(
nid_åùÀ
, (°))

	)

2147 
	#sk_nid_åùÀ_p›
(
°
Ë
	`SKM_sk_p›
(
nid_åùÀ
, (°))

	)

2148 
	#sk_nid_åùÀ_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
nid_åùÀ
, (°))

	)

2149 
	#sk_nid_åùÀ_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
nid_åùÀ
, (°))

	)

2150 
	#sk_void_√w
(
cmp
Ë
	`SKM_sk_√w
(, (cmp))

	)

2151 
	#sk_void_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
()

	)

2152 
	#sk_void_‰ì
(
°
Ë
	`SKM_sk_‰ì
(, (°))

	)

2153 
	#sk_void_num
(
°
Ë
	`SKM_sk_num
(, (°))

	)

2154 
	#sk_void_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(, (°), (i))

	)

2155 
	#sk_void_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(, (°), (i), (vÆ))

	)

2156 
	#sk_void_zîo
(
°
Ë
	`SKM_sk_zîo
(, (°))

	)

2157 
	#sk_void_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(, (°), (vÆ))

	)

2158 
	#sk_void_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(, (°), (vÆ))

	)

2159 
	#sk_void_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(, (°), (vÆ))

	)

2160 
	#sk_void_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(, (°), (vÆ))

	)

2161 
	#sk_void_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(, (°), (i))

	)

2162 
	#sk_void_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(, (°), (±r))

	)

2163 
	#sk_void_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(, (°), (vÆ), (i))

	)

2164 
	#sk_void_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(, (°), (cmp))

	)

2165 
	#sk_void_dup
(
°
Ë
	`SKM_sk_dup
(, st)

	)

2166 
	#sk_void_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(, (°), (‰ì_func))

	)

2167 
	#sk_void_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë
	`SKM_sk_dìp_c›y
(, (°), (c›y_func), (‰ì_func))

	)

2168 
	#sk_void_shi·
(
°
Ë
	`SKM_sk_shi·
(, (°))

	)

2169 
	#sk_void_p›
(
°
Ë
	`SKM_sk_p›
(, (°))

	)

2170 
	#sk_void_s‹t
(
°
Ë
	`SKM_sk_s‹t
(, (°))

	)

2171 
	#sk_void_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(, (°))

	)

2172 
	#sk_OPENSSL_STRING_√w
(
cmp
Ë((
	`STACK_OF
(
OPENSSL_STRING
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
(, cmp)))

	)

2173 
	#sk_OPENSSL_STRING_√w_nuŒ
(Ë((
	`STACK_OF
(
OPENSSL_STRING
Ë*)
	`sk_√w_nuŒ
())

	)

2174 
	#sk_OPENSSL_STRING_push
(
°
, 
vÆ
Ë
	`sk_push
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2175 
	#sk_OPENSSL_STRING_föd
(
°
, 
vÆ
Ë
	`sk_föd
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2176 
	#sk_OPENSSL_STRING_vÆue
(
°
, 
i
Ë((
OPENSSL_STRING
)
	`sk_vÆue
(
	`CHECKED_STACK_OF
(OPENSSL_STRING, st), i))

	)

2177 
	#sk_OPENSSL_STRING_num
(
°
Ë
	`SKM_sk_num
(
OPENSSL_STRING
, st)

	)

2178 
	#sk_OPENSSL_STRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_SK_FREE_FUNC
(, fªe_func))

	)

2179 
	#sk_OPENSSL_STRING_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë((
	`STACK_OF
(
OPENSSL_STRING
Ë*)
	`sk_dìp_c›y
(
	`CHECKED_STACK_OF
(OPENSSL_STRING, st), 
	`CHECKED_SK_COPY_FUNC
(, c›y_func), 
	`CHECKED_SK_FREE_FUNC
(, fªe_func)))

	)

2180 
	#sk_OPENSSL_STRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ), i)

	)

2181 
	#sk_OPENSSL_STRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OPENSSL_STRING
, st)

	)

2182 
	#sk_OPENSSL_STRING_£t
(
°
, 
i
, 
vÆ
Ë
	`sk_£t
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), i, 
	`CHECKED_PTR_OF
(, vÆ))

	)

2183 
	#sk_OPENSSL_STRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
OPENSSL_STRING
, (°))

	)

2184 
	#sk_OPENSSL_STRING_unshi·
(
°
, 
vÆ
Ë
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2185 
	#sk_OPENSSL_STRING_föd_ex
(
°
, 
vÆ
Ë
	`sk_föd_ex
((
_STACK
 *)
	`CHECKED_CONST_PTR_OF
(
	`STACK_OF
(
OPENSSL_STRING
), st), CHECKED_CONST_PTR_OF(, vÆ))

	)

2186 
	#sk_OPENSSL_STRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OPENSSL_STRING
, (°), (i))

	)

2187 
	#sk_OPENSSL_STRING_dñëe_±r
(
°
, 
±r
Ë(
OPENSSL_STRING
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
(OPENSSL_STRING, st), 
	`CHECKED_PTR_OF
(,Öå))

	)

2188 
	#sk_OPENSSL_STRING_£t_cmp_func
(
°
, 
cmp
) \

2190 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, 
°
), 
	`CHECKED_SK_CMP_FUNC
(, 
cmp
)))

	)

2191 
	#sk_OPENSSL_STRING_dup
(
°
Ë
	`SKM_sk_dup
(
OPENSSL_STRING
, st)

	)

2192 
	#sk_OPENSSL_STRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
OPENSSL_STRING
, (°))

	)

2193 
	#sk_OPENSSL_STRING_p›
(
°
Ë(*)
	`sk_p›
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st))

	)

2194 
	#sk_OPENSSL_STRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OPENSSL_STRING
, (°))

	)

2195 
	#sk_OPENSSL_STRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OPENSSL_STRING
, (°))

	)

2196 
	#sk_OPENSSL_BLOCK_√w
(
cmp
Ë((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
(, cmp)))

	)

2197 
	#sk_OPENSSL_BLOCK_√w_nuŒ
(Ë((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`sk_√w_nuŒ
())

	)

2198 
	#sk_OPENSSL_BLOCK_push
(
°
, 
vÆ
Ë
	`sk_push
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2199 
	#sk_OPENSSL_BLOCK_föd
(
°
, 
vÆ
Ë
	`sk_föd
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2200 
	#sk_OPENSSL_BLOCK_vÆue
(
°
, 
i
Ë((
OPENSSL_BLOCK
)
	`sk_vÆue
(
	`CHECKED_STACK_OF
(OPENSSL_BLOCK, st), i))

	)

2201 
	#sk_OPENSSL_BLOCK_num
(
°
Ë
	`SKM_sk_num
(
OPENSSL_BLOCK
, st)

	)

2202 
	#sk_OPENSSL_BLOCK_p›_‰ì
(
°
, 
‰ì_func
Ë
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_SK_FREE_FUNC
(, fªe_func))

	)

2203 
	#sk_OPENSSL_BLOCK_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`sk_dìp_c›y
(
	`CHECKED_STACK_OF
(OPENSSL_BLOCK, st), 
	`CHECKED_SK_COPY_FUNC
(, c›y_func), 
	`CHECKED_SK_FREE_FUNC
(, fªe_func)))

	)

2204 
	#sk_OPENSSL_BLOCK_ö£π
(
°
, 
vÆ
, 
i
Ë
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ), i)

	)

2205 
	#sk_OPENSSL_BLOCK_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OPENSSL_BLOCK
, st)

	)

2206 
	#sk_OPENSSL_BLOCK_£t
(
°
, 
i
, 
vÆ
Ë
	`sk_£t
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), i, 
	`CHECKED_PTR_OF
(, vÆ))

	)

2207 
	#sk_OPENSSL_BLOCK_zîo
(
°
Ë
	`SKM_sk_zîo
(
OPENSSL_BLOCK
, (°))

	)

2208 
	#sk_OPENSSL_BLOCK_unshi·
(
°
, 
vÆ
Ë
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2209 
	#sk_OPENSSL_BLOCK_föd_ex
(
°
, 
vÆ
Ë
	`sk_föd_ex
((
_STACK
 *)
	`CHECKED_CONST_PTR_OF
(
	`STACK_OF
(
OPENSSL_BLOCK
), st), CHECKED_CONST_PTR_OF(, vÆ))

	)

2210 
	#sk_OPENSSL_BLOCK_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OPENSSL_BLOCK
, (°), (i))

	)

2211 
	#sk_OPENSSL_BLOCK_dñëe_±r
(
°
, 
±r
Ë(
OPENSSL_BLOCK
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
(OPENSSL_BLOCK, st), 
	`CHECKED_PTR_OF
(,Öå))

	)

2212 
	#sk_OPENSSL_BLOCK_£t_cmp_func
(
°
, 
cmp
) \

2214 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, 
°
), 
	`CHECKED_SK_CMP_FUNC
(, 
cmp
)))

	)

2215 
	#sk_OPENSSL_BLOCK_dup
(
°
Ë
	`SKM_sk_dup
(
OPENSSL_BLOCK
, st)

	)

2216 
	#sk_OPENSSL_BLOCK_shi·
(
°
Ë
	`SKM_sk_shi·
(
OPENSSL_BLOCK
, (°))

	)

2217 
	#sk_OPENSSL_BLOCK_p›
(
°
Ë(*)
	`sk_p›
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st))

	)

2218 
	#sk_OPENSSL_BLOCK_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OPENSSL_BLOCK
, (°))

	)

2219 
	#sk_OPENSSL_BLOCK_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OPENSSL_BLOCK
, (°))

	)

2220 
	#sk_OPENSSL_PSTRING_√w
(
cmp
Ë((
	`STACK_OF
(
OPENSSL_PSTRING
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
(
OPENSSL_STRING
, cmp)))

	)

2221 
	#sk_OPENSSL_PSTRING_√w_nuŒ
(Ë((
	`STACK_OF
(
OPENSSL_PSTRING
Ë*)
	`sk_√w_nuŒ
())

	)

2222 
	#sk_OPENSSL_PSTRING_push
(
°
, 
vÆ
Ë
	`sk_push
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2223 
	#sk_OPENSSL_PSTRING_föd
(
°
, 
vÆ
Ë
	`sk_föd
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2224 
	#sk_OPENSSL_PSTRING_vÆue
(
°
, 
i
Ë((
OPENSSL_PSTRING
)
	`sk_vÆue
(
	`CHECKED_STACK_OF
(OPENSSL_PSTRING, st), i))

	)

2225 
	#sk_OPENSSL_PSTRING_num
(
°
Ë
	`SKM_sk_num
(
OPENSSL_PSTRING
, st)

	)

2226 
	#sk_OPENSSL_PSTRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_SK_FREE_FUNC
(
OPENSSL_STRING
, fªe_func))

	)

2227 
	#sk_OPENSSL_PSTRING_dìp_c›y
(
°
, 
c›y_func
, 
‰ì_func
Ë((
	`STACK_OF
(
OPENSSL_PSTRING
Ë*)
	`sk_dìp_c›y
(
	`CHECKED_STACK_OF
(OPENSSL_PSTRING, st), 
	`CHECKED_SK_COPY_FUNC
(
OPENSSL_STRING
, c›y_func), 
	`CHECKED_SK_FREE_FUNC
(OPENSSL_STRING, fªe_func)))

	)

2228 
	#sk_OPENSSL_PSTRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ), i)

	)

2229 
	#sk_OPENSSL_PSTRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OPENSSL_PSTRING
, st)

	)

2230 
	#sk_OPENSSL_PSTRING_£t
(
°
, 
i
, 
vÆ
Ë
	`sk_£t
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), i, 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2231 
	#sk_OPENSSL_PSTRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
OPENSSL_PSTRING
, (°))

	)

2232 
	#sk_OPENSSL_PSTRING_unshi·
(
°
, 
vÆ
Ë
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2233 
	#sk_OPENSSL_PSTRING_föd_ex
(
°
, 
vÆ
Ë
	`sk_föd_ex
((
_STACK
 *)
	`CHECKED_CONST_PTR_OF
(
	`STACK_OF
(
OPENSSL_PSTRING
), st), CHECKED_CONST_PTR_OF(
OPENSSL_STRING
, vÆ))

	)

2234 
	#sk_OPENSSL_PSTRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OPENSSL_PSTRING
, (°), (i))

	)

2235 
	#sk_OPENSSL_PSTRING_dñëe_±r
(
°
, 
±r
Ë(
OPENSSL_PSTRING
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
(OPENSSL_PSTRING, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
,Öå))

	)

2236 
	#sk_OPENSSL_PSTRING_£t_cmp_func
(
°
, 
cmp
) \

2237 (((*)(c⁄° 
OPENSSL_STRING
 * const *,const OPENSSL_STRING * const *)) \

2238 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, 
°
), 
	`CHECKED_SK_CMP_FUNC
(
OPENSSL_STRING
, 
cmp
)))

	)

2239 
	#sk_OPENSSL_PSTRING_dup
(
°
Ë
	`SKM_sk_dup
(
OPENSSL_PSTRING
, st)

	)

2240 
	#sk_OPENSSL_PSTRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
OPENSSL_PSTRING
, (°))

	)

2241 
	#sk_OPENSSL_PSTRING_p›
(
°
Ë(
OPENSSL_STRING
 *)
	`sk_p›
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st))

	)

2242 
	#sk_OPENSSL_PSTRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OPENSSL_PSTRING
, (°))

	)

2243 
	#sk_OPENSSL_PSTRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OPENSSL_PSTRING
, (°))

	)

2244 
	#d2i_ASN1_SET_OF_ACCESS_DESCRIPTION
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2245 
	`SKM_ASN1_SET_OF_d2i
(
ACCESS_DESCRIPTION
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2246 
	#i2d_ASN1_SET_OF_ACCESS_DESCRIPTION
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2247 
	`SKM_ASN1_SET_OF_i2d
(
ACCESS_DESCRIPTION
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2248 
	#ASN1_£q_∑ck_ACCESS_DESCRIPTION
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2249 
	`SKM_ASN1_£q_∑ck
(
ACCESS_DESCRIPTION
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2250 
	#ASN1_£q_u≈ack_ACCESS_DESCRIPTION
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2251 
	`SKM_ASN1_£q_u≈ack
(
ACCESS_DESCRIPTION
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2252 
	#d2i_ASN1_SET_OF_ASN1_INTEGER
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2253 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_INTEGER
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2254 
	#i2d_ASN1_SET_OF_ASN1_INTEGER
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2255 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_INTEGER
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2256 
	#ASN1_£q_∑ck_ASN1_INTEGER
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2257 
	`SKM_ASN1_£q_∑ck
(
ASN1_INTEGER
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2258 
	#ASN1_£q_u≈ack_ASN1_INTEGER
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2259 
	`SKM_ASN1_£q_u≈ack
(
ASN1_INTEGER
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2260 
	#d2i_ASN1_SET_OF_ASN1_OBJECT
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2261 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_OBJECT
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2262 
	#i2d_ASN1_SET_OF_ASN1_OBJECT
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2263 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_OBJECT
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2264 
	#ASN1_£q_∑ck_ASN1_OBJECT
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2265 
	`SKM_ASN1_£q_∑ck
(
ASN1_OBJECT
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2266 
	#ASN1_£q_u≈ack_ASN1_OBJECT
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2267 
	`SKM_ASN1_£q_u≈ack
(
ASN1_OBJECT
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2268 
	#d2i_ASN1_SET_OF_ASN1_TYPE
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2269 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_TYPE
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2270 
	#i2d_ASN1_SET_OF_ASN1_TYPE
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2271 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_TYPE
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2272 
	#ASN1_£q_∑ck_ASN1_TYPE
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2273 
	`SKM_ASN1_£q_∑ck
(
ASN1_TYPE
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2274 
	#ASN1_£q_u≈ack_ASN1_TYPE
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2275 
	`SKM_ASN1_£q_u≈ack
(
ASN1_TYPE
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2276 
	#d2i_ASN1_SET_OF_ASN1_UTF8STRING
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2277 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_UTF8STRING
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2278 
	#i2d_ASN1_SET_OF_ASN1_UTF8STRING
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2279 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_UTF8STRING
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2280 
	#ASN1_£q_∑ck_ASN1_UTF8STRING
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2281 
	`SKM_ASN1_£q_∑ck
(
ASN1_UTF8STRING
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2282 
	#ASN1_£q_u≈ack_ASN1_UTF8STRING
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2283 
	`SKM_ASN1_£q_u≈ack
(
ASN1_UTF8STRING
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2284 
	#d2i_ASN1_SET_OF_DIST_POINT
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2285 
	`SKM_ASN1_SET_OF_d2i
(
DIST_POINT
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2286 
	#i2d_ASN1_SET_OF_DIST_POINT
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2287 
	`SKM_ASN1_SET_OF_i2d
(
DIST_POINT
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2288 
	#ASN1_£q_∑ck_DIST_POINT
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2289 
	`SKM_ASN1_£q_∑ck
(
DIST_POINT
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2290 
	#ASN1_£q_u≈ack_DIST_POINT
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2291 
	`SKM_ASN1_£q_u≈ack
(
DIST_POINT
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2292 
	#d2i_ASN1_SET_OF_ESS_CERT_ID
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2293 
	`SKM_ASN1_SET_OF_d2i
(
ESS_CERT_ID
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2294 
	#i2d_ASN1_SET_OF_ESS_CERT_ID
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2295 
	`SKM_ASN1_SET_OF_i2d
(
ESS_CERT_ID
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2296 
	#ASN1_£q_∑ck_ESS_CERT_ID
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2297 
	`SKM_ASN1_£q_∑ck
(
ESS_CERT_ID
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2298 
	#ASN1_£q_u≈ack_ESS_CERT_ID
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2299 
	`SKM_ASN1_£q_u≈ack
(
ESS_CERT_ID
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2300 
	#d2i_ASN1_SET_OF_EVP_MD
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2301 
	`SKM_ASN1_SET_OF_d2i
(
EVP_MD
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2302 
	#i2d_ASN1_SET_OF_EVP_MD
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2303 
	`SKM_ASN1_SET_OF_i2d
(
EVP_MD
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2304 
	#ASN1_£q_∑ck_EVP_MD
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2305 
	`SKM_ASN1_£q_∑ck
(
EVP_MD
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2306 
	#ASN1_£q_u≈ack_EVP_MD
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2307 
	`SKM_ASN1_£q_u≈ack
(
EVP_MD
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2308 
	#d2i_ASN1_SET_OF_GENERAL_NAME
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2309 
	`SKM_ASN1_SET_OF_d2i
(
GENERAL_NAME
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2310 
	#i2d_ASN1_SET_OF_GENERAL_NAME
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2311 
	`SKM_ASN1_SET_OF_i2d
(
GENERAL_NAME
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2312 
	#ASN1_£q_∑ck_GENERAL_NAME
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2313 
	`SKM_ASN1_£q_∑ck
(
GENERAL_NAME
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2314 
	#ASN1_£q_u≈ack_GENERAL_NAME
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2315 
	`SKM_ASN1_£q_u≈ack
(
GENERAL_NAME
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2316 
	#d2i_ASN1_SET_OF_OCSP_ONEREQ
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2317 
	`SKM_ASN1_SET_OF_d2i
(
OCSP_ONEREQ
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2318 
	#i2d_ASN1_SET_OF_OCSP_ONEREQ
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2319 
	`SKM_ASN1_SET_OF_i2d
(
OCSP_ONEREQ
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2320 
	#ASN1_£q_∑ck_OCSP_ONEREQ
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2321 
	`SKM_ASN1_£q_∑ck
(
OCSP_ONEREQ
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2322 
	#ASN1_£q_u≈ack_OCSP_ONEREQ
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2323 
	`SKM_ASN1_£q_u≈ack
(
OCSP_ONEREQ
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2324 
	#d2i_ASN1_SET_OF_OCSP_SINGLERESP
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2325 
	`SKM_ASN1_SET_OF_d2i
(
OCSP_SINGLERESP
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2326 
	#i2d_ASN1_SET_OF_OCSP_SINGLERESP
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2327 
	`SKM_ASN1_SET_OF_i2d
(
OCSP_SINGLERESP
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2328 
	#ASN1_£q_∑ck_OCSP_SINGLERESP
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2329 
	`SKM_ASN1_£q_∑ck
(
OCSP_SINGLERESP
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2330 
	#ASN1_£q_u≈ack_OCSP_SINGLERESP
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2331 
	`SKM_ASN1_£q_u≈ack
(
OCSP_SINGLERESP
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2332 
	#d2i_ASN1_SET_OF_PKCS12_SAFEBAG
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2333 
	`SKM_ASN1_SET_OF_d2i
(
PKCS12_SAFEBAG
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2334 
	#i2d_ASN1_SET_OF_PKCS12_SAFEBAG
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2335 
	`SKM_ASN1_SET_OF_i2d
(
PKCS12_SAFEBAG
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2336 
	#ASN1_£q_∑ck_PKCS12_SAFEBAG
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2337 
	`SKM_ASN1_£q_∑ck
(
PKCS12_SAFEBAG
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2338 
	#ASN1_£q_u≈ack_PKCS12_SAFEBAG
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2339 
	`SKM_ASN1_£q_u≈ack
(
PKCS12_SAFEBAG
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2340 
	#d2i_ASN1_SET_OF_PKCS7
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2341 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2342 
	#i2d_ASN1_SET_OF_PKCS7
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2343 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2344 
	#ASN1_£q_∑ck_PKCS7
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2345 
	`SKM_ASN1_£q_∑ck
(
PKCS7
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2346 
	#ASN1_£q_u≈ack_PKCS7
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2347 
	`SKM_ASN1_£q_u≈ack
(
PKCS7
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2348 
	#d2i_ASN1_SET_OF_PKCS7_RECIP_INFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2349 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7_RECIP_INFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2350 
	#i2d_ASN1_SET_OF_PKCS7_RECIP_INFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2351 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7_RECIP_INFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2352 
	#ASN1_£q_∑ck_PKCS7_RECIP_INFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2353 
	`SKM_ASN1_£q_∑ck
(
PKCS7_RECIP_INFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2354 
	#ASN1_£q_u≈ack_PKCS7_RECIP_INFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2355 
	`SKM_ASN1_£q_u≈ack
(
PKCS7_RECIP_INFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2356 
	#d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2357 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7_SIGNER_INFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2358 
	#i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2359 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7_SIGNER_INFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2360 
	#ASN1_£q_∑ck_PKCS7_SIGNER_INFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2361 
	`SKM_ASN1_£q_∑ck
(
PKCS7_SIGNER_INFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2362 
	#ASN1_£q_u≈ack_PKCS7_SIGNER_INFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2363 
	`SKM_ASN1_£q_u≈ack
(
PKCS7_SIGNER_INFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2364 
	#d2i_ASN1_SET_OF_POLICYINFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2365 
	`SKM_ASN1_SET_OF_d2i
(
POLICYINFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2366 
	#i2d_ASN1_SET_OF_POLICYINFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2367 
	`SKM_ASN1_SET_OF_i2d
(
POLICYINFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2368 
	#ASN1_£q_∑ck_POLICYINFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2369 
	`SKM_ASN1_£q_∑ck
(
POLICYINFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2370 
	#ASN1_£q_u≈ack_POLICYINFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2371 
	`SKM_ASN1_£q_u≈ack
(
POLICYINFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2372 
	#d2i_ASN1_SET_OF_POLICYQUALINFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2373 
	`SKM_ASN1_SET_OF_d2i
(
POLICYQUALINFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2374 
	#i2d_ASN1_SET_OF_POLICYQUALINFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2375 
	`SKM_ASN1_SET_OF_i2d
(
POLICYQUALINFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2376 
	#ASN1_£q_∑ck_POLICYQUALINFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2377 
	`SKM_ASN1_£q_∑ck
(
POLICYQUALINFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2378 
	#ASN1_£q_u≈ack_POLICYQUALINFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2379 
	`SKM_ASN1_£q_u≈ack
(
POLICYQUALINFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2380 
	#d2i_ASN1_SET_OF_SXNETID
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2381 
	`SKM_ASN1_SET_OF_d2i
(
SXNETID
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2382 
	#i2d_ASN1_SET_OF_SXNETID
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2383 
	`SKM_ASN1_SET_OF_i2d
(
SXNETID
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2384 
	#ASN1_£q_∑ck_SXNETID
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2385 
	`SKM_ASN1_£q_∑ck
(
SXNETID
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2386 
	#ASN1_£q_u≈ack_SXNETID
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2387 
	`SKM_ASN1_£q_u≈ack
(
SXNETID
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2388 
	#d2i_ASN1_SET_OF_X509
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2389 
	`SKM_ASN1_SET_OF_d2i
(
X509
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2390 
	#i2d_ASN1_SET_OF_X509
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2391 
	`SKM_ASN1_SET_OF_i2d
(
X509
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2392 
	#ASN1_£q_∑ck_X509
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2393 
	`SKM_ASN1_£q_∑ck
(
X509
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2394 
	#ASN1_£q_u≈ack_X509
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2395 
	`SKM_ASN1_£q_u≈ack
(
X509
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2396 
	#d2i_ASN1_SET_OF_X509_ALGOR
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2397 
	`SKM_ASN1_SET_OF_d2i
(
X509_ALGOR
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2398 
	#i2d_ASN1_SET_OF_X509_ALGOR
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2399 
	`SKM_ASN1_SET_OF_i2d
(
X509_ALGOR
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2400 
	#ASN1_£q_∑ck_X509_ALGOR
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2401 
	`SKM_ASN1_£q_∑ck
(
X509_ALGOR
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2402 
	#ASN1_£q_u≈ack_X509_ALGOR
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2403 
	`SKM_ASN1_£q_u≈ack
(
X509_ALGOR
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2404 
	#d2i_ASN1_SET_OF_X509_ATTRIBUTE
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2405 
	`SKM_ASN1_SET_OF_d2i
(
X509_ATTRIBUTE
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2406 
	#i2d_ASN1_SET_OF_X509_ATTRIBUTE
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2407 
	`SKM_ASN1_SET_OF_i2d
(
X509_ATTRIBUTE
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2408 
	#ASN1_£q_∑ck_X509_ATTRIBUTE
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2409 
	`SKM_ASN1_£q_∑ck
(
X509_ATTRIBUTE
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2410 
	#ASN1_£q_u≈ack_X509_ATTRIBUTE
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2411 
	`SKM_ASN1_£q_u≈ack
(
X509_ATTRIBUTE
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2412 
	#d2i_ASN1_SET_OF_X509_CRL
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2413 
	`SKM_ASN1_SET_OF_d2i
(
X509_CRL
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2414 
	#i2d_ASN1_SET_OF_X509_CRL
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2415 
	`SKM_ASN1_SET_OF_i2d
(
X509_CRL
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2416 
	#ASN1_£q_∑ck_X509_CRL
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2417 
	`SKM_ASN1_£q_∑ck
(
X509_CRL
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2418 
	#ASN1_£q_u≈ack_X509_CRL
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2419 
	`SKM_ASN1_£q_u≈ack
(
X509_CRL
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2420 
	#d2i_ASN1_SET_OF_X509_EXTENSION
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2421 
	`SKM_ASN1_SET_OF_d2i
(
X509_EXTENSION
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2422 
	#i2d_ASN1_SET_OF_X509_EXTENSION
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2423 
	`SKM_ASN1_SET_OF_i2d
(
X509_EXTENSION
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2424 
	#ASN1_£q_∑ck_X509_EXTENSION
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2425 
	`SKM_ASN1_£q_∑ck
(
X509_EXTENSION
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2426 
	#ASN1_£q_u≈ack_X509_EXTENSION
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2427 
	`SKM_ASN1_£q_u≈ack
(
X509_EXTENSION
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2428 
	#d2i_ASN1_SET_OF_X509_NAME_ENTRY
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2429 
	`SKM_ASN1_SET_OF_d2i
(
X509_NAME_ENTRY
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2430 
	#i2d_ASN1_SET_OF_X509_NAME_ENTRY
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2431 
	`SKM_ASN1_SET_OF_i2d
(
X509_NAME_ENTRY
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2432 
	#ASN1_£q_∑ck_X509_NAME_ENTRY
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2433 
	`SKM_ASN1_£q_∑ck
(
X509_NAME_ENTRY
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2434 
	#ASN1_£q_u≈ack_X509_NAME_ENTRY
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2435 
	`SKM_ASN1_£q_u≈ack
(
X509_NAME_ENTRY
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2436 
	#d2i_ASN1_SET_OF_X509_REVOKED
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2437 
	`SKM_ASN1_SET_OF_d2i
(
X509_REVOKED
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2438 
	#i2d_ASN1_SET_OF_X509_REVOKED
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2439 
	`SKM_ASN1_SET_OF_i2d
(
X509_REVOKED
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2440 
	#ASN1_£q_∑ck_X509_REVOKED
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2441 
	`SKM_ASN1_£q_∑ck
(
X509_REVOKED
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2442 
	#ASN1_£q_u≈ack_X509_REVOKED
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2443 
	`SKM_ASN1_£q_u≈ack
(
X509_REVOKED
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2444 
	#PKCS12_de¸y±_d2i_PKCS12_SAFEBAG
(
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

2445 
	`SKM_PKCS12_de¸y±_d2i
(
PKCS12_SAFEBAG
, (
Æg‹
), (
d2i_func
), (
‰ì_func
), (
∑ss
), (
∑s¶í
), (
o˘
), (
£q
))

	)

2446 
	#PKCS12_de¸y±_d2i_PKCS7
(
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

2447 
	`SKM_PKCS12_de¸y±_d2i
(
PKCS7
, (
Æg‹
), (
d2i_func
), (
‰ì_func
), (
∑ss
), (
∑s¶í
), (
o˘
), (
£q
))

	)

2448 
	#lh_ADDED_OBJ_√w
(Ë
	`LHM_lh_√w
(
ADDED_OBJ
,
added_obj
)

	)

2449 
	#lh_ADDED_OBJ_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ADDED_OBJ
,lh,ö°)

	)

2450 
	#lh_ADDED_OBJ_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ADDED_OBJ
,lh,ö°)

	)

2451 
	#lh_ADDED_OBJ_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ADDED_OBJ
,lh,ö°)

	)

2452 
	#lh_ADDED_OBJ_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ADDED_OBJ
,lh,‚)

	)

2453 
	#lh_ADDED_OBJ_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2454 
	`LHM_lh_dﬂŒ_¨g
(
ADDED_OBJ
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2455 
	#lh_ADDED_OBJ_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ADDED_OBJ
,lh)

	)

2456 
	#lh_ADDED_OBJ_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ADDED_OBJ
,lh)

	)

2457 
	#lh_ADDED_OBJ_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ADDED_OBJ
,lh)

	)

2458 
	#lh_ADDED_OBJ_node_°©s_bio
(
lh
,
out
) \

2459 
	`LHM_lh_node_°©s_bio
(
ADDED_OBJ
,
lh
,
out
)

	)

2460 
	#lh_ADDED_OBJ_node_ußge_°©s_bio
(
lh
,
out
) \

2461 
	`LHM_lh_node_ußge_°©s_bio
(
ADDED_OBJ
,
lh
,
out
)

	)

2462 
	#lh_ADDED_OBJ_°©s_bio
(
lh
,
out
) \

2463 
	`LHM_lh_°©s_bio
(
ADDED_OBJ
,
lh
,
out
)

	)

2464 
	#lh_ADDED_OBJ_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ADDED_OBJ
,lh)

	)

2465 
	#lh_APP_INFO_√w
(Ë
	`LHM_lh_√w
(
APP_INFO
,
≠p_öfo
)

	)

2466 
	#lh_APP_INFO_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
APP_INFO
,lh,ö°)

	)

2467 
	#lh_APP_INFO_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
APP_INFO
,lh,ö°)

	)

2468 
	#lh_APP_INFO_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
APP_INFO
,lh,ö°)

	)

2469 
	#lh_APP_INFO_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
APP_INFO
,lh,‚)

	)

2470 
	#lh_APP_INFO_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2471 
	`LHM_lh_dﬂŒ_¨g
(
APP_INFO
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2472 
	#lh_APP_INFO_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
APP_INFO
,lh)

	)

2473 
	#lh_APP_INFO_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
APP_INFO
,lh)

	)

2474 
	#lh_APP_INFO_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
APP_INFO
,lh)

	)

2475 
	#lh_APP_INFO_node_°©s_bio
(
lh
,
out
) \

2476 
	`LHM_lh_node_°©s_bio
(
APP_INFO
,
lh
,
out
)

	)

2477 
	#lh_APP_INFO_node_ußge_°©s_bio
(
lh
,
out
) \

2478 
	`LHM_lh_node_ußge_°©s_bio
(
APP_INFO
,
lh
,
out
)

	)

2479 
	#lh_APP_INFO_°©s_bio
(
lh
,
out
) \

2480 
	`LHM_lh_°©s_bio
(
APP_INFO
,
lh
,
out
)

	)

2481 
	#lh_APP_INFO_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
APP_INFO
,lh)

	)

2482 
	#lh_CONF_VALUE_√w
(Ë
	`LHM_lh_√w
(
CONF_VALUE
,
c⁄f_vÆue
)

	)

2483 
	#lh_CONF_VALUE_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
CONF_VALUE
,lh,ö°)

	)

2484 
	#lh_CONF_VALUE_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
CONF_VALUE
,lh,ö°)

	)

2485 
	#lh_CONF_VALUE_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
CONF_VALUE
,lh,ö°)

	)

2486 
	#lh_CONF_VALUE_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
CONF_VALUE
,lh,‚)

	)

2487 
	#lh_CONF_VALUE_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2488 
	`LHM_lh_dﬂŒ_¨g
(
CONF_VALUE
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2489 
	#lh_CONF_VALUE_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
CONF_VALUE
,lh)

	)

2490 
	#lh_CONF_VALUE_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
CONF_VALUE
,lh)

	)

2491 
	#lh_CONF_VALUE_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
CONF_VALUE
,lh)

	)

2492 
	#lh_CONF_VALUE_node_°©s_bio
(
lh
,
out
) \

2493 
	`LHM_lh_node_°©s_bio
(
CONF_VALUE
,
lh
,
out
)

	)

2494 
	#lh_CONF_VALUE_node_ußge_°©s_bio
(
lh
,
out
) \

2495 
	`LHM_lh_node_ußge_°©s_bio
(
CONF_VALUE
,
lh
,
out
)

	)

2496 
	#lh_CONF_VALUE_°©s_bio
(
lh
,
out
) \

2497 
	`LHM_lh_°©s_bio
(
CONF_VALUE
,
lh
,
out
)

	)

2498 
	#lh_CONF_VALUE_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
CONF_VALUE
,lh)

	)

2499 
	#lh_ENGINE_PILE_√w
(Ë
	`LHM_lh_√w
(
ENGINE_PILE
,
ígöe_pûe
)

	)

2500 
	#lh_ENGINE_PILE_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ENGINE_PILE
,lh,ö°)

	)

2501 
	#lh_ENGINE_PILE_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ENGINE_PILE
,lh,ö°)

	)

2502 
	#lh_ENGINE_PILE_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ENGINE_PILE
,lh,ö°)

	)

2503 
	#lh_ENGINE_PILE_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ENGINE_PILE
,lh,‚)

	)

2504 
	#lh_ENGINE_PILE_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2505 
	`LHM_lh_dﬂŒ_¨g
(
ENGINE_PILE
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2506 
	#lh_ENGINE_PILE_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ENGINE_PILE
,lh)

	)

2507 
	#lh_ENGINE_PILE_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ENGINE_PILE
,lh)

	)

2508 
	#lh_ENGINE_PILE_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ENGINE_PILE
,lh)

	)

2509 
	#lh_ENGINE_PILE_node_°©s_bio
(
lh
,
out
) \

2510 
	`LHM_lh_node_°©s_bio
(
ENGINE_PILE
,
lh
,
out
)

	)

2511 
	#lh_ENGINE_PILE_node_ußge_°©s_bio
(
lh
,
out
) \

2512 
	`LHM_lh_node_ußge_°©s_bio
(
ENGINE_PILE
,
lh
,
out
)

	)

2513 
	#lh_ENGINE_PILE_°©s_bio
(
lh
,
out
) \

2514 
	`LHM_lh_°©s_bio
(
ENGINE_PILE
,
lh
,
out
)

	)

2515 
	#lh_ENGINE_PILE_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ENGINE_PILE
,lh)

	)

2516 
	#lh_ERR_STATE_√w
(Ë
	`LHM_lh_√w
(
ERR_STATE
,
îr_°©e
)

	)

2517 
	#lh_ERR_STATE_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ERR_STATE
,lh,ö°)

	)

2518 
	#lh_ERR_STATE_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ERR_STATE
,lh,ö°)

	)

2519 
	#lh_ERR_STATE_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ERR_STATE
,lh,ö°)

	)

2520 
	#lh_ERR_STATE_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ERR_STATE
,lh,‚)

	)

2521 
	#lh_ERR_STATE_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2522 
	`LHM_lh_dﬂŒ_¨g
(
ERR_STATE
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2523 
	#lh_ERR_STATE_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ERR_STATE
,lh)

	)

2524 
	#lh_ERR_STATE_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ERR_STATE
,lh)

	)

2525 
	#lh_ERR_STATE_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ERR_STATE
,lh)

	)

2526 
	#lh_ERR_STATE_node_°©s_bio
(
lh
,
out
) \

2527 
	`LHM_lh_node_°©s_bio
(
ERR_STATE
,
lh
,
out
)

	)

2528 
	#lh_ERR_STATE_node_ußge_°©s_bio
(
lh
,
out
) \

2529 
	`LHM_lh_node_ußge_°©s_bio
(
ERR_STATE
,
lh
,
out
)

	)

2530 
	#lh_ERR_STATE_°©s_bio
(
lh
,
out
) \

2531 
	`LHM_lh_°©s_bio
(
ERR_STATE
,
lh
,
out
)

	)

2532 
	#lh_ERR_STATE_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ERR_STATE
,lh)

	)

2533 
	#lh_ERR_STRING_DATA_√w
(Ë
	`LHM_lh_√w
(
ERR_STRING_DATA
,
îr_°rög_d©a
)

	)

2534 
	#lh_ERR_STRING_DATA_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ERR_STRING_DATA
,lh,ö°)

	)

2535 
	#lh_ERR_STRING_DATA_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ERR_STRING_DATA
,lh,ö°)

	)

2536 
	#lh_ERR_STRING_DATA_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ERR_STRING_DATA
,lh,ö°)

	)

2537 
	#lh_ERR_STRING_DATA_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ERR_STRING_DATA
,lh,‚)

	)

2538 
	#lh_ERR_STRING_DATA_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2539 
	`LHM_lh_dﬂŒ_¨g
(
ERR_STRING_DATA
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2540 
	#lh_ERR_STRING_DATA_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ERR_STRING_DATA
,lh)

	)

2541 
	#lh_ERR_STRING_DATA_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ERR_STRING_DATA
,lh)

	)

2542 
	#lh_ERR_STRING_DATA_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ERR_STRING_DATA
,lh)

	)

2543 
	#lh_ERR_STRING_DATA_node_°©s_bio
(
lh
,
out
) \

2544 
	`LHM_lh_node_°©s_bio
(
ERR_STRING_DATA
,
lh
,
out
)

	)

2545 
	#lh_ERR_STRING_DATA_node_ußge_°©s_bio
(
lh
,
out
) \

2546 
	`LHM_lh_node_ußge_°©s_bio
(
ERR_STRING_DATA
,
lh
,
out
)

	)

2547 
	#lh_ERR_STRING_DATA_°©s_bio
(
lh
,
out
) \

2548 
	`LHM_lh_°©s_bio
(
ERR_STRING_DATA
,
lh
,
out
)

	)

2549 
	#lh_ERR_STRING_DATA_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ERR_STRING_DATA
,lh)

	)

2550 
	#lh_EX_CLASS_ITEM_√w
(Ë
	`LHM_lh_√w
(
EX_CLASS_ITEM
,
ex_˛ass_ôem
)

	)

2551 
	#lh_EX_CLASS_ITEM_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
EX_CLASS_ITEM
,lh,ö°)

	)

2552 
	#lh_EX_CLASS_ITEM_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
EX_CLASS_ITEM
,lh,ö°)

	)

2553 
	#lh_EX_CLASS_ITEM_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
EX_CLASS_ITEM
,lh,ö°)

	)

2554 
	#lh_EX_CLASS_ITEM_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
EX_CLASS_ITEM
,lh,‚)

	)

2555 
	#lh_EX_CLASS_ITEM_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2556 
	`LHM_lh_dﬂŒ_¨g
(
EX_CLASS_ITEM
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2557 
	#lh_EX_CLASS_ITEM_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
EX_CLASS_ITEM
,lh)

	)

2558 
	#lh_EX_CLASS_ITEM_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
EX_CLASS_ITEM
,lh)

	)

2559 
	#lh_EX_CLASS_ITEM_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
EX_CLASS_ITEM
,lh)

	)

2560 
	#lh_EX_CLASS_ITEM_node_°©s_bio
(
lh
,
out
) \

2561 
	`LHM_lh_node_°©s_bio
(
EX_CLASS_ITEM
,
lh
,
out
)

	)

2562 
	#lh_EX_CLASS_ITEM_node_ußge_°©s_bio
(
lh
,
out
) \

2563 
	`LHM_lh_node_ußge_°©s_bio
(
EX_CLASS_ITEM
,
lh
,
out
)

	)

2564 
	#lh_EX_CLASS_ITEM_°©s_bio
(
lh
,
out
) \

2565 
	`LHM_lh_°©s_bio
(
EX_CLASS_ITEM
,
lh
,
out
)

	)

2566 
	#lh_EX_CLASS_ITEM_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
EX_CLASS_ITEM
,lh)

	)

2567 
	#lh_FUNCTION_√w
(Ë
	`LHM_lh_√w
(
FUNCTION
,
fun˘i⁄
)

	)

2568 
	#lh_FUNCTION_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
FUNCTION
,lh,ö°)

	)

2569 
	#lh_FUNCTION_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
FUNCTION
,lh,ö°)

	)

2570 
	#lh_FUNCTION_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
FUNCTION
,lh,ö°)

	)

2571 
	#lh_FUNCTION_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
FUNCTION
,lh,‚)

	)

2572 
	#lh_FUNCTION_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2573 
	`LHM_lh_dﬂŒ_¨g
(
FUNCTION
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2574 
	#lh_FUNCTION_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
FUNCTION
,lh)

	)

2575 
	#lh_FUNCTION_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
FUNCTION
,lh)

	)

2576 
	#lh_FUNCTION_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
FUNCTION
,lh)

	)

2577 
	#lh_FUNCTION_node_°©s_bio
(
lh
,
out
) \

2578 
	`LHM_lh_node_°©s_bio
(
FUNCTION
,
lh
,
out
)

	)

2579 
	#lh_FUNCTION_node_ußge_°©s_bio
(
lh
,
out
) \

2580 
	`LHM_lh_node_ußge_°©s_bio
(
FUNCTION
,
lh
,
out
)

	)

2581 
	#lh_FUNCTION_°©s_bio
(
lh
,
out
) \

2582 
	`LHM_lh_°©s_bio
(
FUNCTION
,
lh
,
out
)

	)

2583 
	#lh_FUNCTION_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
FUNCTION
,lh)

	)

2584 
	#lh_MEM_√w
(Ë
	`LHM_lh_√w
(
MEM
,
mem
)

	)

2585 
	#lh_MEM_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
MEM
,lh,ö°)

	)

2586 
	#lh_MEM_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
MEM
,lh,ö°)

	)

2587 
	#lh_MEM_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
MEM
,lh,ö°)

	)

2588 
	#lh_MEM_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
MEM
,lh,‚)

	)

2589 
	#lh_MEM_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2590 
	`LHM_lh_dﬂŒ_¨g
(
MEM
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2591 
	#lh_MEM_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
MEM
,lh)

	)

2592 
	#lh_MEM_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
MEM
,lh)

	)

2593 
	#lh_MEM_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
MEM
,lh)

	)

2594 
	#lh_MEM_node_°©s_bio
(
lh
,
out
) \

2595 
	`LHM_lh_node_°©s_bio
(
MEM
,
lh
,
out
)

	)

2596 
	#lh_MEM_node_ußge_°©s_bio
(
lh
,
out
) \

2597 
	`LHM_lh_node_ußge_°©s_bio
(
MEM
,
lh
,
out
)

	)

2598 
	#lh_MEM_°©s_bio
(
lh
,
out
) \

2599 
	`LHM_lh_°©s_bio
(
MEM
,
lh
,
out
)

	)

2600 
	#lh_MEM_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
MEM
,lh)

	)

2601 
	#lh_OBJ_NAME_√w
(Ë
	`LHM_lh_√w
(
OBJ_NAME
,
obj_«me
)

	)

2602 
	#lh_OBJ_NAME_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
OBJ_NAME
,lh,ö°)

	)

2603 
	#lh_OBJ_NAME_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
OBJ_NAME
,lh,ö°)

	)

2604 
	#lh_OBJ_NAME_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
OBJ_NAME
,lh,ö°)

	)

2605 
	#lh_OBJ_NAME_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
OBJ_NAME
,lh,‚)

	)

2606 
	#lh_OBJ_NAME_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2607 
	`LHM_lh_dﬂŒ_¨g
(
OBJ_NAME
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2608 
	#lh_OBJ_NAME_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
OBJ_NAME
,lh)

	)

2609 
	#lh_OBJ_NAME_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
OBJ_NAME
,lh)

	)

2610 
	#lh_OBJ_NAME_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
OBJ_NAME
,lh)

	)

2611 
	#lh_OBJ_NAME_node_°©s_bio
(
lh
,
out
) \

2612 
	`LHM_lh_node_°©s_bio
(
OBJ_NAME
,
lh
,
out
)

	)

2613 
	#lh_OBJ_NAME_node_ußge_°©s_bio
(
lh
,
out
) \

2614 
	`LHM_lh_node_ußge_°©s_bio
(
OBJ_NAME
,
lh
,
out
)

	)

2615 
	#lh_OBJ_NAME_°©s_bio
(
lh
,
out
) \

2616 
	`LHM_lh_°©s_bio
(
OBJ_NAME
,
lh
,
out
)

	)

2617 
	#lh_OBJ_NAME_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
OBJ_NAME
,lh)

	)

2618 
	#lh_OPENSSL_CSTRING_√w
(Ë
	`LHM_lh_√w
(
OPENSSL_CSTRING
,
›ís¶_c°rög
)

	)

2619 
	#lh_OPENSSL_CSTRING_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
OPENSSL_CSTRING
,lh,ö°)

	)

2620 
	#lh_OPENSSL_CSTRING_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
OPENSSL_CSTRING
,lh,ö°)

	)

2621 
	#lh_OPENSSL_CSTRING_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
OPENSSL_CSTRING
,lh,ö°)

	)

2622 
	#lh_OPENSSL_CSTRING_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
OPENSSL_CSTRING
,lh,‚)

	)

2623 
	#lh_OPENSSL_CSTRING_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2624 
	`LHM_lh_dﬂŒ_¨g
(
OPENSSL_CSTRING
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2625 
	#lh_OPENSSL_CSTRING_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
OPENSSL_CSTRING
,lh)

	)

2626 
	#lh_OPENSSL_CSTRING_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
OPENSSL_CSTRING
,lh)

	)

2627 
	#lh_OPENSSL_CSTRING_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
OPENSSL_CSTRING
,lh)

	)

2628 
	#lh_OPENSSL_CSTRING_node_°©s_bio
(
lh
,
out
) \

2629 
	`LHM_lh_node_°©s_bio
(
OPENSSL_CSTRING
,
lh
,
out
)

	)

2630 
	#lh_OPENSSL_CSTRING_node_ußge_°©s_bio
(
lh
,
out
) \

2631 
	`LHM_lh_node_ußge_°©s_bio
(
OPENSSL_CSTRING
,
lh
,
out
)

	)

2632 
	#lh_OPENSSL_CSTRING_°©s_bio
(
lh
,
out
) \

2633 
	`LHM_lh_°©s_bio
(
OPENSSL_CSTRING
,
lh
,
out
)

	)

2634 
	#lh_OPENSSL_CSTRING_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
OPENSSL_CSTRING
,lh)

	)

2635 
	#lh_OPENSSL_STRING_√w
(Ë
	`LHM_lh_√w
(
OPENSSL_STRING
,
›ís¶_°rög
)

	)

2636 
	#lh_OPENSSL_STRING_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
OPENSSL_STRING
,lh,ö°)

	)

2637 
	#lh_OPENSSL_STRING_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
OPENSSL_STRING
,lh,ö°)

	)

2638 
	#lh_OPENSSL_STRING_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
OPENSSL_STRING
,lh,ö°)

	)

2639 
	#lh_OPENSSL_STRING_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
OPENSSL_STRING
,lh,‚)

	)

2640 
	#lh_OPENSSL_STRING_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2641 
	`LHM_lh_dﬂŒ_¨g
(
OPENSSL_STRING
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2642 
	#lh_OPENSSL_STRING_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
OPENSSL_STRING
,lh)

	)

2643 
	#lh_OPENSSL_STRING_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
OPENSSL_STRING
,lh)

	)

2644 
	#lh_OPENSSL_STRING_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
OPENSSL_STRING
,lh)

	)

2645 
	#lh_OPENSSL_STRING_node_°©s_bio
(
lh
,
out
) \

2646 
	`LHM_lh_node_°©s_bio
(
OPENSSL_STRING
,
lh
,
out
)

	)

2647 
	#lh_OPENSSL_STRING_node_ußge_°©s_bio
(
lh
,
out
) \

2648 
	`LHM_lh_node_ußge_°©s_bio
(
OPENSSL_STRING
,
lh
,
out
)

	)

2649 
	#lh_OPENSSL_STRING_°©s_bio
(
lh
,
out
) \

2650 
	`LHM_lh_°©s_bio
(
OPENSSL_STRING
,
lh
,
out
)

	)

2651 
	#lh_OPENSSL_STRING_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
OPENSSL_STRING
,lh)

	)

2652 
	#lh_SSL_SESSION_√w
(Ë
	`LHM_lh_√w
(
SSL_SESSION
,
s¶_£ssi⁄
)

	)

2653 
	#lh_SSL_SESSION_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
SSL_SESSION
,lh,ö°)

	)

2654 
	#lh_SSL_SESSION_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
SSL_SESSION
,lh,ö°)

	)

2655 
	#lh_SSL_SESSION_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
SSL_SESSION
,lh,ö°)

	)

2656 
	#lh_SSL_SESSION_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
SSL_SESSION
,lh,‚)

	)

2657 
	#lh_SSL_SESSION_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2658 
	`LHM_lh_dﬂŒ_¨g
(
SSL_SESSION
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2659 
	#lh_SSL_SESSION_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
SSL_SESSION
,lh)

	)

2660 
	#lh_SSL_SESSION_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
SSL_SESSION
,lh)

	)

2661 
	#lh_SSL_SESSION_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
SSL_SESSION
,lh)

	)

2662 
	#lh_SSL_SESSION_node_°©s_bio
(
lh
,
out
) \

2663 
	`LHM_lh_node_°©s_bio
(
SSL_SESSION
,
lh
,
out
)

	)

2664 
	#lh_SSL_SESSION_node_ußge_°©s_bio
(
lh
,
out
) \

2665 
	`LHM_lh_node_ußge_°©s_bio
(
SSL_SESSION
,
lh
,
out
)

	)

2666 
	#lh_SSL_SESSION_°©s_bio
(
lh
,
out
) \

2667 
	`LHM_lh_°©s_bio
(
SSL_SESSION
,
lh
,
out
)

	)

2668 
	#lh_SSL_SESSION_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
SSL_SESSION
,lh)

	)

2669 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/sha.h

59 #i‚de‡
HEADER_SHA_H


60 
	#HEADER_SHA_H


	)

62 
	~<›ís¶/e_os2.h
>

63 
	~<°ddef.h
>

65 #ifde‡ 
__˝lu•lus


69 #i‡
deföed
(
OPENSSL_NO_SHA
Ë|| (deföed(
OPENSSL_NO_SHA0
Ë&& deföed(
OPENSSL_NO_SHA1
))

70 #îr‹ 
SHA
 
is
 
dißbÀd
.

73 #i‡
deföed
(
OPENSSL_FIPS
)

74 
	#FIPS_SHA_SIZE_T
 
size_t


	)

84 #i‡
deföed
(
__LP32__
)

85 
	#SHA_LONG
 

	)

86 #ñi‡
deföed
(
OPENSSL_SYS_CRAY
Ë|| deföed(
__ILP64__
)

87 
	#SHA_LONG
 

	)

88 
	#SHA_LONG_LOG2
 3

	)

90 
	#SHA_LONG
 

	)

93 
	#SHA_LBLOCK
 16

	)

94 
	#SHA_CBLOCK
 (
SHA_LBLOCK
*4)

	)

97 
	#SHA_LAST_BLOCK
 (
SHA_CBLOCK
-8)

	)

98 
	#SHA_DIGEST_LENGTH
 20

	)

100 
	sSHA°©e_°
 {

101 
SHA_LONG
 
h0
, 
h1
, 
h2
, 
h3
, 
h4
;

102 
SHA_LONG
 
Nl
, 
Nh
;

103 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

104 
num
;

105 } 
	tSHA_CTX
;

107 #i‚de‡
OPENSSL_NO_SHA0


108 #ifde‡
OPENSSL_FIPS


109 
¥iv©e_SHA_Inô
(
SHA_CTX
 *
c
);

111 
SHA_Inô
(
SHA_CTX
 *
c
);

112 
SHA_Upd©e
(
SHA_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

113 
SHA_FöÆ
(*
md
, 
SHA_CTX
 *
c
);

114 *
SHA
(c⁄° *
d
, 
size_t
 
n
, *
md
);

115 
SHA_Tønsf‹m
(
SHA_CTX
 *
c
, c⁄° *
d©a
);

117 #i‚de‡
OPENSSL_NO_SHA1


118 
SHA1_Inô
(
SHA_CTX
 *
c
);

119 
SHA1_Upd©e
(
SHA_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

120 
SHA1_FöÆ
(*
md
, 
SHA_CTX
 *
c
);

121 *
SHA1
(c⁄° *
d
, 
size_t
 
n
, *
md
);

122 
SHA1_Tønsf‹m
(
SHA_CTX
 *
c
, c⁄° *
d©a
);

125 
	#SHA256_CBLOCK
 (
SHA_LBLOCK
*4)

	)

128 
	#SHA224_DIGEST_LENGTH
 28

	)

129 
	#SHA256_DIGEST_LENGTH
 32

	)

131 
	sSHA256°©e_°
 {

132 
SHA_LONG
 
h
[8];

133 
SHA_LONG
 
Nl
, 
Nh
;

134 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

135 
num
, 
md_Àn
;

136 } 
	tSHA256_CTX
;

138 #i‚de‡
OPENSSL_NO_SHA256


139 
SHA224_Inô
(
SHA256_CTX
 *
c
);

140 
SHA224_Upd©e
(
SHA256_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

141 
SHA224_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

142 *
SHA224
(c⁄° *
d
, 
size_t
 
n
, *
md
);

143 
SHA256_Inô
(
SHA256_CTX
 *
c
);

144 
SHA256_Upd©e
(
SHA256_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

145 
SHA256_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

146 *
SHA256
(c⁄° *
d
, 
size_t
 
n
, *
md
);

147 
SHA256_Tønsf‹m
(
SHA256_CTX
 *
c
, c⁄° *
d©a
);

150 
	#SHA384_DIGEST_LENGTH
 48

	)

151 
	#SHA512_DIGEST_LENGTH
 64

	)

153 #i‚de‡
OPENSSL_NO_SHA512


164 
	#SHA512_CBLOCK
 (
SHA_LBLOCK
*8)

	)

165 #i‡(
deföed
(
_WIN32
Ë|| deföed(
_WIN64
)Ë&& !deföed(
__MINGW32__
)

166 
	#SHA_LONG64
 
__öt64


	)

167 
	#U64
(
C
ËC##
UI64


	)

168 #ñi‡
deföed
(
__¨ch64__
)

169 
	#SHA_LONG64
 

	)

170 
	#U64
(
C
ËC##
UL


	)

172 
	#SHA_LONG64
 

	)

173 
	#U64
(
C
ËC##
ULL


	)

176 
	sSHA512°©e_°
 {

177 
SHA_LONG64
 
h
[8];

178 
SHA_LONG64
 
Nl
, 
Nh
;

180 
SHA_LONG64
 
d
[
SHA_LBLOCK
];

181 
p
[
SHA512_CBLOCK
];

182 } 
u
;

183 
num
, 
md_Àn
;

184 } 
	tSHA512_CTX
;

187 #i‚de‡
OPENSSL_NO_SHA512


188 
SHA384_Inô
(
SHA512_CTX
 *
c
);

189 
SHA384_Upd©e
(
SHA512_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

190 
SHA384_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

191 *
SHA384
(c⁄° *
d
, 
size_t
 
n
, *
md
);

192 
SHA512_Inô
(
SHA512_CTX
 *
c
);

193 
SHA512_Upd©e
(
SHA512_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

194 
SHA512_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

195 *
SHA512
(c⁄° *
d
, 
size_t
 
n
, *
md
);

196 
SHA512_Tønsf‹m
(
SHA512_CTX
 *
c
, c⁄° *
d©a
);

199 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/srtp.h

117 #i‚de‡
HEADER_D1_SRTP_H


118 
	#HEADER_D1_SRTP_H


	)

120 
	~<›ís¶/s¶.h
>

122 #ifde‡ 
__˝lu•lus


126 
	#SRTP_AES128_CM_SHA1_80
 0x0001

	)

127 
	#SRTP_AES128_CM_SHA1_32
 0x0002

	)

128 
	#SRTP_AES128_F8_SHA1_80
 0x0003

	)

129 
	#SRTP_AES128_F8_SHA1_32
 0x0004

	)

130 
	#SRTP_NULL_SHA1_80
 0x0005

	)

131 
	#SRTP_NULL_SHA1_32
 0x0006

	)

133 #i‚de‡
OPENSSL_NO_SRTP


135 
SSL_CTX_£t_é£xt_u£_§ç
(
SSL_CTX
 *
˘x
, c⁄° *
¥ofûes
);

136 
SSL_£t_é£xt_u£_§ç
(
SSL
 *
˘x
, c⁄° *
¥ofûes
);

138 
STACK_OF
(
SRTP_PROTECTION_PROFILE
Ë*
SSL_gë_§ç_¥ofûes
(
SSL
 *
s¶
);

139 
SRTP_PROTECTION_PROFILE
 *
SSL_gë_£À˘ed_§ç_¥ofûe
(
SSL
 *
s
);

143 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl.h

143 #i‚de‡
HEADER_SSL_H


144 
	#HEADER_SSL_H


	)

146 
	~<›ís¶/e_os2.h
>

148 #i‚de‡
OPENSSL_NO_COMP


149 
	~<›ís¶/comp.h
>

151 #i‚de‡
OPENSSL_NO_BIO


152 
	~<›ís¶/bio.h
>

154 #i‚de‡
OPENSSL_NO_DEPRECATED


155 #i‚de‡
OPENSSL_NO_X509


156 
	~<›ís¶/x509.h
>

158 
	~<›ís¶/¸y±o.h
>

159 
	~<›ís¶/lhash.h
>

160 
	~<›ís¶/buf„r.h
>

162 
	~<›ís¶/≥m.h
>

163 
	~<›ís¶/hmac.h
>

165 
	~<›ís¶/ks¶.h
>

166 
	~<›ís¶/ß„°ack.h
>

167 
	~<›ís¶/symhacks.h
>

169 #ifde‡ 
__˝lu•lus


178 
	#SSL_SESSION_ASN1_VERSION
 0x0001

	)

181 
	#SSL_TXT_NULL_WITH_MD5
 
SSL2_TXT_NULL_WITH_MD5


	)

182 
	#SSL_TXT_RC4_128_WITH_MD5
 
SSL2_TXT_RC4_128_WITH_MD5


	)

183 
	#SSL_TXT_RC4_128_EXPORT40_WITH_MD5
 
SSL2_TXT_RC4_128_EXPORT40_WITH_MD5


	)

184 
	#SSL_TXT_RC2_128_CBC_WITH_MD5
 
SSL2_TXT_RC2_128_CBC_WITH_MD5


	)

185 
	#SSL_TXT_RC2_128_CBC_EXPORT40_WITH_MD5
 
SSL2_TXT_RC2_128_CBC_EXPORT40_WITH_MD5


	)

186 
	#SSL_TXT_IDEA_128_CBC_WITH_MD5
 
SSL2_TXT_IDEA_128_CBC_WITH_MD5


	)

187 
	#SSL_TXT_DES_64_CBC_WITH_MD5
 
SSL2_TXT_DES_64_CBC_WITH_MD5


	)

188 
	#SSL_TXT_DES_64_CBC_WITH_SHA
 
SSL2_TXT_DES_64_CBC_WITH_SHA


	)

189 
	#SSL_TXT_DES_192_EDE3_CBC_WITH_MD5
 
SSL2_TXT_DES_192_EDE3_CBC_WITH_MD5


	)

190 
	#SSL_TXT_DES_192_EDE3_CBC_WITH_SHA
 
SSL2_TXT_DES_192_EDE3_CBC_WITH_SHA


	)

195 
	#SSL_TXT_KRB5_DES_64_CBC_SHA
 
SSL3_TXT_KRB5_DES_64_CBC_SHA


	)

196 
	#SSL_TXT_KRB5_DES_192_CBC3_SHA
 
SSL3_TXT_KRB5_DES_192_CBC3_SHA


	)

197 
	#SSL_TXT_KRB5_RC4_128_SHA
 
SSL3_TXT_KRB5_RC4_128_SHA


	)

198 
	#SSL_TXT_KRB5_IDEA_128_CBC_SHA
 
SSL3_TXT_KRB5_IDEA_128_CBC_SHA


	)

199 
	#SSL_TXT_KRB5_DES_64_CBC_MD5
 
SSL3_TXT_KRB5_DES_64_CBC_MD5


	)

200 
	#SSL_TXT_KRB5_DES_192_CBC3_MD5
 
SSL3_TXT_KRB5_DES_192_CBC3_MD5


	)

201 
	#SSL_TXT_KRB5_RC4_128_MD5
 
SSL3_TXT_KRB5_RC4_128_MD5


	)

202 
	#SSL_TXT_KRB5_IDEA_128_CBC_MD5
 
SSL3_TXT_KRB5_IDEA_128_CBC_MD5


	)

204 
	#SSL_TXT_KRB5_DES_40_CBC_SHA
 
SSL3_TXT_KRB5_DES_40_CBC_SHA


	)

205 
	#SSL_TXT_KRB5_RC2_40_CBC_SHA
 
SSL3_TXT_KRB5_RC2_40_CBC_SHA


	)

206 
	#SSL_TXT_KRB5_RC4_40_SHA
 
SSL3_TXT_KRB5_RC4_40_SHA


	)

207 
	#SSL_TXT_KRB5_DES_40_CBC_MD5
 
SSL3_TXT_KRB5_DES_40_CBC_MD5


	)

208 
	#SSL_TXT_KRB5_RC2_40_CBC_MD5
 
SSL3_TXT_KRB5_RC2_40_CBC_MD5


	)

209 
	#SSL_TXT_KRB5_RC4_40_MD5
 
SSL3_TXT_KRB5_RC4_40_MD5


	)

211 
	#SSL_TXT_KRB5_DES_40_CBC_SHA
 
SSL3_TXT_KRB5_DES_40_CBC_SHA


	)

212 
	#SSL_TXT_KRB5_DES_40_CBC_MD5
 
SSL3_TXT_KRB5_DES_40_CBC_MD5


	)

213 
	#SSL_TXT_KRB5_DES_64_CBC_SHA
 
SSL3_TXT_KRB5_DES_64_CBC_SHA


	)

214 
	#SSL_TXT_KRB5_DES_64_CBC_MD5
 
SSL3_TXT_KRB5_DES_64_CBC_MD5


	)

215 
	#SSL_TXT_KRB5_DES_192_CBC3_SHA
 
SSL3_TXT_KRB5_DES_192_CBC3_SHA


	)

216 
	#SSL_TXT_KRB5_DES_192_CBC3_MD5
 
SSL3_TXT_KRB5_DES_192_CBC3_MD5


	)

217 
	#SSL_MAX_KRB5_PRINCIPAL_LENGTH
 256

	)

219 
	#SSL_MAX_SSL_SESSION_ID_LENGTH
 32

	)

220 
	#SSL_MAX_SID_CTX_LENGTH
 32

	)

222 
	#SSL_MIN_RSA_MODULUS_LENGTH_IN_BYTES
 (512/8)

	)

223 
	#SSL_MAX_KEY_ARG_LENGTH
 8

	)

224 
	#SSL_MAX_MASTER_KEY_LENGTH
 48

	)

228 
	#SSL_TXT_EXP40
 "EXPORT40"

	)

229 
	#SSL_TXT_EXP56
 "EXPORT56"

	)

230 
	#SSL_TXT_LOW
 "LOW"

	)

231 
	#SSL_TXT_MEDIUM
 "MEDIUM"

	)

232 
	#SSL_TXT_HIGH
 "HIGH"

	)

233 
	#SSL_TXT_FIPS
 "FIPS"

	)

235 
	#SSL_TXT_kFZA
 "kFZA"

	)

236 
	#SSL_TXT_aFZA
 "aFZA"

	)

237 
	#SSL_TXT_eFZA
 "eFZA"

	)

238 
	#SSL_TXT_FZA
 "FZA"

	)

240 
	#SSL_TXT_aNULL
 "aNULL"

	)

241 
	#SSL_TXT_eNULL
 "eNULL"

	)

242 
	#SSL_TXT_NULL
 "NULL"

	)

244 
	#SSL_TXT_kRSA
 "kRSA"

	)

245 
	#SSL_TXT_kDHr
 "kDHr"

	)

246 
	#SSL_TXT_kDHd
 "kDHd"

	)

247 
	#SSL_TXT_kDH
 "kDH"

	)

248 
	#SSL_TXT_kEDH
 "kEDH"

	)

249 
	#SSL_TXT_kDHE
 "kDHE"

	)

250 
	#SSL_TXT_kKRB5
 "kKRB5"

	)

251 
	#SSL_TXT_kECDHr
 "kECDHr"

	)

252 
	#SSL_TXT_kECDHe
 "kECDHe"

	)

253 
	#SSL_TXT_kECDH
 "kECDH"

	)

254 
	#SSL_TXT_kEECDH
 "kEECDH"

	)

255 
	#SSL_TXT_kECDHE
 "kECDHE"

	)

256 
	#SSL_TXT_kPSK
 "kPSK"

	)

257 
	#SSL_TXT_kGOST
 "kGOST"

	)

258 
	#SSL_TXT_kSRP
 "kSRP"

	)

260 
	#SSL_TXT_aRSA
 "aRSA"

	)

261 
	#SSL_TXT_aDSS
 "aDSS"

	)

262 
	#SSL_TXT_aDH
 "aDH"

	)

263 
	#SSL_TXT_aECDH
 "aECDH"

	)

264 
	#SSL_TXT_aKRB5
 "aKRB5"

	)

265 
	#SSL_TXT_aECDSA
 "aECDSA"

	)

266 
	#SSL_TXT_aPSK
 "aPSK"

	)

267 
	#SSL_TXT_aGOST94
 "aGOST94"

	)

268 
	#SSL_TXT_aGOST01
 "aGOST01"

	)

269 
	#SSL_TXT_aGOST
 "aGOST"

	)

270 
	#SSL_TXT_aSRP
 "aSRP"

	)

272 
	#SSL_TXT_DSS
 "DSS"

	)

273 
	#SSL_TXT_DH
 "DH"

	)

274 
	#SSL_TXT_EDH
 "EDH"

	)

275 
	#SSL_TXT_DHE
 "DHE"

	)

276 
	#SSL_TXT_ADH
 "ADH"

	)

277 
	#SSL_TXT_RSA
 "RSA"

	)

278 
	#SSL_TXT_ECDH
 "ECDH"

	)

279 
	#SSL_TXT_EECDH
 "EECDH"

	)

280 
	#SSL_TXT_ECDHE
 "ECDHE"

	)

281 
	#SSL_TXT_AECDH
 "AECDH"

	)

282 
	#SSL_TXT_ECDSA
 "ECDSA"

	)

283 
	#SSL_TXT_KRB5
 "KRB5"

	)

284 
	#SSL_TXT_PSK
 "PSK"

	)

285 
	#SSL_TXT_SRP
 "SRP"

	)

287 
	#SSL_TXT_DES
 "DES"

	)

288 
	#SSL_TXT_3DES
 "3DES"

	)

289 
	#SSL_TXT_RC4
 "RC4"

	)

290 
	#SSL_TXT_RC2
 "RC2"

	)

291 
	#SSL_TXT_IDEA
 "IDEA"

	)

292 
	#SSL_TXT_SEED
 "SEED"

	)

293 
	#SSL_TXT_AES128
 "AES128"

	)

294 
	#SSL_TXT_AES256
 "AES256"

	)

295 
	#SSL_TXT_AES
 "AES"

	)

296 
	#SSL_TXT_AES_GCM
 "AESGCM"

	)

297 
	#SSL_TXT_CAMELLIA128
 "CAMELLIA128"

	)

298 
	#SSL_TXT_CAMELLIA256
 "CAMELLIA256"

	)

299 
	#SSL_TXT_CAMELLIA
 "CAMELLIA"

	)

301 
	#SSL_TXT_MD5
 "MD5"

	)

302 
	#SSL_TXT_SHA1
 "SHA1"

	)

303 
	#SSL_TXT_SHA
 "SHA"

	)

304 
	#SSL_TXT_GOST94
 "GOST94"

	)

305 
	#SSL_TXT_GOST89MAC
 "GOST89MAC"

	)

306 
	#SSL_TXT_SHA256
 "SHA256"

	)

307 
	#SSL_TXT_SHA384
 "SHA384"

	)

309 
	#SSL_TXT_SSLV2
 "SSLv2"

	)

310 
	#SSL_TXT_SSLV3
 "SSLv3"

	)

311 
	#SSL_TXT_TLSV1
 "TLSv1"

	)

312 
	#SSL_TXT_TLSV1_1
 "TLSv1.1"

	)

313 
	#SSL_TXT_TLSV1_2
 "TLSv1.2"

	)

315 
	#SSL_TXT_EXP
 "EXP"

	)

316 
	#SSL_TXT_EXPORT
 "EXPORT"

	)

318 
	#SSL_TXT_ALL
 "ALL"

	)

334 
	#SSL_TXT_CMPALL
 "COMPLEMENTOFALL"

	)

335 
	#SSL_TXT_CMPDEF
 "COMPLEMENTOFDEFAULT"

	)

341 
	#SSL_DEFAULT_CIPHER_LIST
 "ALL:!EXPORT:!aNULL:!eNULL:!SSLv2"

	)

350 
	#SSL_SENT_SHUTDOWN
 1

	)

351 
	#SSL_RECEIVED_SHUTDOWN
 2

	)

353 #ifde‡
__˝lu•lus


357 #ifde‡ 
__˝lu•lus


361 #i‡(
deföed
(
OPENSSL_NO_RSA
Ë|| deföed(
OPENSSL_NO_MD5
)Ë&& !deföed(
OPENSSL_NO_SSL2
)

362 
	#OPENSSL_NO_SSL2


	)

365 
	#SSL_FILETYPE_ASN1
 
X509_FILETYPE_ASN1


	)

366 
	#SSL_FILETYPE_PEM
 
X509_FILETYPE_PEM


	)

372 
s¶_°
 *
	ts¶_¸ock_°
;

373 
és_£ssi⁄_tickë_ext_°
 
	tTLS_SESSION_TICKET_EXT
;

374 
s¶_mëhod_°
 
	tSSL_METHOD
;

375 
s¶_cùhî_°
 
	tSSL_CIPHER
;

376 
s¶_£ssi⁄_°
 
	tSSL_SESSION
;

377 
és_sigÆgs_°
 
	tTLS_SIGALGS
;

378 
s¶_c⁄f_˘x_°
 
	tSSL_CONF_CTX
;

380 
DECLARE_STACK_OF
(
SSL_CIPHER
)

383 
	s§ç_¥Ÿe˘i⁄_¥ofûe_°
 {

384 c⁄° *
«me
;

385 
id
;

386 } 
	tSRTP_PROTECTION_PROFILE
;

388 
DECLARE_STACK_OF
(
SRTP_PROTECTION_PROFILE
)

390 (*
és_£ssi⁄_tickë_ext_cb_‚
Ë(
	tSSL
 *
	ts
,

391 c⁄° *
	td©a
,

392 
	tÀn
, *
	t¨g
);

393 (*
és_£ssi⁄_£¸ë_cb_‚
Ë(
	tSSL
 *
	ts
, *
	t£¸ë
,

394 *
	t£¸ë_Àn
,

395 
	tSTACK_OF
(
	tSSL_CIPHER
Ë*
	t≥î_cùhîs
,

396 
	tSSL_CIPHER
 **
	tcùhî
, *
	t¨g
);

398 #i‚de‡
OPENSSL_NO_TLSEXT


402 (*
cu°om_ext_add_cb
Ë(
	tSSL
 *
	ts
, 
	text_ty≥
,

403 c⁄° **
	tout
,

404 
	tsize_t
 *
	touéí
, *
	tÆ
, *
	tadd_¨g
);

406 (*
cu°om_ext_‰ì_cb
Ë(
	tSSL
 *
	ts
, 
	text_ty≥
,

407 c⁄° *
	tout
, *
	tadd_¨g
);

409 (*
cu°om_ext_∑r£_cb
Ë(
	tSSL
 *
	ts
, 
	text_ty≥
,

410 c⁄° *
	tö
,

411 
	tsize_t
 
	töÀn
, *
	tÆ
, *
	t∑r£_¨g
);

415 #i‚de‡
OPENSSL_NO_SSL_INTERN


418 
	ss¶_cùhî_°
 {

419 
vÆid
;

420 c⁄° *
«me
;

421 
id
;

426 
Æg‹ôhm_mkey
;

427 
Æg‹ôhm_auth
;

428 
Æg‹ôhm_íc
;

429 
Æg‹ôhm_mac
;

430 
Æg‹ôhm_s¶
;

431 
Ægo_°ªngth
;

432 
Æg‹ôhm2
;

433 
°ªngth_bôs
;

434 
Æg_bôs
;

438 
	ss¶_mëhod_°
 {

439 
vîsi⁄
;

440 (*
s¶_√w
Ë(
SSL
 *
s
);

441 (*
s¶_˛ór
Ë(
SSL
 *
s
);

442 (*
s¶_‰ì
Ë(
SSL
 *
s
);

443 (*
s¶_ac˚±
Ë(
SSL
 *
s
);

444 (*
s¶_c⁄√˘
Ë(
SSL
 *
s
);

445 (*
s¶_ªad
Ë(
SSL
 *
s
, *
buf
, 
Àn
);

446 (*
s¶_≥ek
Ë(
SSL
 *
s
, *
buf
, 
Àn
);

447 (*
s¶_wrôe
Ë(
SSL
 *
s
, c⁄° *
buf
, 
Àn
);

448 (*
s¶_shutdown
Ë(
SSL
 *
s
);

449 (*
s¶_ª√gŸüã
Ë(
SSL
 *
s
);

450 (*
s¶_ª√gŸüã_check
Ë(
SSL
 *
s
);

451 (*
s¶_gë_mesßge
Ë(
SSL
 *
s
, 
°1
, 
°n
, 
mt
, 

452 
max
, *
ok
);

453 (*
s¶_ªad_byãs
Ë(
SSL
 *
s
, 
ty≥
, *
buf
, 
Àn
,

454 
≥ek
);

455 (*
s¶_wrôe_byãs
Ë(
SSL
 *
s
, 
ty≥
, c⁄° *
buf_
, 
Àn
);

456 (*
s¶_di•©ch_Æît
Ë(
SSL
 *
s
);

457 (*
s¶_˘æ
Ë(
SSL
 *
s
, 
cmd
, 
œrg
, *
∑rg
);

458 (*
s¶_˘x_˘æ
Ë(
SSL_CTX
 *
˘x
, 
cmd
, 
œrg
, *
∑rg
);

459 c⁄° 
SSL_CIPHER
 *(*
gë_cùhî_by_ch¨
Ë(c⁄° *
±r
);

460 (*
put_cùhî_by_ch¨
Ë(c⁄° 
SSL_CIPHER
 *
cùhî
, *
±r
);

461 (*
s¶_≥ndög
Ë(c⁄° 
SSL
 *
s
);

462 (*
num_cùhîs
) ();

463 c⁄° 
SSL_CIPHER
 *(*
gë_cùhî
Ë(
ncùhî
);

464 c⁄° 
s¶_mëhod_°
 *(*
gë_s¶_mëhod
Ë(
vîsi⁄
);

465 (*
gë_timeout
) ();

466 
s¶3_íc_mëhod
 *
s¶3_íc
;

467 (*
s¶_vîsi⁄
) ();

468 (*
s¶_ˇŒback_˘æ
Ë(
SSL
 *
s
, 
cb_id
, (*
Â
) ());

469 (*
s¶_˘x_ˇŒback_˘æ
Ë(
SSL_CTX
 *
s
, 
cb_id
, (*
Â
) ());

498 
	ss¶_£ssi⁄_°
 {

499 
s¶_vîsi⁄
;

502 
key_¨g_Àngth
;

503 
key_¨g
[
SSL_MAX_KEY_ARG_LENGTH
];

504 
ma°î_key_Àngth
;

505 
ma°î_key
[
SSL_MAX_MASTER_KEY_LENGTH
];

507 
£ssi⁄_id_Àngth
;

508 
£ssi⁄_id
[
SSL_MAX_SSL_SESSION_ID_LENGTH
];

514 
sid_˘x_Àngth
;

515 
sid_˘x
[
SSL_MAX_SID_CTX_LENGTH
];

516 #i‚de‡
OPENSSL_NO_KRB5


517 
krb5_˛õ¡_¥öc_Àn
;

518 
krb5_˛õ¡_¥öc
[
SSL_MAX_KRB5_PRINCIPAL_LENGTH
];

520 #i‚de‡
OPENSSL_NO_PSK


521 *
psk_idítôy_höt
;

522 *
psk_idítôy
;

529 
nŸ_ªsumabÀ
;

531 
£ss_˚π_°
 *
£ss_˚π
;

538 
X509
 *
≥î
;

543 
vîify_ªsu…
;

544 
ª„ªn˚s
;

545 
timeout
;

546 
time
;

547 
com¥ess_mëh
;

548 c⁄° 
SSL_CIPHER
 *
cùhî
;

549 
cùhî_id
;

551 
STACK_OF
(
SSL_CIPHER
Ë*
cùhîs
;

552 
CRYPTO_EX_DATA
 
ex_d©a
;

557 
s¶_£ssi⁄_°
 *
¥ev
, *
√xt
;

558 #i‚de‡
OPENSSL_NO_TLSEXT


559 *
é£xt_ho°«me
;

560 #i‚de‡
OPENSSL_NO_EC


561 
size_t
 
é£xt_e˝oötf‹m©li°_Àngth
;

562 *
é£xt_e˝oötf‹m©li°
;

563 
size_t
 
é£xt_ñlùticcurvñi°_Àngth
;

564 *
é£xt_ñlùticcurvñi°
;

567 *
é£xt_tick
;

568 
size_t
 
é£xt_tickÀn
;

569 
é£xt_tick_li„time_höt
;

571 #i‚de‡
OPENSSL_NO_SRP


572 *
§p_u£∫ame
;

578 
	#SSL_OP_MICROSOFT_SESS_ID_BUG
 0x00000001L

	)

579 
	#SSL_OP_NETSCAPE_CHALLENGE_BUG
 0x00000002L

	)

581 
	#SSL_OP_LEGACY_SERVER_CONNECT
 0x00000004L

	)

582 
	#SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG
 0x00000008L

	)

583 
	#SSL_OP_TLSEXT_PADDING
 0x00000010L

	)

584 
	#SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER
 0x00000020L

	)

585 
	#SSL_OP_SAFARI_ECDHE_ECDSA_BUG
 0x00000040L

	)

586 
	#SSL_OP_SSLEAY_080_CLIENT_DH_BUG
 0x00000080L

	)

587 
	#SSL_OP_TLS_D5_BUG
 0x00000100L

	)

588 
	#SSL_OP_TLS_BLOCK_PADDING_BUG
 0x00000200L

	)

591 
	#SSL_OP_MSIE_SSLV2_RSA_PADDING
 0x0

	)

593 
	#SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG
 0x0

	)

603 
	#SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
 0x00000800L

	)

609 
	#SSL_OP_ALL
 0x80000BFFL

	)

612 
	#SSL_OP_NO_QUERY_MTU
 0x00001000L

	)

614 
	#SSL_OP_COOKIE_EXCHANGE
 0x00002000L

	)

616 
	#SSL_OP_NO_TICKET
 0x00004000L

	)

618 
	#SSL_OP_CISCO_ANYCONNECT
 0x00008000L

	)

621 
	#SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION
 0x00010000L

	)

623 
	#SSL_OP_NO_COMPRESSION
 0x00020000L

	)

625 
	#SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION
 0x00040000L

	)

627 
	#SSL_OP_SINGLE_ECDH_USE
 0x00080000L

	)

629 
	#SSL_OP_SINGLE_DH_USE
 0x00100000L

	)

631 
	#SSL_OP_EPHEMERAL_RSA
 0x0

	)

635 
	#SSL_OP_CIPHER_SERVER_PREFERENCE
 0x00400000L

	)

642 
	#SSL_OP_TLS_ROLLBACK_BUG
 0x00800000L

	)

644 
	#SSL_OP_NO_SSLv2
 0x01000000L

	)

645 
	#SSL_OP_NO_SSLv3
 0x02000000L

	)

646 
	#SSL_OP_NO_TLSv1
 0x04000000L

	)

647 
	#SSL_OP_NO_TLSv1_2
 0x08000000L

	)

648 
	#SSL_OP_NO_TLSv1_1
 0x10000000L

	)

650 
	#SSL_OP_NO_DTLSv1
 0x04000000L

	)

651 
	#SSL_OP_NO_DTLSv1_2
 0x08000000L

	)

653 
	#SSL_OP_NO_SSL_MASK
 (
SSL_OP_NO_SSLv2
|
SSL_OP_NO_SSLv3
|\

654 
SSL_OP_NO_TLSv1
|
SSL_OP_NO_TLSv1_1
|
SSL_OP_NO_TLSv1_2
)

	)

664 
	#SSL_OP_PKCS1_CHECK_1
 0x0

	)

665 
	#SSL_OP_PKCS1_CHECK_2
 0x0

	)

667 
	#SSL_OP_NETSCAPE_CA_DN_BUG
 0x20000000L

	)

668 
	#SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG
 0x40000000L

	)

674 
	#SSL_OP_CRYPTOPRO_TLSEXT_BUG
 0x80000000L

	)

680 
	#SSL_MODE_ENABLE_PARTIAL_WRITE
 0x00000001L

	)

687 
	#SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER
 0x00000002L

	)

691 
	#SSL_MODE_AUTO_RETRY
 0x00000004L

	)

693 
	#SSL_MODE_NO_AUTO_CHAIN
 0x00000008L

	)

699 
	#SSL_MODE_RELEASE_BUFFERS
 0x00000010L

	)

705 
	#SSL_MODE_SEND_CLIENTHELLO_TIME
 0x00000020L

	)

706 
	#SSL_MODE_SEND_SERVERHELLO_TIME
 0x00000040L

	)

715 
	#SSL_MODE_SEND_FALLBACK_SCSV
 0x00000080L

	)

722 
	#SSL_CERT_FLAG_TLS_STRICT
 0x00000001L

	)

725 
	#SSL_CERT_FLAG_SUITEB_128_LOS_ONLY
 0x10000

	)

727 
	#SSL_CERT_FLAG_SUITEB_192_LOS
 0x20000

	)

729 
	#SSL_CERT_FLAG_SUITEB_128_LOS
 0x30000

	)

732 
	#SSL_CERT_FLAG_BROKEN_PROTOCOL
 0x10000000

	)

736 
	#SSL_BUILD_CHAIN_FLAG_UNTRUSTED
 0x1

	)

738 
	#SSL_BUILD_CHAIN_FLAG_NO_ROOT
 0x2

	)

740 
	#SSL_BUILD_CHAIN_FLAG_CHECK
 0x4

	)

742 
	#SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR
 0x8

	)

744 
	#SSL_BUILD_CHAIN_FLAG_CLEAR_ERROR
 0x10

	)

748 
	#CERT_PKEY_VALID
 0x1

	)

750 
	#CERT_PKEY_SIGN
 0x2

	)

752 
	#CERT_PKEY_EE_SIGNATURE
 0x10

	)

754 
	#CERT_PKEY_CA_SIGNATURE
 0x20

	)

756 
	#CERT_PKEY_EE_PARAM
 0x40

	)

758 
	#CERT_PKEY_CA_PARAM
 0x80

	)

760 
	#CERT_PKEY_EXPLICIT_SIGN
 0x100

	)

762 
	#CERT_PKEY_ISSUER_NAME
 0x200

	)

764 
	#CERT_PKEY_CERT_TYPE
 0x400

	)

766 
	#CERT_PKEY_SUITEB
 0x800

	)

768 
	#SSL_CONF_FLAG_CMDLINE
 0x1

	)

769 
	#SSL_CONF_FLAG_FILE
 0x2

	)

770 
	#SSL_CONF_FLAG_CLIENT
 0x4

	)

771 
	#SSL_CONF_FLAG_SERVER
 0x8

	)

772 
	#SSL_CONF_FLAG_SHOW_ERRORS
 0x10

	)

773 
	#SSL_CONF_FLAG_CERTIFICATE
 0x20

	)

775 
	#SSL_CONF_TYPE_UNKNOWN
 0x0

	)

776 
	#SSL_CONF_TYPE_STRING
 0x1

	)

777 
	#SSL_CONF_TYPE_FILE
 0x2

	)

778 
	#SSL_CONF_TYPE_DIR
 0x3

	)

785 
	#SSL_CTX_£t_›ti⁄s
(
˘x
,
›
) \

786 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_OPTIONS
,(
›
),
NULL
)

	)

787 
	#SSL_CTX_˛ór_›ti⁄s
(
˘x
,
›
) \

788 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_CLEAR_OPTIONS
,(
›
),
NULL
)

	)

789 
	#SSL_CTX_gë_›ti⁄s
(
˘x
) \

790 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_OPTIONS
,0,
NULL
)

	)

791 
	#SSL_£t_›ti⁄s
(
s¶
,
›
) \

792 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_OPTIONS
,(
›
),
NULL
)

	)

793 
	#SSL_˛ór_›ti⁄s
(
s¶
,
›
) \

794 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_OPTIONS
,(
›
),
NULL
)

	)

795 
	#SSL_gë_›ti⁄s
(
s¶
) \

796 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_OPTIONS
,0,
NULL
)

	)

798 
	#SSL_CTX_£t_mode
(
˘x
,
›
) \

799 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_MODE
,(
›
),
NULL
)

	)

800 
	#SSL_CTX_˛ór_mode
(
˘x
,
›
) \

801 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_CLEAR_MODE
,(
›
),
NULL
)

	)

802 
	#SSL_CTX_gë_mode
(
˘x
) \

803 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_MODE
,0,
NULL
)

	)

804 
	#SSL_˛ór_mode
(
s¶
,
›
) \

805 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_MODE
,(
›
),
NULL
)

	)

806 
	#SSL_£t_mode
(
s¶
,
›
) \

807 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_MODE
,(
›
),
NULL
)

	)

808 
	#SSL_gë_mode
(
s¶
) \

809 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_MODE
,0,
NULL
)

	)

810 
	#SSL_£t_mtu
(
s¶
, 
mtu
) \

811 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_SET_MTU
,(
mtu
),
NULL
)

	)

812 
	#DTLS_£t_lök_mtu
(
s¶
, 
mtu
) \

813 
	`SSL_˘æ
((
s¶
),
DTLS_CTRL_SET_LINK_MTU
,(
mtu
),
NULL
)

	)

814 
	#DTLS_gë_lök_mö_mtu
(
s¶
) \

815 
	`SSL_˘æ
((
s¶
),
DTLS_CTRL_GET_LINK_MIN_MTU
,0,
NULL
)

	)

817 
	#SSL_gë_£cuª_ª√gŸüti⁄_suµ‹t
(
s¶
) \

818 
	`SSL_˘æ
((
s¶
), 
SSL_CTRL_GET_RI_SUPPORT
, 0, 
NULL
)

	)

820 #i‚de‡
OPENSSL_NO_HEARTBEATS


821 
	#SSL_hóπbót
(
s¶
) \

822 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_TLS_EXT_SEND_HEARTBEAT
,0,
NULL
)

	)

825 
	#SSL_CTX_£t_˚π_Êags
(
˘x
,
›
) \

826 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_CERT_FLAGS
,(
›
),
NULL
)

	)

827 
	#SSL_£t_˚π_Êags
(
s
,
›
) \

828 
	`SSL_˘æ
((
s
),
SSL_CTRL_CERT_FLAGS
,(
›
),
NULL
)

	)

829 
	#SSL_CTX_˛ór_˚π_Êags
(
˘x
,
›
) \

830 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_CLEAR_CERT_FLAGS
,(
›
),
NULL
)

	)

831 
	#SSL_˛ór_˚π_Êags
(
s
,
›
) \

832 
	`SSL_˘æ
((
s
),
SSL_CTRL_CLEAR_CERT_FLAGS
,(
›
),
NULL
)

	)

834 
SSL_CTX_£t_msg_ˇŒback
(
SSL_CTX
 *
˘x
,

835 (*
cb
Ë(
wrôe_p
, 
vîsi⁄
,

836 
c⁄ã¡_ty≥
, c⁄° *
buf
,

837 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
));

838 
SSL_£t_msg_ˇŒback
(
SSL
 *
s¶
,

839 (*
cb
Ë(
wrôe_p
, 
vîsi⁄
,

840 
c⁄ã¡_ty≥
, c⁄° *
buf
,

841 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
));

842 
	#SSL_CTX_£t_msg_ˇŒback_¨g
(
˘x
, 
¨g
Ë
	`SSL_CTX_˘æ
((˘x), 
SSL_CTRL_SET_MSG_CALLBACK_ARG
, 0, (¨g))

	)

843 
	#SSL_£t_msg_ˇŒback_¨g
(
s¶
, 
¨g
Ë
	`SSL_˘æ
((s¶), 
SSL_CTRL_SET_MSG_CALLBACK_ARG
, 0, (¨g))

	)

845 #i‚de‡
OPENSSL_NO_SRP


847 #i‚de‡
OPENSSL_NO_SSL_INTERN


849 
	s§p_˘x_°
 {

851 *
SRP_cb_¨g
;

853 (*
TLS_ext_§p_u£∫ame_ˇŒback
Ë(
SSL
 *, *, *);

855 (*
SRP_vîify_∑øm_ˇŒback
Ë(
SSL
 *, *);

857 *(*
SRP_give_§p_˛õ¡_pwd_ˇŒback
Ë(
SSL
 *, *);

858 *
logö
;

859 
BIGNUM
 *
N
, *
g
, *
s
, *
B
, *
A
;

860 
BIGNUM
 *
a
, *
b
, *
v
;

861 *
öfo
;

862 
°ªngth
;

863 
§p_Mask
;

864 } 
	tSRP_CTX
;

869 
SSL_SRP_CTX_öô
(
SSL
 *
s
);

870 
SSL_CTX_SRP_CTX_öô
(
SSL_CTX
 *
˘x
);

871 
SSL_SRP_CTX_‰ì
(
SSL
 *
˘x
);

872 
SSL_CTX_SRP_CTX_‰ì
(
SSL_CTX
 *
˘x
);

873 
SSL_§p_£rvî_∑øm_wôh_u£∫ame
(
SSL
 *
s
, *
ad
);

874 
SRP_gíî©e_£rvî_ma°î_£¸ë
(
SSL
 *
s
, *
ma°î_key
);

875 
SRP_CÆc_A_∑øm
(
SSL
 *
s
);

876 
SRP_gíî©e_˛õ¡_ma°î_£¸ë
(
SSL
 *
s
, *
ma°î_key
);

880 #i‡
deföed
(
OPENSSL_SYS_MSDOS
Ë&& !deföed(
OPENSSL_SYS_WIN32
)

881 
	#SSL_MAX_CERT_LIST_DEFAULT
 1024*30

	)

884 
	#SSL_MAX_CERT_LIST_DEFAULT
 1024*100

	)

888 
	#SSL_SESSION_CACHE_MAX_SIZE_DEFAULT
 (1024*20)

	)

905 (*
GEN_SESSION_CB
Ë(c⁄° 
	tSSL
 *
	ts¶
, *
	tid
,

906 *
	tid_Àn
);

908 
s¶_comp_°
 
	tSSL_COMP
;

910 #i‚de‡
OPENSSL_NO_SSL_INTERN


912 
	ss¶_comp_°
 {

913 
id
;

914 c⁄° *
«me
;

915 #i‚de‡
OPENSSL_NO_COMP


916 
COMP_METHOD
 *
mëhod
;

918 *
mëhod
;

922 
DECLARE_STACK_OF
(
SSL_COMP
)

923 
DECLARE_LHASH_OF
(
SSL_SESSION
);

925 
	ss¶_˘x_°
 {

926 c⁄° 
SSL_METHOD
 *
mëhod
;

927 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°
;

929 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°_by_id
;

930 
x509_°‹e_°
 *
˚π_°‹e
;

931 
LHASH_OF
(
SSL_SESSION
Ë*
£ssi⁄s
;

936 
£ssi⁄_ˇche_size
;

937 
s¶_£ssi⁄_°
 *
£ssi⁄_ˇche_hód
;

938 
s¶_£ssi⁄_°
 *
£ssi⁄_ˇche_èû
;

944 
£ssi⁄_ˇche_mode
;

950 
£ssi⁄_timeout
;

960 (*
√w_£ssi⁄_cb
Ë(
s¶_°
 *
s¶
, 
SSL_SESSION
 *
£ss
);

961 (*
ªmove_£ssi⁄_cb
Ë(
s¶_˘x_°
 *
˘x
, 
SSL_SESSION
 *
£ss
);

962 
SSL_SESSION
 *(*
gë_£ssi⁄_cb
Ë(
s¶_°
 *
s¶
,

963 *
d©a
, 
Àn
, *
c›y
);

965 
£ss_c⁄√˘
;

966 
£ss_c⁄√˘_ª√gŸüã
;

967 
£ss_c⁄√˘_good
;

968 
£ss_ac˚±
;

969 
£ss_ac˚±_ª√gŸüã
;

970 
£ss_ac˚±_good
;

971 
£ss_miss
;

972 
£ss_timeout
;

973 
£ss_ˇche_fuŒ
;

974 
£ss_hô
;

975 
£ss_cb_hô
;

980 } 
°©s
;

982 
ª„ªn˚s
;

985 (*
≠p_vîify_ˇŒback
Ë(
X509_STORE_CTX
 *, *);

986 *
≠p_vîify_¨g
;

993 
≥m_∑ssw‹d_cb
 *
deÁu…_∑sswd_ˇŒback
;

996 *
deÁu…_∑sswd_ˇŒback_u£rd©a
;

999 (*
˛õ¡_˚π_cb
Ë(
SSL
 *
s¶
, 
X509
 **
x509
, 
EVP_PKEY
 **
pkey
);

1002 (*
≠p_gí_cookõ_cb
Ë(
SSL
 *
s¶
, *
cookõ
,

1003 *
cookõ_Àn
);

1006 (*
≠p_vîify_cookõ_cb
Ë(
SSL
 *
s¶
, *
cookõ
,

1007 
cookõ_Àn
);

1009 
CRYPTO_EX_DATA
 
ex_d©a
;

1011 c⁄° 
EVP_MD
 *
rß_md5
;

1012 c⁄° 
EVP_MD
 *
md5
;

1013 c⁄° 
EVP_MD
 *
sha1
;

1015 
STACK_OF
(
X509
Ë*
exåa_˚πs
;

1016 
STACK_OF
(
SSL_COMP
Ë*
comp_mëhods
;

1021 (*
öfo_ˇŒback
Ë(c⁄° 
SSL
 *
s¶
, 
ty≥
, 
vÆ
);

1024 
STACK_OF
(
X509_NAME
Ë*
˛õ¡_CA
;

1031 
›ti⁄s
;

1032 
mode
;

1033 
max_˚π_li°
;

1035 
˚π_°
 *
˚π
;

1036 
ªad_ahód
;

1039 (*
msg_ˇŒback
Ë(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
,

1040 c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
);

1041 *
msg_ˇŒback_¨g
;

1043 
vîify_mode
;

1044 
sid_˘x_Àngth
;

1045 
sid_˘x
[
SSL_MAX_SID_CTX_LENGTH
];

1047 (*
deÁu…_vîify_ˇŒback
Ë(
ok
, 
X509_STORE_CTX
 *
˘x
);

1050 
GEN_SESSION_CB
 
gíî©e_£ssi⁄_id
;

1052 
X509_VERIFY_PARAM
 *
∑øm
;

1055 
puΩo£
;

1056 
åu°
;

1059 
quõt_shutdown
;

1065 
max_£nd_‰agmít
;

1067 #i‚de‡
OPENSSL_NO_ENGINE


1071 
ENGINE
 *
˛õ¡_˚π_ígöe
;

1074 #i‚de‡
OPENSSL_NO_TLSEXT


1076 (*
é£xt_£rvî«me_ˇŒback
Ë(
SSL
 *, *, *);

1077 *
é£xt_£rvî«me_¨g
;

1079 
é£xt_tick_key_«me
[16];

1080 
é£xt_tick_hmac_key
[16];

1081 
é£xt_tick_´s_key
[16];

1083 (*
é£xt_tickë_key_cb
Ë(
SSL
 *
s¶
,

1084 *
«me
, *
iv
,

1085 
EVP_CIPHER_CTX
 *
e˘x
,

1086 
HMAC_CTX
 *
h˘x
, 
íc
);

1090 (*
é£xt_°©us_cb
Ë(
SSL
 *
s¶
, *
¨g
);

1091 *
é£xt_°©us_¨g
;

1094 (*
é£xt_›aque_¥f_öput_ˇŒback
Ë(
SSL
 *, *
≥îöput
,

1095 
size_t
 
Àn
, *
¨g
);

1096 *
é£xt_›aque_¥f_öput_ˇŒback_¨g
;

1099 #i‚de‡
OPENSSL_NO_PSK


1100 *
psk_idítôy_höt
;

1101 (*
psk_˛õ¡_ˇŒback
Ë(
SSL
 *
s¶
, c⁄° *
höt
,

1102 *
idítôy
,

1103 
max_idítôy_Àn
,

1104 *
psk
,

1105 
max_psk_Àn
);

1106 (*
psk_£rvî_ˇŒback
Ë(
SSL
 *
s¶
, c⁄° *
idítôy
,

1107 *
psk
,

1108 
max_psk_Àn
);

1111 #i‚de‡
OPENSSL_NO_BUF_FREELISTS


1112 
	#SSL_MAX_BUF_FREELIST_LEN_DEFAULT
 32

	)

1113 
‰ìli°_max_Àn
;

1114 
s¶3_buf_‰ìli°_°
 *
wbuf_‰ìli°
;

1115 
s¶3_buf_‰ìli°_°
 *
rbuf_‰ìli°
;

1117 #i‚de‡
OPENSSL_NO_SRP


1118 
SRP_CTX
 
§p_˘x
;

1121 #i‚de‡
OPENSSL_NO_TLSEXT


1123 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


1131 (*
√xt_¥Ÿos_advîti£d_cb
Ë(
SSL
 *
s
, c⁄° **
buf
,

1132 *
Àn
, *
¨g
);

1133 *
√xt_¥Ÿos_advîti£d_cb_¨g
;

1138 (*
√xt_¥Ÿo_£À˘_cb
Ë(
SSL
 *
s
, **
out
,

1139 *
ouéí
,

1140 c⁄° *
ö
,

1141 
öÀn
, *
¨g
);

1142 *
√xt_¥Ÿo_£À˘_cb_¨g
;

1145 
STACK_OF
(
SRTP_PROTECTION_PROFILE
Ë*
§ç_¥ofûes
;

1162 (*
Æ≤_£À˘_cb
Ë(
SSL
 *
s
,

1163 c⁄° **
out
,

1164 *
ouéí
,

1165 c⁄° *
ö
,

1166 
öÀn
, *
¨g
);

1167 *
Æ≤_£À˘_cb_¨g
;

1173 *
Æ≤_˛õ¡_¥Ÿo_li°
;

1174 
Æ≤_˛õ¡_¥Ÿo_li°_Àn
;

1176 #i‚de‡
OPENSSL_NO_EC


1178 
size_t
 
é£xt_e˝oötf‹m©li°_Àngth
;

1179 *
é£xt_e˝oötf‹m©li°
;

1180 
size_t
 
é£xt_ñlùticcurvñi°_Àngth
;

1181 *
é£xt_ñlùticcurvñi°
;

1188 
	#SSL_SESS_CACHE_OFF
 0x0000

	)

1189 
	#SSL_SESS_CACHE_CLIENT
 0x0001

	)

1190 
	#SSL_SESS_CACHE_SERVER
 0x0002

	)

1191 
	#SSL_SESS_CACHE_BOTH
 (
SSL_SESS_CACHE_CLIENT
|
SSL_SESS_CACHE_SERVER
)

	)

1192 
	#SSL_SESS_CACHE_NO_AUTO_CLEAR
 0x0080

	)

1194 
	#SSL_SESS_CACHE_NO_INTERNAL_LOOKUP
 0x0100

	)

1195 
	#SSL_SESS_CACHE_NO_INTERNAL_STORE
 0x0200

	)

1196 
	#SSL_SESS_CACHE_NO_INTERNAL
 \

1197 (
SSL_SESS_CACHE_NO_INTERNAL_LOOKUP
|
SSL_SESS_CACHE_NO_INTERNAL_STORE
)

	)

1199 
LHASH_OF
(
SSL_SESSION
Ë*
SSL_CTX_£ssi⁄s
(
SSL_CTX
 *
˘x
);

1200 
	#SSL_CTX_£ss_numbî
(
˘x
) \

1201 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_NUMBER
,0,
NULL
)

	)

1202 
	#SSL_CTX_£ss_c⁄√˘
(
˘x
) \

1203 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT
,0,
NULL
)

	)

1204 
	#SSL_CTX_£ss_c⁄√˘_good
(
˘x
) \

1205 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT_GOOD
,0,
NULL
)

	)

1206 
	#SSL_CTX_£ss_c⁄√˘_ª√gŸüã
(
˘x
) \

1207 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT_RENEGOTIATE
,0,
NULL
)

	)

1208 
	#SSL_CTX_£ss_ac˚±
(
˘x
) \

1209 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT
,0,
NULL
)

	)

1210 
	#SSL_CTX_£ss_ac˚±_ª√gŸüã
(
˘x
) \

1211 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT_RENEGOTIATE
,0,
NULL
)

	)

1212 
	#SSL_CTX_£ss_ac˚±_good
(
˘x
) \

1213 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT_GOOD
,0,
NULL
)

	)

1214 
	#SSL_CTX_£ss_hôs
(
˘x
) \

1215 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_HIT
,0,
NULL
)

	)

1216 
	#SSL_CTX_£ss_cb_hôs
(
˘x
) \

1217 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CB_HIT
,0,
NULL
)

	)

1218 
	#SSL_CTX_£ss_mis£s
(
˘x
) \

1219 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_MISSES
,0,
NULL
)

	)

1220 
	#SSL_CTX_£ss_timeouts
(
˘x
) \

1221 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_TIMEOUTS
,0,
NULL
)

	)

1222 
	#SSL_CTX_£ss_ˇche_fuŒ
(
˘x
) \

1223 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CACHE_FULL
,0,
NULL
)

	)

1225 
SSL_CTX_£ss_£t_√w_cb
(
SSL_CTX
 *
˘x
,

1226 (*
√w_£ssi⁄_cb
Ë(
s¶_°
 *
s¶
,

1227 
SSL_SESSION
 *
£ss
));

1228 (*
SSL_CTX_£ss_gë_√w_cb
(
SSL_CTX
 *
˘x
)Ë(
s¶_°
 *
s¶
,

1229 
SSL_SESSION
 *
£ss
);

1230 
SSL_CTX_£ss_£t_ªmove_cb
(
SSL_CTX
 *
˘x
,

1231 (*
ªmove_£ssi⁄_cb
Ë(
s¶_˘x_°


1232 *
˘x
,

1233 
SSL_SESSION


1234 *
£ss
));

1235 (*
SSL_CTX_£ss_gë_ªmove_cb
(
SSL_CTX
 *
˘x
)Ë(
s¶_˘x_°
 *ctx,

1236 
SSL_SESSION
 *
£ss
);

1237 
SSL_CTX_£ss_£t_gë_cb
(
SSL_CTX
 *
˘x
,

1238 
SSL_SESSION
 *(*
gë_£ssi⁄_cb
Ë(
s¶_°


1239 *
s¶
,

1241 *
d©a
, 
Àn
,

1242 *
c›y
));

1243 
SSL_SESSION
 *(*
SSL_CTX_£ss_gë_gë_cb
(
SSL_CTX
 *
˘x
)Ë(
s¶_°
 *
s¶
,

1244 *
D©a
,

1245 
Àn
, *
c›y
);

1246 
SSL_CTX_£t_öfo_ˇŒback
(
SSL_CTX
 *
˘x
,

1247 (*
cb
Ë(c⁄° 
SSL
 *
s¶
, 
ty≥
,

1248 
vÆ
));

1249 (*
SSL_CTX_gë_öfo_ˇŒback
(
SSL_CTX
 *
˘x
)Ë(c⁄° 
SSL
 *
s¶
, 
ty≥
,

1250 
vÆ
);

1251 
SSL_CTX_£t_˛õ¡_˚π_cb
(
SSL_CTX
 *
˘x
,

1252 (*
˛õ¡_˚π_cb
Ë(
SSL
 *
s¶
, 
X509
 **
x509
,

1253 
EVP_PKEY
 **
pkey
));

1254 (*
SSL_CTX_gë_˛õ¡_˚π_cb
(
SSL_CTX
 *
˘x
)Ë(
SSL
 *
s¶
, 
X509
 **
x509
,

1255 
EVP_PKEY
 **
pkey
);

1256 #i‚de‡
OPENSSL_NO_ENGINE


1257 
SSL_CTX_£t_˛õ¡_˚π_ígöe
(
SSL_CTX
 *
˘x
, 
ENGINE
 *
e
);

1259 
SSL_CTX_£t_cookõ_gíî©e_cb
(
SSL_CTX
 *
˘x
,

1260 (*
≠p_gí_cookõ_cb
Ë(
SSL
 *
s¶
,

1262 *
cookõ
,

1264 *
cookõ_Àn
));

1265 
SSL_CTX_£t_cookõ_vîify_cb
(
SSL_CTX
 *
˘x
,

1266 (*
≠p_vîify_cookõ_cb
Ë(
SSL
 *
s¶
,

1268 *
cookõ
,

1270 
cookõ_Àn
));

1271 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


1272 
SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb
(
SSL_CTX
 *
s
,

1273 (*
cb
Ë(
SSL
 *
s¶
,

1275 **
out
,

1276 *
ouéí
,

1277 *
¨g
), *arg);

1278 
SSL_CTX_£t_√xt_¥Ÿo_£À˘_cb
(
SSL_CTX
 *
s
,

1279 (*
cb
Ë(
SSL
 *
s¶
,

1280 **
out
,

1281 *
ouéí
,

1282 c⁄° *
ö
,

1283 
öÀn
,

1284 *
¨g
), *arg);

1285 
SSL_gë0_√xt_¥Ÿo_√gŸüãd
(c⁄° 
SSL
 *
s
, c⁄° **
d©a
,

1286 *
Àn
);

1289 #i‚de‡
OPENSSL_NO_TLSEXT


1290 
SSL_£À˘_√xt_¥Ÿo
(**
out
, *
ouéí
,

1291 c⁄° *
ö
, 
öÀn
,

1292 c⁄° *
˛õ¡
,

1293 
˛õ¡_Àn
);

1296 
	#OPENSSL_NPN_UNSUPPORTED
 0

	)

1297 
	#OPENSSL_NPN_NEGOTIATED
 1

	)

1298 
	#OPENSSL_NPN_NO_OVERLAP
 2

	)

1300 
SSL_CTX_£t_Æ≤_¥Ÿos
(
SSL_CTX
 *
˘x
, c⁄° *
¥Ÿos
,

1301 
¥Ÿos_Àn
);

1302 
SSL_£t_Æ≤_¥Ÿos
(
SSL
 *
s¶
, c⁄° *
¥Ÿos
,

1303 
¥Ÿos_Àn
);

1304 
SSL_CTX_£t_Æ≤_£À˘_cb
(
SSL_CTX
 *
˘x
,

1305 (*
cb
Ë(
SSL
 *
s¶
,

1306 c⁄° **
out
,

1307 *
ouéí
,

1308 c⁄° *
ö
,

1309 
öÀn
,

1310 *
¨g
), *arg);

1311 
SSL_gë0_Æ≤_£À˘ed
(c⁄° 
SSL
 *
s¶
, c⁄° **
d©a
,

1312 *
Àn
);

1314 #i‚de‡
OPENSSL_NO_PSK


1319 
	#PSK_MAX_IDENTITY_LEN
 128

	)

1320 
	#PSK_MAX_PSK_LEN
 256

	)

1321 
SSL_CTX_£t_psk_˛õ¡_ˇŒback
(
SSL_CTX
 *
˘x
,

1322 (*
psk_˛õ¡_ˇŒback
Ë(
SSL


1323 *
s¶
,

1326 *
höt
,

1328 *
idítôy
,

1331 
max_idítôy_Àn
,

1334 *
psk
,

1337 
max_psk_Àn
));

1338 
SSL_£t_psk_˛õ¡_ˇŒback
(
SSL
 *
s¶
,

1339 (*
psk_˛õ¡_ˇŒback
Ë(
SSL


1340 *
s¶
,

1343 *
höt
,

1345 *
idítôy
,

1348 
max_idítôy_Àn
,

1351 *
psk
,

1354 
max_psk_Àn
));

1355 
SSL_CTX_£t_psk_£rvî_ˇŒback
(
SSL_CTX
 *
˘x
,

1356 (*
psk_£rvî_ˇŒback
Ë(
SSL


1357 *
s¶
,

1360 *
idítôy
,

1363 *
psk
,

1366 
max_psk_Àn
));

1367 
SSL_£t_psk_£rvî_ˇŒback
(
SSL
 *
s¶
,

1368 (*
psk_£rvî_ˇŒback
Ë(
SSL


1369 *
s¶
,

1372 *
idítôy
,

1375 *
psk
,

1378 
max_psk_Àn
));

1379 
SSL_CTX_u£_psk_idítôy_höt
(
SSL_CTX
 *
˘x
, c⁄° *
idítôy_höt
);

1380 
SSL_u£_psk_idítôy_höt
(
SSL
 *
s
, c⁄° *
idítôy_höt
);

1381 c⁄° *
SSL_gë_psk_idítôy_höt
(c⁄° 
SSL
 *
s
);

1382 c⁄° *
SSL_gë_psk_idítôy
(c⁄° 
SSL
 *
s
);

1385 #i‚de‡
OPENSSL_NO_TLSEXT


1388 
SSL_CTX_add_˛õ¡_cu°om_ext
(
SSL_CTX
 *
˘x
, 
ext_ty≥
,

1389 
cu°om_ext_add_cb
 
add_cb
,

1390 
cu°om_ext_‰ì_cb
 
‰ì_cb
,

1391 *
add_¨g
,

1392 
cu°om_ext_∑r£_cb
 
∑r£_cb
,

1393 *
∑r£_¨g
);

1395 
SSL_CTX_add_£rvî_cu°om_ext
(
SSL_CTX
 *
˘x
, 
ext_ty≥
,

1396 
cu°om_ext_add_cb
 
add_cb
,

1397 
cu°om_ext_‰ì_cb
 
‰ì_cb
,

1398 *
add_¨g
,

1399 
cu°om_ext_∑r£_cb
 
∑r£_cb
,

1400 *
∑r£_¨g
);

1402 
SSL_exãnsi⁄_suµ‹ãd
(
ext_ty≥
);

1406 
	#SSL_NOTHING
 1

	)

1407 
	#SSL_WRITING
 2

	)

1408 
	#SSL_READING
 3

	)

1409 
	#SSL_X509_LOOKUP
 4

	)

1412 
	#SSL_w™t_nŸhög
(
s
Ë(
	`SSL_w™t
(sË=
SSL_NOTHING
)

	)

1413 
	#SSL_w™t_ªad
(
s
Ë(
	`SSL_w™t
(sË=
SSL_READING
)

	)

1414 
	#SSL_w™t_wrôe
(
s
Ë(
	`SSL_w™t
(sË=
SSL_WRITING
)

	)

1415 
	#SSL_w™t_x509_lookup
(
s
Ë(
	`SSL_w™t
(sË=
SSL_X509_LOOKUP
)

	)

1417 
	#SSL_MAC_FLAG_READ_MAC_STREAM
 1

	)

1418 
	#SSL_MAC_FLAG_WRITE_MAC_STREAM
 2

	)

1420 #i‚de‡
OPENSSL_NO_SSL_INTERN


1422 
	ss¶_°
 {

1427 
vîsi⁄
;

1429 
ty≥
;

1431 c⁄° 
SSL_METHOD
 *
mëhod
;

1436 #i‚de‡
OPENSSL_NO_BIO


1438 
BIO
 *
rbio
;

1440 
BIO
 *
wbio
;

1442 
BIO
 *
bbio
;

1445 *
rbio
;

1447 *
wbio
;

1448 *
bbio
;

1455 
rw°©e
;

1457 
ö_h™dshake
;

1458 (*
h™dshake_func
Ë(
SSL
 *);

1467 
£rvî
;

1474 
√w_£ssi⁄
;

1476 
quõt_shutdown
;

1478 
shutdown
;

1480 
°©e
;

1482 
r°©e
;

1483 
BUF_MEM
 *
öô_buf
;

1484 *
öô_msg
;

1486 
öô_num
;

1487 
öô_off
;

1489 *
∑ckë
;

1490 
∑ckë_Àngth
;

1491 
s¶2_°©e_°
 *
s2
;

1492 
s¶3_°©e_°
 *
s3
;

1493 
dés1_°©e_°
 *
d1
;

1494 
ªad_ahód
;

1497 (*
msg_ˇŒback
Ë(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
,

1498 c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
);

1499 *
msg_ˇŒback_¨g
;

1500 
hô
;

1501 
X509_VERIFY_PARAM
 *
∑øm
;

1503 
puΩo£
;

1504 
åu°
;

1507 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°
;

1508 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°_by_id
;

1513 
mac_Êags
;

1514 
EVP_CIPHER_CTX
 *
íc_ªad_˘x
;

1515 
EVP_MD_CTX
 *
ªad_hash
;

1516 #i‚de‡
OPENSSL_NO_COMP


1517 
COMP_CTX
 *
ex∑nd
;

1519 *
ex∑nd
;

1521 
EVP_CIPHER_CTX
 *
íc_wrôe_˘x
;

1522 
EVP_MD_CTX
 *
wrôe_hash
;

1523 #i‚de‡
OPENSSL_NO_COMP


1524 
COMP_CTX
 *
com¥ess
;

1526 *
com¥ess
;

1531 
˚π_°
 *
˚π
;

1536 
sid_˘x_Àngth
;

1537 
sid_˘x
[
SSL_MAX_SID_CTX_LENGTH
];

1539 
SSL_SESSION
 *
£ssi⁄
;

1541 
GEN_SESSION_CB
 
gíî©e_£ssi⁄_id
;

1547 
vîify_mode
;

1549 (*
vîify_ˇŒback
Ë(
ok
, 
X509_STORE_CTX
 *
˘x
);

1551 (*
öfo_ˇŒback
Ë(c⁄° 
SSL
 *
s¶
, 
ty≥
, 
vÆ
);

1553 
îr‹
;

1555 
îr‹_code
;

1556 #i‚de‡
OPENSSL_NO_KRB5


1558 
KSSL_CTX
 *
ks¶_˘x
;

1560 #i‚de‡
OPENSSL_NO_PSK


1561 (*
psk_˛õ¡_ˇŒback
Ë(
SSL
 *
s¶
, c⁄° *
höt
,

1562 *
idítôy
,

1563 
max_idítôy_Àn
,

1564 *
psk
,

1565 
max_psk_Àn
);

1566 (*
psk_£rvî_ˇŒback
Ë(
SSL
 *
s¶
, c⁄° *
idítôy
,

1567 *
psk
,

1568 
max_psk_Àn
);

1570 
SSL_CTX
 *
˘x
;

1575 
debug
;

1577 
vîify_ªsu…
;

1578 
CRYPTO_EX_DATA
 
ex_d©a
;

1580 
STACK_OF
(
X509_NAME
Ë*
˛õ¡_CA
;

1581 
ª„ªn˚s
;

1583 
›ti⁄s
;

1585 
mode
;

1586 
max_˚π_li°
;

1587 
fú°_∑ckë
;

1589 
˛õ¡_vîsi⁄
;

1590 
max_£nd_‰agmít
;

1591 #i‚de‡
OPENSSL_NO_TLSEXT


1593 (*
é£xt_debug_cb
Ë(
SSL
 *
s
, 
˛õ¡_£rvî
, 
ty≥
,

1594 *
d©a
, 
Àn
, *
¨g
);

1595 *
é£xt_debug_¨g
;

1596 *
é£xt_ho°«me
;

1603 
£rvî«me_d⁄e
;

1606 
é£xt_°©us_ty≥
;

1608 
é£xt_°©us_ex≥˘ed
;

1610 
STACK_OF
(
OCSP_RESPID
Ë*
é£xt_oc•_ids
;

1611 
X509_EXTENSIONS
 *
é£xt_oc•_exts
;

1613 *
é£xt_oc•_ª•
;

1614 
é£xt_oc•_ª•Àn
;

1616 
é£xt_tickë_ex≥˘ed
;

1617 #i‚de‡
OPENSSL_NO_EC


1618 
size_t
 
é£xt_e˝oötf‹m©li°_Àngth
;

1620 *
é£xt_e˝oötf‹m©li°
;

1621 
size_t
 
é£xt_ñlùticcurvñi°_Àngth
;

1623 *
é£xt_ñlùticcurvñi°
;

1629 *
é£xt_›aque_¥f_öput
;

1630 
size_t
 
é£xt_›aque_¥f_öput_Àn
;

1632 
TLS_SESSION_TICKET_EXT
 *
é£xt_£ssi⁄_tickë
;

1634 
és_£ssi⁄_tickë_ext_cb_‚
 
és_£ssi⁄_tickë_ext_cb
;

1635 *
és_£ssi⁄_tickë_ext_cb_¨g
;

1637 
és_£ssi⁄_£¸ë_cb_‚
 
és_£ssi⁄_£¸ë_cb
;

1638 *
és_£ssi⁄_£¸ë_cb_¨g
;

1639 
SSL_CTX
 *
öôül_˘x
;

1640 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


1648 *
√xt_¥Ÿo_√gŸüãd
;

1649 
√xt_¥Ÿo_√gŸüãd_Àn
;

1651 
	#£ssi⁄_˘x
 
öôül_˘x


	)

1653 
STACK_OF
(
SRTP_PROTECTION_PROFILE
Ë*
§ç_¥ofûes
;

1655 
SRTP_PROTECTION_PROFILE
 *
§ç_¥ofûe
;

1662 
é£xt_hóπbót
;

1664 
é£xt_hb_≥ndög
;

1666 
é£xt_hb_£q
;

1668 
	#£ssi⁄_˘x
 
˘x


	)

1675 
ª√gŸüã
;

1676 #i‚de‡
OPENSSL_NO_SRP


1678 
SRP_CTX
 
§p_˘x
;

1680 #i‚de‡
OPENSSL_NO_TLSEXT


1685 *
Æ≤_˛õ¡_¥Ÿo_li°
;

1686 
Æ≤_˛õ¡_¥Ÿo_li°_Àn
;

1692 #ifde‡
__˝lu•lus


1696 
	~<›ís¶/s¶2.h
>

1697 
	~<›ís¶/s¶3.h
>

1698 
	~<›ís¶/és1.h
>

1699 
	~<›ís¶/dés1.h
>

1700 
	~<›ís¶/s¶23.h
>

1701 
	~<›ís¶/§ç.h
>

1703 #ifde‡ 
__˝lu•lus


1708 
	#SSL_£t_≠p_d©a
(
s
,
¨g
Ë(
	`SSL_£t_ex_d©a
(s,0,(*Ôrg))

	)

1709 
	#SSL_gë_≠p_d©a
(
s
Ë(
	`SSL_gë_ex_d©a
(s,0))

	)

1710 
	#SSL_SESSION_£t_≠p_d©a
(
s
,
a
Ë(
	`SSL_SESSION_£t_ex_d©a
(s,0,(*Ô))

	)

1711 
	#SSL_SESSION_gë_≠p_d©a
(
s
Ë(
	`SSL_SESSION_gë_ex_d©a
(s,0))

	)

1712 
	#SSL_CTX_gë_≠p_d©a
(
˘x
Ë(
	`SSL_CTX_gë_ex_d©a
(˘x,0))

	)

1713 
	#SSL_CTX_£t_≠p_d©a
(
˘x
,
¨g
Ë(
	`SSL_CTX_£t_ex_d©a
(˘x,0,(*Ôrg))

	)

1723 
	#SSL_ST_CONNECT
 0x1000

	)

1724 
	#SSL_ST_ACCEPT
 0x2000

	)

1725 
	#SSL_ST_MASK
 0x0FFF

	)

1726 
	#SSL_ST_INIT
 (
SSL_ST_CONNECT
|
SSL_ST_ACCEPT
)

	)

1727 
	#SSL_ST_BEFORE
 0x4000

	)

1728 
	#SSL_ST_OK
 0x03

	)

1729 
	#SSL_ST_RENEGOTIATE
 (0x04|
SSL_ST_INIT
)

	)

1730 
	#SSL_ST_ERR
 0x05

	)

1732 
	#SSL_CB_LOOP
 0x01

	)

1733 
	#SSL_CB_EXIT
 0x02

	)

1734 
	#SSL_CB_READ
 0x04

	)

1735 
	#SSL_CB_WRITE
 0x08

	)

1736 
	#SSL_CB_ALERT
 0x4000

	)

1737 
	#SSL_CB_READ_ALERT
 (
SSL_CB_ALERT
|
SSL_CB_READ
)

	)

1738 
	#SSL_CB_WRITE_ALERT
 (
SSL_CB_ALERT
|
SSL_CB_WRITE
)

	)

1739 
	#SSL_CB_ACCEPT_LOOP
 (
SSL_ST_ACCEPT
|
SSL_CB_LOOP
)

	)

1740 
	#SSL_CB_ACCEPT_EXIT
 (
SSL_ST_ACCEPT
|
SSL_CB_EXIT
)

	)

1741 
	#SSL_CB_CONNECT_LOOP
 (
SSL_ST_CONNECT
|
SSL_CB_LOOP
)

	)

1742 
	#SSL_CB_CONNECT_EXIT
 (
SSL_ST_CONNECT
|
SSL_CB_EXIT
)

	)

1743 
	#SSL_CB_HANDSHAKE_START
 0x10

	)

1744 
	#SSL_CB_HANDSHAKE_DONE
 0x20

	)

1747 
	#SSL_gë_°©e
(
a
Ë
	`SSL_°©e
◊)

	)

1748 
	#SSL_is_öô_föished
(
a
Ë(
	`SSL_°©e
◊Ë=
SSL_ST_OK
)

	)

1749 
	#SSL_ö_öô
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_INIT
)

	)

1750 
	#SSL_ö_bef‹e
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_BEFORE
)

	)

1751 
	#SSL_ö_c⁄√˘_öô
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_CONNECT
)

	)

1752 
	#SSL_ö_ac˚±_öô
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_ACCEPT
)

	)

1758 
	#SSL_ST_READ_HEADER
 0xF0

	)

1759 
	#SSL_ST_READ_BODY
 0xF1

	)

1760 
	#SSL_ST_READ_DONE
 0xF2

	)

1768 
size_t
 
SSL_gë_föished
(c⁄° 
SSL
 *
s
, *
buf
, size_à
cou¡
);

1769 
size_t
 
SSL_gë_≥î_föished
(c⁄° 
SSL
 *
s
, *
buf
, size_à
cou¡
);

1775 
	#SSL_VERIFY_NONE
 0x00

	)

1776 
	#SSL_VERIFY_PEER
 0x01

	)

1777 
	#SSL_VERIFY_FAIL_IF_NO_PEER_CERT
 0x02

	)

1778 
	#SSL_VERIFY_CLIENT_ONCE
 0x04

	)

1780 
	#O≥nSSL_add_s¶_Æg‹ôhms
(Ë
	`SSL_libøry_öô
()

	)

1781 
	#SSLóy_add_s¶_Æg‹ôhms
(Ë
	`SSL_libøry_öô
()

	)

1785 
	#SSL_CTX_£t_deÁu…_vîify
(
a
,
b
,
c
Ë
	`SSL_CTX_£t_vîify
◊,b,c)

	)

1786 
	#SSL_£t_¥ef_cùhî
(
c
,
n
Ë
	`SSL_£t_cùhî_li°
(c,n)

	)

1787 
	#SSL_add_£ssi⁄
(
a
,
b
Ë
	`SSL_CTX_add_£ssi⁄
(◊),(b))

	)

1788 
	#SSL_ªmove_£ssi⁄
(
a
,
b
Ë
	`SSL_CTX_ªmove_£ssi⁄
(◊),(b))

	)

1789 
	#SSL_Êush_£ssi⁄s
(
a
,
b
Ë
	`SSL_CTX_Êush_£ssi⁄s
(◊),(b))

	)

1792 
	#SSL_gë_cùhî
(
s
) \

1793 
	`SSL_CIPHER_gë_«me
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1794 
	#SSL_gë_cùhî_bôs
(
s
,
≈
) \

1795 
	`SSL_CIPHER_gë_bôs
(
	`SSL_gë_cuºít_cùhî
(
s
),
≈
)

	)

1796 
	#SSL_gë_cùhî_vîsi⁄
(
s
) \

1797 
	`SSL_CIPHER_gë_vîsi⁄
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1798 
	#SSL_gë_cùhî_«me
(
s
) \

1799 
	`SSL_CIPHER_gë_«me
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1800 
	#SSL_gë_time
(
a
Ë
	`SSL_SESSION_gë_time
◊)

	)

1801 
	#SSL_£t_time
(
a
,
b
Ë
	`SSL_SESSION_£t_time
(◊),(b))

	)

1802 
	#SSL_gë_timeout
(
a
Ë
	`SSL_SESSION_gë_timeout
◊)

	)

1803 
	#SSL_£t_timeout
(
a
,
b
Ë
	`SSL_SESSION_£t_timeout
(◊),(b))

	)

1805 
	#d2i_SSL_SESSION_bio
(
bp
,
s_id
Ë
	`ASN1_d2i_bio_of
(
SSL_SESSION
,
SSL_SESSION_√w
,
d2i_SSL_SESSION
,bp,s_id)

	)

1806 
	#i2d_SSL_SESSION_bio
(
bp
,
s_id
Ë
	`ASN1_i2d_bio_of
(
SSL_SESSION
,
i2d_SSL_SESSION
,bp,s_id)

	)

1808 
DECLARE_PEM_rw
(
SSL_SESSION
, SSL_SESSION)

1809 
	#SSL_AD_REASON_OFFSET
 1000

	)

1812 
	#SSL_AD_CLOSE_NOTIFY
 
SSL3_AD_CLOSE_NOTIFY


	)

1814 
	#SSL_AD_UNEXPECTED_MESSAGE
 
SSL3_AD_UNEXPECTED_MESSAGE


	)

1816 
	#SSL_AD_BAD_RECORD_MAC
 
SSL3_AD_BAD_RECORD_MAC


	)

1817 
	#SSL_AD_DECRYPTION_FAILED
 
TLS1_AD_DECRYPTION_FAILED


	)

1818 
	#SSL_AD_RECORD_OVERFLOW
 
TLS1_AD_RECORD_OVERFLOW


	)

1820 
	#SSL_AD_DECOMPRESSION_FAILURE
 
SSL3_AD_DECOMPRESSION_FAILURE


	)

1822 
	#SSL_AD_HANDSHAKE_FAILURE
 
SSL3_AD_HANDSHAKE_FAILURE


	)

1824 
	#SSL_AD_NO_CERTIFICATE
 
SSL3_AD_NO_CERTIFICATE


	)

1825 
	#SSL_AD_BAD_CERTIFICATE
 
SSL3_AD_BAD_CERTIFICATE


	)

1826 
	#SSL_AD_UNSUPPORTED_CERTIFICATE
 
SSL3_AD_UNSUPPORTED_CERTIFICATE


	)

1827 
	#SSL_AD_CERTIFICATE_REVOKED
 
SSL3_AD_CERTIFICATE_REVOKED


	)

1828 
	#SSL_AD_CERTIFICATE_EXPIRED
 
SSL3_AD_CERTIFICATE_EXPIRED


	)

1829 
	#SSL_AD_CERTIFICATE_UNKNOWN
 
SSL3_AD_CERTIFICATE_UNKNOWN


	)

1831 
	#SSL_AD_ILLEGAL_PARAMETER
 
SSL3_AD_ILLEGAL_PARAMETER


	)

1833 
	#SSL_AD_UNKNOWN_CA
 
TLS1_AD_UNKNOWN_CA


	)

1835 
	#SSL_AD_ACCESS_DENIED
 
TLS1_AD_ACCESS_DENIED


	)

1837 
	#SSL_AD_DECODE_ERROR
 
TLS1_AD_DECODE_ERROR


	)

1838 
	#SSL_AD_DECRYPT_ERROR
 
TLS1_AD_DECRYPT_ERROR


	)

1840 
	#SSL_AD_EXPORT_RESTRICTION
 
TLS1_AD_EXPORT_RESTRICTION


	)

1842 
	#SSL_AD_PROTOCOL_VERSION
 
TLS1_AD_PROTOCOL_VERSION


	)

1844 
	#SSL_AD_INSUFFICIENT_SECURITY
 
TLS1_AD_INSUFFICIENT_SECURITY


	)

1846 
	#SSL_AD_INTERNAL_ERROR
 
TLS1_AD_INTERNAL_ERROR


	)

1847 
	#SSL_AD_USER_CANCELLED
 
TLS1_AD_USER_CANCELLED


	)

1848 
	#SSL_AD_NO_RENEGOTIATION
 
TLS1_AD_NO_RENEGOTIATION


	)

1849 
	#SSL_AD_UNSUPPORTED_EXTENSION
 
TLS1_AD_UNSUPPORTED_EXTENSION


	)

1850 
	#SSL_AD_CERTIFICATE_UNOBTAINABLE
 
TLS1_AD_CERTIFICATE_UNOBTAINABLE


	)

1851 
	#SSL_AD_UNRECOGNIZED_NAME
 
TLS1_AD_UNRECOGNIZED_NAME


	)

1852 
	#SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE
 
TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE


	)

1853 
	#SSL_AD_BAD_CERTIFICATE_HASH_VALUE
 
TLS1_AD_BAD_CERTIFICATE_HASH_VALUE


	)

1855 
	#SSL_AD_UNKNOWN_PSK_IDENTITY
 
TLS1_AD_UNKNOWN_PSK_IDENTITY


	)

1857 
	#SSL_AD_INAPPROPRIATE_FALLBACK
 
TLS1_AD_INAPPROPRIATE_FALLBACK


	)

1858 
	#SSL_ERROR_NONE
 0

	)

1859 
	#SSL_ERROR_SSL
 1

	)

1860 
	#SSL_ERROR_WANT_READ
 2

	)

1861 
	#SSL_ERROR_WANT_WRITE
 3

	)

1862 
	#SSL_ERROR_WANT_X509_LOOKUP
 4

	)

1863 
	#SSL_ERROR_SYSCALL
 5

	)

1865 
	#SSL_ERROR_ZERO_RETURN
 6

	)

1866 
	#SSL_ERROR_WANT_CONNECT
 7

	)

1867 
	#SSL_ERROR_WANT_ACCEPT
 8

	)

1868 
	#SSL_CTRL_NEED_TMP_RSA
 1

	)

1869 
	#SSL_CTRL_SET_TMP_RSA
 2

	)

1870 
	#SSL_CTRL_SET_TMP_DH
 3

	)

1871 
	#SSL_CTRL_SET_TMP_ECDH
 4

	)

1872 
	#SSL_CTRL_SET_TMP_RSA_CB
 5

	)

1873 
	#SSL_CTRL_SET_TMP_DH_CB
 6

	)

1874 
	#SSL_CTRL_SET_TMP_ECDH_CB
 7

	)

1875 
	#SSL_CTRL_GET_SESSION_REUSED
 8

	)

1876 
	#SSL_CTRL_GET_CLIENT_CERT_REQUEST
 9

	)

1877 
	#SSL_CTRL_GET_NUM_RENEGOTIATIONS
 10

	)

1878 
	#SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS
 11

	)

1879 
	#SSL_CTRL_GET_TOTAL_RENEGOTIATIONS
 12

	)

1880 
	#SSL_CTRL_GET_FLAGS
 13

	)

1881 
	#SSL_CTRL_EXTRA_CHAIN_CERT
 14

	)

1882 
	#SSL_CTRL_SET_MSG_CALLBACK
 15

	)

1883 
	#SSL_CTRL_SET_MSG_CALLBACK_ARG
 16

	)

1885 
	#SSL_CTRL_SET_MTU
 17

	)

1887 
	#SSL_CTRL_SESS_NUMBER
 20

	)

1888 
	#SSL_CTRL_SESS_CONNECT
 21

	)

1889 
	#SSL_CTRL_SESS_CONNECT_GOOD
 22

	)

1890 
	#SSL_CTRL_SESS_CONNECT_RENEGOTIATE
 23

	)

1891 
	#SSL_CTRL_SESS_ACCEPT
 24

	)

1892 
	#SSL_CTRL_SESS_ACCEPT_GOOD
 25

	)

1893 
	#SSL_CTRL_SESS_ACCEPT_RENEGOTIATE
 26

	)

1894 
	#SSL_CTRL_SESS_HIT
 27

	)

1895 
	#SSL_CTRL_SESS_CB_HIT
 28

	)

1896 
	#SSL_CTRL_SESS_MISSES
 29

	)

1897 
	#SSL_CTRL_SESS_TIMEOUTS
 30

	)

1898 
	#SSL_CTRL_SESS_CACHE_FULL
 31

	)

1899 
	#SSL_CTRL_OPTIONS
 32

	)

1900 
	#SSL_CTRL_MODE
 33

	)

1901 
	#SSL_CTRL_GET_READ_AHEAD
 40

	)

1902 
	#SSL_CTRL_SET_READ_AHEAD
 41

	)

1903 
	#SSL_CTRL_SET_SESS_CACHE_SIZE
 42

	)

1904 
	#SSL_CTRL_GET_SESS_CACHE_SIZE
 43

	)

1905 
	#SSL_CTRL_SET_SESS_CACHE_MODE
 44

	)

1906 
	#SSL_CTRL_GET_SESS_CACHE_MODE
 45

	)

1907 
	#SSL_CTRL_GET_MAX_CERT_LIST
 50

	)

1908 
	#SSL_CTRL_SET_MAX_CERT_LIST
 51

	)

1909 
	#SSL_CTRL_SET_MAX_SEND_FRAGMENT
 52

	)

1911 #i‚de‡
OPENSSL_NO_TLSEXT


1912 
	#SSL_CTRL_SET_TLSEXT_SERVERNAME_CB
 53

	)

1913 
	#SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG
 54

	)

1914 
	#SSL_CTRL_SET_TLSEXT_HOSTNAME
 55

	)

1915 
	#SSL_CTRL_SET_TLSEXT_DEBUG_CB
 56

	)

1916 
	#SSL_CTRL_SET_TLSEXT_DEBUG_ARG
 57

	)

1917 
	#SSL_CTRL_GET_TLSEXT_TICKET_KEYS
 58

	)

1918 
	#SSL_CTRL_SET_TLSEXT_TICKET_KEYS
 59

	)

1919 
	#SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT
 60

	)

1920 
	#SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB
 61

	)

1921 
	#SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB_ARG
 62

	)

1922 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
 63

	)

1923 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG
 64

	)

1924 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
 65

	)

1925 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS
 66

	)

1926 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS
 67

	)

1927 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS
 68

	)

1928 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS
 69

	)

1929 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP
 70

	)

1930 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP
 71

	)

1931 
	#SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB
 72

	)

1932 
	#SSL_CTRL_SET_TLS_EXT_SRP_USERNAME_CB
 75

	)

1933 
	#SSL_CTRL_SET_SRP_VERIFY_PARAM_CB
 76

	)

1934 
	#SSL_CTRL_SET_SRP_GIVE_CLIENT_PWD_CB
 77

	)

1935 
	#SSL_CTRL_SET_SRP_ARG
 78

	)

1936 
	#SSL_CTRL_SET_TLS_EXT_SRP_USERNAME
 79

	)

1937 
	#SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH
 80

	)

1938 
	#SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD
 81

	)

1939 #i‚de‡
OPENSSL_NO_HEARTBEATS


1940 
	#SSL_CTRL_TLS_EXT_SEND_HEARTBEAT
 85

	)

1941 
	#SSL_CTRL_GET_TLS_EXT_HEARTBEAT_PENDING
 86

	)

1942 
	#SSL_CTRL_SET_TLS_EXT_HEARTBEAT_NO_REQUESTS
 87

	)

1945 
	#DTLS_CTRL_GET_TIMEOUT
 73

	)

1946 
	#DTLS_CTRL_HANDLE_TIMEOUT
 74

	)

1947 
	#DTLS_CTRL_LISTEN
 75

	)

1948 
	#SSL_CTRL_GET_RI_SUPPORT
 76

	)

1949 
	#SSL_CTRL_CLEAR_OPTIONS
 77

	)

1950 
	#SSL_CTRL_CLEAR_MODE
 78

	)

1951 
	#SSL_CTRL_GET_EXTRA_CHAIN_CERTS
 82

	)

1952 
	#SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS
 83

	)

1953 
	#SSL_CTRL_CHAIN
 88

	)

1954 
	#SSL_CTRL_CHAIN_CERT
 89

	)

1955 
	#SSL_CTRL_GET_CURVES
 90

	)

1956 
	#SSL_CTRL_SET_CURVES
 91

	)

1957 
	#SSL_CTRL_SET_CURVES_LIST
 92

	)

1958 
	#SSL_CTRL_GET_SHARED_CURVE
 93

	)

1959 
	#SSL_CTRL_SET_ECDH_AUTO
 94

	)

1960 
	#SSL_CTRL_SET_SIGALGS
 97

	)

1961 
	#SSL_CTRL_SET_SIGALGS_LIST
 98

	)

1962 
	#SSL_CTRL_CERT_FLAGS
 99

	)

1963 
	#SSL_CTRL_CLEAR_CERT_FLAGS
 100

	)

1964 
	#SSL_CTRL_SET_CLIENT_SIGALGS
 101

	)

1965 
	#SSL_CTRL_SET_CLIENT_SIGALGS_LIST
 102

	)

1966 
	#SSL_CTRL_GET_CLIENT_CERT_TYPES
 103

	)

1967 
	#SSL_CTRL_SET_CLIENT_CERT_TYPES
 104

	)

1968 
	#SSL_CTRL_BUILD_CERT_CHAIN
 105

	)

1969 
	#SSL_CTRL_SET_VERIFY_CERT_STORE
 106

	)

1970 
	#SSL_CTRL_SET_CHAIN_CERT_STORE
 107

	)

1971 
	#SSL_CTRL_GET_PEER_SIGNATURE_NID
 108

	)

1972 
	#SSL_CTRL_GET_SERVER_TMP_KEY
 109

	)

1973 
	#SSL_CTRL_GET_RAW_CIPHERLIST
 110

	)

1974 
	#SSL_CTRL_GET_EC_POINT_FORMATS
 111

	)

1975 
	#SSL_CTRL_GET_CHAIN_CERTS
 115

	)

1976 
	#SSL_CTRL_SELECT_CURRENT_CERT
 116

	)

1977 
	#SSL_CTRL_SET_CURRENT_CERT
 117

	)

1978 
	#SSL_CTRL_CHECK_PROTO_VERSION
 119

	)

1979 
	#DTLS_CTRL_SET_LINK_MTU
 120

	)

1980 
	#DTLS_CTRL_GET_LINK_MIN_MTU
 121

	)

1981 
	#SSL_CERT_SET_FIRST
 1

	)

1982 
	#SSL_CERT_SET_NEXT
 2

	)

1983 
	#SSL_CERT_SET_SERVER
 3

	)

1984 
	#DTLSv1_gë_timeout
(
s¶
, 
¨g
) \

1985 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_GET_TIMEOUT
,0, (*)
¨g
)

	)

1986 
	#DTLSv1_h™dÀ_timeout
(
s¶
) \

1987 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_HANDLE_TIMEOUT
,0, 
NULL
)

	)

1988 
	#DTLSv1_li°í
(
s¶
, 
≥î
) \

1989 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_LISTEN
,0, (*)
≥î
)

	)

1990 
	#SSL_£ssi⁄_ªu£d
(
s¶
) \

1991 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_SESSION_REUSED
,0,
NULL
)

	)

1992 
	#SSL_num_ª√gŸüti⁄s
(
s¶
) \

1993 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_NUM_RENEGOTIATIONS
,0,
NULL
)

	)

1994 
	#SSL_˛ór_num_ª√gŸüti⁄s
(
s¶
) \

1995 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS
,0,
NULL
)

	)

1996 
	#SSL_tŸÆ_ª√gŸüti⁄s
(
s¶
) \

1997 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_TOTAL_RENEGOTIATIONS
,0,
NULL
)

	)

1998 
	#SSL_CTX_√ed_tmp_RSA
(
˘x
) \

1999 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_NEED_TMP_RSA
,0,
NULL
)

	)

2000 
	#SSL_CTX_£t_tmp_rß
(
˘x
,
rß
) \

2001 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_RSA
,0,(*)
rß
)

	)

2002 
	#SSL_CTX_£t_tmp_dh
(
˘x
,
dh
) \

2003 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_DH
,0,(*)
dh
)

	)

2004 
	#SSL_CTX_£t_tmp_ecdh
(
˘x
,
ecdh
) \

2005 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_ECDH
,0,(*)
ecdh
)

	)

2006 
	#SSL_√ed_tmp_RSA
(
s¶
) \

2007 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_NEED_TMP_RSA
,0,
NULL
)

	)

2008 
	#SSL_£t_tmp_rß
(
s¶
,
rß
) \

2009 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_RSA
,0,(*)
rß
)

	)

2010 
	#SSL_£t_tmp_dh
(
s¶
,
dh
) \

2011 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_DH
,0,(*)
dh
)

	)

2012 
	#SSL_£t_tmp_ecdh
(
s¶
,
ecdh
) \

2013 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_ECDH
,0,(*)
ecdh
)

	)

2014 
	#SSL_CTX_add_exåa_chaö_˚π
(
˘x
,
x509
) \

2015 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_EXTRA_CHAIN_CERT
,0,(*)
x509
)

	)

2016 
	#SSL_CTX_gë_exåa_chaö_˚πs
(
˘x
,
px509
) \

2017 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_EXTRA_CHAIN_CERTS
,0,
px509
)

	)

2018 
	#SSL_CTX_gë_exåa_chaö_˚πs_⁄ly
(
˘x
,
px509
) \

2019 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_EXTRA_CHAIN_CERTS
,1,
px509
)

	)

2020 
	#SSL_CTX_˛ór_exåa_chaö_˚πs
(
˘x
) \

2021 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS
,0,
NULL
)

	)

2022 
	#SSL_CTX_£t0_chaö
(
˘x
,
sk
) \

2023 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_CHAIN
,0,(*)
sk
)

	)

2024 
	#SSL_CTX_£t1_chaö
(
˘x
,
sk
) \

2025 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_CHAIN
,1,(*)
sk
)

	)

2026 
	#SSL_CTX_add0_chaö_˚π
(
˘x
,
x509
) \

2027 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_CHAIN_CERT
,0,(*)
x509
)

	)

2028 
	#SSL_CTX_add1_chaö_˚π
(
˘x
,
x509
) \

2029 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_CHAIN_CERT
,1,(*)
x509
)

	)

2030 
	#SSL_CTX_gë0_chaö_˚πs
(
˘x
,
px509
) \

2031 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_CHAIN_CERTS
,0,
px509
)

	)

2032 
	#SSL_CTX_˛ór_chaö_˚πs
(
˘x
) \

2033 
	`SSL_CTX_£t0_chaö
(
˘x
,
NULL
)

	)

2034 
	#SSL_CTX_buûd_˚π_chaö
(
˘x
, 
Êags
) \

2035 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_BUILD_CERT_CHAIN
, 
Êags
, 
NULL
)

	)

2036 
	#SSL_CTX_£À˘_cuºít_˚π
(
˘x
,
x509
) \

2037 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SELECT_CURRENT_CERT
,0,(*)
x509
)

	)

2038 
	#SSL_CTX_£t_cuºít_˚π
(
˘x
, 
›
) \

2039 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CURRENT_CERT
, 
›
, 
NULL
)

	)

2040 
	#SSL_CTX_£t0_vîify_˚π_°‹e
(
˘x
,
°
) \

2041 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_VERIFY_CERT_STORE
,0,(*)
°
)

	)

2042 
	#SSL_CTX_£t1_vîify_˚π_°‹e
(
˘x
,
°
) \

2043 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_VERIFY_CERT_STORE
,1,(*)
°
)

	)

2044 
	#SSL_CTX_£t0_chaö_˚π_°‹e
(
˘x
,
°
) \

2045 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CHAIN_CERT_STORE
,0,(*)
°
)

	)

2046 
	#SSL_CTX_£t1_chaö_˚π_°‹e
(
˘x
,
°
) \

2047 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CHAIN_CERT_STORE
,1,(*)
°
)

	)

2048 
	#SSL_£t0_chaö
(
˘x
,
sk
) \

2049 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_CHAIN
,0,(*)
sk
)

	)

2050 
	#SSL_£t1_chaö
(
˘x
,
sk
) \

2051 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_CHAIN
,1,(*)
sk
)

	)

2052 
	#SSL_add0_chaö_˚π
(
˘x
,
x509
) \

2053 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_CHAIN_CERT
,0,(*)
x509
)

	)

2054 
	#SSL_add1_chaö_˚π
(
˘x
,
x509
) \

2055 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_CHAIN_CERT
,1,(*)
x509
)

	)

2056 
	#SSL_gë0_chaö_˚πs
(
˘x
,
px509
) \

2057 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_GET_CHAIN_CERTS
,0,
px509
)

	)

2058 
	#SSL_˛ór_chaö_˚πs
(
˘x
) \

2059 
	`SSL_£t0_chaö
(
˘x
,
NULL
)

	)

2060 
	#SSL_buûd_˚π_chaö
(
s
, 
Êags
) \

2061 
	`SSL_˘æ
(
s
,
SSL_CTRL_BUILD_CERT_CHAIN
, 
Êags
, 
NULL
)

	)

2062 
	#SSL_£À˘_cuºít_˚π
(
˘x
,
x509
) \

2063 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_SELECT_CURRENT_CERT
,0,(*)
x509
)

	)

2064 
	#SSL_£t_cuºít_˚π
(
˘x
,
›
) \

2065 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_SET_CURRENT_CERT
, 
›
, 
NULL
)

	)

2066 
	#SSL_£t0_vîify_˚π_°‹e
(
s
,
°
) \

2067 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_VERIFY_CERT_STORE
,0,(*)
°
)

	)

2068 
	#SSL_£t1_vîify_˚π_°‹e
(
s
,
°
) \

2069 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_VERIFY_CERT_STORE
,1,(*)
°
)

	)

2070 
	#SSL_£t0_chaö_˚π_°‹e
(
s
,
°
) \

2071 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_CHAIN_CERT_STORE
,0,(*)
°
)

	)

2072 
	#SSL_£t1_chaö_˚π_°‹e
(
s
,
°
) \

2073 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_CHAIN_CERT_STORE
,1,(*)
°
)

	)

2074 
	#SSL_gë1_curves
(
˘x
, 
s
) \

2075 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_GET_CURVES
,0,(*)
s
)

	)

2076 
	#SSL_CTX_£t1_curves
(
˘x
, 
˛i°
, 
˛i°Àn
) \

2077 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CURVES
,
˛i°Àn
,(*)
˛i°
)

	)

2078 
	#SSL_CTX_£t1_curves_li°
(
˘x
, 
s
) \

2079 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CURVES_LIST
,0,(*)
s
)

	)

2080 
	#SSL_£t1_curves
(
˘x
, 
˛i°
, 
˛i°Àn
) \

2081 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_SET_CURVES
,
˛i°Àn
,(*)
˛i°
)

	)

2082 
	#SSL_£t1_curves_li°
(
˘x
, 
s
) \

2083 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_SET_CURVES_LIST
,0,(*)
s
)

	)

2084 
	#SSL_gë_sh¨ed_curve
(
s
, 
n
) \

2085 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_SHARED_CURVE
,
n
,
NULL
)

	)

2086 
	#SSL_CTX_£t_ecdh_auto
(
˘x
, 
⁄off
) \

2087 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_ECDH_AUTO
,
⁄off
,
NULL
)

	)

2088 
	#SSL_£t_ecdh_auto
(
s
, 
⁄off
) \

2089 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_ECDH_AUTO
,
⁄off
,
NULL
)

	)

2090 
	#SSL_CTX_£t1_sigÆgs
(
˘x
, 
¶i°
, 
¶i°Àn
) \

2091 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SIGALGS
,
¶i°Àn
,(*)
¶i°
)

	)

2092 
	#SSL_CTX_£t1_sigÆgs_li°
(
˘x
, 
s
) \

2093 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SIGALGS_LIST
,0,(*)
s
)

	)

2094 
	#SSL_£t1_sigÆgs
(
˘x
, 
¶i°
, 
¶i°Àn
) \

2095 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_SET_SIGALGS
,
¶i°Àn
,(*)
¶i°
)

	)

2096 
	#SSL_£t1_sigÆgs_li°
(
˘x
, 
s
) \

2097 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_SET_SIGALGS_LIST
,0,(*)
s
)

	)

2098 
	#SSL_CTX_£t1_˛õ¡_sigÆgs
(
˘x
, 
¶i°
, 
¶i°Àn
) \

2099 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CLIENT_SIGALGS
,
¶i°Àn
,(*)
¶i°
)

	)

2100 
	#SSL_CTX_£t1_˛õ¡_sigÆgs_li°
(
˘x
, 
s
) \

2101 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CLIENT_SIGALGS_LIST
,0,(*)
s
)

	)

2102 
	#SSL_£t1_˛õ¡_sigÆgs
(
˘x
, 
¶i°
, 
¶i°Àn
) \

2103 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_SET_CLIENT_SIGALGS
,
˛i°Àn
,(*)
¶i°
)

	)

2104 
	#SSL_£t1_˛õ¡_sigÆgs_li°
(
˘x
, 
s
) \

2105 
	`SSL_˘æ
(
˘x
,
SSL_CTRL_SET_CLIENT_SIGALGS_LIST
,0,(*)
s
)

	)

2106 
	#SSL_gë0_˚πifiˇã_ty≥s
(
s
, 
˛i°
) \

2107 
	`SSL_˘æ
(
s
, 
SSL_CTRL_GET_CLIENT_CERT_TYPES
, 0, (*)
˛i°
)

	)

2108 
	#SSL_CTX_£t1_˛õ¡_˚πifiˇã_ty≥s
(
˘x
, 
˛i°
, 
˛i°Àn
) \

2109 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_CLIENT_CERT_TYPES
,
˛i°Àn
,(*)
˛i°
)

	)

2110 
	#SSL_£t1_˛õ¡_˚πifiˇã_ty≥s
(
s
, 
˛i°
, 
˛i°Àn
) \

2111 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_CLIENT_CERT_TYPES
,
˛i°Àn
,(*)
˛i°
)

	)

2112 
	#SSL_gë_≥î_sig«tuª_nid
(
s
, 
≤
) \

2113 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_PEER_SIGNATURE_NID
,0,
≤
)

	)

2114 
	#SSL_gë_£rvî_tmp_key
(
s
, 
pk
) \

2115 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_SERVER_TMP_KEY
,0,
pk
)

	)

2116 
	#SSL_gë0_øw_cùhîli°
(
s
, 
∂°
) \

2117 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_RAW_CIPHERLIST
,0,(*)
∂°
)

	)

2118 
	#SSL_gë0_ec_poöt_f‹m©s
(
s
, 
∂°
) \

2119 
	`SSL_˘æ
(
s
,
SSL_CTRL_GET_EC_POINT_FORMATS
,0,(*)
∂°
)

	)

2120 #i‚de‡
OPENSSL_NO_BIO


2121 
BIO_METHOD
 *
BIO_f_s¶
();

2122 
BIO
 *
BIO_√w_s¶
(
SSL_CTX
 *
˘x
, 
˛õ¡
);

2123 
BIO
 *
BIO_√w_s¶_c⁄√˘
(
SSL_CTX
 *
˘x
);

2124 
BIO
 *
BIO_√w_buf„r_s¶_c⁄√˘
(
SSL_CTX
 *
˘x
);

2125 
BIO_s¶_c›y_£ssi⁄_id
(
BIO
 *
to
, BIO *
‰om
);

2126 
BIO_s¶_shutdown
(
BIO
 *
s¶_bio
);

2130 
SSL_CTX_£t_cùhî_li°
(
SSL_CTX
 *, c⁄° *
°r
);

2131 
SSL_CTX
 *
SSL_CTX_√w
(c⁄° 
SSL_METHOD
 *
mëh
);

2132 
SSL_CTX_‰ì
(
SSL_CTX
 *);

2133 
SSL_CTX_£t_timeout
(
SSL_CTX
 *
˘x
, 
t
);

2134 
SSL_CTX_gë_timeout
(c⁄° 
SSL_CTX
 *
˘x
);

2135 
X509_STORE
 *
SSL_CTX_gë_˚π_°‹e
(c⁄° 
SSL_CTX
 *);

2136 
SSL_CTX_£t_˚π_°‹e
(
SSL_CTX
 *, 
X509_STORE
 *);

2137 
SSL_w™t
(c⁄° 
SSL
 *
s
);

2138 
SSL_˛ór
(
SSL
 *
s
);

2140 
SSL_CTX_Êush_£ssi⁄s
(
SSL_CTX
 *
˘x
, 
tm
);

2142 c⁄° 
SSL_CIPHER
 *
SSL_gë_cuºít_cùhî
(c⁄° 
SSL
 *
s
);

2143 
SSL_CIPHER_gë_bôs
(c⁄° 
SSL_CIPHER
 *
c
, *
Æg_bôs
);

2144 *
SSL_CIPHER_gë_vîsi⁄
(c⁄° 
SSL_CIPHER
 *
c
);

2145 c⁄° *
SSL_CIPHER_gë_«me
(c⁄° 
SSL_CIPHER
 *
c
);

2146 
SSL_CIPHER_gë_id
(c⁄° 
SSL_CIPHER
 *
c
);

2148 
SSL_gë_fd
(c⁄° 
SSL
 *
s
);

2149 
SSL_gë_rfd
(c⁄° 
SSL
 *
s
);

2150 
SSL_gë_wfd
(c⁄° 
SSL
 *
s
);

2151 c⁄° *
SSL_gë_cùhî_li°
(c⁄° 
SSL
 *
s
, 
n
);

2152 *
SSL_gë_sh¨ed_cùhîs
(c⁄° 
SSL
 *
s
, *
buf
, 
Àn
);

2153 
SSL_gë_ªad_ahód
(c⁄° 
SSL
 *
s
);

2154 
SSL_≥ndög
(c⁄° 
SSL
 *
s
);

2155 #i‚de‡
OPENSSL_NO_SOCK


2156 
SSL_£t_fd
(
SSL
 *
s
, 
fd
);

2157 
SSL_£t_rfd
(
SSL
 *
s
, 
fd
);

2158 
SSL_£t_wfd
(
SSL
 *
s
, 
fd
);

2160 #i‚de‡
OPENSSL_NO_BIO


2161 
SSL_£t_bio
(
SSL
 *
s
, 
BIO
 *
rbio
, BIO *
wbio
);

2162 
BIO
 *
SSL_gë_rbio
(c⁄° 
SSL
 *
s
);

2163 
BIO
 *
SSL_gë_wbio
(c⁄° 
SSL
 *
s
);

2165 
SSL_£t_cùhî_li°
(
SSL
 *
s
, c⁄° *
°r
);

2166 
SSL_£t_ªad_ahód
(
SSL
 *
s
, 
yes
);

2167 
SSL_gë_vîify_mode
(c⁄° 
SSL
 *
s
);

2168 
SSL_gë_vîify_dïth
(c⁄° 
SSL
 *
s
);

2169 (*
SSL_gë_vîify_ˇŒback
(c⁄° 
SSL
 *
s
)Ë(, 
X509_STORE_CTX
 *);

2170 
SSL_£t_vîify
(
SSL
 *
s
, 
mode
,

2171 (*
ˇŒback
Ë(
ok
, 
X509_STORE_CTX
 *
˘x
));

2172 
SSL_£t_vîify_dïth
(
SSL
 *
s
, 
dïth
);

2173 
SSL_£t_˚π_cb
(
SSL
 *
s
, (*
cb
Ë(SSL *
s¶
, *
¨g
), *arg);

2174 #i‚de‡
OPENSSL_NO_RSA


2175 
SSL_u£_RSAPriv©eKey
(
SSL
 *
s¶
, 
RSA
 *
rß
);

2177 
SSL_u£_RSAPriv©eKey_ASN1
(
SSL
 *
s¶
, *
d
, 
Àn
);

2178 
SSL_u£_Priv©eKey
(
SSL
 *
s¶
, 
EVP_PKEY
 *
pkey
);

2179 
SSL_u£_Priv©eKey_ASN1
(
pk
, 
SSL
 *
s¶
, c⁄° *
d
,

2180 
Àn
);

2181 
SSL_u£_˚πifiˇã
(
SSL
 *
s¶
, 
X509
 *
x
);

2182 
SSL_u£_˚πifiˇã_ASN1
(
SSL
 *
s¶
, c⁄° *
d
, 
Àn
);

2184 #i‚de‡
OPENSSL_NO_TLSEXT


2186 
SSL_CTX_u£_£rvîöfo
(
SSL_CTX
 *
˘x
, c⁄° *
£rvîöfo
,

2187 
size_t
 
£rvîöfo_Àngth
);

2188 #i‚de‡
OPENSSL_NO_STDIO


2189 
SSL_CTX_u£_£rvîöfo_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
);

2194 #i‚de‡
OPENSSL_NO_STDIO


2195 
SSL_u£_RSAPriv©eKey_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

2196 
SSL_u£_Priv©eKey_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

2197 
SSL_u£_˚πifiˇã_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

2198 
SSL_CTX_u£_RSAPriv©eKey_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

2199 
SSL_CTX_u£_Priv©eKey_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

2200 
SSL_CTX_u£_˚πifiˇã_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

2202 
SSL_CTX_u£_˚πifiˇã_chaö_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
);

2203 
STACK_OF
(
X509_NAME
Ë*
SSL_lﬂd_˛õ¡_CA_fûe
(c⁄° *
fûe
);

2204 
SSL_add_fûe_˚π_subje˘s_to_°ack
(
STACK_OF
(
X509_NAME
Ë*
°ackCAs
,

2205 c⁄° *
fûe
);

2206 #i‚de‡
OPENSSL_SYS_VMS


2208 #i‚de‡
OPENSSL_SYS_MACINTOSH_CLASSIC


2209 
SSL_add_dú_˚π_subje˘s_to_°ack
(
STACK_OF
(
X509_NAME
Ë*
°ackCAs
,

2210 c⁄° *
dú
);

2216 
SSL_lﬂd_îr‹_°rögs
();

2217 c⁄° *
SSL_°©e_°rög
(c⁄° 
SSL
 *
s
);

2218 c⁄° *
SSL_r°©e_°rög
(c⁄° 
SSL
 *
s
);

2219 c⁄° *
SSL_°©e_°rög_l⁄g
(c⁄° 
SSL
 *
s
);

2220 c⁄° *
SSL_r°©e_°rög_l⁄g
(c⁄° 
SSL
 *
s
);

2221 
SSL_SESSION_gë_time
(c⁄° 
SSL_SESSION
 *
s
);

2222 
SSL_SESSION_£t_time
(
SSL_SESSION
 *
s
, 
t
);

2223 
SSL_SESSION_gë_timeout
(c⁄° 
SSL_SESSION
 *
s
);

2224 
SSL_SESSION_£t_timeout
(
SSL_SESSION
 *
s
, 
t
);

2225 
SSL_c›y_£ssi⁄_id
(
SSL
 *
to
, c⁄° SSL *
‰om
);

2226 
X509
 *
SSL_SESSION_gë0_≥î
(
SSL_SESSION
 *
s
);

2227 
SSL_SESSION_£t1_id_c⁄ãxt
(
SSL_SESSION
 *
s
, c⁄° *
sid_˘x
,

2228 
sid_˘x_Àn
);

2230 
SSL_SESSION
 *
SSL_SESSION_√w
();

2231 c⁄° *
SSL_SESSION_gë_id
(c⁄° 
SSL_SESSION
 *
s
,

2232 *
Àn
);

2233 
SSL_SESSION_gë_com¥ess_id
(c⁄° 
SSL_SESSION
 *
s
);

2234 #i‚de‡
OPENSSL_NO_FP_API


2235 
SSL_SESSION_¥öt_Â
(
FILE
 *
Â
, c⁄° 
SSL_SESSION
 *
£s
);

2237 #i‚de‡
OPENSSL_NO_BIO


2238 
SSL_SESSION_¥öt
(
BIO
 *
Â
, c⁄° 
SSL_SESSION
 *
£s
);

2240 
SSL_SESSION_‰ì
(
SSL_SESSION
 *
£s
);

2241 
i2d_SSL_SESSION
(
SSL_SESSION
 *
ö
, **
µ
);

2242 
SSL_£t_£ssi⁄
(
SSL
 *
to
, 
SSL_SESSION
 *
£ssi⁄
);

2243 
SSL_CTX_add_£ssi⁄
(
SSL_CTX
 *
s
, 
SSL_SESSION
 *
c
);

2244 
SSL_CTX_ªmove_£ssi⁄
(
SSL_CTX
 *, 
SSL_SESSION
 *
c
);

2245 
SSL_CTX_£t_gíî©e_£ssi⁄_id
(
SSL_CTX
 *, 
GEN_SESSION_CB
);

2246 
SSL_£t_gíî©e_£ssi⁄_id
(
SSL
 *, 
GEN_SESSION_CB
);

2247 
SSL_has_m©chög_£ssi⁄_id
(c⁄° 
SSL
 *
s¶
, c⁄° *
id
,

2248 
id_Àn
);

2249 
SSL_SESSION
 *
d2i_SSL_SESSION
(SSL_SESSION **
a
, c⁄° **
µ
,

2250 
Àngth
);

2252 #ifde‡
HEADER_X509_H


2253 
X509
 *
SSL_gë_≥î_˚πifiˇã
(c⁄° 
SSL
 *
s
);

2256 
STACK_OF
(
X509
Ë*
SSL_gë_≥î_˚π_chaö
(c⁄° 
SSL
 *
s
);

2258 
SSL_CTX_gë_vîify_mode
(c⁄° 
SSL_CTX
 *
˘x
);

2259 
SSL_CTX_gë_vîify_dïth
(c⁄° 
SSL_CTX
 *
˘x
);

2260 (*
SSL_CTX_gë_vîify_ˇŒback
(c⁄° 
SSL_CTX
 *
˘x
)) (,

2261 
X509_STORE_CTX
 *);

2262 
SSL_CTX_£t_vîify
(
SSL_CTX
 *
˘x
, 
mode
,

2263 (*
ˇŒback
Ë(, 
X509_STORE_CTX
 *));

2264 
SSL_CTX_£t_vîify_dïth
(
SSL_CTX
 *
˘x
, 
dïth
);

2265 
SSL_CTX_£t_˚π_vîify_ˇŒback
(
SSL_CTX
 *
˘x
,

2266 (*
cb
Ë(
X509_STORE_CTX
 *, *),

2267 *
¨g
);

2268 
SSL_CTX_£t_˚π_cb
(
SSL_CTX
 *
c
, (*
cb
Ë(
SSL
 *
s¶
, *
¨g
),

2269 *
¨g
);

2270 #i‚de‡
OPENSSL_NO_RSA


2271 
SSL_CTX_u£_RSAPriv©eKey
(
SSL_CTX
 *
˘x
, 
RSA
 *
rß
);

2273 
SSL_CTX_u£_RSAPriv©eKey_ASN1
(
SSL_CTX
 *
˘x
, c⁄° *
d
,

2274 
Àn
);

2275 
SSL_CTX_u£_Priv©eKey
(
SSL_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
);

2276 
SSL_CTX_u£_Priv©eKey_ASN1
(
pk
, 
SSL_CTX
 *
˘x
,

2277 c⁄° *
d
, 
Àn
);

2278 
SSL_CTX_u£_˚πifiˇã
(
SSL_CTX
 *
˘x
, 
X509
 *
x
);

2279 
SSL_CTX_u£_˚πifiˇã_ASN1
(
SSL_CTX
 *
˘x
, 
Àn
,

2280 c⁄° *
d
);

2282 
SSL_CTX_£t_deÁu…_∑sswd_cb
(
SSL_CTX
 *
˘x
, 
≥m_∑ssw‹d_cb
 *
cb
);

2283 
SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a
(
SSL_CTX
 *
˘x
, *
u
);

2285 
SSL_CTX_check_¥iv©e_key
(c⁄° 
SSL_CTX
 *
˘x
);

2286 
SSL_check_¥iv©e_key
(c⁄° 
SSL
 *
˘x
);

2288 
SSL_CTX_£t_£ssi⁄_id_c⁄ãxt
(
SSL_CTX
 *
˘x
, c⁄° *
sid_˘x
,

2289 
sid_˘x_Àn
);

2291 
SSL
 *
SSL_√w
(
SSL_CTX
 *
˘x
);

2292 
SSL_£t_£ssi⁄_id_c⁄ãxt
(
SSL
 *
s¶
, c⁄° *
sid_˘x
,

2293 
sid_˘x_Àn
);

2295 
SSL_CTX_£t_puΩo£
(
SSL_CTX
 *
s
, 
puΩo£
);

2296 
SSL_£t_puΩo£
(
SSL
 *
s
, 
puΩo£
);

2297 
SSL_CTX_£t_åu°
(
SSL_CTX
 *
s
, 
åu°
);

2298 
SSL_£t_åu°
(
SSL
 *
s
, 
åu°
);

2300 
SSL_CTX_£t1_∑øm
(
SSL_CTX
 *
˘x
, 
X509_VERIFY_PARAM
 *
vpm
);

2301 
SSL_£t1_∑øm
(
SSL
 *
s¶
, 
X509_VERIFY_PARAM
 *
vpm
);

2303 
X509_VERIFY_PARAM
 *
SSL_CTX_gë0_∑øm
(
SSL_CTX
 *
˘x
);

2304 
X509_VERIFY_PARAM
 *
SSL_gë0_∑øm
(
SSL
 *
s¶
);

2306 #i‚de‡
OPENSSL_NO_SRP


2307 
SSL_CTX_£t_§p_u£∫ame
(
SSL_CTX
 *
˘x
, *
«me
);

2308 
SSL_CTX_£t_§p_∑ssw‹d
(
SSL_CTX
 *
˘x
, *
∑ssw‹d
);

2309 
SSL_CTX_£t_§p_°ªngth
(
SSL_CTX
 *
˘x
, 
°ªngth
);

2310 
SSL_CTX_£t_§p_˛õ¡_pwd_ˇŒback
(
SSL_CTX
 *
˘x
,

2311 *(*
cb
Ë(
SSL
 *, *));

2312 
SSL_CTX_£t_§p_vîify_∑øm_ˇŒback
(
SSL_CTX
 *
˘x
,

2313 (*
cb
Ë(
SSL
 *, *));

2314 
SSL_CTX_£t_§p_u£∫ame_ˇŒback
(
SSL_CTX
 *
˘x
,

2315 (*
cb
Ë(
SSL
 *, *, *));

2316 
SSL_CTX_£t_§p_cb_¨g
(
SSL_CTX
 *
˘x
, *
¨g
);

2318 
SSL_£t_§p_£rvî_∑øm
(
SSL
 *
s
, c⁄° 
BIGNUM
 *
N
, c⁄° BIGNUM *
g
,

2319 
BIGNUM
 *
ß
, BIGNUM *
v
, *
öfo
);

2320 
SSL_£t_§p_£rvî_∑øm_pw
(
SSL
 *
s
, c⁄° *
u£r
, c⁄° *
∑ss
,

2321 c⁄° *
gΩ
);

2323 
BIGNUM
 *
SSL_gë_§p_g
(
SSL
 *
s
);

2324 
BIGNUM
 *
SSL_gë_§p_N
(
SSL
 *
s
);

2326 *
SSL_gë_§p_u£∫ame
(
SSL
 *
s
);

2327 *
SSL_gë_§p_u£röfo
(
SSL
 *
s
);

2330 
SSL_˚πs_˛ór
(
SSL
 *
s
);

2331 
SSL_‰ì
(
SSL
 *
s¶
);

2332 
SSL_ac˚±
(
SSL
 *
s¶
);

2333 
SSL_c⁄√˘
(
SSL
 *
s¶
);

2334 
SSL_ªad
(
SSL
 *
s¶
, *
buf
, 
num
);

2335 
SSL_≥ek
(
SSL
 *
s¶
, *
buf
, 
num
);

2336 
SSL_wrôe
(
SSL
 *
s¶
, c⁄° *
buf
, 
num
);

2337 
SSL_˘æ
(
SSL
 *
s¶
, 
cmd
, 
œrg
, *
∑rg
);

2338 
SSL_ˇŒback_˘æ
(
SSL
 *, , (*)());

2339 
SSL_CTX_˘æ
(
SSL_CTX
 *
˘x
, 
cmd
, 
œrg
, *
∑rg
);

2340 
SSL_CTX_ˇŒback_˘æ
(
SSL_CTX
 *, , (*)());

2342 
SSL_gë_îr‹
(c⁄° 
SSL
 *
s
, 
ªt_code
);

2343 c⁄° *
SSL_gë_vîsi⁄
(c⁄° 
SSL
 *
s
);

2346 
SSL_CTX_£t_s¶_vîsi⁄
(
SSL_CTX
 *
˘x
, c⁄° 
SSL_METHOD
 *
mëh
);

2348 #i‚de‡
OPENSSL_NO_SSL2


2349 c⁄° 
SSL_METHOD
 *
SSLv2_mëhod
();

2350 c⁄° 
SSL_METHOD
 *
SSLv2_£rvî_mëhod
();

2351 c⁄° 
SSL_METHOD
 *
SSLv2_˛õ¡_mëhod
();

2354 #i‚de‡
OPENSSL_NO_SSL3_METHOD


2355 c⁄° 
SSL_METHOD
 *
SSLv3_mëhod
();

2356 c⁄° 
SSL_METHOD
 *
SSLv3_£rvî_mëhod
();

2357 c⁄° 
SSL_METHOD
 *
SSLv3_˛õ¡_mëhod
();

2360 c⁄° 
SSL_METHOD
 *
SSLv23_mëhod
();

2362 c⁄° 
SSL_METHOD
 *
SSLv23_£rvî_mëhod
();

2364 c⁄° 
SSL_METHOD
 *
SSLv23_˛õ¡_mëhod
();

2367 c⁄° 
SSL_METHOD
 *
TLSv1_mëhod
();

2368 c⁄° 
SSL_METHOD
 *
TLSv1_£rvî_mëhod
();

2369 c⁄° 
SSL_METHOD
 *
TLSv1_˛õ¡_mëhod
();

2371 c⁄° 
SSL_METHOD
 *
TLSv1_1_mëhod
();

2372 c⁄° 
SSL_METHOD
 *
TLSv1_1_£rvî_mëhod
();

2373 c⁄° 
SSL_METHOD
 *
TLSv1_1_˛õ¡_mëhod
();

2375 c⁄° 
SSL_METHOD
 *
TLSv1_2_mëhod
();

2376 c⁄° 
SSL_METHOD
 *
TLSv1_2_£rvî_mëhod
();

2377 c⁄° 
SSL_METHOD
 *
TLSv1_2_˛õ¡_mëhod
();

2379 c⁄° 
SSL_METHOD
 *
DTLSv1_mëhod
();

2380 c⁄° 
SSL_METHOD
 *
DTLSv1_£rvî_mëhod
();

2381 c⁄° 
SSL_METHOD
 *
DTLSv1_˛õ¡_mëhod
();

2383 c⁄° 
SSL_METHOD
 *
DTLSv1_2_mëhod
();

2384 c⁄° 
SSL_METHOD
 *
DTLSv1_2_£rvî_mëhod
();

2385 c⁄° 
SSL_METHOD
 *
DTLSv1_2_˛õ¡_mëhod
();

2387 c⁄° 
SSL_METHOD
 *
DTLS_mëhod
();

2388 c⁄° 
SSL_METHOD
 *
DTLS_£rvî_mëhod
();

2389 c⁄° 
SSL_METHOD
 *
DTLS_˛õ¡_mëhod
();

2391 
STACK_OF
(
SSL_CIPHER
Ë*
SSL_gë_cùhîs
(c⁄° 
SSL
 *
s
);

2393 
SSL_do_h™dshake
(
SSL
 *
s
);

2394 
SSL_ª√gŸüã
(
SSL
 *
s
);

2395 
SSL_ª√gŸüã_abbªvüãd
(
SSL
 *
s
);

2396 
SSL_ª√gŸüã_≥ndög
(
SSL
 *
s
);

2397 
SSL_shutdown
(
SSL
 *
s
);

2399 c⁄° 
SSL_METHOD
 *
SSL_CTX_gë_s¶_mëhod
(
SSL_CTX
 *
˘x
);

2400 c⁄° 
SSL_METHOD
 *
SSL_gë_s¶_mëhod
(
SSL
 *
s
);

2401 
SSL_£t_s¶_mëhod
(
SSL
 *
s
, c⁄° 
SSL_METHOD
 *
mëhod
);

2402 c⁄° *
SSL_Æît_ty≥_°rög_l⁄g
(
vÆue
);

2403 c⁄° *
SSL_Æît_ty≥_°rög
(
vÆue
);

2404 c⁄° *
SSL_Æît_desc_°rög_l⁄g
(
vÆue
);

2405 c⁄° *
SSL_Æît_desc_°rög
(
vÆue
);

2407 
SSL_£t_˛õ¡_CA_li°
(
SSL
 *
s
, 
STACK_OF
(
X509_NAME
Ë*
«me_li°
);

2408 
SSL_CTX_£t_˛õ¡_CA_li°
(
SSL_CTX
 *
˘x
, 
STACK_OF
(
X509_NAME
Ë*
«me_li°
);

2409 
STACK_OF
(
X509_NAME
Ë*
SSL_gë_˛õ¡_CA_li°
(c⁄° 
SSL
 *
s
);

2410 
STACK_OF
(
X509_NAME
Ë*
SSL_CTX_gë_˛õ¡_CA_li°
(c⁄° 
SSL_CTX
 *
s
);

2411 
SSL_add_˛õ¡_CA
(
SSL
 *
s¶
, 
X509
 *
x
);

2412 
SSL_CTX_add_˛õ¡_CA
(
SSL_CTX
 *
˘x
, 
X509
 *
x
);

2414 
SSL_£t_c⁄√˘_°©e
(
SSL
 *
s
);

2415 
SSL_£t_ac˚±_°©e
(
SSL
 *
s
);

2417 
SSL_gë_deÁu…_timeout
(c⁄° 
SSL
 *
s
);

2419 
SSL_libøry_öô
();

2421 *
SSL_CIPHER_des¸ùti⁄
(c⁄° 
SSL_CIPHER
 *, *
buf
, 
size
);

2422 
STACK_OF
(
X509_NAME
Ë*
SSL_dup_CA_li°
(STACK_OF(X509_NAMEË*
sk
);

2424 
SSL
 *
SSL_dup
(SSL *
s¶
);

2426 
X509
 *
SSL_gë_˚πifiˇã
(c⁄° 
SSL
 *
s¶
);

2429  
evp_pkey_°
 *
SSL_gë_¥iv©ekey
(c⁄° 
SSL
 *
s¶
);

2431 
X509
 *
SSL_CTX_gë0_˚πifiˇã
(c⁄° 
SSL_CTX
 *
˘x
);

2432 
EVP_PKEY
 *
SSL_CTX_gë0_¥iv©ekey
(c⁄° 
SSL_CTX
 *
˘x
);

2434 
SSL_CTX_£t_quõt_shutdown
(
SSL_CTX
 *
˘x
, 
mode
);

2435 
SSL_CTX_gë_quõt_shutdown
(c⁄° 
SSL_CTX
 *
˘x
);

2436 
SSL_£t_quõt_shutdown
(
SSL
 *
s¶
, 
mode
);

2437 
SSL_gë_quõt_shutdown
(c⁄° 
SSL
 *
s¶
);

2438 
SSL_£t_shutdown
(
SSL
 *
s¶
, 
mode
);

2439 
SSL_gë_shutdown
(c⁄° 
SSL
 *
s¶
);

2440 
SSL_vîsi⁄
(c⁄° 
SSL
 *
s¶
);

2441 
SSL_CTX_£t_deÁu…_vîify_∑ths
(
SSL_CTX
 *
˘x
);

2442 
SSL_CTX_lﬂd_vîify_loˇti⁄s
(
SSL_CTX
 *
˘x
, c⁄° *
CAfûe
,

2443 c⁄° *
CA∑th
);

2444 
	#SSL_gë0_£ssi⁄
 
SSL_gë_£ssi⁄


	)

2445 
SSL_SESSION
 *
SSL_gë_£ssi⁄
(c⁄° 
SSL
 *
s¶
);

2446 
SSL_SESSION
 *
SSL_gë1_£ssi⁄
(
SSL
 *
s¶
);

2447 
SSL_CTX
 *
SSL_gë_SSL_CTX
(c⁄° 
SSL
 *
s¶
);

2448 
SSL_CTX
 *
SSL_£t_SSL_CTX
(
SSL
 *
s¶
, SSL_CTX *
˘x
);

2449 
SSL_£t_öfo_ˇŒback
(
SSL
 *
s¶
,

2450 (*
cb
Ë(c⁄° 
SSL
 *
s¶
, 
ty≥
, 
vÆ
));

2451 (*
SSL_gë_öfo_ˇŒback
(c⁄° 
SSL
 *
s¶
)Ë(c⁄° SSL *s¶, 
ty≥
,

2452 
vÆ
);

2453 
SSL_°©e
(c⁄° 
SSL
 *
s¶
);

2454 
SSL_£t_°©e
(
SSL
 *
s¶
, 
°©e
);

2456 
SSL_£t_vîify_ªsu…
(
SSL
 *
s¶
, 
v
);

2457 
SSL_gë_vîify_ªsu…
(c⁄° 
SSL
 *
s¶
);

2459 
SSL_£t_ex_d©a
(
SSL
 *
s¶
, 
idx
, *
d©a
);

2460 *
SSL_gë_ex_d©a
(c⁄° 
SSL
 *
s¶
, 
idx
);

2461 
SSL_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

2462 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

2464 
SSL_SESSION_£t_ex_d©a
(
SSL_SESSION
 *
ss
, 
idx
, *
d©a
);

2465 *
SSL_SESSION_gë_ex_d©a
(c⁄° 
SSL_SESSION
 *
ss
, 
idx
);

2466 
SSL_SESSION_gë_ex_√w_ödex
(
¨gl
, *
¨gp
,

2467 
CRYPTO_EX_√w
 *
√w_func
,

2468 
CRYPTO_EX_dup
 *
dup_func
,

2469 
CRYPTO_EX_‰ì
 *
‰ì_func
);

2471 
SSL_CTX_£t_ex_d©a
(
SSL_CTX
 *
s¶
, 
idx
, *
d©a
);

2472 *
SSL_CTX_gë_ex_d©a
(c⁄° 
SSL_CTX
 *
s¶
, 
idx
);

2473 
SSL_CTX_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

2474 
CRYPTO_EX_dup
 *
dup_func
,

2475 
CRYPTO_EX_‰ì
 *
‰ì_func
);

2477 
SSL_gë_ex_d©a_X509_STORE_CTX_idx
();

2479 
	#SSL_CTX_£ss_£t_ˇche_size
(
˘x
,
t
) \

2480 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SESS_CACHE_SIZE
,
t
,
NULL
)

	)

2481 
	#SSL_CTX_£ss_gë_ˇche_size
(
˘x
) \

2482 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_SESS_CACHE_SIZE
,0,
NULL
)

	)

2483 
	#SSL_CTX_£t_£ssi⁄_ˇche_mode
(
˘x
,
m
) \

2484 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SESS_CACHE_MODE
,
m
,
NULL
)

	)

2485 
	#SSL_CTX_gë_£ssi⁄_ˇche_mode
(
˘x
) \

2486 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_SESS_CACHE_MODE
,0,
NULL
)

	)

2488 
	#SSL_CTX_gë_deÁu…_ªad_ahód
(
˘x
Ë
	`SSL_CTX_gë_ªad_ahód
(˘x)

	)

2489 
	#SSL_CTX_£t_deÁu…_ªad_ahód
(
˘x
,
m
Ë
	`SSL_CTX_£t_ªad_ahód
(˘x,m)

	)

2490 
	#SSL_CTX_gë_ªad_ahód
(
˘x
) \

2491 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_READ_AHEAD
,0,
NULL
)

	)

2492 
	#SSL_CTX_£t_ªad_ahód
(
˘x
,
m
) \

2493 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_READ_AHEAD
,
m
,
NULL
)

	)

2494 
	#SSL_CTX_gë_max_˚π_li°
(
˘x
) \

2495 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_MAX_CERT_LIST
,0,
NULL
)

	)

2496 
	#SSL_CTX_£t_max_˚π_li°
(
˘x
,
m
) \

2497 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_MAX_CERT_LIST
,
m
,
NULL
)

	)

2498 
	#SSL_gë_max_˚π_li°
(
s¶
) \

2499 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_MAX_CERT_LIST
,0,
NULL
)

	)

2500 
	#SSL_£t_max_˚π_li°
(
s¶
,
m
) \

2501 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_MAX_CERT_LIST
,
m
,
NULL
)

	)

2503 
	#SSL_CTX_£t_max_£nd_‰agmít
(
˘x
,
m
) \

2504 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_MAX_SEND_FRAGMENT
,
m
,
NULL
)

	)

2505 
	#SSL_£t_max_£nd_‰agmít
(
s¶
,
m
) \

2506 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_MAX_SEND_FRAGMENT
,
m
,
NULL
)

	)

2509 #i‚de‡
OPENSSL_NO_RSA


2510 
SSL_CTX_£t_tmp_rß_ˇŒback
(
SSL_CTX
 *
˘x
,

2511 
RSA
 *(*
cb
Ë(
SSL
 *
s¶
, 
is_exp‹t
,

2512 
keyÀngth
));

2514 
SSL_£t_tmp_rß_ˇŒback
(
SSL
 *
s¶
,

2515 
RSA
 *(*
cb
Ë(
SSL
 *
s¶
, 
is_exp‹t
,

2516 
keyÀngth
));

2518 #i‚de‡
OPENSSL_NO_DH


2519 
SSL_CTX_£t_tmp_dh_ˇŒback
(
SSL_CTX
 *
˘x
,

2520 
DH
 *(*
dh
Ë(
SSL
 *
s¶
, 
is_exp‹t
,

2521 
keyÀngth
));

2522 
SSL_£t_tmp_dh_ˇŒback
(
SSL
 *
s¶
,

2523 
DH
 *(*
dh
Ë(
SSL
 *
s¶
, 
is_exp‹t
,

2524 
keyÀngth
));

2526 #i‚de‡
OPENSSL_NO_ECDH


2527 
SSL_CTX_£t_tmp_ecdh_ˇŒback
(
SSL_CTX
 *
˘x
,

2528 
EC_KEY
 *(*
ecdh
Ë(
SSL
 *
s¶
, 
is_exp‹t
,

2529 
keyÀngth
));

2530 
SSL_£t_tmp_ecdh_ˇŒback
(
SSL
 *
s¶
,

2531 
EC_KEY
 *(*
ecdh
Ë(
SSL
 *
s¶
, 
is_exp‹t
,

2532 
keyÀngth
));

2535 #i‚de‡
OPENSSL_NO_COMP


2536 c⁄° 
COMP_METHOD
 *
SSL_gë_cuºít_com¥essi⁄
(
SSL
 *
s
);

2537 c⁄° 
COMP_METHOD
 *
SSL_gë_cuºít_ex∑nsi⁄
(
SSL
 *
s
);

2538 c⁄° *
SSL_COMP_gë_«me
(c⁄° 
COMP_METHOD
 *
comp
);

2539 
STACK_OF
(
SSL_COMP
Ë*
SSL_COMP_gë_com¥essi⁄_mëhods
();

2540 
STACK_OF
(
SSL_COMP
Ë*
SSL_COMP_£t0_com¥essi⁄_mëhods
(STACK_OF(SSL_COMP)

2541 *
mëhs
);

2542 
SSL_COMP_‰ì_com¥essi⁄_mëhods
();

2543 
SSL_COMP_add_com¥essi⁄_mëhod
(
id
, 
COMP_METHOD
 *
cm
);

2545 c⁄° *
SSL_gë_cuºít_com¥essi⁄
(
SSL
 *
s
);

2546 c⁄° *
SSL_gë_cuºít_ex∑nsi⁄
(
SSL
 *
s
);

2547 c⁄° *
SSL_COMP_gë_«me
(c⁄° *
comp
);

2548 *
SSL_COMP_gë_com¥essi⁄_mëhods
();

2549 
SSL_COMP_add_com¥essi⁄_mëhod
(
id
, *
cm
);

2552 c⁄° 
SSL_CIPHER
 *
SSL_CIPHER_föd
(
SSL
 *
s¶
, c⁄° *
±r
);

2555 
SSL_£t_£ssi⁄_tickë_ext
(
SSL
 *
s
, *
ext_d©a
, 
ext_Àn
);

2557 
SSL_£t_£ssi⁄_tickë_ext_cb
(
SSL
 *
s
, 
és_£ssi⁄_tickë_ext_cb_‚
 
cb
,

2558 *
¨g
);

2561 
SSL_£t_£ssi⁄_£¸ë_cb
(
SSL
 *
s
,

2562 
és_£ssi⁄_£¸ë_cb_‚
 
és_£ssi⁄_£¸ë_cb
,

2563 *
¨g
);

2565 
SSL_£t_debug
(
SSL
 *
s
, 
debug
);

2566 
SSL_ˇche_hô
(
SSL
 *
s
);

2567 
SSL_is_£rvî
(
SSL
 *
s
);

2569 
SSL_CONF_CTX
 *
SSL_CONF_CTX_√w
();

2570 
SSL_CONF_CTX_föish
(
SSL_CONF_CTX
 *
c˘x
);

2571 
SSL_CONF_CTX_‰ì
(
SSL_CONF_CTX
 *
c˘x
);

2572 
SSL_CONF_CTX_£t_Êags
(
SSL_CONF_CTX
 *
c˘x
, 
Êags
);

2573 
SSL_CONF_CTX_˛ór_Êags
(
SSL_CONF_CTX
 *
c˘x
, 
Êags
);

2574 
SSL_CONF_CTX_£t1_¥efix
(
SSL_CONF_CTX
 *
c˘x
, c⁄° *
¥e
);

2576 
SSL_CONF_CTX_£t_s¶
(
SSL_CONF_CTX
 *
c˘x
, 
SSL
 *
s¶
);

2577 
SSL_CONF_CTX_£t_s¶_˘x
(
SSL_CONF_CTX
 *
c˘x
, 
SSL_CTX
 *
˘x
);

2579 
SSL_CONF_cmd
(
SSL_CONF_CTX
 *
c˘x
, c⁄° *
cmd
, c⁄° *
vÆue
);

2580 
SSL_CONF_cmd_¨gv
(
SSL_CONF_CTX
 *
c˘x
, *
∑rgc
, ***
∑rgv
);

2581 
SSL_CONF_cmd_vÆue_ty≥
(
SSL_CONF_CTX
 *
c˘x
, c⁄° *
cmd
);

2583 #i‚de‡
OPENSSL_NO_SSL_TRACE


2584 
SSL_åa˚
(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
,

2585 c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
);

2586 c⁄° *
SSL_CIPHER_°™d¨d_«me
(c⁄° 
SSL_CIPHER
 *
c
);

2589 #i‚de‡
OPENSSL_NO_UNIT_TEST


2590 c⁄° 
›ís¶_s¶_ã°_fun˘i⁄s
 *
SSL_ã°_fun˘i⁄s
();

2598 
ERR_lﬂd_SSL_°rögs
();

2603 
	#SSL_F_CHECK_SUITEB_CIPHER_LIST
 331

	)

2604 
	#SSL_F_CLIENT_CERTIFICATE
 100

	)

2605 
	#SSL_F_CLIENT_FINISHED
 167

	)

2606 
	#SSL_F_CLIENT_HELLO
 101

	)

2607 
	#SSL_F_CLIENT_MASTER_KEY
 102

	)

2608 
	#SSL_F_D2I_SSL_SESSION
 103

	)

2609 
	#SSL_F_DO_DTLS1_WRITE
 245

	)

2610 
	#SSL_F_DO_SSL3_WRITE
 104

	)

2611 
	#SSL_F_DTLS1_ACCEPT
 246

	)

2612 
	#SSL_F_DTLS1_ADD_CERT_TO_BUF
 295

	)

2613 
	#SSL_F_DTLS1_BUFFER_RECORD
 247

	)

2614 
	#SSL_F_DTLS1_CHECK_TIMEOUT_NUM
 316

	)

2615 
	#SSL_F_DTLS1_CLIENT_HELLO
 248

	)

2616 
	#SSL_F_DTLS1_CONNECT
 249

	)

2617 
	#SSL_F_DTLS1_ENC
 250

	)

2618 
	#SSL_F_DTLS1_GET_HELLO_VERIFY
 251

	)

2619 
	#SSL_F_DTLS1_GET_MESSAGE
 252

	)

2620 
	#SSL_F_DTLS1_GET_MESSAGE_FRAGMENT
 253

	)

2621 
	#SSL_F_DTLS1_GET_RECORD
 254

	)

2622 
	#SSL_F_DTLS1_HANDLE_TIMEOUT
 297

	)

2623 
	#SSL_F_DTLS1_HEARTBEAT
 305

	)

2624 
	#SSL_F_DTLS1_OUTPUT_CERT_CHAIN
 255

	)

2625 
	#SSL_F_DTLS1_PREPROCESS_FRAGMENT
 288

	)

2626 
	#SSL_F_DTLS1_PROCESS_OUT_OF_SEQ_MESSAGE
 256

	)

2627 
	#SSL_F_DTLS1_PROCESS_RECORD
 257

	)

2628 
	#SSL_F_DTLS1_READ_BYTES
 258

	)

2629 
	#SSL_F_DTLS1_READ_FAILED
 259

	)

2630 
	#SSL_F_DTLS1_SEND_CERTIFICATE_REQUEST
 260

	)

2631 
	#SSL_F_DTLS1_SEND_CLIENT_CERTIFICATE
 261

	)

2632 
	#SSL_F_DTLS1_SEND_CLIENT_KEY_EXCHANGE
 262

	)

2633 
	#SSL_F_DTLS1_SEND_CLIENT_VERIFY
 263

	)

2634 
	#SSL_F_DTLS1_SEND_HELLO_VERIFY_REQUEST
 264

	)

2635 
	#SSL_F_DTLS1_SEND_SERVER_CERTIFICATE
 265

	)

2636 
	#SSL_F_DTLS1_SEND_SERVER_HELLO
 266

	)

2637 
	#SSL_F_DTLS1_SEND_SERVER_KEY_EXCHANGE
 267

	)

2638 
	#SSL_F_DTLS1_WRITE_APP_DATA_BYTES
 268

	)

2639 
	#SSL_F_GET_CLIENT_FINISHED
 105

	)

2640 
	#SSL_F_GET_CLIENT_HELLO
 106

	)

2641 
	#SSL_F_GET_CLIENT_MASTER_KEY
 107

	)

2642 
	#SSL_F_GET_SERVER_FINISHED
 108

	)

2643 
	#SSL_F_GET_SERVER_HELLO
 109

	)

2644 
	#SSL_F_GET_SERVER_STATIC_DH_KEY
 340

	)

2645 
	#SSL_F_GET_SERVER_VERIFY
 110

	)

2646 
	#SSL_F_I2D_SSL_SESSION
 111

	)

2647 
	#SSL_F_READ_N
 112

	)

2648 
	#SSL_F_REQUEST_CERTIFICATE
 113

	)

2649 
	#SSL_F_SERVER_FINISH
 239

	)

2650 
	#SSL_F_SERVER_HELLO
 114

	)

2651 
	#SSL_F_SERVER_VERIFY
 240

	)

2652 
	#SSL_F_SSL23_ACCEPT
 115

	)

2653 
	#SSL_F_SSL23_CLIENT_HELLO
 116

	)

2654 
	#SSL_F_SSL23_CONNECT
 117

	)

2655 
	#SSL_F_SSL23_GET_CLIENT_HELLO
 118

	)

2656 
	#SSL_F_SSL23_GET_SERVER_HELLO
 119

	)

2657 
	#SSL_F_SSL23_PEEK
 237

	)

2658 
	#SSL_F_SSL23_READ
 120

	)

2659 
	#SSL_F_SSL23_WRITE
 121

	)

2660 
	#SSL_F_SSL2_ACCEPT
 122

	)

2661 
	#SSL_F_SSL2_CONNECT
 123

	)

2662 
	#SSL_F_SSL2_ENC_INIT
 124

	)

2663 
	#SSL_F_SSL2_GENERATE_KEY_MATERIAL
 241

	)

2664 
	#SSL_F_SSL2_PEEK
 234

	)

2665 
	#SSL_F_SSL2_READ
 125

	)

2666 
	#SSL_F_SSL2_READ_INTERNAL
 236

	)

2667 
	#SSL_F_SSL2_SET_CERTIFICATE
 126

	)

2668 
	#SSL_F_SSL2_WRITE
 127

	)

2669 
	#SSL_F_SSL3_ACCEPT
 128

	)

2670 
	#SSL_F_SSL3_ADD_CERT_TO_BUF
 296

	)

2671 
	#SSL_F_SSL3_CALLBACK_CTRL
 233

	)

2672 
	#SSL_F_SSL3_CHANGE_CIPHER_STATE
 129

	)

2673 
	#SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM
 130

	)

2674 
	#SSL_F_SSL3_CHECK_CLIENT_HELLO
 304

	)

2675 
	#SSL_F_SSL3_CHECK_FINISHED
 339

	)

2676 
	#SSL_F_SSL3_CLIENT_HELLO
 131

	)

2677 
	#SSL_F_SSL3_CONNECT
 132

	)

2678 
	#SSL_F_SSL3_CTRL
 213

	)

2679 
	#SSL_F_SSL3_CTX_CTRL
 133

	)

2680 
	#SSL_F_SSL3_DIGEST_CACHED_RECORDS
 293

	)

2681 
	#SSL_F_SSL3_DO_CHANGE_CIPHER_SPEC
 292

	)

2682 
	#SSL_F_SSL3_ENC
 134

	)

2683 
	#SSL_F_SSL3_GENERATE_KEY_BLOCK
 238

	)

2684 
	#SSL_F_SSL3_GENERATE_MASTER_SECRET
 388

	)

2685 
	#SSL_F_SSL3_GET_CERTIFICATE_REQUEST
 135

	)

2686 
	#SSL_F_SSL3_GET_CERT_STATUS
 289

	)

2687 
	#SSL_F_SSL3_GET_CERT_VERIFY
 136

	)

2688 
	#SSL_F_SSL3_GET_CLIENT_CERTIFICATE
 137

	)

2689 
	#SSL_F_SSL3_GET_CLIENT_HELLO
 138

	)

2690 
	#SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE
 139

	)

2691 
	#SSL_F_SSL3_GET_FINISHED
 140

	)

2692 
	#SSL_F_SSL3_GET_KEY_EXCHANGE
 141

	)

2693 
	#SSL_F_SSL3_GET_MESSAGE
 142

	)

2694 
	#SSL_F_SSL3_GET_NEW_SESSION_TICKET
 283

	)

2695 
	#SSL_F_SSL3_GET_NEXT_PROTO
 306

	)

2696 
	#SSL_F_SSL3_GET_RECORD
 143

	)

2697 
	#SSL_F_SSL3_GET_SERVER_CERTIFICATE
 144

	)

2698 
	#SSL_F_SSL3_GET_SERVER_DONE
 145

	)

2699 
	#SSL_F_SSL3_GET_SERVER_HELLO
 146

	)

2700 
	#SSL_F_SSL3_HANDSHAKE_MAC
 285

	)

2701 
	#SSL_F_SSL3_NEW_SESSION_TICKET
 287

	)

2702 
	#SSL_F_SSL3_OUTPUT_CERT_CHAIN
 147

	)

2703 
	#SSL_F_SSL3_PEEK
 235

	)

2704 
	#SSL_F_SSL3_READ_BYTES
 148

	)

2705 
	#SSL_F_SSL3_READ_N
 149

	)

2706 
	#SSL_F_SSL3_SEND_CERTIFICATE_REQUEST
 150

	)

2707 
	#SSL_F_SSL3_SEND_CLIENT_CERTIFICATE
 151

	)

2708 
	#SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE
 152

	)

2709 
	#SSL_F_SSL3_SEND_CLIENT_VERIFY
 153

	)

2710 
	#SSL_F_SSL3_SEND_SERVER_CERTIFICATE
 154

	)

2711 
	#SSL_F_SSL3_SEND_SERVER_HELLO
 242

	)

2712 
	#SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE
 155

	)

2713 
	#SSL_F_SSL3_SETUP_KEY_BLOCK
 157

	)

2714 
	#SSL_F_SSL3_SETUP_READ_BUFFER
 156

	)

2715 
	#SSL_F_SSL3_SETUP_WRITE_BUFFER
 291

	)

2716 
	#SSL_F_SSL3_WRITE_BYTES
 158

	)

2717 
	#SSL_F_SSL3_WRITE_PENDING
 159

	)

2718 
	#SSL_F_SSL_ADD_CERT_CHAIN
 318

	)

2719 
	#SSL_F_SSL_ADD_CERT_TO_BUF
 319

	)

2720 
	#SSL_F_SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT
 298

	)

2721 
	#SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT
 277

	)

2722 
	#SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT
 307

	)

2723 
	#SSL_F_SSL_ADD_DIR_CERT_SUBJECTS_TO_STACK
 215

	)

2724 
	#SSL_F_SSL_ADD_FILE_CERT_SUBJECTS_TO_STACK
 216

	)

2725 
	#SSL_F_SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT
 299

	)

2726 
	#SSL_F_SSL_ADD_SERVERHELLO_TLSEXT
 278

	)

2727 
	#SSL_F_SSL_ADD_SERVERHELLO_USE_SRTP_EXT
 308

	)

2728 
	#SSL_F_SSL_BAD_METHOD
 160

	)

2729 
	#SSL_F_SSL_BUILD_CERT_CHAIN
 332

	)

2730 
	#SSL_F_SSL_BYTES_TO_CIPHER_LIST
 161

	)

2731 
	#SSL_F_SSL_CERT_DUP
 221

	)

2732 
	#SSL_F_SSL_CERT_INST
 222

	)

2733 
	#SSL_F_SSL_CERT_INSTANTIATE
 214

	)

2734 
	#SSL_F_SSL_CERT_NEW
 162

	)

2735 
	#SSL_F_SSL_CHECK_PRIVATE_KEY
 163

	)

2736 
	#SSL_F_SSL_CHECK_SERVERHELLO_TLSEXT
 280

	)

2737 
	#SSL_F_SSL_CHECK_SRVR_ECC_CERT_AND_ALG
 279

	)

2738 
	#SSL_F_SSL_CIPHER_PROCESS_RULESTR
 230

	)

2739 
	#SSL_F_SSL_CIPHER_STRENGTH_SORT
 231

	)

2740 
	#SSL_F_SSL_CLEAR
 164

	)

2741 
	#SSL_F_SSL_COMP_ADD_COMPRESSION_METHOD
 165

	)

2742 
	#SSL_F_SSL_CONF_CMD
 334

	)

2743 
	#SSL_F_SSL_CREATE_CIPHER_LIST
 166

	)

2744 
	#SSL_F_SSL_CTRL
 232

	)

2745 
	#SSL_F_SSL_CTX_CHECK_PRIVATE_KEY
 168

	)

2746 
	#SSL_F_SSL_CTX_MAKE_PROFILES
 309

	)

2747 
	#SSL_F_SSL_CTX_NEW
 169

	)

2748 
	#SSL_F_SSL_CTX_SET_CIPHER_LIST
 269

	)

2749 
	#SSL_F_SSL_CTX_SET_CLIENT_CERT_ENGINE
 290

	)

2750 
	#SSL_F_SSL_CTX_SET_PURPOSE
 226

	)

2751 
	#SSL_F_SSL_CTX_SET_SESSION_ID_CONTEXT
 219

	)

2752 
	#SSL_F_SSL_CTX_SET_SSL_VERSION
 170

	)

2753 
	#SSL_F_SSL_CTX_SET_TRUST
 229

	)

2754 
	#SSL_F_SSL_CTX_USE_CERTIFICATE
 171

	)

2755 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_ASN1
 172

	)

2756 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_CHAIN_FILE
 220

	)

2757 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_FILE
 173

	)

2758 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY
 174

	)

2759 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY_ASN1
 175

	)

2760 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY_FILE
 176

	)

2761 
	#SSL_F_SSL_CTX_USE_PSK_IDENTITY_HINT
 272

	)

2762 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY
 177

	)

2763 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_ASN1
 178

	)

2764 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_FILE
 179

	)

2765 
	#SSL_F_SSL_CTX_USE_SERVERINFO
 336

	)

2766 
	#SSL_F_SSL_CTX_USE_SERVERINFO_FILE
 337

	)

2767 
	#SSL_F_SSL_DO_HANDSHAKE
 180

	)

2768 
	#SSL_F_SSL_GET_NEW_SESSION
 181

	)

2769 
	#SSL_F_SSL_GET_PREV_SESSION
 217

	)

2770 
	#SSL_F_SSL_GET_SERVER_CERT_INDEX
 322

	)

2771 
	#SSL_F_SSL_GET_SERVER_SEND_CERT
 182

	)

2772 
	#SSL_F_SSL_GET_SERVER_SEND_PKEY
 317

	)

2773 
	#SSL_F_SSL_GET_SIGN_PKEY
 183

	)

2774 
	#SSL_F_SSL_INIT_WBIO_BUFFER
 184

	)

2775 
	#SSL_F_SSL_LOAD_CLIENT_CA_FILE
 185

	)

2776 
	#SSL_F_SSL_NEW
 186

	)

2777 
	#SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT
 300

	)

2778 
	#SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT
 302

	)

2779 
	#SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT
 310

	)

2780 
	#SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT
 301

	)

2781 
	#SSL_F_SSL_PARSE_SERVERHELLO_TLSEXT
 303

	)

2782 
	#SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT
 311

	)

2783 
	#SSL_F_SSL_PEEK
 270

	)

2784 
	#SSL_F_SSL_PREPARE_CLIENTHELLO_TLSEXT
 281

	)

2785 
	#SSL_F_SSL_PREPARE_SERVERHELLO_TLSEXT
 282

	)

2786 
	#SSL_F_SSL_READ
 223

	)

2787 
	#SSL_F_SSL_RSA_PRIVATE_DECRYPT
 187

	)

2788 
	#SSL_F_SSL_RSA_PUBLIC_ENCRYPT
 188

	)

2789 
	#SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT
 320

	)

2790 
	#SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT
 321

	)

2791 
	#SSL_F_SSL_SESSION_DUP
 348

	)

2792 
	#SSL_F_SSL_SESSION_NEW
 189

	)

2793 
	#SSL_F_SSL_SESSION_PRINT_FP
 190

	)

2794 
	#SSL_F_SSL_SESSION_SET1_ID_CONTEXT
 312

	)

2795 
	#SSL_F_SSL_SESS_CERT_NEW
 225

	)

2796 
	#SSL_F_SSL_SET_CERT
 191

	)

2797 
	#SSL_F_SSL_SET_CIPHER_LIST
 271

	)

2798 
	#SSL_F_SSL_SET_FD
 192

	)

2799 
	#SSL_F_SSL_SET_PKEY
 193

	)

2800 
	#SSL_F_SSL_SET_PURPOSE
 227

	)

2801 
	#SSL_F_SSL_SET_RFD
 194

	)

2802 
	#SSL_F_SSL_SET_SESSION
 195

	)

2803 
	#SSL_F_SSL_SET_SESSION_ID_CONTEXT
 218

	)

2804 
	#SSL_F_SSL_SET_SESSION_TICKET_EXT
 294

	)

2805 
	#SSL_F_SSL_SET_TRUST
 228

	)

2806 
	#SSL_F_SSL_SET_WFD
 196

	)

2807 
	#SSL_F_SSL_SHUTDOWN
 224

	)

2808 
	#SSL_F_SSL_SRP_CTX_INIT
 313

	)

2809 
	#SSL_F_SSL_UNDEFINED_CONST_FUNCTION
 243

	)

2810 
	#SSL_F_SSL_UNDEFINED_FUNCTION
 197

	)

2811 
	#SSL_F_SSL_UNDEFINED_VOID_FUNCTION
 244

	)

2812 
	#SSL_F_SSL_USE_CERTIFICATE
 198

	)

2813 
	#SSL_F_SSL_USE_CERTIFICATE_ASN1
 199

	)

2814 
	#SSL_F_SSL_USE_CERTIFICATE_FILE
 200

	)

2815 
	#SSL_F_SSL_USE_PRIVATEKEY
 201

	)

2816 
	#SSL_F_SSL_USE_PRIVATEKEY_ASN1
 202

	)

2817 
	#SSL_F_SSL_USE_PRIVATEKEY_FILE
 203

	)

2818 
	#SSL_F_SSL_USE_PSK_IDENTITY_HINT
 273

	)

2819 
	#SSL_F_SSL_USE_RSAPRIVATEKEY
 204

	)

2820 
	#SSL_F_SSL_USE_RSAPRIVATEKEY_ASN1
 205

	)

2821 
	#SSL_F_SSL_USE_RSAPRIVATEKEY_FILE
 206

	)

2822 
	#SSL_F_SSL_VERIFY_CERT_CHAIN
 207

	)

2823 
	#SSL_F_SSL_WRITE
 208

	)

2824 
	#SSL_F_TLS12_CHECK_PEER_SIGALG
 333

	)

2825 
	#SSL_F_TLS1_CERT_VERIFY_MAC
 286

	)

2826 
	#SSL_F_TLS1_CHANGE_CIPHER_STATE
 209

	)

2827 
	#SSL_F_TLS1_CHECK_SERVERHELLO_TLSEXT
 274

	)

2828 
	#SSL_F_TLS1_ENC
 210

	)

2829 
	#SSL_F_TLS1_EXPORT_KEYING_MATERIAL
 314

	)

2830 
	#SSL_F_TLS1_GET_CURVELIST
 338

	)

2831 
	#SSL_F_TLS1_HEARTBEAT
 315

	)

2832 
	#SSL_F_TLS1_PREPARE_CLIENTHELLO_TLSEXT
 275

	)

2833 
	#SSL_F_TLS1_PREPARE_SERVERHELLO_TLSEXT
 276

	)

2834 
	#SSL_F_TLS1_PRF
 284

	)

2835 
	#SSL_F_TLS1_SETUP_KEY_BLOCK
 211

	)

2836 
	#SSL_F_TLS1_SET_SERVER_SIGALGS
 335

	)

2837 
	#SSL_F_WRITE_PENDING
 212

	)

2840 
	#SSL_R_APP_DATA_IN_HANDSHAKE
 100

	)

2841 
	#SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT
 272

	)

2842 
	#SSL_R_BAD_ALERT_RECORD
 101

	)

2843 
	#SSL_R_BAD_AUTHENTICATION_TYPE
 102

	)

2844 
	#SSL_R_BAD_CHANGE_CIPHER_SPEC
 103

	)

2845 
	#SSL_R_BAD_CHECKSUM
 104

	)

2846 
	#SSL_R_BAD_DATA
 390

	)

2847 
	#SSL_R_BAD_DATA_RETURNED_BY_CALLBACK
 106

	)

2848 
	#SSL_R_BAD_DECOMPRESSION
 107

	)

2849 
	#SSL_R_BAD_DH_G_LENGTH
 108

	)

2850 
	#SSL_R_BAD_DH_G_VALUE
 375

	)

2851 
	#SSL_R_BAD_DH_PUB_KEY_LENGTH
 109

	)

2852 
	#SSL_R_BAD_DH_PUB_KEY_VALUE
 393

	)

2853 
	#SSL_R_BAD_DH_P_LENGTH
 110

	)

2854 
	#SSL_R_BAD_DH_P_VALUE
 395

	)

2855 
	#SSL_R_BAD_DIGEST_LENGTH
 111

	)

2856 
	#SSL_R_BAD_DSA_SIGNATURE
 112

	)

2857 
	#SSL_R_BAD_ECC_CERT
 304

	)

2858 
	#SSL_R_BAD_ECDSA_SIGNATURE
 305

	)

2859 
	#SSL_R_BAD_ECPOINT
 306

	)

2860 
	#SSL_R_BAD_HANDSHAKE_LENGTH
 332

	)

2861 
	#SSL_R_BAD_HELLO_REQUEST
 105

	)

2862 
	#SSL_R_BAD_LENGTH
 271

	)

2863 
	#SSL_R_BAD_MAC_DECODE
 113

	)

2864 
	#SSL_R_BAD_MAC_LENGTH
 333

	)

2865 
	#SSL_R_BAD_MESSAGE_TYPE
 114

	)

2866 
	#SSL_R_BAD_PACKET_LENGTH
 115

	)

2867 
	#SSL_R_BAD_PROTOCOL_VERSION_NUMBER
 116

	)

2868 
	#SSL_R_BAD_PSK_IDENTITY_HINT_LENGTH
 316

	)

2869 
	#SSL_R_BAD_RESPONSE_ARGUMENT
 117

	)

2870 
	#SSL_R_BAD_RSA_DECRYPT
 118

	)

2871 
	#SSL_R_BAD_RSA_ENCRYPT
 119

	)

2872 
	#SSL_R_BAD_RSA_E_LENGTH
 120

	)

2873 
	#SSL_R_BAD_RSA_MODULUS_LENGTH
 121

	)

2874 
	#SSL_R_BAD_RSA_SIGNATURE
 122

	)

2875 
	#SSL_R_BAD_SIGNATURE
 123

	)

2876 
	#SSL_R_BAD_SRP_A_LENGTH
 347

	)

2877 
	#SSL_R_BAD_SRP_B_LENGTH
 348

	)

2878 
	#SSL_R_BAD_SRP_G_LENGTH
 349

	)

2879 
	#SSL_R_BAD_SRP_N_LENGTH
 350

	)

2880 
	#SSL_R_BAD_SRP_PARAMETERS
 371

	)

2881 
	#SSL_R_BAD_SRP_S_LENGTH
 351

	)

2882 
	#SSL_R_BAD_SRTP_MKI_VALUE
 352

	)

2883 
	#SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST
 353

	)

2884 
	#SSL_R_BAD_SSL_FILETYPE
 124

	)

2885 
	#SSL_R_BAD_SSL_SESSION_ID_LENGTH
 125

	)

2886 
	#SSL_R_BAD_STATE
 126

	)

2887 
	#SSL_R_BAD_VALUE
 384

	)

2888 
	#SSL_R_BAD_WRITE_RETRY
 127

	)

2889 
	#SSL_R_BIO_NOT_SET
 128

	)

2890 
	#SSL_R_BLOCK_CIPHER_PAD_IS_WRONG
 129

	)

2891 
	#SSL_R_BN_LIB
 130

	)

2892 
	#SSL_R_CA_DN_LENGTH_MISMATCH
 131

	)

2893 
	#SSL_R_CA_DN_TOO_LONG
 132

	)

2894 
	#SSL_R_CCS_RECEIVED_EARLY
 133

	)

2895 
	#SSL_R_CERTIFICATE_VERIFY_FAILED
 134

	)

2896 
	#SSL_R_CERT_CB_ERROR
 377

	)

2897 
	#SSL_R_CERT_LENGTH_MISMATCH
 135

	)

2898 
	#SSL_R_CHALLENGE_IS_DIFFERENT
 136

	)

2899 
	#SSL_R_CIPHER_CODE_WRONG_LENGTH
 137

	)

2900 
	#SSL_R_CIPHER_OR_HASH_UNAVAILABLE
 138

	)

2901 
	#SSL_R_CIPHER_TABLE_SRC_ERROR
 139

	)

2902 
	#SSL_R_CLIENTHELLO_TLSEXT
 226

	)

2903 
	#SSL_R_COMPRESSED_LENGTH_TOO_LONG
 140

	)

2904 
	#SSL_R_COMPRESSION_DISABLED
 343

	)

2905 
	#SSL_R_COMPRESSION_FAILURE
 141

	)

2906 
	#SSL_R_COMPRESSION_ID_NOT_WITHIN_PRIVATE_RANGE
 307

	)

2907 
	#SSL_R_COMPRESSION_LIBRARY_ERROR
 142

	)

2908 
	#SSL_R_CONNECTION_ID_IS_DIFFERENT
 143

	)

2909 
	#SSL_R_CONNECTION_TYPE_NOT_SET
 144

	)

2910 
	#SSL_R_COOKIE_MISMATCH
 308

	)

2911 
	#SSL_R_DATA_BETWEEN_CCS_AND_FINISHED
 145

	)

2912 
	#SSL_R_DATA_LENGTH_TOO_LONG
 146

	)

2913 
	#SSL_R_DECRYPTION_FAILED
 147

	)

2914 
	#SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC
 281

	)

2915 
	#SSL_R_DH_KEY_TOO_SMALL
 372

	)

2916 
	#SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG
 148

	)

2917 
	#SSL_R_DIGEST_CHECK_FAILED
 149

	)

2918 
	#SSL_R_DTLS_MESSAGE_TOO_BIG
 334

	)

2919 
	#SSL_R_DUPLICATE_COMPRESSION_ID
 309

	)

2920 
	#SSL_R_ECC_CERT_NOT_FOR_KEY_AGREEMENT
 317

	)

2921 
	#SSL_R_ECC_CERT_NOT_FOR_SIGNING
 318

	)

2922 
	#SSL_R_ECC_CERT_SHOULD_HAVE_RSA_SIGNATURE
 322

	)

2923 
	#SSL_R_ECC_CERT_SHOULD_HAVE_SHA1_SIGNATURE
 323

	)

2924 
	#SSL_R_ECDH_REQUIRED_FOR_SUITEB_MODE
 374

	)

2925 
	#SSL_R_ECGROUP_TOO_LARGE_FOR_CIPHER
 310

	)

2926 
	#SSL_R_EMPTY_SRTP_PROTECTION_PROFILE_LIST
 354

	)

2927 
	#SSL_R_ENCRYPTED_LENGTH_TOO_LONG
 150

	)

2928 
	#SSL_R_ERROR_GENERATING_TMP_RSA_KEY
 282

	)

2929 
	#SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST
 151

	)

2930 
	#SSL_R_EXCESSIVE_MESSAGE_SIZE
 152

	)

2931 
	#SSL_R_EXTRA_DATA_IN_MESSAGE
 153

	)

2932 
	#SSL_R_GOT_A_FIN_BEFORE_A_CCS
 154

	)

2933 
	#SSL_R_GOT_NEXT_PROTO_BEFORE_A_CCS
 355

	)

2934 
	#SSL_R_GOT_NEXT_PROTO_WITHOUT_EXTENSION
 356

	)

2935 
	#SSL_R_HTTPS_PROXY_REQUEST
 155

	)

2936 
	#SSL_R_HTTP_REQUEST
 156

	)

2937 
	#SSL_R_ILLEGAL_PADDING
 283

	)

2938 
	#SSL_R_ILLEGAL_SUITEB_DIGEST
 380

	)

2939 
	#SSL_R_INAPPROPRIATE_FALLBACK
 373

	)

2940 
	#SSL_R_INCONSISTENT_COMPRESSION
 340

	)

2941 
	#SSL_R_INVALID_CHALLENGE_LENGTH
 158

	)

2942 
	#SSL_R_INVALID_COMMAND
 280

	)

2943 
	#SSL_R_INVALID_COMPRESSION_ALGORITHM
 341

	)

2944 
	#SSL_R_INVALID_NULL_CMD_NAME
 385

	)

2945 
	#SSL_R_INVALID_PURPOSE
 278

	)

2946 
	#SSL_R_INVALID_SERVERINFO_DATA
 388

	)

2947 
	#SSL_R_INVALID_SRP_USERNAME
 357

	)

2948 
	#SSL_R_INVALID_STATUS_RESPONSE
 328

	)

2949 
	#SSL_R_INVALID_TICKET_KEYS_LENGTH
 325

	)

2950 
	#SSL_R_INVALID_TRUST
 279

	)

2951 
	#SSL_R_KEY_ARG_TOO_LONG
 284

	)

2952 
	#SSL_R_KRB5
 285

	)

2953 
	#SSL_R_KRB5_C_CC_PRINC
 286

	)

2954 
	#SSL_R_KRB5_C_GET_CRED
 287

	)

2955 
	#SSL_R_KRB5_C_INIT
 288

	)

2956 
	#SSL_R_KRB5_C_MK_REQ
 289

	)

2957 
	#SSL_R_KRB5_S_BAD_TICKET
 290

	)

2958 
	#SSL_R_KRB5_S_INIT
 291

	)

2959 
	#SSL_R_KRB5_S_RD_REQ
 292

	)

2960 
	#SSL_R_KRB5_S_TKT_EXPIRED
 293

	)

2961 
	#SSL_R_KRB5_S_TKT_NYV
 294

	)

2962 
	#SSL_R_KRB5_S_TKT_SKEW
 295

	)

2963 
	#SSL_R_LENGTH_MISMATCH
 159

	)

2964 
	#SSL_R_LENGTH_TOO_SHORT
 160

	)

2965 
	#SSL_R_LIBRARY_BUG
 274

	)

2966 
	#SSL_R_LIBRARY_HAS_NO_CIPHERS
 161

	)

2967 
	#SSL_R_MESSAGE_TOO_LONG
 296

	)

2968 
	#SSL_R_MISSING_DH_DSA_CERT
 162

	)

2969 
	#SSL_R_MISSING_DH_KEY
 163

	)

2970 
	#SSL_R_MISSING_DH_RSA_CERT
 164

	)

2971 
	#SSL_R_MISSING_DSA_SIGNING_CERT
 165

	)

2972 
	#SSL_R_MISSING_ECDH_CERT
 382

	)

2973 
	#SSL_R_MISSING_ECDSA_SIGNING_CERT
 381

	)

2974 
	#SSL_R_MISSING_EXPORT_TMP_DH_KEY
 166

	)

2975 
	#SSL_R_MISSING_EXPORT_TMP_RSA_KEY
 167

	)

2976 
	#SSL_R_MISSING_RSA_CERTIFICATE
 168

	)

2977 
	#SSL_R_MISSING_RSA_ENCRYPTING_CERT
 169

	)

2978 
	#SSL_R_MISSING_RSA_SIGNING_CERT
 170

	)

2979 
	#SSL_R_MISSING_SRP_PARAM
 358

	)

2980 
	#SSL_R_MISSING_TMP_DH_KEY
 171

	)

2981 
	#SSL_R_MISSING_TMP_ECDH_KEY
 311

	)

2982 
	#SSL_R_MISSING_TMP_RSA_KEY
 172

	)

2983 
	#SSL_R_MISSING_TMP_RSA_PKEY
 173

	)

2984 
	#SSL_R_MISSING_VERIFY_MESSAGE
 174

	)

2985 
	#SSL_R_MULTIPLE_SGC_RESTARTS
 346

	)

2986 
	#SSL_R_NON_SSLV2_INITIAL_PACKET
 175

	)

2987 
	#SSL_R_NO_CERTIFICATES_RETURNED
 176

	)

2988 
	#SSL_R_NO_CERTIFICATE_ASSIGNED
 177

	)

2989 
	#SSL_R_NO_CERTIFICATE_RETURNED
 178

	)

2990 
	#SSL_R_NO_CERTIFICATE_SET
 179

	)

2991 
	#SSL_R_NO_CERTIFICATE_SPECIFIED
 180

	)

2992 
	#SSL_R_NO_CIPHERS_AVAILABLE
 181

	)

2993 
	#SSL_R_NO_CIPHERS_PASSED
 182

	)

2994 
	#SSL_R_NO_CIPHERS_SPECIFIED
 183

	)

2995 
	#SSL_R_NO_CIPHER_LIST
 184

	)

2996 
	#SSL_R_NO_CIPHER_MATCH
 185

	)

2997 
	#SSL_R_NO_CLIENT_CERT_METHOD
 331

	)

2998 
	#SSL_R_NO_CLIENT_CERT_RECEIVED
 186

	)

2999 
	#SSL_R_NO_COMPRESSION_SPECIFIED
 187

	)

3000 
	#SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER
 330

	)

3001 
	#SSL_R_NO_METHOD_SPECIFIED
 188

	)

3002 
	#SSL_R_NO_PEM_EXTENSIONS
 389

	)

3003 
	#SSL_R_NO_PRIVATEKEY
 189

	)

3004 
	#SSL_R_NO_PRIVATE_KEY_ASSIGNED
 190

	)

3005 
	#SSL_R_NO_PROTOCOLS_AVAILABLE
 191

	)

3006 
	#SSL_R_NO_PUBLICKEY
 192

	)

3007 
	#SSL_R_NO_RENEGOTIATION
 339

	)

3008 
	#SSL_R_NO_REQUIRED_DIGEST
 324

	)

3009 
	#SSL_R_NO_SHARED_CIPHER
 193

	)

3010 
	#SSL_R_NO_SHARED_SIGATURE_ALGORITHMS
 376

	)

3011 
	#SSL_R_NO_SRTP_PROFILES
 359

	)

3012 
	#SSL_R_NO_VERIFY_CALLBACK
 194

	)

3013 
	#SSL_R_NULL_SSL_CTX
 195

	)

3014 
	#SSL_R_NULL_SSL_METHOD_PASSED
 196

	)

3015 
	#SSL_R_OLD_SESSION_CIPHER_NOT_RETURNED
 197

	)

3016 
	#SSL_R_OLD_SESSION_COMPRESSION_ALGORITHM_NOT_RETURNED
 344

	)

3017 
	#SSL_R_ONLY_DTLS_1_2_ALLOWED_IN_SUITEB_MODE
 387

	)

3018 
	#SSL_R_ONLY_TLS_1_2_ALLOWED_IN_SUITEB_MODE
 379

	)

3019 
	#SSL_R_ONLY_TLS_ALLOWED_IN_FIPS_MODE
 297

	)

3020 
	#SSL_R_OPAQUE_PRF_INPUT_TOO_LONG
 327

	)

3021 
	#SSL_R_PACKET_LENGTH_TOO_LONG
 198

	)

3022 
	#SSL_R_PARSE_TLSEXT
 227

	)

3023 
	#SSL_R_PATH_TOO_LONG
 270

	)

3024 
	#SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE
 199

	)

3025 
	#SSL_R_PEER_ERROR
 200

	)

3026 
	#SSL_R_PEER_ERROR_CERTIFICATE
 201

	)

3027 
	#SSL_R_PEER_ERROR_NO_CERTIFICATE
 202

	)

3028 
	#SSL_R_PEER_ERROR_NO_CIPHER
 203

	)

3029 
	#SSL_R_PEER_ERROR_UNSUPPORTED_CERTIFICATE_TYPE
 204

	)

3030 
	#SSL_R_PEM_NAME_BAD_PREFIX
 391

	)

3031 
	#SSL_R_PEM_NAME_TOO_SHORT
 392

	)

3032 
	#SSL_R_PRE_MAC_LENGTH_TOO_LONG
 205

	)

3033 
	#SSL_R_PROBLEMS_MAPPING_CIPHER_FUNCTIONS
 206

	)

3034 
	#SSL_R_PROTOCOL_IS_SHUTDOWN
 207

	)

3035 
	#SSL_R_PSK_IDENTITY_NOT_FOUND
 223

	)

3036 
	#SSL_R_PSK_NO_CLIENT_CB
 224

	)

3037 
	#SSL_R_PSK_NO_SERVER_CB
 225

	)

3038 
	#SSL_R_PUBLIC_KEY_ENCRYPT_ERROR
 208

	)

3039 
	#SSL_R_PUBLIC_KEY_IS_NOT_RSA
 209

	)

3040 
	#SSL_R_PUBLIC_KEY_NOT_RSA
 210

	)

3041 
	#SSL_R_READ_BIO_NOT_SET
 211

	)

3042 
	#SSL_R_READ_TIMEOUT_EXPIRED
 312

	)

3043 
	#SSL_R_READ_WRONG_PACKET_TYPE
 212

	)

3044 
	#SSL_R_RECORD_LENGTH_MISMATCH
 213

	)

3045 
	#SSL_R_RECORD_TOO_LARGE
 214

	)

3046 
	#SSL_R_RECORD_TOO_SMALL
 298

	)

3047 
	#SSL_R_RENEGOTIATE_EXT_TOO_LONG
 335

	)

3048 
	#SSL_R_RENEGOTIATION_ENCODING_ERR
 336

	)

3049 
	#SSL_R_RENEGOTIATION_MISMATCH
 337

	)

3050 
	#SSL_R_REQUIRED_CIPHER_MISSING
 215

	)

3051 
	#SSL_R_REQUIRED_COMPRESSSION_ALGORITHM_MISSING
 342

	)

3052 
	#SSL_R_REUSE_CERT_LENGTH_NOT_ZERO
 216

	)

3053 
	#SSL_R_REUSE_CERT_TYPE_NOT_ZERO
 217

	)

3054 
	#SSL_R_REUSE_CIPHER_LIST_NOT_ZERO
 218

	)

3055 
	#SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING
 345

	)

3056 
	#SSL_R_SERVERHELLO_TLSEXT
 275

	)

3057 
	#SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED
 277

	)

3058 
	#SSL_R_SHORT_READ
 219

	)

3059 
	#SSL_R_SHUTDOWN_WHILE_IN_INIT
 407

	)

3060 
	#SSL_R_SIGNATURE_ALGORITHMS_ERROR
 360

	)

3061 
	#SSL_R_SIGNATURE_FOR_NON_SIGNING_CERTIFICATE
 220

	)

3062 
	#SSL_R_SRP_A_CALC
 361

	)

3063 
	#SSL_R_SRTP_COULD_NOT_ALLOCATE_PROFILES
 362

	)

3064 
	#SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG
 363

	)

3065 
	#SSL_R_SRTP_UNKNOWN_PROTECTION_PROFILE
 364

	)

3066 
	#SSL_R_SSL23_DOING_SESSION_ID_REUSE
 221

	)

3067 
	#SSL_R_SSL2_CONNECTION_ID_TOO_LONG
 299

	)

3068 
	#SSL_R_SSL3_EXT_INVALID_ECPOINTFORMAT
 321

	)

3069 
	#SSL_R_SSL3_EXT_INVALID_SERVERNAME
 319

	)

3070 
	#SSL_R_SSL3_EXT_INVALID_SERVERNAME_TYPE
 320

	)

3071 
	#SSL_R_SSL3_SESSION_ID_TOO_LONG
 300

	)

3072 
	#SSL_R_SSL3_SESSION_ID_TOO_SHORT
 222

	)

3073 
	#SSL_R_SSLV3_ALERT_BAD_CERTIFICATE
 1042

	)

3074 
	#SSL_R_SSLV3_ALERT_BAD_RECORD_MAC
 1020

	)

3075 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED
 1045

	)

3076 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED
 1044

	)

3077 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN
 1046

	)

3078 
	#SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE
 1030

	)

3079 
	#SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE
 1040

	)

3080 
	#SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER
 1047

	)

3081 
	#SSL_R_SSLV3_ALERT_NO_CERTIFICATE
 1041

	)

3082 
	#SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE
 1010

	)

3083 
	#SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE
 1043

	)

3084 
	#SSL_R_SSL_CTX_HAS_NO_DEFAULT_SSL_VERSION
 228

	)

3085 
	#SSL_R_SSL_HANDSHAKE_FAILURE
 229

	)

3086 
	#SSL_R_SSL_LIBRARY_HAS_NO_CIPHERS
 230

	)

3087 
	#SSL_R_SSL_SESSION_ID_CALLBACK_FAILED
 301

	)

3088 
	#SSL_R_SSL_SESSION_ID_CONFLICT
 302

	)

3089 
	#SSL_R_SSL_SESSION_ID_CONTEXT_TOO_LONG
 273

	)

3090 
	#SSL_R_SSL_SESSION_ID_HAS_BAD_LENGTH
 303

	)

3091 
	#SSL_R_SSL_SESSION_ID_IS_DIFFERENT
 231

	)

3092 
	#SSL_R_TLSV1_ALERT_ACCESS_DENIED
 1049

	)

3093 
	#SSL_R_TLSV1_ALERT_DECODE_ERROR
 1050

	)

3094 
	#SSL_R_TLSV1_ALERT_DECRYPTION_FAILED
 1021

	)

3095 
	#SSL_R_TLSV1_ALERT_DECRYPT_ERROR
 1051

	)

3096 
	#SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION
 1060

	)

3097 
	#SSL_R_TLSV1_ALERT_INAPPROPRIATE_FALLBACK
 1086

	)

3098 
	#SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY
 1071

	)

3099 
	#SSL_R_TLSV1_ALERT_INTERNAL_ERROR
 1080

	)

3100 
	#SSL_R_TLSV1_ALERT_NO_RENEGOTIATION
 1100

	)

3101 
	#SSL_R_TLSV1_ALERT_PROTOCOL_VERSION
 1070

	)

3102 
	#SSL_R_TLSV1_ALERT_RECORD_OVERFLOW
 1022

	)

3103 
	#SSL_R_TLSV1_ALERT_UNKNOWN_CA
 1048

	)

3104 
	#SSL_R_TLSV1_ALERT_USER_CANCELLED
 1090

	)

3105 
	#SSL_R_TLSV1_BAD_CERTIFICATE_HASH_VALUE
 1114

	)

3106 
	#SSL_R_TLSV1_BAD_CERTIFICATE_STATUS_RESPONSE
 1113

	)

3107 
	#SSL_R_TLSV1_CERTIFICATE_UNOBTAINABLE
 1111

	)

3108 
	#SSL_R_TLSV1_UNRECOGNIZED_NAME
 1112

	)

3109 
	#SSL_R_TLSV1_UNSUPPORTED_EXTENSION
 1110

	)

3110 
	#SSL_R_TLS_CLIENT_CERT_REQ_WITH_ANON_CIPHER
 232

	)

3111 
	#SSL_R_TLS_HEARTBEAT_PEER_DOESNT_ACCEPT
 365

	)

3112 
	#SSL_R_TLS_HEARTBEAT_PENDING
 366

	)

3113 
	#SSL_R_TLS_ILLEGAL_EXPORTER_LABEL
 367

	)

3114 
	#SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST
 157

	)

3115 
	#SSL_R_TLS_PEER_DID_NOT_RESPOND_WITH_CERTIFICATE_LIST
 233

	)

3116 
	#SSL_R_TLS_RSA_ENCRYPTED_VALUE_LENGTH_IS_WRONG
 234

	)

3117 
	#SSL_R_TRIED_TO_USE_UNSUPPORTED_CIPHER
 235

	)

3118 
	#SSL_R_UNABLE_TO_DECODE_DH_CERTS
 236

	)

3119 
	#SSL_R_UNABLE_TO_DECODE_ECDH_CERTS
 313

	)

3120 
	#SSL_R_UNABLE_TO_EXTRACT_PUBLIC_KEY
 237

	)

3121 
	#SSL_R_UNABLE_TO_FIND_DH_PARAMETERS
 238

	)

3122 
	#SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS
 314

	)

3123 
	#SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS
 239

	)

3124 
	#SSL_R_UNABLE_TO_FIND_SSL_METHOD
 240

	)

3125 
	#SSL_R_UNABLE_TO_LOAD_SSL2_MD5_ROUTINES
 241

	)

3126 
	#SSL_R_UNABLE_TO_LOAD_SSL3_MD5_ROUTINES
 242

	)

3127 
	#SSL_R_UNABLE_TO_LOAD_SSL3_SHA1_ROUTINES
 243

	)

3128 
	#SSL_R_UNEXPECTED_MESSAGE
 244

	)

3129 
	#SSL_R_UNEXPECTED_RECORD
 245

	)

3130 
	#SSL_R_UNINITIALIZED
 276

	)

3131 
	#SSL_R_UNKNOWN_ALERT_TYPE
 246

	)

3132 
	#SSL_R_UNKNOWN_CERTIFICATE_TYPE
 247

	)

3133 
	#SSL_R_UNKNOWN_CIPHER_RETURNED
 248

	)

3134 
	#SSL_R_UNKNOWN_CIPHER_TYPE
 249

	)

3135 
	#SSL_R_UNKNOWN_CMD_NAME
 386

	)

3136 
	#SSL_R_UNKNOWN_DIGEST
 368

	)

3137 
	#SSL_R_UNKNOWN_KEY_EXCHANGE_TYPE
 250

	)

3138 
	#SSL_R_UNKNOWN_PKEY_TYPE
 251

	)

3139 
	#SSL_R_UNKNOWN_PROTOCOL
 252

	)

3140 
	#SSL_R_UNKNOWN_REMOTE_ERROR_TYPE
 253

	)

3141 
	#SSL_R_UNKNOWN_SSL_VERSION
 254

	)

3142 
	#SSL_R_UNKNOWN_STATE
 255

	)

3143 
	#SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED
 338

	)

3144 
	#SSL_R_UNSUPPORTED_CIPHER
 256

	)

3145 
	#SSL_R_UNSUPPORTED_COMPRESSION_ALGORITHM
 257

	)

3146 
	#SSL_R_UNSUPPORTED_DIGEST_TYPE
 326

	)

3147 
	#SSL_R_UNSUPPORTED_ELLIPTIC_CURVE
 315

	)

3148 
	#SSL_R_UNSUPPORTED_PROTOCOL
 258

	)

3149 
	#SSL_R_UNSUPPORTED_SSL_VERSION
 259

	)

3150 
	#SSL_R_UNSUPPORTED_STATUS_TYPE
 329

	)

3151 
	#SSL_R_USE_SRTP_NOT_NEGOTIATED
 369

	)

3152 
	#SSL_R_WRITE_BIO_NOT_SET
 260

	)

3153 
	#SSL_R_WRONG_CERTIFICATE_TYPE
 383

	)

3154 
	#SSL_R_WRONG_CIPHER_RETURNED
 261

	)

3155 
	#SSL_R_WRONG_CURVE
 378

	)

3156 
	#SSL_R_WRONG_MESSAGE_TYPE
 262

	)

3157 
	#SSL_R_WRONG_NUMBER_OF_KEY_BITS
 263

	)

3158 
	#SSL_R_WRONG_SIGNATURE_LENGTH
 264

	)

3159 
	#SSL_R_WRONG_SIGNATURE_SIZE
 265

	)

3160 
	#SSL_R_WRONG_SIGNATURE_TYPE
 370

	)

3161 
	#SSL_R_WRONG_SSL_VERSION
 266

	)

3162 
	#SSL_R_WRONG_VERSION_NUMBER
 267

	)

3163 
	#SSL_R_X509_LIB
 268

	)

3164 
	#SSL_R_X509_VERIFICATION_SETUP_PROBLEMS
 269

	)

3166 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl2.h

59 #i‚de‡
HEADER_SSL2_H


60 
	#HEADER_SSL2_H


	)

62 #ifde‡ 
__˝lu•lus


67 
	#SSL2_VERSION
 0x0002

	)

68 
	#SSL2_VERSION_MAJOR
 0x00

	)

69 
	#SSL2_VERSION_MINOR
 0x02

	)

74 
	#SSL2_MT_ERROR
 0

	)

75 
	#SSL2_MT_CLIENT_HELLO
 1

	)

76 
	#SSL2_MT_CLIENT_MASTER_KEY
 2

	)

77 
	#SSL2_MT_CLIENT_FINISHED
 3

	)

78 
	#SSL2_MT_SERVER_HELLO
 4

	)

79 
	#SSL2_MT_SERVER_VERIFY
 5

	)

80 
	#SSL2_MT_SERVER_FINISHED
 6

	)

81 
	#SSL2_MT_REQUEST_CERTIFICATE
 7

	)

82 
	#SSL2_MT_CLIENT_CERTIFICATE
 8

	)

85 
	#SSL2_PE_UNDEFINED_ERROR
 0x0000

	)

86 
	#SSL2_PE_NO_CIPHER
 0x0001

	)

87 
	#SSL2_PE_NO_CERTIFICATE
 0x0002

	)

88 
	#SSL2_PE_BAD_CERTIFICATE
 0x0004

	)

89 
	#SSL2_PE_UNSUPPORTED_CERTIFICATE_TYPE
 0x0006

	)

92 
	#SSL2_CK_NULL_WITH_MD5
 0x02000000

	)

93 
	#SSL2_CK_RC4_128_WITH_MD5
 0x02010080

	)

94 
	#SSL2_CK_RC4_128_EXPORT40_WITH_MD5
 0x02020080

	)

95 
	#SSL2_CK_RC2_128_CBC_WITH_MD5
 0x02030080

	)

96 
	#SSL2_CK_RC2_128_CBC_EXPORT40_WITH_MD5
 0x02040080

	)

97 
	#SSL2_CK_IDEA_128_CBC_WITH_MD5
 0x02050080

	)

98 
	#SSL2_CK_DES_64_CBC_WITH_MD5
 0x02060040

	)

99 
	#SSL2_CK_DES_64_CBC_WITH_SHA
 0x02060140

	)

100 
	#SSL2_CK_DES_192_EDE3_CBC_WITH_MD5
 0x020700c0

	)

101 
	#SSL2_CK_DES_192_EDE3_CBC_WITH_SHA
 0x020701c0

	)

102 
	#SSL2_CK_RC4_64_WITH_MD5
 0x02080080

	)

104 
	#SSL2_CK_DES_64_CFB64_WITH_MD5_1
 0x02ff0800

	)

105 
	#SSL2_CK_NULL
 0x02ff0810

	)

107 
	#SSL2_TXT_DES_64_CFB64_WITH_MD5_1
 "DES-CFB-M1"

	)

108 
	#SSL2_TXT_NULL_WITH_MD5
 "NULL-MD5"

	)

109 
	#SSL2_TXT_RC4_128_WITH_MD5
 "RC4-MD5"

	)

110 
	#SSL2_TXT_RC4_128_EXPORT40_WITH_MD5
 "EXP-RC4-MD5"

	)

111 
	#SSL2_TXT_RC2_128_CBC_WITH_MD5
 "RC2-CBC-MD5"

	)

112 
	#SSL2_TXT_RC2_128_CBC_EXPORT40_WITH_MD5
 "EXP-RC2-CBC-MD5"

	)

113 
	#SSL2_TXT_IDEA_128_CBC_WITH_MD5
 "IDEA-CBC-MD5"

	)

114 
	#SSL2_TXT_DES_64_CBC_WITH_MD5
 "DES-CBC-MD5"

	)

115 
	#SSL2_TXT_DES_64_CBC_WITH_SHA
 "DES-CBC-SHA"

	)

116 
	#SSL2_TXT_DES_192_EDE3_CBC_WITH_MD5
 "DES-CBC3-MD5"

	)

117 
	#SSL2_TXT_DES_192_EDE3_CBC_WITH_SHA
 "DES-CBC3-SHA"

	)

118 
	#SSL2_TXT_RC4_64_WITH_MD5
 "RC4-64-MD5"

	)

120 
	#SSL2_TXT_NULL
 "NULL"

	)

123 
	#SSL2_CF_5_BYTE_ENC
 0x01

	)

124 
	#SSL2_CF_8_BYTE_ENC
 0x02

	)

127 
	#SSL2_CT_X509_CERTIFICATE
 0x01

	)

130 
	#SSL2_AT_MD5_WITH_RSA_ENCRYPTION
 0x01

	)

132 
	#SSL2_MAX_SSL_SESSION_ID_LENGTH
 32

	)

135 
	#SSL2_MAX_MASTER_KEY_LENGTH_IN_BITS
 256

	)

136 #ifde‡
OPENSSL_SYS_MPE


137 
	#SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER
 29998u

	)

139 
	#SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER
 32767u

	)

142 
	#SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER
 16383

	)

144 
	#SSL2_CHALLENGE_LENGTH
 16

	)

148 
	#SSL2_MIN_CHALLENGE_LENGTH
 16

	)

149 
	#SSL2_MAX_CHALLENGE_LENGTH
 32

	)

150 
	#SSL2_CONNECTION_ID_LENGTH
 16

	)

151 
	#SSL2_MAX_CONNECTION_ID_LENGTH
 16

	)

152 
	#SSL2_SSL_SESSION_ID_LENGTH
 16

	)

153 
	#SSL2_MAX_CERT_CHALLENGE_LENGTH
 32

	)

154 
	#SSL2_MIN_CERT_CHALLENGE_LENGTH
 16

	)

155 
	#SSL2_MAX_KEY_MATERIAL_LENGTH
 24

	)

157 #i‚de‡
HEADER_SSL_LOCL_H


158 
	#CERT
 

	)

161 #i‚de‡
OPENSSL_NO_SSL_INTERN


163 
	ss¶2_°©e_°
 {

164 
thªe_byã_hódî
;

165 
˛ór_ãxt
;

166 
esˇ≥
;

167 
s¶2_rﬁlback
;

171 
wnum
;

172 
w≥nd_tŸ
;

173 c⁄° *
w≥nd_buf
;

174 
w≥nd_off
;

175 
w≥nd_Àn
;

176 
w≥nd_ªt
;

178 
rbuf_À·
;

179 
rbuf_offs
;

180 *
rbuf
;

181 *
wbuf
;

182 *
wrôe_±r
;

184 
∑ddög
;

185 
æígth
;

186 
ø˘_d©a_Àngth
;

187 
wÀngth
;

188 
wa˘_d©a_Àngth
;

189 *
ø˘_d©a
;

190 *
wa˘_d©a
;

191 *
mac_d©a
;

192 *
ªad_key
;

193 *
wrôe_key
;

195 
chÆÀnge_Àngth
;

196 
chÆÀnge
[
SSL2_MAX_CHALLENGE_LENGTH
];

197 
c⁄n_id_Àngth
;

198 
c⁄n_id
[
SSL2_MAX_CONNECTION_ID_LENGTH
];

199 
key_m©îül_Àngth
;

200 
key_m©îül
[
SSL2_MAX_KEY_MATERIAL_LENGTH
 * 2];

201 
ªad_£quí˚
;

202 
wrôe_£quí˚
;

204 
c⁄n_id_Àngth
;

205 
˚π_ty≥
;

206 
˚π_Àngth
;

207 
c¶
;

208 
˛ór
;

209 
íc
;

210 
c˛
[
SSL2_MAX_CERT_CHALLENGE_LENGTH
];

211 
cùhî_•ec_Àngth
;

212 
£ssi⁄_id_Àngth
;

213 
˛í
;

214 
æí
;

215 } 
tmp
;

216 } 
	tSSL2_STATE
;

222 
	#SSL2_ST_SEND_CLIENT_HELLO_A
 (0x10|
SSL_ST_CONNECT
)

	)

223 
	#SSL2_ST_SEND_CLIENT_HELLO_B
 (0x11|
SSL_ST_CONNECT
)

	)

224 
	#SSL2_ST_GET_SERVER_HELLO_A
 (0x20|
SSL_ST_CONNECT
)

	)

225 
	#SSL2_ST_GET_SERVER_HELLO_B
 (0x21|
SSL_ST_CONNECT
)

	)

226 
	#SSL2_ST_SEND_CLIENT_MASTER_KEY_A
 (0x30|
SSL_ST_CONNECT
)

	)

227 
	#SSL2_ST_SEND_CLIENT_MASTER_KEY_B
 (0x31|
SSL_ST_CONNECT
)

	)

228 
	#SSL2_ST_SEND_CLIENT_FINISHED_A
 (0x40|
SSL_ST_CONNECT
)

	)

229 
	#SSL2_ST_SEND_CLIENT_FINISHED_B
 (0x41|
SSL_ST_CONNECT
)

	)

230 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_A
 (0x50|
SSL_ST_CONNECT
)

	)

231 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_B
 (0x51|
SSL_ST_CONNECT
)

	)

232 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_C
 (0x52|
SSL_ST_CONNECT
)

	)

233 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_D
 (0x53|
SSL_ST_CONNECT
)

	)

234 
	#SSL2_ST_GET_SERVER_VERIFY_A
 (0x60|
SSL_ST_CONNECT
)

	)

235 
	#SSL2_ST_GET_SERVER_VERIFY_B
 (0x61|
SSL_ST_CONNECT
)

	)

236 
	#SSL2_ST_GET_SERVER_FINISHED_A
 (0x70|
SSL_ST_CONNECT
)

	)

237 
	#SSL2_ST_GET_SERVER_FINISHED_B
 (0x71|
SSL_ST_CONNECT
)

	)

238 
	#SSL2_ST_CLIENT_START_ENCRYPTION
 (0x80|
SSL_ST_CONNECT
)

	)

239 
	#SSL2_ST_X509_GET_CLIENT_CERTIFICATE
 (0x90|
SSL_ST_CONNECT
)

	)

241 
	#SSL2_ST_GET_CLIENT_HELLO_A
 (0x10|
SSL_ST_ACCEPT
)

	)

242 
	#SSL2_ST_GET_CLIENT_HELLO_B
 (0x11|
SSL_ST_ACCEPT
)

	)

243 
	#SSL2_ST_GET_CLIENT_HELLO_C
 (0x12|
SSL_ST_ACCEPT
)

	)

244 
	#SSL2_ST_SEND_SERVER_HELLO_A
 (0x20|
SSL_ST_ACCEPT
)

	)

245 
	#SSL2_ST_SEND_SERVER_HELLO_B
 (0x21|
SSL_ST_ACCEPT
)

	)

246 
	#SSL2_ST_GET_CLIENT_MASTER_KEY_A
 (0x30|
SSL_ST_ACCEPT
)

	)

247 
	#SSL2_ST_GET_CLIENT_MASTER_KEY_B
 (0x31|
SSL_ST_ACCEPT
)

	)

248 
	#SSL2_ST_SEND_SERVER_VERIFY_A
 (0x40|
SSL_ST_ACCEPT
)

	)

249 
	#SSL2_ST_SEND_SERVER_VERIFY_B
 (0x41|
SSL_ST_ACCEPT
)

	)

250 
	#SSL2_ST_SEND_SERVER_VERIFY_C
 (0x42|
SSL_ST_ACCEPT
)

	)

251 
	#SSL2_ST_GET_CLIENT_FINISHED_A
 (0x50|
SSL_ST_ACCEPT
)

	)

252 
	#SSL2_ST_GET_CLIENT_FINISHED_B
 (0x51|
SSL_ST_ACCEPT
)

	)

253 
	#SSL2_ST_SEND_SERVER_FINISHED_A
 (0x60|
SSL_ST_ACCEPT
)

	)

254 
	#SSL2_ST_SEND_SERVER_FINISHED_B
 (0x61|
SSL_ST_ACCEPT
)

	)

255 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_A
 (0x70|
SSL_ST_ACCEPT
)

	)

256 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_B
 (0x71|
SSL_ST_ACCEPT
)

	)

257 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_C
 (0x72|
SSL_ST_ACCEPT
)

	)

258 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_D
 (0x73|
SSL_ST_ACCEPT
)

	)

259 
	#SSL2_ST_SERVER_START_ENCRYPTION
 (0x80|
SSL_ST_ACCEPT
)

	)

260 
	#SSL2_ST_X509_GET_SERVER_CERTIFICATE
 (0x90|
SSL_ST_ACCEPT
)

	)

262 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl3.h

117 #i‚de‡
HEADER_SSL3_H


118 
	#HEADER_SSL3_H


	)

120 #i‚de‡
OPENSSL_NO_COMP


121 
	~<›ís¶/comp.h
>

123 
	~<›ís¶/buf„r.h
>

124 
	~<›ís¶/evp.h
>

125 
	~<›ís¶/s¶.h
>

127 #ifde‡ 
__˝lu•lus


135 
	#SSL3_CK_SCSV
 0x030000FF

	)

141 
	#SSL3_CK_FALLBACK_SCSV
 0x03005600

	)

143 
	#SSL3_CK_RSA_NULL_MD5
 0x03000001

	)

144 
	#SSL3_CK_RSA_NULL_SHA
 0x03000002

	)

145 
	#SSL3_CK_RSA_RC4_40_MD5
 0x03000003

	)

146 
	#SSL3_CK_RSA_RC4_128_MD5
 0x03000004

	)

147 
	#SSL3_CK_RSA_RC4_128_SHA
 0x03000005

	)

148 
	#SSL3_CK_RSA_RC2_40_MD5
 0x03000006

	)

149 
	#SSL3_CK_RSA_IDEA_128_SHA
 0x03000007

	)

150 
	#SSL3_CK_RSA_DES_40_CBC_SHA
 0x03000008

	)

151 
	#SSL3_CK_RSA_DES_64_CBC_SHA
 0x03000009

	)

152 
	#SSL3_CK_RSA_DES_192_CBC3_SHA
 0x0300000A

	)

154 
	#SSL3_CK_DH_DSS_DES_40_CBC_SHA
 0x0300000B

	)

155 
	#SSL3_CK_DH_DSS_DES_64_CBC_SHA
 0x0300000C

	)

156 
	#SSL3_CK_DH_DSS_DES_192_CBC3_SHA
 0x0300000D

	)

157 
	#SSL3_CK_DH_RSA_DES_40_CBC_SHA
 0x0300000E

	)

158 
	#SSL3_CK_DH_RSA_DES_64_CBC_SHA
 0x0300000F

	)

159 
	#SSL3_CK_DH_RSA_DES_192_CBC3_SHA
 0x03000010

	)

161 
	#SSL3_CK_EDH_DSS_DES_40_CBC_SHA
 0x03000011

	)

162 
	#SSL3_CK_DHE_DSS_DES_40_CBC_SHA
 
SSL3_CK_EDH_DSS_DES_40_CBC_SHA


	)

163 
	#SSL3_CK_EDH_DSS_DES_64_CBC_SHA
 0x03000012

	)

164 
	#SSL3_CK_DHE_DSS_DES_64_CBC_SHA
 
SSL3_CK_EDH_DSS_DES_64_CBC_SHA


	)

165 
	#SSL3_CK_EDH_DSS_DES_192_CBC3_SHA
 0x03000013

	)

166 
	#SSL3_CK_DHE_DSS_DES_192_CBC3_SHA
 
SSL3_CK_EDH_DSS_DES_192_CBC3_SHA


	)

167 
	#SSL3_CK_EDH_RSA_DES_40_CBC_SHA
 0x03000014

	)

168 
	#SSL3_CK_DHE_RSA_DES_40_CBC_SHA
 
SSL3_CK_EDH_RSA_DES_40_CBC_SHA


	)

169 
	#SSL3_CK_EDH_RSA_DES_64_CBC_SHA
 0x03000015

	)

170 
	#SSL3_CK_DHE_RSA_DES_64_CBC_SHA
 
SSL3_CK_EDH_RSA_DES_64_CBC_SHA


	)

171 
	#SSL3_CK_EDH_RSA_DES_192_CBC3_SHA
 0x03000016

	)

172 
	#SSL3_CK_DHE_RSA_DES_192_CBC3_SHA
 
SSL3_CK_EDH_RSA_DES_192_CBC3_SHA


	)

174 
	#SSL3_CK_ADH_RC4_40_MD5
 0x03000017

	)

175 
	#SSL3_CK_ADH_RC4_128_MD5
 0x03000018

	)

176 
	#SSL3_CK_ADH_DES_40_CBC_SHA
 0x03000019

	)

177 
	#SSL3_CK_ADH_DES_64_CBC_SHA
 0x0300001A

	)

178 
	#SSL3_CK_ADH_DES_192_CBC_SHA
 0x0300001B

	)

181 
	#SSL3_CK_FZA_DMS_NULL_SHA
 0x0300001C

	)

182 
	#SSL3_CK_FZA_DMS_FZA_SHA
 0x0300001D

	)

188 
	#SSL3_CK_FZA_DMS_RC4_SHA
 0x0300001E

	)

195 
	#SSL3_CK_KRB5_DES_64_CBC_SHA
 0x0300001E

	)

196 
	#SSL3_CK_KRB5_DES_192_CBC3_SHA
 0x0300001F

	)

197 
	#SSL3_CK_KRB5_RC4_128_SHA
 0x03000020

	)

198 
	#SSL3_CK_KRB5_IDEA_128_CBC_SHA
 0x03000021

	)

199 
	#SSL3_CK_KRB5_DES_64_CBC_MD5
 0x03000022

	)

200 
	#SSL3_CK_KRB5_DES_192_CBC3_MD5
 0x03000023

	)

201 
	#SSL3_CK_KRB5_RC4_128_MD5
 0x03000024

	)

202 
	#SSL3_CK_KRB5_IDEA_128_CBC_MD5
 0x03000025

	)

204 
	#SSL3_CK_KRB5_DES_40_CBC_SHA
 0x03000026

	)

205 
	#SSL3_CK_KRB5_RC2_40_CBC_SHA
 0x03000027

	)

206 
	#SSL3_CK_KRB5_RC4_40_SHA
 0x03000028

	)

207 
	#SSL3_CK_KRB5_DES_40_CBC_MD5
 0x03000029

	)

208 
	#SSL3_CK_KRB5_RC2_40_CBC_MD5
 0x0300002A

	)

209 
	#SSL3_CK_KRB5_RC4_40_MD5
 0x0300002B

	)

211 
	#SSL3_TXT_RSA_NULL_MD5
 "NULL-MD5"

	)

212 
	#SSL3_TXT_RSA_NULL_SHA
 "NULL-SHA"

	)

213 
	#SSL3_TXT_RSA_RC4_40_MD5
 "EXP-RC4-MD5"

	)

214 
	#SSL3_TXT_RSA_RC4_128_MD5
 "RC4-MD5"

	)

215 
	#SSL3_TXT_RSA_RC4_128_SHA
 "RC4-SHA"

	)

216 
	#SSL3_TXT_RSA_RC2_40_MD5
 "EXP-RC2-CBC-MD5"

	)

217 
	#SSL3_TXT_RSA_IDEA_128_SHA
 "IDEA-CBC-SHA"

	)

218 
	#SSL3_TXT_RSA_DES_40_CBC_SHA
 "EXP-DES-CBC-SHA"

	)

219 
	#SSL3_TXT_RSA_DES_64_CBC_SHA
 "DES-CBC-SHA"

	)

220 
	#SSL3_TXT_RSA_DES_192_CBC3_SHA
 "DES-CBC3-SHA"

	)

222 
	#SSL3_TXT_DH_DSS_DES_40_CBC_SHA
 "EXP-DH-DSS-DES-CBC-SHA"

	)

223 
	#SSL3_TXT_DH_DSS_DES_64_CBC_SHA
 "DH-DSS-DES-CBC-SHA"

	)

224 
	#SSL3_TXT_DH_DSS_DES_192_CBC3_SHA
 "DH-DSS-DES-CBC3-SHA"

	)

225 
	#SSL3_TXT_DH_RSA_DES_40_CBC_SHA
 "EXP-DH-RSA-DES-CBC-SHA"

	)

226 
	#SSL3_TXT_DH_RSA_DES_64_CBC_SHA
 "DH-RSA-DES-CBC-SHA"

	)

227 
	#SSL3_TXT_DH_RSA_DES_192_CBC3_SHA
 "DH-RSA-DES-CBC3-SHA"

	)

229 
	#SSL3_TXT_DHE_DSS_DES_40_CBC_SHA
 "EXP-DHE-DSS-DES-CBC-SHA"

	)

230 
	#SSL3_TXT_DHE_DSS_DES_64_CBC_SHA
 "DHE-DSS-DES-CBC-SHA"

	)

231 
	#SSL3_TXT_DHE_DSS_DES_192_CBC3_SHA
 "DHE-DSS-DES-CBC3-SHA"

	)

232 
	#SSL3_TXT_DHE_RSA_DES_40_CBC_SHA
 "EXP-DHE-RSA-DES-CBC-SHA"

	)

233 
	#SSL3_TXT_DHE_RSA_DES_64_CBC_SHA
 "DHE-RSA-DES-CBC-SHA"

	)

234 
	#SSL3_TXT_DHE_RSA_DES_192_CBC3_SHA
 "DHE-RSA-DES-CBC3-SHA"

	)

241 
	#SSL3_TXT_EDH_DSS_DES_40_CBC_SHA
 "EXP-EDH-DSS-DES-CBC-SHA"

	)

242 
	#SSL3_TXT_EDH_DSS_DES_64_CBC_SHA
 "EDH-DSS-DES-CBC-SHA"

	)

243 
	#SSL3_TXT_EDH_DSS_DES_192_CBC3_SHA
 "EDH-DSS-DES-CBC3-SHA"

	)

244 
	#SSL3_TXT_EDH_RSA_DES_40_CBC_SHA
 "EXP-EDH-RSA-DES-CBC-SHA"

	)

245 
	#SSL3_TXT_EDH_RSA_DES_64_CBC_SHA
 "EDH-RSA-DES-CBC-SHA"

	)

246 
	#SSL3_TXT_EDH_RSA_DES_192_CBC3_SHA
 "EDH-RSA-DES-CBC3-SHA"

	)

248 
	#SSL3_TXT_ADH_RC4_40_MD5
 "EXP-ADH-RC4-MD5"

	)

249 
	#SSL3_TXT_ADH_RC4_128_MD5
 "ADH-RC4-MD5"

	)

250 
	#SSL3_TXT_ADH_DES_40_CBC_SHA
 "EXP-ADH-DES-CBC-SHA"

	)

251 
	#SSL3_TXT_ADH_DES_64_CBC_SHA
 "ADH-DES-CBC-SHA"

	)

252 
	#SSL3_TXT_ADH_DES_192_CBC_SHA
 "ADH-DES-CBC3-SHA"

	)

255 
	#SSL3_TXT_FZA_DMS_NULL_SHA
 "FZA-NULL-SHA"

	)

256 
	#SSL3_TXT_FZA_DMS_FZA_SHA
 "FZA-FZA-CBC-SHA"

	)

257 
	#SSL3_TXT_FZA_DMS_RC4_SHA
 "FZA-RC4-SHA"

	)

260 
	#SSL3_TXT_KRB5_DES_64_CBC_SHA
 "KRB5-DES-CBC-SHA"

	)

261 
	#SSL3_TXT_KRB5_DES_192_CBC3_SHA
 "KRB5-DES-CBC3-SHA"

	)

262 
	#SSL3_TXT_KRB5_RC4_128_SHA
 "KRB5-RC4-SHA"

	)

263 
	#SSL3_TXT_KRB5_IDEA_128_CBC_SHA
 "KRB5-IDEA-CBC-SHA"

	)

264 
	#SSL3_TXT_KRB5_DES_64_CBC_MD5
 "KRB5-DES-CBC-MD5"

	)

265 
	#SSL3_TXT_KRB5_DES_192_CBC3_MD5
 "KRB5-DES-CBC3-MD5"

	)

266 
	#SSL3_TXT_KRB5_RC4_128_MD5
 "KRB5-RC4-MD5"

	)

267 
	#SSL3_TXT_KRB5_IDEA_128_CBC_MD5
 "KRB5-IDEA-CBC-MD5"

	)

269 
	#SSL3_TXT_KRB5_DES_40_CBC_SHA
 "EXP-KRB5-DES-CBC-SHA"

	)

270 
	#SSL3_TXT_KRB5_RC2_40_CBC_SHA
 "EXP-KRB5-RC2-CBC-SHA"

	)

271 
	#SSL3_TXT_KRB5_RC4_40_SHA
 "EXP-KRB5-RC4-SHA"

	)

272 
	#SSL3_TXT_KRB5_DES_40_CBC_MD5
 "EXP-KRB5-DES-CBC-MD5"

	)

273 
	#SSL3_TXT_KRB5_RC2_40_CBC_MD5
 "EXP-KRB5-RC2-CBC-MD5"

	)

274 
	#SSL3_TXT_KRB5_RC4_40_MD5
 "EXP-KRB5-RC4-MD5"

	)

276 
	#SSL3_SSL_SESSION_ID_LENGTH
 32

	)

277 
	#SSL3_MAX_SSL_SESSION_ID_LENGTH
 32

	)

279 
	#SSL3_MASTER_SECRET_SIZE
 48

	)

280 
	#SSL3_RANDOM_SIZE
 32

	)

281 
	#SSL3_SESSION_ID_SIZE
 32

	)

282 
	#SSL3_RT_HEADER_LENGTH
 5

	)

284 
	#SSL3_HM_HEADER_LENGTH
 4

	)

286 #i‚de‡
SSL3_ALIGN_PAYLOAD


295 
	#SSL3_ALIGN_PAYLOAD
 8

	)

297 #i‡(
SSL3_ALIGN_PAYLOAD
&(SSL3_ALIGN_PAYLOAD-1))!=0

299 #unde‡
SSL3_ALIGN_PAYLOAD


309 
	#SSL3_RT_MAX_MD_SIZE
 64

	)

315 
	#SSL_RT_MAX_CIPHER_BLOCK_SIZE
 16

	)

317 
	#SSL3_RT_MAX_EXTRA
 (16384)

	)

320 
	#SSL3_RT_MAX_PLAIN_LENGTH
 16384

	)

322 
	#SSL3_RT_MAX_COMPRESSED_OVERHEAD
 1024

	)

329 
	#SSL3_RT_MAX_ENCRYPTED_OVERHEAD
 (256 + 
SSL3_RT_MAX_MD_SIZE
)

	)

336 
	#SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD
 \

337 (
SSL_RT_MAX_CIPHER_BLOCK_SIZE
 + 
SSL3_RT_MAX_MD_SIZE
)

	)

341 #ifde‡
OPENSSL_NO_COMP


342 
	#SSL3_RT_MAX_COMPRESSED_LENGTH
 
SSL3_RT_MAX_PLAIN_LENGTH


	)

344 
	#SSL3_RT_MAX_COMPRESSED_LENGTH
 \

345 (
SSL3_RT_MAX_PLAIN_LENGTH
+
SSL3_RT_MAX_COMPRESSED_OVERHEAD
)

	)

347 
	#SSL3_RT_MAX_ENCRYPTED_LENGTH
 \

348 (
SSL3_RT_MAX_ENCRYPTED_OVERHEAD
+
SSL3_RT_MAX_COMPRESSED_LENGTH
)

	)

349 
	#SSL3_RT_MAX_PACKET_SIZE
 \

350 (
SSL3_RT_MAX_ENCRYPTED_LENGTH
+
SSL3_RT_HEADER_LENGTH
)

	)

352 
	#SSL3_MD_CLIENT_FINISHED_CONST
 "\x43\x4C\x4E\x54"

	)

353 
	#SSL3_MD_SERVER_FINISHED_CONST
 "\x53\x52\x56\x52"

	)

355 
	#SSL3_VERSION
 0x0300

	)

356 
	#SSL3_VERSION_MAJOR
 0x03

	)

357 
	#SSL3_VERSION_MINOR
 0x00

	)

359 
	#SSL3_RT_CHANGE_CIPHER_SPEC
 20

	)

360 
	#SSL3_RT_ALERT
 21

	)

361 
	#SSL3_RT_HANDSHAKE
 22

	)

362 
	#SSL3_RT_APPLICATION_DATA
 23

	)

363 
	#TLS1_RT_HEARTBEAT
 24

	)

366 
	#TLS1_RT_CRYPTO
 0x1000

	)

367 
	#TLS1_RT_CRYPTO_PREMASTER
 (
TLS1_RT_CRYPTO
 | 0x1)

	)

368 
	#TLS1_RT_CRYPTO_CLIENT_RANDOM
 (
TLS1_RT_CRYPTO
 | 0x2)

	)

369 
	#TLS1_RT_CRYPTO_SERVER_RANDOM
 (
TLS1_RT_CRYPTO
 | 0x3)

	)

370 
	#TLS1_RT_CRYPTO_MASTER
 (
TLS1_RT_CRYPTO
 | 0x4)

	)

372 
	#TLS1_RT_CRYPTO_READ
 0x0000

	)

373 
	#TLS1_RT_CRYPTO_WRITE
 0x0100

	)

374 
	#TLS1_RT_CRYPTO_MAC
 (
TLS1_RT_CRYPTO
 | 0x5)

	)

375 
	#TLS1_RT_CRYPTO_KEY
 (
TLS1_RT_CRYPTO
 | 0x6)

	)

376 
	#TLS1_RT_CRYPTO_IV
 (
TLS1_RT_CRYPTO
 | 0x7)

	)

377 
	#TLS1_RT_CRYPTO_FIXED_IV
 (
TLS1_RT_CRYPTO
 | 0x8)

	)

380 
	#SSL3_RT_HEADER
 0x100

	)

382 
	#SSL3_AL_WARNING
 1

	)

383 
	#SSL3_AL_FATAL
 2

	)

385 
	#SSL3_AD_CLOSE_NOTIFY
 0

	)

386 
	#SSL3_AD_UNEXPECTED_MESSAGE
 10

	)

387 
	#SSL3_AD_BAD_RECORD_MAC
 20

	)

388 
	#SSL3_AD_DECOMPRESSION_FAILURE
 30

	)

389 
	#SSL3_AD_HANDSHAKE_FAILURE
 40

	)

390 
	#SSL3_AD_NO_CERTIFICATE
 41

	)

391 
	#SSL3_AD_BAD_CERTIFICATE
 42

	)

392 
	#SSL3_AD_UNSUPPORTED_CERTIFICATE
 43

	)

393 
	#SSL3_AD_CERTIFICATE_REVOKED
 44

	)

394 
	#SSL3_AD_CERTIFICATE_EXPIRED
 45

	)

395 
	#SSL3_AD_CERTIFICATE_UNKNOWN
 46

	)

396 
	#SSL3_AD_ILLEGAL_PARAMETER
 47

	)

398 
	#TLS1_HB_REQUEST
 1

	)

399 
	#TLS1_HB_RESPONSE
 2

	)

401 #i‚de‡
OPENSSL_NO_SSL_INTERN


403 
	ss¶3_ªc‹d_°
 {

407  
ty≥
;

411  
Àngth
;

415  
off
;

419  *
d©a
;

423  *
öput
;

427  *
comp
;

431  
ïoch
;

435  
£q_num
[8];

436 } 
	tSSL3_RECORD
;

438 
	ss¶3_buf„r_°
 {

440 *
buf
;

442 
size_t
 
Àn
;

444 
off£t
;

446 
À·
;

447 } 
	tSSL3_BUFFER
;

451 
	#SSL3_CT_RSA_SIGN
 1

	)

452 
	#SSL3_CT_DSS_SIGN
 2

	)

453 
	#SSL3_CT_RSA_FIXED_DH
 3

	)

454 
	#SSL3_CT_DSS_FIXED_DH
 4

	)

455 
	#SSL3_CT_RSA_EPHEMERAL_DH
 5

	)

456 
	#SSL3_CT_DSS_EPHEMERAL_DH
 6

	)

457 
	#SSL3_CT_FORTEZZA_DMS
 20

	)

462 
	#SSL3_CT_NUMBER
 9

	)

464 
	#SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS
 0x0001

	)

465 
	#SSL3_FLAGS_DELAY_CLIENT_FINISHED
 0x0002

	)

466 
	#SSL3_FLAGS_POP_BUFFER
 0x0004

	)

467 
	#TLS1_FLAGS_TLS_PADDING_BUG
 0x0008

	)

468 
	#TLS1_FLAGS_SKIP_CERT_VERIFY
 0x0010

	)

469 
	#TLS1_FLAGS_KEEP_HANDSHAKE
 0x0020

	)

474 
	#SSL3_FLAGS_CCS_OK
 0x0080

	)

477 
	#SSL3_FLAGS_SGC_RESTART_DONE
 0x0040

	)

479 #i‚de‡
OPENSSL_NO_SSL_INTERN


481 
	ss¶3_°©e_°
 {

482 
Êags
;

483 
dñay_buf_p›_ªt
;

484 
ªad_£quí˚
[8];

485 
ªad_mac_£¸ë_size
;

486 
ªad_mac_£¸ë
[
EVP_MAX_MD_SIZE
];

487 
wrôe_£quí˚
[8];

488 
wrôe_mac_£¸ë_size
;

489 
wrôe_mac_£¸ë
[
EVP_MAX_MD_SIZE
];

490 
£rvî_øndom
[
SSL3_RANDOM_SIZE
];

491 
˛õ¡_øndom
[
SSL3_RANDOM_SIZE
];

493 
√ed_em±y_‰agmíts
;

494 
em±y_‰agmít_d⁄e
;

496 
öô_exåa
;

497 
SSL3_BUFFER
 
rbuf
;

498 
SSL3_BUFFER
 
wbuf
;

499 
SSL3_RECORD
 
ºec
;

500 
SSL3_RECORD
 
wªc
;

505 
Æît_‰agmít
[2];

506 
Æît_‰agmít_Àn
;

507 
h™dshake_‰agmít
[4];

508 
h™dshake_‰agmít_Àn
;

510 
wnum
;

511 
w≥nd_tŸ
;

512 
w≥nd_ty≥
;

513 
w≥nd_ªt
;

514 c⁄° *
w≥nd_buf
;

516 
BIO
 *
h™dshake_buf„r
;

521 
EVP_MD_CTX
 **
h™dshake_dg°
;

527 
ch™ge_cùhî_•ec
;

528 
w¨n_Æît
;

529 
Áèl_Æît
;

534 
Æît_di•©ch
;

535 
£nd_Æît
[2];

540 
ª√gŸüã
;

541 
tŸÆ_ª√gŸüti⁄s
;

542 
num_ª√gŸüti⁄s
;

543 
ö_ªad_≠p_d©a
;

549 *
˛õ¡_›aque_¥f_öput
;

550 
size_t
 
˛õ¡_›aque_¥f_öput_Àn
;

551 *
£rvî_›aque_¥f_öput
;

552 
size_t
 
£rvî_›aque_¥f_öput_Àn
;

555 
˚π_vîify_md
[
EVP_MAX_MD_SIZE
 * 2];

557 
föish_md
[
EVP_MAX_MD_SIZE
 * 2];

558 
föish_md_Àn
;

559 
≥î_föish_md
[
EVP_MAX_MD_SIZE
 * 2];

560 
≥î_föish_md_Àn
;

561 
mesßge_size
;

562 
mesßge_ty≥
;

564 c⁄° 
SSL_CIPHER
 *
√w_cùhî
;

565 #i‚de‡
OPENSSL_NO_DH


566 
DH
 *
dh
;

568 #i‚de‡
OPENSSL_NO_ECDH


569 
EC_KEY
 *
ecdh
;

572 
√xt_°©e
;

573 
ªu£_mesßge
;

575 
˚π_ªq
;

576 
˘y≥_num
;

577 
˘y≥
[
SSL3_CT_NUMBER
];

578 
STACK_OF
(
X509_NAME
Ë*
ˇ_«mes
;

579 
u£_rß_tmp
;

580 
key_block_Àngth
;

581 *
key_block
;

582 c⁄° 
EVP_CIPHER
 *
√w_sym_íc
;

583 c⁄° 
EVP_MD
 *
√w_hash
;

584 
√w_mac_pkey_ty≥
;

585 
√w_mac_£¸ë_size
;

586 #i‚de‡
OPENSSL_NO_COMP


587 c⁄° 
SSL_COMP
 *
√w_com¥essi⁄
;

589 *
√w_com¥essi⁄
;

591 
˚π_ªque°
;

592 } 
tmp
;

595 
¥evious_˛õ¡_föished
[
EVP_MAX_MD_SIZE
];

596 
¥evious_˛õ¡_föished_Àn
;

597 
¥evious_£rvî_föished
[
EVP_MAX_MD_SIZE
];

598 
¥evious_£rvî_föished_Àn
;

599 
£nd_c⁄√˘i⁄_bödög
;

601 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


605 
√xt_¥Ÿo_√g_£í
;

608 #i‚de‡
OPENSSL_NO_TLSEXT


609 #i‚de‡
OPENSSL_NO_EC


615 
is_¥obably_ßÁri
;

628 *
Æ≤_£À˘ed
;

629 
Æ≤_£À˘ed_Àn
;

631 } 
	tSSL3_STATE
;

640 
	#SSL3_ST_CW_FLUSH
 (0x100|
SSL_ST_CONNECT
)

	)

641 #i‚de‡
OPENSSL_NO_SCTP


642 
	#DTLS1_SCTP_ST_CW_WRITE_SOCK
 (0x310|
SSL_ST_CONNECT
)

	)

643 
	#DTLS1_SCTP_ST_CR_READ_SOCK
 (0x320|
SSL_ST_CONNECT
)

	)

646 
	#SSL3_ST_CW_CLNT_HELLO_A
 (0x110|
SSL_ST_CONNECT
)

	)

647 
	#SSL3_ST_CW_CLNT_HELLO_B
 (0x111|
SSL_ST_CONNECT
)

	)

649 
	#SSL3_ST_CR_SRVR_HELLO_A
 (0x120|
SSL_ST_CONNECT
)

	)

650 
	#SSL3_ST_CR_SRVR_HELLO_B
 (0x121|
SSL_ST_CONNECT
)

	)

651 
	#DTLS1_ST_CR_HELLO_VERIFY_REQUEST_A
 (0x126|
SSL_ST_CONNECT
)

	)

652 
	#DTLS1_ST_CR_HELLO_VERIFY_REQUEST_B
 (0x127|
SSL_ST_CONNECT
)

	)

653 
	#SSL3_ST_CR_CERT_A
 (0x130|
SSL_ST_CONNECT
)

	)

654 
	#SSL3_ST_CR_CERT_B
 (0x131|
SSL_ST_CONNECT
)

	)

655 
	#SSL3_ST_CR_KEY_EXCH_A
 (0x140|
SSL_ST_CONNECT
)

	)

656 
	#SSL3_ST_CR_KEY_EXCH_B
 (0x141|
SSL_ST_CONNECT
)

	)

657 
	#SSL3_ST_CR_CERT_REQ_A
 (0x150|
SSL_ST_CONNECT
)

	)

658 
	#SSL3_ST_CR_CERT_REQ_B
 (0x151|
SSL_ST_CONNECT
)

	)

659 
	#SSL3_ST_CR_SRVR_DONE_A
 (0x160|
SSL_ST_CONNECT
)

	)

660 
	#SSL3_ST_CR_SRVR_DONE_B
 (0x161|
SSL_ST_CONNECT
)

	)

662 
	#SSL3_ST_CW_CERT_A
 (0x170|
SSL_ST_CONNECT
)

	)

663 
	#SSL3_ST_CW_CERT_B
 (0x171|
SSL_ST_CONNECT
)

	)

664 
	#SSL3_ST_CW_CERT_C
 (0x172|
SSL_ST_CONNECT
)

	)

665 
	#SSL3_ST_CW_CERT_D
 (0x173|
SSL_ST_CONNECT
)

	)

666 
	#SSL3_ST_CW_KEY_EXCH_A
 (0x180|
SSL_ST_CONNECT
)

	)

667 
	#SSL3_ST_CW_KEY_EXCH_B
 (0x181|
SSL_ST_CONNECT
)

	)

668 
	#SSL3_ST_CW_CERT_VRFY_A
 (0x190|
SSL_ST_CONNECT
)

	)

669 
	#SSL3_ST_CW_CERT_VRFY_B
 (0x191|
SSL_ST_CONNECT
)

	)

670 
	#SSL3_ST_CW_CHANGE_A
 (0x1A0|
SSL_ST_CONNECT
)

	)

671 
	#SSL3_ST_CW_CHANGE_B
 (0x1A1|
SSL_ST_CONNECT
)

	)

672 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


673 
	#SSL3_ST_CW_NEXT_PROTO_A
 (0x200|
SSL_ST_CONNECT
)

	)

674 
	#SSL3_ST_CW_NEXT_PROTO_B
 (0x201|
SSL_ST_CONNECT
)

	)

676 
	#SSL3_ST_CW_FINISHED_A
 (0x1B0|
SSL_ST_CONNECT
)

	)

677 
	#SSL3_ST_CW_FINISHED_B
 (0x1B1|
SSL_ST_CONNECT
)

	)

679 
	#SSL3_ST_CR_CHANGE_A
 (0x1C0|
SSL_ST_CONNECT
)

	)

680 
	#SSL3_ST_CR_CHANGE_B
 (0x1C1|
SSL_ST_CONNECT
)

	)

681 
	#SSL3_ST_CR_FINISHED_A
 (0x1D0|
SSL_ST_CONNECT
)

	)

682 
	#SSL3_ST_CR_FINISHED_B
 (0x1D1|
SSL_ST_CONNECT
)

	)

683 
	#SSL3_ST_CR_SESSION_TICKET_A
 (0x1E0|
SSL_ST_CONNECT
)

	)

684 
	#SSL3_ST_CR_SESSION_TICKET_B
 (0x1E1|
SSL_ST_CONNECT
)

	)

685 
	#SSL3_ST_CR_CERT_STATUS_A
 (0x1F0|
SSL_ST_CONNECT
)

	)

686 
	#SSL3_ST_CR_CERT_STATUS_B
 (0x1F1|
SSL_ST_CONNECT
)

	)

690 
	#SSL3_ST_SW_FLUSH
 (0x100|
SSL_ST_ACCEPT
)

	)

691 #i‚de‡
OPENSSL_NO_SCTP


692 
	#DTLS1_SCTP_ST_SW_WRITE_SOCK
 (0x310|
SSL_ST_ACCEPT
)

	)

693 
	#DTLS1_SCTP_ST_SR_READ_SOCK
 (0x320|
SSL_ST_ACCEPT
)

	)

697 
	#SSL3_ST_SR_CLNT_HELLO_A
 (0x110|
SSL_ST_ACCEPT
)

	)

698 
	#SSL3_ST_SR_CLNT_HELLO_B
 (0x111|
SSL_ST_ACCEPT
)

	)

699 
	#SSL3_ST_SR_CLNT_HELLO_C
 (0x112|
SSL_ST_ACCEPT
)

	)

700 
	#SSL3_ST_SR_CLNT_HELLO_D
 (0x115|
SSL_ST_ACCEPT
)

	)

702 
	#DTLS1_ST_SW_HELLO_VERIFY_REQUEST_A
 (0x113|
SSL_ST_ACCEPT
)

	)

703 
	#DTLS1_ST_SW_HELLO_VERIFY_REQUEST_B
 (0x114|
SSL_ST_ACCEPT
)

	)

704 
	#SSL3_ST_SW_HELLO_REQ_A
 (0x120|
SSL_ST_ACCEPT
)

	)

705 
	#SSL3_ST_SW_HELLO_REQ_B
 (0x121|
SSL_ST_ACCEPT
)

	)

706 
	#SSL3_ST_SW_HELLO_REQ_C
 (0x122|
SSL_ST_ACCEPT
)

	)

707 
	#SSL3_ST_SW_SRVR_HELLO_A
 (0x130|
SSL_ST_ACCEPT
)

	)

708 
	#SSL3_ST_SW_SRVR_HELLO_B
 (0x131|
SSL_ST_ACCEPT
)

	)

709 
	#SSL3_ST_SW_CERT_A
 (0x140|
SSL_ST_ACCEPT
)

	)

710 
	#SSL3_ST_SW_CERT_B
 (0x141|
SSL_ST_ACCEPT
)

	)

711 
	#SSL3_ST_SW_KEY_EXCH_A
 (0x150|
SSL_ST_ACCEPT
)

	)

712 
	#SSL3_ST_SW_KEY_EXCH_B
 (0x151|
SSL_ST_ACCEPT
)

	)

713 
	#SSL3_ST_SW_CERT_REQ_A
 (0x160|
SSL_ST_ACCEPT
)

	)

714 
	#SSL3_ST_SW_CERT_REQ_B
 (0x161|
SSL_ST_ACCEPT
)

	)

715 
	#SSL3_ST_SW_SRVR_DONE_A
 (0x170|
SSL_ST_ACCEPT
)

	)

716 
	#SSL3_ST_SW_SRVR_DONE_B
 (0x171|
SSL_ST_ACCEPT
)

	)

718 
	#SSL3_ST_SR_CERT_A
 (0x180|
SSL_ST_ACCEPT
)

	)

719 
	#SSL3_ST_SR_CERT_B
 (0x181|
SSL_ST_ACCEPT
)

	)

720 
	#SSL3_ST_SR_KEY_EXCH_A
 (0x190|
SSL_ST_ACCEPT
)

	)

721 
	#SSL3_ST_SR_KEY_EXCH_B
 (0x191|
SSL_ST_ACCEPT
)

	)

722 
	#SSL3_ST_SR_CERT_VRFY_A
 (0x1A0|
SSL_ST_ACCEPT
)

	)

723 
	#SSL3_ST_SR_CERT_VRFY_B
 (0x1A1|
SSL_ST_ACCEPT
)

	)

724 
	#SSL3_ST_SR_CHANGE_A
 (0x1B0|
SSL_ST_ACCEPT
)

	)

725 
	#SSL3_ST_SR_CHANGE_B
 (0x1B1|
SSL_ST_ACCEPT
)

	)

726 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


727 
	#SSL3_ST_SR_NEXT_PROTO_A
 (0x210|
SSL_ST_ACCEPT
)

	)

728 
	#SSL3_ST_SR_NEXT_PROTO_B
 (0x211|
SSL_ST_ACCEPT
)

	)

730 
	#SSL3_ST_SR_FINISHED_A
 (0x1C0|
SSL_ST_ACCEPT
)

	)

731 
	#SSL3_ST_SR_FINISHED_B
 (0x1C1|
SSL_ST_ACCEPT
)

	)

733 
	#SSL3_ST_SW_CHANGE_A
 (0x1D0|
SSL_ST_ACCEPT
)

	)

734 
	#SSL3_ST_SW_CHANGE_B
 (0x1D1|
SSL_ST_ACCEPT
)

	)

735 
	#SSL3_ST_SW_FINISHED_A
 (0x1E0|
SSL_ST_ACCEPT
)

	)

736 
	#SSL3_ST_SW_FINISHED_B
 (0x1E1|
SSL_ST_ACCEPT
)

	)

737 
	#SSL3_ST_SW_SESSION_TICKET_A
 (0x1F0|
SSL_ST_ACCEPT
)

	)

738 
	#SSL3_ST_SW_SESSION_TICKET_B
 (0x1F1|
SSL_ST_ACCEPT
)

	)

739 
	#SSL3_ST_SW_CERT_STATUS_A
 (0x200|
SSL_ST_ACCEPT
)

	)

740 
	#SSL3_ST_SW_CERT_STATUS_B
 (0x201|
SSL_ST_ACCEPT
)

	)

742 
	#SSL3_MT_HELLO_REQUEST
 0

	)

743 
	#SSL3_MT_CLIENT_HELLO
 1

	)

744 
	#SSL3_MT_SERVER_HELLO
 2

	)

745 
	#SSL3_MT_NEWSESSION_TICKET
 4

	)

746 
	#SSL3_MT_CERTIFICATE
 11

	)

747 
	#SSL3_MT_SERVER_KEY_EXCHANGE
 12

	)

748 
	#SSL3_MT_CERTIFICATE_REQUEST
 13

	)

749 
	#SSL3_MT_SERVER_DONE
 14

	)

750 
	#SSL3_MT_CERTIFICATE_VERIFY
 15

	)

751 
	#SSL3_MT_CLIENT_KEY_EXCHANGE
 16

	)

752 
	#SSL3_MT_FINISHED
 20

	)

753 
	#SSL3_MT_CERTIFICATE_STATUS
 22

	)

754 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


755 
	#SSL3_MT_NEXT_PROTO
 67

	)

757 
	#DTLS1_MT_HELLO_VERIFY_REQUEST
 3

	)

759 
	#SSL3_MT_CCS
 1

	)

762 
	#SSL3_CC_READ
 0x01

	)

763 
	#SSL3_CC_WRITE
 0x02

	)

764 
	#SSL3_CC_CLIENT
 0x10

	)

765 
	#SSL3_CC_SERVER
 0x20

	)

766 
	#SSL3_CHANGE_CIPHER_CLIENT_WRITE
 (
SSL3_CC_CLIENT
|
SSL3_CC_WRITE
)

	)

767 
	#SSL3_CHANGE_CIPHER_SERVER_READ
 (
SSL3_CC_SERVER
|
SSL3_CC_READ
)

	)

768 
	#SSL3_CHANGE_CIPHER_CLIENT_READ
 (
SSL3_CC_CLIENT
|
SSL3_CC_READ
)

	)

769 
	#SSL3_CHANGE_CIPHER_SERVER_WRITE
 (
SSL3_CC_SERVER
|
SSL3_CC_WRITE
)

	)

771 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/stack.h

59 #i‚de‡
HEADER_STACK_H


60 
	#HEADER_STACK_H


	)

62 #ifde‡ 
__˝lu•lus


66 
	s°ack_°
 {

67 
num
;

68 **
d©a
;

69 
s‹ãd
;

70 
num_Æloc
;

71 (*
comp
) (const *, const *);

72 } 
	t_STACK
;

74 
	#M_sk_num
(
sk
Ë((skË? (sk)->
num
:-1)

	)

75 
	#M_sk_vÆue
(
sk
,
n
Ë((skË? (sk)->
d©a
[n] : 
NULL
)

	)

77 
sk_num
(c⁄° 
_STACK
 *);

78 *
sk_vÆue
(c⁄° 
_STACK
 *, );

80 *
sk_£t
(
_STACK
 *, , *);

82 
_STACK
 *
sk_√w
((*
cmp
) (const *, const *));

83 
_STACK
 *
sk_√w_nuŒ
();

84 
sk_‰ì
(
_STACK
 *);

85 
sk_p›_‰ì
(
_STACK
 *
°
, (*
func
) (*));

86 
_STACK
 *
sk_dìp_c›y
(_STACK *, *(*)(*), (*)(*));

87 
sk_ö£π
(
_STACK
 *
sk
, *
d©a
, 
whîe
);

88 *
sk_dñëe
(
_STACK
 *
°
, 
loc
);

89 *
sk_dñëe_±r
(
_STACK
 *
°
, *
p
);

90 
sk_föd
(
_STACK
 *
°
, *
d©a
);

91 
sk_föd_ex
(
_STACK
 *
°
, *
d©a
);

92 
sk_push
(
_STACK
 *
°
, *
d©a
);

93 
sk_unshi·
(
_STACK
 *
°
, *
d©a
);

94 *
sk_shi·
(
_STACK
 *
°
);

95 *
sk_p›
(
_STACK
 *
°
);

96 
sk_zîo
(
_STACK
 *
°
);

97 (*
sk_£t_cmp_func
(
_STACK
 *
sk
, (*
c
) (const *, const *)))

99 
_STACK
 *
sk_dup
(_STACK *
°
);

100 
sk_s‹t
(
_STACK
 *
°
);

101 
sk_is_s‹ãd
(c⁄° 
_STACK
 *
°
);

103 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/symhacks.h

55 #i‚de‡
HEADER_SYMHACKS_H


56 
	#HEADER_SYMHACKS_H


	)

58 
	~<›ís¶/e_os2.h
>

72 #ifde‡
OPENSSL_SYS_VMS


75 #unde‡
CRYPTO_gë_ex_d©a_im∂emíèti⁄


76 
	#CRYPTO_gë_ex_d©a_im∂emíèti⁄
 
CRYPTO_gë_ex_d©a_im∂


	)

77 #unde‡
CRYPTO_£t_ex_d©a_im∂emíèti⁄


78 
	#CRYPTO_£t_ex_d©a_im∂emíèti⁄
 
CRYPTO_£t_ex_d©a_im∂


	)

81 #unde‡
ASN1_STRING_£t_deÁu…_mask_asc


82 
	#ASN1_STRING_£t_deÁu…_mask_asc
 
ASN1_STRING_£t_def_mask_asc


	)

87 #unde‡
i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO


88 
	#i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO
 
i2d_ASN1_SET_OF_PKCS7_SIGINF


	)

89 #unde‡
d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO


90 
	#d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO
 
d2i_ASN1_SET_OF_PKCS7_SIGINF


	)

96 #unde‡
i2d_ASN1_SET_OF_PKCS7_RECIP_INFO


97 
	#i2d_ASN1_SET_OF_PKCS7_RECIP_INFO
 
i2d_ASN1_SET_OF_PKCS7_RECINF


	)

98 #unde‡
d2i_ASN1_SET_OF_PKCS7_RECIP_INFO


99 
	#d2i_ASN1_SET_OF_PKCS7_RECIP_INFO
 
d2i_ASN1_SET_OF_PKCS7_RECINF


	)

105 #unde‡
i2d_ASN1_SET_OF_ACCESS_DESCRIPTION


106 
	#i2d_ASN1_SET_OF_ACCESS_DESCRIPTION
 
i2d_ASN1_SET_OF_ACC_DESC


	)

107 #unde‡
d2i_ASN1_SET_OF_ACCESS_DESCRIPTION


108 
	#d2i_ASN1_SET_OF_ACCESS_DESCRIPTION
 
d2i_ASN1_SET_OF_ACC_DESC


	)

112 #unde‡
PEM_ªad_NETSCAPE_CERT_SEQUENCE


113 
	#PEM_ªad_NETSCAPE_CERT_SEQUENCE
 
PEM_ªad_NS_CERT_SEQ


	)

114 #unde‡
PEM_wrôe_NETSCAPE_CERT_SEQUENCE


115 
	#PEM_wrôe_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_NS_CERT_SEQ


	)

116 #unde‡
PEM_ªad_bio_NETSCAPE_CERT_SEQUENCE


117 
	#PEM_ªad_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_ªad_bio_NS_CERT_SEQ


	)

118 #unde‡
PEM_wrôe_bio_NETSCAPE_CERT_SEQUENCE


119 
	#PEM_wrôe_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_bio_NS_CERT_SEQ


	)

120 #unde‡
PEM_wrôe_cb_bio_NETSCAPE_CERT_SEQUENCE


121 
	#PEM_wrôe_cb_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_cb_bio_NS_CERT_SEQ


	)

124 #unde‡
PEM_ªad_PKCS8_PRIV_KEY_INFO


125 
	#PEM_ªad_PKCS8_PRIV_KEY_INFO
 
PEM_ªad_P8_PRIV_KEY_INFO


	)

126 #unde‡
PEM_wrôe_PKCS8_PRIV_KEY_INFO


127 
	#PEM_wrôe_PKCS8_PRIV_KEY_INFO
 
PEM_wrôe_P8_PRIV_KEY_INFO


	)

128 #unde‡
PEM_ªad_bio_PKCS8_PRIV_KEY_INFO


129 
	#PEM_ªad_bio_PKCS8_PRIV_KEY_INFO
 
PEM_ªad_bio_P8_PRIV_KEY_INFO


	)

130 #unde‡
PEM_wrôe_bio_PKCS8_PRIV_KEY_INFO


131 
	#PEM_wrôe_bio_PKCS8_PRIV_KEY_INFO
 
PEM_wrôe_bio_P8_PRIV_KEY_INFO


	)

132 #unde‡
PEM_wrôe_cb_bio_PKCS8_PRIV_KEY_INFO


133 
	#PEM_wrôe_cb_bio_PKCS8_PRIV_KEY_INFO
 
PEM_wπ_cb_bio_P8_PRIV_KEY_INFO


	)

136 #unde‡
PEM_wrôe_bio_PKCS8Priv©eKey_nid


137 
	#PEM_wrôe_bio_PKCS8Priv©eKey_nid
 
PEM_wrôe_bio_PKCS8PrivKey_nid


	)

140 #unde‡
X509_REVOKED_gë_ext_by_¸ôiˇl


141 
	#X509_REVOKED_gë_ext_by_¸ôiˇl
 
X509_REVOKED_gë_ext_by_¸ôic


	)

142 #unde‡
X509_pﬁicy_åì_gë0_u£r_pﬁicõs


143 
	#X509_pﬁicy_åì_gë0_u£r_pﬁicõs
 
X509_pcy_åì_gë0_u§_pﬁicõs


	)

144 #unde‡
X509_pﬁicy_node_gë0_quÆifõrs


145 
	#X509_pﬁicy_node_gë0_quÆifõrs
 
X509_pcy_node_gë0_quÆifõrs


	)

146 #unde‡
X509_STORE_CTX_gë_ex∂icô_pﬁicy


147 
	#X509_STORE_CTX_gë_ex∂icô_pﬁicy
 
X509_STORE_CTX_gë_ex∂_pﬁicy


	)

148 #unde‡
X509_STORE_CTX_gë0_cuºít_issuî


149 
	#X509_STORE_CTX_gë0_cuºít_issuî
 
X509_STORE_CTX_gë0_cur_issuî


	)

152 #unde‡
CRYPTO_£t_dy∆ock_de°roy_ˇŒback


153 
	#CRYPTO_£t_dy∆ock_de°roy_ˇŒback
 
CRYPTO_£t_dy∆ock_de°roy_cb


	)

154 #unde‡
CRYPTO_£t_dy∆ock_¸óã_ˇŒback


155 
	#CRYPTO_£t_dy∆ock_¸óã_ˇŒback
 
CRYPTO_£t_dy∆ock_¸óã_cb


	)

156 #unde‡
CRYPTO_£t_dy∆ock_lock_ˇŒback


157 
	#CRYPTO_£t_dy∆ock_lock_ˇŒback
 
CRYPTO_£t_dy∆ock_lock_cb


	)

158 #unde‡
CRYPTO_gë_dy∆ock_lock_ˇŒback


159 
	#CRYPTO_gë_dy∆ock_lock_ˇŒback
 
CRYPTO_gë_dy∆ock_lock_cb


	)

160 #unde‡
CRYPTO_gë_dy∆ock_de°roy_ˇŒback


161 
	#CRYPTO_gë_dy∆ock_de°roy_ˇŒback
 
CRYPTO_gë_dy∆ock_de°roy_cb


	)

162 #unde‡
CRYPTO_gë_dy∆ock_¸óã_ˇŒback


163 
	#CRYPTO_gë_dy∆ock_¸óã_ˇŒback
 
CRYPTO_gë_dy∆ock_¸óã_cb


	)

164 #unde‡
CRYPTO_£t_locked_mem_ex_fun˘i⁄s


165 
	#CRYPTO_£t_locked_mem_ex_fun˘i⁄s
 
CRYPTO_£t_locked_mem_ex_funcs


	)

166 #unde‡
CRYPTO_gë_locked_mem_ex_fun˘i⁄s


167 
	#CRYPTO_gë_locked_mem_ex_fun˘i⁄s
 
CRYPTO_gë_locked_mem_ex_funcs


	)

170 #unde‡
SSL_CTX_£t_deÁu…_vîify_∑ths


171 
	#SSL_CTX_£t_deÁu…_vîify_∑ths
 
SSL_CTX_£t_def_vîify_∑ths


	)

172 #unde‡
SSL_gë_ex_d©a_X509_STORE_CTX_idx


173 
	#SSL_gë_ex_d©a_X509_STORE_CTX_idx
 
SSL_gë_ex_d_X509_STORE_CTX_idx


	)

174 #unde‡
SSL_add_fûe_˚π_subje˘s_to_°ack


175 
	#SSL_add_fûe_˚π_subje˘s_to_°ack
 
SSL_add_fûe_˚π_subjs_to_°k


	)

176 #unde‡
SSL_add_dú_˚π_subje˘s_to_°ack


177 
	#SSL_add_dú_˚π_subje˘s_to_°ack
 
SSL_add_dú_˚π_subjs_to_°k


	)

178 #unde‡
SSL_CTX_u£_˚πifiˇã_chaö_fûe


179 
	#SSL_CTX_u£_˚πifiˇã_chaö_fûe
 
SSL_CTX_u£_˚π_chaö_fûe


	)

180 #unde‡
SSL_CTX_£t_˚π_vîify_ˇŒback


181 
	#SSL_CTX_£t_˚π_vîify_ˇŒback
 
SSL_CTX_£t_˚π_vîify_cb


	)

182 #unde‡
SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a


183 
	#SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a
 
SSL_CTX_£t_def_∑sswd_cb_ud


	)

184 #unde‡
SSL_COMP_gë_com¥essi⁄_mëhods


185 
	#SSL_COMP_gë_com¥essi⁄_mëhods
 
SSL_COMP_gë_com¥ess_mëhods


	)

186 #unde‡
SSL_COMP_£t0_com¥essi⁄_mëhods


187 
	#SSL_COMP_£t0_com¥essi⁄_mëhods
 
SSL_COMP_£t0_com¥ess_mëhods


	)

188 #unde‡
SSL_COMP_‰ì_com¥essi⁄_mëhods


189 
	#SSL_COMP_‰ì_com¥essi⁄_mëhods
 
SSL_COMP_‰ì_com¥ess_mëhods


	)

190 #unde‡
s¶_add_˛õ¡hñlo_ª√gŸüã_ext


191 
	#s¶_add_˛õ¡hñlo_ª√gŸüã_ext
 
s¶_add_˛õ¡hñlo_ª√g_ext


	)

192 #unde‡
s¶_add_£rvîhñlo_ª√gŸüã_ext


193 
	#s¶_add_£rvîhñlo_ª√gŸüã_ext
 
s¶_add_£rvîhñlo_ª√g_ext


	)

194 #unde‡
s¶_∑r£_˛õ¡hñlo_ª√gŸüã_ext


195 
	#s¶_∑r£_˛õ¡hñlo_ª√gŸüã_ext
 
s¶_∑r£_˛õ¡hñlo_ª√g_ext


	)

196 #unde‡
s¶_∑r£_£rvîhñlo_ª√gŸüã_ext


197 
	#s¶_∑r£_£rvîhñlo_ª√gŸüã_ext
 
s¶_∑r£_£rvîhñlo_ª√g_ext


	)

198 #unde‡
SSL_§p_£rvî_∑øm_wôh_u£∫ame


199 
	#SSL_§p_£rvî_∑øm_wôh_u£∫ame
 
SSL_§p_£rvî_∑øm_wôh_un


	)

200 #unde‡
SSL_CTX_£t_§p_˛õ¡_pwd_ˇŒback


201 
	#SSL_CTX_£t_§p_˛õ¡_pwd_ˇŒback
 
SSL_CTX_£t_§p_˛õ¡_pwd_cb


	)

202 #unde‡
SSL_CTX_£t_§p_vîify_∑øm_ˇŒback


203 
	#SSL_CTX_£t_§p_vîify_∑øm_ˇŒback
 
SSL_CTX_£t_§p_vfy_∑øm_cb


	)

204 #unde‡
SSL_CTX_£t_§p_u£∫ame_ˇŒback


205 
	#SSL_CTX_£t_§p_u£∫ame_ˇŒback
 
SSL_CTX_£t_§p_un_cb


	)

206 #unde‡
s¶_add_˛õ¡hñlo_u£_§ç_ext


207 
	#s¶_add_˛õ¡hñlo_u£_§ç_ext
 
s¶_add_˛ihñlo_u£_§ç_ext


	)

208 #unde‡
s¶_add_£rvîhñlo_u£_§ç_ext


209 
	#s¶_add_£rvîhñlo_u£_§ç_ext
 
s¶_add_£rhñlo_u£_§ç_ext


	)

210 #unde‡
s¶_∑r£_˛õ¡hñlo_u£_§ç_ext


211 
	#s¶_∑r£_˛õ¡hñlo_u£_§ç_ext
 
s¶_∑r£_˛ihñlo_u£_§ç_ext


	)

212 #unde‡
s¶_∑r£_£rvîhñlo_u£_§ç_ext


213 
	#s¶_∑r£_£rvîhñlo_u£_§ç_ext
 
s¶_∑r£_£rhñlo_u£_§ç_ext


	)

214 #unde‡
SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb


215 
	#SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb
 
SSL_CTX_£t_√xt_¥Ÿos_adv_cb


	)

216 #unde‡
SSL_CTX_£t_√xt_¥Ÿo_£À˘_cb


217 
	#SSL_CTX_£t_√xt_¥Ÿo_£À˘_cb
 
SSL_CTX_£t_√xt_¥Ÿo_£l_cb


	)

219 #unde‡
és1_£nd_£rvî_suµÀmíèl_d©a


220 
	#és1_£nd_£rvî_suµÀmíèl_d©a
 
és1_£nd_£rvî_suµl_d©a


	)

221 #unde‡
és1_£nd_˛õ¡_suµÀmíèl_d©a


222 
	#és1_£nd_˛õ¡_suµÀmíèl_d©a
 
és1_£nd_˛õ¡_suµl_d©a


	)

223 #unde‡
és1_gë_£rvî_suµÀmíèl_d©a


224 
	#és1_gë_£rvî_suµÀmíèl_d©a
 
és1_gë_£rvî_suµl_d©a


	)

225 #unde‡
és1_gë_˛õ¡_suµÀmíèl_d©a


226 
	#és1_gë_˛õ¡_suµÀmíèl_d©a
 
és1_gë_˛õ¡_suµl_d©a


	)

228 #unde‡
s¶3_cbc_ªc‹d_dige°_suµ‹ãd


229 
	#s¶3_cbc_ªc‹d_dige°_suµ‹ãd
 
s¶3_cbc_ªc‹d_dige°_suµ‹t


	)

230 #unde‡
s¶_check_˛õ¡hñlo_é£xt_œã


231 
	#s¶_check_˛õ¡hñlo_é£xt_œã
 
s¶_check_˛ihñlo_é£xt_œã


	)

232 #unde‡
s¶_check_˛õ¡hñlo_é£xt_óæy


233 
	#s¶_check_˛õ¡hñlo_é£xt_óæy
 
s¶_check_˛ihñlo_é£xt_óæy


	)

236 #unde‡
RSA_∑ddög_check_PKCS1_OAEP_mgf1


237 
	#RSA_∑ddög_check_PKCS1_OAEP_mgf1
 
RSA_∑d_check_PKCS1_OAEP_mgf1


	)

240 #unde‡
ENGINE_gë_deÁu…_BN_mod_exp_¸t


241 
	#ENGINE_gë_deÁu…_BN_mod_exp_¸t
 
ENGINE_gë_def_BN_mod_exp_¸t


	)

242 #unde‡
ENGINE_£t_deÁu…_BN_mod_exp_¸t


243 
	#ENGINE_£t_deÁu…_BN_mod_exp_¸t
 
ENGINE_£t_def_BN_mod_exp_¸t


	)

244 #unde‡
ENGINE_£t_lﬂd_¥ivkey_fun˘i⁄


245 
	#ENGINE_£t_lﬂd_¥ivkey_fun˘i⁄
 
ENGINE_£t_lﬂd_¥ivkey_‚


	)

246 #unde‡
ENGINE_gë_lﬂd_¥ivkey_fun˘i⁄


247 
	#ENGINE_gë_lﬂd_¥ivkey_fun˘i⁄
 
ENGINE_gë_lﬂd_¥ivkey_‚


	)

248 #unde‡
ENGINE_uƒegi°î_pkey_a¢1_mëhs


249 
	#ENGINE_uƒegi°î_pkey_a¢1_mëhs
 
ENGINE_uƒeg_pkey_a¢1_mëhs


	)

250 #unde‡
ENGINE_ªgi°î_Æl_pkey_a¢1_mëhs


251 
	#ENGINE_ªgi°î_Æl_pkey_a¢1_mëhs
 
ENGINE_ªg_Æl_pkey_a¢1_mëhs


	)

252 #unde‡
ENGINE_£t_deÁu…_pkey_a¢1_mëhs


253 
	#ENGINE_£t_deÁu…_pkey_a¢1_mëhs
 
ENGINE_£t_def_pkey_a¢1_mëhs


	)

254 #unde‡
ENGINE_gë_pkey_a¢1_mëh_ígöe


255 
	#ENGINE_gë_pkey_a¢1_mëh_ígöe
 
ENGINE_gë_pkey_a¢1_mëh_íg


	)

256 #unde‡
ENGINE_£t_lﬂd_s¶_˛õ¡_˚π_fun˘i⁄


257 
	#ENGINE_£t_lﬂd_s¶_˛õ¡_˚π_fun˘i⁄
 \

258 
ENGINE_£t_ld_s¶_˛¡_˚π_‚


	)

259 #unde‡
ENGINE_gë_s¶_˛õ¡_˚π_fun˘i⁄


260 
	#ENGINE_gë_s¶_˛õ¡_˚π_fun˘i⁄
 
ENGINE_gë_s¶_˛õ¡_˚π_‚


	)

263 #unde‡
OCSP_REQUEST_gë_ext_by_¸ôiˇl


264 
	#OCSP_REQUEST_gë_ext_by_¸ôiˇl
 
OCSP_REQUEST_gë_ext_by_¸ô


	)

265 #unde‡
OCSP_BASICRESP_gë_ext_by_¸ôiˇl


266 
	#OCSP_BASICRESP_gë_ext_by_¸ôiˇl
 
OCSP_BASICRESP_gë_ext_by_¸ô


	)

267 #unde‡
OCSP_SINGLERESP_gë_ext_by_¸ôiˇl


268 
	#OCSP_SINGLERESP_gë_ext_by_¸ôiˇl
 
OCSP_SINGLERESP_gë_ext_by_¸ô


	)

271 #unde‡
_os¶_ﬁd_des_ede3_cfb64_í¸y±


272 
	#_os¶_ﬁd_des_ede3_cfb64_í¸y±
 
_os¶_odes_ede3_cfb64_í¸y±


	)

273 #unde‡
_os¶_ﬁd_des_ede3_ofb64_í¸y±


274 
	#_os¶_ﬁd_des_ede3_ofb64_í¸y±
 
_os¶_odes_ede3_ofb64_í¸y±


	)

277 #unde‡
OPENSSL_add_Æl_Æg‹ôhms_noc⁄f


278 
	#OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
 
OPENSSL_add_Æl_Ægo_noc⁄f


	)

279 #unde‡
OPENSSL_add_Æl_Æg‹ôhms_c⁄f


280 
	#OPENSSL_add_Æl_Æg‹ôhms_c⁄f
 
OPENSSL_add_Æl_Ægo_c⁄f


	)

281 #unde‡
EVP_PKEY_mëh_£t_vîify_ªcovî


282 
	#EVP_PKEY_mëh_£t_vîify_ªcovî
 
EVP_PKEY_mëh_£t_vrfy_ªcovî


	)

285 #unde‡
EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m


286 
	#EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m
 
EC_GROUP_£t_poöt_c⁄v_f‹m


	)

287 #unde‡
EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m


288 
	#EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m
 
EC_GROUP_gë_poöt_c⁄v_f‹m


	)

289 #unde‡
EC_GROUP_˛ór_‰ì_Æl_exåa_d©a


290 
	#EC_GROUP_˛ór_‰ì_Æl_exåa_d©a
 
EC_GROUP_˛r_‰ì_Æl_xåa_d©a


	)

291 #unde‡
EC_KEY_£t_public_key_afföe_co‹dö©es


292 
	#EC_KEY_£t_public_key_afföe_co‹dö©es
 \

293 
EC_KEY_£t_pub_key_aff_co‹ds


	)

294 #unde‡
EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp


295 
	#EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp
 \

296 
EC_POINT_£t_J¥oj_co‹ds_GFp


	)

297 #unde‡
EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp


298 
	#EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp
 \

299 
EC_POINT_gë_J¥oj_co‹ds_GFp


	)

300 #unde‡
EC_POINT_£t_afföe_co‹dö©es_GFp


301 
	#EC_POINT_£t_afföe_co‹dö©es_GFp
 
EC_POINT_£t_afföe_co‹ds_GFp


	)

302 #unde‡
EC_POINT_gë_afföe_co‹dö©es_GFp


303 
	#EC_POINT_gë_afföe_co‹dö©es_GFp
 
EC_POINT_gë_afföe_co‹ds_GFp


	)

304 #unde‡
EC_POINT_£t_com¥es£d_co‹dö©es_GFp


305 
	#EC_POINT_£t_com¥es£d_co‹dö©es_GFp
 
EC_POINT_£t_com¥_co‹ds_GFp


	)

306 #unde‡
EC_POINT_£t_afföe_co‹dö©es_GF2m


307 
	#EC_POINT_£t_afföe_co‹dö©es_GF2m
 
EC_POINT_£t_afföe_co‹ds_GF2m


	)

308 #unde‡
EC_POINT_gë_afföe_co‹dö©es_GF2m


309 
	#EC_POINT_gë_afföe_co‹dö©es_GF2m
 
EC_POINT_gë_afföe_co‹ds_GF2m


	)

310 #unde‡
EC_POINT_£t_com¥es£d_co‹dö©es_GF2m


311 
	#EC_POINT_£t_com¥es£d_co‹dö©es_GF2m
 \

312 
EC_POINT_£t_com¥_co‹ds_GF2m


	)

313 #unde‡
ec_GF2m_sim∂e_group_˛ór_föish


314 
	#ec_GF2m_sim∂e_group_˛ór_föish
 
ec_GF2m_sim∂e_gΩ_˛r_föish


	)

315 #unde‡
ec_GF2m_sim∂e_group_check_dis¸imö™t


316 
	#ec_GF2m_sim∂e_group_check_dis¸imö™t
 
ec_GF2m_sim∂e_gΩ_chk_dis¸im


	)

317 #unde‡
ec_GF2m_sim∂e_poöt_˛ór_föish


318 
	#ec_GF2m_sim∂e_poöt_˛ór_föish
 
ec_GF2m_sim∂e_±_˛r_föish


	)

319 #unde‡
ec_GF2m_sim∂e_poöt_£t_to_öföôy


320 
	#ec_GF2m_sim∂e_poöt_£t_to_öföôy
 
ec_GF2m_sim∂e_±_£t_to_öf


	)

321 #unde‡
ec_GF2m_sim∂e_poöts_make_afföe


322 
	#ec_GF2m_sim∂e_poöts_make_afföe
 
ec_GF2m_sim∂e_±s_make_afföe


	)

323 #unde‡
ec_GF2m_sim∂e_poöt_£t_afföe_co‹dö©es


324 
	#ec_GF2m_sim∂e_poöt_£t_afföe_co‹dö©es
 \

325 
ec_GF2m_smp_±_£t_af_co‹ds


	)

326 #unde‡
ec_GF2m_sim∂e_poöt_gë_afföe_co‹dö©es


327 
	#ec_GF2m_sim∂e_poöt_gë_afföe_co‹dö©es
 \

328 
ec_GF2m_smp_±_gë_af_co‹ds


	)

329 #unde‡
ec_GF2m_sim∂e_£t_com¥es£d_co‹dö©es


330 
	#ec_GF2m_sim∂e_£t_com¥es£d_co‹dö©es
 \

331 
ec_GF2m_smp_£t_com¥_co‹ds


	)

332 #unde‡
ec_GFp_sim∂e_group_£t_curve_GFp


333 
	#ec_GFp_sim∂e_group_£t_curve_GFp
 
ec_GFp_sim∂e_gΩ_£t_curve_GFp


	)

334 #unde‡
ec_GFp_sim∂e_group_gë_curve_GFp


335 
	#ec_GFp_sim∂e_group_gë_curve_GFp
 
ec_GFp_sim∂e_gΩ_gë_curve_GFp


	)

336 #unde‡
ec_GFp_sim∂e_group_˛ór_föish


337 
	#ec_GFp_sim∂e_group_˛ór_föish
 
ec_GFp_sim∂e_gΩ_˛ór_föish


	)

338 #unde‡
ec_GFp_sim∂e_group_£t_gíî©‹


339 
	#ec_GFp_sim∂e_group_£t_gíî©‹
 
ec_GFp_sim∂e_gΩ_£t_gíî©‹


	)

340 #unde‡
ec_GFp_sim∂e_group_gë0_gíî©‹


341 
	#ec_GFp_sim∂e_group_gë0_gíî©‹
 
ec_GFp_sim∂e_gΩ_gt0_gíî©‹


	)

342 #unde‡
ec_GFp_sim∂e_group_gë_coÁ˘‹


343 
	#ec_GFp_sim∂e_group_gë_coÁ˘‹
 
ec_GFp_sim∂e_gΩ_gë_coÁ˘‹


	)

344 #unde‡
ec_GFp_sim∂e_poöt_˛ór_föish


345 
	#ec_GFp_sim∂e_poöt_˛ór_föish
 
ec_GFp_sim∂e_±_˛ór_föish


	)

346 #unde‡
ec_GFp_sim∂e_poöt_£t_to_öföôy


347 
	#ec_GFp_sim∂e_poöt_£t_to_öföôy
 
ec_GFp_sim∂e_±_£t_to_öf


	)

348 #unde‡
ec_GFp_sim∂e_poöts_make_afföe


349 
	#ec_GFp_sim∂e_poöts_make_afföe
 
ec_GFp_sim∂e_±s_make_afföe


	)

350 #unde‡
ec_GFp_sim∂e_£t_J¥oje˘ive_co‹dö©es_GFp


351 
	#ec_GFp_sim∂e_£t_J¥oje˘ive_co‹dö©es_GFp
 \

352 
ec_GFp_smp_£t_J¥oj_co‹ds_GFp


	)

353 #unde‡
ec_GFp_sim∂e_gë_J¥oje˘ive_co‹dö©es_GFp


354 
	#ec_GFp_sim∂e_gë_J¥oje˘ive_co‹dö©es_GFp
 \

355 
ec_GFp_smp_gë_J¥oj_co‹ds_GFp


	)

356 #unde‡
ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es_GFp


357 
	#ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es_GFp
 \

358 
ec_GFp_smp_±_£t_af_co‹ds_GFp


	)

359 #unde‡
ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es_GFp


360 
	#ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es_GFp
 \

361 
ec_GFp_smp_±_gë_af_co‹ds_GFp


	)

362 #unde‡
ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es_GFp


363 
	#ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es_GFp
 \

364 
ec_GFp_smp_£t_com¥_co‹ds_GFp


	)

365 #unde‡
ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es


366 
	#ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es
 \

367 
ec_GFp_smp_±_£t_af_co‹ds


	)

368 #unde‡
ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es


369 
	#ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es
 \

370 
ec_GFp_smp_±_gë_af_co‹ds


	)

371 #unde‡
ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es


372 
	#ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es
 \

373 
ec_GFp_smp_£t_com¥_co‹ds


	)

374 #unde‡
ec_GFp_sim∂e_group_check_dis¸imö™t


375 
	#ec_GFp_sim∂e_group_check_dis¸imö™t
 
ec_GFp_sim∂e_gΩ_chk_dis¸im


	)

378 #unde‡
STORE_mëhod_£t_öôüli£_fun˘i⁄


379 
	#STORE_mëhod_£t_öôüli£_fun˘i⁄
 
STORE_mëh_£t_öôüli£_‚


	)

380 #unde‡
STORE_mëhod_£t_˛ónup_fun˘i⁄


381 
	#STORE_mëhod_£t_˛ónup_fun˘i⁄
 
STORE_mëh_£t_˛ónup_‚


	)

382 #unde‡
STORE_mëhod_£t_gíî©e_fun˘i⁄


383 
	#STORE_mëhod_£t_gíî©e_fun˘i⁄
 
STORE_mëh_£t_gíî©e_‚


	)

384 #unde‡
STORE_mëhod_£t_modify_fun˘i⁄


385 
	#STORE_mëhod_£t_modify_fun˘i⁄
 
STORE_mëh_£t_modify_‚


	)

386 #unde‡
STORE_mëhod_£t_ªvoke_fun˘i⁄


387 
	#STORE_mëhod_£t_ªvoke_fun˘i⁄
 
STORE_mëh_£t_ªvoke_‚


	)

388 #unde‡
STORE_mëhod_£t_dñëe_fun˘i⁄


389 
	#STORE_mëhod_£t_dñëe_fun˘i⁄
 
STORE_mëh_£t_dñëe_‚


	)

390 #unde‡
STORE_mëhod_£t_li°_°¨t_fun˘i⁄


391 
	#STORE_mëhod_£t_li°_°¨t_fun˘i⁄
 
STORE_mëh_£t_li°_°¨t_‚


	)

392 #unde‡
STORE_mëhod_£t_li°_√xt_fun˘i⁄


393 
	#STORE_mëhod_£t_li°_√xt_fun˘i⁄
 
STORE_mëh_£t_li°_√xt_‚


	)

394 #unde‡
STORE_mëhod_£t_li°_íd_fun˘i⁄


395 
	#STORE_mëhod_£t_li°_íd_fun˘i⁄
 
STORE_mëh_£t_li°_íd_‚


	)

396 #unde‡
STORE_mëhod_£t_upd©e_°‹e_fun˘i⁄


397 
	#STORE_mëhod_£t_upd©e_°‹e_fun˘i⁄
 
STORE_mëh_£t_upd©e_°‹e_‚


	)

398 #unde‡
STORE_mëhod_£t_lock_°‹e_fun˘i⁄


399 
	#STORE_mëhod_£t_lock_°‹e_fun˘i⁄
 
STORE_mëh_£t_lock_°‹e_‚


	)

400 #unde‡
STORE_mëhod_£t_u∆ock_°‹e_fun˘i⁄


401 
	#STORE_mëhod_£t_u∆ock_°‹e_fun˘i⁄
 
STORE_mëh_£t_u∆ock_°‹e_‚


	)

402 #unde‡
STORE_mëhod_gë_öôüli£_fun˘i⁄


403 
	#STORE_mëhod_gë_öôüli£_fun˘i⁄
 
STORE_mëh_gë_öôüli£_‚


	)

404 #unde‡
STORE_mëhod_gë_˛ónup_fun˘i⁄


405 
	#STORE_mëhod_gë_˛ónup_fun˘i⁄
 
STORE_mëh_gë_˛ónup_‚


	)

406 #unde‡
STORE_mëhod_gë_gíî©e_fun˘i⁄


407 
	#STORE_mëhod_gë_gíî©e_fun˘i⁄
 
STORE_mëh_gë_gíî©e_‚


	)

408 #unde‡
STORE_mëhod_gë_modify_fun˘i⁄


409 
	#STORE_mëhod_gë_modify_fun˘i⁄
 
STORE_mëh_gë_modify_‚


	)

410 #unde‡
STORE_mëhod_gë_ªvoke_fun˘i⁄


411 
	#STORE_mëhod_gë_ªvoke_fun˘i⁄
 
STORE_mëh_gë_ªvoke_‚


	)

412 #unde‡
STORE_mëhod_gë_dñëe_fun˘i⁄


413 
	#STORE_mëhod_gë_dñëe_fun˘i⁄
 
STORE_mëh_gë_dñëe_‚


	)

414 #unde‡
STORE_mëhod_gë_li°_°¨t_fun˘i⁄


415 
	#STORE_mëhod_gë_li°_°¨t_fun˘i⁄
 
STORE_mëh_gë_li°_°¨t_‚


	)

416 #unde‡
STORE_mëhod_gë_li°_√xt_fun˘i⁄


417 
	#STORE_mëhod_gë_li°_√xt_fun˘i⁄
 
STORE_mëh_gë_li°_√xt_‚


	)

418 #unde‡
STORE_mëhod_gë_li°_íd_fun˘i⁄


419 
	#STORE_mëhod_gë_li°_íd_fun˘i⁄
 
STORE_mëh_gë_li°_íd_‚


	)

420 #unde‡
STORE_mëhod_gë_upd©e_°‹e_fun˘i⁄


421 
	#STORE_mëhod_gë_upd©e_°‹e_fun˘i⁄
 
STORE_mëh_gë_upd©e_°‹e_‚


	)

422 #unde‡
STORE_mëhod_gë_lock_°‹e_fun˘i⁄


423 
	#STORE_mëhod_gë_lock_°‹e_fun˘i⁄
 
STORE_mëh_gë_lock_°‹e_‚


	)

424 #unde‡
STORE_mëhod_gë_u∆ock_°‹e_fun˘i⁄


425 
	#STORE_mëhod_gë_u∆ock_°‹e_fun˘i⁄
 
STORE_mëh_gë_u∆ock_°‹e_‚


	)

428 #unde‡
TS_RESP_CTX_£t_°©us_öfo_c⁄d


429 
	#TS_RESP_CTX_£t_°©us_öfo_c⁄d
 
TS_RESP_CTX_£t_°©_öfo_c⁄d


	)

430 #unde‡
TS_RESP_CTX_£t_˛ock_¥ecisi⁄_digôs


431 
	#TS_RESP_CTX_£t_˛ock_¥ecisi⁄_digôs
 
TS_RESP_CTX_£t_˛k_¥ec_digôs


	)

432 #unde‡
TS_CONF_£t_˛ock_¥ecisi⁄_digôs


433 
	#TS_CONF_£t_˛ock_¥ecisi⁄_digôs
 
TS_CONF_£t_˛k_¥ec_digôs


	)

436 #unde‡
CMS_Recùõ¡Info_kåi_gë0_Ægs


437 
	#CMS_Recùõ¡Info_kåi_gë0_Ægs
 
CMS_RecùInfo_kåi_gë0_Ægs


	)

438 #unde‡
CMS_Recùõ¡Info_kåi_gë0_sig√r_id


439 
	#CMS_Recùõ¡Info_kåi_gë0_sig√r_id
 
CMS_RecùInfo_kåi_gë0_sigr_id


	)

440 #unde‡
CMS_OthîRevoˇti⁄InfoF‹m©_ô


441 
	#CMS_OthîRevoˇti⁄InfoF‹m©_ô
 
CMS_OthîRevocInfoF‹m©_ô


	)

442 #unde‡
CMS_KeyAgªeRecùõ¡Idítifõr_ô


443 
	#CMS_KeyAgªeRecùõ¡Idítifõr_ô
 
CMS_KeyAgªeRecùIdítifõr_ô


	)

444 #unde‡
CMS_Origö©‹IdítifõrOrKey_ô


445 
	#CMS_Origö©‹IdítifõrOrKey_ô
 
CMS_Origö©‹IdOrKey_ô


	)

446 #unde‡
cms_Sig√rIdítifõr_gë0_sig√r_id


447 
	#cms_Sig√rIdítifõr_gë0_sig√r_id
 
cms_Sig√rId_gë0_sig√r_id


	)

448 #unde‡
CMS_Recùõ¡Info_k¨i_gë0_‹ig_id


449 
	#CMS_Recùõ¡Info_k¨i_gë0_‹ig_id
 
CMS_RecùInfo_k¨i_gë0_‹ig_id


	)

450 #unde‡
CMS_Recùõ¡Info_k¨i_gë0_ªks


451 
	#CMS_Recùõ¡Info_k¨i_gë0_ªks
 
CMS_RecùInfo_k¨i_gë0_ªks


	)

452 #unde‡
CMS_Recùõ¡En¸y±edKey_˚π_cmp


453 
	#CMS_Recùõ¡En¸y±edKey_˚π_cmp
 
CMS_RecùEn¸y±edKey_˚π_cmp


	)

454 #unde‡
CMS_Recùõ¡Info_k¨i_£t0_pkey


455 
	#CMS_Recùõ¡Info_k¨i_£t0_pkey
 
CMS_RecùInfo_k¨i_£t0_pkey


	)

456 #unde‡
CMS_Recùõ¡En¸y±edKey_gë0_id


457 
	#CMS_Recùõ¡En¸y±edKey_gë0_id
 
CMS_RecùEn¸y±edKey_gë0_id


	)

458 #unde‡
CMS_Recùõ¡Info_k¨i_‹ig_id_cmp


459 
	#CMS_Recùõ¡Info_k¨i_‹ig_id_cmp
 
CMS_RecùInfo_k¨i_‹ig_id_cmp


	)

462 #unde‡
dés1_ªå™smô_buf„ªd_mesßges


463 
	#dés1_ªå™smô_buf„ªd_mesßges
 
dés1_ªå™smô_buf„ªd_msgs


	)

466 #unde‡
SRP_gíî©e_£rvî_ma°î_£¸ë


467 
	#SRP_gíî©e_£rvî_ma°î_£¸ë
 
SRP_gí_£rvî_ma°î_£¸ë


	)

468 #unde‡
SRP_gíî©e_˛õ¡_ma°î_£¸ë


469 
	#SRP_gíî©e_˛õ¡_ma°î_£¸ë
 
SRP_gí_˛õ¡_ma°î_£¸ë


	)

472 #unde‡
UI_mëhod_gë_¥om±_c⁄°ru˘‹


473 
	#UI_mëhod_gë_¥om±_c⁄°ru˘‹
 
UI_mëhod_gë_¥om±_c⁄°ru˘r


	)

474 #unde‡
UI_mëhod_£t_¥om±_c⁄°ru˘‹


475 
	#UI_mëhod_£t_¥om±_c⁄°ru˘‹
 
UI_mëhod_£t_¥om±_c⁄°ru˘r


	)

480 #i‡
deföed
(
OPENSSL_SYS_VMS
Ë|| deföed(
OPENSSL_SYS_OS2
)

481 #unde‡
ERR_lﬂd_CRYPTO_°rögs


482 
	#ERR_lﬂd_CRYPTO_°rögs
 
ERR_lﬂd_CRYPTOlib_°rögs


	)

483 #unde‡
OCSP_¸lID_√w


484 
	#OCSP_¸lID_√w
 
OCSP_¸lID2_√w


	)

486 #unde‡
d2i_ECPARAMETERS


487 
	#d2i_ECPARAMETERS
 
d2i_UC_ECPARAMETERS


	)

488 #unde‡
i2d_ECPARAMETERS


489 
	#i2d_ECPARAMETERS
 
i2d_UC_ECPARAMETERS


	)

490 #unde‡
d2i_ECPKPARAMETERS


491 
	#d2i_ECPKPARAMETERS
 
d2i_UC_ECPKPARAMETERS


	)

492 #unde‡
i2d_ECPKPARAMETERS


493 
	#i2d_ECPKPARAMETERS
 
i2d_UC_ECPKPARAMETERS


	)

501 #unde‡
X509v3_˛ónup_exãnsi⁄s


502 
	#X509v3_˛ónup_exãnsi⁄s
 
oX509v3_˛ónup_exãnsi⁄s


	)

503 #unde‡
X509v3_add_exãnsi⁄


504 
	#X509v3_add_exãnsi⁄
 
oX509v3_add_exãnsi⁄


	)

505 #unde‡
X509v3_add_√tsˇ≥_exãnsi⁄s


506 
	#X509v3_add_√tsˇ≥_exãnsi⁄s
 
oX509v3_add_√tsˇ≥_exãnsi⁄s


	)

507 #unde‡
X509v3_add_°™d¨d_exãnsi⁄s


508 
	#X509v3_add_°™d¨d_exãnsi⁄s
 
oX509v3_add_°™d¨d_exãnsi⁄s


	)

511 #unde‡
cms_D©a_¸óã


512 
	#cms_D©a_¸óã
 
¥iv_cms_D©a_¸óã


	)

	@/usr/include/openssl/tls1.h

151 #i‚de‡
HEADER_TLS1_H


152 
	#HEADER_TLS1_H


	)

154 
	~<›ís¶/buf„r.h
>

156 #ifde‡ 
__˝lu•lus


160 
	#TLS1_ALLOW_EXPERIMENTAL_CIPHERSUITES
 0

	)

162 
	#TLS1_VERSION
 0x0301

	)

163 
	#TLS1_1_VERSION
 0x0302

	)

164 
	#TLS1_2_VERSION
 0x0303

	)

165 
	#TLS_MAX_VERSION
 
TLS1_2_VERSION


	)

167 
	#TLS1_VERSION_MAJOR
 0x03

	)

168 
	#TLS1_VERSION_MINOR
 0x01

	)

170 
	#TLS1_1_VERSION_MAJOR
 0x03

	)

171 
	#TLS1_1_VERSION_MINOR
 0x02

	)

173 
	#TLS1_2_VERSION_MAJOR
 0x03

	)

174 
	#TLS1_2_VERSION_MINOR
 0x03

	)

176 
	#TLS1_gë_vîsi⁄
(
s
) \

177 ((
s
->
vîsi⁄
 >> 8Ë=
TLS1_VERSION_MAJOR
 ? s->vîsi⁄ : 0)

	)

179 
	#TLS1_gë_˛õ¡_vîsi⁄
(
s
) \

180 ((
s
->
˛õ¡_vîsi⁄
 >> 8Ë=
TLS1_VERSION_MAJOR
 ? s->˛õ¡_vîsi⁄ : 0)

	)

182 
	#TLS1_AD_DECRYPTION_FAILED
 21

	)

183 
	#TLS1_AD_RECORD_OVERFLOW
 22

	)

184 
	#TLS1_AD_UNKNOWN_CA
 48

	)

185 
	#TLS1_AD_ACCESS_DENIED
 49

	)

186 
	#TLS1_AD_DECODE_ERROR
 50

	)

187 
	#TLS1_AD_DECRYPT_ERROR
 51

	)

188 
	#TLS1_AD_EXPORT_RESTRICTION
 60

	)

189 
	#TLS1_AD_PROTOCOL_VERSION
 70

	)

190 
	#TLS1_AD_INSUFFICIENT_SECURITY
 71

	)

191 
	#TLS1_AD_INTERNAL_ERROR
 80

	)

192 
	#TLS1_AD_INAPPROPRIATE_FALLBACK
 86

	)

193 
	#TLS1_AD_USER_CANCELLED
 90

	)

194 
	#TLS1_AD_NO_RENEGOTIATION
 100

	)

196 
	#TLS1_AD_UNSUPPORTED_EXTENSION
 110

	)

197 
	#TLS1_AD_CERTIFICATE_UNOBTAINABLE
 111

	)

198 
	#TLS1_AD_UNRECOGNIZED_NAME
 112

	)

199 
	#TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE
 113

	)

200 
	#TLS1_AD_BAD_CERTIFICATE_HASH_VALUE
 114

	)

201 
	#TLS1_AD_UNKNOWN_PSK_IDENTITY
 115

	)

204 
	#TLSEXT_TYPE_£rvî_«me
 0

	)

205 
	#TLSEXT_TYPE_max_‰agmít_Àngth
 1

	)

206 
	#TLSEXT_TYPE_˛õ¡_˚πifiˇã_uæ
 2

	)

207 
	#TLSEXT_TYPE_åu°ed_ˇ_keys
 3

	)

208 
	#TLSEXT_TYPE_åunˇãd_hmac
 4

	)

209 
	#TLSEXT_TYPE_°©us_ªque°
 5

	)

211 
	#TLSEXT_TYPE_u£r_m≠pög
 6

	)

213 
	#TLSEXT_TYPE_˛õ¡_authz
 7

	)

214 
	#TLSEXT_TYPE_£rvî_authz
 8

	)

216 
	#TLSEXT_TYPE_˚π_ty≥
 9

	)

219 
	#TLSEXT_TYPE_ñlùtic_curves
 10

	)

220 
	#TLSEXT_TYPE_ec_poöt_f‹m©s
 11

	)

223 
	#TLSEXT_TYPE_§p
 12

	)

226 
	#TLSEXT_TYPE_sig«tuª_Æg‹ôhms
 13

	)

229 
	#TLSEXT_TYPE_u£_§ç
 14

	)

232 
	#TLSEXT_TYPE_hóπbót
 15

	)

235 
	#TLSEXT_TYPE_≠∂iˇti⁄_œyî_¥Ÿocﬁ_√gŸüti⁄
 16

	)

241 
	#TLSEXT_TYPE_∑ddög
 21

	)

244 
	#TLSEXT_TYPE_£ssi⁄_tickë
 35

	)

253 
	#TLSEXT_TYPE_›aque_¥f_öput
 ??

	)

257 
	#TLSEXT_TYPE_ª√gŸüã
 0xff01

	)

259 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


261 
	#TLSEXT_TYPE_√xt_¥Ÿo_√g
 13172

	)

265 
	#TLSEXT_NAMETYPE_ho°_«me
 0

	)

267 
	#TLSEXT_STATUSTYPE_oc•
 1

	)

270 
	#TLSEXT_ECPOINTFORMAT_fú°
 0

	)

271 
	#TLSEXT_ECPOINTFORMAT_uncom¥es£d
 0

	)

272 
	#TLSEXT_ECPOINTFORMAT_™siX962_com¥es£d_¥ime
 1

	)

273 
	#TLSEXT_ECPOINTFORMAT_™siX962_com¥es£d_ch¨2
 2

	)

274 
	#TLSEXT_ECPOINTFORMAT_œ°
 2

	)

277 
	#TLSEXT_sig«tuª_™⁄ymous
 0

	)

278 
	#TLSEXT_sig«tuª_rß
 1

	)

279 
	#TLSEXT_sig«tuª_dß
 2

	)

280 
	#TLSEXT_sig«tuª_ecdß
 3

	)

283 
	#TLSEXT_sig«tuª_num
 4

	)

285 
	#TLSEXT_hash_n⁄e
 0

	)

286 
	#TLSEXT_hash_md5
 1

	)

287 
	#TLSEXT_hash_sha1
 2

	)

288 
	#TLSEXT_hash_sha224
 3

	)

289 
	#TLSEXT_hash_sha256
 4

	)

290 
	#TLSEXT_hash_sha384
 5

	)

291 
	#TLSEXT_hash_sha512
 6

	)

295 
	#TLSEXT_hash_num
 7

	)

298 
	#TLSEXT_nid_unknown
 0x1000000

	)

302 
	#TLSEXT_curve_P_256
 23

	)

303 
	#TLSEXT_curve_P_384
 24

	)

305 #i‚de‡
OPENSSL_NO_TLSEXT


307 
	#TLSEXT_MAXLEN_ho°_«me
 255

	)

309 c⁄° *
SSL_gë_£rvî«me
(c⁄° 
SSL
 *
s
, c⁄° 
ty≥
);

310 
SSL_gë_£rvî«me_ty≥
(c⁄° 
SSL
 *
s
);

318 
SSL_exp‹t_keyög_m©îül
(
SSL
 *
s
, *
out
, 
size_t
 
ﬁí
,

319 c⁄° *
œbñ
, 
size_t
 
Œí
,

320 c⁄° *
p
, 
size_t
 
∂í
,

321 
u£_c⁄ãxt
);

323 
SSL_gë_sigÆgs
(
SSL
 *
s
, 
idx
,

324 *
psign
, *
phash
, *
psig«ndhash
,

325 *
rsig
, *
rhash
);

327 
SSL_gë_sh¨ed_sigÆgs
(
SSL
 *
s
, 
idx
,

328 *
psign
, *
phash
, *
psig«ndhash
,

329 *
rsig
, *
rhash
);

331 
SSL_check_chaö
(
SSL
 *
s
, 
X509
 *
x
, 
EVP_PKEY
 *
pk
, 
STACK_OF
(X509Ë*
chaö
);

333 
	#SSL_£t_é£xt_ho°_«me
(
s
,
«me
) \

334 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_TLSEXT_HOSTNAME
,
TLSEXT_NAMETYPE_ho°_«me
,(*)
«me
)

	)

336 
	#SSL_£t_é£xt_debug_ˇŒback
(
s¶
, 
cb
) \

337 
	`SSL_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_DEBUG_CB
,((*)())
cb
)

	)

339 
	#SSL_£t_é£xt_debug_¨g
(
s¶
, 
¨g
) \

340 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_DEBUG_ARG
,0, (*)
¨g
)

	)

342 
	#SSL_£t_é£xt_°©us_ty≥
(
s¶
, 
ty≥
) \

343 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
,
ty≥
, 
NULL
)

	)

345 
	#SSL_gë_é£xt_°©us_exts
(
s¶
, 
¨g
) \

346 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS
,0, (*)
¨g
)

	)

348 
	#SSL_£t_é£xt_°©us_exts
(
s¶
, 
¨g
) \

349 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS
,0, (*)
¨g
)

	)

351 
	#SSL_gë_é£xt_°©us_ids
(
s¶
, 
¨g
) \

352 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS
,0, (*)
¨g
)

	)

354 
	#SSL_£t_é£xt_°©us_ids
(
s¶
, 
¨g
) \

355 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS
,0, (*)
¨g
)

	)

357 
	#SSL_gë_é£xt_°©us_oc•_ª•
(
s¶
, 
¨g
) \

358 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP
,0, (*)
¨g
)

	)

360 
	#SSL_£t_é£xt_°©us_oc•_ª•
(
s¶
, 
¨g
, 
¨gÀn
) \

361 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP
,
¨gÀn
, (*)
¨g
)

	)

363 
	#SSL_CTX_£t_é£xt_£rvî«me_ˇŒback
(
˘x
, 
cb
) \

364 
	`SSL_CTX_ˇŒback_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_SERVERNAME_CB
,((*)())
cb
)

	)

366 
	#SSL_TLSEXT_ERR_OK
 0

	)

367 
	#SSL_TLSEXT_ERR_ALERT_WARNING
 1

	)

368 
	#SSL_TLSEXT_ERR_ALERT_FATAL
 2

	)

369 
	#SSL_TLSEXT_ERR_NOACK
 3

	)

371 
	#SSL_CTX_£t_é£xt_£rvî«me_¨g
(
˘x
, 
¨g
) \

372 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG
,0, (*)
¨g
)

	)

374 
	#SSL_CTX_gë_é£xt_tickë_keys
(
˘x
, 
keys
, 
keyÀn
) \

375 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_GET_TLSEXT_TICKET_KEYS
,(
keyÀn
),(
keys
))

	)

376 
	#SSL_CTX_£t_é£xt_tickë_keys
(
˘x
, 
keys
, 
keyÀn
) \

377 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_SET_TLSEXT_TICKET_KEYS
,(
keyÀn
),(
keys
))

	)

379 
	#SSL_CTX_£t_é£xt_°©us_cb
(
s¶
, 
cb
) \

380 
	`SSL_CTX_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
,((*)())
cb
)

	)

382 
	#SSL_CTX_£t_é£xt_°©us_¨g
(
s¶
, 
¨g
) \

383 
	`SSL_CTX_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG
,0, (*)
¨g
)

	)

385 
	#SSL_£t_é£xt_›aque_¥f_öput
(
s
, 
§c
, 
Àn
) \

386 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT
, 
Àn
, 
§c
)

	)

387 
	#SSL_CTX_£t_é£xt_›aque_¥f_öput_ˇŒback
(
˘x
, 
cb
) \

388 
	`SSL_CTX_ˇŒback_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB
, ((*)())
cb
)

	)

389 
	#SSL_CTX_£t_é£xt_›aque_¥f_öput_ˇŒback_¨g
(
˘x
, 
¨g
) \

390 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB_ARG
, 0, 
¨g
)

	)

392 
	#SSL_CTX_£t_é£xt_tickë_key_cb
(
s¶
, 
cb
) \

393 
	`SSL_CTX_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB
,((*)())
cb
)

	)

395 #i‚de‡
OPENSSL_NO_HEARTBEATS


396 
	#SSL_TLSEXT_HB_ENABLED
 0x01

	)

397 
	#SSL_TLSEXT_HB_DONT_SEND_REQUESTS
 0x02

	)

398 
	#SSL_TLSEXT_HB_DONT_RECV_REQUESTS
 0x04

	)

400 
	#SSL_gë_é£xt_hóπbót_≥ndög
(
s¶
) \

401 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_TLS_EXT_HEARTBEAT_PENDING
,0,
NULL
)

	)

402 
	#SSL_£t_é£xt_hóπbót_no_ªque°s
(
s¶
, 
¨g
) \

403 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_SET_TLS_EXT_HEARTBEAT_NO_REQUESTS
,
¨g
,
NULL
)

	)

408 
	#TLS1_CK_PSK_WITH_RC4_128_SHA
 0x0300008A

	)

409 
	#TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA
 0x0300008B

	)

410 
	#TLS1_CK_PSK_WITH_AES_128_CBC_SHA
 0x0300008C

	)

411 
	#TLS1_CK_PSK_WITH_AES_256_CBC_SHA
 0x0300008D

	)

420 
	#TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_MD5
 0x03000060

	)

422 
	#TLS1_CK_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5
 0x03000061

	)

424 
	#TLS1_CK_RSA_EXPORT1024_WITH_DES_CBC_SHA
 0x03000062

	)

425 
	#TLS1_CK_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA
 0x03000063

	)

426 
	#TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_SHA
 0x03000064

	)

427 
	#TLS1_CK_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA
 0x03000065

	)

428 
	#TLS1_CK_DHE_DSS_WITH_RC4_128_SHA
 0x03000066

	)

431 
	#TLS1_CK_RSA_WITH_AES_128_SHA
 0x0300002F

	)

432 
	#TLS1_CK_DH_DSS_WITH_AES_128_SHA
 0x03000030

	)

433 
	#TLS1_CK_DH_RSA_WITH_AES_128_SHA
 0x03000031

	)

434 
	#TLS1_CK_DHE_DSS_WITH_AES_128_SHA
 0x03000032

	)

435 
	#TLS1_CK_DHE_RSA_WITH_AES_128_SHA
 0x03000033

	)

436 
	#TLS1_CK_ADH_WITH_AES_128_SHA
 0x03000034

	)

438 
	#TLS1_CK_RSA_WITH_AES_256_SHA
 0x03000035

	)

439 
	#TLS1_CK_DH_DSS_WITH_AES_256_SHA
 0x03000036

	)

440 
	#TLS1_CK_DH_RSA_WITH_AES_256_SHA
 0x03000037

	)

441 
	#TLS1_CK_DHE_DSS_WITH_AES_256_SHA
 0x03000038

	)

442 
	#TLS1_CK_DHE_RSA_WITH_AES_256_SHA
 0x03000039

	)

443 
	#TLS1_CK_ADH_WITH_AES_256_SHA
 0x0300003A

	)

446 
	#TLS1_CK_RSA_WITH_NULL_SHA256
 0x0300003B

	)

447 
	#TLS1_CK_RSA_WITH_AES_128_SHA256
 0x0300003C

	)

448 
	#TLS1_CK_RSA_WITH_AES_256_SHA256
 0x0300003D

	)

449 
	#TLS1_CK_DH_DSS_WITH_AES_128_SHA256
 0x0300003E

	)

450 
	#TLS1_CK_DH_RSA_WITH_AES_128_SHA256
 0x0300003F

	)

451 
	#TLS1_CK_DHE_DSS_WITH_AES_128_SHA256
 0x03000040

	)

454 
	#TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000041

	)

455 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA
 0x03000042

	)

456 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000043

	)

457 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA
 0x03000044

	)

458 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000045

	)

459 
	#TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA
 0x03000046

	)

462 
	#TLS1_CK_DHE_RSA_WITH_AES_128_SHA256
 0x03000067

	)

463 
	#TLS1_CK_DH_DSS_WITH_AES_256_SHA256
 0x03000068

	)

464 
	#TLS1_CK_DH_RSA_WITH_AES_256_SHA256
 0x03000069

	)

465 
	#TLS1_CK_DHE_DSS_WITH_AES_256_SHA256
 0x0300006A

	)

466 
	#TLS1_CK_DHE_RSA_WITH_AES_256_SHA256
 0x0300006B

	)

467 
	#TLS1_CK_ADH_WITH_AES_128_SHA256
 0x0300006C

	)

468 
	#TLS1_CK_ADH_WITH_AES_256_SHA256
 0x0300006D

	)

471 
	#TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000084

	)

472 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA
 0x03000085

	)

473 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000086

	)

474 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA
 0x03000087

	)

475 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000088

	)

476 
	#TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA
 0x03000089

	)

479 
	#TLS1_CK_RSA_WITH_SEED_SHA
 0x03000096

	)

480 
	#TLS1_CK_DH_DSS_WITH_SEED_SHA
 0x03000097

	)

481 
	#TLS1_CK_DH_RSA_WITH_SEED_SHA
 0x03000098

	)

482 
	#TLS1_CK_DHE_DSS_WITH_SEED_SHA
 0x03000099

	)

483 
	#TLS1_CK_DHE_RSA_WITH_SEED_SHA
 0x0300009A

	)

484 
	#TLS1_CK_ADH_WITH_SEED_SHA
 0x0300009B

	)

487 
	#TLS1_CK_RSA_WITH_AES_128_GCM_SHA256
 0x0300009C

	)

488 
	#TLS1_CK_RSA_WITH_AES_256_GCM_SHA384
 0x0300009D

	)

489 
	#TLS1_CK_DHE_RSA_WITH_AES_128_GCM_SHA256
 0x0300009E

	)

490 
	#TLS1_CK_DHE_RSA_WITH_AES_256_GCM_SHA384
 0x0300009F

	)

491 
	#TLS1_CK_DH_RSA_WITH_AES_128_GCM_SHA256
 0x030000A0

	)

492 
	#TLS1_CK_DH_RSA_WITH_AES_256_GCM_SHA384
 0x030000A1

	)

493 
	#TLS1_CK_DHE_DSS_WITH_AES_128_GCM_SHA256
 0x030000A2

	)

494 
	#TLS1_CK_DHE_DSS_WITH_AES_256_GCM_SHA384
 0x030000A3

	)

495 
	#TLS1_CK_DH_DSS_WITH_AES_128_GCM_SHA256
 0x030000A4

	)

496 
	#TLS1_CK_DH_DSS_WITH_AES_256_GCM_SHA384
 0x030000A5

	)

497 
	#TLS1_CK_ADH_WITH_AES_128_GCM_SHA256
 0x030000A6

	)

498 
	#TLS1_CK_ADH_WITH_AES_256_GCM_SHA384
 0x030000A7

	)

504 
	#TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA
 0x0300C001

	)

505 
	#TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA
 0x0300C002

	)

506 
	#TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA
 0x0300C003

	)

507 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA
 0x0300C004

	)

508 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA
 0x0300C005

	)

510 
	#TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA
 0x0300C006

	)

511 
	#TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA
 0x0300C007

	)

512 
	#TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA
 0x0300C008

	)

513 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
 0x0300C009

	)

514 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
 0x0300C00A

	)

516 
	#TLS1_CK_ECDH_RSA_WITH_NULL_SHA
 0x0300C00B

	)

517 
	#TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA
 0x0300C00C

	)

518 
	#TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA
 0x0300C00D

	)

519 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA
 0x0300C00E

	)

520 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA
 0x0300C00F

	)

522 
	#TLS1_CK_ECDHE_RSA_WITH_NULL_SHA
 0x0300C010

	)

523 
	#TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA
 0x0300C011

	)

524 
	#TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA
 0x0300C012

	)

525 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA
 0x0300C013

	)

526 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA
 0x0300C014

	)

528 
	#TLS1_CK_ECDH_™⁄_WITH_NULL_SHA
 0x0300C015

	)

529 
	#TLS1_CK_ECDH_™⁄_WITH_RC4_128_SHA
 0x0300C016

	)

530 
	#TLS1_CK_ECDH_™⁄_WITH_DES_192_CBC3_SHA
 0x0300C017

	)

531 
	#TLS1_CK_ECDH_™⁄_WITH_AES_128_CBC_SHA
 0x0300C018

	)

532 
	#TLS1_CK_ECDH_™⁄_WITH_AES_256_CBC_SHA
 0x0300C019

	)

535 
	#TLS1_CK_SRP_SHA_WITH_3DES_EDE_CBC_SHA
 0x0300C01A

	)

536 
	#TLS1_CK_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA
 0x0300C01B

	)

537 
	#TLS1_CK_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA
 0x0300C01C

	)

538 
	#TLS1_CK_SRP_SHA_WITH_AES_128_CBC_SHA
 0x0300C01D

	)

539 
	#TLS1_CK_SRP_SHA_RSA_WITH_AES_128_CBC_SHA
 0x0300C01E

	)

540 
	#TLS1_CK_SRP_SHA_DSS_WITH_AES_128_CBC_SHA
 0x0300C01F

	)

541 
	#TLS1_CK_SRP_SHA_WITH_AES_256_CBC_SHA
 0x0300C020

	)

542 
	#TLS1_CK_SRP_SHA_RSA_WITH_AES_256_CBC_SHA
 0x0300C021

	)

543 
	#TLS1_CK_SRP_SHA_DSS_WITH_AES_256_CBC_SHA
 0x0300C022

	)

547 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_SHA256
 0x0300C023

	)

548 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_SHA384
 0x0300C024

	)

549 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_SHA256
 0x0300C025

	)

550 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_SHA384
 0x0300C026

	)

551 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_SHA256
 0x0300C027

	)

552 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_SHA384
 0x0300C028

	)

553 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_SHA256
 0x0300C029

	)

554 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_SHA384
 0x0300C02A

	)

557 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
 0x0300C02B

	)

558 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
 0x0300C02C

	)

559 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
 0x0300C02D

	)

560 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
 0x0300C02E

	)

561 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_GCM_SHA256
 0x0300C02F

	)

562 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_GCM_SHA384
 0x0300C030

	)

563 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_GCM_SHA256
 0x0300C031

	)

564 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_GCM_SHA384
 0x0300C032

	)

572 
	#TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_MD5
 "EXP1024-RC4-MD5"

	)

573 
	#TLS1_TXT_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5
 "EXP1024-RC2-CBC-MD5"

	)

574 
	#TLS1_TXT_RSA_EXPORT1024_WITH_DES_CBC_SHA
 "EXP1024-DES-CBC-SHA"

	)

575 
	#TLS1_TXT_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA
 "EXP1024-DHE-DSS-DES-CBC-SHA"

	)

576 
	#TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_SHA
 "EXP1024-RC4-SHA"

	)

577 
	#TLS1_TXT_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA
 "EXP1024-DHE-DSS-RC4-SHA"

	)

578 
	#TLS1_TXT_DHE_DSS_WITH_RC4_128_SHA
 "DHE-DSS-RC4-SHA"

	)

581 
	#TLS1_TXT_RSA_WITH_AES_128_SHA
 "AES128-SHA"

	)

582 
	#TLS1_TXT_DH_DSS_WITH_AES_128_SHA
 "DH-DSS-AES128-SHA"

	)

583 
	#TLS1_TXT_DH_RSA_WITH_AES_128_SHA
 "DH-RSA-AES128-SHA"

	)

584 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_SHA
 "DHE-DSS-AES128-SHA"

	)

585 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_SHA
 "DHE-RSA-AES128-SHA"

	)

586 
	#TLS1_TXT_ADH_WITH_AES_128_SHA
 "ADH-AES128-SHA"

	)

588 
	#TLS1_TXT_RSA_WITH_AES_256_SHA
 "AES256-SHA"

	)

589 
	#TLS1_TXT_DH_DSS_WITH_AES_256_SHA
 "DH-DSS-AES256-SHA"

	)

590 
	#TLS1_TXT_DH_RSA_WITH_AES_256_SHA
 "DH-RSA-AES256-SHA"

	)

591 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_SHA
 "DHE-DSS-AES256-SHA"

	)

592 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_SHA
 "DHE-RSA-AES256-SHA"

	)

593 
	#TLS1_TXT_ADH_WITH_AES_256_SHA
 "ADH-AES256-SHA"

	)

596 
	#TLS1_TXT_ECDH_ECDSA_WITH_NULL_SHA
 "ECDH-ECDSA-NULL-SHA"

	)

597 
	#TLS1_TXT_ECDH_ECDSA_WITH_RC4_128_SHA
 "ECDH-ECDSA-RC4-SHA"

	)

598 
	#TLS1_TXT_ECDH_ECDSA_WITH_DES_192_CBC3_SHA
 "ECDH-ECDSA-DES-CBC3-SHA"

	)

599 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_CBC_SHA
 "ECDH-ECDSA-AES128-SHA"

	)

600 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_CBC_SHA
 "ECDH-ECDSA-AES256-SHA"

	)

602 
	#TLS1_TXT_ECDHE_ECDSA_WITH_NULL_SHA
 "ECDHE-ECDSA-NULL-SHA"

	)

603 
	#TLS1_TXT_ECDHE_ECDSA_WITH_RC4_128_SHA
 "ECDHE-ECDSA-RC4-SHA"

	)

604 
	#TLS1_TXT_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA
 "ECDHE-ECDSA-DES-CBC3-SHA"

	)

605 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
 "ECDHE-ECDSA-AES128-SHA"

	)

606 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
 "ECDHE-ECDSA-AES256-SHA"

	)

608 
	#TLS1_TXT_ECDH_RSA_WITH_NULL_SHA
 "ECDH-RSA-NULL-SHA"

	)

609 
	#TLS1_TXT_ECDH_RSA_WITH_RC4_128_SHA
 "ECDH-RSA-RC4-SHA"

	)

610 
	#TLS1_TXT_ECDH_RSA_WITH_DES_192_CBC3_SHA
 "ECDH-RSA-DES-CBC3-SHA"

	)

611 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_CBC_SHA
 "ECDH-RSA-AES128-SHA"

	)

612 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_CBC_SHA
 "ECDH-RSA-AES256-SHA"

	)

614 
	#TLS1_TXT_ECDHE_RSA_WITH_NULL_SHA
 "ECDHE-RSA-NULL-SHA"

	)

615 
	#TLS1_TXT_ECDHE_RSA_WITH_RC4_128_SHA
 "ECDHE-RSA-RC4-SHA"

	)

616 
	#TLS1_TXT_ECDHE_RSA_WITH_DES_192_CBC3_SHA
 "ECDHE-RSA-DES-CBC3-SHA"

	)

617 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA
 "ECDHE-RSA-AES128-SHA"

	)

618 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA
 "ECDHE-RSA-AES256-SHA"

	)

620 
	#TLS1_TXT_ECDH_™⁄_WITH_NULL_SHA
 "AECDH-NULL-SHA"

	)

621 
	#TLS1_TXT_ECDH_™⁄_WITH_RC4_128_SHA
 "AECDH-RC4-SHA"

	)

622 
	#TLS1_TXT_ECDH_™⁄_WITH_DES_192_CBC3_SHA
 "AECDH-DES-CBC3-SHA"

	)

623 
	#TLS1_TXT_ECDH_™⁄_WITH_AES_128_CBC_SHA
 "AECDH-AES128-SHA"

	)

624 
	#TLS1_TXT_ECDH_™⁄_WITH_AES_256_CBC_SHA
 "AECDH-AES256-SHA"

	)

627 
	#TLS1_TXT_PSK_WITH_RC4_128_SHA
 "PSK-RC4-SHA"

	)

628 
	#TLS1_TXT_PSK_WITH_3DES_EDE_CBC_SHA
 "PSK-3DES-EDE-CBC-SHA"

	)

629 
	#TLS1_TXT_PSK_WITH_AES_128_CBC_SHA
 "PSK-AES128-CBC-SHA"

	)

630 
	#TLS1_TXT_PSK_WITH_AES_256_CBC_SHA
 "PSK-AES256-CBC-SHA"

	)

633 
	#TLS1_TXT_SRP_SHA_WITH_3DES_EDE_CBC_SHA
 "SRP-3DES-EDE-CBC-SHA"

	)

634 
	#TLS1_TXT_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA
 "SRP-RSA-3DES-EDE-CBC-SHA"

	)

635 
	#TLS1_TXT_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA
 "SRP-DSS-3DES-EDE-CBC-SHA"

	)

636 
	#TLS1_TXT_SRP_SHA_WITH_AES_128_CBC_SHA
 "SRP-AES-128-CBC-SHA"

	)

637 
	#TLS1_TXT_SRP_SHA_RSA_WITH_AES_128_CBC_SHA
 "SRP-RSA-AES-128-CBC-SHA"

	)

638 
	#TLS1_TXT_SRP_SHA_DSS_WITH_AES_128_CBC_SHA
 "SRP-DSS-AES-128-CBC-SHA"

	)

639 
	#TLS1_TXT_SRP_SHA_WITH_AES_256_CBC_SHA
 "SRP-AES-256-CBC-SHA"

	)

640 
	#TLS1_TXT_SRP_SHA_RSA_WITH_AES_256_CBC_SHA
 "SRP-RSA-AES-256-CBC-SHA"

	)

641 
	#TLS1_TXT_SRP_SHA_DSS_WITH_AES_256_CBC_SHA
 "SRP-DSS-AES-256-CBC-SHA"

	)

644 
	#TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA
 "CAMELLIA128-SHA"

	)

645 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA
 "DH-DSS-CAMELLIA128-SHA"

	)

646 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA
 "DH-RSA-CAMELLIA128-SHA"

	)

647 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA
 "DHE-DSS-CAMELLIA128-SHA"

	)

648 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
 "DHE-RSA-CAMELLIA128-SHA"

	)

649 
	#TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA
 "ADH-CAMELLIA128-SHA"

	)

651 
	#TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA
 "CAMELLIA256-SHA"

	)

652 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA
 "DH-DSS-CAMELLIA256-SHA"

	)

653 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA
 "DH-RSA-CAMELLIA256-SHA"

	)

654 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA
 "DHE-DSS-CAMELLIA256-SHA"

	)

655 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
 "DHE-RSA-CAMELLIA256-SHA"

	)

656 
	#TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA
 "ADH-CAMELLIA256-SHA"

	)

659 
	#TLS1_TXT_RSA_WITH_SEED_SHA
 "SEED-SHA"

	)

660 
	#TLS1_TXT_DH_DSS_WITH_SEED_SHA
 "DH-DSS-SEED-SHA"

	)

661 
	#TLS1_TXT_DH_RSA_WITH_SEED_SHA
 "DH-RSA-SEED-SHA"

	)

662 
	#TLS1_TXT_DHE_DSS_WITH_SEED_SHA
 "DHE-DSS-SEED-SHA"

	)

663 
	#TLS1_TXT_DHE_RSA_WITH_SEED_SHA
 "DHE-RSA-SEED-SHA"

	)

664 
	#TLS1_TXT_ADH_WITH_SEED_SHA
 "ADH-SEED-SHA"

	)

667 
	#TLS1_TXT_RSA_WITH_NULL_SHA256
 "NULL-SHA256"

	)

668 
	#TLS1_TXT_RSA_WITH_AES_128_SHA256
 "AES128-SHA256"

	)

669 
	#TLS1_TXT_RSA_WITH_AES_256_SHA256
 "AES256-SHA256"

	)

670 
	#TLS1_TXT_DH_DSS_WITH_AES_128_SHA256
 "DH-DSS-AES128-SHA256"

	)

671 
	#TLS1_TXT_DH_RSA_WITH_AES_128_SHA256
 "DH-RSA-AES128-SHA256"

	)

672 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_SHA256
 "DHE-DSS-AES128-SHA256"

	)

673 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_SHA256
 "DHE-RSA-AES128-SHA256"

	)

674 
	#TLS1_TXT_DH_DSS_WITH_AES_256_SHA256
 "DH-DSS-AES256-SHA256"

	)

675 
	#TLS1_TXT_DH_RSA_WITH_AES_256_SHA256
 "DH-RSA-AES256-SHA256"

	)

676 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_SHA256
 "DHE-DSS-AES256-SHA256"

	)

677 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_SHA256
 "DHE-RSA-AES256-SHA256"

	)

678 
	#TLS1_TXT_ADH_WITH_AES_128_SHA256
 "ADH-AES128-SHA256"

	)

679 
	#TLS1_TXT_ADH_WITH_AES_256_SHA256
 "ADH-AES256-SHA256"

	)

682 
	#TLS1_TXT_RSA_WITH_AES_128_GCM_SHA256
 "AES128-GCM-SHA256"

	)

683 
	#TLS1_TXT_RSA_WITH_AES_256_GCM_SHA384
 "AES256-GCM-SHA384"

	)

684 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_GCM_SHA256
 "DHE-RSA-AES128-GCM-SHA256"

	)

685 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_GCM_SHA384
 "DHE-RSA-AES256-GCM-SHA384"

	)

686 
	#TLS1_TXT_DH_RSA_WITH_AES_128_GCM_SHA256
 "DH-RSA-AES128-GCM-SHA256"

	)

687 
	#TLS1_TXT_DH_RSA_WITH_AES_256_GCM_SHA384
 "DH-RSA-AES256-GCM-SHA384"

	)

688 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_GCM_SHA256
 "DHE-DSS-AES128-GCM-SHA256"

	)

689 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_GCM_SHA384
 "DHE-DSS-AES256-GCM-SHA384"

	)

690 
	#TLS1_TXT_DH_DSS_WITH_AES_128_GCM_SHA256
 "DH-DSS-AES128-GCM-SHA256"

	)

691 
	#TLS1_TXT_DH_DSS_WITH_AES_256_GCM_SHA384
 "DH-DSS-AES256-GCM-SHA384"

	)

692 
	#TLS1_TXT_ADH_WITH_AES_128_GCM_SHA256
 "ADH-AES128-GCM-SHA256"

	)

693 
	#TLS1_TXT_ADH_WITH_AES_256_GCM_SHA384
 "ADH-AES256-GCM-SHA384"

	)

697 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_SHA256
 "ECDHE-ECDSA-AES128-SHA256"

	)

698 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_SHA384
 "ECDHE-ECDSA-AES256-SHA384"

	)

699 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_SHA256
 "ECDH-ECDSA-AES128-SHA256"

	)

700 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_SHA384
 "ECDH-ECDSA-AES256-SHA384"

	)

701 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_SHA256
 "ECDHE-RSA-AES128-SHA256"

	)

702 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_SHA384
 "ECDHE-RSA-AES256-SHA384"

	)

703 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_SHA256
 "ECDH-RSA-AES128-SHA256"

	)

704 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_SHA384
 "ECDH-RSA-AES256-SHA384"

	)

707 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
 "ECDHE-ECDSA-AES128-GCM-SHA256"

	)

708 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
 "ECDHE-ECDSA-AES256-GCM-SHA384"

	)

709 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
 "ECDH-ECDSA-AES128-GCM-SHA256"

	)

710 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
 "ECDH-ECDSA-AES256-GCM-SHA384"

	)

711 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_GCM_SHA256
 "ECDHE-RSA-AES128-GCM-SHA256"

	)

712 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_GCM_SHA384
 "ECDHE-RSA-AES256-GCM-SHA384"

	)

713 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_GCM_SHA256
 "ECDH-RSA-AES128-GCM-SHA256"

	)

714 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_GCM_SHA384
 "ECDH-RSA-AES256-GCM-SHA384"

	)

716 
	#TLS_CT_RSA_SIGN
 1

	)

717 
	#TLS_CT_DSS_SIGN
 2

	)

718 
	#TLS_CT_RSA_FIXED_DH
 3

	)

719 
	#TLS_CT_DSS_FIXED_DH
 4

	)

720 
	#TLS_CT_ECDSA_SIGN
 64

	)

721 
	#TLS_CT_RSA_FIXED_ECDH
 65

	)

722 
	#TLS_CT_ECDSA_FIXED_ECDH
 66

	)

723 
	#TLS_CT_GOST94_SIGN
 21

	)

724 
	#TLS_CT_GOST01_SIGN
 22

	)

729 
	#TLS_CT_NUMBER
 9

	)

731 
	#TLS1_FINISH_MAC_LENGTH
 12

	)

733 
	#TLS_MD_MAX_CONST_SIZE
 20

	)

734 
	#TLS_MD_CLIENT_FINISH_CONST
 "˛õ¡ föished"

	)

735 
	#TLS_MD_CLIENT_FINISH_CONST_SIZE
 15

	)

736 
	#TLS_MD_SERVER_FINISH_CONST
 "£rvî föished"

	)

737 
	#TLS_MD_SERVER_FINISH_CONST_SIZE
 15

	)

738 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "£rvî wrôêkey"

	)

739 
	#TLS_MD_SERVER_WRITE_KEY_CONST_SIZE
 16

	)

740 
	#TLS_MD_KEY_EXPANSION_CONST
 "keyÉx∑nsi⁄"

	)

741 
	#TLS_MD_KEY_EXPANSION_CONST_SIZE
 13

	)

742 
	#TLS_MD_CLIENT_WRITE_KEY_CONST
 "˛õ¡ wrôêkey"

	)

743 
	#TLS_MD_CLIENT_WRITE_KEY_CONST_SIZE
 16

	)

744 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "£rvî wrôêkey"

	)

745 
	#TLS_MD_SERVER_WRITE_KEY_CONST_SIZE
 16

	)

746 
	#TLS_MD_IV_BLOCK_CONST
 "IV block"

	)

747 
	#TLS_MD_IV_BLOCK_CONST_SIZE
 8

	)

748 
	#TLS_MD_MASTER_SECRET_CONST
 "ma°î se¸ë"

	)

749 
	#TLS_MD_MASTER_SECRET_CONST_SIZE
 13

	)

751 #ifde‡
CHARSET_EBCDIC


752 #unde‡
TLS_MD_CLIENT_FINISH_CONST


756 
	#TLS_MD_CLIENT_FINISH_CONST
 "\x63\x6c\x69\x65\x6e\x74\x20\x66\x69\x6e\x69\x73\x68\x65\x64"

	)

758 #unde‡
TLS_MD_SERVER_FINISH_CONST


762 
	#TLS_MD_SERVER_FINISH_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x66\x69\x6e\x69\x73\x68\x65\x64"

	)

764 #unde‡
TLS_MD_SERVER_WRITE_KEY_CONST


768 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

770 #unde‡
TLS_MD_KEY_EXPANSION_CONST


774 
	#TLS_MD_KEY_EXPANSION_CONST
 "\x6b\x65\x79\x20\x65\x78\x70\x61\x6e\x73\x69\x6f\x6e"

	)

776 #unde‡
TLS_MD_CLIENT_WRITE_KEY_CONST


780 
	#TLS_MD_CLIENT_WRITE_KEY_CONST
 "\x63\x6c\x69\x65\x6e\x74\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

782 #unde‡
TLS_MD_SERVER_WRITE_KEY_CONST


786 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

788 #unde‡
TLS_MD_IV_BLOCK_CONST


792 
	#TLS_MD_IV_BLOCK_CONST
 "\x49\x56\x20\x62\x6c\x6f\x63\x6b"

	)

794 #unde‡
TLS_MD_MASTER_SECRET_CONST


798 
	#TLS_MD_MASTER_SECRET_CONST
 "\x6d\x61\x73\x74\x65\x72\x20\x73\x65\x63\x72\x65\x74"

	)

802 
	sés_£ssi⁄_tickë_ext_°
 {

803 
Àngth
;

804 *
d©a
;

807 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ui.h

60 #i‚de‡
HEADER_UI_H


61 
	#HEADER_UI_H


	)

63 #i‚de‡
OPENSSL_NO_DEPRECATED


64 
	~<›ís¶/¸y±o.h
>

66 
	~<›ís¶/ß„°ack.h
>

67 
	~<›ís¶/os¶_typ.h
>

69 #ifde‡ 
__˝lu•lus


85 
UI
 *
UI_√w
();

86 
UI
 *
UI_√w_mëhod
(c⁄° 
UI_METHOD
 *
mëhod
);

87 
UI_‰ì
(
UI
 *
ui
);

132 
UI_add_öput_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

133 *
ªsu…_buf
, 
mösize
, 
maxsize
);

134 
UI_dup_öput_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

135 *
ªsu…_buf
, 
mösize
, 
maxsize
);

136 
UI_add_vîify_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

137 *
ªsu…_buf
, 
mösize
, 
maxsize
,

138 c⁄° *
ã°_buf
);

139 
UI_dup_vîify_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

140 *
ªsu…_buf
, 
mösize
, 
maxsize
,

141 c⁄° *
ã°_buf
);

142 
UI_add_öput_boﬁón
(
UI
 *
ui
, c⁄° *
¥om±
, c⁄° *
a˘i⁄_desc
,

143 c⁄° *
ok_ch¨s
, c⁄° *
ˇn˚l_ch¨s
,

144 
Êags
, *
ªsu…_buf
);

145 
UI_dup_öput_boﬁón
(
UI
 *
ui
, c⁄° *
¥om±
, c⁄° *
a˘i⁄_desc
,

146 c⁄° *
ok_ch¨s
, c⁄° *
ˇn˚l_ch¨s
,

147 
Êags
, *
ªsu…_buf
);

148 
UI_add_öfo_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

149 
UI_dup_öfo_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

150 
UI_add_îr‹_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

151 
UI_dup_îr‹_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

155 
	#UI_INPUT_FLAG_ECHO
 0x01

	)

163 
	#UI_INPUT_FLAG_DEFAULT_PWD
 0x02

	)

175 
	#UI_INPUT_FLAG_USER_BASE
 16

	)

195 *
UI_c⁄°ru˘_¥om±
(
UI
 *
ui_mëhod
,

196 c⁄° *
obje˘_desc
, c⁄° *
obje˘_«me
);

209 *
UI_add_u£r_d©a
(
UI
 *
ui
, *
u£r_d©a
);

211 *
UI_gë0_u£r_d©a
(
UI
 *
ui
);

214 c⁄° *
UI_gë0_ªsu…
(
UI
 *
ui
, 
i
);

217 
UI_¥o˚ss
(
UI
 *
ui
);

224 
UI_˘æ
(
UI
 *
ui
, 
cmd
, 
i
, *
p
, (*
f
) ());

232 
	#UI_CTRL_PRINT_ERRORS
 1

	)

238 
	#UI_CTRL_IS_REDOABLE
 2

	)

241 
	#UI_£t_≠p_d©a
(
s
,
¨g
Ë
	`UI_£t_ex_d©a
(s,0,¨g)

	)

242 
	#UI_gë_≠p_d©a
(
s
Ë
	`UI_gë_ex_d©a
(s,0)

	)

243 
UI_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

244 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

245 
UI_£t_ex_d©a
(
UI
 *
r
, 
idx
, *
¨g
);

246 *
UI_gë_ex_d©a
(
UI
 *
r
, 
idx
);

249 
UI_£t_deÁu…_mëhod
(c⁄° 
UI_METHOD
 *
mëh
);

250 c⁄° 
UI_METHOD
 *
UI_gë_deÁu…_mëhod
();

251 c⁄° 
UI_METHOD
 *
UI_gë_mëhod
(
UI
 *
ui
);

252 c⁄° 
UI_METHOD
 *
UI_£t_mëhod
(
UI
 *
ui
, c⁄° UI_METHOD *
mëh
);

255 
UI_METHOD
 *
UI_O≥nSSL
();

304 
ui_°rög_°
 
	tUI_STRING
;

305 
DECLARE_STACK_OF
(
UI_STRING
)

311 
	eUI_°rög_ty≥s
 {

312 
UIT_NONE
 = 0,

313 
UIT_PROMPT
,

314 
UIT_VERIFY
,

315 
UIT_BOOLEAN
,

316 
UIT_INFO
,

317 
UIT_ERROR


321 
UI_METHOD
 *
UI_¸óã_mëhod
(*
«me
);

322 
UI_de°roy_mëhod
(
UI_METHOD
 *
ui_mëhod
);

323 
UI_mëhod_£t_›íî
(
UI_METHOD
 *
mëhod
, (*
›íî
Ë(
UI
 *
ui
));

324 
UI_mëhod_£t_wrôî
(
UI_METHOD
 *
mëhod
,

325 (*
wrôî
Ë(
UI
 *
ui
, 
UI_STRING
 *
uis
));

326 
UI_mëhod_£t_Êushî
(
UI_METHOD
 *
mëhod
, (*
Êushî
Ë(
UI
 *
ui
));

327 
UI_mëhod_£t_ªadî
(
UI_METHOD
 *
mëhod
,

328 (*
ªadî
Ë(
UI
 *
ui
, 
UI_STRING
 *
uis
));

329 
UI_mëhod_£t_˛o£r
(
UI_METHOD
 *
mëhod
, (*
˛o£r
Ë(
UI
 *
ui
));

330 
UI_mëhod_£t_¥om±_c⁄°ru˘‹
(
UI_METHOD
 *
mëhod
,

331 *(*
¥om±_c⁄°ru˘‹
Ë(
UI
 *
ui
,

333 *
obje˘_desc
,

335 *
obje˘_«me
));

336 (*
UI_mëhod_gë_›íî
(
UI_METHOD
 *
mëhod
)Ë(
UI
 *);

337 (*
UI_mëhod_gë_wrôî
(
UI_METHOD
 *
mëhod
)Ë(
UI
 *, 
UI_STRING
 *);

338 (*
UI_mëhod_gë_Êushî
(
UI_METHOD
 *
mëhod
)Ë(
UI
 *);

339 (*
UI_mëhod_gë_ªadî
(
UI_METHOD
 *
mëhod
)Ë(
UI
 *, 
UI_STRING
 *);

340 (*
UI_mëhod_gë_˛o£r
(
UI_METHOD
 *
mëhod
)Ë(
UI
 *);

341 *(*
UI_mëhod_gë_¥om±_c⁄°ru˘‹
(
UI_METHOD
 *
mëhod
)Ë(
UI
 *,

351 
UI_°rög_ty≥s
 
UI_gë_°rög_ty≥
(
UI_STRING
 *
uis
);

353 
UI_gë_öput_Êags
(
UI_STRING
 *
uis
);

355 c⁄° *
UI_gë0_ouçut_°rög
(
UI_STRING
 *
uis
);

360 c⁄° *
UI_gë0_a˘i⁄_°rög
(
UI_STRING
 *
uis
);

362 c⁄° *
UI_gë0_ªsu…_°rög
(
UI_STRING
 *
uis
);

366 c⁄° *
UI_gë0_ã°_°rög
(
UI_STRING
 *
uis
);

368 
UI_gë_ªsu…_mösize
(
UI_STRING
 *
uis
);

370 
UI_gë_ªsu…_maxsize
(
UI_STRING
 *
uis
);

372 
UI_£t_ªsu…
(
UI
 *
ui
, 
UI_STRING
 *
uis
, c⁄° *
ªsu…
);

375 
UI_UTIL_ªad_pw_°rög
(*
buf
, 
Àngth
, c⁄° *
¥om±
,

376 
vîify
);

377 
UI_UTIL_ªad_pw
(*
buf
, *
buff
, 
size
, c⁄° *
¥om±
,

378 
vîify
);

385 
ERR_lﬂd_UI_°rögs
();

390 
	#UI_F_GENERAL_ALLOCATE_BOOLEAN
 108

	)

391 
	#UI_F_GENERAL_ALLOCATE_PROMPT
 109

	)

392 
	#UI_F_GENERAL_ALLOCATE_STRING
 100

	)

393 
	#UI_F_UI_CTRL
 111

	)

394 
	#UI_F_UI_DUP_ERROR_STRING
 101

	)

395 
	#UI_F_UI_DUP_INFO_STRING
 102

	)

396 
	#UI_F_UI_DUP_INPUT_BOOLEAN
 110

	)

397 
	#UI_F_UI_DUP_INPUT_STRING
 103

	)

398 
	#UI_F_UI_DUP_VERIFY_STRING
 106

	)

399 
	#UI_F_UI_GET0_RESULT
 107

	)

400 
	#UI_F_UI_NEW_METHOD
 104

	)

401 
	#UI_F_UI_SET_RESULT
 105

	)

404 
	#UI_R_COMMON_OK_AND_CANCEL_CHARACTERS
 104

	)

405 
	#UI_R_INDEX_TOO_LARGE
 102

	)

406 
	#UI_R_INDEX_TOO_SMALL
 103

	)

407 
	#UI_R_NO_RESULT_BUFFER
 105

	)

408 
	#UI_R_RESULT_TOO_LARGE
 100

	)

409 
	#UI_R_RESULT_TOO_SMALL
 101

	)

410 
	#UI_R_UNKNOWN_CONTROL_COMMAND
 106

	)

412 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509.h

64 #i‚de‡
HEADER_X509_H


65 
	#HEADER_X509_H


	)

67 
	~<›ís¶/e_os2.h
>

68 
	~<›ís¶/symhacks.h
>

69 #i‚de‡
OPENSSL_NO_BUFFER


70 
	~<›ís¶/buf„r.h
>

72 #i‚de‡
OPENSSL_NO_EVP


73 
	~<›ís¶/evp.h
>

75 #i‚de‡
OPENSSL_NO_BIO


76 
	~<›ís¶/bio.h
>

78 
	~<›ís¶/°ack.h
>

79 
	~<›ís¶/a¢1.h
>

80 
	~<›ís¶/ß„°ack.h
>

82 #i‚de‡
OPENSSL_NO_EC


83 
	~<›ís¶/ec.h
>

86 #i‚de‡
OPENSSL_NO_ECDSA


87 
	~<›ís¶/ecdß.h
>

90 #i‚de‡
OPENSSL_NO_ECDH


91 
	~<›ís¶/ecdh.h
>

94 #i‚de‡
OPENSSL_NO_DEPRECATED


95 #i‚de‡
OPENSSL_NO_RSA


96 
	~<›ís¶/rß.h
>

98 #i‚de‡
OPENSSL_NO_DSA


99 
	~<›ís¶/dß.h
>

101 #i‚de‡
OPENSSL_NO_DH


102 
	~<›ís¶/dh.h
>

106 #i‚de‡
OPENSSL_NO_SHA


107 
	~<›ís¶/sha.h
>

109 
	~<›ís¶/os¶_typ.h
>

111 #ifde‡ 
__˝lu•lus


115 #ifde‡
OPENSSL_SYS_WIN32


117 #unde‡
X509_NAME


118 #unde‡
X509_CERT_PAIR


119 #unde‡
X509_EXTENSIONS


122 
	#X509_FILETYPE_PEM
 1

	)

123 
	#X509_FILETYPE_ASN1
 2

	)

124 
	#X509_FILETYPE_DEFAULT
 3

	)

126 
	#X509v3_KU_DIGITAL_SIGNATURE
 0x0080

	)

127 
	#X509v3_KU_NON_REPUDIATION
 0x0040

	)

128 
	#X509v3_KU_KEY_ENCIPHERMENT
 0x0020

	)

129 
	#X509v3_KU_DATA_ENCIPHERMENT
 0x0010

	)

130 
	#X509v3_KU_KEY_AGREEMENT
 0x0008

	)

131 
	#X509v3_KU_KEY_CERT_SIGN
 0x0004

	)

132 
	#X509v3_KU_CRL_SIGN
 0x0002

	)

133 
	#X509v3_KU_ENCIPHER_ONLY
 0x0001

	)

134 
	#X509v3_KU_DECIPHER_ONLY
 0x8000

	)

135 
	#X509v3_KU_UNDEF
 0xffff

	)

137 
	sX509_obje˘s_°
 {

138 
nid
;

139 (*
a2i
) ();

140 (*
i2a
) ();

141 } 
	tX509_OBJECTS
;

143 
	sX509_Æg‹_°
 {

144 
ASN1_OBJECT
 *
Æg‹ôhm
;

145 
ASN1_TYPE
 *
∑ømëî
;

148 
DECLARE_ASN1_SET_OF
(
X509_ALGOR
)

150 
STACK_OF
(
	tX509_ALGOR
Ë
	tX509_ALGORS
;

152 
	sX509_vÆ_°
 {

153 
ASN1_TIME
 *
nŸBef‹e
;

154 
ASN1_TIME
 *
nŸA·î
;

155 } 
	tX509_VAL
;

157 
	sX509_pubkey_°
 {

158 
X509_ALGOR
 *
Æg‹
;

159 
ASN1_BIT_STRING
 *
public_key
;

160 
EVP_PKEY
 *
pkey
;

163 
	sX509_sig_°
 {

164 
X509_ALGOR
 *
Æg‹
;

165 
ASN1_OCTET_STRING
 *
dige°
;

166 } 
	tX509_SIG
;

168 
	sX509_«me_íåy_°
 {

169 
ASN1_OBJECT
 *
obje˘
;

170 
ASN1_STRING
 *
vÆue
;

171 
£t
;

172 
size
;

173 } 
	tX509_NAME_ENTRY
;

175 
DECLARE_STACK_OF
(
X509_NAME_ENTRY
)

176 
DECLARE_ASN1_SET_OF
(
X509_NAME_ENTRY
)

179 
	sX509_«me_°
 {

180 
STACK_OF
(
X509_NAME_ENTRY
Ë*
íåõs
;

181 
modifõd
;

182 #i‚de‡
OPENSSL_NO_BUFFER


183 
BUF_MEM
 *
byãs
;

185 *
byãs
;

188 *
ˇn⁄_íc
;

189 
ˇn⁄_í˛í
;

192 
DECLARE_STACK_OF
(
X509_NAME
)

194 
	#X509_EX_V_NETSCAPE_HACK
 0x8000

	)

195 
	#X509_EX_V_INIT
 0x0001

	)

196 
	sX509_exãnsi⁄_°
 {

197 
ASN1_OBJECT
 *
obje˘
;

198 
ASN1_BOOLEAN
 
¸ôiˇl
;

199 
ASN1_OCTET_STRING
 *
vÆue
;

200 } 
	tX509_EXTENSION
;

202 
STACK_OF
(
	tX509_EXTENSION
Ë
	tX509_EXTENSIONS
;

204 
DECLARE_STACK_OF
(
X509_EXTENSION
)

205 
DECLARE_ASN1_SET_OF
(
X509_EXTENSION
)

208 
	sx509_©åibuãs_°
 {

209 
ASN1_OBJECT
 *
obje˘
;

210 
sögÀ
;

213 *
±r
;

216  
STACK_OF
(
ASN1_TYPE
Ë*
£t
;

219  
ASN1_TYPE
 *
sögÀ
;

220 } 
vÆue
;

221 } 
	tX509_ATTRIBUTE
;

223 
DECLARE_STACK_OF
(
X509_ATTRIBUTE
)

224 
DECLARE_ASN1_SET_OF
(
X509_ATTRIBUTE
)

226 
	sX509_ªq_öfo_°
 {

227 
ASN1_ENCODING
 
íc
;

228 
ASN1_INTEGER
 *
vîsi⁄
;

229 
X509_NAME
 *
subje˘
;

230 
X509_PUBKEY
 *
pubkey
;

232 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

233 } 
	tX509_REQ_INFO
;

235 
	sX509_ªq_°
 {

236 
X509_REQ_INFO
 *
ªq_öfo
;

237 
X509_ALGOR
 *
sig_Æg
;

238 
ASN1_BIT_STRING
 *
sig«tuª
;

239 
ª„ªn˚s
;

240 } 
	tX509_REQ
;

242 
	sx509_cöf_°
 {

243 
ASN1_INTEGER
 *
vîsi⁄
;

244 
ASN1_INTEGER
 *
£rülNumbî
;

245 
X509_ALGOR
 *
sig«tuª
;

246 
X509_NAME
 *
issuî
;

247 
X509_VAL
 *
vÆidôy
;

248 
X509_NAME
 *
subje˘
;

249 
X509_PUBKEY
 *
key
;

250 
ASN1_BIT_STRING
 *
issuîUID
;

251 
ASN1_BIT_STRING
 *
subje˘UID
;

252 
STACK_OF
(
X509_EXTENSION
Ë*
exãnsi⁄s
;

253 
ASN1_ENCODING
 
íc
;

254 } 
	tX509_CINF
;

262 
	sx509_˚π_aux_°
 {

263 
STACK_OF
(
ASN1_OBJECT
Ë*
åu°
;

264 
STACK_OF
(
ASN1_OBJECT
Ë*
ªje˘
;

265 
ASN1_UTF8STRING
 *
Æüs
;

266 
ASN1_OCTET_STRING
 *
keyid
;

267 
STACK_OF
(
X509_ALGOR
Ë*
Ÿhî
;

268 } 
	tX509_CERT_AUX
;

270 
	sx509_°
 {

271 
X509_CINF
 *
˚π_öfo
;

272 
X509_ALGOR
 *
sig_Æg
;

273 
ASN1_BIT_STRING
 *
sig«tuª
;

274 
vÆid
;

275 
ª„ªn˚s
;

276 *
«me
;

277 
CRYPTO_EX_DATA
 
ex_d©a
;

279 
ex_∑thÀn
;

280 
ex_p˝©hÀn
;

281 
ex_Êags
;

282 
ex_kußge
;

283 
ex_xkußge
;

284 
ex_ns˚π
;

285 
ASN1_OCTET_STRING
 *
skid
;

286 
AUTHORITY_KEYID
 *
akid
;

287 
X509_POLICY_CACHE
 *
pﬁicy_ˇche
;

288 
STACK_OF
(
DIST_POINT
Ë*
¸ldp
;

289 
STACK_OF
(
GENERAL_NAME
Ë*
Æäame
;

290 
NAME_CONSTRAINTS
 *
nc
;

291 #i‚de‡
OPENSSL_NO_RFC3779


292 
STACK_OF
(
IPAddªssFamûy
Ë*
rfc3779_addr
;

293 
ASIdítifõrs_°
 *
rfc3779_asid
;

295 #i‚de‡
OPENSSL_NO_SHA


296 
sha1_hash
[
SHA_DIGEST_LENGTH
];

298 
X509_CERT_AUX
 *
aux
;

301 
DECLARE_STACK_OF
(
X509
)

302 
DECLARE_ASN1_SET_OF
(
X509
)

306 
	sx509_åu°_°
 {

307 
åu°
;

308 
Êags
;

309 (*
check_åu°
Ë(
x509_åu°_°
 *, 
X509
 *, );

310 *
«me
;

311 
¨g1
;

312 *
¨g2
;

313 } 
	tX509_TRUST
;

315 
DECLARE_STACK_OF
(
X509_TRUST
)

317 
	sx509_˚π_∑ú_°
 {

318 
X509
 *
f‹w¨d
;

319 
X509
 *
ªvî£
;

320 } 
	tX509_CERT_PAIR
;

324 
	#X509_TRUST_DEFAULT
 -1

	)

326 
	#X509_TRUST_COMPAT
 1

	)

327 
	#X509_TRUST_SSL_CLIENT
 2

	)

328 
	#X509_TRUST_SSL_SERVER
 3

	)

329 
	#X509_TRUST_EMAIL
 4

	)

330 
	#X509_TRUST_OBJECT_SIGN
 5

	)

331 
	#X509_TRUST_OCSP_SIGN
 6

	)

332 
	#X509_TRUST_OCSP_REQUEST
 7

	)

333 
	#X509_TRUST_TSA
 8

	)

336 
	#X509_TRUST_MIN
 1

	)

337 
	#X509_TRUST_MAX
 8

	)

340 
	#X509_TRUST_DYNAMIC
 1

	)

341 
	#X509_TRUST_DYNAMIC_NAME
 2

	)

345 
	#X509_TRUST_TRUSTED
 1

	)

346 
	#X509_TRUST_REJECTED
 2

	)

347 
	#X509_TRUST_UNTRUSTED
 3

	)

351 
	#X509_FLAG_COMPAT
 0

	)

352 
	#X509_FLAG_NO_HEADER
 1L

	)

353 
	#X509_FLAG_NO_VERSION
 (1L << 1)

	)

354 
	#X509_FLAG_NO_SERIAL
 (1L << 2)

	)

355 
	#X509_FLAG_NO_SIGNAME
 (1L << 3)

	)

356 
	#X509_FLAG_NO_ISSUER
 (1L << 4)

	)

357 
	#X509_FLAG_NO_VALIDITY
 (1L << 5)

	)

358 
	#X509_FLAG_NO_SUBJECT
 (1L << 6)

	)

359 
	#X509_FLAG_NO_PUBKEY
 (1L << 7)

	)

360 
	#X509_FLAG_NO_EXTENSIONS
 (1L << 8)

	)

361 
	#X509_FLAG_NO_SIGDUMP
 (1L << 9)

	)

362 
	#X509_FLAG_NO_AUX
 (1L << 10)

	)

363 
	#X509_FLAG_NO_ATTRIBUTES
 (1L << 11)

	)

364 
	#X509_FLAG_NO_IDS
 (1L << 12)

	)

370 
	#XN_FLAG_SEP_MASK
 (0x‡<< 16)

	)

372 
	#XN_FLAG_COMPAT
 0

	)

374 
	#XN_FLAG_SEP_COMMA_PLUS
 (1 << 16)

	)

375 
	#XN_FLAG_SEP_CPLUS_SPC
 (2 << 16)

	)

376 
	#XN_FLAG_SEP_SPLUS_SPC
 (3 << 16)

	)

377 
	#XN_FLAG_SEP_MULTILINE
 (4 << 16)

	)

379 
	#XN_FLAG_DN_REV
 (1 << 20)

	)

383 
	#XN_FLAG_FN_MASK
 (0x3 << 21)

	)

385 
	#XN_FLAG_FN_SN
 0

	)

386 
	#XN_FLAG_FN_LN
 (1 << 21)

	)

387 
	#XN_FLAG_FN_OID
 (2 << 21)

	)

388 
	#XN_FLAG_FN_NONE
 (3 << 21)

	)

390 
	#XN_FLAG_SPC_EQ
 (1 << 23)

	)

397 
	#XN_FLAG_DUMP_UNKNOWN_FIELDS
 (1 << 24)

	)

399 
	#XN_FLAG_FN_ALIGN
 (1 << 25)

	)

404 
	#XN_FLAG_RFC2253
 (
ASN1_STRFLGS_RFC2253
 | \

405 
XN_FLAG_SEP_COMMA_PLUS
 | \

406 
XN_FLAG_DN_REV
 | \

407 
XN_FLAG_FN_SN
 | \

408 
XN_FLAG_DUMP_UNKNOWN_FIELDS
)

	)

412 
	#XN_FLAG_ONELINE
 (
ASN1_STRFLGS_RFC2253
 | \

413 
ASN1_STRFLGS_ESC_QUOTE
 | \

414 
XN_FLAG_SEP_CPLUS_SPC
 | \

415 
XN_FLAG_SPC_EQ
 | \

416 
XN_FLAG_FN_SN
)

	)

420 
	#XN_FLAG_MULTILINE
 (
ASN1_STRFLGS_ESC_CTRL
 | \

421 
ASN1_STRFLGS_ESC_MSB
 | \

422 
XN_FLAG_SEP_MULTILINE
 | \

423 
XN_FLAG_SPC_EQ
 | \

424 
XN_FLAG_FN_LN
 | \

425 
XN_FLAG_FN_ALIGN
)

	)

427 
	sx509_ªvoked_°
 {

428 
ASN1_INTEGER
 *
£rülNumbî
;

429 
ASN1_TIME
 *
ªvoˇti⁄D©e
;

430 
STACK_OF
(
X509_EXTENSION
Ë *
exãnsi⁄s
;

432 
STACK_OF
(
GENERAL_NAME
Ë*
issuî
;

434 
ªas⁄
;

435 
£quí˚
;

438 
DECLARE_STACK_OF
(
X509_REVOKED
)

439 
DECLARE_ASN1_SET_OF
(
X509_REVOKED
)

441 
	sX509_¸l_öfo_°
 {

442 
ASN1_INTEGER
 *
vîsi⁄
;

443 
X509_ALGOR
 *
sig_Æg
;

444 
X509_NAME
 *
issuî
;

445 
ASN1_TIME
 *
œ°Upd©e
;

446 
ASN1_TIME
 *
√xtUpd©e
;

447 
STACK_OF
(
X509_REVOKED
Ë*
ªvoked
;

448 
STACK_OF
(
X509_EXTENSION
Ë *
exãnsi⁄s
;

449 
ASN1_ENCODING
 
íc
;

450 } 
	tX509_CRL_INFO
;

452 
	sX509_¸l_°
 {

454 
X509_CRL_INFO
 *
¸l
;

455 
X509_ALGOR
 *
sig_Æg
;

456 
ASN1_BIT_STRING
 *
sig«tuª
;

457 
ª„ªn˚s
;

458 
Êags
;

460 
AUTHORITY_KEYID
 *
akid
;

461 
ISSUING_DIST_POINT
 *
idp
;

463 
idp_Êags
;

464 
idp_ªas⁄s
;

466 
ASN1_INTEGER
 *
¸l_numbî
;

467 
ASN1_INTEGER
 *
ba£_¸l_numbî
;

468 #i‚de‡
OPENSSL_NO_SHA


469 
sha1_hash
[
SHA_DIGEST_LENGTH
];

471 
STACK_OF
(
GENERAL_NAMES
Ë*
issuîs
;

472 c⁄° 
X509_CRL_METHOD
 *
mëh
;

473 *
mëh_d©a
;

476 
DECLARE_STACK_OF
(
X509_CRL
)

477 
DECLARE_ASN1_SET_OF
(
X509_CRL
)

479 
	s¥iv©e_key_°
 {

480 
vîsi⁄
;

482 
X509_ALGOR
 *
íc_Æg‹
;

483 
ASN1_OCTET_STRING
 *
íc_pkey
;

485 
EVP_PKEY
 *
dec_pkey
;

487 
key_Àngth
;

488 *
key_d©a
;

489 
key_‰ì
;

491 
EVP_CIPHER_INFO
 
cùhî
;

492 
ª„ªn˚s
;

493 } 
	tX509_PKEY
;

495 #i‚de‡
OPENSSL_NO_EVP


496 
	sX509_öfo_°
 {

497 
X509
 *
x509
;

498 
X509_CRL
 *
¸l
;

499 
X509_PKEY
 *
x_pkey
;

500 
EVP_CIPHER_INFO
 
íc_cùhî
;

501 
íc_Àn
;

502 *
íc_d©a
;

503 
ª„ªn˚s
;

504 } 
	tX509_INFO
;

506 
DECLARE_STACK_OF
(
X509_INFO
)

514 
	sNësˇ≥_•kac_°
 {

515 
X509_PUBKEY
 *
pubkey
;

516 
ASN1_IA5STRING
 *
chÆÀnge
;

517 } 
	tNETSCAPE_SPKAC
;

519 
	sNësˇ≥_•ki_°
 {

520 
NETSCAPE_SPKAC
 *
•kac
;

521 
X509_ALGOR
 *
sig_Æg‹
;

522 
ASN1_BIT_STRING
 *
sig«tuª
;

523 } 
	tNETSCAPE_SPKI
;

526 
	sNësˇ≥_˚πifiˇã_£quí˚
 {

527 
ASN1_OBJECT
 *
ty≥
;

528 
STACK_OF
(
X509
Ë*
˚πs
;

529 } 
	tNETSCAPE_CERT_SEQUENCE
;

540 
	sPBEPARAM_°
 {

541 
ASN1_OCTET_STRING
 *
ß…
;

542 
ASN1_INTEGER
 *
ôî
;

543 } 
	tPBEPARAM
;

547 
	sPBE2PARAM_°
 {

548 
X509_ALGOR
 *
keyfunc
;

549 
X509_ALGOR
 *
í¸y±i⁄
;

550 } 
	tPBE2PARAM
;

552 
	sPBKDF2PARAM_°
 {

554 
ASN1_TYPE
 *
ß…
;

555 
ASN1_INTEGER
 *
ôî
;

556 
ASN1_INTEGER
 *
keyÀngth
;

557 
X509_ALGOR
 *
¥f
;

558 } 
	tPBKDF2PARAM
;

562 
	spkcs8_¥iv_key_öfo_°
 {

564 
brokí
;

565 
	#PKCS8_OK
 0

	)

566 
	#PKCS8_NO_OCTET
 1

	)

567 
	#PKCS8_EMBEDDED_PARAM
 2

	)

568 
	#PKCS8_NS_DB
 3

	)

569 
	#PKCS8_NEG_PRIVKEY
 4

	)

570 
ASN1_INTEGER
 *
vîsi⁄
;

571 
X509_ALGOR
 *
pkeyÆg
;

573 
ASN1_TYPE
 *
pkey
;

574 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

577 #ifde‡ 
__˝lu•lus


581 
	~<›ís¶/x509_vfy.h
>

582 
	~<›ís¶/pkcs7.h
>

584 #ifde‡ 
__˝lu•lus


588 
	#X509_EXT_PACK_UNKNOWN
 1

	)

589 
	#X509_EXT_PACK_STRING
 2

	)

591 
	#X509_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
˚π_öfo
->
vîsi⁄
)

	)

593 
	#X509_gë_nŸBef‹e
(
x
Ë((x)->
˚π_öfo
->
vÆidôy
->
nŸBef‹e
)

	)

594 
	#X509_gë_nŸA·î
(
x
Ë((x)->
˚π_öfo
->
vÆidôy
->
nŸA·î
)

	)

595 
	#X509_exåa˘_key
(
x
Ë
	`X509_gë_pubkey
(x)

	)

596 
	#X509_REQ_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
ªq_öfo
->
vîsi⁄
)

	)

597 
	#X509_REQ_gë_subje˘_«me
(
x
Ë((x)->
ªq_öfo
->
subje˘
)

	)

598 
	#X509_REQ_exåa˘_key
(
a
Ë
	`X509_REQ_gë_pubkey
◊)

	)

599 
	#X509_«me_cmp
(
a
,
b
Ë
	`X509_NAME_cmp
(◊),(b))

	)

600 
	#X509_gë_sig«tuª_ty≥
(
x
Ë
	`EVP_PKEY_ty≥
(
	`OBJ_obj2nid
((x)->
sig_Æg
->
Æg‹ôhm
))

	)

602 
	#X509_CRL_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
¸l
->
vîsi⁄
)

	)

603 
	#X509_CRL_gë_œ°Upd©e
(
x
Ë((x)->
¸l
->
œ°Upd©e
)

	)

604 
	#X509_CRL_gë_√xtUpd©e
(
x
Ë((x)->
¸l
->
√xtUpd©e
)

	)

605 
	#X509_CRL_gë_issuî
(
x
Ë((x)->
¸l
->
issuî
)

	)

606 
	#X509_CRL_gë_REVOKED
(
x
Ë((x)->
¸l
->
ªvoked
)

	)

608 
X509_CRL_£t_deÁu…_mëhod
(c⁄° 
X509_CRL_METHOD
 *
mëh
);

609 
X509_CRL_METHOD
 *
X509_CRL_METHOD_√w
((*
¸l_öô
Ë(
X509_CRL
 *
¸l
),

610 (*
¸l_‰ì
Ë(
X509_CRL
 *
¸l
),

611 (*
¸l_lookup
Ë(
X509_CRL
 *
¸l
,

612 
X509_REVOKED
 **
ªt
,

613 
ASN1_INTEGER
 *
£r
,

614 
X509_NAME
 *
issuî
),

615 (*
¸l_vîify
Ë(
X509_CRL
 *
¸l
,

616 
EVP_PKEY
 *
pk
));

617 
X509_CRL_METHOD_‰ì
(
X509_CRL_METHOD
 *
m
);

619 
X509_CRL_£t_mëh_d©a
(
X509_CRL
 *
¸l
, *
d©
);

620 *
X509_CRL_gë_mëh_d©a
(
X509_CRL
 *
¸l
);

626 
	#X509_gë_X509_PUBKEY
(
x
Ë((x)->
˚π_öfo
->
key
)

	)

628 c⁄° *
X509_vîify_˚π_îr‹_°rög
(
n
);

630 #i‚de‡
OPENSSL_NO_EVP


631 
X509_vîify
(
X509
 *
a
, 
EVP_PKEY
 *
r
);

633 
X509_REQ_vîify
(
X509_REQ
 *
a
, 
EVP_PKEY
 *
r
);

634 
X509_CRL_vîify
(
X509_CRL
 *
a
, 
EVP_PKEY
 *
r
);

635 
NETSCAPE_SPKI_vîify
(
NETSCAPE_SPKI
 *
a
, 
EVP_PKEY
 *
r
);

637 
NETSCAPE_SPKI
 *
NETSCAPE_SPKI_b64_decode
(c⁄° *
°r
, 
Àn
);

638 *
NETSCAPE_SPKI_b64_ícode
(
NETSCAPE_SPKI
 *
x
);

639 
EVP_PKEY
 *
NETSCAPE_SPKI_gë_pubkey
(
NETSCAPE_SPKI
 *
x
);

640 
NETSCAPE_SPKI_£t_pubkey
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
);

642 
NETSCAPE_SPKI_¥öt
(
BIO
 *
out
, 
NETSCAPE_SPKI
 *
•ki
);

644 
X509_sig«tuª_dump
(
BIO
 *
bp
, c⁄° 
ASN1_STRING
 *
sig
, 
ödít
);

645 
X509_sig«tuª_¥öt
(
BIO
 *
bp
, 
X509_ALGOR
 *
Æg
, 
ASN1_STRING
 *
sig
);

647 
X509_sign
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

648 
X509_sign_˘x
(
X509
 *
x
, 
EVP_MD_CTX
 *
˘x
);

649 
X509_hâp_nbio
(
OCSP_REQ_CTX
 *
r˘x
, 
X509
 **
p˚π
);

650 
X509_REQ_sign
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

651 
X509_REQ_sign_˘x
(
X509_REQ
 *
x
, 
EVP_MD_CTX
 *
˘x
);

652 
X509_CRL_sign
(
X509_CRL
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

653 
X509_CRL_sign_˘x
(
X509_CRL
 *
x
, 
EVP_MD_CTX
 *
˘x
);

654 
X509_CRL_hâp_nbio
(
OCSP_REQ_CTX
 *
r˘x
, 
X509_CRL
 **
p¸l
);

655 
NETSCAPE_SPKI_sign
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

657 
X509_pubkey_dige°
(c⁄° 
X509
 *
d©a
, c⁄° 
EVP_MD
 *
ty≥
,

658 *
md
, *
Àn
);

659 
X509_dige°
(c⁄° 
X509
 *
d©a
, c⁄° 
EVP_MD
 *
ty≥
,

660 *
md
, *
Àn
);

661 
X509_CRL_dige°
(c⁄° 
X509_CRL
 *
d©a
, c⁄° 
EVP_MD
 *
ty≥
,

662 *
md
, *
Àn
);

663 
X509_REQ_dige°
(c⁄° 
X509_REQ
 *
d©a
, c⁄° 
EVP_MD
 *
ty≥
,

664 *
md
, *
Àn
);

665 
X509_NAME_dige°
(c⁄° 
X509_NAME
 *
d©a
, c⁄° 
EVP_MD
 *
ty≥
,

666 *
md
, *
Àn
);

669 #i‚de‡
OPENSSL_NO_FP_API


670 
X509
 *
d2i_X509_Â
(
FILE
 *
Â
, X509 **
x509
);

671 
i2d_X509_Â
(
FILE
 *
Â
, 
X509
 *
x509
);

672 
X509_CRL
 *
d2i_X509_CRL_Â
(
FILE
 *
Â
, X509_CRL **
¸l
);

673 
i2d_X509_CRL_Â
(
FILE
 *
Â
, 
X509_CRL
 *
¸l
);

674 
X509_REQ
 *
d2i_X509_REQ_Â
(
FILE
 *
Â
, X509_REQ **
ªq
);

675 
i2d_X509_REQ_Â
(
FILE
 *
Â
, 
X509_REQ
 *
ªq
);

676 #i‚de‡
OPENSSL_NO_RSA


677 
RSA
 *
d2i_RSAPriv©eKey_Â
(
FILE
 *
Â
, RSA **
rß
);

678 
i2d_RSAPriv©eKey_Â
(
FILE
 *
Â
, 
RSA
 *
rß
);

679 
RSA
 *
d2i_RSAPublicKey_Â
(
FILE
 *
Â
, RSA **
rß
);

680 
i2d_RSAPublicKey_Â
(
FILE
 *
Â
, 
RSA
 *
rß
);

681 
RSA
 *
d2i_RSA_PUBKEY_Â
(
FILE
 *
Â
, RSA **
rß
);

682 
i2d_RSA_PUBKEY_Â
(
FILE
 *
Â
, 
RSA
 *
rß
);

684 #i‚de‡
OPENSSL_NO_DSA


685 
DSA
 *
d2i_DSA_PUBKEY_Â
(
FILE
 *
Â
, DSA **
dß
);

686 
i2d_DSA_PUBKEY_Â
(
FILE
 *
Â
, 
DSA
 *
dß
);

687 
DSA
 *
d2i_DSAPriv©eKey_Â
(
FILE
 *
Â
, DSA **
dß
);

688 
i2d_DSAPriv©eKey_Â
(
FILE
 *
Â
, 
DSA
 *
dß
);

690 #i‚de‡
OPENSSL_NO_EC


691 
EC_KEY
 *
d2i_EC_PUBKEY_Â
(
FILE
 *
Â
, EC_KEY **
eckey
);

692 
i2d_EC_PUBKEY_Â
(
FILE
 *
Â
, 
EC_KEY
 *
eckey
);

693 
EC_KEY
 *
d2i_ECPriv©eKey_Â
(
FILE
 *
Â
, EC_KEY **
eckey
);

694 
i2d_ECPriv©eKey_Â
(
FILE
 *
Â
, 
EC_KEY
 *
eckey
);

696 
X509_SIG
 *
d2i_PKCS8_Â
(
FILE
 *
Â
, X509_SIG **
p8
);

697 
i2d_PKCS8_Â
(
FILE
 *
Â
, 
X509_SIG
 *
p8
);

698 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_Â
(
FILE
 *
Â
,

699 
PKCS8_PRIV_KEY_INFO
 **
p8öf
);

700 
i2d_PKCS8_PRIV_KEY_INFO_Â
(
FILE
 *
Â
, 
PKCS8_PRIV_KEY_INFO
 *
p8öf
);

701 
i2d_PKCS8Priv©eKeyInfo_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
key
);

702 
i2d_Priv©eKey_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
pkey
);

703 
EVP_PKEY
 *
d2i_Priv©eKey_Â
(
FILE
 *
Â
, EVP_PKEY **
a
);

704 
i2d_PUBKEY_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
pkey
);

705 
EVP_PKEY
 *
d2i_PUBKEY_Â
(
FILE
 *
Â
, EVP_PKEY **
a
);

708 #i‚de‡
OPENSSL_NO_BIO


709 
X509
 *
d2i_X509_bio
(
BIO
 *
bp
, X509 **
x509
);

710 
i2d_X509_bio
(
BIO
 *
bp
, 
X509
 *
x509
);

711 
X509_CRL
 *
d2i_X509_CRL_bio
(
BIO
 *
bp
, X509_CRL **
¸l
);

712 
i2d_X509_CRL_bio
(
BIO
 *
bp
, 
X509_CRL
 *
¸l
);

713 
X509_REQ
 *
d2i_X509_REQ_bio
(
BIO
 *
bp
, X509_REQ **
ªq
);

714 
i2d_X509_REQ_bio
(
BIO
 *
bp
, 
X509_REQ
 *
ªq
);

715 #i‚de‡
OPENSSL_NO_RSA


716 
RSA
 *
d2i_RSAPriv©eKey_bio
(
BIO
 *
bp
, RSA **
rß
);

717 
i2d_RSAPriv©eKey_bio
(
BIO
 *
bp
, 
RSA
 *
rß
);

718 
RSA
 *
d2i_RSAPublicKey_bio
(
BIO
 *
bp
, RSA **
rß
);

719 
i2d_RSAPublicKey_bio
(
BIO
 *
bp
, 
RSA
 *
rß
);

720 
RSA
 *
d2i_RSA_PUBKEY_bio
(
BIO
 *
bp
, RSA **
rß
);

721 
i2d_RSA_PUBKEY_bio
(
BIO
 *
bp
, 
RSA
 *
rß
);

723 #i‚de‡
OPENSSL_NO_DSA


724 
DSA
 *
d2i_DSA_PUBKEY_bio
(
BIO
 *
bp
, DSA **
dß
);

725 
i2d_DSA_PUBKEY_bio
(
BIO
 *
bp
, 
DSA
 *
dß
);

726 
DSA
 *
d2i_DSAPriv©eKey_bio
(
BIO
 *
bp
, DSA **
dß
);

727 
i2d_DSAPriv©eKey_bio
(
BIO
 *
bp
, 
DSA
 *
dß
);

729 #i‚de‡
OPENSSL_NO_EC


730 
EC_KEY
 *
d2i_EC_PUBKEY_bio
(
BIO
 *
bp
, EC_KEY **
eckey
);

731 
i2d_EC_PUBKEY_bio
(
BIO
 *
bp
, 
EC_KEY
 *
eckey
);

732 
EC_KEY
 *
d2i_ECPriv©eKey_bio
(
BIO
 *
bp
, EC_KEY **
eckey
);

733 
i2d_ECPriv©eKey_bio
(
BIO
 *
bp
, 
EC_KEY
 *
eckey
);

735 
X509_SIG
 *
d2i_PKCS8_bio
(
BIO
 *
bp
, X509_SIG **
p8
);

736 
i2d_PKCS8_bio
(
BIO
 *
bp
, 
X509_SIG
 *
p8
);

737 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
,

738 
PKCS8_PRIV_KEY_INFO
 **
p8öf
);

739 
i2d_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
, 
PKCS8_PRIV_KEY_INFO
 *
p8öf
);

740 
i2d_PKCS8Priv©eKeyInfo_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
key
);

741 
i2d_Priv©eKey_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
pkey
);

742 
EVP_PKEY
 *
d2i_Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

743 
i2d_PUBKEY_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
pkey
);

744 
EVP_PKEY
 *
d2i_PUBKEY_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

747 
X509
 *
X509_dup
(X509 *
x509
);

748 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_dup
(X509_ATTRIBUTE *
xa
);

749 
X509_EXTENSION
 *
X509_EXTENSION_dup
(X509_EXTENSION *
ex
);

750 
X509_CRL
 *
X509_CRL_dup
(X509_CRL *
¸l
);

751 
X509_REVOKED
 *
X509_REVOKED_dup
(X509_REVOKED *
ªv
);

752 
X509_REQ
 *
X509_REQ_dup
(X509_REQ *
ªq
);

753 
X509_ALGOR
 *
X509_ALGOR_dup
(X509_ALGOR *
xn
);

754 
X509_ALGOR_£t0
(
X509_ALGOR
 *
Æg
, 
ASN1_OBJECT
 *
aobj
, 
±y≥
,

755 *
pvÆ
);

756 
X509_ALGOR_gë0
(
ASN1_OBJECT
 **
∑obj
, *
µty≥
, **
µvÆ
,

757 
X509_ALGOR
 *
Æg‹
);

758 
X509_ALGOR_£t_md
(
X509_ALGOR
 *
Æg
, c⁄° 
EVP_MD
 *
md
);

759 
X509_ALGOR_cmp
(c⁄° 
X509_ALGOR
 *
a
, c⁄° X509_ALGOR *
b
);

761 
X509_NAME
 *
X509_NAME_dup
(X509_NAME *
xn
);

762 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_dup
(X509_NAME_ENTRY *
√
);

764 
X509_cmp_time
(c⁄° 
ASN1_TIME
 *
s
, 
time_t
 *
t
);

765 
X509_cmp_cuºít_time
(c⁄° 
ASN1_TIME
 *
s
);

766 
ASN1_TIME
 *
X509_time_adj
(ASN1_TIME *
s
, 
adj
, 
time_t
 *
t
);

767 
ASN1_TIME
 *
X509_time_adj_ex
(ASN1_TIME *
s
,

768 
off£t_day
, 
off£t_£c
, 
time_t
 *
t
);

769 
ASN1_TIME
 *
X509_gmtime_adj
(ASN1_TIME *
s
, 
adj
);

771 c⁄° *
X509_gë_deÁu…_˚π_¨ó
();

772 c⁄° *
X509_gë_deÁu…_˚π_dú
();

773 c⁄° *
X509_gë_deÁu…_˚π_fûe
();

774 c⁄° *
X509_gë_deÁu…_˚π_dú_ív
();

775 c⁄° *
X509_gë_deÁu…_˚π_fûe_ív
();

776 c⁄° *
X509_gë_deÁu…_¥iv©e_dú
();

778 
X509_REQ
 *
X509_to_X509_REQ
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

779 
X509
 *
X509_REQ_to_X509
(
X509_REQ
 *
r
, 
days
, 
EVP_PKEY
 *
pkey
);

781 
DECLARE_ASN1_FUNCTIONS
(
X509_ALGOR
)

782 
DECLARE_ASN1_ENCODE_FUNCTIONS
(
X509_ALGORS
, X509_ALGORS, X509_ALGORS)

783 
DECLARE_ASN1_FUNCTIONS
(
X509_VAL
)

785 
DECLARE_ASN1_FUNCTIONS
(
X509_PUBKEY
)

787 
X509_PUBKEY_£t
(
X509_PUBKEY
 **
x
, 
EVP_PKEY
 *
pkey
);

788 
EVP_PKEY
 *
X509_PUBKEY_gë
(
X509_PUBKEY
 *
key
);

789 
X509_gë_pubkey_∑ømëîs
(
EVP_PKEY
 *
pkey
, 
STACK_OF
(
X509
Ë*
chaö
);

790 
i2d_PUBKEY
(
EVP_PKEY
 *
a
, **
µ
);

791 
EVP_PKEY
 *
d2i_PUBKEY
(EVP_PKEY **
a
, c⁄° **
µ
, 
Àngth
);

792 #i‚de‡
OPENSSL_NO_RSA


793 
i2d_RSA_PUBKEY
(
RSA
 *
a
, **
µ
);

794 
RSA
 *
d2i_RSA_PUBKEY
(RSA **
a
, c⁄° **
µ
, 
Àngth
);

796 #i‚de‡
OPENSSL_NO_DSA


797 
i2d_DSA_PUBKEY
(
DSA
 *
a
, **
µ
);

798 
DSA
 *
d2i_DSA_PUBKEY
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

800 #i‚de‡
OPENSSL_NO_EC


801 
i2d_EC_PUBKEY
(
EC_KEY
 *
a
, **
µ
);

802 
EC_KEY
 *
d2i_EC_PUBKEY
(EC_KEY **
a
, c⁄° **
µ
, 
Àngth
);

805 
DECLARE_ASN1_FUNCTIONS
(
X509_SIG
)

806 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ_INFO
)

807 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ
)

809 
DECLARE_ASN1_FUNCTIONS
(
X509_ATTRIBUTE
)

810 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã
(
nid
, 
©πy≥
, *
vÆue
);

812 
DECLARE_ASN1_FUNCTIONS
(
X509_EXTENSION
)

813 
DECLARE_ASN1_ENCODE_FUNCTIONS
(
X509_EXTENSIONS
, X509_EXTENSIONS, X509_EXTENSIONS)

815 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME_ENTRY
)

817 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME
)

819 
X509_NAME_£t
(
X509_NAME
 **
xn
, X509_NAME *
«me
);

821 
DECLARE_ASN1_FUNCTIONS
(
X509_CINF
)

823 
DECLARE_ASN1_FUNCTIONS
(
X509
)

824 
DECLARE_ASN1_FUNCTIONS
(
X509_CERT_AUX
)

826 
DECLARE_ASN1_FUNCTIONS
(
X509_CERT_PAIR
)

828 
X509_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

829 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

830 
X509_£t_ex_d©a
(
X509
 *
r
, 
idx
, *
¨g
);

831 *
X509_gë_ex_d©a
(
X509
 *
r
, 
idx
);

832 
i2d_X509_AUX
(
X509
 *
a
, **
µ
);

833 
X509
 *
d2i_X509_AUX
(X509 **
a
, c⁄° **
µ
, 
Àngth
);

835 
i2d_ª_X509_tbs
(
X509
 *
x
, **
µ
);

837 
X509_gë0_sig«tuª
(
ASN1_BIT_STRING
 **
psig
, 
X509_ALGOR
 **
∑lg
,

838 c⁄° 
X509
 *
x
);

839 
X509_gë_sig«tuª_nid
(c⁄° 
X509
 *
x
);

841 
X509_Æüs_£t1
(
X509
 *
x
, *
«me
, 
Àn
);

842 
X509_keyid_£t1
(
X509
 *
x
, *
id
, 
Àn
);

843 *
X509_Æüs_gë0
(
X509
 *
x
, *
Àn
);

844 *
X509_keyid_gë0
(
X509
 *
x
, *
Àn
);

845 (*
X509_TRUST_£t_deÁu…
((*
åu°
Ë(, 
X509
 *, ))) (, X509 *,

847 
X509_TRUST_£t
(*
t
, 
åu°
);

848 
X509_add1_åu°_obje˘
(
X509
 *
x
, 
ASN1_OBJECT
 *
obj
);

849 
X509_add1_ªje˘_obje˘
(
X509
 *
x
, 
ASN1_OBJECT
 *
obj
);

850 
X509_åu°_˛ór
(
X509
 *
x
);

851 
X509_ªje˘_˛ór
(
X509
 *
x
);

853 
DECLARE_ASN1_FUNCTIONS
(
X509_REVOKED
)

854 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL_INFO
)

855 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL
)

857 
X509_CRL_add0_ªvoked
(
X509_CRL
 *
¸l
, 
X509_REVOKED
 *
ªv
);

858 
X509_CRL_gë0_by_£rül
(
X509_CRL
 *
¸l
,

859 
X509_REVOKED
 **
ªt
, 
ASN1_INTEGER
 *
£rül
);

860 
X509_CRL_gë0_by_˚π
(
X509_CRL
 *
¸l
, 
X509_REVOKED
 **
ªt
, 
X509
 *
x
);

862 
X509_PKEY
 *
X509_PKEY_√w
();

863 
X509_PKEY_‰ì
(
X509_PKEY
 *
a
);

864 
i2d_X509_PKEY
(
X509_PKEY
 *
a
, **
µ
);

865 
X509_PKEY
 *
d2i_X509_PKEY
(X509_PKEY **
a
, c⁄° **
µ
,

866 
Àngth
);

868 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKI
)

869 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKAC
)

870 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_CERT_SEQUENCE
)

872 #i‚de‡
OPENSSL_NO_EVP


873 
X509_INFO
 *
X509_INFO_√w
();

874 
X509_INFO_‰ì
(
X509_INFO
 *
a
);

875 *
X509_NAME_⁄ñöe
(
X509_NAME
 *
a
, *
buf
, 
size
);

877 
ASN1_vîify
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Æg‹1
,

878 
ASN1_BIT_STRING
 *
sig«tuª
, *
d©a
, 
EVP_PKEY
 *
pkey
);

880 
ASN1_dige°
(
i2d_of_void
 *
i2d
, c⁄° 
EVP_MD
 *
ty≥
, *
d©a
,

881 *
md
, *
Àn
);

883 
ASN1_sign
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Æg‹1
,

884 
X509_ALGOR
 *
Æg‹2
, 
ASN1_BIT_STRING
 *
sig«tuª
,

885 *
d©a
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
ty≥
);

887 
ASN1_ôem_dige°
(c⁄° 
ASN1_ITEM
 *
ô
, c⁄° 
EVP_MD
 *
ty≥
, *
d©a
,

888 *
md
, *
Àn
);

890 
ASN1_ôem_vîify
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
,

891 
ASN1_BIT_STRING
 *
sig«tuª
, *
d©a
, 
EVP_PKEY
 *
pkey
);

893 
ASN1_ôem_sign
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
,

894 
X509_ALGOR
 *
Æg‹2
, 
ASN1_BIT_STRING
 *
sig«tuª
, *
d©a
,

895 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
ty≥
);

896 
ASN1_ôem_sign_˘x
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
,

897 
X509_ALGOR
 *
Æg‹2
, 
ASN1_BIT_STRING
 *
sig«tuª
,

898 *
a¢
, 
EVP_MD_CTX
 *
˘x
);

901 
X509_£t_vîsi⁄
(
X509
 *
x
, 
vîsi⁄
);

902 
X509_£t_£rülNumbî
(
X509
 *
x
, 
ASN1_INTEGER
 *
£rül
);

903 
ASN1_INTEGER
 *
X509_gë_£rülNumbî
(
X509
 *
x
);

904 
X509_£t_issuî_«me
(
X509
 *
x
, 
X509_NAME
 *
«me
);

905 
X509_NAME
 *
X509_gë_issuî_«me
(
X509
 *
a
);

906 
X509_£t_subje˘_«me
(
X509
 *
x
, 
X509_NAME
 *
«me
);

907 
X509_NAME
 *
X509_gë_subje˘_«me
(
X509
 *
a
);

908 
X509_£t_nŸBef‹e
(
X509
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

909 
X509_£t_nŸA·î
(
X509
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

910 
X509_£t_pubkey
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
);

911 
EVP_PKEY
 *
X509_gë_pubkey
(
X509
 *
x
);

912 
ASN1_BIT_STRING
 *
X509_gë0_pubkey_bô°r
(c⁄° 
X509
 *
x
);

913 
X509_˚πifiˇã_ty≥
(
X509
 *
x
, 
EVP_PKEY
 *
pubkey
 );

915 
X509_REQ_£t_vîsi⁄
(
X509_REQ
 *
x
, 
vîsi⁄
);

916 
X509_REQ_£t_subje˘_«me
(
X509_REQ
 *
ªq
, 
X509_NAME
 *
«me
);

917 
X509_REQ_£t_pubkey
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
);

918 
EVP_PKEY
 *
X509_REQ_gë_pubkey
(
X509_REQ
 *
ªq
);

919 
X509_REQ_exãnsi⁄_nid
(
nid
);

920 *
X509_REQ_gë_exãnsi⁄_nids
();

921 
X509_REQ_£t_exãnsi⁄_nids
(*
nids
);

922 
STACK_OF
(
X509_EXTENSION
Ë*
X509_REQ_gë_exãnsi⁄s
(
X509_REQ
 *
ªq
);

923 
X509_REQ_add_exãnsi⁄s_nid
(
X509_REQ
 *
ªq
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
,

924 
nid
);

925 
X509_REQ_add_exãnsi⁄s
(
X509_REQ
 *
ªq
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
);

926 
X509_REQ_gë_©å_cou¡
(c⁄° 
X509_REQ
 *
ªq
);

927 
X509_REQ_gë_©å_by_NID
(c⁄° 
X509_REQ
 *
ªq
, 
nid
, 
œ°pos
);

928 
X509_REQ_gë_©å_by_OBJ
(c⁄° 
X509_REQ
 *
ªq
, 
ASN1_OBJECT
 *
obj
,

929 
œ°pos
);

930 
X509_ATTRIBUTE
 *
X509_REQ_gë_©å
(c⁄° 
X509_REQ
 *
ªq
, 
loc
);

931 
X509_ATTRIBUTE
 *
X509_REQ_dñëe_©å
(
X509_REQ
 *
ªq
, 
loc
);

932 
X509_REQ_add1_©å
(
X509_REQ
 *
ªq
, 
X509_ATTRIBUTE
 *
©å
);

933 
X509_REQ_add1_©å_by_OBJ
(
X509_REQ
 *
ªq
,

934 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

935 c⁄° *
byãs
, 
Àn
);

936 
X509_REQ_add1_©å_by_NID
(
X509_REQ
 *
ªq
,

937 
nid
, 
ty≥
,

938 c⁄° *
byãs
, 
Àn
);

939 
X509_REQ_add1_©å_by_txt
(
X509_REQ
 *
ªq
,

940 c⁄° *
©å«me
, 
ty≥
,

941 c⁄° *
byãs
, 
Àn
);

943 
X509_CRL_£t_vîsi⁄
(
X509_CRL
 *
x
, 
vîsi⁄
);

944 
X509_CRL_£t_issuî_«me
(
X509_CRL
 *
x
, 
X509_NAME
 *
«me
);

945 
X509_CRL_£t_œ°Upd©e
(
X509_CRL
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

946 
X509_CRL_£t_√xtUpd©e
(
X509_CRL
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

947 
X509_CRL_s‹t
(
X509_CRL
 *
¸l
);

949 
X509_REVOKED_£t_£rülNumbî
(
X509_REVOKED
 *
x
, 
ASN1_INTEGER
 *
£rül
);

950 
X509_REVOKED_£t_ªvoˇti⁄D©e
(
X509_REVOKED
 *
r
, 
ASN1_TIME
 *
tm
);

952 
X509_CRL
 *
X509_CRL_diff
(X509_CRL *
ba£
, X509_CRL *
√wî
,

953 
EVP_PKEY
 *
skey
, c⁄° 
EVP_MD
 *
md
, 
Êags
);

955 
X509_REQ_check_¥iv©e_key
(
X509_REQ
 *
x509
, 
EVP_PKEY
 *
pkey
);

957 
X509_check_¥iv©e_key
(
X509
 *
x509
, 
EVP_PKEY
 *
pkey
);

958 
X509_chaö_check_suôeb
(*
≥º‹_dïth
,

959 
X509
 *
x
, 
STACK_OF
(X509Ë*
chaö
,

960 
Êags
);

961 
X509_CRL_check_suôeb
(
X509_CRL
 *
¸l
, 
EVP_PKEY
 *
pk
, 
Êags
);

962 
STACK_OF
(
X509
Ë*
X509_chaö_up_ªf
(STACK_OF(X509Ë*
chaö
);

964 
X509_issuî_™d_£rül_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

965 
X509_issuî_™d_£rül_hash
(
X509
 *
a
);

967 
X509_issuî_«me_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

968 
X509_issuî_«me_hash
(
X509
 *
a
);

970 
X509_subje˘_«me_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

971 
X509_subje˘_«me_hash
(
X509
 *
x
);

973 #i‚de‡
OPENSSL_NO_MD5


974 
X509_issuî_«me_hash_ﬁd
(
X509
 *
a
);

975 
X509_subje˘_«me_hash_ﬁd
(
X509
 *
x
);

978 
X509_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

979 
X509_NAME_cmp
(c⁄° 
X509_NAME
 *
a
, c⁄° X509_NAME *
b
);

980 
X509_NAME_hash
(
X509_NAME
 *
x
);

981 
X509_NAME_hash_ﬁd
(
X509_NAME
 *
x
);

983 
X509_CRL_cmp
(c⁄° 
X509_CRL
 *
a
, c⁄° X509_CRL *
b
);

984 
X509_CRL_m©ch
(c⁄° 
X509_CRL
 *
a
, c⁄° X509_CRL *
b
);

985 #i‚de‡
OPENSSL_NO_FP_API


986 
X509_¥öt_ex_Â
(
FILE
 *
bp
, 
X509
 *
x
, 
nmÊag
,

987 
cÊag
);

988 
X509_¥öt_Â
(
FILE
 *
bp
, 
X509
 *
x
);

989 
X509_CRL_¥öt_Â
(
FILE
 *
bp
, 
X509_CRL
 *
x
);

990 
X509_REQ_¥öt_Â
(
FILE
 *
bp
, 
X509_REQ
 *
ªq
);

991 
X509_NAME_¥öt_ex_Â
(
FILE
 *
Â
, 
X509_NAME
 *
nm
, 
ödít
,

992 
Êags
);

995 #i‚de‡
OPENSSL_NO_BIO


996 
X509_NAME_¥öt
(
BIO
 *
bp
, 
X509_NAME
 *
«me
, 
oba£
);

997 
X509_NAME_¥öt_ex
(
BIO
 *
out
, 
X509_NAME
 *
nm
, 
ödít
,

998 
Êags
);

999 
X509_¥öt_ex
(
BIO
 *
bp
, 
X509
 *
x
, 
nmÊag
,

1000 
cÊag
);

1001 
X509_¥öt
(
BIO
 *
bp
, 
X509
 *
x
);

1002 
X509_oc•id_¥öt
(
BIO
 *
bp
, 
X509
 *
x
);

1003 
X509_CERT_AUX_¥öt
(
BIO
 *
bp
, 
X509_CERT_AUX
 *
x
, 
ödít
);

1004 
X509_CRL_¥öt
(
BIO
 *
bp
, 
X509_CRL
 *
x
);

1005 
X509_REQ_¥öt_ex
(
BIO
 *
bp
, 
X509_REQ
 *
x
, 
nmÊag
,

1006 
cÊag
);

1007 
X509_REQ_¥öt
(
BIO
 *
bp
, 
X509_REQ
 *
ªq
);

1010 
X509_NAME_íåy_cou¡
(
X509_NAME
 *
«me
);

1011 
X509_NAME_gë_ãxt_by_NID
(
X509_NAME
 *
«me
, 
nid
, *
buf
, 
Àn
);

1012 
X509_NAME_gë_ãxt_by_OBJ
(
X509_NAME
 *
«me
, 
ASN1_OBJECT
 *
obj
,

1013 *
buf
, 
Àn
);

1019 
X509_NAME_gë_ödex_by_NID
(
X509_NAME
 *
«me
, 
nid
, 
œ°pos
);

1020 
X509_NAME_gë_ödex_by_OBJ
(
X509_NAME
 *
«me
, 
ASN1_OBJECT
 *
obj
,

1021 
œ°pos
);

1022 
X509_NAME_ENTRY
 *
X509_NAME_gë_íåy
(
X509_NAME
 *
«me
, 
loc
);

1023 
X509_NAME_ENTRY
 *
X509_NAME_dñëe_íåy
(
X509_NAME
 *
«me
, 
loc
);

1024 
X509_NAME_add_íåy
(
X509_NAME
 *
«me
, 
X509_NAME_ENTRY
 *
√
,

1025 
loc
, 
£t
);

1026 
X509_NAME_add_íåy_by_OBJ
(
X509_NAME
 *
«me
, 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1027 *
byãs
, 
Àn
, 
loc
,

1028 
£t
);

1029 
X509_NAME_add_íåy_by_NID
(
X509_NAME
 *
«me
, 
nid
, 
ty≥
,

1030 *
byãs
, 
Àn
, 
loc
,

1031 
£t
);

1032 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_txt
(X509_NAME_ENTRY **
√
,

1033 c⁄° *
fõld
, 
ty≥
,

1034 c⁄° *
byãs
,

1035 
Àn
);

1036 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_NID
(X509_NAME_ENTRY **
√
, 
nid
,

1037 
ty≥
, *
byãs
,

1038 
Àn
);

1039 
X509_NAME_add_íåy_by_txt
(
X509_NAME
 *
«me
, c⁄° *
fõld
, 
ty≥
,

1040 c⁄° *
byãs
, 
Àn
, 
loc
,

1041 
£t
);

1042 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_OBJ
(X509_NAME_ENTRY **
√
,

1043 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1044 c⁄° *
byãs
,

1045 
Àn
);

1046 
X509_NAME_ENTRY_£t_obje˘
(
X509_NAME_ENTRY
 *
√
, 
ASN1_OBJECT
 *
obj
);

1047 
X509_NAME_ENTRY_£t_d©a
(
X509_NAME_ENTRY
 *
√
, 
ty≥
,

1048 c⁄° *
byãs
, 
Àn
);

1049 
ASN1_OBJECT
 *
X509_NAME_ENTRY_gë_obje˘
(
X509_NAME_ENTRY
 *
√
);

1050 
ASN1_STRING
 *
X509_NAME_ENTRY_gë_d©a
(
X509_NAME_ENTRY
 *
√
);

1052 
X509v3_gë_ext_cou¡
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
);

1053 
X509v3_gë_ext_by_NID
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1054 
nid
, 
œ°pos
);

1055 
X509v3_gë_ext_by_OBJ
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1056 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

1057 
X509v3_gë_ext_by_¸ôiˇl
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1058 
¸ô
, 
œ°pos
);

1059 
X509_EXTENSION
 *
X509v3_gë_ext
(c⁄° 
STACK_OF
(X509_EXTENSIONË*
x
, 
loc
);

1060 
X509_EXTENSION
 *
X509v3_dñëe_ext
(
STACK_OF
(X509_EXTENSIONË*
x
, 
loc
);

1061 
STACK_OF
(
X509_EXTENSION
Ë*
X509v3_add_ext
(STACK_OF(X509_EXTENSIONË**
x
,

1062 
X509_EXTENSION
 *
ex
, 
loc
);

1064 
X509_gë_ext_cou¡
(
X509
 *
x
);

1065 
X509_gë_ext_by_NID
(
X509
 *
x
, 
nid
, 
œ°pos
);

1066 
X509_gë_ext_by_OBJ
(
X509
 *
x
, 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

1067 
X509_gë_ext_by_¸ôiˇl
(
X509
 *
x
, 
¸ô
, 
œ°pos
);

1068 
X509_EXTENSION
 *
X509_gë_ext
(
X509
 *
x
, 
loc
);

1069 
X509_EXTENSION
 *
X509_dñëe_ext
(
X509
 *
x
, 
loc
);

1070 
X509_add_ext
(
X509
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1071 *
X509_gë_ext_d2i
(
X509
 *
x
, 
nid
, *
¸ô
, *
idx
);

1072 
X509_add1_ext_i2d
(
X509
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1073 
Êags
);

1075 
X509_CRL_gë_ext_cou¡
(
X509_CRL
 *
x
);

1076 
X509_CRL_gë_ext_by_NID
(
X509_CRL
 *
x
, 
nid
, 
œ°pos
);

1077 
X509_CRL_gë_ext_by_OBJ
(
X509_CRL
 *
x
, 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

1078 
X509_CRL_gë_ext_by_¸ôiˇl
(
X509_CRL
 *
x
, 
¸ô
, 
œ°pos
);

1079 
X509_EXTENSION
 *
X509_CRL_gë_ext
(
X509_CRL
 *
x
, 
loc
);

1080 
X509_EXTENSION
 *
X509_CRL_dñëe_ext
(
X509_CRL
 *
x
, 
loc
);

1081 
X509_CRL_add_ext
(
X509_CRL
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1082 *
X509_CRL_gë_ext_d2i
(
X509_CRL
 *
x
, 
nid
, *
¸ô
, *
idx
);

1083 
X509_CRL_add1_ext_i2d
(
X509_CRL
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1084 
Êags
);

1086 
X509_REVOKED_gë_ext_cou¡
(
X509_REVOKED
 *
x
);

1087 
X509_REVOKED_gë_ext_by_NID
(
X509_REVOKED
 *
x
, 
nid
, 
œ°pos
);

1088 
X509_REVOKED_gë_ext_by_OBJ
(
X509_REVOKED
 *
x
, 
ASN1_OBJECT
 *
obj
,

1089 
œ°pos
);

1090 
X509_REVOKED_gë_ext_by_¸ôiˇl
(
X509_REVOKED
 *
x
, 
¸ô
, 
œ°pos
);

1091 
X509_EXTENSION
 *
X509_REVOKED_gë_ext
(
X509_REVOKED
 *
x
, 
loc
);

1092 
X509_EXTENSION
 *
X509_REVOKED_dñëe_ext
(
X509_REVOKED
 *
x
, 
loc
);

1093 
X509_REVOKED_add_ext
(
X509_REVOKED
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1094 *
X509_REVOKED_gë_ext_d2i
(
X509_REVOKED
 *
x
, 
nid
, *
¸ô
, *
idx
);

1095 
X509_REVOKED_add1_ext_i2d
(
X509_REVOKED
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1096 
Êags
);

1098 
X509_EXTENSION
 *
X509_EXTENSION_¸óã_by_NID
(X509_EXTENSION **
ex
,

1099 
nid
, 
¸ô
,

1100 
ASN1_OCTET_STRING
 *
d©a
);

1101 
X509_EXTENSION
 *
X509_EXTENSION_¸óã_by_OBJ
(X509_EXTENSION **
ex
,

1102 
ASN1_OBJECT
 *
obj
, 
¸ô
,

1103 
ASN1_OCTET_STRING
 *
d©a
);

1104 
X509_EXTENSION_£t_obje˘
(
X509_EXTENSION
 *
ex
, 
ASN1_OBJECT
 *
obj
);

1105 
X509_EXTENSION_£t_¸ôiˇl
(
X509_EXTENSION
 *
ex
, 
¸ô
);

1106 
X509_EXTENSION_£t_d©a
(
X509_EXTENSION
 *
ex
, 
ASN1_OCTET_STRING
 *
d©a
);

1107 
ASN1_OBJECT
 *
X509_EXTENSION_gë_obje˘
(
X509_EXTENSION
 *
ex
);

1108 
ASN1_OCTET_STRING
 *
X509_EXTENSION_gë_d©a
(
X509_EXTENSION
 *
√
);

1109 
X509_EXTENSION_gë_¸ôiˇl
(
X509_EXTENSION
 *
ex
);

1111 
X509©_gë_©å_cou¡
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
);

1112 
X509©_gë_©å_by_NID
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
, 
nid
,

1113 
œ°pos
);

1114 
X509©_gë_©å_by_OBJ
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
,

1115 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

1116 
X509_ATTRIBUTE
 *
X509©_gë_©å
(c⁄° 
STACK_OF
(X509_ATTRIBUTEË*
x
, 
loc
);

1117 
X509_ATTRIBUTE
 *
X509©_dñëe_©å
(
STACK_OF
(X509_ATTRIBUTEË*
x
, 
loc
);

1118 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å
(STACK_OF(X509_ATTRIBUTEË**
x
,

1119 
X509_ATTRIBUTE
 *
©å
);

1120 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_OBJ
(STACK_OF(X509_ATTRIBUTE)

1121 **
x
, c⁄° 
ASN1_OBJECT
 *
obj
,

1122 
ty≥
,

1123 c⁄° *
byãs
,

1124 
Àn
);

1125 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_NID
(STACK_OF(X509_ATTRIBUTE)

1126 **
x
, 
nid
, 
ty≥
,

1127 c⁄° *
byãs
,

1128 
Àn
);

1129 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_txt
(STACK_OF(X509_ATTRIBUTE)

1130 **
x
, c⁄° *
©å«me
,

1131 
ty≥
,

1132 c⁄° *
byãs
,

1133 
Àn
);

1134 *
X509©_gë0_d©a_by_OBJ
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
, 
ASN1_OBJECT
 *
obj
,

1135 
œ°pos
, 
ty≥
);

1136 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_NID
(X509_ATTRIBUTE **
©å
, 
nid
,

1137 
©πy≥
, c⁄° *
d©a
,

1138 
Àn
);

1139 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_OBJ
(X509_ATTRIBUTE **
©å
,

1140 c⁄° 
ASN1_OBJECT
 *
obj
,

1141 
©πy≥
, c⁄° *
d©a
,

1142 
Àn
);

1143 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_txt
(X509_ATTRIBUTE **
©å
,

1144 c⁄° *
©∫ame
, 
ty≥
,

1145 c⁄° *
byãs
,

1146 
Àn
);

1147 
X509_ATTRIBUTE_£t1_obje˘
(
X509_ATTRIBUTE
 *
©å
, c⁄° 
ASN1_OBJECT
 *
obj
);

1148 
X509_ATTRIBUTE_£t1_d©a
(
X509_ATTRIBUTE
 *
©å
, 
©åty≥
,

1149 c⁄° *
d©a
, 
Àn
);

1150 *
X509_ATTRIBUTE_gë0_d©a
(
X509_ATTRIBUTE
 *
©å
, 
idx
, 
©πy≥
,

1151 *
d©a
);

1152 
X509_ATTRIBUTE_cou¡
(
X509_ATTRIBUTE
 *
©å
);

1153 
ASN1_OBJECT
 *
X509_ATTRIBUTE_gë0_obje˘
(
X509_ATTRIBUTE
 *
©å
);

1154 
ASN1_TYPE
 *
X509_ATTRIBUTE_gë0_ty≥
(
X509_ATTRIBUTE
 *
©å
, 
idx
);

1156 
EVP_PKEY_gë_©å_cou¡
(c⁄° 
EVP_PKEY
 *
key
);

1157 
EVP_PKEY_gë_©å_by_NID
(c⁄° 
EVP_PKEY
 *
key
, 
nid
, 
œ°pos
);

1158 
EVP_PKEY_gë_©å_by_OBJ
(c⁄° 
EVP_PKEY
 *
key
, 
ASN1_OBJECT
 *
obj
,

1159 
œ°pos
);

1160 
X509_ATTRIBUTE
 *
EVP_PKEY_gë_©å
(c⁄° 
EVP_PKEY
 *
key
, 
loc
);

1161 
X509_ATTRIBUTE
 *
EVP_PKEY_dñëe_©å
(
EVP_PKEY
 *
key
, 
loc
);

1162 
EVP_PKEY_add1_©å
(
EVP_PKEY
 *
key
, 
X509_ATTRIBUTE
 *
©å
);

1163 
EVP_PKEY_add1_©å_by_OBJ
(
EVP_PKEY
 *
key
,

1164 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1165 c⁄° *
byãs
, 
Àn
);

1166 
EVP_PKEY_add1_©å_by_NID
(
EVP_PKEY
 *
key
,

1167 
nid
, 
ty≥
,

1168 c⁄° *
byãs
, 
Àn
);

1169 
EVP_PKEY_add1_©å_by_txt
(
EVP_PKEY
 *
key
,

1170 c⁄° *
©å«me
, 
ty≥
,

1171 c⁄° *
byãs
, 
Àn
);

1173 
X509_vîify_˚π
(
X509_STORE_CTX
 *
˘x
);

1176 
X509
 *
X509_föd_by_issuî_™d_£rül
(
STACK_OF
(X509Ë*
sk
, 
X509_NAME
 *
«me
,

1177 
ASN1_INTEGER
 *
£rül
);

1178 
X509
 *
X509_föd_by_subje˘
(
STACK_OF
(X509Ë*
sk
, 
X509_NAME
 *
«me
);

1180 
DECLARE_ASN1_FUNCTIONS
(
PBEPARAM
)

1181 
DECLARE_ASN1_FUNCTIONS
(
PBE2PARAM
)

1182 
DECLARE_ASN1_FUNCTIONS
(
PBKDF2PARAM
)

1184 
PKCS5_pbe_£t0_Æg‹
(
X509_ALGOR
 *
Æg‹
, 
Æg
, 
ôî
,

1185 c⁄° *
ß…
, 
ß…Àn
);

1187 
X509_ALGOR
 *
PKCS5_pbe_£t
(
Æg
, 
ôî
,

1188 c⁄° *
ß…
, 
ß…Àn
);

1189 
X509_ALGOR
 *
PKCS5_pbe2_£t
(c⁄° 
EVP_CIPHER
 *
cùhî
, 
ôî
,

1190 *
ß…
, 
ß…Àn
);

1191 
X509_ALGOR
 *
PKCS5_pbe2_£t_iv
(c⁄° 
EVP_CIPHER
 *
cùhî
, 
ôî
,

1192 *
ß…
, 
ß…Àn
,

1193 *
aiv
, 
¥f_nid
);

1195 
X509_ALGOR
 *
PKCS5_pbkdf2_£t
(
ôî
, *
ß…
, 
ß…Àn
,

1196 
¥f_nid
, 
keyÀn
);

1200 
DECLARE_ASN1_FUNCTIONS
(
PKCS8_PRIV_KEY_INFO
)

1202 
EVP_PKEY
 *
EVP_PKCS82PKEY
(
PKCS8_PRIV_KEY_INFO
 *
p8
);

1203 
PKCS8_PRIV_KEY_INFO
 *
EVP_PKEY2PKCS8
(
EVP_PKEY
 *
pkey
);

1204 
PKCS8_PRIV_KEY_INFO
 *
EVP_PKEY2PKCS8_brokí
(
EVP_PKEY
 *
pkey
, 
brokí
);

1205 
PKCS8_PRIV_KEY_INFO
 *
PKCS8_£t_brokí
(PKCS8_PRIV_KEY_INFO *
p8
, 
brokí
);

1207 
PKCS8_pkey_£t0
(
PKCS8_PRIV_KEY_INFO
 *
¥iv
, 
ASN1_OBJECT
 *
aobj
,

1208 
vîsi⁄
, 
±y≥
, *
pvÆ
,

1209 *
≥nc
, 
≥n˛í
);

1210 
PKCS8_pkey_gë0
(
ASN1_OBJECT
 **
µkÆg
,

1211 c⁄° **
pk
, *
µkÀn
,

1212 
X509_ALGOR
 **
∑
, 
PKCS8_PRIV_KEY_INFO
 *
p8
);

1214 
X509_PUBKEY_£t0_∑øm
(
X509_PUBKEY
 *
pub
, 
ASN1_OBJECT
 *
aobj
,

1215 
±y≥
, *
pvÆ
,

1216 *
≥nc
, 
≥n˛í
);

1217 
X509_PUBKEY_gë0_∑øm
(
ASN1_OBJECT
 **
µkÆg
,

1218 c⁄° **
pk
, *
µkÀn
,

1219 
X509_ALGOR
 **
∑
, 
X509_PUBKEY
 *
pub
);

1221 
X509_check_åu°
(
X509
 *
x
, 
id
, 
Êags
);

1222 
X509_TRUST_gë_cou¡
();

1223 
X509_TRUST
 *
X509_TRUST_gë0
(
idx
);

1224 
X509_TRUST_gë_by_id
(
id
);

1225 
X509_TRUST_add
(
id
, 
Êags
, (*
ck
Ë(
X509_TRUST
 *, 
X509
 *, ),

1226 *
«me
, 
¨g1
, *
¨g2
);

1227 
X509_TRUST_˛ónup
();

1228 
X509_TRUST_gë_Êags
(
X509_TRUST
 *
xp
);

1229 *
X509_TRUST_gë0_«me
(
X509_TRUST
 *
xp
);

1230 
X509_TRUST_gë_åu°
(
X509_TRUST
 *
xp
);

1237 
ERR_lﬂd_X509_°rögs
();

1242 
	#X509_F_ADD_CERT_DIR
 100

	)

1243 
	#X509_F_BY_FILE_CTRL
 101

	)

1244 
	#X509_F_CHECK_POLICY
 145

	)

1245 
	#X509_F_DIR_CTRL
 102

	)

1246 
	#X509_F_GET_CERT_BY_SUBJECT
 103

	)

1247 
	#X509_F_NETSCAPE_SPKI_B64_DECODE
 129

	)

1248 
	#X509_F_NETSCAPE_SPKI_B64_ENCODE
 130

	)

1249 
	#X509_F_X509AT_ADD1_ATTR
 135

	)

1250 
	#X509_F_X509V3_ADD_EXT
 104

	)

1251 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_NID
 136

	)

1252 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ
 137

	)

1253 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_TXT
 140

	)

1254 
	#X509_F_X509_ATTRIBUTE_GET0_DATA
 139

	)

1255 
	#X509_F_X509_ATTRIBUTE_SET1_DATA
 138

	)

1256 
	#X509_F_X509_CHECK_PRIVATE_KEY
 128

	)

1257 
	#X509_F_X509_CRL_DIFF
 105

	)

1258 
	#X509_F_X509_CRL_PRINT_FP
 147

	)

1259 
	#X509_F_X509_EXTENSION_CREATE_BY_NID
 108

	)

1260 
	#X509_F_X509_EXTENSION_CREATE_BY_OBJ
 109

	)

1261 
	#X509_F_X509_GET_PUBKEY_PARAMETERS
 110

	)

1262 
	#X509_F_X509_LOAD_CERT_CRL_FILE
 132

	)

1263 
	#X509_F_X509_LOAD_CERT_FILE
 111

	)

1264 
	#X509_F_X509_LOAD_CRL_FILE
 112

	)

1265 
	#X509_F_X509_NAME_ADD_ENTRY
 113

	)

1266 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_NID
 114

	)

1267 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_TXT
 131

	)

1268 
	#X509_F_X509_NAME_ENTRY_SET_OBJECT
 115

	)

1269 
	#X509_F_X509_NAME_ONELINE
 116

	)

1270 
	#X509_F_X509_NAME_PRINT
 117

	)

1271 
	#X509_F_X509_PRINT_EX_FP
 118

	)

1272 
	#X509_F_X509_PUBKEY_GET
 119

	)

1273 
	#X509_F_X509_PUBKEY_SET
 120

	)

1274 
	#X509_F_X509_REQ_CHECK_PRIVATE_KEY
 144

	)

1275 
	#X509_F_X509_REQ_PRINT_EX
 121

	)

1276 
	#X509_F_X509_REQ_PRINT_FP
 122

	)

1277 
	#X509_F_X509_REQ_TO_X509
 123

	)

1278 
	#X509_F_X509_STORE_ADD_CERT
 124

	)

1279 
	#X509_F_X509_STORE_ADD_CRL
 125

	)

1280 
	#X509_F_X509_STORE_CTX_GET1_ISSUER
 146

	)

1281 
	#X509_F_X509_STORE_CTX_INIT
 143

	)

1282 
	#X509_F_X509_STORE_CTX_NEW
 142

	)

1283 
	#X509_F_X509_STORE_CTX_PURPOSE_INHERIT
 134

	)

1284 
	#X509_F_X509_TO_X509_REQ
 126

	)

1285 
	#X509_F_X509_TRUST_ADD
 133

	)

1286 
	#X509_F_X509_TRUST_SET
 141

	)

1287 
	#X509_F_X509_VERIFY_CERT
 127

	)

1290 
	#X509_R_AKID_MISMATCH
 110

	)

1291 
	#X509_R_BAD_X509_FILETYPE
 100

	)

1292 
	#X509_R_BASE64_DECODE_ERROR
 118

	)

1293 
	#X509_R_CANT_CHECK_DH_KEY
 114

	)

1294 
	#X509_R_CERT_ALREADY_IN_HASH_TABLE
 101

	)

1295 
	#X509_R_CRL_ALREADY_DELTA
 127

	)

1296 
	#X509_R_CRL_VERIFY_FAILURE
 131

	)

1297 
	#X509_R_ERR_ASN1_LIB
 102

	)

1298 
	#X509_R_IDP_MISMATCH
 128

	)

1299 
	#X509_R_INVALID_DIRECTORY
 113

	)

1300 
	#X509_R_INVALID_FIELD_NAME
 119

	)

1301 
	#X509_R_INVALID_TRUST
 123

	)

1302 
	#X509_R_ISSUER_MISMATCH
 129

	)

1303 
	#X509_R_KEY_TYPE_MISMATCH
 115

	)

1304 
	#X509_R_KEY_VALUES_MISMATCH
 116

	)

1305 
	#X509_R_LOADING_CERT_DIR
 103

	)

1306 
	#X509_R_LOADING_DEFAULTS
 104

	)

1307 
	#X509_R_METHOD_NOT_SUPPORTED
 124

	)

1308 
	#X509_R_NEWER_CRL_NOT_NEWER
 132

	)

1309 
	#X509_R_NO_CERT_SET_FOR_US_TO_VERIFY
 105

	)

1310 
	#X509_R_NO_CRL_NUMBER
 130

	)

1311 
	#X509_R_PUBLIC_KEY_DECODE_ERROR
 125

	)

1312 
	#X509_R_PUBLIC_KEY_ENCODE_ERROR
 126

	)

1313 
	#X509_R_SHOULD_RETRY
 106

	)

1314 
	#X509_R_UNABLE_TO_FIND_PARAMETERS_IN_CHAIN
 107

	)

1315 
	#X509_R_UNABLE_TO_GET_CERTS_PUBLIC_KEY
 108

	)

1316 
	#X509_R_UNKNOWN_KEY_TYPE
 117

	)

1317 
	#X509_R_UNKNOWN_NID
 109

	)

1318 
	#X509_R_UNKNOWN_PURPOSE_ID
 121

	)

1319 
	#X509_R_UNKNOWN_TRUST_ID
 120

	)

1320 
	#X509_R_UNSUPPORTED_ALGORITHM
 111

	)

1321 
	#X509_R_WRONG_LOOKUP_TYPE
 112

	)

1322 
	#X509_R_WRONG_TYPE
 122

	)

1324 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509_vfy.h

59 #i‚de‡
HEADER_X509_H


60 
	~<›ís¶/x509.h
>

67 #i‚de‡
HEADER_X509_VFY_H


68 
	#HEADER_X509_VFY_H


	)

70 
	~<›ís¶/›ís¶c⁄f.h
>

71 #i‚de‡
OPENSSL_NO_LHASH


72 
	~<›ís¶/lhash.h
>

74 
	~<›ís¶/bio.h
>

75 
	~<›ís¶/¸y±o.h
>

76 
	~<›ís¶/symhacks.h
>

78 #ifde‡ 
__˝lu•lus


84 
	sx509_hash_dú_°
 {

85 
num_dús
;

86 **
dús
;

87 *
dús_ty≥
;

88 
num_dús_Ælo˚d
;

89 } 
	tX509_HASH_DIR_CTX
;

92 
	sx509_fûe_°
 {

93 
	gnum_∑ths
;

94 
	gnum_Ælo˚d
;

95 **
	g∑ths
;

96 *
	g∑th_ty≥
;

97 } 
	tX509_CERT_FILE_CTX
;

117 
	#X509_LU_RETRY
 -1

	)

118 
	#X509_LU_FAIL
 0

	)

119 
	#X509_LU_X509
 1

	)

120 
	#X509_LU_CRL
 2

	)

121 
	#X509_LU_PKEY
 3

	)

123 
	sx509_obje˘_°
 {

125 
	gty≥
;

127 *
	g±r
;

128 
X509
 *
	gx509
;

129 
X509_CRL
 *
	g¸l
;

130 
EVP_PKEY
 *
	gpkey
;

131 } 
	gd©a
;

132 } 
	tX509_OBJECT
;

134 
x509_lookup_°
 
	tX509_LOOKUP
;

136 
DECLARE_STACK_OF
(
X509_LOOKUP
)

137 
DECLARE_STACK_OF
(
X509_OBJECT
)

140 
	sx509_lookup_mëhod_°
 {

141 c⁄° *
	g«me
;

142 (*
	g√w_ôem
Ë(
X509_LOOKUP
 *
	g˘x
);

143 (*
	g‰ì
Ë(
X509_LOOKUP
 *
	g˘x
);

144 (*
	göô
Ë(
X509_LOOKUP
 *
	g˘x
);

145 (*
	gshutdown
Ë(
X509_LOOKUP
 *
	g˘x
);

146 (*
	g˘æ
Ë(
X509_LOOKUP
 *
	g˘x
, 
	gcmd
, c⁄° *
	g¨gc
, 
	g¨gl
,

147 **
	gªt
);

148 (*
	ggë_by_subje˘
Ë(
X509_LOOKUP
 *
	g˘x
, 
	gty≥
, 
X509_NAME
 *
	g«me
,

149 
X509_OBJECT
 *
	gªt
);

150 (*
	ggë_by_issuî_£rül
Ë(
X509_LOOKUP
 *
	g˘x
, 
	gty≥
, 
X509_NAME
 *
	g«me
,

151 
ASN1_INTEGER
 *
	g£rül
, 
X509_OBJECT
 *
	gªt
);

152 (*
	ggë_by_fögî¥öt
Ë(
X509_LOOKUP
 *
	g˘x
, 
	gty≥
,

153 *
	gbyãs
, 
	gÀn
,

154 
X509_OBJECT
 *
	gªt
);

155 (*
	ggë_by_Æüs
Ë(
X509_LOOKUP
 *
	g˘x
, 
	gty≥
, *
	g°r
, 
	gÀn
,

156 
X509_OBJECT
 *
	gªt
);

157 } 
	tX509_LOOKUP_METHOD
;

159 
X509_VERIFY_PARAM_ID_°
 
	tX509_VERIFY_PARAM_ID
;

167 
	sX509_VERIFY_PARAM_°
 {

168 *
	g«me
;

169 
time_t
 
	gcheck_time
;

170 
	göh_Êags
;

171 
	gÊags
;

172 
	gpuΩo£
;

173 
	gåu°
;

174 
	gdïth
;

175 
STACK_OF
(
ASN1_OBJECT
Ë*
	gpﬁicõs
;

176 
X509_VERIFY_PARAM_ID
 *
	gid
;

177 } 
	tX509_VERIFY_PARAM
;

179 
DECLARE_STACK_OF
(
X509_VERIFY_PARAM
)

186 
	sx509_°‹e_°
 {

188 
	gˇche
;

189 
STACK_OF
(
X509_OBJECT
Ë*
	gobjs
;

191 
STACK_OF
(
X509_LOOKUP
Ë*
	ggë_˚π_mëhods
;

192 
X509_VERIFY_PARAM
 *
	g∑øm
;

195 (*
	gvîify
Ë(
X509_STORE_CTX
 *
	g˘x
);

197 (*
	gvîify_cb
Ë(
	gok
, 
X509_STORE_CTX
 *
	g˘x
);

199 (*
	ggë_issuî
Ë(
X509
 **
	gissuî
, 
X509_STORE_CTX
 *
	g˘x
, X509 *
	gx
);

201 (*
	gcheck_issued
Ë(
X509_STORE_CTX
 *
	g˘x
, 
X509
 *
	gx
, X509 *
	gissuî
);

203 (*
	gcheck_ªvoˇti⁄
Ë(
X509_STORE_CTX
 *
	g˘x
);

205 (*
	ggë_¸l
Ë(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 **
	g¸l
, 
X509
 *
	gx
);

207 (*
	gcheck_¸l
Ë(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
);

209 (*
	g˚π_¸l
Ë(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
, 
X509
 *
	gx
);

210 
STACK_OF
(
X509
Ë*(*
	glookup_˚πs
Ë(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

211 
STACK_OF
(
X509_CRL
Ë*(*
	glookup_¸ls
Ë(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

212 (*
	g˛ónup
Ë(
X509_STORE_CTX
 *
	g˘x
);

213 
CRYPTO_EX_DATA
 
	gex_d©a
;

214 
	gª„ªn˚s
;

217 
X509_STORE_£t_dïth
(
X509_STORE
 *
°‹e
, 
dïth
);

219 
	#X509_STORE_£t_vîify_cb_func
(
˘x
,
func
Ë((˘x)->
vîify_cb
=(func))

	)

220 
	#X509_STORE_£t_vîify_func
(
˘x
,
func
Ë((˘x)->
vîify
=(func))

	)

223 
	sx509_lookup_°
 {

224 
	göô
;

225 
	gskù
;

226 
X509_LOOKUP_METHOD
 *
	gmëhod
;

227 *
	gmëhod_d©a
;

228 
X509_STORE
 *
	g°‹e_˘x
;

236 
	sx509_°‹e_˘x_°
 {

237 
X509_STORE
 *
	g˘x
;

239 
	gcuºít_mëhod
;

242 
X509
 *
	g˚π
;

244 
STACK_OF
(
X509
Ë*
	gu¡ru°ed
;

246 
STACK_OF
(
X509_CRL
Ë*
	g¸ls
;

247 
X509_VERIFY_PARAM
 *
	g∑øm
;

249 *
	gŸhî_˘x
;

252 (*
	gvîify
Ë(
X509_STORE_CTX
 *
	g˘x
);

254 (*
	gvîify_cb
Ë(
	gok
, 
X509_STORE_CTX
 *
	g˘x
);

256 (*
	ggë_issuî
Ë(
X509
 **
	gissuî
, 
X509_STORE_CTX
 *
	g˘x
, X509 *
	gx
);

258 (*
	gcheck_issued
Ë(
X509_STORE_CTX
 *
	g˘x
, 
X509
 *
	gx
, X509 *
	gissuî
);

260 (*
	gcheck_ªvoˇti⁄
Ë(
X509_STORE_CTX
 *
	g˘x
);

262 (*
	ggë_¸l
Ë(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 **
	g¸l
, 
X509
 *
	gx
);

264 (*
	gcheck_¸l
Ë(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
);

266 (*
	g˚π_¸l
Ë(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
, 
X509
 *
	gx
);

267 (*
	gcheck_pﬁicy
Ë(
X509_STORE_CTX
 *
	g˘x
);

268 
STACK_OF
(
X509
Ë*(*
	glookup_˚πs
Ë(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

269 
STACK_OF
(
X509_CRL
Ë*(*
	glookup_¸ls
Ë(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

270 (*
	g˛ónup
Ë(
X509_STORE_CTX
 *
	g˘x
);

273 
	gvÆid
;

275 
	gœ°_u¡ru°ed
;

277 
STACK_OF
(
X509
Ë*
	gchaö
;

279 
X509_POLICY_TREE
 *
	gåì
;

281 
	gex∂icô_pﬁicy
;

283 
	gîr‹_dïth
;

284 
	gîr‹
;

285 
X509
 *
	gcuºít_˚π
;

287 
X509
 *
	gcuºít_issuî
;

289 
X509_CRL
 *
	gcuºít_¸l
;

291 
	gcuºít_¸l_sc‹e
;

293 
	gcuºít_ªas⁄s
;

295 
X509_STORE_CTX
 *
	g∑ª¡
;

296 
CRYPTO_EX_DATA
 
	gex_d©a
;

299 
X509_STORE_CTX_£t_dïth
(
X509_STORE_CTX
 *
˘x
, 
dïth
);

301 
	#X509_STORE_CTX_£t_≠p_d©a
(
˘x
,
d©a
) \

302 
	`X509_STORE_CTX_£t_ex_d©a
(
˘x
,0,
d©a
)

	)

303 
	#X509_STORE_CTX_gë_≠p_d©a
(
˘x
) \

304 
	`X509_STORE_CTX_gë_ex_d©a
(
˘x
,0)

	)

306 
	#X509_L_FILE_LOAD
 1

	)

307 
	#X509_L_ADD_DIR
 2

	)

309 
	#X509_LOOKUP_lﬂd_fûe
(
x
,
«me
,
ty≥
) \

310 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_FILE_LOAD
,(
«me
),()(
ty≥
),
NULL
)

	)

312 
	#X509_LOOKUP_add_dú
(
x
,
«me
,
ty≥
) \

313 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_ADD_DIR
,(
«me
),()(
ty≥
),
NULL
)

	)

315 
	#X509_V_OK
 0

	)

316 
	#X509_V_ERR_UNSPECIFIED
 1

	)

318 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT
 2

	)

319 
	#X509_V_ERR_UNABLE_TO_GET_CRL
 3

	)

320 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE
 4

	)

321 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE
 5

	)

322 
	#X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY
 6

	)

323 
	#X509_V_ERR_CERT_SIGNATURE_FAILURE
 7

	)

324 
	#X509_V_ERR_CRL_SIGNATURE_FAILURE
 8

	)

325 
	#X509_V_ERR_CERT_NOT_YET_VALID
 9

	)

326 
	#X509_V_ERR_CERT_HAS_EXPIRED
 10

	)

327 
	#X509_V_ERR_CRL_NOT_YET_VALID
 11

	)

328 
	#X509_V_ERR_CRL_HAS_EXPIRED
 12

	)

329 
	#X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD
 13

	)

330 
	#X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD
 14

	)

331 
	#X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD
 15

	)

332 
	#X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD
 16

	)

333 
	#X509_V_ERR_OUT_OF_MEM
 17

	)

334 
	#X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
 18

	)

335 
	#X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN
 19

	)

336 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY
 20

	)

337 
	#X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE
 21

	)

338 
	#X509_V_ERR_CERT_CHAIN_TOO_LONG
 22

	)

339 
	#X509_V_ERR_CERT_REVOKED
 23

	)

340 
	#X509_V_ERR_INVALID_CA
 24

	)

341 
	#X509_V_ERR_PATH_LENGTH_EXCEEDED
 25

	)

342 
	#X509_V_ERR_INVALID_PURPOSE
 26

	)

343 
	#X509_V_ERR_CERT_UNTRUSTED
 27

	)

344 
	#X509_V_ERR_CERT_REJECTED
 28

	)

346 
	#X509_V_ERR_SUBJECT_ISSUER_MISMATCH
 29

	)

347 
	#X509_V_ERR_AKID_SKID_MISMATCH
 30

	)

348 
	#X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH
 31

	)

349 
	#X509_V_ERR_KEYUSAGE_NO_CERTSIGN
 32

	)

351 
	#X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER
 33

	)

352 
	#X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION
 34

	)

353 
	#X509_V_ERR_KEYUSAGE_NO_CRL_SIGN
 35

	)

354 
	#X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION
 36

	)

355 
	#X509_V_ERR_INVALID_NON_CA
 37

	)

356 
	#X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED
 38

	)

357 
	#X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE
 39

	)

358 
	#X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED
 40

	)

360 
	#X509_V_ERR_INVALID_EXTENSION
 41

	)

361 
	#X509_V_ERR_INVALID_POLICY_EXTENSION
 42

	)

362 
	#X509_V_ERR_NO_EXPLICIT_POLICY
 43

	)

363 
	#X509_V_ERR_DIFFERENT_CRL_SCOPE
 44

	)

364 
	#X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE
 45

	)

366 
	#X509_V_ERR_UNNESTED_RESOURCE
 46

	)

368 
	#X509_V_ERR_PERMITTED_VIOLATION
 47

	)

369 
	#X509_V_ERR_EXCLUDED_VIOLATION
 48

	)

370 
	#X509_V_ERR_SUBTREE_MINMAX
 49

	)

371 
	#X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE
 51

	)

372 
	#X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX
 52

	)

373 
	#X509_V_ERR_UNSUPPORTED_NAME_SYNTAX
 53

	)

374 
	#X509_V_ERR_CRL_PATH_VALIDATION_ERROR
 54

	)

377 
	#X509_V_ERR_SUITE_B_INVALID_VERSION
 56

	)

378 
	#X509_V_ERR_SUITE_B_INVALID_ALGORITHM
 57

	)

379 
	#X509_V_ERR_SUITE_B_INVALID_CURVE
 58

	)

380 
	#X509_V_ERR_SUITE_B_INVALID_SIGNATURE_ALGORITHM
 59

	)

381 
	#X509_V_ERR_SUITE_B_LOS_NOT_ALLOWED
 60

	)

382 
	#X509_V_ERR_SUITE_B_CANNOT_SIGN_P_384_WITH_P_256
 61

	)

385 
	#X509_V_ERR_HOSTNAME_MISMATCH
 62

	)

386 
	#X509_V_ERR_EMAIL_MISMATCH
 63

	)

387 
	#X509_V_ERR_IP_ADDRESS_MISMATCH
 64

	)

390 
	#X509_V_ERR_APPLICATION_VERIFICATION
 50

	)

395 
	#X509_V_FLAG_CB_ISSUER_CHECK
 0x1

	)

397 
	#X509_V_FLAG_USE_CHECK_TIME
 0x2

	)

399 
	#X509_V_FLAG_CRL_CHECK
 0x4

	)

401 
	#X509_V_FLAG_CRL_CHECK_ALL
 0x8

	)

403 
	#X509_V_FLAG_IGNORE_CRITICAL
 0x10

	)

405 
	#X509_V_FLAG_X509_STRICT
 0x20

	)

407 
	#X509_V_FLAG_ALLOW_PROXY_CERTS
 0x40

	)

409 
	#X509_V_FLAG_POLICY_CHECK
 0x80

	)

411 
	#X509_V_FLAG_EXPLICIT_POLICY
 0x100

	)

413 
	#X509_V_FLAG_INHIBIT_ANY
 0x200

	)

415 
	#X509_V_FLAG_INHIBIT_MAP
 0x400

	)

417 
	#X509_V_FLAG_NOTIFY_POLICY
 0x800

	)

419 
	#X509_V_FLAG_EXTENDED_CRL_SUPPORT
 0x1000

	)

421 
	#X509_V_FLAG_USE_DELTAS
 0x2000

	)

423 
	#X509_V_FLAG_CHECK_SS_SIGNATURE
 0x4000

	)

425 
	#X509_V_FLAG_TRUSTED_FIRST
 0x8000

	)

427 
	#X509_V_FLAG_SUITEB_128_LOS_ONLY
 0x10000

	)

429 
	#X509_V_FLAG_SUITEB_192_LOS
 0x20000

	)

431 
	#X509_V_FLAG_SUITEB_128_LOS
 0x30000

	)

434 
	#X509_V_FLAG_PARTIAL_CHAIN
 0x80000

	)

440 
	#X509_V_FLAG_NO_ALT_CHAINS
 0x100000

	)

442 
	#X509_VP_FLAG_DEFAULT
 0x1

	)

443 
	#X509_VP_FLAG_OVERWRITE
 0x2

	)

444 
	#X509_VP_FLAG_RESET_FLAGS
 0x4

	)

445 
	#X509_VP_FLAG_LOCKED
 0x8

	)

446 
	#X509_VP_FLAG_ONCE
 0x10

	)

449 
	#X509_V_FLAG_POLICY_MASK
 (
X509_V_FLAG_POLICY_CHECK
 \

450 | 
X509_V_FLAG_EXPLICIT_POLICY
 \

451 | 
X509_V_FLAG_INHIBIT_ANY
 \

452 | 
X509_V_FLAG_INHIBIT_MAP
)

	)

454 
X509_OBJECT_idx_by_subje˘
(
STACK_OF
(
X509_OBJECT
Ë*
h
, 
ty≥
,

455 
X509_NAME
 *
«me
);

456 
X509_OBJECT
 *
X509_OBJECT_ªåõve_by_subje˘
(
STACK_OF
(X509_OBJECTË*
h
,

457 
ty≥
, 
X509_NAME
 *
«me
);

458 
X509_OBJECT
 *
X509_OBJECT_ªåõve_m©ch
(
STACK_OF
(X509_OBJECTË*
h
,

459 
X509_OBJECT
 *
x
);

460 
X509_OBJECT_up_ªf_cou¡
(
X509_OBJECT
 *
a
);

461 
X509_OBJECT_‰ì_c⁄ã¡s
(
X509_OBJECT
 *
a
);

462 
X509_STORE
 *
X509_STORE_√w
();

463 
X509_STORE_‰ì
(
X509_STORE
 *
v
);

465 
STACK_OF
(
X509
Ë*
X509_STORE_gë1_˚πs
(
X509_STORE_CTX
 *
°
, 
X509_NAME
 *
nm
);

466 
STACK_OF
(
X509_CRL
Ë*
X509_STORE_gë1_¸ls
(
X509_STORE_CTX
 *
°
, 
X509_NAME
 *
nm
);

467 
X509_STORE_£t_Êags
(
X509_STORE
 *
˘x
, 
Êags
);

468 
X509_STORE_£t_puΩo£
(
X509_STORE
 *
˘x
, 
puΩo£
);

469 
X509_STORE_£t_åu°
(
X509_STORE
 *
˘x
, 
åu°
);

470 
X509_STORE_£t1_∑øm
(
X509_STORE
 *
˘x
, 
X509_VERIFY_PARAM
 *
pm
);

472 
X509_STORE_£t_vîify_cb
(
X509_STORE
 *
˘x
,

473 (*
vîify_cb
Ë(, 
X509_STORE_CTX
 *));

475 
X509_STORE_£t_lookup_¸ls_cb
(
X509_STORE
 *
˘x
,

476 
STACK_OF
(
X509_CRL
Ë*(*
cb
Ë(
X509_STORE_CTX


477 *
˘x
,

478 
X509_NAME
 *
nm
));

480 
X509_STORE_CTX
 *
X509_STORE_CTX_√w
();

482 
X509_STORE_CTX_gë1_issuî
(
X509
 **
issuî
, 
X509_STORE_CTX
 *
˘x
, X509 *
x
);

484 
X509_STORE_CTX_‰ì
(
X509_STORE_CTX
 *
˘x
);

485 
X509_STORE_CTX_öô
(
X509_STORE_CTX
 *
˘x
, 
X509_STORE
 *
°‹e
,

486 
X509
 *
x509
, 
STACK_OF
(X509Ë*
chaö
);

487 
X509_STORE_CTX_åu°ed_°ack
(
X509_STORE_CTX
 *
˘x
, 
STACK_OF
(
X509
Ë*
sk
);

488 
X509_STORE_CTX_˛ónup
(
X509_STORE_CTX
 *
˘x
);

490 
X509_STORE
 *
X509_STORE_CTX_gë0_°‹e
(
X509_STORE_CTX
 *
˘x
);

492 
X509_LOOKUP
 *
X509_STORE_add_lookup
(
X509_STORE
 *
v
, 
X509_LOOKUP_METHOD
 *
m
);

494 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_hash_dú
();

495 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_fûe
();

497 
X509_STORE_add_˚π
(
X509_STORE
 *
˘x
, 
X509
 *
x
);

498 
X509_STORE_add_¸l
(
X509_STORE
 *
˘x
, 
X509_CRL
 *
x
);

500 
X509_STORE_gë_by_subje˘
(
X509_STORE_CTX
 *
vs
, 
ty≥
, 
X509_NAME
 *
«me
,

501 
X509_OBJECT
 *
ªt
);

503 
X509_LOOKUP_˘æ
(
X509_LOOKUP
 *
˘x
, 
cmd
, c⁄° *
¨gc
,

504 
¨gl
, **
ªt
);

506 #i‚de‡
OPENSSL_NO_STDIO


507 
X509_lﬂd_˚π_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

508 
X509_lﬂd_¸l_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

509 
X509_lﬂd_˚π_¸l_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

512 
X509_LOOKUP
 *
X509_LOOKUP_√w
(
X509_LOOKUP_METHOD
 *
mëhod
);

513 
X509_LOOKUP_‰ì
(
X509_LOOKUP
 *
˘x
);

514 
X509_LOOKUP_öô
(
X509_LOOKUP
 *
˘x
);

515 
X509_LOOKUP_by_subje˘
(
X509_LOOKUP
 *
˘x
, 
ty≥
, 
X509_NAME
 *
«me
,

516 
X509_OBJECT
 *
ªt
);

517 
X509_LOOKUP_by_issuî_£rül
(
X509_LOOKUP
 *
˘x
, 
ty≥
, 
X509_NAME
 *
«me
,

518 
ASN1_INTEGER
 *
£rül
, 
X509_OBJECT
 *
ªt
);

519 
X509_LOOKUP_by_fögî¥öt
(
X509_LOOKUP
 *
˘x
, 
ty≥
,

520 *
byãs
, 
Àn
,

521 
X509_OBJECT
 *
ªt
);

522 
X509_LOOKUP_by_Æüs
(
X509_LOOKUP
 *
˘x
, 
ty≥
, *
°r
, 
Àn
,

523 
X509_OBJECT
 *
ªt
);

524 
X509_LOOKUP_shutdown
(
X509_LOOKUP
 *
˘x
);

526 #i‚de‡
OPENSSL_NO_STDIO


527 
X509_STORE_lﬂd_loˇti⁄s
(
X509_STORE
 *
˘x
,

528 c⁄° *
fûe
, c⁄° *
dú
);

529 
X509_STORE_£t_deÁu…_∑ths
(
X509_STORE
 *
˘x
);

532 
X509_STORE_CTX_gë_ex_√w_ödex
(
¨gl
, *
¨gp
,

533 
CRYPTO_EX_√w
 *
√w_func
,

534 
CRYPTO_EX_dup
 *
dup_func
,

535 
CRYPTO_EX_‰ì
 *
‰ì_func
);

536 
X509_STORE_CTX_£t_ex_d©a
(
X509_STORE_CTX
 *
˘x
, 
idx
, *
d©a
);

537 *
X509_STORE_CTX_gë_ex_d©a
(
X509_STORE_CTX
 *
˘x
, 
idx
);

538 
X509_STORE_CTX_gë_îr‹
(
X509_STORE_CTX
 *
˘x
);

539 
X509_STORE_CTX_£t_îr‹
(
X509_STORE_CTX
 *
˘x
, 
s
);

540 
X509_STORE_CTX_gë_îr‹_dïth
(
X509_STORE_CTX
 *
˘x
);

541 
X509
 *
X509_STORE_CTX_gë_cuºít_˚π
(
X509_STORE_CTX
 *
˘x
);

542 
X509
 *
X509_STORE_CTX_gë0_cuºít_issuî
(
X509_STORE_CTX
 *
˘x
);

543 
X509_CRL
 *
X509_STORE_CTX_gë0_cuºít_¸l
(
X509_STORE_CTX
 *
˘x
);

544 
X509_STORE_CTX
 *
X509_STORE_CTX_gë0_∑ª¡_˘x
(X509_STORE_CTX *
˘x
);

545 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë_chaö
(
X509_STORE_CTX
 *
˘x
);

546 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë1_chaö
(
X509_STORE_CTX
 *
˘x
);

547 
X509_STORE_CTX_£t_˚π
(
X509_STORE_CTX
 *
c
, 
X509
 *
x
);

548 
X509_STORE_CTX_£t_chaö
(
X509_STORE_CTX
 *
c
, 
STACK_OF
(
X509
Ë*
sk
);

549 
X509_STORE_CTX_£t0_¸ls
(
X509_STORE_CTX
 *
c
, 
STACK_OF
(
X509_CRL
Ë*
sk
);

550 
X509_STORE_CTX_£t_puΩo£
(
X509_STORE_CTX
 *
˘x
, 
puΩo£
);

551 
X509_STORE_CTX_£t_åu°
(
X509_STORE_CTX
 *
˘x
, 
åu°
);

552 
X509_STORE_CTX_puΩo£_öhîô
(
X509_STORE_CTX
 *
˘x
, 
def_puΩo£
,

553 
puΩo£
, 
åu°
);

554 
X509_STORE_CTX_£t_Êags
(
X509_STORE_CTX
 *
˘x
, 
Êags
);

555 
X509_STORE_CTX_£t_time
(
X509_STORE_CTX
 *
˘x
, 
Êags
,

556 
time_t
 
t
);

557 
X509_STORE_CTX_£t_vîify_cb
(
X509_STORE_CTX
 *
˘x
,

558 (*
vîify_cb
Ë(, 
X509_STORE_CTX
 *));

560 
X509_POLICY_TREE
 *
X509_STORE_CTX_gë0_pﬁicy_åì
(
X509_STORE_CTX
 *
˘x
);

561 
X509_STORE_CTX_gë_ex∂icô_pﬁicy
(
X509_STORE_CTX
 *
˘x
);

563 
X509_VERIFY_PARAM
 *
X509_STORE_CTX_gë0_∑øm
(
X509_STORE_CTX
 *
˘x
);

564 
X509_STORE_CTX_£t0_∑øm
(
X509_STORE_CTX
 *
˘x
, 
X509_VERIFY_PARAM
 *
∑øm
);

565 
X509_STORE_CTX_£t_deÁu…
(
X509_STORE_CTX
 *
˘x
, c⁄° *
«me
);

569 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_√w
();

570 
X509_VERIFY_PARAM_‰ì
(
X509_VERIFY_PARAM
 *
∑øm
);

571 
X509_VERIFY_PARAM_öhîô
(
X509_VERIFY_PARAM
 *
to
,

572 c⁄° 
X509_VERIFY_PARAM
 *
‰om
);

573 
X509_VERIFY_PARAM_£t1
(
X509_VERIFY_PARAM
 *
to
,

574 c⁄° 
X509_VERIFY_PARAM
 *
‰om
);

575 
X509_VERIFY_PARAM_£t1_«me
(
X509_VERIFY_PARAM
 *
∑øm
, c⁄° *
«me
);

576 
X509_VERIFY_PARAM_£t_Êags
(
X509_VERIFY_PARAM
 *
∑øm
,

577 
Êags
);

578 
X509_VERIFY_PARAM_˛ór_Êags
(
X509_VERIFY_PARAM
 *
∑øm
,

579 
Êags
);

580 
X509_VERIFY_PARAM_gë_Êags
(
X509_VERIFY_PARAM
 *
∑øm
);

581 
X509_VERIFY_PARAM_£t_puΩo£
(
X509_VERIFY_PARAM
 *
∑øm
, 
puΩo£
);

582 
X509_VERIFY_PARAM_£t_åu°
(
X509_VERIFY_PARAM
 *
∑øm
, 
åu°
);

583 
X509_VERIFY_PARAM_£t_dïth
(
X509_VERIFY_PARAM
 *
∑øm
, 
dïth
);

584 
X509_VERIFY_PARAM_£t_time
(
X509_VERIFY_PARAM
 *
∑øm
, 
time_t
 
t
);

585 
X509_VERIFY_PARAM_add0_pﬁicy
(
X509_VERIFY_PARAM
 *
∑øm
,

586 
ASN1_OBJECT
 *
pﬁicy
);

587 
X509_VERIFY_PARAM_£t1_pﬁicõs
(
X509_VERIFY_PARAM
 *
∑øm
,

588 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicõs
);

590 
X509_VERIFY_PARAM_£t1_ho°
(
X509_VERIFY_PARAM
 *
∑øm
,

591 c⁄° *
«me
, 
size_t
 
«mñí
);

592 
X509_VERIFY_PARAM_add1_ho°
(
X509_VERIFY_PARAM
 *
∑øm
,

593 c⁄° *
«me
, 
size_t
 
«mñí
);

594 
X509_VERIFY_PARAM_£t_ho°Êags
(
X509_VERIFY_PARAM
 *
∑øm
,

595 
Êags
);

596 *
X509_VERIFY_PARAM_gë0_≥î«me
(
X509_VERIFY_PARAM
 *);

597 
X509_VERIFY_PARAM_£t1_emaû
(
X509_VERIFY_PARAM
 *
∑øm
,

598 c⁄° *
emaû
, 
size_t
 
emaûÀn
);

599 
X509_VERIFY_PARAM_£t1_ù
(
X509_VERIFY_PARAM
 *
∑øm
,

600 c⁄° *
ù
, 
size_t
 
ùÀn
);

601 
X509_VERIFY_PARAM_£t1_ù_asc
(
X509_VERIFY_PARAM
 *
∑øm
,

602 c⁄° *
ùasc
);

604 
X509_VERIFY_PARAM_gë_dïth
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

605 c⁄° *
X509_VERIFY_PARAM_gë0_«me
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

607 
X509_VERIFY_PARAM_add0_èbÀ
(
X509_VERIFY_PARAM
 *
∑øm
);

608 
X509_VERIFY_PARAM_gë_cou¡
();

609 c⁄° 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_gë0
(
id
);

610 c⁄° 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_lookup
(c⁄° *
«me
);

611 
X509_VERIFY_PARAM_èbÀ_˛ónup
();

613 
X509_pﬁicy_check
(
X509_POLICY_TREE
 **
±ªe
, *
≥x∂icô_pﬁicy
,

614 
STACK_OF
(
X509
Ë*
˚πs
,

615 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicy_oids
, 
Êags
);

617 
X509_pﬁicy_åì_‰ì
(
X509_POLICY_TREE
 *
åì
);

619 
X509_pﬁicy_åì_Àvñ_cou¡
(c⁄° 
X509_POLICY_TREE
 *
åì
);

620 
X509_POLICY_LEVEL
 *
X509_pﬁicy_åì_gë0_Àvñ
(c⁄° 
X509_POLICY_TREE
 *
åì
,

621 
i
);

623 
STACK_OF
(
X509_POLICY_NODE
Ë*
X509_pﬁicy_åì_gë0_pﬁicõs
(const

624 
X509_POLICY_TREE


625 *
åì
);

627 
STACK_OF
(
X509_POLICY_NODE
Ë*
X509_pﬁicy_åì_gë0_u£r_pﬁicõs
(const

628 
X509_POLICY_TREE


629 *
åì
);

631 
X509_pﬁicy_Àvñ_node_cou¡
(
X509_POLICY_LEVEL
 *
Àvñ
);

633 
X509_POLICY_NODE
 *
X509_pﬁicy_Àvñ_gë0_node
(
X509_POLICY_LEVEL
 *
Àvñ
,

634 
i
);

636 c⁄° 
ASN1_OBJECT
 *
X509_pﬁicy_node_gë0_pﬁicy
(c⁄° 
X509_POLICY_NODE
 *
node
);

638 
STACK_OF
(
POLICYQUALINFO
Ë*
X509_pﬁicy_node_gë0_quÆifõrs
(const

639 
X509_POLICY_NODE


640 *
node
);

641 c⁄° 
X509_POLICY_NODE
 *
X509_pﬁicy_node_gë0_∑ª¡
(const X509_POLICY_NODE

642 *
node
);

644 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509v3.h

59 #i‚de‡
HEADER_X509V3_H


60 
	#HEADER_X509V3_H


	)

62 
	~<›ís¶/bio.h
>

63 
	~<›ís¶/x509.h
>

64 
	~<›ís¶/c⁄f.h
>

66 #ifde‡
__˝lu•lus


70 #ifde‡
OPENSSL_SYS_WIN32


72 #unde‡
X509_NAME


73 #unde‡
X509_CERT_PAIR


74 #unde‡
X509_EXTENSIONS


78 
v3_ext_mëhod
;

79 
v3_ext_˘x
;

83 *(*
	tX509V3_EXT_NEW
)();

84 (*
X509V3_EXT_FREE
) (*);

85 *(*
	tX509V3_EXT_D2I
)(*, const **, );

86 (*
X509V3_EXT_I2D
) (*, **);

87 
STACK_OF
(
	tCONF_VALUE
) *

88 (*
	tX509V3_EXT_I2V
Ë(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
, *
	text
,

89 
	tSTACK_OF
(
	tCONF_VALUE
Ë*
	texéi°
);

90 *(*
	tX509V3_EXT_V2I
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
,

91 
	tv3_ext_˘x
 *
	t˘x
,

92 
	tSTACK_OF
(
	tCONF_VALUE
Ë*
	tvÆues
);

93 *(*
	tX509V3_EXT_I2S
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
,

94 *
	text
);

95 *(*
	tX509V3_EXT_S2I
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
,

96 
	tv3_ext_˘x
 *
	t˘x
, c⁄° *
	t°r
);

97 (*
X509V3_EXT_I2R
Ë(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
, *
	text
,

98 
	tBIO
 *
	tout
, 
	tödít
);

99 *(*
	tX509V3_EXT_R2I
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
,

100 
	tv3_ext_˘x
 *
	t˘x
, c⁄° *
	t°r
);

104 
	sv3_ext_mëhod
 {

105 
ext_nid
;

106 
ext_Êags
;

108 
ASN1_ITEM_EXP
 *
ô
;

110 
X509V3_EXT_NEW
 
ext_√w
;

111 
X509V3_EXT_FREE
 
ext_‰ì
;

112 
X509V3_EXT_D2I
 
d2i
;

113 
X509V3_EXT_I2D
 
i2d
;

115 
X509V3_EXT_I2S
 
i2s
;

116 
X509V3_EXT_S2I
 
s2i
;

118 
X509V3_EXT_I2V
 
i2v
;

119 
X509V3_EXT_V2I
 
v2i
;

121 
X509V3_EXT_I2R
 
i2r
;

122 
X509V3_EXT_R2I
 
r2i
;

123 *
u§_d©a
;

126 
	sX509V3_CONF_METHOD_°
 {

127 *(*
gë_°rög
Ë(*
db
, *
£˘i⁄
, *
vÆue
);

128 
STACK_OF
(
CONF_VALUE
Ë*(*
gë_£˘i⁄
Ë(*
db
, *
£˘i⁄
);

129 (*
‰ì_°rög
Ë(*
db
, *
°rög
);

130 (*
‰ì_£˘i⁄
Ë(*
db
, 
STACK_OF
(
CONF_VALUE
Ë*
£˘i⁄
);

131 } 
	tX509V3_CONF_METHOD
;

134 
	sv3_ext_˘x
 {

135 
	#CTX_TEST
 0x1

	)

136 
Êags
;

137 
X509
 *
issuî_˚π
;

138 
X509
 *
subje˘_˚π
;

139 
X509_REQ
 *
subje˘_ªq
;

140 
X509_CRL
 *
¸l
;

141 
X509V3_CONF_METHOD
 *
db_mëh
;

142 *
db
;

146 
v3_ext_mëhod
 
	tX509V3_EXT_METHOD
;

148 
DECLARE_STACK_OF
(
X509V3_EXT_METHOD
)

151 
	#X509V3_EXT_DYNAMIC
 0x1

	)

152 
	#X509V3_EXT_CTX_DEP
 0x2

	)

153 
	#X509V3_EXT_MULTILINE
 0x4

	)

155 
BIT_STRING_BITNAME
 
	tENUMERATED_NAMES
;

157 
	sBASIC_CONSTRAINTS_°
 {

158 
ˇ
;

159 
ASN1_INTEGER
 *
∑thÀn
;

160 } 
	tBASIC_CONSTRAINTS
;

162 
	sPKEY_USAGE_PERIOD_°
 {

163 
ASN1_GENERALIZEDTIME
 *
nŸBef‹e
;

164 
ASN1_GENERALIZEDTIME
 *
nŸA·î
;

165 } 
	tPKEY_USAGE_PERIOD
;

167 
	sŸhîName_°
 {

168 
ASN1_OBJECT
 *
ty≥_id
;

169 
ASN1_TYPE
 *
vÆue
;

170 } 
	tOTHERNAME
;

172 
	sEDIP¨tyName_°
 {

173 
ASN1_STRING
 *
«meAssig√r
;

174 
ASN1_STRING
 *
∑πyName
;

175 } 
	tEDIPARTYNAME
;

177 
	sGENERAL_NAME_°
 {

178 
	#GEN_OTHERNAME
 0

	)

179 
	#GEN_EMAIL
 1

	)

180 
	#GEN_DNS
 2

	)

181 
	#GEN_X400
 3

	)

182 
	#GEN_DIRNAME
 4

	)

183 
	#GEN_EDIPARTY
 5

	)

184 
	#GEN_URI
 6

	)

185 
	#GEN_IPADD
 7

	)

186 
	#GEN_RID
 8

	)

187 
ty≥
;

189 *
±r
;

190 
OTHERNAME
 *
ŸhîName
;

191 
ASN1_IA5STRING
 *
rfc822Name
;

192 
ASN1_IA5STRING
 *
dNSName
;

193 
ASN1_TYPE
 *
x400Addªss
;

194 
X509_NAME
 *
dúe˘‹yName
;

195 
EDIPARTYNAME
 *
ediP¨tyName
;

196 
ASN1_IA5STRING
 *
unif‹mResour˚Idítifõr
;

197 
ASN1_OCTET_STRING
 *
iPAddªss
;

198 
ASN1_OBJECT
 *
ªgi°îedID
;

200 
ASN1_OCTET_STRING
 *
ù
;

201 
X509_NAME
 *
dún
;

202 
ASN1_IA5STRING
 *
ü5
;

204 
ASN1_OBJECT
 *
rid
;

205 
ASN1_TYPE
 *
Ÿhî
;

206 } 
d
;

207 } 
	tGENERAL_NAME
;

209 
STACK_OF
(
	tGENERAL_NAME
Ë
	tGENERAL_NAMES
;

211 
	sACCESS_DESCRIPTION_°
 {

212 
ASN1_OBJECT
 *
mëhod
;

213 
GENERAL_NAME
 *
loˇti⁄
;

214 } 
	tACCESS_DESCRIPTION
;

216 
STACK_OF
(
	tACCESS_DESCRIPTION
Ë
	tAUTHORITY_INFO_ACCESS
;

218 
STACK_OF
(
	tASN1_OBJECT
Ë
	tEXTENDED_KEY_USAGE
;

220 
DECLARE_STACK_OF
(
GENERAL_NAME
)

221 
DECLARE_ASN1_SET_OF
(
GENERAL_NAME
)

223 
DECLARE_STACK_OF
(
ACCESS_DESCRIPTION
)

224 
DECLARE_ASN1_SET_OF
(
ACCESS_DESCRIPTION
)

226 
	sDIST_POINT_NAME_°
 {

227 
ty≥
;

229 
GENERAL_NAMES
 *
fuŒ«me
;

230 
STACK_OF
(
X509_NAME_ENTRY
Ë*
ªœtivíame
;

231 } 
«me
;

233 
X509_NAME
 *
d≤ame
;

234 } 
	tDIST_POINT_NAME
;

236 
	#CRLDP_ALL_REASONS
 0x807f

	)

238 
	#CRL_REASON_NONE
 -1

	)

239 
	#CRL_REASON_UNSPECIFIED
 0

	)

240 
	#CRL_REASON_KEY_COMPROMISE
 1

	)

241 
	#CRL_REASON_CA_COMPROMISE
 2

	)

242 
	#CRL_REASON_AFFILIATION_CHANGED
 3

	)

243 
	#CRL_REASON_SUPERSEDED
 4

	)

244 
	#CRL_REASON_CESSATION_OF_OPERATION
 5

	)

245 
	#CRL_REASON_CERTIFICATE_HOLD
 6

	)

246 
	#CRL_REASON_REMOVE_FROM_CRL
 8

	)

247 
	#CRL_REASON_PRIVILEGE_WITHDRAWN
 9

	)

248 
	#CRL_REASON_AA_COMPROMISE
 10

	)

250 
	sDIST_POINT_°
 {

251 
DIST_POINT_NAME
 *
di°poöt
;

252 
ASN1_BIT_STRING
 *
ªas⁄s
;

253 
GENERAL_NAMES
 *
CRLissuî
;

254 
dp_ªas⁄s
;

257 
STACK_OF
(
	tDIST_POINT
Ë
	tCRL_DIST_POINTS
;

259 
DECLARE_STACK_OF
(
DIST_POINT
)

260 
DECLARE_ASN1_SET_OF
(
DIST_POINT
)

262 
	sAUTHORITY_KEYID_°
 {

263 
ASN1_OCTET_STRING
 *
keyid
;

264 
GENERAL_NAMES
 *
issuî
;

265 
ASN1_INTEGER
 *
£rül
;

270 
	sSXNET_ID_°
 {

271 
ASN1_INTEGER
 *
z⁄e
;

272 
ASN1_OCTET_STRING
 *
u£r
;

273 } 
	tSXNETID
;

275 
DECLARE_STACK_OF
(
SXNETID
)

276 
DECLARE_ASN1_SET_OF
(
SXNETID
)

278 
	sSXNET_°
 {

279 
ASN1_INTEGER
 *
vîsi⁄
;

280 
STACK_OF
(
SXNETID
Ë*
ids
;

281 } 
	tSXNET
;

283 
	sNOTICEREF_°
 {

284 
ASN1_STRING
 *
‹g™iz©i⁄
;

285 
STACK_OF
(
ASN1_INTEGER
Ë*
nŸi˚nos
;

286 } 
	tNOTICEREF
;

288 
	sUSERNOTICE_°
 {

289 
NOTICEREF
 *
nŸi˚ªf
;

290 
ASN1_STRING
 *
ex±ext
;

291 } 
	tUSERNOTICE
;

293 
	sPOLICYQUALINFO_°
 {

294 
ASN1_OBJECT
 *
pquÆid
;

296 
ASN1_IA5STRING
 *
˝suri
;

297 
USERNOTICE
 *
u£∫Ÿi˚
;

298 
ASN1_TYPE
 *
Ÿhî
;

299 } 
d
;

300 } 
	tPOLICYQUALINFO
;

302 
DECLARE_STACK_OF
(
POLICYQUALINFO
)

303 
DECLARE_ASN1_SET_OF
(
POLICYQUALINFO
)

305 
	sPOLICYINFO_°
 {

306 
ASN1_OBJECT
 *
pﬁicyid
;

307 
STACK_OF
(
POLICYQUALINFO
Ë*
quÆifõrs
;

308 } 
	tPOLICYINFO
;

310 
STACK_OF
(
	tPOLICYINFO
Ë
	tCERTIFICATEPOLICIES
;

312 
DECLARE_STACK_OF
(
POLICYINFO
)

313 
DECLARE_ASN1_SET_OF
(
POLICYINFO
)

315 
	sPOLICY_MAPPING_°
 {

316 
ASN1_OBJECT
 *
issuîDomaöPﬁicy
;

317 
ASN1_OBJECT
 *
subje˘DomaöPﬁicy
;

318 } 
	tPOLICY_MAPPING
;

320 
DECLARE_STACK_OF
(
POLICY_MAPPING
)

322 
STACK_OF
(
	tPOLICY_MAPPING
Ë
	tPOLICY_MAPPINGS
;

324 
	sGENERAL_SUBTREE_°
 {

325 
GENERAL_NAME
 *
ba£
;

326 
ASN1_INTEGER
 *
möimum
;

327 
ASN1_INTEGER
 *
maximum
;

328 } 
	tGENERAL_SUBTREE
;

330 
DECLARE_STACK_OF
(
GENERAL_SUBTREE
)

332 
	sNAME_CONSTRAINTS_°
 {

333 
STACK_OF
(
GENERAL_SUBTREE
Ë*
≥rmôãdSubåìs
;

334 
STACK_OF
(
GENERAL_SUBTREE
Ë*
ex˛udedSubåìs
;

337 
	sPOLICY_CONSTRAINTS_°
 {

338 
ASN1_INTEGER
 *
ªquúeEx∂icôPﬁicy
;

339 
ASN1_INTEGER
 *
öhibôPﬁicyM≠pög
;

340 } 
	tPOLICY_CONSTRAINTS
;

343 
	sPROXY_POLICY_°
 {

344 
ASN1_OBJECT
 *
pﬁicyL™guage
;

345 
ASN1_OCTET_STRING
 *
pﬁicy
;

346 } 
	tPROXY_POLICY
;

348 
	sPROXY_CERT_INFO_EXTENSION_°
 {

349 
ASN1_INTEGER
 *
pcP©hLígthC⁄°øöt
;

350 
PROXY_POLICY
 *
¥oxyPﬁicy
;

351 } 
	tPROXY_CERT_INFO_EXTENSION
;

353 
DECLARE_ASN1_FUNCTIONS
(
PROXY_POLICY
)

354 
DECLARE_ASN1_FUNCTIONS
(
PROXY_CERT_INFO_EXTENSION
)

356 
	sISSUING_DIST_POINT_°
 {

357 
DIST_POINT_NAME
 *
di°poöt
;

358 
⁄lyu£r
;

359 
⁄lyCA
;

360 
ASN1_BIT_STRING
 *
⁄lysomîós⁄s
;

361 
ödúe˘CRL
;

362 
⁄ly©å
;

367 
	#IDP_PRESENT
 0x1

	)

369 
	#IDP_INVALID
 0x2

	)

371 
	#IDP_ONLYUSER
 0x4

	)

373 
	#IDP_ONLYCA
 0x8

	)

375 
	#IDP_ONLYATTR
 0x10

	)

377 
	#IDP_INDIRECT
 0x20

	)

379 
	#IDP_REASONS
 0x40

	)

381 
	#X509V3_c⁄f_îr
(
vÆ
Ë
	`ERR_add_îr‹_d©a
(6, "£˘i⁄:", vÆ->
£˘i⁄
, \

382 ",«me:", 
vÆ
->
«me
, ",vÆue:", vÆ->
vÆue
);

	)

384 
	#X509V3_£t_˘x_ã°
(
˘x
) \

385 
	`X509V3_£t_˘x
(
˘x
, 
NULL
, NULL, NULL, NULL, 
CTX_TEST
)

	)

386 
	#X509V3_£t_˘x_nodb
(
˘x
Ë(˘x)->
db
 = 
NULL
;

	)

388 
	#EXT_BITSTRING
(
nid
, 
èbÀ
Ë{Çid, 0, 
	`ASN1_ITEM_ªf
(
ASN1_BIT_STRING
), \

391 (
X509V3_EXT_I2V
)
i2v_ASN1_BIT_STRING
, \

392 (
X509V3_EXT_V2I
)
v2i_ASN1_BIT_STRING
, \

393 
NULL
, NULL, \

394 
èbÀ
}

	)

396 
	#EXT_IA5STRING
(
nid
Ë{Çid, 0, 
	`ASN1_ITEM_ªf
(
ASN1_IA5STRING
), \

398 (
X509V3_EXT_I2S
)
i2s_ASN1_IA5STRING
, \

399 (
X509V3_EXT_S2I
)
s2i_ASN1_IA5STRING
, \

401 
NULL
}

	)

403 
	#EXT_END
 { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	)

407 
	#EXFLAG_BCONS
 0x1

	)

408 
	#EXFLAG_KUSAGE
 0x2

	)

409 
	#EXFLAG_XKUSAGE
 0x4

	)

410 
	#EXFLAG_NSCERT
 0x8

	)

412 
	#EXFLAG_CA
 0x10

	)

414 
	#EXFLAG_SI
 0x20

	)

415 
	#EXFLAG_V1
 0x40

	)

416 
	#EXFLAG_INVALID
 0x80

	)

417 
	#EXFLAG_SET
 0x100

	)

418 
	#EXFLAG_CRITICAL
 0x200

	)

419 
	#EXFLAG_PROXY
 0x400

	)

421 
	#EXFLAG_INVALID_POLICY
 0x800

	)

422 
	#EXFLAG_FRESHEST
 0x1000

	)

424 
	#EXFLAG_SS
 0x2000

	)

426 
	#KU_DIGITAL_SIGNATURE
 0x0080

	)

427 
	#KU_NON_REPUDIATION
 0x0040

	)

428 
	#KU_KEY_ENCIPHERMENT
 0x0020

	)

429 
	#KU_DATA_ENCIPHERMENT
 0x0010

	)

430 
	#KU_KEY_AGREEMENT
 0x0008

	)

431 
	#KU_KEY_CERT_SIGN
 0x0004

	)

432 
	#KU_CRL_SIGN
 0x0002

	)

433 
	#KU_ENCIPHER_ONLY
 0x0001

	)

434 
	#KU_DECIPHER_ONLY
 0x8000

	)

436 
	#NS_SSL_CLIENT
 0x80

	)

437 
	#NS_SSL_SERVER
 0x40

	)

438 
	#NS_SMIME
 0x20

	)

439 
	#NS_OBJSIGN
 0x10

	)

440 
	#NS_SSL_CA
 0x04

	)

441 
	#NS_SMIME_CA
 0x02

	)

442 
	#NS_OBJSIGN_CA
 0x01

	)

443 
	#NS_ANY_CA
 (
NS_SSL_CA
|
NS_SMIME_CA
|
NS_OBJSIGN_CA
)

	)

445 
	#XKU_SSL_SERVER
 0x1

	)

446 
	#XKU_SSL_CLIENT
 0x2

	)

447 
	#XKU_SMIME
 0x4

	)

448 
	#XKU_CODE_SIGN
 0x8

	)

449 
	#XKU_SGC
 0x10

	)

450 
	#XKU_OCSP_SIGN
 0x20

	)

451 
	#XKU_TIMESTAMP
 0x40

	)

452 
	#XKU_DVCS
 0x80

	)

453 
	#XKU_ANYEKU
 0x100

	)

455 
	#X509_PURPOSE_DYNAMIC
 0x1

	)

456 
	#X509_PURPOSE_DYNAMIC_NAME
 0x2

	)

458 
	sx509_puΩo£_°
 {

459 
puΩo£
;

460 
åu°
;

461 
Êags
;

462 (*
check_puΩo£
Ë(c⁄° 
x509_puΩo£_°
 *, c⁄° 
X509
 *, );

463 *
«me
;

464 *
¢ame
;

465 *
u§_d©a
;

466 } 
	tX509_PURPOSE
;

468 
	#X509_PURPOSE_SSL_CLIENT
 1

	)

469 
	#X509_PURPOSE_SSL_SERVER
 2

	)

470 
	#X509_PURPOSE_NS_SSL_SERVER
 3

	)

471 
	#X509_PURPOSE_SMIME_SIGN
 4

	)

472 
	#X509_PURPOSE_SMIME_ENCRYPT
 5

	)

473 
	#X509_PURPOSE_CRL_SIGN
 6

	)

474 
	#X509_PURPOSE_ANY
 7

	)

475 
	#X509_PURPOSE_OCSP_HELPER
 8

	)

476 
	#X509_PURPOSE_TIMESTAMP_SIGN
 9

	)

478 
	#X509_PURPOSE_MIN
 1

	)

479 
	#X509_PURPOSE_MAX
 9

	)

483 
	#X509V3_EXT_UNKNOWN_MASK
 (0xfL << 16)

	)

485 
	#X509V3_EXT_DEFAULT
 0

	)

487 
	#X509V3_EXT_ERROR_UNKNOWN
 (1L << 16)

	)

489 
	#X509V3_EXT_PARSE_UNKNOWN
 (2L << 16)

	)

491 
	#X509V3_EXT_DUMP_UNKNOWN
 (3L << 16)

	)

495 
	#X509V3_ADD_OP_MASK
 0xfL

	)

496 
	#X509V3_ADD_DEFAULT
 0L

	)

497 
	#X509V3_ADD_APPEND
 1L

	)

498 
	#X509V3_ADD_REPLACE
 2L

	)

499 
	#X509V3_ADD_REPLACE_EXISTING
 3L

	)

500 
	#X509V3_ADD_KEEP_EXISTING
 4L

	)

501 
	#X509V3_ADD_DELETE
 5L

	)

502 
	#X509V3_ADD_SILENT
 0x10

	)

504 
DECLARE_STACK_OF
(
X509_PURPOSE
)

506 
DECLARE_ASN1_FUNCTIONS
(
BASIC_CONSTRAINTS
)

508 
DECLARE_ASN1_FUNCTIONS
(
SXNET
)

509 
DECLARE_ASN1_FUNCTIONS
(
SXNETID
)

511 
SXNET_add_id_asc
(
SXNET
 **
psx
, *
z⁄e
, *
u£r
, 
u£æí
);

512 
SXNET_add_id_ul⁄g
(
SXNET
 **
psx
, 
lz⁄e
, *
u£r
,

513 
u£æí
);

514 
SXNET_add_id_INTEGER
(
SXNET
 **
psx
, 
ASN1_INTEGER
 *
iz⁄e
, *
u£r
,

515 
u£æí
);

517 
ASN1_OCTET_STRING
 *
SXNET_gë_id_asc
(
SXNET
 *
sx
, *
z⁄e
);

518 
ASN1_OCTET_STRING
 *
SXNET_gë_id_ul⁄g
(
SXNET
 *
sx
, 
lz⁄e
);

519 
ASN1_OCTET_STRING
 *
SXNET_gë_id_INTEGER
(
SXNET
 *
sx
, 
ASN1_INTEGER
 *
z⁄e
);

521 
DECLARE_ASN1_FUNCTIONS
(
AUTHORITY_KEYID
)

523 
DECLARE_ASN1_FUNCTIONS
(
PKEY_USAGE_PERIOD
)

525 
DECLARE_ASN1_FUNCTIONS
(
GENERAL_NAME
)

526 
GENERAL_NAME
 *
GENERAL_NAME_dup
(GENERAL_NAME *
a
);

527 
GENERAL_NAME_cmp
(
GENERAL_NAME
 *
a
, GENERAL_NAME *
b
);

529 
ASN1_BIT_STRING
 *
v2i_ASN1_BIT_STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

530 
X509V3_CTX
 *
˘x
,

531 
STACK_OF
(
CONF_VALUE
Ë*
nvÆ
);

532 
STACK_OF
(
CONF_VALUE
Ë*
i2v_ASN1_BIT_STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

533 
ASN1_BIT_STRING
 *
bôs
,

534 
STACK_OF
(
CONF_VALUE
Ë*
exéi°
);

536 
STACK_OF
(
CONF_VALUE
Ë*
i2v_GENERAL_NAME
(
X509V3_EXT_METHOD
 *
mëhod
,

537 
GENERAL_NAME
 *
gí
,

538 
STACK_OF
(
CONF_VALUE
Ë*
ªt
);

539 
GENERAL_NAME_¥öt
(
BIO
 *
out
, 
GENERAL_NAME
 *
gí
);

541 
DECLARE_ASN1_FUNCTIONS
(
GENERAL_NAMES
)

543 
STACK_OF
(
CONF_VALUE
Ë*
i2v_GENERAL_NAMES
(
X509V3_EXT_METHOD
 *
mëhod
,

544 
GENERAL_NAMES
 *
gí
,

545 
STACK_OF
(
CONF_VALUE
Ë*
exéi°
);

546 
GENERAL_NAMES
 *
v2i_GENERAL_NAMES
(c⁄° 
X509V3_EXT_METHOD
 *
mëhod
,

547 
X509V3_CTX
 *
˘x
, 
STACK_OF
(
CONF_VALUE
Ë*
nvÆ
);

549 
DECLARE_ASN1_FUNCTIONS
(
OTHERNAME
)

550 
DECLARE_ASN1_FUNCTIONS
(
EDIPARTYNAME
)

551 
OTHERNAME_cmp
(
OTHERNAME
 *
a
, OTHERNAME *
b
);

552 
GENERAL_NAME_£t0_vÆue
(
GENERAL_NAME
 *
a
, 
ty≥
, *
vÆue
);

553 *
GENERAL_NAME_gë0_vÆue
(
GENERAL_NAME
 *
a
, *
±y≥
);

554 
GENERAL_NAME_£t0_Ÿhî«me
(
GENERAL_NAME
 *
gí
,

555 
ASN1_OBJECT
 *
oid
, 
ASN1_TYPE
 *
vÆue
);

556 
GENERAL_NAME_gë0_ŸhîName
(
GENERAL_NAME
 *
gí
,

557 
ASN1_OBJECT
 **
poid
, 
ASN1_TYPE
 **
pvÆue
);

559 *
i2s_ASN1_OCTET_STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

560 
ASN1_OCTET_STRING
 *
ü5
);

561 
ASN1_OCTET_STRING
 *
s2i_ASN1_OCTET_STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

562 
X509V3_CTX
 *
˘x
, *
°r
);

564 
DECLARE_ASN1_FUNCTIONS
(
EXTENDED_KEY_USAGE
)

565 
i2a_ACCESS_DESCRIPTION
(
BIO
 *
bp
, 
ACCESS_DESCRIPTION
 *
a
);

567 
DECLARE_ASN1_FUNCTIONS
(
CERTIFICATEPOLICIES
)

568 
DECLARE_ASN1_FUNCTIONS
(
POLICYINFO
)

569 
DECLARE_ASN1_FUNCTIONS
(
POLICYQUALINFO
)

570 
DECLARE_ASN1_FUNCTIONS
(
USERNOTICE
)

571 
DECLARE_ASN1_FUNCTIONS
(
NOTICEREF
)

573 
DECLARE_ASN1_FUNCTIONS
(
CRL_DIST_POINTS
)

574 
DECLARE_ASN1_FUNCTIONS
(
DIST_POINT
)

575 
DECLARE_ASN1_FUNCTIONS
(
DIST_POINT_NAME
)

576 
DECLARE_ASN1_FUNCTIONS
(
ISSUING_DIST_POINT
)

578 
DIST_POINT_£t_d≤ame
(
DIST_POINT_NAME
 *
d≤
, 
X509_NAME
 *
öame
);

580 
NAME_CONSTRAINTS_check
(
X509
 *
x
, 
NAME_CONSTRAINTS
 *
nc
);

582 
DECLARE_ASN1_FUNCTIONS
(
ACCESS_DESCRIPTION
)

583 
DECLARE_ASN1_FUNCTIONS
(
AUTHORITY_INFO_ACCESS
)

585 
DECLARE_ASN1_ITEM
(
POLICY_MAPPING
)

586 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
POLICY_MAPPING
)

587 
DECLARE_ASN1_ITEM
(
POLICY_MAPPINGS
)

589 
DECLARE_ASN1_ITEM
(
GENERAL_SUBTREE
)

590 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
GENERAL_SUBTREE
)

592 
DECLARE_ASN1_ITEM
(
NAME_CONSTRAINTS
)

593 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
NAME_CONSTRAINTS
)

595 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
POLICY_CONSTRAINTS
)

596 
DECLARE_ASN1_ITEM
(
POLICY_CONSTRAINTS
)

598 
GENERAL_NAME
 *
a2i_GENERAL_NAME
(GENERAL_NAME *
out
,

599 c⁄° 
X509V3_EXT_METHOD
 *
mëhod
,

600 
X509V3_CTX
 *
˘x
, 
gí_ty≥
, *
vÆue
,

601 
is_nc
);

603 #ifde‡
HEADER_CONF_H


604 
GENERAL_NAME
 *
v2i_GENERAL_NAME
(c⁄° 
X509V3_EXT_METHOD
 *
mëhod
,

605 
X509V3_CTX
 *
˘x
, 
CONF_VALUE
 *
˙f
);

606 
GENERAL_NAME
 *
v2i_GENERAL_NAME_ex
(GENERAL_NAME *
out
,

607 c⁄° 
X509V3_EXT_METHOD
 *
mëhod
,

608 
X509V3_CTX
 *
˘x
, 
CONF_VALUE
 *
˙f
,

609 
is_nc
);

610 
X509V3_c⁄f_‰ì
(
CONF_VALUE
 *
vÆ
);

612 
X509_EXTENSION
 *
X509V3_EXT_nc⁄f_nid
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, 
ext_nid
,

613 *
vÆue
);

614 
X509_EXTENSION
 *
X509V3_EXT_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
«me
,

615 *
vÆue
);

616 
X509V3_EXT_add_nc⁄f_sk
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
,

617 
STACK_OF
(
X509_EXTENSION
Ë**
sk
);

618 
X509V3_EXT_add_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
,

619 
X509
 *
˚π
);

620 
X509V3_EXT_REQ_add_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
,

621 
X509_REQ
 *
ªq
);

622 
X509V3_EXT_CRL_add_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
,

623 
X509_CRL
 *
¸l
);

625 
X509_EXTENSION
 *
X509V3_EXT_c⁄f_nid
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
,

626 
X509V3_CTX
 *
˘x
, 
ext_nid
,

627 *
vÆue
);

628 
X509_EXTENSION
 *
X509V3_EXT_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

629 *
«me
, *
vÆue
);

630 
X509V3_EXT_add_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

631 *
£˘i⁄
, 
X509
 *
˚π
);

632 
X509V3_EXT_REQ_add_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

633 *
£˘i⁄
, 
X509_REQ
 *
ªq
);

634 
X509V3_EXT_CRL_add_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

635 *
£˘i⁄
, 
X509_CRL
 *
¸l
);

637 
X509V3_add_vÆue_boﬁ_nf
(*
«me
, 
a¢1_boﬁ
,

638 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

639 
X509V3_gë_vÆue_boﬁ
(
CONF_VALUE
 *
vÆue
, *
a¢1_boﬁ
);

640 
X509V3_gë_vÆue_öt
(
CONF_VALUE
 *
vÆue
, 
ASN1_INTEGER
 **
aöt
);

641 
X509V3_£t_nc⁄f
(
X509V3_CTX
 *
˘x
, 
CONF
 *
c⁄f
);

642 
X509V3_£t_c⁄f_lhash
(
X509V3_CTX
 *
˘x
, 
LHASH_OF
(
CONF_VALUE
Ë*
lhash
);

645 *
X509V3_gë_°rög
(
X509V3_CTX
 *
˘x
, *
«me
, *
£˘i⁄
);

646 
STACK_OF
(
CONF_VALUE
Ë*
X509V3_gë_£˘i⁄
(
X509V3_CTX
 *
˘x
, *
£˘i⁄
);

647 
X509V3_°rög_‰ì
(
X509V3_CTX
 *
˘x
, *
°r
);

648 
X509V3_£˘i⁄_‰ì
(
X509V3_CTX
 *
˘x
, 
STACK_OF
(
CONF_VALUE
Ë*
£˘i⁄
);

649 
X509V3_£t_˘x
(
X509V3_CTX
 *
˘x
, 
X509
 *
issuî
, X509 *
subje˘
,

650 
X509_REQ
 *
ªq
, 
X509_CRL
 *
¸l
, 
Êags
);

652 
X509V3_add_vÆue
(c⁄° *
«me
, c⁄° *
vÆue
,

653 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

654 
X509V3_add_vÆue_uch¨
(c⁄° *
«me
, c⁄° *
vÆue
,

655 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

656 
X509V3_add_vÆue_boﬁ
(c⁄° *
«me
, 
a¢1_boﬁ
,

657 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

658 
X509V3_add_vÆue_öt
(c⁄° *
«me
, 
ASN1_INTEGER
 *
aöt
,

659 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

660 *
i2s_ASN1_INTEGER
(
X509V3_EXT_METHOD
 *
mëh
, 
ASN1_INTEGER
 *
aöt
);

661 
ASN1_INTEGER
 *
s2i_ASN1_INTEGER
(
X509V3_EXT_METHOD
 *
mëh
, *
vÆue
);

662 *
i2s_ASN1_ENUMERATED
(
X509V3_EXT_METHOD
 *
mëh
, 
ASN1_ENUMERATED
 *
aöt
);

663 *
i2s_ASN1_ENUMERATED_TABLE
(
X509V3_EXT_METHOD
 *
mëh
,

664 
ASN1_ENUMERATED
 *
aöt
);

665 
X509V3_EXT_add
(
X509V3_EXT_METHOD
 *
ext
);

666 
X509V3_EXT_add_li°
(
X509V3_EXT_METHOD
 *
exéi°
);

667 
X509V3_EXT_add_Æüs
(
nid_to
, 
nid_‰om
);

668 
X509V3_EXT_˛ónup
();

670 c⁄° 
X509V3_EXT_METHOD
 *
X509V3_EXT_gë
(
X509_EXTENSION
 *
ext
);

671 c⁄° 
X509V3_EXT_METHOD
 *
X509V3_EXT_gë_nid
(
nid
);

672 
X509V3_add_°™d¨d_exãnsi⁄s
();

673 
STACK_OF
(
CONF_VALUE
Ë*
X509V3_∑r£_li°
(c⁄° *
löe
);

674 *
X509V3_EXT_d2i
(
X509_EXTENSION
 *
ext
);

675 *
X509V3_gë_d2i
(
STACK_OF
(
X509_EXTENSION
Ë*
x
, 
nid
, *
¸ô
,

676 *
idx
);

677 
X509V3_EXT_‰ì
(
nid
, *
ext_d©a
);

679 
X509_EXTENSION
 *
X509V3_EXT_i2d
(
ext_nid
, 
¸ô
, *
ext_°ruc
);

680 
X509V3_add1_i2d
(
STACK_OF
(
X509_EXTENSION
Ë**
x
, 
nid
, *
vÆue
,

681 
¸ô
, 
Êags
);

683 *
hex_to_°rög
(c⁄° *
buf„r
, 
Àn
);

684 *
°rög_to_hex
(c⁄° *
°r
, *
Àn
);

685 
«me_cmp
(c⁄° *
«me
, c⁄° *
cmp
);

687 
X509V3_EXT_vÆ_¥n
(
BIO
 *
out
, 
STACK_OF
(
CONF_VALUE
Ë*
vÆ
, 
ödít
,

688 
ml
);

689 
X509V3_EXT_¥öt
(
BIO
 *
out
, 
X509_EXTENSION
 *
ext
, 
Êag
,

690 
ödít
);

691 
X509V3_EXT_¥öt_Â
(
FILE
 *
out
, 
X509_EXTENSION
 *
ext
, 
Êag
, 
ödít
);

693 
X509V3_exãnsi⁄s_¥öt
(
BIO
 *
out
, *
tôÀ
,

694 
STACK_OF
(
X509_EXTENSION
Ë*
exts
,

695 
Êag
, 
ödít
);

697 
X509_check_ˇ
(
X509
 *
x
);

698 
X509_check_puΩo£
(
X509
 *
x
, 
id
, 
ˇ
);

699 
X509_suµ‹ãd_exãnsi⁄
(
X509_EXTENSION
 *
ex
);

700 
X509_PURPOSE_£t
(*
p
, 
puΩo£
);

701 
X509_check_issued
(
X509
 *
issuî
, X509 *
subje˘
);

702 
X509_check_akid
(
X509
 *
issuî
, 
AUTHORITY_KEYID
 *
akid
);

703 
X509_PURPOSE_gë_cou¡
();

704 
X509_PURPOSE
 *
X509_PURPOSE_gë0
(
idx
);

705 
X509_PURPOSE_gë_by_¢ame
(*
¢ame
);

706 
X509_PURPOSE_gë_by_id
(
id
);

707 
X509_PURPOSE_add
(
id
, 
åu°
, 
Êags
,

708 (*
ck
Ë(c⁄° 
X509_PURPOSE
 *, c⁄° 
X509
 *, ),

709 *
«me
, *
¢ame
, *
¨g
);

710 *
X509_PURPOSE_gë0_«me
(
X509_PURPOSE
 *
xp
);

711 *
X509_PURPOSE_gë0_¢ame
(
X509_PURPOSE
 *
xp
);

712 
X509_PURPOSE_gë_åu°
(
X509_PURPOSE
 *
xp
);

713 
X509_PURPOSE_˛ónup
();

714 
X509_PURPOSE_gë_id
(
X509_PURPOSE
 *);

716 
STACK_OF
(
OPENSSL_STRING
Ë*
X509_gë1_emaû
(
X509
 *
x
);

717 
STACK_OF
(
OPENSSL_STRING
Ë*
X509_REQ_gë1_emaû
(
X509_REQ
 *
x
);

718 
X509_emaû_‰ì
(
STACK_OF
(
OPENSSL_STRING
Ë*
sk
);

719 
STACK_OF
(
OPENSSL_STRING
Ë*
X509_gë1_oc•
(
X509
 *
x
);

725 
	#X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT
 0x1

	)

727 
	#X509_CHECK_FLAG_NO_WILDCARDS
 0x2

	)

729 
	#X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS
 0x4

	)

731 
	#X509_CHECK_FLAG_MULTI_LABEL_WILDCARDS
 0x8

	)

733 
	#X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS
 0x10

	)

739 
	#_X509_CHECK_FLAG_DOT_SUBDOMAINS
 0x8000

	)

741 
X509_check_ho°
(
X509
 *
x
, c⁄° *
chk
, 
size_t
 
chkÀn
,

742 
Êags
, **
≥î«me
);

743 
X509_check_emaû
(
X509
 *
x
, c⁄° *
chk
, 
size_t
 
chkÀn
,

744 
Êags
);

745 
X509_check_ù
(
X509
 *
x
, c⁄° *
chk
, 
size_t
 
chkÀn
,

746 
Êags
);

747 
X509_check_ù_asc
(
X509
 *
x
, c⁄° *
ùasc
, 
Êags
);

749 
ASN1_OCTET_STRING
 *
a2i_IPADDRESS
(c⁄° *
ùasc
);

750 
ASN1_OCTET_STRING
 *
a2i_IPADDRESS_NC
(c⁄° *
ùasc
);

751 
a2i_ùadd
(*
ùout
, c⁄° *
ùasc
);

752 
X509V3_NAME_‰om_£˘i⁄
(
X509_NAME
 *
nm
, 
STACK_OF
(
CONF_VALUE
Ë*
dn_sk
,

753 
chty≥
);

755 
X509_POLICY_NODE_¥öt
(
BIO
 *
out
, 
X509_POLICY_NODE
 *
node
, 
ödít
);

756 
DECLARE_STACK_OF
(
X509_POLICY_NODE
)

758 #i‚de‡
OPENSSL_NO_RFC3779


760 
	sASR™ge_°
 {

761 
ASN1_INTEGER
 *
mö
, *
max
;

762 } 
	tASR™ge
;

764 
	#ASIdOrR™ge_id
 0

	)

765 
	#ASIdOrR™ge_ønge
 1

	)

767 
	sASIdOrR™ge_°
 {

768 
ty≥
;

770 
ASN1_INTEGER
 *
id
;

771 
ASR™ge
 *
ønge
;

772 } 
u
;

773 } 
	tASIdOrR™ge
;

775 
STACK_OF
(
	tASIdOrR™ge
Ë
	tASIdOrR™ges
;

776 
DECLARE_STACK_OF
(
ASIdOrR™ge
)

778 
	#ASIdítifõrChoi˚_öhîô
 0

	)

779 
	#ASIdítifõrChoi˚_asIdsOrR™ges
 1

	)

781 
	sASIdítifõrChoi˚_°
 {

782 
ty≥
;

784 
ASN1_NULL
 *
öhîô
;

785 
ASIdOrR™ges
 *
asIdsOrR™ges
;

786 } 
u
;

787 } 
	tASIdítifõrChoi˚
;

789 
	sASIdítifõrs_°
 {

790 
ASIdítifõrChoi˚
 *
a¢um
, *
rdi
;

791 } 
	tASIdítifõrs
;

793 
DECLARE_ASN1_FUNCTIONS
(
ASR™ge
)

794 
DECLARE_ASN1_FUNCTIONS
(
ASIdOrR™ge
)

795 
DECLARE_ASN1_FUNCTIONS
(
ASIdítifõrChoi˚
)

796 
DECLARE_ASN1_FUNCTIONS
(
ASIdítifõrs
)

798 
	sIPAddªssR™ge_°
 {

799 
ASN1_BIT_STRING
 *
mö
, *
max
;

800 } 
	tIPAddªssR™ge
;

802 
	#IPAddªssOrR™ge_addªssPªfix
 0

	)

803 
	#IPAddªssOrR™ge_addªssR™ge
 1

	)

805 
	sIPAddªssOrR™ge_°
 {

806 
ty≥
;

808 
ASN1_BIT_STRING
 *
addªssPªfix
;

809 
IPAddªssR™ge
 *
addªssR™ge
;

810 } 
u
;

811 } 
	tIPAddªssOrR™ge
;

813 
STACK_OF
(
	tIPAddªssOrR™ge
Ë
	tIPAddªssOrR™ges
;

814 
DECLARE_STACK_OF
(
IPAddªssOrR™ge
)

816 
	#IPAddªssChoi˚_öhîô
 0

	)

817 
	#IPAddªssChoi˚_addªs£sOrR™ges
 1

	)

819 
	sIPAddªssChoi˚_°
 {

820 
ty≥
;

822 
ASN1_NULL
 *
öhîô
;

823 
IPAddªssOrR™ges
 *
addªs£sOrR™ges
;

824 } 
u
;

825 } 
	tIPAddªssChoi˚
;

827 
	sIPAddªssFamûy_°
 {

828 
ASN1_OCTET_STRING
 *
addªssFamûy
;

829 
IPAddªssChoi˚
 *
ùAddªssChoi˚
;

830 } 
	tIPAddªssFamûy
;

832 
STACK_OF
(
	tIPAddªssFamûy
Ë
	tIPAddrBlocks
;

833 
DECLARE_STACK_OF
(
IPAddªssFamûy
)

835 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssR™ge
)

836 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssOrR™ge
)

837 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssChoi˚
)

838 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssFamûy
)

843 
	#V3_ASID_ASNUM
 0

	)

844 
	#V3_ASID_RDI
 1

	)

852 
	#IANA_AFI_IPV4
 1

	)

853 
	#IANA_AFI_IPV6
 2

	)

860 
v3_asid_add_öhîô
(
ASIdítifõrs
 *
asid
, 
which
);

861 
v3_asid_add_id_‹_ønge
(
ASIdítifõrs
 *
asid
, 
which
,

862 
ASN1_INTEGER
 *
mö
, ASN1_INTEGER *
max
);

863 
v3_addr_add_öhîô
(
IPAddrBlocks
 *
addr
,

864 c⁄° 
afi
, c⁄° *
ßfi
);

865 
v3_addr_add_¥efix
(
IPAddrBlocks
 *
addr
,

866 c⁄° 
afi
, c⁄° *
ßfi
,

867 *
a
, c⁄° 
¥efixÀn
);

868 
v3_addr_add_ønge
(
IPAddrBlocks
 *
addr
,

869 c⁄° 
afi
, c⁄° *
ßfi
,

870 *
mö
, *
max
);

871 
v3_addr_gë_afi
(c⁄° 
IPAddªssFamûy
 *
f
);

872 
v3_addr_gë_ønge
(
IPAddªssOrR™ge
 *
a‹
, c⁄° 
afi
,

873 *
mö
, *
max
,

874 c⁄° 
Àngth
);

879 
v3_asid_is_ˇn⁄iˇl
(
ASIdítifõrs
 *
asid
);

880 
v3_addr_is_ˇn⁄iˇl
(
IPAddrBlocks
 *
addr
);

881 
v3_asid_ˇn⁄ize
(
ASIdítifõrs
 *
asid
);

882 
v3_addr_ˇn⁄ize
(
IPAddrBlocks
 *
addr
);

887 
v3_asid_öhîôs
(
ASIdítifõrs
 *
asid
);

888 
v3_addr_öhîôs
(
IPAddrBlocks
 *
addr
);

889 
v3_asid_sub£t
(
ASIdítifõrs
 *
a
, ASIdítifõr†*
b
);

890 
v3_addr_sub£t
(
IPAddrBlocks
 *
a
, IPAddrBlock†*
b
);

895 
v3_asid_vÆid©e_∑th
(
X509_STORE_CTX
 *);

896 
v3_addr_vÆid©e_∑th
(
X509_STORE_CTX
 *);

897 
v3_asid_vÆid©e_ªsour˚_£t
(
STACK_OF
(
X509
Ë*
chaö
,

898 
ASIdítifõrs
 *
ext
, 
Ælow_öhîô™˚
);

899 
v3_addr_vÆid©e_ªsour˚_£t
(
STACK_OF
(
X509
Ë*
chaö
,

900 
IPAddrBlocks
 *
ext
, 
Ælow_öhîô™˚
);

909 
ERR_lﬂd_X509V3_°rögs
();

914 
	#X509V3_F_A2I_GENERAL_NAME
 164

	)

915 
	#X509V3_F_ASIDENTIFIERCHOICE_CANONIZE
 161

	)

916 
	#X509V3_F_ASIDENTIFIERCHOICE_IS_CANONICAL
 162

	)

917 
	#X509V3_F_COPY_EMAIL
 122

	)

918 
	#X509V3_F_COPY_ISSUER
 123

	)

919 
	#X509V3_F_DO_DIRNAME
 144

	)

920 
	#X509V3_F_DO_EXT_CONF
 124

	)

921 
	#X509V3_F_DO_EXT_I2D
 135

	)

922 
	#X509V3_F_DO_EXT_NCONF
 151

	)

923 
	#X509V3_F_DO_I2V_NAME_CONSTRAINTS
 148

	)

924 
	#X509V3_F_GNAMES_FROM_SECTNAME
 156

	)

925 
	#X509V3_F_HEX_TO_STRING
 111

	)

926 
	#X509V3_F_I2S_ASN1_ENUMERATED
 121

	)

927 
	#X509V3_F_I2S_ASN1_IA5STRING
 149

	)

928 
	#X509V3_F_I2S_ASN1_INTEGER
 120

	)

929 
	#X509V3_F_I2V_AUTHORITY_INFO_ACCESS
 138

	)

930 
	#X509V3_F_NOTICE_SECTION
 132

	)

931 
	#X509V3_F_NREF_NOS
 133

	)

932 
	#X509V3_F_POLICY_SECTION
 131

	)

933 
	#X509V3_F_PROCESS_PCI_VALUE
 150

	)

934 
	#X509V3_F_R2I_CERTPOL
 130

	)

935 
	#X509V3_F_R2I_PCI
 155

	)

936 
	#X509V3_F_S2I_ASN1_IA5STRING
 100

	)

937 
	#X509V3_F_S2I_ASN1_INTEGER
 108

	)

938 
	#X509V3_F_S2I_ASN1_OCTET_STRING
 112

	)

939 
	#X509V3_F_S2I_ASN1_SKEY_ID
 114

	)

940 
	#X509V3_F_S2I_SKEY_ID
 115

	)

941 
	#X509V3_F_SET_DIST_POINT_NAME
 158

	)

942 
	#X509V3_F_STRING_TO_HEX
 113

	)

943 
	#X509V3_F_SXNET_ADD_ID_ASC
 125

	)

944 
	#X509V3_F_SXNET_ADD_ID_INTEGER
 126

	)

945 
	#X509V3_F_SXNET_ADD_ID_ULONG
 127

	)

946 
	#X509V3_F_SXNET_GET_ID_ASC
 128

	)

947 
	#X509V3_F_SXNET_GET_ID_ULONG
 129

	)

948 
	#X509V3_F_V2I_ASIDENTIFIERS
 163

	)

949 
	#X509V3_F_V2I_ASN1_BIT_STRING
 101

	)

950 
	#X509V3_F_V2I_AUTHORITY_INFO_ACCESS
 139

	)

951 
	#X509V3_F_V2I_AUTHORITY_KEYID
 119

	)

952 
	#X509V3_F_V2I_BASIC_CONSTRAINTS
 102

	)

953 
	#X509V3_F_V2I_CRLD
 134

	)

954 
	#X509V3_F_V2I_EXTENDED_KEY_USAGE
 103

	)

955 
	#X509V3_F_V2I_GENERAL_NAMES
 118

	)

956 
	#X509V3_F_V2I_GENERAL_NAME_EX
 117

	)

957 
	#X509V3_F_V2I_IDP
 157

	)

958 
	#X509V3_F_V2I_IPADDRBLOCKS
 159

	)

959 
	#X509V3_F_V2I_ISSUER_ALT
 153

	)

960 
	#X509V3_F_V2I_NAME_CONSTRAINTS
 147

	)

961 
	#X509V3_F_V2I_POLICY_CONSTRAINTS
 146

	)

962 
	#X509V3_F_V2I_POLICY_MAPPINGS
 145

	)

963 
	#X509V3_F_V2I_SUBJECT_ALT
 154

	)

964 
	#X509V3_F_V3_ADDR_VALIDATE_PATH_INTERNAL
 160

	)

965 
	#X509V3_F_V3_GENERIC_EXTENSION
 116

	)

966 
	#X509V3_F_X509V3_ADD1_I2D
 140

	)

967 
	#X509V3_F_X509V3_ADD_VALUE
 105

	)

968 
	#X509V3_F_X509V3_EXT_ADD
 104

	)

969 
	#X509V3_F_X509V3_EXT_ADD_ALIAS
 106

	)

970 
	#X509V3_F_X509V3_EXT_CONF
 107

	)

971 
	#X509V3_F_X509V3_EXT_FREE
 165

	)

972 
	#X509V3_F_X509V3_EXT_I2D
 136

	)

973 
	#X509V3_F_X509V3_EXT_NCONF
 152

	)

974 
	#X509V3_F_X509V3_GET_SECTION
 142

	)

975 
	#X509V3_F_X509V3_GET_STRING
 143

	)

976 
	#X509V3_F_X509V3_GET_VALUE_BOOL
 110

	)

977 
	#X509V3_F_X509V3_PARSE_LIST
 109

	)

978 
	#X509V3_F_X509_PURPOSE_ADD
 137

	)

979 
	#X509V3_F_X509_PURPOSE_SET
 141

	)

982 
	#X509V3_R_BAD_IP_ADDRESS
 118

	)

983 
	#X509V3_R_BAD_OBJECT
 119

	)

984 
	#X509V3_R_BN_DEC2BN_ERROR
 100

	)

985 
	#X509V3_R_BN_TO_ASN1_INTEGER_ERROR
 101

	)

986 
	#X509V3_R_CANNOT_FIND_FREE_FUNCTION
 168

	)

987 
	#X509V3_R_DIRNAME_ERROR
 149

	)

988 
	#X509V3_R_DISTPOINT_ALREADY_SET
 160

	)

989 
	#X509V3_R_DUPLICATE_ZONE_ID
 133

	)

990 
	#X509V3_R_ERROR_CONVERTING_ZONE
 131

	)

991 
	#X509V3_R_ERROR_CREATING_EXTENSION
 144

	)

992 
	#X509V3_R_ERROR_IN_EXTENSION
 128

	)

993 
	#X509V3_R_EXPECTED_A_SECTION_NAME
 137

	)

994 
	#X509V3_R_EXTENSION_EXISTS
 145

	)

995 
	#X509V3_R_EXTENSION_NAME_ERROR
 115

	)

996 
	#X509V3_R_EXTENSION_NOT_FOUND
 102

	)

997 
	#X509V3_R_EXTENSION_SETTING_NOT_SUPPORTED
 103

	)

998 
	#X509V3_R_EXTENSION_VALUE_ERROR
 116

	)

999 
	#X509V3_R_ILLEGAL_EMPTY_EXTENSION
 151

	)

1000 
	#X509V3_R_ILLEGAL_HEX_DIGIT
 113

	)

1001 
	#X509V3_R_INCORRECT_POLICY_SYNTAX_TAG
 152

	)

1002 
	#X509V3_R_INVALID_ASNUMBER
 162

	)

1003 
	#X509V3_R_INVALID_ASRANGE
 163

	)

1004 
	#X509V3_R_INVALID_BOOLEAN_STRING
 104

	)

1005 
	#X509V3_R_INVALID_EXTENSION_STRING
 105

	)

1006 
	#X509V3_R_INVALID_INHERITANCE
 165

	)

1007 
	#X509V3_R_INVALID_IPADDRESS
 166

	)

1008 
	#X509V3_R_INVALID_MULTIPLE_RDNS
 161

	)

1009 
	#X509V3_R_INVALID_NAME
 106

	)

1010 
	#X509V3_R_INVALID_NULL_ARGUMENT
 107

	)

1011 
	#X509V3_R_INVALID_NULL_NAME
 108

	)

1012 
	#X509V3_R_INVALID_NULL_VALUE
 109

	)

1013 
	#X509V3_R_INVALID_NUMBER
 140

	)

1014 
	#X509V3_R_INVALID_NUMBERS
 141

	)

1015 
	#X509V3_R_INVALID_OBJECT_IDENTIFIER
 110

	)

1016 
	#X509V3_R_INVALID_OPTION
 138

	)

1017 
	#X509V3_R_INVALID_POLICY_IDENTIFIER
 134

	)

1018 
	#X509V3_R_INVALID_PROXY_POLICY_SETTING
 153

	)

1019 
	#X509V3_R_INVALID_PURPOSE
 146

	)

1020 
	#X509V3_R_INVALID_SAFI
 164

	)

1021 
	#X509V3_R_INVALID_SECTION
 135

	)

1022 
	#X509V3_R_INVALID_SYNTAX
 143

	)

1023 
	#X509V3_R_ISSUER_DECODE_ERROR
 126

	)

1024 
	#X509V3_R_MISSING_VALUE
 124

	)

1025 
	#X509V3_R_NEED_ORGANIZATION_AND_NUMBERS
 142

	)

1026 
	#X509V3_R_NO_CONFIG_DATABASE
 136

	)

1027 
	#X509V3_R_NO_ISSUER_CERTIFICATE
 121

	)

1028 
	#X509V3_R_NO_ISSUER_DETAILS
 127

	)

1029 
	#X509V3_R_NO_POLICY_IDENTIFIER
 139

	)

1030 
	#X509V3_R_NO_PROXY_CERT_POLICY_LANGUAGE_DEFINED
 154

	)

1031 
	#X509V3_R_NO_PUBLIC_KEY
 114

	)

1032 
	#X509V3_R_NO_SUBJECT_DETAILS
 125

	)

1033 
	#X509V3_R_ODD_NUMBER_OF_DIGITS
 112

	)

1034 
	#X509V3_R_OPERATION_NOT_DEFINED
 148

	)

1035 
	#X509V3_R_OTHERNAME_ERROR
 147

	)

1036 
	#X509V3_R_POLICY_LANGUAGE_ALREADY_DEFINED
 155

	)

1037 
	#X509V3_R_POLICY_PATH_LENGTH
 156

	)

1038 
	#X509V3_R_POLICY_PATH_LENGTH_ALREADY_DEFINED
 157

	)

1039 
	#X509V3_R_POLICY_SYNTAX_NOT_CURRENTLY_SUPPORTED
 158

	)

1040 
	#X509V3_R_POLICY_WHEN_PROXY_LANGUAGE_REQUIRES_NO_POLICY
 159

	)

1041 
	#X509V3_R_SECTION_NOT_FOUND
 150

	)

1042 
	#X509V3_R_UNABLE_TO_GET_ISSUER_DETAILS
 122

	)

1043 
	#X509V3_R_UNABLE_TO_GET_ISSUER_KEYID
 123

	)

1044 
	#X509V3_R_UNKNOWN_BIT_STRING_ARGUMENT
 111

	)

1045 
	#X509V3_R_UNKNOWN_EXTENSION
 129

	)

1046 
	#X509V3_R_UNKNOWN_EXTENSION_NAME
 130

	)

1047 
	#X509V3_R_UNKNOWN_OPTION
 120

	)

1048 
	#X509V3_R_UNSUPPORTED_OPTION
 117

	)

1049 
	#X509V3_R_UNSUPPORTED_TYPE
 167

	)

1050 
	#X509V3_R_USER_TOO_LONG
 132

	)

1052 #ifde‡ 
__˝lu•lus


	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


85 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


86 
	#PTHREAD_MUTEX_INITIALIZER
 \

87 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

88 #ifde‡
__USE_GNU


89 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

90 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

91 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

92 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

93 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

94 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

98 
	#PTHREAD_MUTEX_INITIALIZER
 \

99 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

100 #ifde‡
__USE_GNU


101 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

102 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

103 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

105 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

113 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


116 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

117 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

119 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


125 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


126 #i‡
__WORDSIZE
 == 64

127 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

132 
	#PTHREAD_RWLOCK_INITIALIZER
 \

133 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

134 #ifde‡
__USE_GNU


135 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


136 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

137 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, \

138 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

140 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


141 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

142 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

143 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

145 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

146 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

147 0 } }

	)

157 
	mPTHREAD_INHERIT_SCHED
,

158 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

159 
	mPTHREAD_EXPLICIT_SCHED


160 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

167 
	mPTHREAD_SCOPE_SYSTEM
,

168 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

169 
	mPTHREAD_SCOPE_PROCESS


170 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

177 
	mPTHREAD_PROCESS_PRIVATE
,

178 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

179 
	mPTHREAD_PROCESS_SHARED


180 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

186 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

190 
	s_±hªad_˛ónup_buf„r


192 (*
	m__routöe
) (*);

193 *
	m__¨g
;

194 
	m__ˇn˚…y≥
;

195 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

201 
	mPTHREAD_CANCEL_ENABLE
,

202 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

203 
	mPTHREAD_CANCEL_DISABLE


204 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

208 
	mPTHREAD_CANCEL_DEFERRED
,

209 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

210 
	mPTHREAD_CANCEL_ASYNCHRONOUS


211 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

213 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

217 
	#PTHREAD_ONCE_INIT
 0

	)

220 #ifde‡
__USE_XOPEN2K


224 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

228 
__BEGIN_DECLS


233 
	$±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

234 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

235 *(*
__°¨t_routöe
) (*),

236 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

242 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

250 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

252 #ifde‡
__USE_GNU


255 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

263 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

264 c⁄° 
time•ec
 *
__ab°ime
);

271 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

275 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

278 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

279 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

287 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

291 
__THROW
 
	`__n⁄nuŒ
 ((1));

294 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

295 *
__dëach°©e
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

299 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

300 
__dëach°©e
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 
size_t
 *
__gu¨dsize
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

311 
size_t
 
__gu¨dsize
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

317 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

322 c⁄° 
sched_∑øm
 *
__ª°ri˘


323 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

326 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


327 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

331 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

332 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


336 
__©å
, *
__ª°ri˘
 
__öhîô
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

340 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

341 
__öhîô
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

347 *
__ª°ri˘
 
__sc›e
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

352 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


356 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

363 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

364 *
__°ackaddr
)

365 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

368 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


369 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

370 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

375 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

376 
size_t
 
__°acksize
)

377 
__THROW
 
	`__n⁄nuŒ
 ((1));

379 #ifde‡
__USE_XOPEN2K


381 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

382 **
__ª°ri˘
 
__°ackaddr
,

383 
size_t
 *
__ª°ri˘
 
__°acksize
)

384 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

389 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

390 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 #ifde‡
__USE_GNU


396 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

397 
size_t
 
__˝u£tsize
,

398 c⁄° 
˝u_£t_t
 *
__˝u£t
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

403 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

404 
size_t
 
__˝u£tsize
,

405 
˝u_£t_t
 *
__˝u£t
)

406 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

409 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1));

414 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

415 
__THROW
 
	`__n⁄nuŒ
 ((1));

420 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2));

429 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

430 c⁄° 
sched_∑øm
 *
__∑øm
)

431 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

435 *
__ª°ri˘
 
__pﬁicy
,

436 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

437 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

440 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

441 
__THROW
;

444 #ifde‡
__USE_GNU


446 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

447 
size_t
 
__buÊí
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

452 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 #ifde‡
__USE_UNIX98


458 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

461 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

464 #ifde‡
__USE_GNU


469 
	$±hªad_yõld
 (Ë
__THROW
;

474 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

475 c⁄° 
˝u_£t_t
 *
__˝u£t
)

476 
__THROW
 
	`__n⁄nuŒ
 ((3));

479 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

480 
˝u_£t_t
 *
__˝u£t
)

481 
__THROW
 
	`__n⁄nuŒ
 ((3));

494 
	$±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

495 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

506 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

510 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

513 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

518 
	`±hªad_ã°ˇn˚l
 ();

527 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

528 
__mask_was_ßved
;

529 } 
__ˇn˚l_jmp_buf
[1];

530 *
__∑d
[4];

531 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

534 #i‚de‡
__˛ónup_f˘_©åibuã


535 
	#__˛ónup_f˘_©åibuã


	)

540 
	s__±hªad_˛ónup_‰ame


542 (*
__ˇn˚l_routöe
) (*);

543 *
__ˇn˚l_¨g
;

544 
__do_ô
;

545 
__ˇn˚l_ty≥
;

548 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


549 #ifde‡
__˝lu•lus


551 ˛as†
	c__±hªad_˛ónup_˛ass


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

558 
public
:

559 
	$__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

560 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

561 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

562 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

563 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

564 &
__ˇn˚l_ty≥
); 
	}
}

565 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

575 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

577 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

581 
	#±hªad_˛ónup_p›
(
execuã
) \

582 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

583 } 0)

	)

585 #ifde‡
__USE_GNU


589 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

591 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

592 
__˛‰ame
.
	`__de„r
 ()

	)

597 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

598 
__˛‰ame
.
	`__ª°‹e
 (); \

599 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

600 } 0)

	)

607 
__exã∫_ölöe
 

608 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

610 i‡(
__‰ame
->
__do_ô
)

611 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

612 
	}
}

621 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

623 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

624 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

625 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

626 .
__do_ô
 = 1 };

	)

630 
	#±hªad_˛ónup_p›
(
execuã
) \

631 
__˛‰ame
.
__do_ô
 = (
execuã
); \

632 } 0)

	)

634 #ifde‡
__USE_GNU


638 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

640 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

641 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

642 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

643 .
__do_ô
 = 1 }; \

644 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

645 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

650 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

651 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

652 
__˛‰ame
.
__do_ô
 = (
execuã
); \

653 } 0)

	)

664 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

666 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

667 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

668 *
__ˇn˚l_¨g
 = (
¨g
); \

669 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

670 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

671 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

673 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

674 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

678 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

679 dÿ{

	)

680 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

681 
__˛ónup_f˘_©åibuã
;

685 
	#±hªad_˛ónup_p›
(
execuã
) \

688 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

689 i‡(
execuã
) \

690 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

691 } 0)

	)

692 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

693 
__˛ónup_f˘_©åibuã
;

695 #ifde‡
__USE_GNU


699 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

701 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

702 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

703 *
__ˇn˚l_¨g
 = (
¨g
); \

704 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

705 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

706 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

708 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

709 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

713 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

714 dÿ{

	)

715 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

716 
__˛ónup_f˘_©åibuã
;

721 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

724 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

725 i‡(
execuã
) \

726 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

727 
	}
} 0)

	)

728 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

729 
__˛ónup_f˘_©åibuã
;

733 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

734 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

735 #i‚de‡
SHARED


736 
	`__©åibuã__
 ((
__wók__
))

742 
__jmp_buf_èg
;

743 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

749 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

750 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

751 
__THROW
 
	`__n⁄nuŒ
 ((1));

754 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

755 
__THROW
 
	`__n⁄nuŒ
 ((1));

758 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

759 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

763 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

765 #ifde‡
__USE_XOPEN2K


767 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

768 c⁄° 
time•ec
 *
__ª°ri˘


769 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

773 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

778 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

779 
__ª°ri˘
 
__muãx
,

780 *
__ª°ri˘
 
__¥io˚ûög
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

785 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

786 
__¥io˚ûög
,

787 *
__ª°ri˘
 
__ﬁd_˚ûög
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

791 #ifde‡
__USE_XOPEN2K8


793 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1));

795 #ifde‡
__USE_GNU


796 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

797 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1));

810 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1));

814 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

815 
__ª°ri˘
 
__©å
,

816 *
__ª°ri˘
 
__psh¨ed
)

817 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

820 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

821 
__psh¨ed
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

824 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


826 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


827 
__©å
, *
__ª°ri˘
 
__köd
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

833 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1));

838 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

839 
__ª°ri˘
 
__©å
,

840 *
__ª°ri˘
 
__¥Ÿocﬁ
)

841 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

845 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

846 
__¥Ÿocﬁ
)

847 
__THROW
 
	`__n⁄nuŒ
 ((1));

850 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

851 
__ª°ri˘
 
__©å
,

852 *
__ª°ri˘
 
__¥io˚ûög
)

853 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥io˚ûög
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

860 #ifde‡
__USE_XOPEN2K


862 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

863 *
__robu°√ss
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

865 #ifde‡
__USE_GNU


866 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

867 *
__robu°√ss
)

868 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

872 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

873 
__robu°√ss
)

874 
__THROW
 
	`__n⁄nuŒ
 ((1));

875 #ifde‡
__USE_GNU


876 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

877 
__robu°√ss
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


888 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

889 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


890 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

893 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

894 
__THROW
 
	`__n⁄nuŒ
 ((1));

897 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

898 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

901 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

902 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

904 #ifde‡
__USE_XOPEN2K


906 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

907 c⁄° 
time•ec
 *
__ª°ri˘


908 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

912 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

916 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

917 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

919 #ifde‡
__USE_XOPEN2K


921 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

922 c⁄° 
time•ec
 *
__ª°ri˘


923 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

927 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

934 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

935 
__THROW
 
	`__n⁄nuŒ
 ((1));

938 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

939 
__THROW
 
	`__n⁄nuŒ
 ((1));

942 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

943 
__ª°ri˘
 
__©å
,

944 *
__ª°ri˘
 
__psh¨ed
)

945 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

948 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

949 
__psh¨ed
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__¥ef
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

968 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

969 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

970 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

974 
__THROW
 
	`__n⁄nuŒ
 ((1));

977 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

978 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

981 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

982 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

989 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

990 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

991 
	`__n⁄nuŒ
 ((1, 2));

1000 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1002 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1003 
	`__n⁄nuŒ
 ((1, 2, 3));

1008 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1));

1012 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1013 
__THROW
 
	`__n⁄nuŒ
 ((1));

1016 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1017 
__ª°ri˘
 
__©å
,

1018 *
__ª°ri˘
 
__psh¨ed
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1022 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1023 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1025 #ifde‡
__USE_XOPEN2K


1027 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__˛ockid_t
 
__˛ock_id
)

1035 
__THROW
 
	`__n⁄nuŒ
 ((1));

1039 #ifde‡
__USE_XOPEN2K


1044 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1048 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1049 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1053 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1056 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1057 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1060 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1061 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1068 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1069 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1070 
__©å
, 
__cou¡
)

1071 
__THROW
 
	`__n⁄nuŒ
 ((1));

1074 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1075 
__THROW
 
	`__n⁄nuŒ
 ((1));

1078 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1079 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1083 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1084 
__THROW
 
	`__n⁄nuŒ
 ((1));

1087 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1088 
__THROW
 
	`__n⁄nuŒ
 ((1));

1091 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1092 
__ª°ri˘
 
__©å
,

1093 *
__ª°ri˘
 
__psh¨ed
)

1094 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1097 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1098 
__psh¨ed
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1111 
	$±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1112 (*
__de°r_fun˘i⁄
) (*))

1113 
__THROW
 
	`__n⁄nuŒ
 ((1));

1116 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1119 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1122 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1123 c⁄° *
__poöãr
Ë
__THROW
 ;

1126 #ifde‡
__USE_XOPEN2K


1128 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1129 
__˛ockid_t
 *
__˛ock_id
)

1130 
__THROW
 
	`__n⁄nuŒ
 ((2));

1145 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1146 (*
__∑ª¡
) (),

1147 (*
__chûd
Ë()Ë
__THROW
;

1150 #ifde‡
__USE_EXTERN_INLINES


1152 
__exã∫_ölöe
 

1153 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1155  
__thªad1
 =
__thªad2
;

1156 
	}
}

1159 
	g__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_MISC


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #ifde‡
__USE_POSIX


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #ifde‡
__USE_POSIX


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #ifde‡
__USE_POSIX2


872 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

878 
	`p˛o£
 (
FILE
 *
__°ªam
);

882 #ifdef 
__USE_POSIX


884 *
	$˘îmid
 (*
__s
Ë
__THROW
;

888 #ifde‡
__USE_XOPEN


890 *
	`cu£rid
 (*
__s
);

894 #ifdef 
__USE_GNU


895 
ob°ack
;

898 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

899 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

900 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

901 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

902 c⁄° *
__ª°ri˘
 
__f‹m©
,

903 
_G_va_li°
 
__¨gs
)

904 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

908 #ifde‡
__USE_POSIX


912 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

919 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

922 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


926 
	#__√ed_gë›t


	)

927 
	~<gë›t.h
>

932 #ifde‡
__USE_EXTERN_INLINES


933 
	~<bôs/°dio.h
>

935 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


936 
	~<bôs/°dio2.h
>

938 #ifde‡
__LDBL_COMPAT


939 
	~<bôs/°dio-ldbl.h
>

942 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_MISC


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #ifde‡
__USE_ISOC99


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_MISC


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__USE_ISOC99


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #ifde‡
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #ifde‡
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_MISC


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	$©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #ifde‡
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #ifde‡
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

758 #ifde‡
__USE_EXTERN_INLINES


759 
	~<bôs/°dlib-b£¨ch.h
>

764 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

766 #ifde‡
__USE_GNU


767 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

768 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

769 
	`__n⁄nuŒ
 ((1, 4));

774 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

775 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__END_NAMESPACE_STD


778 #ifde‡
__USE_ISOC99


779 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

780 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__BEGIN_NAMESPACE_STD


788 
div_t
 
	$div
 (
__numî
, 
__díom
)

789 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

790 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

791 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

792 
__END_NAMESPACE_STD


794 #ifde‡
__USE_ISOC99


795 
__BEGIN_NAMESPACE_C99


796 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

797 
__díom
)

798 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

799 
__END_NAMESPACE_C99


803 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

804 || 
deföed
 
__USE_MISC


811 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

812 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

817 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

818 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

824 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

827 #ifde‡
__USE_MISC


829 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

833 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

835 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

836 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

841 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

845 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

846 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

852 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

853 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

854 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

855 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

859 
__BEGIN_NAMESPACE_STD


862 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

865 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

866 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

869 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

873 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

874 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

876 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

877 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

878 
__THROW
;

879 
__END_NAMESPACE_STD


882 #ifde‡
__USE_MISC


887 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


898 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

899 *c⁄° *
__ª°ri˘
 
__tokís
,

900 **
__ª°ri˘
 
__vÆuï
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

905 #ifde‡
__USE_XOPEN


907 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2KXSI


915 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

918 #ifde‡
__USE_XOPEN


923 
	$gø¡±
 (
__fd
Ë
__THROW
;

927 
	$u∆ock±
 (
__fd
Ë
__THROW
;

932 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

935 #ifde‡
__USE_GNU


939 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

940 
__THROW
 
	`__n⁄nuŒ
 ((2));

943 
	`gë±
 ();

946 #ifde‡
__USE_MISC


950 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	~<bôs/°dlib-Êﬂt.h
>

957 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


958 
	~<bôs/°dlib.h
>

960 #ifde‡
__LDBL_COMPAT


961 
	~<bôs/°dlib-ldbl.h
>

965 #unde‡
__√ed_mÆloc_™d_ˇŒoc


967 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


171 *
	$°rdup
 (c⁄° *
__s
)

172 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_XOPEN2K8


179 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

180 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


185 
	#°rdu∑
(
s
) \

186 (
__exãnsi⁄__
 \

188 c⁄° *
__ﬁd
 = (
s
); \

189 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

190 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

191 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

192 
	}
}))

	)

195 
	#°∫du∑
(
s
, 
n
) \

196 (
__exãnsi⁄__
 \

198 c⁄° *
__ﬁd
 = (
s
); \

199 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

200 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

201 
__√w
[
__Àn
] = '\0'; \

202 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

203 }))

	)

206 
	g__BEGIN_NAMESPACE_STD


208 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


211 *
°rchr
 (*
__s
, 
__c
)

212 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

213 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

216 #ifde‡
__OPTIMIZE__


217 
__exã∫_Æways_ölöe
 *

218 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

223 
__exã∫_Æways_ölöe
 const *

224 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


226  
__buûtö_°rchr
 (
__s
, 
__c
);

231 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

232 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


238 *
	`°ºchr
 (*
__s
, 
__c
)

239 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

243 #ifde‡
__OPTIMIZE__


244 
__exã∫_Æways_ölöe
 *

245 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
__exã∫_Æways_ölöe
 const *

251 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


253  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

256 
	}
}

258 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

259 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

261 
__END_NAMESPACE_STD


263 #ifde‡
__USE_GNU


266 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


267 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

268 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

269 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 
__BEGIN_NAMESPACE_STD


280 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

281 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


290 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

291 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 #ifde‡
__OPTIMIZE__


296 
__exã∫_Æways_ölöe
 *

297 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


299  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

302 
__exã∫_Æways_ölöe
 const *

303 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


305  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

308 
	}
}

310 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

311 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


317 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

318 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

322 #ifde‡
__OPTIMIZE__


323 
__exã∫_Æways_ölöe
 *

324 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


326  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

329 
__exã∫_Æways_ölöe
 const *

330 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


332  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

335 
	}
}

337 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

338 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

343 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2));

345 
__END_NAMESPACE_STD


349 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

350 c⁄° *
__ª°ri˘
 
__dñim
,

351 **
__ª°ri˘
 
__ßve_±r
)

352 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

353 #ifde‡
__USE_POSIX


354 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

355 **
__ª°ri˘
 
__ßve_±r
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

359 #ifde‡
__USE_GNU


361 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


362 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

363 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

365 c⁄° *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

368 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

369 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 #ifde‡
__USE_GNU


377 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

378 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

379 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

383 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

384 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

387 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

392 
__BEGIN_NAMESPACE_STD


394 
size_t
 
	$°æí
 (c⁄° *
__s
)

395 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 
__END_NAMESPACE_STD


398 #ifdef 
__USE_XOPEN2K8


401 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

402 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

406 
__BEGIN_NAMESPACE_STD


408 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

409 
__END_NAMESPACE_STD


410 #ifde‡
__USE_XOPEN2K


418 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


421 #ifde‡
__REDIRECT_NTH


422 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

423 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

424 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

426 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

427 
__THROW
 
	`__n⁄nuŒ
 ((2));

428 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

433 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

434 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

438 #ifde‡
__USE_XOPEN2K8


440 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

446 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

448 #ifde‡
__USE_MISC


450 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

457 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

458 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

461 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


464 *
	`ödex
 (*
__s
, 
__c
)

465 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

466 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

467 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


470 
__exã∫_Æways_ölöe
 *

471 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


473  
	`__buûtö_ödex
 (
__s
, 
__c
);

476 
__exã∫_Æways_ölöe
 const *

477 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


479  
	`__buûtö_ödex
 (
__s
, 
__c
);

482 
	}
}

484 *
	$ödex
 (c⁄° *
__s
, 
__c
)

485 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

489 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


492 *
	`rödex
 (*
__s
, 
__c
)

493 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

495 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


498 
__exã∫_Æways_ölöe
 *

499 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


501  
	`__buûtö_rödex
 (
__s
, 
__c
);

504 
__exã∫_Æways_ölöe
 const *

505 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


507  
	`__buûtö_rödex
 (
__s
, 
__c
);

510 
	}
}

512 *
	$rödex
 (c⁄° *
__s
, 
__c
)

513 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

518 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

522 #ifdef 
__USE_GNU


523 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

524 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

525 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

530 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

534 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

537 #ifdef 
__USE_GNU


540 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

541 
__loˇÀ_t
 
__loc
)

542 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

544 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

545 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

546 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

549 #ifdef 
__USE_MISC


552 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

553 c⁄° *
__ª°ri˘
 
__dñim
)

554 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifdef 
__USE_XOPEN2K8


559 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

562 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

563 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

570 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 #ifdef 
__USE_GNU


579 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

580 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

583 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

586 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

588 #i‚de‡
ba£«me


593 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


594 "C++" *
	$ba£«me
 (*
__fûíame
)

595 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

596 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

597 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

605 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

606 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

607 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


627 
	~<bôs/°rög.h
>

630 
	~<bôs/°rög2.h
>

633 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


635 
	~<bôs/°rög3.h
>

639 #i‡
deföed
 
__USE_GNU
 && deföed 
__OPTIMIZE__
 \

640 && 
deföed
 
__exã∫_Æways_ölöe
 && 
	$__GNUC_PREREQ
 (3,2)

641 #i‡!
deföed
 
_FORCE_INLINES
 && !deföed 
_HAVE_STRING_ARCH_memp˝y


643 #unde‡
memp˝y


644 #unde‡
__memp˝y


645 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

646 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

648 
__exã∫_Æways_ölöe
 *

649 
	$__memp˝y_ölöe
 (*
__ª°ri˘
 
__de°
,

650 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

652  (*Ë
	`mem˝y
 (
__de°
, 
__§c
, 
__n
) + __n;

653 
	}
}

658 
	g__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


119 #unde‡
°©ic_as£π


120 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


152 #unde‡
_DEFAULT_SOURCE


153 
	#_DEFAULT_SOURCE
 1

	)

157 #ifde‡
_GNU_SOURCE


158 #unde‡
_ISOC95_SOURCE


159 
	#_ISOC95_SOURCE
 1

	)

160 #unde‡
_ISOC99_SOURCE


161 
	#_ISOC99_SOURCE
 1

	)

162 #unde‡
_ISOC11_SOURCE


163 
	#_ISOC11_SOURCE
 1

	)

164 #unde‡
_POSIX_SOURCE


165 
	#_POSIX_SOURCE
 1

	)

166 #unde‡
_POSIX_C_SOURCE


167 
	#_POSIX_C_SOURCE
 200809L

	)

168 #unde‡
_XOPEN_SOURCE


169 
	#_XOPEN_SOURCE
 700

	)

170 #unde‡
_XOPEN_SOURCE_EXTENDED


171 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

172 #unde‡
_LARGEFILE64_SOURCE


173 
	#_LARGEFILE64_SOURCE
 1

	)

174 #unde‡
_DEFAULT_SOURCE


175 
	#_DEFAULT_SOURCE
 1

	)

176 #unde‡
_ATFILE_SOURCE


177 
	#_ATFILE_SOURCE
 1

	)

182 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

183 || (!
deföed
 
	g__STRICT_ANSI__
 \

184 && !
deföed
 
	g_ISOC99_SOURCE
 \

185 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

186 && !
deföed
 
	g_XOPEN_SOURCE
))

187 #unde‡
_DEFAULT_SOURCE


188 
	#_DEFAULT_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC11_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

194 
	#__USE_ISOC11
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

200 
	#__USE_ISOC99
 1

	)

204 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

205 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

206 
	#__USE_ISOC95
 1

	)

213 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

214 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

215 
	#__USE_ISOCXX11
 1

	)

221 #ifde‡
_DEFAULT_SOURCE


222 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


223 
	#__USE_POSIX_IMPLICITLY
 1

	)

225 #unde‡
_POSIX_SOURCE


226 
	#_POSIX_SOURCE
 1

	)

227 #unde‡
_POSIX_C_SOURCE


228 
	#_POSIX_C_SOURCE
 200809L

	)

230 #i‡((!
deföed
 
__STRICT_ANSI__
 \

231 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

232 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

233 
	#_POSIX_SOURCE
 1

	)

234 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

235 
	#_POSIX_C_SOURCE
 2

	)

236 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

237 
	#_POSIX_C_SOURCE
 199506L

	)

238 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

239 
	#_POSIX_C_SOURCE
 200112L

	)

241 
	#_POSIX_C_SOURCE
 200809L

	)

243 
	#__USE_POSIX_IMPLICITLY
 1

	)

246 #i‡(
deföed
 
_POSIX_SOURCE
 \

247 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

248 || 
deföed
 
_XOPEN_SOURCE
)

249 
	#__USE_POSIX
 1

	)

252 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


253 
	#__USE_POSIX2
 1

	)

256 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

257 
	#__USE_POSIX199309
 1

	)

260 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

261 
	#__USE_POSIX199506
 1

	)

264 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

265 
	#__USE_XOPEN2K
 1

	)

266 #unde‡
__USE_ISOC95


267 
	#__USE_ISOC95
 1

	)

268 #unde‡
__USE_ISOC99


269 
	#__USE_ISOC99
 1

	)

272 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

273 
	#__USE_XOPEN2K8
 1

	)

274 #unde‡
_ATFILE_SOURCE


275 
	#_ATFILE_SOURCE
 1

	)

278 #ifdef 
_XOPEN_SOURCE


279 
	#__USE_XOPEN
 1

	)

280 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

281 
	#__USE_XOPEN_EXTENDED
 1

	)

282 
	#__USE_UNIX98
 1

	)

283 #unde‡
_LARGEFILE_SOURCE


284 
	#_LARGEFILE_SOURCE
 1

	)

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

286 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

287 
	#__USE_XOPEN2K8
 1

	)

288 
	#__USE_XOPEN2K8XSI
 1

	)

290 
	#__USE_XOPEN2K
 1

	)

291 
	#__USE_XOPEN2KXSI
 1

	)

292 #unde‡
__USE_ISOC95


293 
	#__USE_ISOC95
 1

	)

294 #unde‡
__USE_ISOC99


295 
	#__USE_ISOC99
 1

	)

298 #ifde‡
_XOPEN_SOURCE_EXTENDED


299 
	#__USE_XOPEN_EXTENDED
 1

	)

304 #ifde‡
_LARGEFILE_SOURCE


305 
	#__USE_LARGEFILE
 1

	)

308 #ifde‡
_LARGEFILE64_SOURCE


309 
	#__USE_LARGEFILE64
 1

	)

312 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

313 
	#__USE_FILE_OFFSET64
 1

	)

316 #i‡
deföed
 
_DEFAULT_SOURCE


317 
	#__USE_MISC
 1

	)

320 #ifdef 
_ATFILE_SOURCE


321 
	#__USE_ATFILE
 1

	)

324 #ifdef 
_GNU_SOURCE


325 
	#__USE_GNU
 1

	)

328 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


329 
	#__USE_REENTRANT
 1

	)

332 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

333 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

334 #i‡
_FORTIFY_SOURCE
 > 1

335 
	#__USE_FORTIFY_LEVEL
 2

	)

337 
	#__USE_FORTIFY_LEVEL
 1

	)

340 
	#__USE_FORTIFY_LEVEL
 0

	)

345 
	~<°dc-¥edef.h
>

353 #unde‡
__GNU_LIBRARY__


354 
	#__GNU_LIBRARY__
 6

	)

358 
	#__GLIBC__
 2

	)

359 
	#__GLIBC_MINOR__
 23

	)

361 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

362 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

365 #i‚de‡
__ASSEMBLER__


366 #i‚de‡
_SYS_CDEFS_H


367 
	~<sys/cdefs.h
>

372 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


373 
	#__USE_LARGEFILE
 1

	)

374 
	#__USE_LARGEFILE64
 1

	)

380 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

381 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

382 && 
deföed
 
	g__exã∫_ölöe


383 
	#__USE_EXTERN_INLINES
 1

	)

391 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


150 
	t_IO_lock_t
;

156 
	s_IO_m¨kî
 {

157 
_IO_m¨kî
 *
	m_√xt
;

158 
_IO_FILE
 *
	m_sbuf
;

162 
	m_pos
;

164 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

165 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

166 
	mpublic
:

167 
°ªamm¨kî
(
°ªambuf
 *
sb
);

168 ~
°ªamm¨kî
();

169 
ßvög
(Ë{  
	m_•os
 == -2; }

170 
dñè
(
°ªamm¨kî
&);

171 
dñè
();

176 
	e__codecvt_ªsu…


178 
	m__codecvt_ok
,

179 
	m__codecvt_∑πül
,

180 
	m__codecvt_îr‹
,

181 
	m__codecvt_noc⁄v


184 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


187 
	s_IO_codecvt


189 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

190 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

191 
	m__mb°©e_t
 *,

192 c⁄° 
	mwch¨_t
 *,

193 c⁄° 
	mwch¨_t
 *,

194 c⁄° 
	mwch¨_t
 **, *,

196 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

197 
	m__mb°©e_t
 *, *,

199 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

200 
	m__mb°©e_t
 *,

202 c⁄° **, 
	mwch¨_t
 *,

203 
	mwch¨_t
 *, wchar_t **);

204 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

205 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

206 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

207 c⁄° *, c⁄° *, 
	m_IO_size_t
);

208 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

210 
_IO_ic⁄v_t
 
	m__cd_ö
;

211 
_IO_ic⁄v_t
 
	m__cd_out
;

215 
	s_IO_wide_d©a


217 
wch¨_t
 *
	m_IO_ªad_±r
;

218 
wch¨_t
 *
	m_IO_ªad_íd
;

219 
wch¨_t
 *
	m_IO_ªad_ba£
;

220 
wch¨_t
 *
	m_IO_wrôe_ba£
;

221 
wch¨_t
 *
	m_IO_wrôe_±r
;

222 
wch¨_t
 *
	m_IO_wrôe_íd
;

223 
wch¨_t
 *
	m_IO_buf_ba£
;

224 
wch¨_t
 *
	m_IO_buf_íd
;

226 
wch¨_t
 *
	m_IO_ßve_ba£
;

227 
wch¨_t
 *
	m_IO_backup_ba£
;

229 
wch¨_t
 *
	m_IO_ßve_íd
;

231 
__mb°©e_t
 
	m_IO_°©e
;

232 
__mb°©e_t
 
	m_IO_œ°_°©e
;

233 
_IO_codecvt
 
	m_codecvt
;

235 
wch¨_t
 
	m_sh‹tbuf
[1];

237 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

241 
	s_IO_FILE
 {

242 
	m_Êags
;

243 
	#_IO_fûe_Êags
 
_Êags


	)

247 * 
	m_IO_ªad_±r
;

248 * 
	m_IO_ªad_íd
;

249 * 
	m_IO_ªad_ba£
;

250 * 
	m_IO_wrôe_ba£
;

251 * 
	m_IO_wrôe_±r
;

252 * 
	m_IO_wrôe_íd
;

253 * 
	m_IO_buf_ba£
;

254 * 
	m_IO_buf_íd
;

256 *
	m_IO_ßve_ba£
;

257 *
	m_IO_backup_ba£
;

258 *
	m_IO_ßve_íd
;

260 
_IO_m¨kî
 *
	m_m¨kîs
;

262 
_IO_FILE
 *
	m_chaö
;

264 
	m_fûío
;

266 
	m_blksize
;

268 
	m_Êags2
;

270 
_IO_off_t
 
	m_ﬁd_off£t
;

272 
	#__HAVE_COLUMN


	)

274 
	m_cur_cﬁumn
;

275 sig√d 
	m_vèbÀ_off£t
;

276 
	m_sh‹tbuf
[1];

280 
_IO_lock_t
 *
	m_lock
;

281 #ifde‡
_IO_USE_OLD_IO_FILE


284 
	s_IO_FILE_com∂ëe


286 
_IO_FILE
 
	m_fûe
;

288 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

289 
_IO_off64_t
 
	m_off£t
;

290 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


292 
_IO_codecvt
 *
	m_codecvt
;

293 
_IO_wide_d©a
 *
	m_wide_d©a
;

294 
_IO_FILE
 *
	m_‰ìªs_li°
;

295 *
	m_‰ìªs_buf
;

297 *
	m__∑d1
;

298 *
	m__∑d2
;

299 *
	m__∑d3
;

300 *
	m__∑d4
;

302 
size_t
 
	m__∑d5
;

303 
	m_mode
;

305 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

309 #i‚de‡
__˝lu•lus


310 
_IO_FILE
 
	t_IO_FILE
;

313 
	g_IO_FILE_∂us
;

315 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

316 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

317 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

318 #i‚de‡
_LIBC


319 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

320 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

321 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

323 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

324 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

325 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

333 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

341 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

342 
	tsize_t
 
	t__n
);

350 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

353 
	t__io_˛o£_‚
 (*
	t__cookõ
);

356 #ifde‡
_GNU_SOURCE


358 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

359 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

360 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

361 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

366 
__io_ªad_‚
 *
	mªad
;

367 
__io_wrôe_‚
 *
	mwrôe
;

368 
__io_£ek_‚
 *
	m£ek
;

369 
__io_˛o£_‚
 *
	m˛o£
;

370 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

371 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

373 
	g_IO_cookõ_fûe
;

376 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

377 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

381 #ifde‡
__˝lu•lus


385 
__undîÊow
 (
_IO_FILE
 *);

386 
__uÊow
 (
_IO_FILE
 *);

387 
__ovîÊow
 (
_IO_FILE
 *, );

388 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


389 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

390 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

391 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

394 #i‡ 
__GNUC__
 >= 3

395 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

397 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

400 
	#_IO_gëc_u∆ocked
(
_Â
) \

401 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

402 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

403 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

404 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

405 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

406 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

407 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

408 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

409 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

410 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

412 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


413 
	#_IO_gëwc_u∆ocked
(
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

415 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

416 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

417 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

418 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

422 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

423 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

426 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

427 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

429 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

430 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

431 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

432 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

434 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

437 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

438 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

440 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

441 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

442 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

444 #ifde‡
_IO_MTSAFE_IO


445 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

446 
	#_IO_Êockfûe
(
_Â
) \

447 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

448 
	#_IO_fu∆ockfûe
(
_Â
) \

449 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
Ë

	)

453 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

454 
	#_IO_·rylockfûe
(
_Â
Ë

	)

455 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

456 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

459 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

460 
_IO_va_li°
, *
__ª°ri˘
);

461 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

462 
_IO_va_li°
);

463 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

464 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

466 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

467 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

469 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

471 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


472 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

473 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

474 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

475 #i‡
__GNUC__
 >= 2

478 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


479 
	~<shlib-com∑t.h
>

480 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

481 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

482 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

483 c⁄° 
_IO_°dö_u£d
;

484 
wók_exã∫
 (
_IO_°dö_u£d
);

487 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


488 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

492 
	#_IO_fwide
(
__Â
, 
__mode
) \

493 ({ 
__ªsu…
 = (
__mode
); \

494 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

496 i‡((
__Â
)->
_mode
 == 0) \

498 (
__Â
)->
_mode
 = -1; \

499 
__ªsu…
 = (
__Â
)->
_mode
; \

501 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

502 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

504 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

505 
__ªsu…
; })

	)

508 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

509 
_IO_va_li°
, *
__ª°ri˘
);

510 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

511 
_IO_va_li°
);

512 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

513 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

516 #ifde‡
__LDBL_COMPAT


517 
	~<bôs/libio-ldbl.h
>

520 #ifde‡
__˝lu•lus


	@/usr/include/openssl/des_old.h

93 #i‚de‡
HEADER_DES_H


94 
	#HEADER_DES_H


	)

96 
	~<›ís¶/e_os2.h
>

98 #ifde‡
OPENSSL_NO_DES


99 #îr‹ 
DES
 
is
 
dißbÀd
.

102 #i‚de‡
HEADER_NEW_DES_H


103 #îr‹ 
You
 
mu°
 
ö˛ude
 
des
.
h
, 
nŸ
 
des_ﬁd
.h 
dúe˘ly
.

106 #ifde‡
_KERBEROS_DES_H


107 #îr‹ <
›ís¶
/
des_ﬁd
.
h
> 
ª∂a˚s
 <
kîbîos
/
des
.h>.

110 
	~<›ís¶/symhacks.h
>

112 #ifde‡
OPENSSL_BUILD_SHLIBCRYPTO


113 #unde‡
OPENSSL_EXTERN


114 
	#OPENSSL_EXTERN
 
OPENSSL_EXPORT


	)

117 #ifde‡ 
__˝lu•lus


121 #ifde‡
_


122 #unde‡
_


125 
	t_os¶_ﬁd_des_cblock
[8];

126 
	s_os¶_ﬁd_des_ks_°ru˘
 {

128 
_os¶_ﬁd_des_cblock
 
_
;

132 
DES_LONG
 
∑d
[2];

133 } 
ks
;

134 } 
	t_os¶_ﬁd_des_key_scheduÀ
[16];

136 #i‚de‡
OPENSSL_DES_LIBDES_COMPATIBILITY


137 
	#des_cblock
 
DES_cblock


	)

138 
	#c⁄°_des_cblock
 
c⁄°_DES_cblock


	)

139 
	#des_key_scheduÀ
 
DES_key_scheduÀ


	)

140 
	#des_ecb3_í¸y±
(
i
,
o
,
k1
,
k2
,
k3
,
e
)\

141 
	`DES_ecb3_í¸y±
((
i
),(
o
),&(
k1
),&(
k2
),&(
k3
),(
e
))

	)

142 
	#des_ede3_cbc_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
k3
,
iv
,
e
)\

143 
	`DES_ede3_cbc_í¸y±
((
i
),(
o
),(
l
),&(
k1
),&(
k2
),&(
k3
),(
iv
),(
e
))

	)

144 
	#des_ede3_cbcm_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
k3
,
iv1
,
iv2
,
e
)\

145 
	`DES_ede3_cbcm_í¸y±
((
i
),(
o
),(
l
),&(
k1
),&(
k2
),&(
k3
),(
iv1
),(
iv2
),(
e
))

	)

146 
	#des_ede3_cfb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
k3
,
iv
,
n
,
e
)\

147 
	`DES_ede3_cfb64_í¸y±
((
i
),(
o
),(
l
),&(
k1
),&(
k2
),&(
k3
),(
iv
),(
n
),(
e
))

	)

148 
	#des_ede3_ofb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
k3
,
iv
,
n
)\

149 
	`DES_ede3_ofb64_í¸y±
((
i
),(
o
),(
l
),&(
k1
),&(
k2
),&(
k3
),(
iv
),(
n
))

	)

150 
	#des_›ti⁄s
()\

151 
	`DES_›ti⁄s
()

	)

152 
	#des_cbc_cksum
(
i
,
o
,
l
,
k
,
iv
)\

153 
	`DES_cbc_cksum
((
i
),(
o
),(
l
),&(
k
),(
iv
))

	)

154 
	#des_cbc_í¸y±
(
i
,
o
,
l
,
k
,
iv
,
e
)\

155 
	`DES_cbc_í¸y±
((
i
),(
o
),(
l
),&(
k
),(
iv
),(
e
))

	)

156 
	#des_ncbc_í¸y±
(
i
,
o
,
l
,
k
,
iv
,
e
)\

157 
	`DES_ncbc_í¸y±
((
i
),(
o
),(
l
),&(
k
),(
iv
),(
e
))

	)

158 
	#des_xcbc_í¸y±
(
i
,
o
,
l
,
k
,
iv
,
öw
,
outw
,
e
)\

159 
	`DES_xcbc_í¸y±
((
i
),(
o
),(
l
),&(
k
),(
iv
),(
öw
),(
outw
),(
e
))

	)

160 
	#des_cfb_í¸y±
(
i
,
o
,
n
,
l
,
k
,
iv
,
e
)\

161 
	`DES_cfb_í¸y±
((
i
),(
o
),(
n
),(
l
),&(
k
),(
iv
),(
e
))

	)

162 
	#des_ecb_í¸y±
(
i
,
o
,
k
,
e
)\

163 
	`DES_ecb_í¸y±
((
i
),(
o
),&(
k
),(
e
))

	)

164 
	#des_í¸y±1
(
d
,
k
,
e
)\

165 
	`DES_í¸y±1
((
d
),&(
k
),(
e
))

	)

166 
	#des_í¸y±2
(
d
,
k
,
e
)\

167 
	`DES_í¸y±2
((
d
),&(
k
),(
e
))

	)

168 
	#des_í¸y±3
(
d
,
k1
,
k2
,
k3
)\

169 
	`DES_í¸y±3
((
d
),&(
k1
),&(
k2
),&(
k3
))

	)

170 
	#des_de¸y±3
(
d
,
k1
,
k2
,
k3
)\

171 
	`DES_de¸y±3
((
d
),&(
k1
),&(
k2
),&(
k3
))

	)

172 
	#des_xwhôe_ö2out
(
k
,
i
,
o
)\

173 
	`DES_xwhôe_ö2out
((
k
),(
i
),(
o
))

	)

174 
	#des_íc_ªad
(
f
,
b
,
l
,
k
,
iv
)\

175 
	`DES_íc_ªad
((
f
),(
b
),(
l
),&(
k
),(
iv
))

	)

176 
	#des_íc_wrôe
(
f
,
b
,
l
,
k
,
iv
)\

177 
	`DES_íc_wrôe
((
f
),(
b
),(
l
),&(
k
),(
iv
))

	)

178 
	#des_f¸y±
(
b
,
s
,
r
)\

179 
	`DES_f¸y±
((
b
),(
s
),(
r
))

	)

181 
	#des_¸y±
(
b
,
s
)\

182 
	`DES_¸y±
((
b
),(
s
))

	)

183 #i‡!
deföed
(
PERL5
Ë&& !deföed(
__FªeBSD__
Ë&& !deföed(
NeXT
Ë&& !deföed(
__O≥nBSD__
)

184 
	#¸y±
(
b
,
s
)\

185 
	`DES_¸y±
((
b
),(
s
))

	)

188 
	#des_ofb_í¸y±
(
i
,
o
,
n
,
l
,
k
,
iv
)\

189 
	`DES_ofb_í¸y±
((
i
),(
o
),(
n
),(
l
),&(
k
),(
iv
))

	)

190 
	#des_pcbc_í¸y±
(
i
,
o
,
l
,
k
,
iv
,
e
)\

191 
	`DES_pcbc_í¸y±
((
i
),(
o
),(
l
),&(
k
),(
iv
),(
e
))

	)

192 
	#des_quad_cksum
(
i
,
o
,
l
,
c
,
s
)\

193 
	`DES_quad_cksum
((
i
),(
o
),(
l
),(
c
),(
s
))

	)

194 
	#des_øndom_£ed
(
k
)\

195 
	`_os¶_096_des_øndom_£ed
((
k
))

	)

196 
	#des_øndom_key
(
r
)\

197 
	`DES_øndom_key
((
r
))

	)

198 
	#des_ªad_∑ssw‹d
(
k
,
p
,
v
) \

199 
	`DES_ªad_∑ssw‹d
((
k
),(
p
),(
v
))

	)

200 
	#des_ªad_2∑ssw‹ds
(
k1
,
k2
,
p
,
v
) \

201 
	`DES_ªad_2∑ssw‹ds
((
k1
),(
k2
),(
p
),(
v
))

	)

202 
	#des_£t_odd_∑rôy
(
k
)\

203 
	`DES_£t_odd_∑rôy
((
k
))

	)

204 
	#des_check_key_∑rôy
(
k
)\

205 
	`DES_check_key_∑rôy
((
k
))

	)

206 
	#des_is_wók_key
(
k
)\

207 
	`DES_is_wók_key
((
k
))

	)

208 
	#des_£t_key
(
k
,
ks
)\

209 
	`DES_£t_key
((
k
),&(
ks
))

	)

210 
	#des_key_sched
(
k
,
ks
)\

211 
	`DES_key_sched
((
k
),&(
ks
))

	)

212 
	#des_£t_key_checked
(
k
,
ks
)\

213 
	`DES_£t_key_checked
((
k
),&(
ks
))

	)

214 
	#des_£t_key_unchecked
(
k
,
ks
)\

215 
	`DES_£t_key_unchecked
((
k
),&(
ks
))

	)

216 
	#des_°rög_to_key
(
s
,
k
)\

217 
	`DES_°rög_to_key
((
s
),(
k
))

	)

218 
	#des_°rög_to_2keys
(
s
,
k1
,
k2
)\

219 
	`DES_°rög_to_2keys
((
s
),(
k1
),(
k2
))

	)

220 
	#des_cfb64_í¸y±
(
i
,
o
,
l
,
ks
,
iv
,
n
,
e
)\

221 
	`DES_cfb64_í¸y±
((
i
),(
o
),(
l
),&(
ks
),(
iv
),(
n
),(
e
))

	)

222 
	#des_ofb64_í¸y±
(
i
,
o
,
l
,
ks
,
iv
,
n
)\

223 
	`DES_ofb64_í¸y±
((
i
),(
o
),(
l
),&(
ks
),(
iv
),(
n
))

	)

225 
	#des_ecb2_í¸y±
(
i
,
o
,
k1
,
k2
,
e
) \

226 
	`des_ecb3_í¸y±
((
i
),(
o
),(
k1
),(
k2
),(k1),(
e
))

	)

228 
	#des_ede2_cbc_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
e
) \

229 
	`des_ede3_cbc_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
e
))

	)

231 
	#des_ede2_cfb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
n
,
e
) \

232 
	`des_ede3_cfb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
n
),(
e
))

	)

234 
	#des_ede2_ofb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
n
) \

235 
	`des_ede3_ofb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
n
))

	)

237 
	#des_check_key
 
DES_check_key


	)

238 
	#des_rw_mode
 
DES_rw_mode


	)

244 
	#des_cblock
 
_os¶_ﬁd_des_cblock


	)

245 
	#des_key_scheduÀ
 
_os¶_ﬁd_des_key_scheduÀ


	)

246 
	#des_ecb3_í¸y±
(
i
,
o
,
k1
,
k2
,
k3
,
e
)\

247 
	`_os¶_ﬁd_des_ecb3_í¸y±
((
i
),(
o
),(
k1
),(
k2
),(
k3
),(
e
))

	)

248 
	#des_ede3_cbc_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
k3
,
iv
,
e
)\

249 
	`_os¶_ﬁd_des_ede3_cbc_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(
k3
),(
iv
),(
e
))

	)

250 
	#des_ede3_cfb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
k3
,
iv
,
n
,
e
)\

251 
	`_os¶_ﬁd_des_ede3_cfb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(
k3
),(
iv
),(
n
),(
e
))

	)

252 
	#des_ede3_ofb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
k3
,
iv
,
n
)\

253 
	`_os¶_ﬁd_des_ede3_ofb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(
k3
),(
iv
),(
n
))

	)

254 
	#des_›ti⁄s
()\

255 
	`_os¶_ﬁd_des_›ti⁄s
()

	)

256 
	#des_cbc_cksum
(
i
,
o
,
l
,
k
,
iv
)\

257 
	`_os¶_ﬁd_des_cbc_cksum
((
i
),(
o
),(
l
),(
k
),(
iv
))

	)

258 
	#des_cbc_í¸y±
(
i
,
o
,
l
,
k
,
iv
,
e
)\

259 
	`_os¶_ﬁd_des_cbc_í¸y±
((
i
),(
o
),(
l
),(
k
),(
iv
),(
e
))

	)

260 
	#des_ncbc_í¸y±
(
i
,
o
,
l
,
k
,
iv
,
e
)\

261 
	`_os¶_ﬁd_des_ncbc_í¸y±
((
i
),(
o
),(
l
),(
k
),(
iv
),(
e
))

	)

262 
	#des_xcbc_í¸y±
(
i
,
o
,
l
,
k
,
iv
,
öw
,
outw
,
e
)\

263 
	`_os¶_ﬁd_des_xcbc_í¸y±
((
i
),(
o
),(
l
),(
k
),(
iv
),(
öw
),(
outw
),(
e
))

	)

264 
	#des_cfb_í¸y±
(
i
,
o
,
n
,
l
,
k
,
iv
,
e
)\

265 
	`_os¶_ﬁd_des_cfb_í¸y±
((
i
),(
o
),(
n
),(
l
),(
k
),(
iv
),(
e
))

	)

266 
	#des_ecb_í¸y±
(
i
,
o
,
k
,
e
)\

267 
	`_os¶_ﬁd_des_ecb_í¸y±
((
i
),(
o
),(
k
),(
e
))

	)

268 
	#des_í¸y±
(
d
,
k
,
e
)\

269 
	`_os¶_ﬁd_des_í¸y±
((
d
),(
k
),(
e
))

	)

270 
	#des_í¸y±2
(
d
,
k
,
e
)\

271 
	`_os¶_ﬁd_des_í¸y±2
((
d
),(
k
),(
e
))

	)

272 
	#des_í¸y±3
(
d
,
k1
,
k2
,
k3
)\

273 
	`_os¶_ﬁd_des_í¸y±3
((
d
),(
k1
),(
k2
),(
k3
))

	)

274 
	#des_de¸y±3
(
d
,
k1
,
k2
,
k3
)\

275 
	`_os¶_ﬁd_des_de¸y±3
((
d
),(
k1
),(
k2
),(
k3
))

	)

276 
	#des_xwhôe_ö2out
(
k
,
i
,
o
)\

277 
	`_os¶_ﬁd_des_xwhôe_ö2out
((
k
),(
i
),(
o
))

	)

278 
	#des_íc_ªad
(
f
,
b
,
l
,
k
,
iv
)\

279 
	`_os¶_ﬁd_des_íc_ªad
((
f
),(
b
),(
l
),(
k
),(
iv
))

	)

280 
	#des_íc_wrôe
(
f
,
b
,
l
,
k
,
iv
)\

281 
	`_os¶_ﬁd_des_íc_wrôe
((
f
),(
b
),(
l
),(
k
),(
iv
))

	)

282 
	#des_f¸y±
(
b
,
s
,
r
)\

283 
	`_os¶_ﬁd_des_f¸y±
((
b
),(
s
),(
r
))

	)

284 
	#des_¸y±
(
b
,
s
)\

285 
	`_os¶_ﬁd_des_¸y±
((
b
),(
s
))

	)

287 
	#¸y±
(
b
,
s
)\

288 
	`_os¶_ﬁd_¸y±
((
b
),(
s
))

	)

290 
	#des_ofb_í¸y±
(
i
,
o
,
n
,
l
,
k
,
iv
)\

291 
	`_os¶_ﬁd_des_ofb_í¸y±
((
i
),(
o
),(
n
),(
l
),(
k
),(
iv
))

	)

292 
	#des_pcbc_í¸y±
(
i
,
o
,
l
,
k
,
iv
,
e
)\

293 
	`_os¶_ﬁd_des_pcbc_í¸y±
((
i
),(
o
),(
l
),(
k
),(
iv
),(
e
))

	)

294 
	#des_quad_cksum
(
i
,
o
,
l
,
c
,
s
)\

295 
	`_os¶_ﬁd_des_quad_cksum
((
i
),(
o
),(
l
),(
c
),(
s
))

	)

296 
	#des_øndom_£ed
(
k
)\

297 
	`_os¶_ﬁd_des_øndom_£ed
((
k
))

	)

298 
	#des_øndom_key
(
r
)\

299 
	`_os¶_ﬁd_des_øndom_key
((
r
))

	)

300 
	#des_ªad_∑ssw‹d
(
k
,
p
,
v
) \

301 
	`_os¶_ﬁd_des_ªad_∑ssw‹d
((
k
),(
p
),(
v
))

	)

302 
	#des_ªad_2∑ssw‹ds
(
k1
,
k2
,
p
,
v
) \

303 
	`_os¶_ﬁd_des_ªad_2∑ssw‹ds
((
k1
),(
k2
),(
p
),(
v
))

	)

304 
	#des_£t_odd_∑rôy
(
k
)\

305 
	`_os¶_ﬁd_des_£t_odd_∑rôy
((
k
))

	)

306 
	#des_is_wók_key
(
k
)\

307 
	`_os¶_ﬁd_des_is_wók_key
((
k
))

	)

308 
	#des_£t_key
(
k
,
ks
)\

309 
	`_os¶_ﬁd_des_£t_key
((
k
),(
ks
))

	)

310 
	#des_key_sched
(
k
,
ks
)\

311 
	`_os¶_ﬁd_des_key_sched
((
k
),(
ks
))

	)

312 
	#des_°rög_to_key
(
s
,
k
)\

313 
	`_os¶_ﬁd_des_°rög_to_key
((
s
),(
k
))

	)

314 
	#des_°rög_to_2keys
(
s
,
k1
,
k2
)\

315 
	`_os¶_ﬁd_des_°rög_to_2keys
((
s
),(
k1
),(
k2
))

	)

316 
	#des_cfb64_í¸y±
(
i
,
o
,
l
,
ks
,
iv
,
n
,
e
)\

317 
	`_os¶_ﬁd_des_cfb64_í¸y±
((
i
),(
o
),(
l
),(
ks
),(
iv
),(
n
),(
e
))

	)

318 
	#des_ofb64_í¸y±
(
i
,
o
,
l
,
ks
,
iv
,
n
)\

319 
	`_os¶_ﬁd_des_ofb64_í¸y±
((
i
),(
o
),(
l
),(
ks
),(
iv
),(
n
))

	)

321 
	#des_ecb2_í¸y±
(
i
,
o
,
k1
,
k2
,
e
) \

322 
	`des_ecb3_í¸y±
((
i
),(
o
),(
k1
),(
k2
),(k1),(
e
))

	)

324 
	#des_ede2_cbc_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
e
) \

325 
	`des_ede3_cbc_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
e
))

	)

327 
	#des_ede2_cfb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
n
,
e
) \

328 
	`des_ede3_cfb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
n
),(
e
))

	)

330 
	#des_ede2_ofb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
n
) \

331 
	`des_ede3_ofb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
n
))

	)

333 
	#des_check_key
 
DES_check_key


	)

334 
	#des_rw_mode
 
DES_rw_mode


	)

337 c⁄° *
_os¶_ﬁd_des_›ti⁄s
();

338 
_os¶_ﬁd_des_ecb3_í¸y±
(
_os¶_ﬁd_des_cblock
 *
öput
,

339 
_os¶_ﬁd_des_cblock
 *
ouçut
,

340 
_os¶_ﬁd_des_key_scheduÀ
 
ks1
,

341 
_os¶_ﬁd_des_key_scheduÀ
 
ks2
,

342 
_os¶_ﬁd_des_key_scheduÀ
 
ks3
, 
íc
);

343 
DES_LONG
 
_os¶_ﬁd_des_cbc_cksum
(
_os¶_ﬁd_des_cblock
 *
öput
,

344 
_os¶_ﬁd_des_cblock
 *
ouçut
, 
Àngth
,

345 
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
,

346 
_os¶_ﬁd_des_cblock
 *
ivec
);

347 
_os¶_ﬁd_des_cbc_í¸y±
(
_os¶_ﬁd_des_cblock
 *
öput
,

348 
_os¶_ﬁd_des_cblock
 *
ouçut
, 
Àngth
,

349 
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
,

350 
_os¶_ﬁd_des_cblock
 *
ivec
, 
íc
);

351 
_os¶_ﬁd_des_ncbc_í¸y±
(
_os¶_ﬁd_des_cblock
 *
öput
,

352 
_os¶_ﬁd_des_cblock
 *
ouçut
, 
Àngth
,

353 
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
,

354 
_os¶_ﬁd_des_cblock
 *
ivec
, 
íc
);

355 
_os¶_ﬁd_des_xcbc_í¸y±
(
_os¶_ﬁd_des_cblock
 *
öput
,

356 
_os¶_ﬁd_des_cblock
 *
ouçut
, 
Àngth
,

357 
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
,

358 
_os¶_ﬁd_des_cblock
 *
ivec
,

359 
_os¶_ﬁd_des_cblock
 *
öw
,

360 
_os¶_ﬁd_des_cblock
 *
outw
, 
íc
);

361 
_os¶_ﬁd_des_cfb_í¸y±
(*
ö
, *
out
,

362 
numbôs
, 
Àngth
,

363 
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
,

364 
_os¶_ﬁd_des_cblock
 *
ivec
, 
íc
);

365 
_os¶_ﬁd_des_ecb_í¸y±
(
_os¶_ﬁd_des_cblock
 *
öput
,

366 
_os¶_ﬁd_des_cblock
 *
ouçut
,

367 
_os¶_ﬁd_des_key_scheduÀ
 
ks
, 
íc
);

368 
_os¶_ﬁd_des_í¸y±
(
DES_LONG
 *
d©a
, 
_os¶_ﬁd_des_key_scheduÀ
 
ks
,

369 
íc
);

370 
_os¶_ﬁd_des_í¸y±2
(
DES_LONG
 *
d©a
, 
_os¶_ﬁd_des_key_scheduÀ
 
ks
,

371 
íc
);

372 
_os¶_ﬁd_des_í¸y±3
(
DES_LONG
 *
d©a
, 
_os¶_ﬁd_des_key_scheduÀ
 
ks1
,

373 
_os¶_ﬁd_des_key_scheduÀ
 
ks2
,

374 
_os¶_ﬁd_des_key_scheduÀ
 
ks3
);

375 
_os¶_ﬁd_des_de¸y±3
(
DES_LONG
 *
d©a
, 
_os¶_ﬁd_des_key_scheduÀ
 
ks1
,

376 
_os¶_ﬁd_des_key_scheduÀ
 
ks2
,

377 
_os¶_ﬁd_des_key_scheduÀ
 
ks3
);

378 
_os¶_ﬁd_des_ede3_cbc_í¸y±
(
_os¶_ﬁd_des_cblock
 *
öput
,

379 
_os¶_ﬁd_des_cblock
 *
ouçut
, 
Àngth
,

380 
_os¶_ﬁd_des_key_scheduÀ
 
ks1
,

381 
_os¶_ﬁd_des_key_scheduÀ
 
ks2
,

382 
_os¶_ﬁd_des_key_scheduÀ
 
ks3
,

383 
_os¶_ﬁd_des_cblock
 *
ivec
, 
íc
);

384 
_os¶_ﬁd_des_ede3_cfb64_í¸y±
(*
ö
, *
out
,

385 
Àngth
,

386 
_os¶_ﬁd_des_key_scheduÀ
 
ks1
,

387 
_os¶_ﬁd_des_key_scheduÀ
 
ks2
,

388 
_os¶_ﬁd_des_key_scheduÀ
 
ks3
,

389 
_os¶_ﬁd_des_cblock
 *
ivec
, *
num
,

390 
íc
);

391 
_os¶_ﬁd_des_ede3_ofb64_í¸y±
(*
ö
, *
out
,

392 
Àngth
,

393 
_os¶_ﬁd_des_key_scheduÀ
 
ks1
,

394 
_os¶_ﬁd_des_key_scheduÀ
 
ks2
,

395 
_os¶_ﬁd_des_key_scheduÀ
 
ks3
,

396 
_os¶_ﬁd_des_cblock
 *
ivec
, *
num
);

398 
_os¶_ﬁd_des_xwhôe_ö2out
(
_os¶_ﬁd_des_cblock
 (*
des_key
),

399 
_os¶_ﬁd_des_cblock
 (*
ö_whôe
),

400 
_os¶_ﬁd_des_cblock
 (*
out_whôe
));

403 
_os¶_ﬁd_des_íc_ªad
(
fd
, *
buf
, 
Àn
,

404 
_os¶_ﬁd_des_key_scheduÀ
 
sched
,

405 
_os¶_ﬁd_des_cblock
 *
iv
);

406 
_os¶_ﬁd_des_íc_wrôe
(
fd
, *
buf
, 
Àn
,

407 
_os¶_ﬁd_des_key_scheduÀ
 
sched
,

408 
_os¶_ﬁd_des_cblock
 *
iv
);

409 *
_os¶_ﬁd_des_f¸y±
(c⁄° *
buf
, c⁄° *
ß…
, *
ªt
);

410 *
_os¶_ﬁd_des_¸y±
(c⁄° *
buf
, c⁄° *
ß…
);

411 #i‡!
deföed
(
PERL5
Ë&& !deföed(
NeXT
)

412 *
_os¶_ﬁd_¸y±
(c⁄° *
buf
, c⁄° *
ß…
);

414 
_os¶_ﬁd_des_ofb_í¸y±
(*
ö
, *
out
,

415 
numbôs
, 
Àngth
,

416 
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
,

417 
_os¶_ﬁd_des_cblock
 *
ivec
);

418 
_os¶_ﬁd_des_pcbc_í¸y±
(
_os¶_ﬁd_des_cblock
 *
öput
,

419 
_os¶_ﬁd_des_cblock
 *
ouçut
, 
Àngth
,

420 
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
,

421 
_os¶_ﬁd_des_cblock
 *
ivec
, 
íc
);

422 
DES_LONG
 
_os¶_ﬁd_des_quad_cksum
(
_os¶_ﬁd_des_cblock
 *
öput
,

423 
_os¶_ﬁd_des_cblock
 *
ouçut
, 
Àngth
,

424 
out_cou¡
, 
_os¶_ﬁd_des_cblock
 *
£ed
);

425 
_os¶_ﬁd_des_øndom_£ed
(
_os¶_ﬁd_des_cblock
 
key
);

426 
_os¶_ﬁd_des_øndom_key
(
_os¶_ﬁd_des_cblock
 
ªt
);

427 
_os¶_ﬁd_des_ªad_∑ssw‹d
(
_os¶_ﬁd_des_cblock
 *
key
, c⁄° *
¥om±
,

428 
vîify
);

429 
_os¶_ﬁd_des_ªad_2∑ssw‹ds
(
_os¶_ﬁd_des_cblock
 *
key1
,

430 
_os¶_ﬁd_des_cblock
 *
key2
,

431 c⁄° *
¥om±
, 
vîify
);

432 
_os¶_ﬁd_des_£t_odd_∑rôy
(
_os¶_ﬁd_des_cblock
 *
key
);

433 
_os¶_ﬁd_des_is_wók_key
(
_os¶_ﬁd_des_cblock
 *
key
);

434 
_os¶_ﬁd_des_£t_key
(
_os¶_ﬁd_des_cblock
 *
key
,

435 
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
);

436 
_os¶_ﬁd_des_key_sched
(
_os¶_ﬁd_des_cblock
 *
key
,

437 
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
);

438 
_os¶_ﬁd_des_°rög_to_key
(*
°r
, 
_os¶_ﬁd_des_cblock
 *
key
);

439 
_os¶_ﬁd_des_°rög_to_2keys
(*
°r
, 
_os¶_ﬁd_des_cblock
 *
key1
,

440 
_os¶_ﬁd_des_cblock
 *
key2
);

441 
_os¶_ﬁd_des_cfb64_í¸y±
(*
ö
, *
out
,

442 
Àngth
,

443 
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
,

444 
_os¶_ﬁd_des_cblock
 *
ivec
, *
num
,

445 
íc
);

446 
_os¶_ﬁd_des_ofb64_í¸y±
(*
ö
, *
out
,

447 
Àngth
,

448 
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
,

449 
_os¶_ﬁd_des_cblock
 *
ivec
, *
num
);

451 
_os¶_096_des_øndom_£ed
(
des_cblock
 *
key
);

459 
	#_KERBEROS_DES_H


	)

461 
	#KRBDES_ENCRYPT
 
DES_ENCRYPT


	)

462 
	#KRBDES_DECRYPT
 
DES_DECRYPT


	)

464 #ifde‡
KERBEROS


465 
	#ENCRYPT
 
DES_ENCRYPT


	)

466 
	#DECRYPT
 
DES_DECRYPT


	)

469 #i‚de‡
NCOMPAT


470 
	#C_Block
 
des_cblock


	)

471 
	#Key_scheduÀ
 
des_key_scheduÀ


	)

472 
	#KEY_SZ
 
DES_KEY_SZ


	)

473 
	#°rög_to_key
 
des_°rög_to_key


	)

474 
	#ªad_pw_°rög
 
des_ªad_pw_°rög


	)

475 
	#øndom_key
 
des_øndom_key


	)

476 
	#pcbc_í¸y±
 
des_pcbc_í¸y±


	)

477 
	#£t_key
 
des_£t_key


	)

478 
	#key_sched
 
des_key_sched


	)

479 
	#ecb_í¸y±
 
des_ecb_í¸y±


	)

480 
	#cbc_í¸y±
 
des_cbc_í¸y±


	)

481 
	#ncbc_í¸y±
 
des_ncbc_í¸y±


	)

482 
	#xcbc_í¸y±
 
des_xcbc_í¸y±


	)

483 
	#cbc_cksum
 
des_cbc_cksum


	)

484 
	#quad_cksum
 
des_quad_cksum


	)

485 
	#check_∑rôy
 
des_check_key_∑rôy


	)

488 
	#des_fixup_key_∑rôy
 
DES_fixup_key_∑rôy


	)

490 #ifde‡ 
__˝lu•lus


495 
	~<›ís¶/ui_com∑t.h
>

	@/usr/include/openssl/ecdh.h

69 #i‚de‡
HEADER_ECDH_H


70 
	#HEADER_ECDH_H


	)

72 
	~<›ís¶/›ís¶c⁄f.h
>

74 #ifde‡
OPENSSL_NO_ECDH


75 #îr‹ 
ECDH
 
is
 
dißbÀd
.

78 
	~<›ís¶/ec.h
>

79 
	~<›ís¶/os¶_typ.h
>

80 #i‚de‡
OPENSSL_NO_DEPRECATED


81 
	~<›ís¶/bn.h
>

84 #ifde‡
__˝lu•lus


88 
	#EC_FLAG_COFACTOR_ECDH
 0x1000

	)

90 c⁄° 
ECDH_METHOD
 *
ECDH_O≥nSSL
();

92 
ECDH_£t_deÁu…_mëhod
(c⁄° 
ECDH_METHOD
 *);

93 c⁄° 
ECDH_METHOD
 *
ECDH_gë_deÁu…_mëhod
();

94 
ECDH_£t_mëhod
(
EC_KEY
 *, c⁄° 
ECDH_METHOD
 *);

96 
ECDH_compuã_key
(*
out
, 
size_t
 
ouéí
, c⁄° 
EC_POINT
 *
pub_key
,

97 
EC_KEY
 *
ecdh
, *(*
KDF
Ë(c⁄° *
ö
, 
size_t
 
öÀn
,

98 *
out
, 
size_t
 *
ouéí
));

100 
ECDH_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w


101 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
,

102 
CRYPTO_EX_‰ì
 *
‰ì_func
);

103 
ECDH_£t_ex_d©a
(
EC_KEY
 *
d
, 
idx
, *
¨g
);

104 *
ECDH_gë_ex_d©a
(
EC_KEY
 *
d
, 
idx
);

106 
ECDH_KDF_X9_62
(*
out
, 
size_t
 
ouéí
,

107 c⁄° *
Z
, 
size_t
 
ZÀn
,

108 c⁄° *
söfo
, 
size_t
 
söfﬁí
,

109 c⁄° 
EVP_MD
 *
md
);

116 
ERR_lﬂd_ECDH_°rögs
();

121 
	#ECDH_F_ECDH_CHECK
 102

	)

122 
	#ECDH_F_ECDH_COMPUTE_KEY
 100

	)

123 
	#ECDH_F_ECDH_DATA_NEW_METHOD
 101

	)

126 
	#ECDH_R_KDF_FAILED
 102

	)

127 
	#ECDH_R_NON_FIPS_METHOD
 103

	)

128 
	#ECDH_R_NO_PRIVATE_VALUE
 100

	)

129 
	#ECDH_R_POINT_ARITHMETIC_FAILURE
 101

	)

131 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ecdsa.h

59 #i‚de‡
HEADER_ECDSA_H


60 
	#HEADER_ECDSA_H


	)

62 
	~<›ís¶/›ís¶c⁄f.h
>

64 #ifde‡
OPENSSL_NO_ECDSA


65 #îr‹ 
ECDSA
 
is
 
dißbÀd
.

68 
	~<›ís¶/ec.h
>

69 
	~<›ís¶/os¶_typ.h
>

70 #i‚de‡
OPENSSL_NO_DEPRECATED


71 
	~<›ís¶/bn.h
>

74 #ifde‡
__˝lu•lus


78 
	sECDSA_SIG_°
 {

79 
BIGNUM
 *
r
;

80 
BIGNUM
 *
s
;

81 } 
	tECDSA_SIG
;

86 
ECDSA_SIG
 *
ECDSA_SIG_√w
();

91 
ECDSA_SIG_‰ì
(
ECDSA_SIG
 *
sig
);

99 
i2d_ECDSA_SIG
(c⁄° 
ECDSA_SIG
 *
sig
, **
µ
);

108 
ECDSA_SIG
 *
d2i_ECDSA_SIG
(ECDSA_SIG **
sig
, c⁄° **
µ
, 
Àn
);

117 
ECDSA_SIG
 *
ECDSA_do_sign
(c⁄° *
dg°
, 
dg°_Àn
,

118 
EC_KEY
 *
eckey
);

130 
ECDSA_SIG
 *
ECDSA_do_sign_ex
(c⁄° *
dg°
, 
dg°Àn
,

131 c⁄° 
BIGNUM
 *
köv
, c⁄° BIGNUM *
Ω
,

132 
EC_KEY
 *
eckey
);

143 
ECDSA_do_vîify
(c⁄° *
dg°
, 
dg°_Àn
,

144 c⁄° 
ECDSA_SIG
 *
sig
, 
EC_KEY
 *
eckey
);

146 c⁄° 
ECDSA_METHOD
 *
ECDSA_O≥nSSL
();

151 
ECDSA_£t_deÁu…_mëhod
(c⁄° 
ECDSA_METHOD
 *
mëh
);

156 c⁄° 
ECDSA_METHOD
 *
ECDSA_gë_deÁu…_mëhod
();

163 
ECDSA_£t_mëhod
(
EC_KEY
 *
eckey
, c⁄° 
ECDSA_METHOD
 *
mëh
);

169 
ECDSA_size
(c⁄° 
EC_KEY
 *
eckey
);

178 
ECDSA_sign_£tup
(
EC_KEY
 *
eckey
, 
BN_CTX
 *
˘x
, 
BIGNUM
 **
köv
, BIGNUM **
Ω
);

190 
ECDSA_sign
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

191 *
sig
, *
sigÀn
, 
EC_KEY
 *
eckey
);

206 
ECDSA_sign_ex
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

207 *
sig
, *
sigÀn
,

208 c⁄° 
BIGNUM
 *
köv
, c⁄° BIGNUM *
Ω
, 
EC_KEY
 *
eckey
);

221 
ECDSA_vîify
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

222 c⁄° *
sig
, 
sigÀn
, 
EC_KEY
 *
eckey
);

225 
ECDSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w


226 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
,

227 
CRYPTO_EX_‰ì
 *
‰ì_func
);

228 
ECDSA_£t_ex_d©a
(
EC_KEY
 *
d
, 
idx
, *
¨g
);

229 *
ECDSA_gë_ex_d©a
(
EC_KEY
 *
d
, 
idx
);

236 
ECDSA_METHOD
 *
ECDSA_METHOD_√w
(c⁄° ECDSA_METHOD *
ecdß_mëhod
);

241 
ECDSA_METHOD_‰ì
(
ECDSA_METHOD
 *
ecdß_mëhod
);

248 
ECDSA_METHOD_£t_≠p_d©a
(
ECDSA_METHOD
 *
ecdß_mëhod
, *
≠p
);

255 *
ECDSA_METHOD_gë_≠p_d©a
(
ECDSA_METHOD
 *
ecdß_mëhod
);

262 
ECDSA_METHOD_£t_sign
(
ECDSA_METHOD
 *
ecdß_mëhod
,

263 
ECDSA_SIG
 *(*
ecdß_do_sign
) (const 

264 *
dg°
, 
dg°_Àn
,

265 c⁄° 
BIGNUM
 *
öv
,

266 c⁄° 
BIGNUM
 *
Ω
,

267 
EC_KEY
 *
eckey
));

274 
ECDSA_METHOD_£t_sign_£tup
(
ECDSA_METHOD
 *
ecdß_mëhod
,

275 (*
ecdß_sign_£tup
Ë(
EC_KEY
 *
eckey
,

276 
BN_CTX
 *
˘x
,

277 
BIGNUM
 **
köv
,

278 
BIGNUM
 **
r
));

285 
ECDSA_METHOD_£t_vîify
(
ECDSA_METHOD
 *
ecdß_mëhod
,

286 (*
ecdß_do_vîify
) (const 

287 *
dg°
, 
dg°_Àn
,

288 c⁄° 
ECDSA_SIG
 *
sig
,

289 
EC_KEY
 *
eckey
));

291 
ECDSA_METHOD_£t_Êags
(
ECDSA_METHOD
 *
ecdß_mëhod
, 
Êags
);

298 
ECDSA_METHOD_£t_«me
(
ECDSA_METHOD
 *
ecdß_mëhod
, *
«me
);

310 
ERR_lﬂd_ECDSA_°rögs
();

315 
	#ECDSA_F_ECDSA_CHECK
 104

	)

316 
	#ECDSA_F_ECDSA_DATA_NEW_METHOD
 100

	)

317 
	#ECDSA_F_ECDSA_DO_SIGN
 101

	)

318 
	#ECDSA_F_ECDSA_DO_VERIFY
 102

	)

319 
	#ECDSA_F_ECDSA_METHOD_NEW
 105

	)

320 
	#ECDSA_F_ECDSA_SIGN_SETUP
 103

	)

323 
	#ECDSA_R_BAD_SIGNATURE
 100

	)

324 
	#ECDSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 101

	)

325 
	#ECDSA_R_ERR_EC_LIB
 102

	)

326 
	#ECDSA_R_MISSING_PARAMETERS
 103

	)

327 
	#ECDSA_R_NEED_NEW_SETUP_VALUES
 106

	)

328 
	#ECDSA_R_NON_FIPS_METHOD
 107

	)

329 
	#ECDSA_R_RANDOM_NUMBER_GENERATION_FAILED
 104

	)

330 
	#ECDSA_R_SIGNATURE_MALLOC_FAILED
 105

	)

332 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/fips.h

50 
	~<›ís¶/›ís¶c⁄f.h
>

51 
	~<›ís¶/¸y±o.h
>

52 
	~<°d¨g.h
>

54 #i‚de‡
OPENSSL_FIPS


55 #îr‹ 
FIPS
 
is
 
dißbÀd
.

58 #ifde‡
OPENSSL_FIPS


60 #ifde‡ 
__˝lu•lus


64 
dß_°
;

65 
rß_°
;

66 
evp_pkey_°
;

67 
ív_md_°
;

68 
ív_md_˘x_°
;

69 
evp_cùhî_°
;

70 
evp_cùhî_˘x_°
;

71 
dh_mëhod
;

72 
CMAC_CTX_°
;

73 
hmac_˘x_°
;

75 
FIPS_moduÀ_mode_£t
(
⁄off
, c⁄° *
auth
);

76 
FIPS_moduÀ_mode
();

77 
FIPS_moduÀ_ö°ÆÀd
();

78 c⁄° *
FIPS_ønd_check
();

79 
FIPS_£l·e°
();

80 
FIPS_£l·e°_Áûed
();

81 
FIPS_c‹ru±_sha1
();

82 
FIPS_£l·e°_sha1
();

83 
FIPS_£l·e°_sha2
();

84 
FIPS_c‹ru±_´s
();

85 
FIPS_£l·e°_´s_ccm
();

86 
FIPS_£l·e°_´s_gcm
();

87 
FIPS_£l·e°_´s_xts
();

88 
FIPS_£l·e°_´s
();

89 
FIPS_c‹ru±_des
();

90 
FIPS_£l·e°_des
();

91 
FIPS_c‹ru±_rß
();

92 
FIPS_c‹ru±_rß_keygí
();

93 
FIPS_£l·e°_rß
();

94 
FIPS_c‹ru±_dß
();

95 
FIPS_£l·e°_dß
();

96 
FIPS_£l·e°_ecdß
();

97 
FIPS_£l·e°_ecdh
();

98 
FIPS_£l·e°_dh
();

99 
FIPS_c‹ru±_∫g
();

100 
FIPS_∫g_°ick
();

101 
FIPS_x931_°ick
(
⁄off
);

102 
FIPS_drbg_°ick
(
⁄off
);

103 
FIPS_£l·e°_∫g
();

104 
FIPS_£l·e°_x931
();

105 
FIPS_£l·e°_hmac
();

106 
FIPS_£l·e°_drbg
();

107 
FIPS_£l·e°_drbg_Æl
();

108 
FIPS_£l·e°_cmac
();

110 
FIPS_gë_timevec
(*
buf
, *
p˘r
);

112 
fùs_check_rß
(
rß_°
 *
rß
);

113 
fùs_check_dß_¥ng
(
dß_°
 *
dß
, 
size_t
 
L
, size_à
N
);

115 
	#FIPS_ERROR_IGNORED
(
Æg
Ë
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, \

116 
Æg
 "Öªviou†FIPS f‹biddíálg‹ôhmÉº‹ ign‹ed");

	)

118 
fùs_pkey_sig«tuª_ã°
(
evp_pkey_°
 *
pkey
,

119 c⁄° *
tbs
, 
tb¶í
,

120 c⁄° *
k©
,

121 
k©Àn
,

122 c⁄° 
ív_md_°
 *
dige°
,

123 
md_Êags
, c⁄° *
Áû_°r
);

125 
fùs_cùhî_ã°
(
evp_cùhî_˘x_°
 *
˘x
,

126 c⁄° 
evp_cùhî_°
 *
cùhî
,

127 c⁄° *
key
,

128 c⁄° *
iv
,

129 c⁄° *
∂aöãxt
,

130 c⁄° *
cùhîãxt
, 
Àn
);

132 
fùs_£t_£l·e°_Áû
();

134 c⁄° 
ív_md_°
 *
FIPS_gë_dige°bynid
(
nid
);

136 c⁄° 
evp_cùhî_°
 *
FIPS_gë_cùhîbynid
(
nid
);

142 
ERR_lﬂd_FIPS_°rögs
();

147 
	#FIPS_F_DH_BUILTIN_GENPARAMS
 100

	)

148 
	#FIPS_F_DH_INIT
 148

	)

149 
	#FIPS_F_DRBG_RESEED
 162

	)

150 
	#FIPS_F_DSA_BUILTIN_PARAMGEN
 101

	)

151 
	#FIPS_F_DSA_BUILTIN_PARAMGEN2
 102

	)

152 
	#FIPS_F_DSA_DO_SIGN
 103

	)

153 
	#FIPS_F_DSA_DO_VERIFY
 104

	)

154 
	#FIPS_F_ECDH_COMPUTE_KEY
 163

	)

155 
	#FIPS_F_ECDSA_DO_SIGN
 164

	)

156 
	#FIPS_F_ECDSA_DO_VERIFY
 165

	)

157 
	#FIPS_F_EC_KEY_GENERATE_KEY
 166

	)

158 
	#FIPS_F_FIPS_CHECK_DSA
 105

	)

159 
	#FIPS_F_FIPS_CHECK_DSA_PRNG
 151

	)

160 
	#FIPS_F_FIPS_CHECK_EC
 106

	)

161 
	#FIPS_F_FIPS_CHECK_EC_PRNG
 152

	)

162 
	#FIPS_F_FIPS_CHECK_INCORE_FINGERPRINT
 107

	)

163 
	#FIPS_F_FIPS_CHECK_RSA
 108

	)

164 
	#FIPS_F_FIPS_CHECK_RSA_PRNG
 150

	)

165 
	#FIPS_F_FIPS_CIPHER
 160

	)

166 
	#FIPS_F_FIPS_CIPHERINIT
 109

	)

167 
	#FIPS_F_FIPS_CIPHER_CTX_CTRL
 161

	)

168 
	#FIPS_F_FIPS_DIGESTFINAL
 158

	)

169 
	#FIPS_F_FIPS_DIGESTINIT
 110

	)

170 
	#FIPS_F_FIPS_DIGESTUPDATE
 159

	)

171 
	#FIPS_F_FIPS_DRBG_BYTES
 111

	)

172 
	#FIPS_F_FIPS_DRBG_CHECK
 146

	)

173 
	#FIPS_F_FIPS_DRBG_CPRNG_TEST
 112

	)

174 
	#FIPS_F_FIPS_DRBG_ERROR_CHECK
 114

	)

175 
	#FIPS_F_FIPS_DRBG_GENERATE
 113

	)

176 
	#FIPS_F_FIPS_DRBG_INIT
 115

	)

177 
	#FIPS_F_FIPS_DRBG_INSTANTIATE
 116

	)

178 
	#FIPS_F_FIPS_DRBG_NEW
 117

	)

179 
	#FIPS_F_FIPS_DRBG_RESEED
 118

	)

180 
	#FIPS_F_FIPS_DRBG_SINGLE_KAT
 119

	)

181 
	#FIPS_F_FIPS_DSA_SIGN_DIGEST
 154

	)

182 
	#FIPS_F_FIPS_DSA_VERIFY_DIGEST
 155

	)

183 
	#FIPS_F_FIPS_GET_ENTROPY
 147

	)

184 
	#FIPS_F_FIPS_MODULE_MODE_SET
 120

	)

185 
	#FIPS_F_FIPS_PKEY_SIGNATURE_TEST
 121

	)

186 
	#FIPS_F_FIPS_RAND_ADD
 122

	)

187 
	#FIPS_F_FIPS_RAND_BYTES
 123

	)

188 
	#FIPS_F_FIPS_RAND_PSEUDO_BYTES
 124

	)

189 
	#FIPS_F_FIPS_RAND_SEED
 125

	)

190 
	#FIPS_F_FIPS_RAND_SET_METHOD
 126

	)

191 
	#FIPS_F_FIPS_RAND_STATUS
 127

	)

192 
	#FIPS_F_FIPS_RSA_SIGN_DIGEST
 156

	)

193 
	#FIPS_F_FIPS_RSA_VERIFY_DIGEST
 157

	)

194 
	#FIPS_F_FIPS_SELFTEST_AES
 128

	)

195 
	#FIPS_F_FIPS_SELFTEST_AES_CCM
 145

	)

196 
	#FIPS_F_FIPS_SELFTEST_AES_GCM
 129

	)

197 
	#FIPS_F_FIPS_SELFTEST_AES_XTS
 144

	)

198 
	#FIPS_F_FIPS_SELFTEST_CMAC
 130

	)

199 
	#FIPS_F_FIPS_SELFTEST_DES
 131

	)

200 
	#FIPS_F_FIPS_SELFTEST_DSA
 132

	)

201 
	#FIPS_F_FIPS_SELFTEST_ECDSA
 133

	)

202 
	#FIPS_F_FIPS_SELFTEST_HMAC
 134

	)

203 
	#FIPS_F_FIPS_SELFTEST_SHA1
 135

	)

204 
	#FIPS_F_FIPS_SELFTEST_X931
 136

	)

205 
	#FIPS_F_FIPS_SET_PRNG_KEY
 153

	)

206 
	#FIPS_F_HASH_FINAL
 137

	)

207 
	#FIPS_F_RSA_BUILTIN_KEYGEN
 138

	)

208 
	#FIPS_F_RSA_EAY_INIT
 149

	)

209 
	#FIPS_F_RSA_EAY_PRIVATE_DECRYPT
 139

	)

210 
	#FIPS_F_RSA_EAY_PRIVATE_ENCRYPT
 140

	)

211 
	#FIPS_F_RSA_EAY_PUBLIC_DECRYPT
 141

	)

212 
	#FIPS_F_RSA_EAY_PUBLIC_ENCRYPT
 142

	)

213 
	#FIPS_F_RSA_X931_GENERATE_KEY_EX
 143

	)

214 
	#FIPS_F_EVP_CIPHERINIT_EX
 200

	)

215 
	#FIPS_F_EVP_DIGESTINIT_EX
 201

	)

216 
	#FIPS_F_FIPS_SELFTEST_SHA2
 202

	)

219 
	#FIPS_R_ADDITIONAL_INPUT_ERROR_UNDETECTED
 150

	)

220 
	#FIPS_R_ADDITIONAL_INPUT_TOO_LONG
 100

	)

221 
	#FIPS_R_ALREADY_INSTANTIATED
 101

	)

222 
	#FIPS_R_AUTHENTICATION_FAILURE
 151

	)

223 
	#FIPS_R_CONTRADICTING_EVIDENCE
 102

	)

224 
	#FIPS_R_DRBG_NOT_INITIALISED
 152

	)

225 
	#FIPS_R_DRBG_STUCK
 103

	)

226 
	#FIPS_R_ENTROPY_ERROR_UNDETECTED
 104

	)

227 
	#FIPS_R_ENTROPY_NOT_REQUESTED_FOR_RESEED
 105

	)

228 
	#FIPS_R_ENTROPY_SOURCE_STUCK
 142

	)

229 
	#FIPS_R_ERROR_INITIALISING_DRBG
 106

	)

230 
	#FIPS_R_ERROR_INSTANTIATING_DRBG
 107

	)

231 
	#FIPS_R_ERROR_RETRIEVING_ADDITIONAL_INPUT
 108

	)

232 
	#FIPS_R_ERROR_RETRIEVING_ENTROPY
 109

	)

233 
	#FIPS_R_ERROR_RETRIEVING_NONCE
 110

	)

234 
	#FIPS_R_FINGERPRINT_DOES_NOT_MATCH
 111

	)

235 
	#FIPS_R_FINGERPRINT_DOES_NOT_MATCH_NONPIC_RELOCATED
 112

	)

236 
	#FIPS_R_FINGERPRINT_DOES_NOT_MATCH_SEGMENT_ALIASING
 113

	)

237 
	#FIPS_R_FIPS_MODE_ALREADY_SET
 114

	)

238 
	#FIPS_R_FIPS_SELFTEST_FAILED
 115

	)

239 
	#FIPS_R_FUNCTION_ERROR
 116

	)

240 
	#FIPS_R_GENERATE_ERROR
 117

	)

241 
	#FIPS_R_GENERATE_ERROR_UNDETECTED
 118

	)

242 
	#FIPS_R_INSTANTIATE_ERROR
 119

	)

243 
	#FIPS_R_INSUFFICIENT_SECURITY_STRENGTH
 120

	)

244 
	#FIPS_R_INTERNAL_ERROR
 121

	)

245 
	#FIPS_R_INVALID_KEY_LENGTH
 122

	)

246 
	#FIPS_R_INVALID_PARAMETERS
 144

	)

247 
	#FIPS_R_IN_ERROR_STATE
 123

	)

248 
	#FIPS_R_KEY_TOO_SHORT
 124

	)

249 
	#FIPS_R_NONCE_ERROR_UNDETECTED
 149

	)

250 
	#FIPS_R_NON_FIPS_METHOD
 125

	)

251 
	#FIPS_R_NOPR_TEST1_FAILURE
 145

	)

252 
	#FIPS_R_NOPR_TEST2_FAILURE
 146

	)

253 
	#FIPS_R_NOT_INSTANTIATED
 126

	)

254 
	#FIPS_R_PAIRWISE_TEST_FAILED
 127

	)

255 
	#FIPS_R_PERSONALISATION_ERROR_UNDETECTED
 128

	)

256 
	#FIPS_R_PERSONALISATION_STRING_TOO_LONG
 129

	)

257 
	#FIPS_R_PRNG_STRENGTH_TOO_LOW
 143

	)

258 
	#FIPS_R_PR_TEST1_FAILURE
 147

	)

259 
	#FIPS_R_PR_TEST2_FAILURE
 148

	)

260 
	#FIPS_R_REQUEST_LENGTH_ERROR_UNDETECTED
 130

	)

261 
	#FIPS_R_REQUEST_TOO_LARGE_FOR_DRBG
 131

	)

262 
	#FIPS_R_RESEED_COUNTER_ERROR
 132

	)

263 
	#FIPS_R_RESEED_ERROR
 133

	)

264 
	#FIPS_R_SELFTEST_FAILED
 134

	)

265 
	#FIPS_R_SELFTEST_FAILURE
 135

	)

266 
	#FIPS_R_STRENGTH_ERROR_UNDETECTED
 136

	)

267 
	#FIPS_R_TEST_FAILURE
 137

	)

268 
	#FIPS_R_UNINSTANTIATE_ERROR
 141

	)

269 
	#FIPS_R_UNINSTANTIATE_ZEROISE_ERROR
 138

	)

270 
	#FIPS_R_UNSUPPORTED_DRBG_TYPE
 139

	)

271 
	#FIPS_R_UNSUPPORTED_PLATFORM
 140

	)

273 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/kssl.h

64 #i‚de‡
KSSL_H


65 
	#KSSL_H


	)

67 
	~<›ís¶/›ís¶c⁄f.h
>

69 #i‚de‡
OPENSSL_NO_KRB5


71 
	~<°dio.h
>

72 
	~<˘y≥.h
>

73 
	~<krb5.h
>

74 #ifde‡
OPENSSL_SYS_WIN32


79 #unde‡
X509_NAME


80 #unde‡
X509_EXTENSIONS


81 #unde‡
OCSP_REQUEST


82 #unde‡
OCSP_RESPONSE


85 #ifde‡ 
__˝lu•lus


93 #ifde‡
KRB5_HEIMDAL


94 
	tkrb5_o˘ë
;

95 
	#FAR


	)

98 #i‚de‡
FAR


99 
	#FAR


	)

111 #i‚de‡
KRB5SVC


112 
	#KRB5SVC
 "ho°"

	)

115 #i‚de‡
KRB5KEYTAB


116 
	#KRB5KEYTAB
 "/ëc/krb5.keyèb"

	)

119 #i‚de‡
KRB5SENDAUTH


120 
	#KRB5SENDAUTH
 1

	)

123 #i‚de‡
KRB5CHECKAUTH


124 
	#KRB5CHECKAUTH
 1

	)

127 #i‚de‡
KSSL_CLOCKSKEW


128 
	#KSSL_CLOCKSKEW
 300;

	)

131 
	#KSSL_ERR_MAX
 255

	)

132 
	sks¶_îr_°
 {

133 
	gªas⁄
;

134 
	gãxt
[
KSSL_ERR_MAX
 + 1];

135 } 
	tKSSL_ERR
;

141 
	sks¶_˘x_°
 {

143 *
	g£rvi˚_«me
;

144 *
	g£rvi˚_ho°
;

145 *
	g˛õ¡_¥öc
;

146 *
	gkeyèb_fûe
;

147 *
	g¸ed_ˇche
;

148 
krb5_í˘y≥
 
	gí˘y≥
;

149 
	gÀngth
;

150 
krb5_o˘ë
 
FAR
 *
	gkey
;

151 } 
	tKSSL_CTX
;

153 
	#KSSL_CLIENT
 1

	)

154 
	#KSSL_SERVER
 2

	)

155 
	#KSSL_SERVICE
 3

	)

156 
	#KSSL_KEYTAB
 4

	)

158 
	#KSSL_CTX_OK
 0

	)

159 
	#KSSL_CTX_ERR
 1

	)

160 
	#KSSL_NOMEM
 2

	)

163 
krb5_îr‹_code
 
ks¶_˘x_£t°rög
(
KSSL_CTX
 *
ks¶_˘x
, 
which
, *
ãxt
);

164 
KSSL_CTX
 *
ks¶_˘x_√w
();

165 
KSSL_CTX
 *
ks¶_˘x_‰ì
(KSSL_CTX *
ks¶_˘x
);

166 
ks¶_˘x_show
(
KSSL_CTX
 *
ks¶_˘x
);

167 
krb5_îr‹_code
 
ks¶_˘x_£çröc
(
KSSL_CTX
 *
ks¶_˘x
, 
which
,

168 
krb5_d©a
 *
ªÆm
, krb5_d©®*
ítôy
,

169 
√¡ôõs
);

170 
krb5_îr‹_code
 
ks¶_cgë_tkt
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_d©a
 **
íc_tkç
,

171 
krb5_d©a
 *
authíp
, 
KSSL_ERR
 *
ks¶_îr
);

172 
krb5_îr‹_code
 
ks¶_sgë_tkt
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_d©a
 *
öd©a
,

173 
krb5_tickë_times
 *
âimes
, 
KSSL_ERR
 *
ks¶_îr
);

174 
krb5_îr‹_code
 
ks¶_˘x_£tkey
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_keyblock
 *
£ssi⁄
);

175 
ks¶_îr_£t
(
KSSL_ERR
 *
ks¶_îr
, 
ªas⁄
, *
ãxt
);

176 
ks¶_krb5_‰ì_d©a_c⁄ã¡s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_d©a
 *
d©a
);

177 
krb5_îr‹_code
 
ks¶_buûd_¥öcùÆ_2
(
krb5_c⁄ãxt
 
c⁄ãxt
,

178 
krb5_¥öcùÆ
 *
¥öc
, 
æí
,

179 c⁄° *
ªÆm
, 
¶í
,

180 c⁄° *
svc
, 
hÀn
,

181 c⁄° *
ho°
);

182 
krb5_îr‹_code
 
ks¶_vÆid©e_times
(
krb5_time°amp
 
©ime
,

183 
krb5_tickë_times
 *
âimes
);

184 
krb5_îr‹_code
 
ks¶_check_authít
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_d©a
 *
authíç
,

185 
krb5_time°amp
 *
©imï
,

186 
KSSL_ERR
 *
ks¶_îr
);

187 *
ks¶_skù_c⁄found
(
krb5_í˘y≥
 
í˘y≥
, *
authn
);

189 
SSL_£t0_ks¶_˘x
(
SSL
 *
s
, 
KSSL_CTX
 *
k˘x
);

190 
KSSL_CTX
 *
SSL_gë0_ks¶_˘x
(
SSL
 *
s
);

191 *
ks¶_˘x_gë0_˛õ¡_¥öc
(
KSSL_CTX
 *
k˘x
);

193 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/pqueue.h

60 #i‚de‡
HEADER_PQUEUE_H


61 
	#HEADER_PQUEUE_H


	)

63 
	~<°dio.h
>

64 
	~<°dlib.h
>

65 
	~<°rög.h
>

67 #ifde‡ 
__˝lu•lus


70 
_pqueue
 *
	tpqueue
;

72 
	s_pôem
 {

73 
¥i‹ôy
[8];

74 *
d©a
;

75 
_pôem
 *
√xt
;

76 } 
	tpôem
;

78 
_pôem
 *
	tpôî©‹
;

80 
pôem
 *
pôem_√w
(*
¥io64be
, *
d©a
);

81 
pôem_‰ì
(
pôem
 *
ôem
);

83 
pqueue
 
pqueue_√w
();

84 
pqueue_‰ì
(
pqueue
 
pq
);

86 
pôem
 *
pqueue_ö£π
(
pqueue
 
pq
,Öôem *
ôem
);

87 
pôem
 *
pqueue_≥ek
(
pqueue
 
pq
);

88 
pôem
 *
pqueue_p›
(
pqueue
 
pq
);

89 
pôem
 *
pqueue_föd
(
pqueue
 
pq
, *
¥io64be
);

90 
pôem
 *
pqueue_ôî©‹
(
pqueue
 
pq
);

91 
pôem
 *
pqueue_√xt
(
pôî©‹
 *
ôî
);

93 
pqueue_¥öt
(
pqueue
 
pq
);

94 
pqueue_size
(
pqueue
 
pq
);

96 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl23.h

59 #i‚de‡
HEADER_SSL23_H


60 
	#HEADER_SSL23_H


	)

62 #ifde‡ 
__˝lu•lus


70 
	#SSL23_ST_CW_CLNT_HELLO_A
 (0x210|
SSL_ST_CONNECT
)

	)

71 
	#SSL23_ST_CW_CLNT_HELLO_B
 (0x211|
SSL_ST_CONNECT
)

	)

73 
	#SSL23_ST_CR_SRVR_HELLO_A
 (0x220|
SSL_ST_CONNECT
)

	)

74 
	#SSL23_ST_CR_SRVR_HELLO_B
 (0x221|
SSL_ST_CONNECT
)

	)

78 
	#SSL23_ST_SR_CLNT_HELLO_A
 (0x210|
SSL_ST_ACCEPT
)

	)

79 
	#SSL23_ST_SR_CLNT_HELLO_B
 (0x211|
SSL_ST_ACCEPT
)

	)

81 #ifde‡ 
__˝lu•lus


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 #ifde‡
__USE_XOPEN2K


31 
	#__√ed_time_t


	)

32 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/openssl/ui_compat.h

60 #i‚de‡
HEADER_UI_COMPAT_H


61 
	#HEADER_UI_COMPAT_H


	)

63 
	~<›ís¶/›ís¶c⁄f.h
>

64 
	~<›ís¶/ui.h
>

66 #ifde‡ 
__˝lu•lus


75 
	#des_ªad_pw_°rög
(
b
,
l
,
p
,
v
) \

76 
	`_os¶_ﬁd_des_ªad_pw_°rög
((
b
),(
l
),(
p
),(
v
))

	)

77 
	#des_ªad_pw
(
b
,
bf
,
s
,
p
,
v
) \

78 
	`_os¶_ﬁd_des_ªad_pw
((
b
),(
bf
),(
s
),(
p
),(
v
))

	)

80 
_os¶_ﬁd_des_ªad_pw_°rög
(*
buf
, 
Àngth
, c⁄° *
¥om±
,

81 
vîify
);

82 
_os¶_ﬁd_des_ªad_pw
(*
buf
, *
buff
, 
size
, c⁄° *
¥om±
,

83 
vîify
);

85 #ifde‡ 
__˝lu•lus


	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

55 
	#__STDC_ISO_10646__
 201505L

	)

58 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

157 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

158 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

159 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

161 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

166 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

169 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

170 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

171 
__END_NAMESPACE_STD


173 #ifde‡
__USE_XOPEN2K8


175 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

178 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

179 
size_t
 
__n
Ë
__THROW
;

183 
	~<xloˇÀ.h
>

185 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
__loˇÀ_t
 
__loc
Ë
__THROW
;

188 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

189 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

192 
__BEGIN_NAMESPACE_STD


195 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

199 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

200 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

201 
__END_NAMESPACE_STD


203 #ifde‡
__USE_XOPEN2K8


209 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

210 
__loˇÀ_t
 
__loc
Ë
__THROW
;

215 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

216 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

219 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

222 
__BEGIN_NAMESPACE_STD


224 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


225 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

226 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

230 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

231 
__THROW
 
__©åibuã_puª__
;

234 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


235 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

236 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

240 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

241 
__THROW
 
__©åibuã_puª__
;

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_GNU


248 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

249 
__THROW
 
__©åibuã_puª__
;

252 
__BEGIN_NAMESPACE_STD


255 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

256 
__THROW
 
__©åibuã_puª__
;

259 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

260 
__THROW
 
__©åibuã_puª__
;

262 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


263 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

265 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

266 c⁄° 
wch¨_t
 *
__ac˚±
)

267 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

269 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

270 
__THROW
 
__©åibuã_puª__
;

273 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


274 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

276 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

277 c⁄° 
wch¨_t
 *
__√edÀ
)

278 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

280 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

281 
__THROW
 
__©åibuã_puª__
;

285 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

287 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

290 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

291 
__END_NAMESPACE_STD


293 #ifde‡
__USE_XOPEN


295 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


296 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

298 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

299 c⁄° 
wch¨_t
 *
__√edÀ
)

300 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

302 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

303 
__THROW
 
__©åibuã_puª__
;

307 #ifde‡
__USE_XOPEN2K8


309 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

310 
__THROW
 
__©åibuã_puª__
;

314 
__BEGIN_NAMESPACE_STD


316 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


317 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

319 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

320 
size_t
 
__n
)

321 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

323 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

328 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

329 
__THROW
 
__©åibuã_puª__
;

332 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

333 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

337 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

338 
__THROW
;

341 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

342 
__END_NAMESPACE_STD


344 #ifde‡
__USE_GNU


347 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

348 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

349 
__THROW
;

353 
__BEGIN_NAMESPACE_STD


356 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

360 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

364 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

368 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

369 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

370 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

373 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

377 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

378 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

379 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

380 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

381 
__END_NAMESPACE_STD


383 #ifde‡
__USE_EXTERN_INLINES


389 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

390 
__exã∫_ölöe
 
wöt_t


391 
	`__NTH
 (
	$btowc
 (
__c
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

393 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

395 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

396 
__exã∫_ölöe
 

397 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

398 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

399 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

401 
__exã∫_ölöe
 
size_t


402 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

403 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

404 {  (
__ps
 !
NULL


405 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

408 
__BEGIN_NAMESPACE_STD


411 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

412 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

418 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

419 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

420 
__END_NAMESPACE_STD


423 #ifdef 
__USE_XOPEN2K8


426 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

427 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

428 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

432 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

433 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

434 
size_t
 
__nwc
, size_à
__Àn
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

440 #ifde‡
__USE_XOPEN


442 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

446 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

450 
__BEGIN_NAMESPACE_STD


453 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

454 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

455 
__END_NAMESPACE_STD


457 #ifde‡
__USE_ISOC99


458 
__BEGIN_NAMESPACE_C99


460 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

461 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

462 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

463 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

464 
__END_NAMESPACE_C99


468 
__BEGIN_NAMESPACE_STD


471 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

476 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

478 
__THROW
;

479 
__END_NAMESPACE_STD


481 #ifde‡
__USE_ISOC99


482 
__BEGIN_NAMESPACE_C99


485 
__exãnsi⁄__


486 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

488 
__THROW
;

492 
__exãnsi⁄__


493 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

494 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

495 
__ba£
Ë
__THROW
;

496 
__END_NAMESPACE_C99


499 #ifde‡
__USE_GNU


502 
__exãnsi⁄__


503 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

504 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

505 
__THROW
;

509 
__exãnsi⁄__


510 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

511 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

512 
__ba£
Ë
__THROW
;

515 #ifde‡
__USE_GNU


529 
	~<xloˇÀ.h
>

533 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

534 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

535 
__loˇÀ_t
 
__loc
Ë
__THROW
;

537 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

546 
__exãnsi⁄__


547 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

549 
__ba£
, 
__loˇÀ_t
 
__loc
)

550 
__THROW
;

552 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

553 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

554 
__THROW
;

556 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

558 
__THROW
;

560 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

561 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

562 
__loˇÀ_t
 
__loc
Ë
__THROW
;

566 #ifde‡
__USE_XOPEN2K8


569 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

570 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

574 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

575 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
;

583 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

586 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


587 
__BEGIN_NAMESPACE_STD


590 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

597 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

598 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

607 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

608 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

609 
__THROW
 ;

615 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

616 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

617 
__gnuc_va_li°
 
__¨g
)

623 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

628 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

629 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

630 
__gnuc_va_li°
 
__¨g
)

631 
__THROW
 ;

638 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

639 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

648 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

649 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

650 
__THROW
 ;

652 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

653 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

654 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

655 #ifde‡
__REDIRECT


659 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

660 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_fwsˇnf
)

663 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

664 
__isoc99_wsˇnf
)

666 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

667 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

668 ...), 
__isoc99_swsˇnf
)

671 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

673 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

674 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

675 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

676 
__THROW
;

677 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

678 
	#wsˇnf
 
__isoc99_wsˇnf


	)

679 
	#swsˇnf
 
__isoc99_swsˇnf


	)

683 
__END_NAMESPACE_STD


686 #ifde‡
__USE_ISOC99


687 
__BEGIN_NAMESPACE_C99


692 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

693 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

694 
__gnuc_va_li°
 
__¨g
)

700 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

704 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

705 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

706 
__gnuc_va_li°
 
__¨g
)

707 
__THROW
 ;

709 #i‡!
deföed
 
__USE_GNU
 \

710 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

711 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

714 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

717 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

718 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

720 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

721 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

725 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

726 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
);

728 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
);

730 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

731 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

732 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

733 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

734 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

735 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

739 
__END_NAMESPACE_C99


743 
__BEGIN_NAMESPACE_STD


748 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

755 
wöt_t
 
	`gëwch¨
 ();

762 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

769 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

777 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

778 
__FILE
 *
__ª°ri˘
 
__°ªam
);

784 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

792 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

793 
__END_NAMESPACE_STD


796 #ifde‡
__USE_GNU


804 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

805 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

813 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

821 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

830 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

831 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

840 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

841 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

850 
__FILE
 *
__ª°ri˘
 
__°ªam
);

854 
__BEGIN_NAMESPACE_C99


858 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

859 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

860 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

861 
__END_NAMESPACE_C99


863 #ifde‡
__USE_GNU


864 
	~<xloˇÀ.h
>

868 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

869 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

870 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

871 
__loˇÀ_t
 
__loc
Ë
__THROW
;

880 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


881 
	#__√ed_iswxxx


	)

882 
	~<w˘y≥.h
>

886 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


887 
	~<bôs/wch¨2.h
>

890 #ifde‡
__LDBL_COMPAT


891 
	~<bôs/wch¨-ldbl.h
>

894 
__END_DECLS


902 #unde‡
__√ed_mb°©e_t


903 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@
1
.
1
/usr/include
149
2591
__DECC_INCLUDE_EPILOGUE.H
__DECC_INCLUDE_PROLOGUE.H
aes.h
asn1.h
asn1_mac.h
asn1t.h
async.h
bio.h
blowfish.h
bn.h
buffer.h
camellia.h
cast.h
cmac.h
cms.h
comp.h
conf.h
conf_api.h
crypto.h
ct.h
des.h
dh.h
dsa.h
dtls1.h
e_os2.h
ebcdic.h
ec.h
ecdh.h
ecdsa.h
engine.h
err.h
evp.h
hmac.h
idea.h
kdf.h
lhash.h
md2.h
md4.h
md5.h
mdc2.h
modes.h
obj_mac.h
objects.h
ocsp.h
opensslconf.h
opensslv.h
ossl_typ.h
pem.h
pem2.h
pkcs12.h
pkcs7.h
rand.h
rc2.h
rc4.h
rc5.h
ripemd.h
rsa.h
safestack.h
seed.h
sha.h
srp.h
srtp.h
ssl.h
ssl2.h
ssl3.h
stack.h
symhacks.h
tls1.h
ts.h
txt_db.h
ui.h
whrlpool.h
x509.h
x509_vfy.h
x509v3.h
/usr/include/errno.h
/usr/include/inttypes.h
/usr/include/limits.h
/usr/include/openssl/asn1.h
/usr/include/openssl/async.h
/usr/include/openssl/bio.h
/usr/include/openssl/bn.h
/usr/include/openssl/buffer.h
/usr/include/openssl/comp.h
/usr/include/openssl/conf.h
/usr/include/openssl/crypto.h
/usr/include/openssl/ct.h
/usr/include/openssl/des.h
/usr/include/openssl/dh.h
/usr/include/openssl/dsa.h
/usr/include/openssl/dtls1.h
/usr/include/openssl/e_os2.h
/usr/include/openssl/ebcdic.h
/usr/include/openssl/ec.h
/usr/include/openssl/err.h
/usr/include/openssl/evp.h
/usr/include/openssl/hmac.h
/usr/include/openssl/lhash.h
/usr/include/openssl/obj_mac.h
/usr/include/openssl/objects.h
/usr/include/openssl/opensslconf.h
/usr/include/openssl/opensslv.h
/usr/include/openssl/ossl_typ.h
/usr/include/openssl/pem.h
/usr/include/openssl/pem2.h
/usr/include/openssl/pkcs7.h
/usr/include/openssl/rand.h
/usr/include/openssl/rsa.h
/usr/include/openssl/safestack.h
/usr/include/openssl/sha.h
/usr/include/openssl/srtp.h
/usr/include/openssl/ssl.h
/usr/include/openssl/ssl2.h
/usr/include/openssl/ssl3.h
/usr/include/openssl/stack.h
/usr/include/openssl/symhacks.h
/usr/include/openssl/tls1.h
/usr/include/openssl/ui.h
/usr/include/openssl/x509.h
/usr/include/openssl/x509_vfy.h
/usr/include/openssl/x509v3.h
/usr/include/pthread.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/time.h
/usr/include/alloca.h
/usr/include/assert.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/openssl/des_old.h
/usr/include/openssl/ecdh.h
/usr/include/openssl/ecdsa.h
/usr/include/openssl/fips.h
/usr/include/openssl/kssl.h
/usr/include/openssl/pqueue.h
/usr/include/openssl/ssl23.h
/usr/include/sched.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/ctype.h
/usr/include/openssl/ui_compat.h
/usr/include/stdc-predef.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
